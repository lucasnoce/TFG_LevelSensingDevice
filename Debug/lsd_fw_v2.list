
lsd_fw_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000129a8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08012ab8  08012ab8  00013ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013068  08013068  00015358  2**0
                  CONTENTS
  4 .ARM          00000008  08013068  08013068  00014068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013070  08013070  00015358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013070  08013070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013074  08013074  00014074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  08013078  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002860  20000358  080133d0  00015358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002bb8  080133d0  00015bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00015358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021581  00000000  00000000  00015381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005914  00000000  00000000  00036902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c60  00000000  00000000  0003c218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015b7  00000000  00000000  0003de78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e932  00000000  00000000  0003f42f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000267cf  00000000  00000000  0005dd61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098964  00000000  00000000  00084530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ce94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008884  00000000  00000000  0011ced8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0012575c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	08012aa0 	.word	0x08012aa0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	08012aa0 	.word	0x08012aa0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <aht20_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t aht20_init( I2C_HandleTypeDef *hi2c ){
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	if( hi2c != NULL ){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00d      	beq.n	800113a <aht20_init+0x2a>
		aht20_hi2c = hi2c;
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <aht20_init+0x38>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6013      	str	r3, [r2, #0]
		uint8_t init_cmd = AHT20_I2C_CMD_INIT;
 8001124:	23be      	movs	r3, #190	@ 0xbe
 8001126:	73fb      	strb	r3, [r7, #15]
		return aht20_hal_i2c_transmit( AHT20_I2C_ADDR_WRITE, &init_cmd, 1 );
 8001128:	f107 030f 	add.w	r3, r7, #15
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	2070      	movs	r0, #112	@ 0x70
 8001132:	f000 f901 	bl	8001338 <aht20_hal_i2c_transmit>
 8001136:	4603      	mov	r3, r0
 8001138:	e001      	b.n	800113e <aht20_init+0x2e>
	}
	return LSD_ERR_NULL_HANDLE;
 800113a:	f06f 0302 	mvn.w	r3, #2
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000374 	.word	0x20000374

0800114c <aht20_update>:
		return aht20_hal_i2c_transmit( AHT20_I2C_ADDR_WRITE, &rst_cmd, 1 );
	}
	return LSD_ERR_DEVICE_BUSY;
}

int8_t aht20_update( void ){
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
	int ret = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]

	uint8_t trig_cmd[3] = {
 8001156:	4a3f      	ldr	r2, [pc, #252]	@ (8001254 <aht20_update+0x108>)
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	4611      	mov	r1, r2
 8001160:	8019      	strh	r1, [r3, #0]
 8001162:	3302      	adds	r3, #2
 8001164:	0c12      	lsrs	r2, r2, #16
 8001166:	701a      	strb	r2, [r3, #0]
		AHT20_I2C_CMD_TRIG_MEASURE,
		AHT20_I2C_TRIG_MEAS_DATA0,
		AHT20_I2C_TRIG_MEAS_DATA1
	};

	ret = aht20_hal_i2c_transmit( AHT20_I2C_ADDR_WRITE, trig_cmd, 3 );
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2203      	movs	r2, #3
 800116e:	4619      	mov	r1, r3
 8001170:	2070      	movs	r0, #112	@ 0x70
 8001172:	f000 f8e1 	bl	8001338 <aht20_hal_i2c_transmit>
 8001176:	4603      	mov	r3, r0
 8001178:	613b      	str	r3, [r7, #16]

	// wait at least 75ms
	// todo: add non-blocking function
	lsd_delay_ms( 80 );
 800117a:	2050      	movs	r0, #80	@ 0x50
 800117c:	f000 fcfc 	bl	8001b78 <lsd_delay_ms>

	uint8_t retry_count = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_buf[7] = {0};
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	2100      	movs	r1, #0
 800118e:	460a      	mov	r2, r1
 8001190:	801a      	strh	r2, [r3, #0]
 8001192:	460a      	mov	r2, r1
 8001194:	709a      	strb	r2, [r3, #2]

	do{
		ret = aht20_hal_i2c_receive( AHT20_I2C_ADDR_READ, rx_buf, 7 );
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2207      	movs	r2, #7
 800119a:	4619      	mov	r1, r3
 800119c:	2071      	movs	r0, #113	@ 0x71
 800119e:	f000 f8e9 	bl	8001374 <aht20_hal_i2c_receive>
 80011a2:	4603      	mov	r3, r0
 80011a4:	613b      	str	r3, [r7, #16]
		if( ret != HAL_OK ){
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00e      	beq.n	80011ca <aht20_update+0x7e>
			aht20_data.state.byte = 0;
 80011ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001258 <aht20_update+0x10c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
			aht20_data.humidity.word = 0;
 80011b2:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <aht20_update+0x10c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	605a      	str	r2, [r3, #4]
			aht20_data.temperature.word = 0;
 80011b8:	4b27      	ldr	r3, [pc, #156]	@ (8001258 <aht20_update+0x10c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
			aht20_data.check_sum = 0;
 80011be:	4b26      	ldr	r3, [pc, #152]	@ (8001258 <aht20_update+0x10c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	731a      	strb	r2, [r3, #12]
	//		*data = aht20_data;
			return ret;
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	e040      	b.n	800124c <aht20_update+0x100>
		}

		if( ++retry_count > 10 ){
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	3301      	adds	r3, #1
 80011ce:	75fb      	strb	r3, [r7, #23]
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	2b0a      	cmp	r3, #10
 80011d4:	d902      	bls.n	80011dc <aht20_update+0x90>
			return LSD_ERR_TIMEOUT;
 80011d6:	f06f 0301 	mvn.w	r3, #1
 80011da:	e037      	b.n	800124c <aht20_update+0x100>
		}

		lsd_delay_ms( 2 );
 80011dc:	2002      	movs	r0, #2
 80011de:	f000 fccb 	bl	8001b78 <lsd_delay_ms>
	} while( ( rx_buf[0] & 0x80 ) != AHT20_I2C_STATE_NOT_BUSY );
 80011e2:	793b      	ldrb	r3, [r7, #4]
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	dbd5      	blt.n	8001196 <aht20_update+0x4a>

	aht20_data.state.byte = rx_buf[0] & 0xFF;
 80011ea:	793a      	ldrb	r2, [r7, #4]
 80011ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <aht20_update+0x10c>)
 80011ee:	701a      	strb	r2, [r3, #0]

	aht20_data.humidity.bytes[0] = rx_buf[3] & 0xF0;
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f023 030f 	bic.w	r3, r3, #15
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <aht20_update+0x10c>)
 80011fa:	711a      	strb	r2, [r3, #4]
	aht20_data.humidity.bytes[1] = rx_buf[2];
 80011fc:	79ba      	ldrb	r2, [r7, #6]
 80011fe:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <aht20_update+0x10c>)
 8001200:	715a      	strb	r2, [r3, #5]
	aht20_data.humidity.bytes[2] = rx_buf[1];
 8001202:	797a      	ldrb	r2, [r7, #5]
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <aht20_update+0x10c>)
 8001206:	719a      	strb	r2, [r3, #6]
	aht20_data.humidity.word = ( aht20_data.humidity.word >> 4 ) & 0x0FFFFFFF;
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <aht20_update+0x10c>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	4a12      	ldr	r2, [pc, #72]	@ (8001258 <aht20_update+0x10c>)
 8001210:	6053      	str	r3, [r2, #4]

	aht20_data.temperature.bytes[0] = rx_buf[5];
 8001212:	7a7a      	ldrb	r2, [r7, #9]
 8001214:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <aht20_update+0x10c>)
 8001216:	721a      	strb	r2, [r3, #8]
	aht20_data.temperature.bytes[1] = rx_buf[4];
 8001218:	7a3a      	ldrb	r2, [r7, #8]
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <aht20_update+0x10c>)
 800121c:	725a      	strb	r2, [r3, #9]
	aht20_data.temperature.bytes[2] = rx_buf[3] & 0x0F;
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <aht20_update+0x10c>)
 8001228:	729a      	strb	r2, [r3, #10]

	aht20_data.check_sum = rx_buf[6];
 800122a:	7aba      	ldrb	r2, [r7, #10]
 800122c:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <aht20_update+0x10c>)
 800122e:	731a      	strb	r2, [r3, #12]

	if( aht20_data.check_sum != calculate_crc8( &rx_buf[0], 6 ) ){
 8001230:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <aht20_update+0x10c>)
 8001232:	7b1c      	ldrb	r4, [r3, #12]
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2106      	movs	r1, #6
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f8b9 	bl	80013b0 <calculate_crc8>
 800123e:	4603      	mov	r3, r0
 8001240:	429c      	cmp	r4, r3
 8001242:	d002      	beq.n	800124a <aht20_update+0xfe>
		return LSD_ERR_CRC_CHECK;
 8001244:	f06f 0305 	mvn.w	r3, #5
 8001248:	e000      	b.n	800124c <aht20_update+0x100>
	}

//	*data = aht20_data; // copy the contents of aht20_data to the variable pointed by data

	return LSD_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	371c      	adds	r7, #28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	08012ab8 	.word	0x08012ab8
 8001258:	20000378 	.word	0x20000378

0800125c <aht20_get_temperature_C>:

bool aht20_is_calibrated( void ){
	return aht20_data.state.bit.calibration ? true : false;
}

float aht20_get_temperature_C( void ){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
	float temp_raw = (float) aht20_data.temperature.word;
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <aht20_get_temperature_C+0x68>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fd14 	bl	8000c94 <__aeabi_ui2f>
 800126c:	4603      	mov	r3, r0
 800126e:	607b      	str	r3, [r7, #4]
	return (float) ( ( ( temp_raw / 1024.0 ) / 1024.0 ) * 200.0 ) - 50.0;
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff f8d9 	bl	8000428 <__aeabi_f2d>
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <aht20_get_temperature_C+0x6c>)
 800127c:	f7ff fa56 	bl	800072c <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <aht20_get_temperature_C+0x6c>)
 800128e:	f7ff fa4d 	bl	800072c <__aeabi_ddiv>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <aht20_get_temperature_C+0x70>)
 80012a0:	f7ff f91a 	bl	80004d8 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fbec 	bl	8000a88 <__aeabi_d2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4907      	ldr	r1, [pc, #28]	@ (80012d0 <aht20_get_temperature_C+0x74>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fc3b 	bl	8000b30 <__aeabi_fsub>
 80012ba:	4603      	mov	r3, r0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000378 	.word	0x20000378
 80012c8:	40900000 	.word	0x40900000
 80012cc:	40690000 	.word	0x40690000
 80012d0:	42480000 	.word	0x42480000

080012d4 <aht20_get_humidity_RH>:

float aht20_get_humidity_RH( void ){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	float rh_raw = (float) aht20_data.humidity.word;
 80012da:	4b14      	ldr	r3, [pc, #80]	@ (800132c <aht20_get_humidity_RH+0x58>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fcd8 	bl	8000c94 <__aeabi_ui2f>
 80012e4:	4603      	mov	r3, r0
 80012e6:	607b      	str	r3, [r7, #4]
	return (float) ( ( rh_raw / 1024.0 ) / 1024.0 ) * 100.0;
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff f89d 	bl	8000428 <__aeabi_f2d>
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <aht20_get_humidity_RH+0x5c>)
 80012f4:	f7ff fa1a 	bl	800072c <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <aht20_get_humidity_RH+0x5c>)
 8001306:	f7ff fa11 	bl	800072c <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fbb9 	bl	8000a88 <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	4906      	ldr	r1, [pc, #24]	@ (8001334 <aht20_get_humidity_RH+0x60>)
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fd12 	bl	8000d44 <__aeabi_fmul>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000378 	.word	0x20000378
 8001330:	40900000 	.word	0x40900000
 8001334:	42c80000 	.word	0x42c80000

08001338 <aht20_hal_i2c_transmit>:


/* ==========================================================================================================
 * Local Functions Implementation
 */
static int8_t aht20_hal_i2c_transmit( uint16_t dev_addr, uint8_t *p_buf, uint16_t buf_size ){
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af02      	add	r7, sp, #8
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	80fb      	strh	r3, [r7, #6]
 8001344:	4613      	mov	r3, r2
 8001346:	80bb      	strh	r3, [r7, #4]
	int8_t ret = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]
	LSD_I2C_IRQ_DEV_ID_DMA_TX = LSD_I2C_IRQ_DEV_ID_AHT20;
#elif defined( LSD_CONFIG_I2C_IT )
	ret = HAL_I2C_Master_Transmit_IT( aht20_hi2c, dev_addr, p_buf, buf_size );
	LSD_I2C_IRQ_DEV_ID_IT_TX = LSD_I2C_IRQ_DEV_ID_AHT20;
#else
	ret = HAL_I2C_Master_Transmit( aht20_hi2c, dev_addr, p_buf, buf_size, 1000 );
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <aht20_hal_i2c_transmit+0x38>)
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	88bb      	ldrh	r3, [r7, #4]
 8001352:	88f9      	ldrh	r1, [r7, #6]
 8001354:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001358:	9200      	str	r2, [sp, #0]
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	f003 fb3c 	bl	80049d8 <HAL_I2C_Master_Transmit>
 8001360:	4603      	mov	r3, r0
 8001362:	73fb      	strb	r3, [r7, #15]
#endif /* LSD_CONFIG_I2C_DMA || LSD_CONFIG_I2C_IT */

	return ret;
 8001364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000374 	.word	0x20000374

08001374 <aht20_hal_i2c_receive>:

static int8_t aht20_hal_i2c_receive( uint16_t dev_addr, uint8_t *p_buf, uint16_t buf_size ){
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af02      	add	r7, sp, #8
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	80fb      	strh	r3, [r7, #6]
 8001380:	4613      	mov	r3, r2
 8001382:	80bb      	strh	r3, [r7, #4]
	int8_t ret = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]
	LSD_I2C_IRQ_DEV_ID_DMA_RX = LSD_I2C_IRQ_DEV_ID_AHT20;
#elif defined( LSD_CONFIG_I2C_IT )
	ret = HAL_I2C_Master_Receive_IT( aht20_hi2c, dev_addr, p_buf, buf_size );
	LSD_I2C_IRQ_DEV_ID_IT_RX = LSD_I2C_IRQ_DEV_ID_AHT20;
#else
	ret = HAL_I2C_Master_Receive( aht20_hi2c, dev_addr, p_buf, buf_size, 1000 );
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <aht20_hal_i2c_receive+0x38>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	88bb      	ldrh	r3, [r7, #4]
 800138e:	88f9      	ldrh	r1, [r7, #6]
 8001390:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001394:	9200      	str	r2, [sp, #0]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	f003 fc1c 	bl	8004bd4 <HAL_I2C_Master_Receive>
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]
#endif /* LSD_CONFIG_I2C_DMA || LSD_CONFIG_I2C_IT */

	return ret;
 80013a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000374 	.word	0x20000374

080013b0 <calculate_crc8>:

static uint8_t calculate_crc8( uint8_t *data, uint8_t length ){
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 80013bc:	23ff      	movs	r3, #255	@ 0xff
 80013be:	73fb      	strb	r3, [r7, #15]
    uint8_t polynomial = 0x31;
 80013c0:	2331      	movs	r3, #49	@ 0x31
 80013c2:	733b      	strb	r3, [r7, #12]

	for (uint8_t byte_idx=0; byte_idx<length; byte_idx++){
 80013c4:	2300      	movs	r3, #0
 80013c6:	73bb      	strb	r3, [r7, #14]
 80013c8:	e022      	b.n	8001410 <calculate_crc8+0x60>
		crc ^= data[byte_idx];
 80013ca:	7bbb      	ldrb	r3, [r7, #14]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	781a      	ldrb	r2, [r3, #0]
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	4053      	eors	r3, r2
 80013d6:	73fb      	strb	r3, [r7, #15]
		for (uint8_t bit_idx=8; bit_idx>0; --bit_idx){
 80013d8:	2308      	movs	r3, #8
 80013da:	737b      	strb	r3, [r7, #13]
 80013dc:	e012      	b.n	8001404 <calculate_crc8+0x54>
			if (crc & 0x80){
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da08      	bge.n	80013f8 <calculate_crc8+0x48>
				crc = ( crc << 1 ) ^ polynomial;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	b25a      	sxtb	r2, r3
 80013ec:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80013f0:	4053      	eors	r3, r2
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	e002      	b.n	80013fe <calculate_crc8+0x4e>
			}
			else{
				crc <<= 1;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
		for (uint8_t bit_idx=8; bit_idx>0; --bit_idx){
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	3b01      	subs	r3, #1
 8001402:	737b      	strb	r3, [r7, #13]
 8001404:	7b7b      	ldrb	r3, [r7, #13]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1e9      	bne.n	80013de <calculate_crc8+0x2e>
	for (uint8_t byte_idx=0; byte_idx<length; byte_idx++){
 800140a:	7bbb      	ldrb	r3, [r7, #14]
 800140c:	3301      	adds	r3, #1
 800140e:	73bb      	strb	r3, [r7, #14]
 8001410:	7bba      	ldrb	r2, [r7, #14]
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	429a      	cmp	r2, r3
 8001416:	d3d8      	bcc.n	80013ca <calculate_crc8+0x1a>
			}
		}
	}

    return crc;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <ajsr04m_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t ajsr04m_init( TIM_HandleTypeDef *htim ){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	if ( htim != NULL ){
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d01d      	beq.n	800146e <ajsr04m_init+0x4a>
		p_ajsr04m_htim = htim;
 8001432:	4a12      	ldr	r2, [pc, #72]	@ (800147c <ajsr04m_init+0x58>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6013      	str	r3, [r2, #0]

		ajsr04m_data.port = US_ECHO_GPIO_Port;
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <ajsr04m_init+0x5c>)
 800143a:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <ajsr04m_init+0x60>)
 800143c:	601a      	str	r2, [r3, #0]
		ajsr04m_data.pin_echo = US_ECHO_Pin;
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <ajsr04m_init+0x5c>)
 8001440:	2201      	movs	r2, #1
 8001442:	809a      	strh	r2, [r3, #4]
		ajsr04m_data.pin_trig = US_TRIG_Pin;
 8001444:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <ajsr04m_init+0x5c>)
 8001446:	2202      	movs	r2, #2
 8001448:	80da      	strh	r2, [r3, #6]
		ajsr04m_data.tof_ticks = 0;
 800144a:	4b0d      	ldr	r3, [pc, #52]	@ (8001480 <ajsr04m_init+0x5c>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
		ajsr04m_data.measuring = false;
 8001450:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <ajsr04m_init+0x5c>)
 8001452:	2200      	movs	r2, #0
 8001454:	731a      	strb	r2, [r3, #12]
		ajsr04m_data.tof = 0.0;
 8001456:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <ajsr04m_init+0x5c>)
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	611a      	str	r2, [r3, #16]

		return HAL_TIM_Base_Start( p_ajsr04m_htim );
 800145e:	4b07      	ldr	r3, [pc, #28]	@ (800147c <ajsr04m_init+0x58>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f007 fc0e 	bl	8008c84 <HAL_TIM_Base_Start>
 8001468:	4603      	mov	r3, r0
 800146a:	b25b      	sxtb	r3, r3
 800146c:	e001      	b.n	8001472 <ajsr04m_init+0x4e>
	}
	return LSD_ERR_NULL_HANDLE;
 800146e:	f06f 0302 	mvn.w	r3, #2
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000388 	.word	0x20000388
 8001480:	2000038c 	.word	0x2000038c
 8001484:	40010c00 	.word	0x40010c00

08001488 <ajsr04m_read_tof_exti>:
	ajsr04m_data.measuring = false;

	return LSD_OK;
}

int8_t ajsr04m_read_tof_exti( void ){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	ajsr04m_trigger_measurement();
 800148c:	f000 f85e 	bl	800154c <ajsr04m_trigger_measurement>
	return LSD_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <ajsr04m_get_tof_ms>:
//static volatile int tim_flag;
float ajsr04m_get_tof_ms( void ){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Stop( p_ajsr04m_htim );
//	__HAL_TIM_SET_COUNTER( p_ajsr04m_htim, 0 );

	if( ajsr04m_data.measuring == false ){
 800149c:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <ajsr04m_get_tof_ms+0x58>)
 800149e:	7b1b      	ldrb	r3, [r3, #12]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f083 0301 	eor.w	r3, r3, #1
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d019      	beq.n	80014e0 <ajsr04m_get_tof_ms+0x48>
//		int ret = tim_flag ;
		ajsr04m_data.tof = (float) ajsr04m_data.tof_ticks / 10000.0;		// translates to miliseconds
 80014ac:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <ajsr04m_get_tof_ms+0x58>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fbef 	bl	8000c94 <__aeabi_ui2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffb5 	bl	8000428 <__aeabi_f2d>
 80014be:	a30a      	add	r3, pc, #40	@ (adr r3, 80014e8 <ajsr04m_get_tof_ms+0x50>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f932 	bl	800072c <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff fada 	bl	8000a88 <__aeabi_d2f>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4a06      	ldr	r2, [pc, #24]	@ (80014f0 <ajsr04m_get_tof_ms+0x58>)
 80014d8:	6113      	str	r3, [r2, #16]
		return ajsr04m_data.tof;
 80014da:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <ajsr04m_get_tof_ms+0x58>)
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	e000      	b.n	80014e2 <ajsr04m_get_tof_ms+0x4a>
	}
	return LSD_ERR_DEVICE_BUSY;
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <ajsr04m_get_tof_ms+0x5c>)
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	00000000 	.word	0x00000000
 80014ec:	40c38800 	.word	0x40c38800
 80014f0:	2000038c 	.word	0x2000038c
 80014f4:	c0a00000 	.word	0xc0a00000

080014f8 <ajsr04m_callback_handler_echo_start>:

void ajsr04m_callback_handler_echo_start( void ){
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Start( p_ajsr04m_htim );
	__HAL_TIM_SET_COUNTER( p_ajsr04m_htim, 0 );
 80014fc:	4b07      	ldr	r3, [pc, #28]	@ (800151c <ajsr04m_callback_handler_echo_start+0x24>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	@ 0x24
//	__HAL_TIM_CLEAR_FLAG(p_ajsr04m_htim, TIM_FLAG_UPDATE);
	ajsr04m_data.tof_ticks = 0;
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <ajsr04m_callback_handler_echo_start+0x28>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
	ajsr04m_data.measuring = true;
 800150c:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <ajsr04m_callback_handler_echo_start+0x28>)
 800150e:	2201      	movs	r2, #1
 8001510:	731a      	strb	r2, [r3, #12]
	return;
 8001512:	bf00      	nop
}
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000388 	.word	0x20000388
 8001520:	2000038c 	.word	0x2000038c

08001524 <ajsr04m_callback_handler_echo_finish>:

void ajsr04m_callback_handler_echo_finish( void ){
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	ajsr04m_data.tof_ticks = __HAL_TIM_GET_COUNTER( p_ajsr04m_htim );
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <ajsr04m_callback_handler_echo_finish+0x20>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001530:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <ajsr04m_callback_handler_echo_finish+0x24>)
 8001532:	6093      	str	r3, [r2, #8]
	ajsr04m_data.measuring = false;
 8001534:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <ajsr04m_callback_handler_echo_finish+0x24>)
 8001536:	2200      	movs	r2, #0
 8001538:	731a      	strb	r2, [r3, #12]
//	tim_flag = __HAL_TIM_GET_FLAG(p_ajsr04m_htim, TIM_FLAG_UPDATE);
//	HAL_TIM_Base_Stop( p_ajsr04m_htim );
	return;
 800153a:	bf00      	nop
}
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000388 	.word	0x20000388
 8001548:	2000038c 	.word	0x2000038c

0800154c <ajsr04m_trigger_measurement>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static void ajsr04m_trigger_measurement( void ){
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( ajsr04m_data.port, ajsr04m_data.pin_trig, GPIO_PIN_SET );
 8001550:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <ajsr04m_trigger_measurement+0x30>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a09      	ldr	r2, [pc, #36]	@ (800157c <ajsr04m_trigger_measurement+0x30>)
 8001556:	88d1      	ldrh	r1, [r2, #6]
 8001558:	2201      	movs	r2, #1
 800155a:	4618      	mov	r0, r3
 800155c:	f003 f8c7 	bl	80046ee <HAL_GPIO_WritePin>

//	HAL_TIM_Base_Start( p_ajsr04m_htim );
//	__HAL_TIM_SET_COUNTER( p_ajsr04m_htim, 0 );
	lsd_delay_us( AJSR04M_TRIG_MIN_DELAY_US );
 8001560:	f240 404c 	movw	r0, #1100	@ 0x44c
 8001564:	f000 fae0 	bl	8001b28 <lsd_delay_us>

	HAL_GPIO_WritePin( ajsr04m_data.port, ajsr04m_data.pin_trig, GPIO_PIN_RESET );
 8001568:	4b04      	ldr	r3, [pc, #16]	@ (800157c <ajsr04m_trigger_measurement+0x30>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a03      	ldr	r2, [pc, #12]	@ (800157c <ajsr04m_trigger_measurement+0x30>)
 800156e:	88d1      	ldrh	r1, [r2, #6]
 8001570:	2200      	movs	r2, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f003 f8bb 	bl	80046ee <HAL_GPIO_WritePin>
	return;
 8001578:	bf00      	nop
}
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000038c 	.word	0x2000038c

08001580 <le910r1br_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t le910r1br_init( UART_HandleTypeDef *huart, TIM_HandleTypeDef *htim ){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
	if( huart != NULL && htim != NULL ){
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d01f      	beq.n	80015d0 <le910r1br_init+0x50>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d01c      	beq.n	80015d0 <le910r1br_init+0x50>
		p_modem_huart  = huart;
 8001596:	4a11      	ldr	r2, [pc, #68]	@ (80015dc <le910r1br_init+0x5c>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6013      	str	r3, [r2, #0]
		p_modem_htim   = htim;
 800159c:	4a10      	ldr	r2, [pc, #64]	@ (80015e0 <le910r1br_init+0x60>)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6013      	str	r3, [r2, #0]

		modem_data.tim_channel  = TIM_CHANNEL_3;	// todo: select correct channel
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <le910r1br_init+0x64>)
 80015a4:	2208      	movs	r2, #8
 80015a6:	701a      	strb	r2, [r3, #0]
		modem_data.port_pwr		= uLTE_PWR_GPIO_Port;
 80015a8:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <le910r1br_init+0x64>)
 80015aa:	4a0f      	ldr	r2, [pc, #60]	@ (80015e8 <le910r1br_init+0x68>)
 80015ac:	605a      	str	r2, [r3, #4]
		modem_data.pin_pwr 		= uLTE_PWR_Pin;
 80015ae:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <le910r1br_init+0x64>)
 80015b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b4:	811a      	strh	r2, [r3, #8]
		modem_data.ready 		= false;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <le910r1br_init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	729a      	strb	r2, [r3, #10]

		HAL_GPIO_WritePin( modem_data.port_pwr, modem_data.pin_pwr, GPIO_PIN_RESET );
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <le910r1br_init+0x64>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <le910r1br_init+0x64>)
 80015c2:	8911      	ldrh	r1, [r2, #8]
 80015c4:	2200      	movs	r2, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 f891 	bl	80046ee <HAL_GPIO_WritePin>

		return LSD_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	e001      	b.n	80015d4 <le910r1br_init+0x54>
	}
	return LSD_ERR_NULL_HANDLE;
 80015d0:	f06f 0302 	mvn.w	r3, #2
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200003a0 	.word	0x200003a0
 80015e0:	200003a4 	.word	0x200003a4
 80015e4:	200003a8 	.word	0x200003a8
 80015e8:	40010c00 	.word	0x40010c00

080015ec <leds_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t leds_init( TIM_HandleTypeDef *htim ){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	if( htim != NULL ){
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d04c      	beq.n	8001694 <leds_init+0xa8>
		p_leds_htim = htim;
 80015fa:	4a29      	ldr	r2, [pc, #164]	@ (80016a0 <leds_init+0xb4>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6013      	str	r3, [r2, #0]

		leds_data[LSD_LED_BLUE].channel = TIM_CHANNEL_1;
 8001600:	4b28      	ldr	r3, [pc, #160]	@ (80016a4 <leds_init+0xb8>)
 8001602:	2200      	movs	r2, #0
 8001604:	741a      	strb	r2, [r3, #16]
		leds_data[LSD_LED_RED].channel = TIM_CHANNEL_2;
 8001606:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <leds_init+0xb8>)
 8001608:	2204      	movs	r2, #4
 800160a:	701a      	strb	r2, [r3, #0]

		leds_data[LSD_LED_BLUE].pin = LED_INFO1_Pin;
 800160c:	4b25      	ldr	r3, [pc, #148]	@ (80016a4 <leds_init+0xb8>)
 800160e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001612:	831a      	strh	r2, [r3, #24]
		leds_data[LSD_LED_RED].pin = LED_INFO2_Pin;
 8001614:	4b23      	ldr	r3, [pc, #140]	@ (80016a4 <leds_init+0xb8>)
 8001616:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800161a:	811a      	strh	r2, [r3, #8]

		leds_data[LSD_LED_BLUE].port = LED_INFO1_GPIO_Port;
 800161c:	4b21      	ldr	r3, [pc, #132]	@ (80016a4 <leds_init+0xb8>)
 800161e:	4a22      	ldr	r2, [pc, #136]	@ (80016a8 <leds_init+0xbc>)
 8001620:	615a      	str	r2, [r3, #20]
		leds_data[LSD_LED_RED].port = LED_INFO2_GPIO_Port;
 8001622:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <leds_init+0xb8>)
 8001624:	4a20      	ldr	r2, [pc, #128]	@ (80016a8 <leds_init+0xbc>)
 8001626:	605a      	str	r2, [r3, #4]

		leds_data[LSD_LED_BLUE].state = GPIO_PIN_SET;
 8001628:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <leds_init+0xb8>)
 800162a:	2201      	movs	r2, #1
 800162c:	769a      	strb	r2, [r3, #26]
		leds_data[LSD_LED_RED].state = GPIO_PIN_SET;
 800162e:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <leds_init+0xb8>)
 8001630:	2201      	movs	r2, #1
 8001632:	729a      	strb	r2, [r3, #10]

		leds_data[LSD_LED_BLUE].blink_half_period = 0;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <leds_init+0xb8>)
 8001636:	2200      	movs	r2, #0
 8001638:	839a      	strh	r2, [r3, #28]
		leds_data[LSD_LED_RED].blink_half_period = 0;
 800163a:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <leds_init+0xb8>)
 800163c:	2200      	movs	r2, #0
 800163e:	819a      	strh	r2, [r3, #12]

		leds_data[LSD_LED_BLUE].single_blink = false;
 8001640:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <leds_init+0xb8>)
 8001642:	2200      	movs	r2, #0
 8001644:	779a      	strb	r2, [r3, #30]
		leds_data[LSD_LED_RED].single_blink = false;
 8001646:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <leds_init+0xb8>)
 8001648:	2200      	movs	r2, #0
 800164a:	739a      	strb	r2, [r3, #14]

//		HAL_GPIO_WritePin( LED_INFO1_GPIO_Port, LED_INFO1_Pin, GPIO_PIN_RESET );
//		HAL_GPIO_WritePin( LED_INFO2_GPIO_Port, LED_INFO2_Pin, GPIO_PIN_RESET );

		int8_t ret = HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	73fb      	strb	r3, [r7, #15]
		ret = HAL_TIM_Base_Start_IT( htim );
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f007 fb87 	bl	8008d64 <HAL_TIM_Base_Start_IT>
 8001656:	4603      	mov	r3, r0
 8001658:	73fb      	strb	r3, [r7, #15]
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	e013      	b.n	8001688 <leds_init+0x9c>
			ret += HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[i].channel );
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <leds_init+0xb4>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	490f      	ldr	r1, [pc, #60]	@ (80016a4 <leds_init+0xb8>)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	440b      	add	r3, r1
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4619      	mov	r1, r3
 8001670:	4610      	mov	r0, r2
 8001672:	f007 fd11 	bl	8009098 <HAL_TIM_OC_Stop_IT>
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	4413      	add	r3, r2
 800167e:	b2db      	uxtb	r3, r3
 8001680:	73fb      	strb	r3, [r7, #15]
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3301      	adds	r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b01      	cmp	r3, #1
 800168c:	dde8      	ble.n	8001660 <leds_init+0x74>
		}

		return ret;
 800168e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001692:	e001      	b.n	8001698 <leds_init+0xac>
	}
	return LSD_ERR_NULL_HANDLE;
 8001694:	f06f 0302 	mvn.w	r3, #2
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200003b4 	.word	0x200003b4
 80016a4:	200003b8 	.word	0x200003b8
 80016a8:	40011000 	.word	0x40011000

080016ac <leds_turn_on>:

int8_t leds_turn_on( uint8_t led ){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
	int8_t ret = LSD_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73fb      	strb	r3, [r7, #15]
	if( led < 0 || led > LSD_ALL_LEDS ){
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d902      	bls.n	80016c6 <leds_turn_on+0x1a>
		return LSD_ERR_WRONG_PARAM;
 80016c0:	f06f 0303 	mvn.w	r3, #3
 80016c4:	e043      	b.n	800174e <leds_turn_on+0xa2>
	}
	else if( led < LSD_ALL_LEDS ){
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d817      	bhi.n	80016fc <leds_turn_on+0x50>
		HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[led].channel );
 80016cc:	4b22      	ldr	r3, [pc, #136]	@ (8001758 <leds_turn_on+0xac>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	4922      	ldr	r1, [pc, #136]	@ (800175c <leds_turn_on+0xb0>)
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	440b      	add	r3, r1
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f007 fcdb 	bl	8009098 <HAL_TIM_OC_Stop_IT>
		leds_data[led].state = GPIO_PIN_SET;
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	4a1d      	ldr	r2, [pc, #116]	@ (800175c <leds_turn_on+0xb0>)
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	4413      	add	r3, r2
 80016ea:	330a      	adds	r3, #10
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
		leds_write_value( led, GPIO_PIN_SET );
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	2101      	movs	r1, #1
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f93d 	bl	8001974 <leds_write_value>
 80016fa:	e026      	b.n	800174a <leds_turn_on+0x9e>
	}
	else{
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	e020      	b.n	8001744 <leds_turn_on+0x98>
			ret += HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[i].channel );
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <leds_turn_on+0xac>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4915      	ldr	r1, [pc, #84]	@ (800175c <leds_turn_on+0xb0>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	440b      	add	r3, r1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	4610      	mov	r0, r2
 8001714:	f007 fcc0 	bl	8009098 <HAL_TIM_OC_Stop_IT>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	4413      	add	r3, r2
 8001720:	b2db      	uxtb	r3, r3
 8001722:	73fb      	strb	r3, [r7, #15]
			leds_data[i].state = GPIO_PIN_SET;
 8001724:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <leds_turn_on+0xb0>)
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	4413      	add	r3, r2
 800172c:	330a      	adds	r3, #10
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
			leds_write_value( i, GPIO_PIN_SET );
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2101      	movs	r1, #1
 8001738:	4618      	mov	r0, r3
 800173a:	f000 f91b 	bl	8001974 <leds_write_value>
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	3301      	adds	r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b01      	cmp	r3, #1
 8001748:	dddb      	ble.n	8001702 <leds_turn_on+0x56>
		}
	}
	return ret;
 800174a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200003b4 	.word	0x200003b4
 800175c:	200003b8 	.word	0x200003b8

08001760 <leds_turn_off>:

int8_t leds_turn_off( uint8_t led ){
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
	if( led < 0 || led > LSD_ALL_LEDS ){
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d902      	bls.n	8001776 <leds_turn_off+0x16>
		return LSD_ERR_WRONG_PARAM;
 8001770:	f06f 0303 	mvn.w	r3, #3
 8001774:	e03c      	b.n	80017f0 <leds_turn_off+0x90>
	}
	else if( led < LSD_ALL_LEDS ){
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d817      	bhi.n	80017ac <leds_turn_off+0x4c>
		HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[led].channel );
 800177c:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <leds_turn_off+0x98>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	491e      	ldr	r1, [pc, #120]	@ (80017fc <leds_turn_off+0x9c>)
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	440b      	add	r3, r1
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4619      	mov	r1, r3
 800178c:	4610      	mov	r0, r2
 800178e:	f007 fc83 	bl	8009098 <HAL_TIM_OC_Stop_IT>
		leds_data[led].state = GPIO_PIN_RESET;
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	4a19      	ldr	r2, [pc, #100]	@ (80017fc <leds_turn_off+0x9c>)
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	4413      	add	r3, r2
 800179a:	330a      	adds	r3, #10
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
		leds_write_value( led, GPIO_PIN_RESET );
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f8e5 	bl	8001974 <leds_write_value>
 80017aa:	e020      	b.n	80017ee <leds_turn_off+0x8e>
	}
	else{
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e01a      	b.n	80017e8 <leds_turn_off+0x88>
			HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[i].channel );
 80017b2:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <leds_turn_off+0x98>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4911      	ldr	r1, [pc, #68]	@ (80017fc <leds_turn_off+0x9c>)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	440b      	add	r3, r1
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4610      	mov	r0, r2
 80017c4:	f007 fc68 	bl	8009098 <HAL_TIM_OC_Stop_IT>
			leds_data[i].state = GPIO_PIN_RESET;
 80017c8:	4a0c      	ldr	r2, [pc, #48]	@ (80017fc <leds_turn_off+0x9c>)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	4413      	add	r3, r2
 80017d0:	330a      	adds	r3, #10
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
			leds_write_value( i, GPIO_PIN_RESET );
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 f8c9 	bl	8001974 <leds_write_value>
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3301      	adds	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	dde1      	ble.n	80017b2 <leds_turn_off+0x52>
		}
	}
	return LSD_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200003b4 	.word	0x200003b4
 80017fc:	200003b8 	.word	0x200003b8

08001800 <leds_blink_fast>:
		}
	}
	return LSD_OK;
}

int8_t leds_blink_fast( uint8_t led ){
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
	if( led < 0 || led > LSD_ALL_LEDS ){
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d902      	bls.n	8001816 <leds_blink_fast+0x16>
		return LSD_ERR_WRONG_PARAM;
 8001810:	f06f 0303 	mvn.w	r3, #3
 8001814:	e061      	b.n	80018da <leds_blink_fast+0xda>
	}
	else if( led < LSD_ALL_LEDS ){
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d829      	bhi.n	8001870 <leds_blink_fast+0x70>
		leds_data[led].blink_half_period = LEDS_FAST_HALF_PERIOD_MS;
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4a31      	ldr	r2, [pc, #196]	@ (80018e4 <leds_blink_fast+0xe4>)
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4413      	add	r3, r2
 8001824:	330c      	adds	r3, #12
 8001826:	2264      	movs	r2, #100	@ 0x64
 8001828:	801a      	strh	r2, [r3, #0]
		leds_data[led].single_blink = false;
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4a2d      	ldr	r2, [pc, #180]	@ (80018e4 <leds_blink_fast+0xe4>)
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	4413      	add	r3, r2
 8001832:	330e      	adds	r3, #14
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
		leds_data[led].state = GPIO_PIN_RESET;
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	4a2a      	ldr	r2, [pc, #168]	@ (80018e4 <leds_blink_fast+0xe4>)
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4413      	add	r3, r2
 8001840:	330a      	adds	r3, #10
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
		leds_write_value( led, GPIO_PIN_RESET );
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f892 	bl	8001974 <leds_write_value>
		HAL_TIM_OC_Start_IT( p_leds_htim, leds_data[led].channel );
 8001850:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <leds_blink_fast+0xe8>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	4923      	ldr	r1, [pc, #140]	@ (80018e4 <leds_blink_fast+0xe4>)
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	440b      	add	r3, r1
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4619      	mov	r1, r3
 8001860:	4610      	mov	r0, r2
 8001862:	f007 fb29 	bl	8008eb8 <HAL_TIM_OC_Start_IT>
		leds_timer_set_compare_value( led );
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	4618      	mov	r0, r3
 800186a:	f000 f8a1 	bl	80019b0 <leds_timer_set_compare_value>
 800186e:	e033      	b.n	80018d8 <leds_blink_fast+0xd8>
	}
	else{
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e02d      	b.n	80018d2 <leds_blink_fast+0xd2>
			leds_data[i].blink_half_period = LEDS_FAST_HALF_PERIOD_MS;
 8001876:	4a1b      	ldr	r2, [pc, #108]	@ (80018e4 <leds_blink_fast+0xe4>)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	4413      	add	r3, r2
 800187e:	330c      	adds	r3, #12
 8001880:	2264      	movs	r2, #100	@ 0x64
 8001882:	801a      	strh	r2, [r3, #0]
			leds_data[i].single_blink = false;
 8001884:	4a17      	ldr	r2, [pc, #92]	@ (80018e4 <leds_blink_fast+0xe4>)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	4413      	add	r3, r2
 800188c:	330e      	adds	r3, #14
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
			leds_data[i].state = GPIO_PIN_RESET;
 8001892:	4a14      	ldr	r2, [pc, #80]	@ (80018e4 <leds_blink_fast+0xe4>)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	4413      	add	r3, r2
 800189a:	330a      	adds	r3, #10
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
			leds_write_value( i, GPIO_PIN_RESET );
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f864 	bl	8001974 <leds_write_value>
			HAL_TIM_OC_Start_IT( p_leds_htim, leds_data[i].channel );
 80018ac:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <leds_blink_fast+0xe8>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	490c      	ldr	r1, [pc, #48]	@ (80018e4 <leds_blink_fast+0xe4>)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	440b      	add	r3, r1
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	4619      	mov	r1, r3
 80018bc:	4610      	mov	r0, r2
 80018be:	f007 fafb 	bl	8008eb8 <HAL_TIM_OC_Start_IT>
			leds_timer_set_compare_value( i );
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f872 	bl	80019b0 <leds_timer_set_compare_value>
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3301      	adds	r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	ddce      	ble.n	8001876 <leds_blink_fast+0x76>
		}
	}
	return LSD_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200003b8 	.word	0x200003b8
 80018e8:	200003b4 	.word	0x200003b4

080018ec <leds_callback_handler>:
		}
	}
	return LSD_OK;
}

void leds_callback_handler( uint8_t led ){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
	leds_data[led].state = ! leds_data[led].state;
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	4a1c      	ldr	r2, [pc, #112]	@ (800196c <leds_callback_handler+0x80>)
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	4413      	add	r3, r2
 80018fe:	330a      	adds	r3, #10
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf0c      	ite	eq
 8001906:	2301      	moveq	r3, #1
 8001908:	2300      	movne	r3, #0
 800190a:	b2da      	uxtb	r2, r3
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	4611      	mov	r1, r2
 8001910:	4a16      	ldr	r2, [pc, #88]	@ (800196c <leds_callback_handler+0x80>)
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	4413      	add	r3, r2
 8001916:	330a      	adds	r3, #10
 8001918:	460a      	mov	r2, r1
 800191a:	701a      	strb	r2, [r3, #0]
	leds_write_value( led, leds_data[led].state );
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	4a13      	ldr	r2, [pc, #76]	@ (800196c <leds_callback_handler+0x80>)
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	4413      	add	r3, r2
 8001924:	330a      	adds	r3, #10
 8001926:	781a      	ldrb	r2, [r3, #0]
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f000 f821 	bl	8001974 <leds_write_value>

	if( leds_data[led].single_blink == true ){
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4a0d      	ldr	r2, [pc, #52]	@ (800196c <leds_callback_handler+0x80>)
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	4413      	add	r3, r2
 800193a:	330e      	adds	r3, #14
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <leds_callback_handler+0x6e>
		HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[led].channel );
 8001942:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <leds_callback_handler+0x84>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	4908      	ldr	r1, [pc, #32]	@ (800196c <leds_callback_handler+0x80>)
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	440b      	add	r3, r1
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	4610      	mov	r0, r2
 8001954:	f007 fba0 	bl	8009098 <HAL_TIM_OC_Stop_IT>
	}
	else{
		leds_timer_set_compare_value( led );
	}

	return;
 8001958:	e004      	b.n	8001964 <leds_callback_handler+0x78>
		leds_timer_set_compare_value( led );
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f000 f827 	bl	80019b0 <leds_timer_set_compare_value>
	return;
 8001962:	bf00      	nop
}
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200003b8 	.word	0x200003b8
 8001970:	200003b4 	.word	0x200003b4

08001974 <leds_write_value>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static inline void leds_write_value( uint8_t led, uint8_t value ){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	460a      	mov	r2, r1
 800197e:	71fb      	strb	r3, [r7, #7]
 8001980:	4613      	mov	r3, r2
 8001982:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin( leds_data[led].port, leds_data[led].pin, value );
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	4a09      	ldr	r2, [pc, #36]	@ (80019ac <leds_write_value+0x38>)
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4413      	add	r3, r2
 800198c:	3304      	adds	r3, #4
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	4a06      	ldr	r2, [pc, #24]	@ (80019ac <leds_write_value+0x38>)
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	4413      	add	r3, r2
 8001998:	3308      	adds	r3, #8
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	79ba      	ldrb	r2, [r7, #6]
 800199e:	4619      	mov	r1, r3
 80019a0:	f002 fea5 	bl	80046ee <HAL_GPIO_WritePin>
	return;
 80019a4:	bf00      	nop
}
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200003b8 	.word	0x200003b8

080019b0 <leds_timer_set_compare_value>:

static inline void leds_timer_set_compare_value( uint8_t led ){
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
	uint32_t current_count = __HAL_TIM_GET_COUNTER( p_leds_htim );
 80019ba:	4b20      	ldr	r3, [pc, #128]	@ (8001a3c <leds_timer_set_compare_value+0x8c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c2:	60fb      	str	r3, [r7, #12]
	uint32_t new_count = current_count + (uint32_t) leds_data[led].blink_half_period;
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a40 <leds_timer_set_compare_value+0x90>)
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4413      	add	r3, r2
 80019cc:	330c      	adds	r3, #12
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4413      	add	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE( p_leds_htim, leds_data[led].channel, new_count );
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	4a19      	ldr	r2, [pc, #100]	@ (8001a40 <leds_timer_set_compare_value+0x90>)
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	4413      	add	r3, r2
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d105      	bne.n	80019f2 <leds_timer_set_compare_value+0x42>
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <leds_timer_set_compare_value+0x8c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	635a      	str	r2, [r3, #52]	@ 0x34
	return;
 80019f0:	e01f      	b.n	8001a32 <leds_timer_set_compare_value+0x82>
	__HAL_TIM_SET_COMPARE( p_leds_htim, leds_data[led].channel, new_count );
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	4a12      	ldr	r2, [pc, #72]	@ (8001a40 <leds_timer_set_compare_value+0x90>)
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d105      	bne.n	8001a0c <leds_timer_set_compare_value+0x5c>
 8001a00:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <leds_timer_set_compare_value+0x8c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	6393      	str	r3, [r2, #56]	@ 0x38
	return;
 8001a0a:	e012      	b.n	8001a32 <leds_timer_set_compare_value+0x82>
	__HAL_TIM_SET_COMPARE( p_leds_htim, leds_data[led].channel, new_count );
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a40 <leds_timer_set_compare_value+0x90>)
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d105      	bne.n	8001a26 <leds_timer_set_compare_value+0x76>
 8001a1a:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <leds_timer_set_compare_value+0x8c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	63d3      	str	r3, [r2, #60]	@ 0x3c
	return;
 8001a24:	e005      	b.n	8001a32 <leds_timer_set_compare_value+0x82>
	__HAL_TIM_SET_COMPARE( p_leds_htim, leds_data[led].channel, new_count );
 8001a26:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <leds_timer_set_compare_value+0x8c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	6413      	str	r3, [r2, #64]	@ 0x40
	return;
 8001a30:	bf00      	nop
}
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	200003b4 	.word	0x200003b4
 8001a40:	200003b8 	.word	0x200003b8

08001a44 <HAL_TIM_OC_DelayElapsedCallback>:
//void HAL_I2C_MasterTxCpltCallback ( I2C_HandleTypeDef *hi2c );
//void HAL_I2C_MasterRxCpltCallback ( I2C_HandleTypeDef *hi2c );
//void HAL_I2C_ErrorCallback ( I2C_HandleTypeDef *hi2c );


void HAL_TIM_OC_DelayElapsedCallback( TIM_HandleTypeDef *htim ){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
    if( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 ){
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7f1b      	ldrb	r3, [r3, #28]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d103      	bne.n	8001a5c <HAL_TIM_OC_DelayElapsedCallback+0x18>
    	leds_callback_handler( LSD_LED_BLUE );
 8001a54:	2001      	movs	r0, #1
 8001a56:	f7ff ff49 	bl	80018ec <leds_callback_handler>
    	leds_callback_handler( LSD_LED_RED );
    }
//    else if( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3 ){
//    	le910r1br_turn_on_callback_handle();
//    }
    return;
 8001a5a:	e007      	b.n	8001a6c <HAL_TIM_OC_DelayElapsedCallback+0x28>
    else if( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 ){
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7f1b      	ldrb	r3, [r3, #28]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d103      	bne.n	8001a6c <HAL_TIM_OC_DelayElapsedCallback+0x28>
    	leds_callback_handler( LSD_LED_RED );
 8001a64:	2000      	movs	r0, #0
 8001a66:	f7ff ff41 	bl	80018ec <leds_callback_handler>
    return;
 8001a6a:	bf00      	nop
 8001a6c:	bf00      	nop
}
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin ){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == US_ECHO_Pin ){
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d10c      	bne.n	8001a9e <HAL_GPIO_EXTI_Callback+0x2a>
		if( HAL_GPIO_ReadPin( US_ECHO_GPIO_Port, US_ECHO_Pin ) == GPIO_PIN_SET ){
 8001a84:	2101      	movs	r1, #1
 8001a86:	4808      	ldr	r0, [pc, #32]	@ (8001aa8 <HAL_GPIO_EXTI_Callback+0x34>)
 8001a88:	f002 fe1a 	bl	80046c0 <HAL_GPIO_ReadPin>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d102      	bne.n	8001a98 <HAL_GPIO_EXTI_Callback+0x24>
			ajsr04m_callback_handler_echo_start();
 8001a92:	f7ff fd31 	bl	80014f8 <ajsr04m_callback_handler_echo_start>
		}
		else{
			ajsr04m_callback_handler_echo_finish();
		}
	}
	return;
 8001a96:	e002      	b.n	8001a9e <HAL_GPIO_EXTI_Callback+0x2a>
			ajsr04m_callback_handler_echo_finish();
 8001a98:	f7ff fd44 	bl	8001524 <ajsr04m_callback_handler_echo_finish>
	return;
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
}
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40010c00 	.word	0x40010c00

08001aac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart ) {
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 ){
//		le910r1br_rx_handler();
//		modem_rx_buffer.busy = false;
	}
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart ) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 ){
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a05      	ldr	r2, [pc, #20]	@ (8001ae4 <HAL_UART_TxCpltCallback+0x24>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d103      	bne.n	8001ada <HAL_UART_TxCpltCallback+0x1a>
//		le910r1br_rx_handler();
		modem_tx_buffer.busy = false;
 8001ad2:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <HAL_UART_TxCpltCallback+0x28>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	40013800 	.word	0x40013800
 8001ae8:	20001674 	.word	0x20001674

08001aec <lsd_common_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t lsd_common_init( TIM_HandleTypeDef *htim, RTC_HandleTypeDef *hrtc ){
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
	if ( htim != NULL && hrtc != NULL ){
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00a      	beq.n	8001b12 <lsd_common_init+0x26>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <lsd_common_init+0x26>
		p_lsd_htim = htim;
 8001b02:	4a07      	ldr	r2, [pc, #28]	@ (8001b20 <lsd_common_init+0x34>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6013      	str	r3, [r2, #0]
		p_lsd_hrtc = hrtc;
 8001b08:	4a06      	ldr	r2, [pc, #24]	@ (8001b24 <lsd_common_init+0x38>)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6013      	str	r3, [r2, #0]
//		lsd_common_data.channel = TIM_CHANNEL_3;
//		return HAL_TIM_Base_Start_IT( htim );
		return LSD_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e001      	b.n	8001b16 <lsd_common_init+0x2a>
	}
	return LSD_ERR_NULL_HANDLE;
 8001b12:	f06f 0302 	mvn.w	r3, #2
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	200003d8 	.word	0x200003d8
 8001b24:	200003dc 	.word	0x200003dc

08001b28 <lsd_delay_us>:

void lsd_delay_us( uint32_t time_us ){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER( p_lsd_htim, 0 );
 8001b30:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <lsd_delay_us+0x4c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2200      	movs	r2, #0
 8001b38:	625a      	str	r2, [r3, #36]	@ 0x24
	int ret = HAL_TIM_Base_Start( p_lsd_htim );
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <lsd_delay_us+0x4c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f007 f8a0 	bl	8008c84 <HAL_TIM_Base_Start>
 8001b44:	4603      	mov	r3, r0
 8001b46:	60fb      	str	r3, [r7, #12]
	if( ret != HAL_OK ){
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10d      	bne.n	8001b6a <lsd_delay_us+0x42>
		return;
	}
	while( __HAL_TIM_GET_COUNTER( p_lsd_htim ) < time_us );
 8001b4e:	bf00      	nop
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <lsd_delay_us+0x4c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d8f8      	bhi.n	8001b50 <lsd_delay_us+0x28>
	HAL_TIM_Base_Stop( p_lsd_htim );
 8001b5e:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <lsd_delay_us+0x4c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f007 f8d8 	bl	8008d18 <HAL_TIM_Base_Stop>
	return;
 8001b68:	e000      	b.n	8001b6c <lsd_delay_us+0x44>
		return;
 8001b6a:	bf00      	nop
}
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200003d8 	.word	0x200003d8

08001b78 <lsd_delay_ms>:

void lsd_delay_ms( uint32_t time_ms ){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	for( int i=0; i<time_ms; i++ ){
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	e006      	b.n	8001b94 <lsd_delay_ms+0x1c>
		lsd_delay_us( 1000 );
 8001b86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b8a:	f7ff ffcd 	bl	8001b28 <lsd_delay_us>
	for( int i=0; i<time_ms; i++ ){
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	3301      	adds	r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d8f4      	bhi.n	8001b86 <lsd_delay_ms+0xe>
	}
	return;
 8001b9c:	bf00      	nop
}
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <lsd_get_rtc_timestamp>:
	}

    return;
}

void lsd_get_rtc_timestamp( LSD_TIMESTAMP_T *timestamp ){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetTime( p_lsd_hrtc, &sTime, RTC_FORMAT_BIN );
 8001bac:	4b21      	ldr	r3, [pc, #132]	@ (8001c34 <lsd_get_rtc_timestamp+0x90>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f107 010c 	add.w	r1, r7, #12
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f006 fa5e 	bl	8008078 <HAL_RTC_GetTime>
	HAL_RTC_GetDate( p_lsd_hrtc, &sDate, RTC_FORMAT_BIN );
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c34 <lsd_get_rtc_timestamp+0x90>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f107 0108 	add.w	r1, r7, #8
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f006 fbe4 	bl	8008394 <HAL_RTC_GetDate>

	timestamp->year		= sDate.Year;
 8001bcc:	7afa      	ldrb	r2, [r7, #11]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	701a      	strb	r2, [r3, #0]
	timestamp->month	= sDate.Month;
 8001bd2:	7a7b      	ldrb	r3, [r7, #9]
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	b2d9      	uxtb	r1, r3
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	7853      	ldrb	r3, [r2, #1]
 8001bde:	f361 0303 	bfi	r3, r1, #0, #4
 8001be2:	7053      	strb	r3, [r2, #1]
	timestamp->day		= sDate.Date;
 8001be4:	7abb      	ldrb	r3, [r7, #10]
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	b2d9      	uxtb	r1, r3
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	7893      	ldrb	r3, [r2, #2]
 8001bf0:	f361 0304 	bfi	r3, r1, #0, #5
 8001bf4:	7093      	strb	r3, [r2, #2]
	timestamp->hour		= sTime.Hours;
 8001bf6:	7b3b      	ldrb	r3, [r7, #12]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	b2d9      	uxtb	r1, r3
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	78d3      	ldrb	r3, [r2, #3]
 8001c02:	f361 0304 	bfi	r3, r1, #0, #5
 8001c06:	70d3      	strb	r3, [r2, #3]
	timestamp->minute	= sTime.Minutes;
 8001c08:	7b7b      	ldrb	r3, [r7, #13]
 8001c0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c0e:	b2d9      	uxtb	r1, r3
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	7913      	ldrb	r3, [r2, #4]
 8001c14:	f361 0305 	bfi	r3, r1, #0, #6
 8001c18:	7113      	strb	r3, [r2, #4]
	timestamp->second	= sTime.Seconds;
 8001c1a:	7bbb      	ldrb	r3, [r7, #14]
 8001c1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c20:	b2d9      	uxtb	r1, r3
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	7953      	ldrb	r3, [r2, #5]
 8001c26:	f361 0305 	bfi	r3, r1, #0, #6
 8001c2a:	7153      	strb	r3, [r2, #5]

	return;
 8001c2c:	bf00      	nop
}
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200003dc 	.word	0x200003dc

08001c38 <lsd_analyze_data>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

void lsd_analyze_data( LSD_LOG_DATA_T *p_log_data ){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	p_recent_log_data = p_log_data;
 8001c40:	4a05      	ldr	r2, [pc, #20]	@ (8001c58 <lsd_analyze_data+0x20>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
	update_thresold_values();
 8001c46:	f000 f809 	bl	8001c5c <update_thresold_values>
//	lsd_log_read_batch( -LSD_RECENT_LOG_SIZE, p_recent_log_data );
	categoryze_recent_data();
 8001c4a:	f000 f859 	bl	8001d00 <categoryze_recent_data>
	return;
 8001c4e:	bf00      	nop
}
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000420 	.word	0x20000420

08001c5c <update_thresold_values>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static void update_thresold_values( void ){
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
	lsd_thres[LSD_THRES_CLIM_TEMP].very_low		= LSD_THRES_CLIM_TEMP_VL;
 8001c60:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <update_thresold_values+0x6c>)
 8001c62:	4a1a      	ldr	r2, [pc, #104]	@ (8001ccc <update_thresold_values+0x70>)
 8001c64:	601a      	str	r2, [r3, #0]
	lsd_thres[LSD_THRES_CLIM_TEMP].low			= LSD_THRES_CLIM_TEMP_L;
 8001c66:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <update_thresold_values+0x6c>)
 8001c68:	4a19      	ldr	r2, [pc, #100]	@ (8001cd0 <update_thresold_values+0x74>)
 8001c6a:	605a      	str	r2, [r3, #4]
	lsd_thres[LSD_THRES_CLIM_TEMP].high			= LSD_THRES_CLIM_TEMP_H;
 8001c6c:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <update_thresold_values+0x6c>)
 8001c6e:	4a19      	ldr	r2, [pc, #100]	@ (8001cd4 <update_thresold_values+0x78>)
 8001c70:	609a      	str	r2, [r3, #8]
	lsd_thres[LSD_THRES_CLIM_TEMP].very_high	= LSD_THRES_CLIM_TEMP_VH;
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <update_thresold_values+0x6c>)
 8001c74:	4a18      	ldr	r2, [pc, #96]	@ (8001cd8 <update_thresold_values+0x7c>)
 8001c76:	60da      	str	r2, [r3, #12]

	lsd_thres[LSD_THRES_CLIM_HUMI].very_low		= LSD_THRES_CLIM_HUMI_VL;
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <update_thresold_values+0x6c>)
 8001c7a:	4a18      	ldr	r2, [pc, #96]	@ (8001cdc <update_thresold_values+0x80>)
 8001c7c:	611a      	str	r2, [r3, #16]
	lsd_thres[LSD_THRES_CLIM_HUMI].low			= LSD_THRES_CLIM_HUMI_L;
 8001c7e:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <update_thresold_values+0x6c>)
 8001c80:	4a14      	ldr	r2, [pc, #80]	@ (8001cd4 <update_thresold_values+0x78>)
 8001c82:	615a      	str	r2, [r3, #20]
	lsd_thres[LSD_THRES_CLIM_HUMI].high			= LSD_THRES_CLIM_HUMI_H;
 8001c84:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <update_thresold_values+0x6c>)
 8001c86:	4a16      	ldr	r2, [pc, #88]	@ (8001ce0 <update_thresold_values+0x84>)
 8001c88:	619a      	str	r2, [r3, #24]
	lsd_thres[LSD_THRES_CLIM_HUMI].very_high	= LSD_THRES_CLIM_HUMI_VH;
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc8 <update_thresold_values+0x6c>)
 8001c8c:	4a15      	ldr	r2, [pc, #84]	@ (8001ce4 <update_thresold_values+0x88>)
 8001c8e:	61da      	str	r2, [r3, #28]

	lsd_thres[LSD_THRES_DIST_DIST].very_low		= LSD_THRES_DIST_DIST_VL;
 8001c90:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <update_thresold_values+0x6c>)
 8001c92:	4a0e      	ldr	r2, [pc, #56]	@ (8001ccc <update_thresold_values+0x70>)
 8001c94:	621a      	str	r2, [r3, #32]
	lsd_thres[LSD_THRES_DIST_DIST].low			= LSD_THRES_DIST_DIST_L;
 8001c96:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <update_thresold_values+0x6c>)
 8001c98:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd4 <update_thresold_values+0x78>)
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24
	lsd_thres[LSD_THRES_DIST_DIST].high			= LSD_THRES_DIST_DIST_H;
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <update_thresold_values+0x6c>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ce8 <update_thresold_values+0x8c>)
 8001ca0:	629a      	str	r2, [r3, #40]	@ 0x28
	lsd_thres[LSD_THRES_DIST_DIST].very_high	= LSD_THRES_DIST_DIST_VH;
 8001ca2:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <update_thresold_values+0x6c>)
 8001ca4:	4a11      	ldr	r2, [pc, #68]	@ (8001cec <update_thresold_values+0x90>)
 8001ca6:	62da      	str	r2, [r3, #44]	@ 0x2c

	lsd_thres[LSD_THRES_DIST_SPEED].very_low	= LSD_THRES_DIST_SPEED_VL;
 8001ca8:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <update_thresold_values+0x6c>)
 8001caa:	4a11      	ldr	r2, [pc, #68]	@ (8001cf0 <update_thresold_values+0x94>)
 8001cac:	631a      	str	r2, [r3, #48]	@ 0x30
	lsd_thres[LSD_THRES_DIST_SPEED].low			= LSD_THRES_DIST_SPEED_L;
 8001cae:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <update_thresold_values+0x6c>)
 8001cb0:	4a10      	ldr	r2, [pc, #64]	@ (8001cf4 <update_thresold_values+0x98>)
 8001cb2:	635a      	str	r2, [r3, #52]	@ 0x34
	lsd_thres[LSD_THRES_DIST_SPEED].high		= LSD_THRES_DIST_SPEED_H;
 8001cb4:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <update_thresold_values+0x6c>)
 8001cb6:	4a10      	ldr	r2, [pc, #64]	@ (8001cf8 <update_thresold_values+0x9c>)
 8001cb8:	639a      	str	r2, [r3, #56]	@ 0x38
	lsd_thres[LSD_THRES_DIST_SPEED].very_high	= LSD_THRES_DIST_SPEED_VH;
 8001cba:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <update_thresold_values+0x6c>)
 8001cbc:	4a0f      	ldr	r2, [pc, #60]	@ (8001cfc <update_thresold_values+0xa0>)
 8001cbe:	63da      	str	r2, [r3, #60]	@ 0x3c
	return;
 8001cc0:	bf00      	nop
}
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	200003e0 	.word	0x200003e0
 8001ccc:	41200000 	.word	0x41200000
 8001cd0:	41700000 	.word	0x41700000
 8001cd4:	41f00000 	.word	0x41f00000
 8001cd8:	420c0000 	.word	0x420c0000
 8001cdc:	41a00000 	.word	0x41a00000
 8001ce0:	42a00000 	.word	0x42a00000
 8001ce4:	42b40000 	.word	0x42b40000
 8001ce8:	43480000 	.word	0x43480000
 8001cec:	43520000 	.word	0x43520000
 8001cf0:	43a78000 	.word	0x43a78000
 8001cf4:	43a90000 	.word	0x43a90000
 8001cf8:	43af0000 	.word	0x43af0000
 8001cfc:	43b10000 	.word	0x43b10000

08001d00 <categoryze_recent_data>:

static void categoryze_recent_data( void ){
 8001d00:	b598      	push	{r3, r4, r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	p_recent_log_data->clim.temperature_category = \
		compare_threshold( p_recent_log_data->clim.temperature, &lsd_thres[LSD_THRES_CLIM_TEMP] );
 8001d04:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <categoryze_recent_data+0x60>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
	p_recent_log_data->clim.temperature_category = \
 8001d0a:	4a15      	ldr	r2, [pc, #84]	@ (8001d60 <categoryze_recent_data+0x60>)
 8001d0c:	6814      	ldr	r4, [r2, #0]
		compare_threshold( p_recent_log_data->clim.temperature, &lsd_thres[LSD_THRES_CLIM_TEMP] );
 8001d0e:	4915      	ldr	r1, [pc, #84]	@ (8001d64 <categoryze_recent_data+0x64>)
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 f82f 	bl	8001d74 <compare_threshold>
 8001d16:	4603      	mov	r3, r0
	p_recent_log_data->clim.temperature_category = \
 8001d18:	7223      	strb	r3, [r4, #8]

	p_recent_log_data->clim.humidity_category = \
		compare_threshold( p_recent_log_data->clim.humidity, &lsd_thres[LSD_THRES_CLIM_HUMI] );
 8001d1a:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <categoryze_recent_data+0x60>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
	p_recent_log_data->clim.humidity_category = \
 8001d20:	4a0f      	ldr	r2, [pc, #60]	@ (8001d60 <categoryze_recent_data+0x60>)
 8001d22:	6814      	ldr	r4, [r2, #0]
		compare_threshold( p_recent_log_data->clim.humidity, &lsd_thres[LSD_THRES_CLIM_HUMI] );
 8001d24:	4910      	ldr	r1, [pc, #64]	@ (8001d68 <categoryze_recent_data+0x68>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f824 	bl	8001d74 <compare_threshold>
 8001d2c:	4603      	mov	r3, r0
	p_recent_log_data->clim.humidity_category = \
 8001d2e:	7263      	strb	r3, [r4, #9]

	p_recent_log_data->dist.distance_category = \
		compare_threshold( p_recent_log_data->dist.distance, &lsd_thres[LSD_THRES_DIST_DIST] );
 8001d30:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <categoryze_recent_data+0x60>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
	p_recent_log_data->dist.distance_category = \
 8001d36:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <categoryze_recent_data+0x60>)
 8001d38:	6814      	ldr	r4, [r2, #0]
		compare_threshold( p_recent_log_data->dist.distance, &lsd_thres[LSD_THRES_DIST_DIST] );
 8001d3a:	490c      	ldr	r1, [pc, #48]	@ (8001d6c <categoryze_recent_data+0x6c>)
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 f819 	bl	8001d74 <compare_threshold>
 8001d42:	4603      	mov	r3, r0
	p_recent_log_data->dist.distance_category = \
 8001d44:	7523      	strb	r3, [r4, #20]

	p_recent_log_data->dist.speed_of_sound_category = \
		compare_threshold( p_recent_log_data->dist.speed_of_sound, &lsd_thres[LSD_THRES_DIST_SPEED] );
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <categoryze_recent_data+0x60>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	691b      	ldr	r3, [r3, #16]
	p_recent_log_data->dist.speed_of_sound_category = \
 8001d4c:	4a04      	ldr	r2, [pc, #16]	@ (8001d60 <categoryze_recent_data+0x60>)
 8001d4e:	6814      	ldr	r4, [r2, #0]
		compare_threshold( p_recent_log_data->dist.speed_of_sound, &lsd_thres[LSD_THRES_DIST_SPEED] );
 8001d50:	4907      	ldr	r1, [pc, #28]	@ (8001d70 <categoryze_recent_data+0x70>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f80e 	bl	8001d74 <compare_threshold>
 8001d58:	4603      	mov	r3, r0
	p_recent_log_data->dist.speed_of_sound_category = \
 8001d5a:	7563      	strb	r3, [r4, #21]

	return;
 8001d5c:	bf00      	nop
}
 8001d5e:	bd98      	pop	{r3, r4, r7, pc}
 8001d60:	20000420 	.word	0x20000420
 8001d64:	200003e0 	.word	0x200003e0
 8001d68:	200003f0 	.word	0x200003f0
 8001d6c:	20000400 	.word	0x20000400
 8001d70:	20000410 	.word	0x20000410

08001d74 <compare_threshold>:

static uint8_t compare_threshold( float value, LSD_TRHES_T *thres ){
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
	if( value <= thres->very_low ){
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4619      	mov	r1, r3
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff f985 	bl	8001094 <__aeabi_fcmple>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <compare_threshold+0x20>
		return LSD_THRES_BELOW_VERY_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e021      	b.n	8001dd8 <compare_threshold+0x64>
	}
	else if( value <= thres->low ){
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff f97a 	bl	8001094 <__aeabi_fcmple>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <compare_threshold+0x36>
		return LSD_THRES_BELOW_LOW;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e016      	b.n	8001dd8 <compare_threshold+0x64>
	}
	else if( value >= thres->very_high ){
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	4619      	mov	r1, r3
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff f979 	bl	80010a8 <__aeabi_fcmpge>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <compare_threshold+0x4c>
		return LSD_THRES_ABOVE_VERY_HIGH;
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	e00b      	b.n	8001dd8 <compare_threshold+0x64>
	}
	else if( value >= thres->high ){
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff f96e 	bl	80010a8 <__aeabi_fcmpge>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <compare_threshold+0x62>
		return LSD_THRES_ABOVE_HIGH;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e000      	b.n	8001dd8 <compare_threshold+0x64>
	}
	else{
		return LSD_THRES_CENTER;
 8001dd6:	2302      	movs	r3, #2
	}
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <lsd_exit_stop_mode>:
#include "MyServicesInc/usb_transmission.h"
#include "MyServicesInc/device_sleep.h"

extern volatile uint32_t lsd_cycle_count;

uint8_t lsd_exit_stop_mode( lsd_sys_clk_cfg_t clk_cfg ){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	if( clk_cfg != NULL ){
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d005      	beq.n	8001dfa <lsd_exit_stop_mode+0x1a>
		clk_cfg();
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4798      	blx	r3

		lsd_usb_reinit();
 8001df2:	f000 ffdf 	bl	8002db4 <lsd_usb_reinit>

		return LSD_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <lsd_exit_stop_mode+0x1c>
	}

	return LSD_ERR_NULL_HANDLE;
 8001dfa:	23fd      	movs	r3, #253	@ 0xfd
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <lsd_enter_stop_mode>:

void lsd_enter_stop_mode( void ){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
	lsd_usb_deinit();
 8001e0a:	f000 ffdf 	bl	8002dcc <lsd_usb_deinit>

    __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <lsd_enter_stop_mode+0x34>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	4a09      	ldr	r2, [pc, #36]	@ (8001e38 <lsd_enter_stop_mode+0x34>)
 8001e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e18:	61d3      	str	r3, [r2, #28]
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <lsd_enter_stop_mode+0x34>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]

    HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
 8001e26:	2101      	movs	r1, #1
 8001e28:	2001      	movs	r0, #1
 8001e2a:	f005 fa39 	bl	80072a0 <HAL_PWR_EnterSTOPMode>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000

08001e3c <lsd_measure_distance>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

void lsd_measure_distance( LSD_LOG_DATA_T *p_log ){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	p_log_data = p_log;
 8001e44:	4a06      	ldr	r2, [pc, #24]	@ (8001e60 <lsd_measure_distance+0x24>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6013      	str	r3, [r2, #0]

	read_climate_variables();
 8001e4a:	f000 f80b 	bl	8001e64 <read_climate_variables>
	calculate_speed_of_sound();
 8001e4e:	f000 f81d 	bl	8001e8c <calculate_speed_of_sound>
	calculate_distance();
 8001e52:	f000 f821 	bl	8001e98 <calculate_distance>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000424 	.word	0x20000424

08001e64 <read_climate_variables>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static void read_climate_variables( void ){
 8001e64:	b598      	push	{r3, r4, r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	if( aht20_update() != LSD_OK){
 8001e68:	f7ff f970 	bl	800114c <aht20_update>
		// todo
	}

//	clim_data->pos_buf = ( clim_data->pos_buf+ 1 ) % LSD_CLIMATE_BUF_SIZE;
	p_log_data->clim.temperature = aht20_get_temperature_C();
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <read_climate_variables+0x24>)
 8001e6e:	681c      	ldr	r4, [r3, #0]
 8001e70:	f7ff f9f4 	bl	800125c <aht20_get_temperature_C>
 8001e74:	4603      	mov	r3, r0
 8001e76:	6023      	str	r3, [r4, #0]
	p_log_data->clim.humidity = aht20_get_humidity_RH();
 8001e78:	4b03      	ldr	r3, [pc, #12]	@ (8001e88 <read_climate_variables+0x24>)
 8001e7a:	681c      	ldr	r4, [r3, #0]
 8001e7c:	f7ff fa2a 	bl	80012d4 <aht20_get_humidity_RH>
 8001e80:	4603      	mov	r3, r0
 8001e82:	6063      	str	r3, [r4, #4]

	return;
 8001e84:	bf00      	nop
}
 8001e86:	bd98      	pop	{r3, r4, r7, pc}
 8001e88:	20000424 	.word	0x20000424

08001e8c <calculate_speed_of_sound>:

static void calculate_speed_of_sound( void ){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
#ifdef LSD_PERIPH_USED_AHT20
	calculate_speed_of_sound_Cramer_1993();
 8001e90:	f000 f83a 	bl	8001f08 <calculate_speed_of_sound_Cramer_1993>
#else
	interpolateSpeedOfSound( );
#endif /* LSD_PERIPH_USED_AHT20 */
	return;
 8001e94:	bf00      	nop
}
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <calculate_distance>:

static void calculate_distance( void ){
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
	int8_t ret __attribute__( ( unused ) );

//	ret = ajsr04m_read_tof_blocking( LSD_STD_TIMEOUT_US );
	ret = ajsr04m_read_tof_exti();
 8001e9e:	f7ff faf3 	bl	8001488 <ajsr04m_read_tof_exti>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71bb      	strb	r3, [r7, #6]

	uint8_t try_count = 10;
 8001ea6:	230a      	movs	r3, #10
 8001ea8:	71fb      	strb	r3, [r7, #7]
	float tof = 0.0;
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	603b      	str	r3, [r7, #0]

	do{
		HAL_Delay( 25 );
 8001eb0:	2019      	movs	r0, #25
 8001eb2:	f001 ffaf 	bl	8003e14 <HAL_Delay>
		tof = ajsr04m_get_tof_ms();
 8001eb6:	f7ff faef 	bl	8001498 <ajsr04m_get_tof_ms>
 8001eba:	6038      	str	r0, [r7, #0]
		try_count--;
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	71fb      	strb	r3, [r7, #7]
	}while( tof == LSD_ERR_DEVICE_BUSY && try_count >= 0 );
 8001ec2:	490e      	ldr	r1, [pc, #56]	@ (8001efc <calculate_distance+0x64>)
 8001ec4:	6838      	ldr	r0, [r7, #0]
 8001ec6:	f7ff f8d1 	bl	800106c <__aeabi_fcmpeq>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1ef      	bne.n	8001eb0 <calculate_distance+0x18>

	p_log_data->dist.distance = (float) p_log_data->dist.speed_of_sound * tof / 2.0;
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <calculate_distance+0x68>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	6839      	ldr	r1, [r7, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe ff33 	bl	8000d44 <__aeabi_fmul>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b07      	ldr	r3, [pc, #28]	@ (8001f00 <calculate_distance+0x68>)
 8001ee4:	681c      	ldr	r4, [r3, #0]
 8001ee6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001eea:	4610      	mov	r0, r2
 8001eec:	f7fe ffde 	bl	8000eac <__aeabi_fdiv>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60e3      	str	r3, [r4, #12]

	return;
 8001ef4:	bf00      	nop
}
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd90      	pop	{r4, r7, pc}
 8001efc:	c0a00000 	.word	0xc0a00000
 8001f00:	20000424 	.word	0x20000424
 8001f04:	00000000 	.word	0x00000000

08001f08 <calculate_speed_of_sound_Cramer_1993>:

static void calculate_speed_of_sound_Cramer_1993( void ){
 8001f08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f0c:	b090      	sub	sp, #64	@ 0x40
 8001f0e:	af00      	add	r7, sp, #0
	/*
	 * Calculation based on CRAMER, Owen (1993): "The variation of the specific heat ratio and the
	 * speed of sound in air with temperature, pressure, humidity, and CO2 concentration".
	 */
	float mTemp = p_log_data->clim.temperature;
 8001f10:	4bd3      	ldr	r3, [pc, #844]	@ (8002260 <calculate_speed_of_sound_Cramer_1993+0x358>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float mHumi = p_log_data->clim.humidity;
 8001f18:	4bd1      	ldr	r3, [pc, #836]	@ (8002260 <calculate_speed_of_sound_Cramer_1993+0x358>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
	float mPres = MEAN_LOCAL_PRESSURE;
 8001f20:	4bd0      	ldr	r3, [pc, #832]	@ (8002264 <calculate_speed_of_sound_Cramer_1993+0x35c>)
 8001f22:	637b      	str	r3, [r7, #52]	@ 0x34

	float mTemp_K = mTemp + 273.15;  // Convert to Kelvin
 8001f24:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f26:	f7fe fa7f 	bl	8000428 <__aeabi_f2d>
 8001f2a:	a3a9      	add	r3, pc, #676	@ (adr r3, 80021d0 <calculate_speed_of_sound_Cramer_1993+0x2c8>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	f7fe f91c 	bl	800016c <__adddf3>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f7fe fda4 	bl	8000a88 <__aeabi_d2f>
 8001f40:	4603      	mov	r3, r0
 8001f42:	633b      	str	r3, [r7, #48]	@ 0x30
	float mTemp_2 = mTemp * mTemp;
 8001f44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f46:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f48:	f7fe fefc 	bl	8000d44 <__aeabi_fmul>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	mPres *= 1000.0;                     // Convert to Pa
 8001f50:	49c5      	ldr	r1, [pc, #788]	@ (8002268 <calculate_speed_of_sound_Cramer_1993+0x360>)
 8001f52:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f54:	f7fe fef6 	bl	8000d44 <__aeabi_fmul>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	637b      	str	r3, [r7, #52]	@ 0x34

	float ENH = ( 3.14 * mPres * pow(10,-8) ) + 1.00062 + ( mTemp_2 * 5.600 * pow(10,-7) );
 8001f5c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f5e:	f7fe fa63 	bl	8000428 <__aeabi_f2d>
 8001f62:	a39d      	add	r3, pc, #628	@ (adr r3, 80021d8 <calculate_speed_of_sound_Cramer_1993+0x2d0>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	f7fe fab6 	bl	80004d8 <__aeabi_dmul>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	a39a      	add	r3, pc, #616	@ (adr r3, 80021e0 <calculate_speed_of_sound_Cramer_1993+0x2d8>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe faad 	bl	80004d8 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	a398      	add	r3, pc, #608	@ (adr r3, 80021e8 <calculate_speed_of_sound_Cramer_1993+0x2e0>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	f7fe f8ee 	bl	800016c <__adddf3>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4614      	mov	r4, r2
 8001f96:	461d      	mov	r5, r3
 8001f98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f9a:	f7fe fa45 	bl	8000428 <__aeabi_f2d>
 8001f9e:	a394      	add	r3, pc, #592	@ (adr r3, 80021f0 <calculate_speed_of_sound_Cramer_1993+0x2e8>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f7fe fa98 	bl	80004d8 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	a391      	add	r3, pc, #580	@ (adr r3, 80021f8 <calculate_speed_of_sound_Cramer_1993+0x2f0>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	f7fe fa8f 	bl	80004d8 <__aeabi_dmul>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	f7fe f8d3 	bl	800016c <__adddf3>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7fe fd5b 	bl	8000a88 <__aeabi_d2f>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	62bb      	str	r3, [r7, #40]	@ 0x28

	float e = 2.71828182845904523536;
 8001fd6:	4ba5      	ldr	r3, [pc, #660]	@ (800226c <calculate_speed_of_sound_Cramer_1993+0x364>)
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
	float PSV1 = ( mTemp_K * mTemp_K * 1.2378847 * pow(10,-5) ) - ( 1.9121316 * mTemp_K / 100.0 );
 8001fda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fde:	f7fe feb1 	bl	8000d44 <__aeabi_fmul>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fa1f 	bl	8000428 <__aeabi_f2d>
 8001fea:	a385      	add	r3, pc, #532	@ (adr r3, 8002200 <calculate_speed_of_sound_Cramer_1993+0x2f8>)
 8001fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff0:	f7fe fa72 	bl	80004d8 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	a382      	add	r3, pc, #520	@ (adr r3, 8002208 <calculate_speed_of_sound_Cramer_1993+0x300>)
 8001ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002002:	f7fe fa69 	bl	80004d8 <__aeabi_dmul>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4614      	mov	r4, r2
 800200c:	461d      	mov	r5, r3
 800200e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002010:	f7fe fa0a 	bl	8000428 <__aeabi_f2d>
 8002014:	a37e      	add	r3, pc, #504	@ (adr r3, 8002210 <calculate_speed_of_sound_Cramer_1993+0x308>)
 8002016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201a:	f7fe fa5d 	bl	80004d8 <__aeabi_dmul>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4610      	mov	r0, r2
 8002024:	4619      	mov	r1, r3
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	4b91      	ldr	r3, [pc, #580]	@ (8002270 <calculate_speed_of_sound_Cramer_1993+0x368>)
 800202c:	f7fe fb7e 	bl	800072c <__aeabi_ddiv>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4620      	mov	r0, r4
 8002036:	4629      	mov	r1, r5
 8002038:	f7fe f896 	bl	8000168 <__aeabi_dsub>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7fe fd20 	bl	8000a88 <__aeabi_d2f>
 8002048:	4603      	mov	r3, r0
 800204a:	623b      	str	r3, [r7, #32]
	float PSV2 = 33.93711047 - ( 6343.1645 / mTemp_K );
 800204c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800204e:	f7fe f9eb 	bl	8000428 <__aeabi_f2d>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	a170      	add	r1, pc, #448	@ (adr r1, 8002218 <calculate_speed_of_sound_Cramer_1993+0x310>)
 8002058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800205c:	f7fe fb66 	bl	800072c <__aeabi_ddiv>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	a16e      	add	r1, pc, #440	@ (adr r1, 8002220 <calculate_speed_of_sound_Cramer_1993+0x318>)
 8002066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800206a:	f7fe f87d 	bl	8000168 <__aeabi_dsub>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f7fe fd07 	bl	8000a88 <__aeabi_d2f>
 800207a:	4603      	mov	r3, r0
 800207c:	61fb      	str	r3, [r7, #28]
	float PSV = pow(e,PSV1) * pow(e,PSV2);
 800207e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002080:	f7fe f9d2 	bl	8000428 <__aeabi_f2d>
 8002084:	4604      	mov	r4, r0
 8002086:	460d      	mov	r5, r1
 8002088:	6a38      	ldr	r0, [r7, #32]
 800208a:	f7fe f9cd 	bl	8000428 <__aeabi_f2d>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4620      	mov	r0, r4
 8002094:	4629      	mov	r1, r5
 8002096:	f00f fdf3 	bl	8011c80 <pow>
 800209a:	4604      	mov	r4, r0
 800209c:	460d      	mov	r5, r1
 800209e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020a0:	f7fe f9c2 	bl	8000428 <__aeabi_f2d>
 80020a4:	4680      	mov	r8, r0
 80020a6:	4689      	mov	r9, r1
 80020a8:	69f8      	ldr	r0, [r7, #28]
 80020aa:	f7fe f9bd 	bl	8000428 <__aeabi_f2d>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4640      	mov	r0, r8
 80020b4:	4649      	mov	r1, r9
 80020b6:	f00f fde3 	bl	8011c80 <pow>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4620      	mov	r0, r4
 80020c0:	4629      	mov	r1, r5
 80020c2:	f7fe fa09 	bl	80004d8 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f7fe fcdb 	bl	8000a88 <__aeabi_d2f>
 80020d2:	4603      	mov	r3, r0
 80020d4:	61bb      	str	r3, [r7, #24]

	float Xw = ( mHumi * ENH * PSV / mPres ) / 100.0; 	// Mole fraction of water vapor
 80020d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80020da:	f7fe fe33 	bl	8000d44 <__aeabi_fmul>
 80020de:	4603      	mov	r3, r0
 80020e0:	69b9      	ldr	r1, [r7, #24]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fe2e 	bl	8000d44 <__aeabi_fmul>
 80020e8:	4603      	mov	r3, r0
 80020ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fedd 	bl	8000eac <__aeabi_fdiv>
 80020f2:	4603      	mov	r3, r0
 80020f4:	495f      	ldr	r1, [pc, #380]	@ (8002274 <calculate_speed_of_sound_Cramer_1993+0x36c>)
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fed8 	bl	8000eac <__aeabi_fdiv>
 80020fc:	4603      	mov	r3, r0
 80020fe:	617b      	str	r3, [r7, #20]
	float Xc = 0.000400;                           			// Mole fraction of carbon dioxide
 8002100:	4b5d      	ldr	r3, [pc, #372]	@ (8002278 <calculate_speed_of_sound_Cramer_1993+0x370>)
 8002102:	613b      	str	r3, [r7, #16]

	float C1 = ( 0.603055 * mTemp ) + 331.5024 - ( mTemp_2 * 5.28 * pow(10,-4) ) + ( 0.1495874 * mTemp + 51.471935 - ( mTemp_2 * 7.82 * pow(10,-4) ) ) * Xw;
 8002104:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002106:	f7fe f98f 	bl	8000428 <__aeabi_f2d>
 800210a:	a347      	add	r3, pc, #284	@ (adr r3, 8002228 <calculate_speed_of_sound_Cramer_1993+0x320>)
 800210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002110:	f7fe f9e2 	bl	80004d8 <__aeabi_dmul>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4610      	mov	r0, r2
 800211a:	4619      	mov	r1, r3
 800211c:	a344      	add	r3, pc, #272	@ (adr r3, 8002230 <calculate_speed_of_sound_Cramer_1993+0x328>)
 800211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002122:	f7fe f823 	bl	800016c <__adddf3>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4614      	mov	r4, r2
 800212c:	461d      	mov	r5, r3
 800212e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002130:	f7fe f97a 	bl	8000428 <__aeabi_f2d>
 8002134:	a340      	add	r3, pc, #256	@ (adr r3, 8002238 <calculate_speed_of_sound_Cramer_1993+0x330>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe f9cd 	bl	80004d8 <__aeabi_dmul>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	a33e      	add	r3, pc, #248	@ (adr r3, 8002240 <calculate_speed_of_sound_Cramer_1993+0x338>)
 8002148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214c:	f7fe f9c4 	bl	80004d8 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4620      	mov	r0, r4
 8002156:	4629      	mov	r1, r5
 8002158:	f7fe f806 	bl	8000168 <__aeabi_dsub>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4614      	mov	r4, r2
 8002162:	461d      	mov	r5, r3
 8002164:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002166:	f7fe f95f 	bl	8000428 <__aeabi_f2d>
 800216a:	a337      	add	r3, pc, #220	@ (adr r3, 8002248 <calculate_speed_of_sound_Cramer_1993+0x340>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	f7fe f9b2 	bl	80004d8 <__aeabi_dmul>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	a334      	add	r3, pc, #208	@ (adr r3, 8002250 <calculate_speed_of_sound_Cramer_1993+0x348>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fd fff3 	bl	800016c <__adddf3>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4690      	mov	r8, r2
 800218c:	4699      	mov	r9, r3
 800218e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002190:	f7fe f94a 	bl	8000428 <__aeabi_f2d>
 8002194:	a330      	add	r3, pc, #192	@ (adr r3, 8002258 <calculate_speed_of_sound_Cramer_1993+0x350>)
 8002196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219a:	f7fe f99d 	bl	80004d8 <__aeabi_dmul>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	a326      	add	r3, pc, #152	@ (adr r3, 8002240 <calculate_speed_of_sound_Cramer_1993+0x338>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	f7fe f994 	bl	80004d8 <__aeabi_dmul>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4640      	mov	r0, r8
 80021b6:	4649      	mov	r1, r9
 80021b8:	f7fd ffd6 	bl	8000168 <__aeabi_dsub>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4690      	mov	r8, r2
 80021c2:	4699      	mov	r9, r3
 80021c4:	6978      	ldr	r0, [r7, #20]
 80021c6:	f7fe f92f 	bl	8000428 <__aeabi_f2d>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	e055      	b.n	800227c <calculate_speed_of_sound_Cramer_1993+0x374>
 80021d0:	66666666 	.word	0x66666666
 80021d4:	40711266 	.word	0x40711266
 80021d8:	51eb851f 	.word	0x51eb851f
 80021dc:	40091eb8 	.word	0x40091eb8
 80021e0:	e2308c3a 	.word	0xe2308c3a
 80021e4:	3e45798e 	.word	0x3e45798e
 80021e8:	1dfb938a 	.word	0x1dfb938a
 80021ec:	3ff0028a 	.word	0x3ff0028a
 80021f0:	66666666 	.word	0x66666666
 80021f4:	40166666 	.word	0x40166666
 80021f8:	9abcaf48 	.word	0x9abcaf48
 80021fc:	3e7ad7f2 	.word	0x3e7ad7f2
 8002200:	2feb8016 	.word	0x2feb8016
 8002204:	3ff3ce60 	.word	0x3ff3ce60
 8002208:	88e368f1 	.word	0x88e368f1
 800220c:	3ee4f8b5 	.word	0x3ee4f8b5
 8002210:	4dfa5ed6 	.word	0x4dfa5ed6
 8002214:	3ffe9817 	.word	0x3ffe9817
 8002218:	1cac0831 	.word	0x1cac0831
 800221c:	40b8c72a 	.word	0x40b8c72a
 8002220:	3c62b1d1 	.word	0x3c62b1d1
 8002224:	4040f7f3 	.word	0x4040f7f3
 8002228:	ffd60e95 	.word	0xffd60e95
 800222c:	3fe34c39 	.word	0x3fe34c39
 8002230:	d495182b 	.word	0xd495182b
 8002234:	4074b809 	.word	0x4074b809
 8002238:	51eb851f 	.word	0x51eb851f
 800223c:	40151eb8 	.word	0x40151eb8
 8002240:	eb1c432d 	.word	0xeb1c432d
 8002244:	3f1a36e2 	.word	0x3f1a36e2
 8002248:	0f7263cb 	.word	0x0f7263cb
 800224c:	3fc325ae 	.word	0x3fc325ae
 8002250:	5db76b3c 	.word	0x5db76b3c
 8002254:	4049bc68 	.word	0x4049bc68
 8002258:	147ae148 	.word	0x147ae148
 800225c:	401f47ae 	.word	0x401f47ae
 8002260:	20000424 	.word	0x20000424
 8002264:	42cb8a3d 	.word	0x42cb8a3d
 8002268:	447a0000 	.word	0x447a0000
 800226c:	402df854 	.word	0x402df854
 8002270:	40590000 	.word	0x40590000
 8002274:	42c80000 	.word	0x42c80000
 8002278:	39d1b717 	.word	0x39d1b717
 800227c:	4640      	mov	r0, r8
 800227e:	4649      	mov	r1, r9
 8002280:	f7fe f92a 	bl	80004d8 <__aeabi_dmul>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4620      	mov	r0, r4
 800228a:	4629      	mov	r1, r5
 800228c:	f7fd ff6e 	bl	800016c <__adddf3>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	f7fe fbf6 	bl	8000a88 <__aeabi_d2f>
 800229c:	4603      	mov	r3, r0
 800229e:	60fb      	str	r3, [r7, #12]
	float C2 = ( (-1.82 * pow(10,-7) ) + ( 3.73 * mTemp * pow(10,-8) ) - ( mTemp_2 * 2.93 * pow(10,-10) ) ) * mPres + ( -85.20931 - 0.228525 * mTemp + ( mTemp_2 * 5.91 * pow(10,-5) ) ) * Xc;
 80022a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80022a2:	f7fe f8c1 	bl	8000428 <__aeabi_f2d>
 80022a6:	a38a      	add	r3, pc, #552	@ (adr r3, 80024d0 <calculate_speed_of_sound_Cramer_1993+0x5c8>)
 80022a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ac:	f7fe f914 	bl	80004d8 <__aeabi_dmul>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	a387      	add	r3, pc, #540	@ (adr r3, 80024d8 <calculate_speed_of_sound_Cramer_1993+0x5d0>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fe f90b 	bl	80004d8 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	a385      	add	r3, pc, #532	@ (adr r3, 80024e0 <calculate_speed_of_sound_Cramer_1993+0x5d8>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fd ff4a 	bl	8000168 <__aeabi_dsub>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4614      	mov	r4, r2
 80022da:	461d      	mov	r5, r3
 80022dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80022de:	f7fe f8a3 	bl	8000428 <__aeabi_f2d>
 80022e2:	a381      	add	r3, pc, #516	@ (adr r3, 80024e8 <calculate_speed_of_sound_Cramer_1993+0x5e0>)
 80022e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e8:	f7fe f8f6 	bl	80004d8 <__aeabi_dmul>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	a37e      	add	r3, pc, #504	@ (adr r3, 80024f0 <calculate_speed_of_sound_Cramer_1993+0x5e8>)
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	f7fe f8ed 	bl	80004d8 <__aeabi_dmul>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4620      	mov	r0, r4
 8002304:	4629      	mov	r1, r5
 8002306:	f7fd ff2f 	bl	8000168 <__aeabi_dsub>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4614      	mov	r4, r2
 8002310:	461d      	mov	r5, r3
 8002312:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002314:	f7fe f888 	bl	8000428 <__aeabi_f2d>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4620      	mov	r0, r4
 800231e:	4629      	mov	r1, r5
 8002320:	f7fe f8da 	bl	80004d8 <__aeabi_dmul>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4614      	mov	r4, r2
 800232a:	461d      	mov	r5, r3
 800232c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800232e:	f7fe f87b 	bl	8000428 <__aeabi_f2d>
 8002332:	a371      	add	r3, pc, #452	@ (adr r3, 80024f8 <calculate_speed_of_sound_Cramer_1993+0x5f0>)
 8002334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002338:	f7fe f8ce 	bl	80004d8 <__aeabi_dmul>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	a16f      	add	r1, pc, #444	@ (adr r1, 8002500 <calculate_speed_of_sound_Cramer_1993+0x5f8>)
 8002342:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002346:	f7fd ff0f 	bl	8000168 <__aeabi_dsub>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4690      	mov	r8, r2
 8002350:	4699      	mov	r9, r3
 8002352:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002354:	f7fe f868 	bl	8000428 <__aeabi_f2d>
 8002358:	a36b      	add	r3, pc, #428	@ (adr r3, 8002508 <calculate_speed_of_sound_Cramer_1993+0x600>)
 800235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235e:	f7fe f8bb 	bl	80004d8 <__aeabi_dmul>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	a369      	add	r3, pc, #420	@ (adr r3, 8002510 <calculate_speed_of_sound_Cramer_1993+0x608>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fe f8b2 	bl	80004d8 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4640      	mov	r0, r8
 800237a:	4649      	mov	r1, r9
 800237c:	f7fd fef6 	bl	800016c <__adddf3>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4690      	mov	r8, r2
 8002386:	4699      	mov	r9, r3
 8002388:	6938      	ldr	r0, [r7, #16]
 800238a:	f7fe f84d 	bl	8000428 <__aeabi_f2d>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4640      	mov	r0, r8
 8002394:	4649      	mov	r1, r9
 8002396:	f7fe f89f 	bl	80004d8 <__aeabi_dmul>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4620      	mov	r0, r4
 80023a0:	4629      	mov	r1, r5
 80023a2:	f7fd fee3 	bl	800016c <__adddf3>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7fe fb6b 	bl	8000a88 <__aeabi_d2f>
 80023b2:	4603      	mov	r3, r0
 80023b4:	60bb      	str	r3, [r7, #8]
	float C3 = Xw * Xw * 2.835149 - mPres * mPres * 2.15 * pow(10,-13) + Xc * Xc * 29.179762 + 4.86 * pow(10,-4) * Xw * mPres * Xc;
 80023b6:	6979      	ldr	r1, [r7, #20]
 80023b8:	6978      	ldr	r0, [r7, #20]
 80023ba:	f7fe fcc3 	bl	8000d44 <__aeabi_fmul>
 80023be:	4603      	mov	r3, r0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe f831 	bl	8000428 <__aeabi_f2d>
 80023c6:	a354      	add	r3, pc, #336	@ (adr r3, 8002518 <calculate_speed_of_sound_Cramer_1993+0x610>)
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	f7fe f884 	bl	80004d8 <__aeabi_dmul>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4614      	mov	r4, r2
 80023d6:	461d      	mov	r5, r3
 80023d8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80023da:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80023dc:	f7fe fcb2 	bl	8000d44 <__aeabi_fmul>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe f820 	bl	8000428 <__aeabi_f2d>
 80023e8:	a34d      	add	r3, pc, #308	@ (adr r3, 8002520 <calculate_speed_of_sound_Cramer_1993+0x618>)
 80023ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ee:	f7fe f873 	bl	80004d8 <__aeabi_dmul>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	a34b      	add	r3, pc, #300	@ (adr r3, 8002528 <calculate_speed_of_sound_Cramer_1993+0x620>)
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	f7fe f86a 	bl	80004d8 <__aeabi_dmul>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4620      	mov	r0, r4
 800240a:	4629      	mov	r1, r5
 800240c:	f7fd feac 	bl	8000168 <__aeabi_dsub>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4614      	mov	r4, r2
 8002416:	461d      	mov	r5, r3
 8002418:	6939      	ldr	r1, [r7, #16]
 800241a:	6938      	ldr	r0, [r7, #16]
 800241c:	f7fe fc92 	bl	8000d44 <__aeabi_fmul>
 8002420:	4603      	mov	r3, r0
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe f800 	bl	8000428 <__aeabi_f2d>
 8002428:	a341      	add	r3, pc, #260	@ (adr r3, 8002530 <calculate_speed_of_sound_Cramer_1993+0x628>)
 800242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242e:	f7fe f853 	bl	80004d8 <__aeabi_dmul>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4620      	mov	r0, r4
 8002438:	4629      	mov	r1, r5
 800243a:	f7fd fe97 	bl	800016c <__adddf3>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4614      	mov	r4, r2
 8002444:	461d      	mov	r5, r3
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7fd ffee 	bl	8000428 <__aeabi_f2d>
 800244c:	a33a      	add	r3, pc, #232	@ (adr r3, 8002538 <calculate_speed_of_sound_Cramer_1993+0x630>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	f7fe f841 	bl	80004d8 <__aeabi_dmul>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4690      	mov	r8, r2
 800245c:	4699      	mov	r9, r3
 800245e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002460:	f7fd ffe2 	bl	8000428 <__aeabi_f2d>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4640      	mov	r0, r8
 800246a:	4649      	mov	r1, r9
 800246c:	f7fe f834 	bl	80004d8 <__aeabi_dmul>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4690      	mov	r8, r2
 8002476:	4699      	mov	r9, r3
 8002478:	6938      	ldr	r0, [r7, #16]
 800247a:	f7fd ffd5 	bl	8000428 <__aeabi_f2d>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4640      	mov	r0, r8
 8002484:	4649      	mov	r1, r9
 8002486:	f7fe f827 	bl	80004d8 <__aeabi_dmul>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4620      	mov	r0, r4
 8002490:	4629      	mov	r1, r5
 8002492:	f7fd fe6b 	bl	800016c <__adddf3>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	f7fe faf3 	bl	8000a88 <__aeabi_d2f>
 80024a2:	4603      	mov	r3, r0
 80024a4:	607b      	str	r3, [r7, #4]

	p_log_data->dist.speed_of_sound = C1 + C2 - C3;
 80024a6:	68b9      	ldr	r1, [r7, #8]
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f7fe fb43 	bl	8000b34 <__addsf3>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b23      	ldr	r3, [pc, #140]	@ (8002540 <calculate_speed_of_sound_Cramer_1993+0x638>)
 80024b4:	681c      	ldr	r4, [r3, #0]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4610      	mov	r0, r2
 80024ba:	f7fe fb39 	bl	8000b30 <__aeabi_fsub>
 80024be:	4603      	mov	r3, r0
 80024c0:	6123      	str	r3, [r4, #16]

	return;
 80024c2:	bf00      	nop
}
 80024c4:	3740      	adds	r7, #64	@ 0x40
 80024c6:	46bd      	mov	sp, r7
 80024c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024cc:	f3af 8000 	nop.w
 80024d0:	3d70a3d7 	.word	0x3d70a3d7
 80024d4:	400dd70a 	.word	0x400dd70a
 80024d8:	e2308c3a 	.word	0xe2308c3a
 80024dc:	3e45798e 	.word	0x3e45798e
 80024e0:	ee17391b 	.word	0xee17391b
 80024e4:	3e886d78 	.word	0x3e886d78
 80024e8:	d70a3d71 	.word	0xd70a3d71
 80024ec:	400770a3 	.word	0x400770a3
 80024f0:	d9d7bdbb 	.word	0xd9d7bdbb
 80024f4:	3ddb7cdf 	.word	0x3ddb7cdf
 80024f8:	a4a8c155 	.word	0xa4a8c155
 80024fc:	3fcd404e 	.word	0x3fcd404e
 8002500:	55c52e73 	.word	0x55c52e73
 8002504:	c0554d65 	.word	0xc0554d65
 8002508:	0a3d70a4 	.word	0x0a3d70a4
 800250c:	4017a3d7 	.word	0x4017a3d7
 8002510:	88e368f1 	.word	0x88e368f1
 8002514:	3ee4f8b5 	.word	0x3ee4f8b5
 8002518:	99524bfd 	.word	0x99524bfd
 800251c:	4006ae62 	.word	0x4006ae62
 8002520:	33333333 	.word	0x33333333
 8002524:	40013333 	.word	0x40013333
 8002528:	68497682 	.word	0x68497682
 800252c:	3d3c25c2 	.word	0x3d3c25c2
 8002530:	e1e71045 	.word	0xe1e71045
 8002534:	403d2e04 	.word	0x403d2e04
 8002538:	1b1960fb 	.word	0x1b1960fb
 800253c:	3f3fd9ba 	.word	0x3f3fd9ba
 8002540:	20000424 	.word	0x20000424

08002544 <lsd_log_write>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

void lsd_log_write( LSD_LOG_DATA_T *p_log_data ){
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	lsd_get_rtc_timestamp( &log_timestamp );
 800254c:	480c      	ldr	r0, [pc, #48]	@ (8002580 <lsd_log_write+0x3c>)
 800254e:	f7ff fb29 	bl	8001ba4 <lsd_get_rtc_timestamp>

	uint8_t try_count = 10;
 8002552:	230a      	movs	r3, #10
 8002554:	73fb      	strb	r3, [r7, #15]
	do{
		write_log_values( p_log_data );
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f814 	bl	8002584 <write_log_values>
		try_count--;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	3b01      	subs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
		HAL_Delay( 10 );
 8002562:	200a      	movs	r0, #10
 8002564:	f001 fc56 	bl	8003e14 <HAL_Delay>
	} while( log_values_check() != LSD_OK && try_count >= 0 );
 8002568:	f000 f99e 	bl	80028a8 <log_values_check>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f1      	bne.n	8002556 <lsd_log_write+0x12>

	update_pos_indexes();
 8002572:	f000 f9cd 	bl	8002910 <update_pos_indexes>
	return;
 8002576:	bf00      	nop
}
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000428 	.word	0x20000428

08002584 <write_log_values>:
	log_mngr.was_transmitted 		= lsd_log_buffer[pos].was_transmitted;

	return;
}

static void write_log_values( LSD_LOG_DATA_T *p_log_data ){
 8002584:	b590      	push	{r4, r7, lr}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	// Update local log buffer:
	log_mngr.timestamp.year 		= log_timestamp.year;
 800258c:	4bb2      	ldr	r3, [pc, #712]	@ (8002858 <write_log_values+0x2d4>)
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	4bb2      	ldr	r3, [pc, #712]	@ (800285c <write_log_values+0x2d8>)
 8002592:	701a      	strb	r2, [r3, #0]
	log_mngr.timestamp.month 		= log_timestamp.month;
 8002594:	4bb0      	ldr	r3, [pc, #704]	@ (8002858 <write_log_values+0x2d4>)
 8002596:	785b      	ldrb	r3, [r3, #1]
 8002598:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800259c:	b2d9      	uxtb	r1, r3
 800259e:	4aaf      	ldr	r2, [pc, #700]	@ (800285c <write_log_values+0x2d8>)
 80025a0:	7853      	ldrb	r3, [r2, #1]
 80025a2:	f361 0303 	bfi	r3, r1, #0, #4
 80025a6:	7053      	strb	r3, [r2, #1]
	log_mngr.timestamp.day 			= log_timestamp.day;
 80025a8:	4bab      	ldr	r3, [pc, #684]	@ (8002858 <write_log_values+0x2d4>)
 80025aa:	789b      	ldrb	r3, [r3, #2]
 80025ac:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80025b0:	b2d9      	uxtb	r1, r3
 80025b2:	4aaa      	ldr	r2, [pc, #680]	@ (800285c <write_log_values+0x2d8>)
 80025b4:	7893      	ldrb	r3, [r2, #2]
 80025b6:	f361 0304 	bfi	r3, r1, #0, #5
 80025ba:	7093      	strb	r3, [r2, #2]
	log_mngr.timestamp.hour 		= log_timestamp.hour;
 80025bc:	4ba6      	ldr	r3, [pc, #664]	@ (8002858 <write_log_values+0x2d4>)
 80025be:	78db      	ldrb	r3, [r3, #3]
 80025c0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80025c4:	b2d9      	uxtb	r1, r3
 80025c6:	4aa5      	ldr	r2, [pc, #660]	@ (800285c <write_log_values+0x2d8>)
 80025c8:	78d3      	ldrb	r3, [r2, #3]
 80025ca:	f361 0304 	bfi	r3, r1, #0, #5
 80025ce:	70d3      	strb	r3, [r2, #3]
	log_mngr.timestamp.minute 		= log_timestamp.minute;
 80025d0:	4ba1      	ldr	r3, [pc, #644]	@ (8002858 <write_log_values+0x2d4>)
 80025d2:	791b      	ldrb	r3, [r3, #4]
 80025d4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80025d8:	b2d9      	uxtb	r1, r3
 80025da:	4aa0      	ldr	r2, [pc, #640]	@ (800285c <write_log_values+0x2d8>)
 80025dc:	7913      	ldrb	r3, [r2, #4]
 80025de:	f361 0305 	bfi	r3, r1, #0, #6
 80025e2:	7113      	strb	r3, [r2, #4]
	log_mngr.timestamp.second 		= log_timestamp.second;
 80025e4:	4b9c      	ldr	r3, [pc, #624]	@ (8002858 <write_log_values+0x2d4>)
 80025e6:	795b      	ldrb	r3, [r3, #5]
 80025e8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80025ec:	b2d9      	uxtb	r1, r3
 80025ee:	4a9b      	ldr	r2, [pc, #620]	@ (800285c <write_log_values+0x2d8>)
 80025f0:	7953      	ldrb	r3, [r2, #5]
 80025f2:	f361 0305 	bfi	r3, r1, #0, #6
 80025f6:	7153      	strb	r3, [r2, #5]
	log_mngr.timestamp.reserved		= log_timestamp.reserved;
 80025f8:	4b97      	ldr	r3, [pc, #604]	@ (8002858 <write_log_values+0x2d4>)
 80025fa:	799b      	ldrb	r3, [r3, #6]
 80025fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002600:	b2d9      	uxtb	r1, r3
 8002602:	4a96      	ldr	r2, [pc, #600]	@ (800285c <write_log_values+0x2d8>)
 8002604:	7993      	ldrb	r3, [r2, #6]
 8002606:	f361 0303 	bfi	r3, r1, #0, #4
 800260a:	7193      	strb	r3, [r2, #6]
	log_mngr.temperature_centi_C	= (uint16_t) ( 100 * p_log_data->clim.temperature);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4993      	ldr	r1, [pc, #588]	@ (8002860 <write_log_values+0x2dc>)
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fb96 	bl	8000d44 <__aeabi_fmul>
 8002618:	4603      	mov	r3, r0
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fd58 	bl	80010d0 <__aeabi_f2uiz>
 8002620:	4603      	mov	r3, r0
 8002622:	b29a      	uxth	r2, r3
 8002624:	4b8d      	ldr	r3, [pc, #564]	@ (800285c <write_log_values+0x2d8>)
 8002626:	811a      	strh	r2, [r3, #8]
	log_mngr.humidity_centi_RH		= (uint16_t) ( 100 * p_log_data->clim.humidity );
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	498c      	ldr	r1, [pc, #560]	@ (8002860 <write_log_values+0x2dc>)
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fb88 	bl	8000d44 <__aeabi_fmul>
 8002634:	4603      	mov	r3, r0
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fd4a 	bl	80010d0 <__aeabi_f2uiz>
 800263c:	4603      	mov	r3, r0
 800263e:	b29a      	uxth	r2, r3
 8002640:	4b86      	ldr	r3, [pc, #536]	@ (800285c <write_log_values+0x2d8>)
 8002642:	815a      	strh	r2, [r3, #10]
	log_mngr.speed_of_sound_mps 	= (uint16_t) ( 100 * p_log_data->dist.speed_of_sound );
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	4985      	ldr	r1, [pc, #532]	@ (8002860 <write_log_values+0x2dc>)
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fb7a 	bl	8000d44 <__aeabi_fmul>
 8002650:	4603      	mov	r3, r0
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fd3c 	bl	80010d0 <__aeabi_f2uiz>
 8002658:	4603      	mov	r3, r0
 800265a:	b29a      	uxth	r2, r3
 800265c:	4b7f      	ldr	r3, [pc, #508]	@ (800285c <write_log_values+0x2d8>)
 800265e:	819a      	strh	r2, [r3, #12]
	log_mngr.distance_mm 			= (uint16_t) ( 10  * p_log_data->dist.distance );		// cm to mm
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	497f      	ldr	r1, [pc, #508]	@ (8002864 <write_log_values+0x2e0>)
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fb6c 	bl	8000d44 <__aeabi_fmul>
 800266c:	4603      	mov	r3, r0
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fd2e 	bl	80010d0 <__aeabi_f2uiz>
 8002674:	4603      	mov	r3, r0
 8002676:	b29a      	uxth	r2, r3
 8002678:	4b78      	ldr	r3, [pc, #480]	@ (800285c <write_log_values+0x2d8>)
 800267a:	81da      	strh	r2, [r3, #14]
	log_mngr.found_errors 			= p_log_data->errors;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	7e1a      	ldrb	r2, [r3, #24]
 8002680:	4b76      	ldr	r3, [pc, #472]	@ (800285c <write_log_values+0x2d8>)
 8002682:	741a      	strb	r2, [r3, #16]
	log_mngr.was_transmitted 		= p_log_data->transmitted;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	7e5a      	ldrb	r2, [r3, #25]
 8002688:	4b74      	ldr	r3, [pc, #464]	@ (800285c <write_log_values+0x2d8>)
 800268a:	745a      	strb	r2, [r3, #17]

	// Update global log buffer:
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.year 			= log_timestamp.year;
 800268c:	4b76      	ldr	r3, [pc, #472]	@ (8002868 <write_log_values+0x2e4>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	4619      	mov	r1, r3
 8002692:	4b71      	ldr	r3, [pc, #452]	@ (8002858 <write_log_values+0x2d4>)
 8002694:	7818      	ldrb	r0, [r3, #0]
 8002696:	4a75      	ldr	r2, [pc, #468]	@ (800286c <write_log_values+0x2e8>)
 8002698:	460b      	mov	r3, r1
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	4602      	mov	r2, r0
 80026a4:	701a      	strb	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.month 		= log_timestamp.month;
 80026a6:	4b70      	ldr	r3, [pc, #448]	@ (8002868 <write_log_values+0x2e4>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002858 <write_log_values+0x2d4>)
 80026ae:	785b      	ldrb	r3, [r3, #1]
 80026b0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80026b4:	b2d9      	uxtb	r1, r3
 80026b6:	4a6d      	ldr	r2, [pc, #436]	@ (800286c <write_log_values+0x2e8>)
 80026b8:	4603      	mov	r3, r0
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4403      	add	r3, r0
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	441a      	add	r2, r3
 80026c2:	7853      	ldrb	r3, [r2, #1]
 80026c4:	f361 0303 	bfi	r3, r1, #0, #4
 80026c8:	7053      	strb	r3, [r2, #1]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.day 			= log_timestamp.day;
 80026ca:	4b67      	ldr	r3, [pc, #412]	@ (8002868 <write_log_values+0x2e4>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	4b61      	ldr	r3, [pc, #388]	@ (8002858 <write_log_values+0x2d4>)
 80026d2:	789b      	ldrb	r3, [r3, #2]
 80026d4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80026d8:	b2d9      	uxtb	r1, r3
 80026da:	4a64      	ldr	r2, [pc, #400]	@ (800286c <write_log_values+0x2e8>)
 80026dc:	4603      	mov	r3, r0
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4403      	add	r3, r0
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	441a      	add	r2, r3
 80026e6:	7893      	ldrb	r3, [r2, #2]
 80026e8:	f361 0304 	bfi	r3, r1, #0, #5
 80026ec:	7093      	strb	r3, [r2, #2]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.hour 			= log_timestamp.hour;
 80026ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002868 <write_log_values+0x2e4>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	4b58      	ldr	r3, [pc, #352]	@ (8002858 <write_log_values+0x2d4>)
 80026f6:	78db      	ldrb	r3, [r3, #3]
 80026f8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80026fc:	b2d9      	uxtb	r1, r3
 80026fe:	4a5b      	ldr	r2, [pc, #364]	@ (800286c <write_log_values+0x2e8>)
 8002700:	4603      	mov	r3, r0
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4403      	add	r3, r0
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	441a      	add	r2, r3
 800270a:	78d3      	ldrb	r3, [r2, #3]
 800270c:	f361 0304 	bfi	r3, r1, #0, #5
 8002710:	70d3      	strb	r3, [r2, #3]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.minute 		= log_timestamp.minute;
 8002712:	4b55      	ldr	r3, [pc, #340]	@ (8002868 <write_log_values+0x2e4>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	4b4f      	ldr	r3, [pc, #316]	@ (8002858 <write_log_values+0x2d4>)
 800271a:	791b      	ldrb	r3, [r3, #4]
 800271c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002720:	b2d9      	uxtb	r1, r3
 8002722:	4a52      	ldr	r2, [pc, #328]	@ (800286c <write_log_values+0x2e8>)
 8002724:	4603      	mov	r3, r0
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4403      	add	r3, r0
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	441a      	add	r2, r3
 800272e:	7913      	ldrb	r3, [r2, #4]
 8002730:	f361 0305 	bfi	r3, r1, #0, #6
 8002734:	7113      	strb	r3, [r2, #4]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.second 		= log_timestamp.second;
 8002736:	4b4c      	ldr	r3, [pc, #304]	@ (8002868 <write_log_values+0x2e4>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	4b46      	ldr	r3, [pc, #280]	@ (8002858 <write_log_values+0x2d4>)
 800273e:	795b      	ldrb	r3, [r3, #5]
 8002740:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002744:	b2d9      	uxtb	r1, r3
 8002746:	4a49      	ldr	r2, [pc, #292]	@ (800286c <write_log_values+0x2e8>)
 8002748:	4603      	mov	r3, r0
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4403      	add	r3, r0
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	441a      	add	r2, r3
 8002752:	7953      	ldrb	r3, [r2, #5]
 8002754:	f361 0305 	bfi	r3, r1, #0, #6
 8002758:	7153      	strb	r3, [r2, #5]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.reserved		= log_timestamp.reserved;
 800275a:	4b43      	ldr	r3, [pc, #268]	@ (8002868 <write_log_values+0x2e4>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	4b3d      	ldr	r3, [pc, #244]	@ (8002858 <write_log_values+0x2d4>)
 8002762:	799b      	ldrb	r3, [r3, #6]
 8002764:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002768:	b2d9      	uxtb	r1, r3
 800276a:	4a40      	ldr	r2, [pc, #256]	@ (800286c <write_log_values+0x2e8>)
 800276c:	4603      	mov	r3, r0
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4403      	add	r3, r0
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	441a      	add	r2, r3
 8002776:	7993      	ldrb	r3, [r2, #6]
 8002778:	f361 0303 	bfi	r3, r1, #0, #4
 800277c:	7193      	strb	r3, [r2, #6]

	lsd_log_buffer[lsd_log_buffer_next_pos].temperature_centi_C = (uint16_t) ( 100 * p_log_data->clim.temperature);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4937      	ldr	r1, [pc, #220]	@ (8002860 <write_log_values+0x2dc>)
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fadd 	bl	8000d44 <__aeabi_fmul>
 800278a:	4603      	mov	r3, r0
 800278c:	461a      	mov	r2, r3
 800278e:	4b36      	ldr	r3, [pc, #216]	@ (8002868 <write_log_values+0x2e4>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	461c      	mov	r4, r3
 8002794:	4610      	mov	r0, r2
 8002796:	f7fe fc9b 	bl	80010d0 <__aeabi_f2uiz>
 800279a:	4603      	mov	r3, r0
 800279c:	b299      	uxth	r1, r3
 800279e:	4a33      	ldr	r2, [pc, #204]	@ (800286c <write_log_values+0x2e8>)
 80027a0:	4623      	mov	r3, r4
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4423      	add	r3, r4
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	3308      	adds	r3, #8
 80027ac:	460a      	mov	r2, r1
 80027ae:	801a      	strh	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].humidity_centi_RH 	= (uint16_t) ( 100 * p_log_data->clim.humidity );
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	492a      	ldr	r1, [pc, #168]	@ (8002860 <write_log_values+0x2dc>)
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fac4 	bl	8000d44 <__aeabi_fmul>
 80027bc:	4603      	mov	r3, r0
 80027be:	461a      	mov	r2, r3
 80027c0:	4b29      	ldr	r3, [pc, #164]	@ (8002868 <write_log_values+0x2e4>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461c      	mov	r4, r3
 80027c6:	4610      	mov	r0, r2
 80027c8:	f7fe fc82 	bl	80010d0 <__aeabi_f2uiz>
 80027cc:	4603      	mov	r3, r0
 80027ce:	b299      	uxth	r1, r3
 80027d0:	4a26      	ldr	r2, [pc, #152]	@ (800286c <write_log_values+0x2e8>)
 80027d2:	4623      	mov	r3, r4
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4423      	add	r3, r4
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	330a      	adds	r3, #10
 80027de:	460a      	mov	r2, r1
 80027e0:	801a      	strh	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].speed_of_sound_mps 	= (uint16_t) ( 100 * p_log_data->dist.speed_of_sound );
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	491e      	ldr	r1, [pc, #120]	@ (8002860 <write_log_values+0x2dc>)
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe faab 	bl	8000d44 <__aeabi_fmul>
 80027ee:	4603      	mov	r3, r0
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002868 <write_log_values+0x2e4>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	461c      	mov	r4, r3
 80027f8:	4610      	mov	r0, r2
 80027fa:	f7fe fc69 	bl	80010d0 <__aeabi_f2uiz>
 80027fe:	4603      	mov	r3, r0
 8002800:	b299      	uxth	r1, r3
 8002802:	4a1a      	ldr	r2, [pc, #104]	@ (800286c <write_log_values+0x2e8>)
 8002804:	4623      	mov	r3, r4
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4423      	add	r3, r4
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4413      	add	r3, r2
 800280e:	330c      	adds	r3, #12
 8002810:	460a      	mov	r2, r1
 8002812:	801a      	strh	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].distance_mm 		= (uint16_t) ( 10  * p_log_data->dist.distance );		// cm to mm
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4912      	ldr	r1, [pc, #72]	@ (8002864 <write_log_values+0x2e0>)
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fa92 	bl	8000d44 <__aeabi_fmul>
 8002820:	4603      	mov	r3, r0
 8002822:	461a      	mov	r2, r3
 8002824:	4b10      	ldr	r3, [pc, #64]	@ (8002868 <write_log_values+0x2e4>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	461c      	mov	r4, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f7fe fc50 	bl	80010d0 <__aeabi_f2uiz>
 8002830:	4603      	mov	r3, r0
 8002832:	b299      	uxth	r1, r3
 8002834:	4a0d      	ldr	r2, [pc, #52]	@ (800286c <write_log_values+0x2e8>)
 8002836:	4623      	mov	r3, r4
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4423      	add	r3, r4
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	330e      	adds	r3, #14
 8002842:	460a      	mov	r2, r1
 8002844:	801a      	strh	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].found_errors 		= p_log_data->errors;
 8002846:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <write_log_values+0x2e4>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	4619      	mov	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7e18      	ldrb	r0, [r3, #24]
 8002850:	4a06      	ldr	r2, [pc, #24]	@ (800286c <write_log_values+0x2e8>)
 8002852:	460b      	mov	r3, r1
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	e00b      	b.n	8002870 <write_log_values+0x2ec>
 8002858:	20000428 	.word	0x20000428
 800285c:	20000430 	.word	0x20000430
 8002860:	42c80000 	.word	0x42c80000
 8002864:	41200000 	.word	0x41200000
 8002868:	20001670 	.word	0x20001670
 800286c:	20000470 	.word	0x20000470
 8002870:	440b      	add	r3, r1
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	3310      	adds	r3, #16
 8002878:	4602      	mov	r2, r0
 800287a:	701a      	strb	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].was_transmitted 	= p_log_data->transmitted;
 800287c:	4b08      	ldr	r3, [pc, #32]	@ (80028a0 <write_log_values+0x31c>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	4619      	mov	r1, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	7e58      	ldrb	r0, [r3, #25]
 8002886:	4a07      	ldr	r2, [pc, #28]	@ (80028a4 <write_log_values+0x320>)
 8002888:	460b      	mov	r3, r1
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	440b      	add	r3, r1
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	3311      	adds	r3, #17
 8002894:	4602      	mov	r2, r0
 8002896:	701a      	strb	r2, [r3, #0]

	/*
	 * TODO: save on flash memory
	 */

	return;
 8002898:	bf00      	nop
}
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bd90      	pop	{r4, r7, pc}
 80028a0:	20001670 	.word	0x20001670
 80028a4:	20000470 	.word	0x20000470

080028a8 <log_values_check>:

static int8_t log_values_check( void ){
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
	uint8_t *p_global = (uint8_t *) &lsd_log_buffer[lsd_log_buffer_next_pos];
 80028ae:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <log_values_check+0x5c>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	4613      	mov	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4413      	add	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4a12      	ldr	r2, [pc, #72]	@ (8002908 <log_values_check+0x60>)
 80028be:	4413      	add	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
	uint8_t *p_local = (uint8_t *) &log_mngr;
 80028c2:	4b12      	ldr	r3, [pc, #72]	@ (800290c <log_values_check+0x64>)
 80028c4:	60bb      	str	r3, [r7, #8]

	for( uint8_t i=0; i<sizeof(LSD_LOG_BUFFER_T); i++ ){
 80028c6:	2300      	movs	r3, #0
 80028c8:	71fb      	strb	r3, [r7, #7]
 80028ca:	e011      	b.n	80028f0 <log_values_check+0x48>
		if( *p_global != *p_local ){
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	781a      	ldrb	r2, [r3, #0]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d002      	beq.n	80028de <log_values_check+0x36>
			return LSD_ERR_CRC_CHECK;
 80028d8:	f06f 0305 	mvn.w	r3, #5
 80028dc:	e00c      	b.n	80028f8 <log_values_check+0x50>
		}
		p_global++;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3301      	adds	r3, #1
 80028e2:	60fb      	str	r3, [r7, #12]
		p_local++;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	3301      	adds	r3, #1
 80028e8:	60bb      	str	r3, [r7, #8]
	for( uint8_t i=0; i<sizeof(LSD_LOG_BUFFER_T); i++ ){
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	3301      	adds	r3, #1
 80028ee:	71fb      	strb	r3, [r7, #7]
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	2b11      	cmp	r3, #17
 80028f4:	d9ea      	bls.n	80028cc <log_values_check+0x24>
	}

	return LSD_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20001670 	.word	0x20001670
 8002908:	20000470 	.word	0x20000470
 800290c:	20000430 	.word	0x20000430

08002910 <update_pos_indexes>:

static void update_pos_indexes( void ){
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
	lsd_log_buffer_next_pos = ( lsd_log_buffer_next_pos + 1 ) % LSD_LOG_BUFFER_SIZE;
 8002914:	4b10      	ldr	r3, [pc, #64]	@ (8002958 <update_pos_indexes+0x48>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	3301      	adds	r3, #1
 800291a:	425a      	negs	r2, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	bf58      	it	pl
 8002922:	4253      	negpl	r3, r2
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <update_pos_indexes+0x48>)
 8002928:	701a      	strb	r2, [r3, #0]

	if( lsd_log_buffer_next_pos == lsd_log_buffer_first_pos ){
 800292a:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <update_pos_indexes+0x48>)
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	4b0b      	ldr	r3, [pc, #44]	@ (800295c <update_pos_indexes+0x4c>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d10b      	bne.n	800294e <update_pos_indexes+0x3e>
		lsd_log_buffer_first_pos = ( lsd_log_buffer_first_pos + 1 ) % LSD_LOG_BUFFER_SIZE;
 8002936:	4b09      	ldr	r3, [pc, #36]	@ (800295c <update_pos_indexes+0x4c>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	3301      	adds	r3, #1
 800293c:	425a      	negs	r2, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	bf58      	it	pl
 8002944:	4253      	negpl	r3, r2
 8002946:	b2da      	uxtb	r2, r3
 8002948:	4b04      	ldr	r3, [pc, #16]	@ (800295c <update_pos_indexes+0x4c>)
 800294a:	701a      	strb	r2, [r3, #0]
	}

	return;
 800294c:	bf00      	nop
 800294e:	bf00      	nop
}
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20001670 	.word	0x20001670
 800295c:	20001671 	.word	0x20001671

08002960 <state_machine_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

void state_machine_init( LSD_MCU_PERIPH_HANDLES_T *hmcu, lsd_sys_clk_cfg_t clk_cfg ){
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
	hmcu_periph = hmcu;
 800296a:	4a38      	ldr	r2, [pc, #224]	@ (8002a4c <state_machine_init+0xec>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6013      	str	r3, [r2, #0]
	lsd_clk_cfg = clk_cfg;
 8002970:	4a37      	ldr	r2, [pc, #220]	@ (8002a50 <state_machine_init+0xf0>)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin( SENSOR_PWR_GPIO_Port, SENSOR_PWR_Pin, LSD_SENSORS_OFF );  // turn sensors ON
 8002976:	2201      	movs	r2, #1
 8002978:	2110      	movs	r1, #16
 800297a:	4836      	ldr	r0, [pc, #216]	@ (8002a54 <state_machine_init+0xf4>)
 800297c:	f001 feb7 	bl	80046ee <HAL_GPIO_WritePin>

	int8_t ret = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]

	ret += lsd_common_init( hmcu_periph->mcu_htim[LSD_TIM_COMMON], hmcu_periph->mcu_hrtc );
 8002984:	4b31      	ldr	r3, [pc, #196]	@ (8002a4c <state_machine_init+0xec>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	4b30      	ldr	r3, [pc, #192]	@ (8002a4c <state_machine_init+0xec>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	4619      	mov	r1, r3
 8002992:	4610      	mov	r0, r2
 8002994:	f7ff f8aa 	bl	8001aec <lsd_common_init>
 8002998:	4603      	mov	r3, r0
 800299a:	b2da      	uxtb	r2, r3
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	4413      	add	r3, r2
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	73fb      	strb	r3, [r7, #15]
	ret += lsd_usb_init( ( uint32_t * ) hmcu_periph->mcu_huart[LSD_UART_FTDI] );
 80029a4:	4b29      	ldr	r3, [pc, #164]	@ (8002a4c <state_machine_init+0xec>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f9c0 	bl	8002d30 <lsd_usb_init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	4413      	add	r3, r2
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	73fb      	strb	r3, [r7, #15]
	ret += leds_init( hmcu_periph->mcu_htim[LSD_TIM_GENERAL] );
 80029bc:	4b23      	ldr	r3, [pc, #140]	@ (8002a4c <state_machine_init+0xec>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fe12 	bl	80015ec <leds_init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	4413      	add	r3, r2
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	73fb      	strb	r3, [r7, #15]
	ret += aht20_init( hmcu_periph->mcu_hi2c );
 80029d4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a4c <state_machine_init+0xec>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fb98 	bl	8001110 <aht20_init>
 80029e0:	4603      	mov	r3, r0
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	4413      	add	r3, r2
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	73fb      	strb	r3, [r7, #15]
	ret += ajsr04m_init( hmcu_periph->mcu_htim[LSD_TIM_SENSORS] );
 80029ec:	4b17      	ldr	r3, [pc, #92]	@ (8002a4c <state_machine_init+0xec>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fd16 	bl	8001424 <ajsr04m_init>
 80029f8:	4603      	mov	r3, r0
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	4413      	add	r3, r2
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	73fb      	strb	r3, [r7, #15]
	ret += le910r1br_init( hmcu_periph->mcu_huart[LSD_UART_MODEM], hmcu_periph->mcu_htim[LSD_TIM_GENERAL] );
 8002a04:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <state_machine_init+0xec>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	4b10      	ldr	r3, [pc, #64]	@ (8002a4c <state_machine_init+0xec>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f7fe fdb4 	bl	8001580 <le910r1br_init>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	4413      	add	r3, r2
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	73fb      	strb	r3, [r7, #15]

	char *msg = "System Initialized\r\n";
 8002a24:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <state_machine_init+0xf8>)
 8002a26:	60bb      	str	r3, [r7, #8]
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002a28:	68b8      	ldr	r0, [r7, #8]
 8002a2a:	f7fd fb91 	bl	8000150 <strlen>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4619      	mov	r1, r3
 8002a34:	68b8      	ldr	r0, [r7, #8]
 8002a36:	f000 f9d5 	bl	8002de4 <lsd_print_msg_usb>

	HAL_Delay( 1000 );
 8002a3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a3e:	f001 f9e9 	bl	8003e14 <HAL_Delay>

	return;
 8002a42:	bf00      	nop
}
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000444 	.word	0x20000444
 8002a50:	20000464 	.word	0x20000464
 8002a54:	40010c00 	.word	0x40010c00
 8002a58:	08012abc 	.word	0x08012abc

08002a5c <state_machine_run>:

void state_machine_run( void ){
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
	switch( current_state ){
 8002a60:	4b15      	ldr	r3, [pc, #84]	@ (8002ab8 <state_machine_run+0x5c>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d821      	bhi.n	8002aac <state_machine_run+0x50>
 8002a68:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <state_machine_run+0x14>)
 8002a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6e:	bf00      	nop
 8002a70:	08002a89 	.word	0x08002a89
 8002a74:	08002a8f 	.word	0x08002a8f
 8002a78:	08002a95 	.word	0x08002a95
 8002a7c:	08002a9b 	.word	0x08002a9b
 8002a80:	08002aa1 	.word	0x08002aa1
 8002a84:	08002aa7 	.word	0x08002aa7
		case S0_WAKEUP:
			state_machine_run_s0_wakeup();
 8002a88:	f000 f818 	bl	8002abc <state_machine_run_s0_wakeup>
			break;
 8002a8c:	e012      	b.n	8002ab4 <state_machine_run+0x58>

		case S1_MEASURE:
			state_machine_run_s1_measure();
 8002a8e:	f000 f877 	bl	8002b80 <state_machine_run_s1_measure>
			break;
 8002a92:	e00f      	b.n	8002ab4 <state_machine_run+0x58>

		case S2_ANALYZE:
			state_machine_run_s2_analyze();
 8002a94:	f000 f8a2 	bl	8002bdc <state_machine_run_s2_analyze>
			break;
 8002a98:	e00c      	b.n	8002ab4 <state_machine_run+0x58>

		case S3_TRANSMIT:
			state_machine_run_s3_transmit();
 8002a9a:	f000 f8c7 	bl	8002c2c <state_machine_run_s3_transmit>
			break;
 8002a9e:	e009      	b.n	8002ab4 <state_machine_run+0x58>

		case S4_SLEEP:
			state_machine_run_s4_sleep();
 8002aa0:	f000 f8e8 	bl	8002c74 <state_machine_run_s4_sleep>
			break;
 8002aa4:	e006      	b.n	8002ab4 <state_machine_run+0x58>

		case S5_FAIL_SAFE:
			state_machine_run_s5_fail_safe();
 8002aa6:	f000 f91b 	bl	8002ce0 <state_machine_run_s5_fail_safe>
			break;
 8002aaa:	e003      	b.n	8002ab4 <state_machine_run+0x58>

		default:
			current_state = S5_FAIL_SAFE;
 8002aac:	4b02      	ldr	r3, [pc, #8]	@ (8002ab8 <state_machine_run+0x5c>)
 8002aae:	2205      	movs	r2, #5
 8002ab0:	701a      	strb	r2, [r3, #0]
			break;
 8002ab2:	bf00      	nop
	}
	return;
 8002ab4:	bf00      	nop
}
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000443 	.word	0x20000443

08002abc <state_machine_run_s0_wakeup>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static void state_machine_run_s0_wakeup( void ){
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08c      	sub	sp, #48	@ 0x30
 8002ac0:	af00      	add	r7, sp, #0
	if( lsd_cycle_count > 0 ){
 8002ac2:	4b28      	ldr	r3, [pc, #160]	@ (8002b64 <state_machine_run_s0_wakeup+0xa8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <state_machine_run_s0_wakeup+0x18>
		lsd_exit_stop_mode( lsd_clk_cfg );
 8002aca:	4b27      	ldr	r3, [pc, #156]	@ (8002b68 <state_machine_run_s0_wakeup+0xac>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff f986 	bl	8001de0 <lsd_exit_stop_mode>
	}

	HAL_Delay( 1000 );
 8002ad4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ad8:	f001 f99c 	bl	8003e14 <HAL_Delay>
	lsd_cycle_count++;
 8002adc:	4b21      	ldr	r3, [pc, #132]	@ (8002b64 <state_machine_run_s0_wakeup+0xa8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	4a20      	ldr	r2, [pc, #128]	@ (8002b64 <state_machine_run_s0_wakeup+0xa8>)
 8002ae4:	6013      	str	r3, [r2, #0]

	char msg_cyle[40] = { 0 };
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	f107 0308 	add.w	r3, r7, #8
 8002aee:	2224      	movs	r2, #36	@ 0x24
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f00d f8a9 	bl	800fc4a <memset>
	snprintf( msg_cyle, 40, "\n********** Cycle %ld **********\n", lsd_cycle_count );
 8002af8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b64 <state_machine_run_s0_wakeup+0xa8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	1d38      	adds	r0, r7, #4
 8002afe:	4a1b      	ldr	r2, [pc, #108]	@ (8002b6c <state_machine_run_s0_wakeup+0xb0>)
 8002b00:	2128      	movs	r1, #40	@ 0x28
 8002b02:	f00d f82b 	bl	800fb5c <sniprintf>
	lsd_print_msg_usb( msg_cyle, strlen( msg_cyle ) );
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fb21 	bl	8000150 <strlen>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	1d3b      	adds	r3, r7, #4
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f964 	bl	8002de4 <lsd_print_msg_usb>

	char *msg = "S0 - Wakeup\n";
 8002b1c:	4b14      	ldr	r3, [pc, #80]	@ (8002b70 <state_machine_run_s0_wakeup+0xb4>)
 8002b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002b20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b22:	f7fd fb15 	bl	8000150 <strlen>
 8002b26:	4603      	mov	r3, r0
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b2e:	f000 f959 	bl	8002de4 <lsd_print_msg_usb>

	leds_turn_on( LSD_LED_RED );
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7fe fdba 	bl	80016ac <leds_turn_on>
//	le910r1br_power_on();
	HAL_GPIO_WritePin( SENSOR_PWR_GPIO_Port, SENSOR_PWR_Pin, LSD_SENSORS_ON );
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2110      	movs	r1, #16
 8002b3c:	480d      	ldr	r0, [pc, #52]	@ (8002b74 <state_machine_run_s0_wakeup+0xb8>)
 8002b3e:	f001 fdd6 	bl	80046ee <HAL_GPIO_WritePin>
	HAL_Delay( 100 );
 8002b42:	2064      	movs	r0, #100	@ 0x64
 8002b44:	f001 f966 	bl	8003e14 <HAL_Delay>
	leds_turn_off( LSD_LED_RED );
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7fe fe09 	bl	8001760 <leds_turn_off>

	previous_state = current_state;
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <state_machine_run_s0_wakeup+0xbc>)
 8002b50:	781a      	ldrb	r2, [r3, #0]
 8002b52:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <state_machine_run_s0_wakeup+0xc0>)
 8002b54:	701a      	strb	r2, [r3, #0]
	current_state = S1_MEASURE;
 8002b56:	4b08      	ldr	r3, [pc, #32]	@ (8002b78 <state_machine_run_s0_wakeup+0xbc>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
	return;
 8002b5c:	bf00      	nop
}
 8002b5e:	3730      	adds	r7, #48	@ 0x30
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	2000046c 	.word	0x2000046c
 8002b68:	20000464 	.word	0x20000464
 8002b6c:	08012ad4 	.word	0x08012ad4
 8002b70:	08012af8 	.word	0x08012af8
 8002b74:	40010c00 	.word	0x40010c00
 8002b78:	20000443 	.word	0x20000443
 8002b7c:	20000442 	.word	0x20000442

08002b80 <state_machine_run_s1_measure>:

static void state_machine_run_s1_measure( void ){
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
	char *msg = "S1 - Measuring\n";
 8002b86:	4b11      	ldr	r3, [pc, #68]	@ (8002bcc <state_machine_run_s1_measure+0x4c>)
 8002b88:	607b      	str	r3, [r7, #4]
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fd fae0 	bl	8000150 <strlen>
 8002b90:	4603      	mov	r3, r0
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f924 	bl	8002de4 <lsd_print_msg_usb>

	leds_turn_on( LSD_LED_BLUE );
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	f7fe fd85 	bl	80016ac <leds_turn_on>
	lsd_measure_distance( &lsd_log_data );
 8002ba2:	480b      	ldr	r0, [pc, #44]	@ (8002bd0 <state_machine_run_s1_measure+0x50>)
 8002ba4:	f7ff f94a 	bl	8001e3c <lsd_measure_distance>
	HAL_Delay( 100 );
 8002ba8:	2064      	movs	r0, #100	@ 0x64
 8002baa:	f001 f933 	bl	8003e14 <HAL_Delay>
	leds_turn_off( LSD_LED_BLUE );
 8002bae:	2001      	movs	r0, #1
 8002bb0:	f7fe fdd6 	bl	8001760 <leds_turn_off>

	previous_state = current_state;
 8002bb4:	4b07      	ldr	r3, [pc, #28]	@ (8002bd4 <state_machine_run_s1_measure+0x54>)
 8002bb6:	781a      	ldrb	r2, [r3, #0]
 8002bb8:	4b07      	ldr	r3, [pc, #28]	@ (8002bd8 <state_machine_run_s1_measure+0x58>)
 8002bba:	701a      	strb	r2, [r3, #0]
	current_state = S2_ANALYZE;
 8002bbc:	4b05      	ldr	r3, [pc, #20]	@ (8002bd4 <state_machine_run_s1_measure+0x54>)
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	701a      	strb	r2, [r3, #0]
	return;
 8002bc2:	bf00      	nop
}
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	08012b08 	.word	0x08012b08
 8002bd0:	20000448 	.word	0x20000448
 8002bd4:	20000443 	.word	0x20000443
 8002bd8:	20000442 	.word	0x20000442

08002bdc <state_machine_run_s2_analyze>:

static void state_machine_run_s2_analyze( void ){
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
	char *msg = "S2 - Analyzing data\n";
 8002be2:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <state_machine_run_s2_analyze+0x40>)
 8002be4:	607b      	str	r3, [r7, #4]
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fd fab2 	bl	8000150 <strlen>
 8002bec:	4603      	mov	r3, r0
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f8f6 	bl	8002de4 <lsd_print_msg_usb>

	lsd_analyze_data( &lsd_log_data );
 8002bf8:	4809      	ldr	r0, [pc, #36]	@ (8002c20 <state_machine_run_s2_analyze+0x44>)
 8002bfa:	f7ff f81d 	bl	8001c38 <lsd_analyze_data>
	lsd_log_write( &lsd_log_data );
 8002bfe:	4808      	ldr	r0, [pc, #32]	@ (8002c20 <state_machine_run_s2_analyze+0x44>)
 8002c00:	f7ff fca0 	bl	8002544 <lsd_log_write>
	 *  TODO: change next state depending on data, maybe skip a transmission or shorten sleep time.
	 *
	 *  lsd_change_sleep_time( hmcu_periph->mcu_hrtc, 0, 0, 5 );
	 */

	previous_state = current_state;
 8002c04:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <state_machine_run_s2_analyze+0x48>)
 8002c06:	781a      	ldrb	r2, [r3, #0]
 8002c08:	4b07      	ldr	r3, [pc, #28]	@ (8002c28 <state_machine_run_s2_analyze+0x4c>)
 8002c0a:	701a      	strb	r2, [r3, #0]
	current_state = S3_TRANSMIT;
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <state_machine_run_s2_analyze+0x48>)
 8002c0e:	2203      	movs	r2, #3
 8002c10:	701a      	strb	r2, [r3, #0]
	return;
 8002c12:	bf00      	nop
}
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	08012b18 	.word	0x08012b18
 8002c20:	20000448 	.word	0x20000448
 8002c24:	20000443 	.word	0x20000443
 8002c28:	20000442 	.word	0x20000442

08002c2c <state_machine_run_s3_transmit>:

static void state_machine_run_s3_transmit( void ){
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
	char *msg = "S3 - Transmitting\n";
 8002c32:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <state_machine_run_s3_transmit+0x38>)
 8002c34:	607b      	str	r3, [r7, #4]
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fd fa8a 	bl	8000150 <strlen>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f8ce 	bl	8002de4 <lsd_print_msg_usb>
//	HAL_Delay(500);
//
//	ret = le910r1br_check_cpin();
//	HAL_Delay(500);

	lsd_print_log_data_usb( &lsd_log_data );
 8002c48:	4807      	ldr	r0, [pc, #28]	@ (8002c68 <state_machine_run_s3_transmit+0x3c>)
 8002c4a:	f000 f8e9 	bl	8002e20 <lsd_print_log_data_usb>

	previous_state = current_state;
 8002c4e:	4b07      	ldr	r3, [pc, #28]	@ (8002c6c <state_machine_run_s3_transmit+0x40>)
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <state_machine_run_s3_transmit+0x44>)
 8002c54:	701a      	strb	r2, [r3, #0]
	current_state = S4_SLEEP;
 8002c56:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <state_machine_run_s3_transmit+0x40>)
 8002c58:	2204      	movs	r2, #4
 8002c5a:	701a      	strb	r2, [r3, #0]
	return;
 8002c5c:	bf00      	nop
}
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	08012b30 	.word	0x08012b30
 8002c68:	20000448 	.word	0x20000448
 8002c6c:	20000443 	.word	0x20000443
 8002c70:	20000442 	.word	0x20000442

08002c74 <state_machine_run_s4_sleep>:

static void state_machine_run_s4_sleep( void ){
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
	char *msg = "S4 - Entering sleep\n";
 8002c7a:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <state_machine_run_s4_sleep+0x5c>)
 8002c7c:	607b      	str	r3, [r7, #4]
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fd fa66 	bl	8000150 <strlen>
 8002c84:	4603      	mov	r3, r0
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f8aa 	bl	8002de4 <lsd_print_msg_usb>

	previous_state = current_state;
 8002c90:	4b10      	ldr	r3, [pc, #64]	@ (8002cd4 <state_machine_run_s4_sleep+0x60>)
 8002c92:	781a      	ldrb	r2, [r3, #0]
 8002c94:	4b10      	ldr	r3, [pc, #64]	@ (8002cd8 <state_machine_run_s4_sleep+0x64>)
 8002c96:	701a      	strb	r2, [r3, #0]
	current_state = S0_WAKEUP;
 8002c98:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd4 <state_machine_run_s4_sleep+0x60>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]

	leds_turn_on( LSD_LED_RED );
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7fe fd04 	bl	80016ac <leds_turn_on>
//	le910r1br_power_off();
	HAL_GPIO_WritePin( SENSOR_PWR_GPIO_Port, SENSOR_PWR_Pin, LSD_SENSORS_OFF );
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	2110      	movs	r1, #16
 8002ca8:	480c      	ldr	r0, [pc, #48]	@ (8002cdc <state_machine_run_s4_sleep+0x68>)
 8002caa:	f001 fd20 	bl	80046ee <HAL_GPIO_WritePin>
	HAL_Delay( 100 );
 8002cae:	2064      	movs	r0, #100	@ 0x64
 8002cb0:	f001 f8b0 	bl	8003e14 <HAL_Delay>
	leds_turn_off( LSD_LED_RED );
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f7fe fd53 	bl	8001760 <leds_turn_off>

	lsd_enter_stop_mode();
 8002cba:	f7ff f8a3 	bl	8001e04 <lsd_enter_stop_mode>
	HAL_Delay( 1000 );
 8002cbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cc2:	f001 f8a7 	bl	8003e14 <HAL_Delay>
	return;
 8002cc6:	bf00      	nop
}
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	08012b44 	.word	0x08012b44
 8002cd4:	20000443 	.word	0x20000443
 8002cd8:	20000442 	.word	0x20000442
 8002cdc:	40010c00 	.word	0x40010c00

08002ce0 <state_machine_run_s5_fail_safe>:

static void state_machine_run_s5_fail_safe( void ){
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
	char *msg = "S5 - Fail safe\n";
 8002ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d24 <state_machine_run_s5_fail_safe+0x44>)
 8002ce8:	607b      	str	r3, [r7, #4]
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fd fa30 	bl	8000150 <strlen>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f874 	bl	8002de4 <lsd_print_msg_usb>

	if( previous_state != current_state ){  // first time entering S5 state
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <state_machine_run_s5_fail_safe+0x48>)
 8002cfe:	781a      	ldrb	r2, [r3, #0]
 8002d00:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <state_machine_run_s5_fail_safe+0x4c>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d002      	beq.n	8002d0e <state_machine_run_s5_fail_safe+0x2e>
		leds_blink_fast( LSD_LED_RED );
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7fe fd79 	bl	8001800 <leds_blink_fast>

	/*
	 *	TODO: identify issue, print and try solving it
	 */

	previous_state = current_state;
 8002d0e:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <state_machine_run_s5_fail_safe+0x4c>)
 8002d10:	781a      	ldrb	r2, [r3, #0]
 8002d12:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <state_machine_run_s5_fail_safe+0x48>)
 8002d14:	701a      	strb	r2, [r3, #0]
	current_state = S5_FAIL_SAFE;
 8002d16:	4b05      	ldr	r3, [pc, #20]	@ (8002d2c <state_machine_run_s5_fail_safe+0x4c>)
 8002d18:	2205      	movs	r2, #5
 8002d1a:	701a      	strb	r2, [r3, #0]
	return;
 8002d1c:	bf00      	nop
}
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	08012b5c 	.word	0x08012b5c
 8002d28:	20000442 	.word	0x20000442
 8002d2c:	20000443 	.word	0x20000443

08002d30 <lsd_usb_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t lsd_usb_init( uint32_t *periph_handle ){
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
#if LSD_PERIPH_USED_USB == TRUE
	__HAL_RCC_USB_CLK_ENABLE();
	MX_USB_DEVICE_Init();
#else
	if( periph_handle == NULL ){
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <lsd_usb_init+0x14>
		return LSD_ERR_NULL_HANDLE;
 8002d3e:	f06f 0302 	mvn.w	r3, #2
 8002d42:	e02f      	b.n	8002da4 <lsd_usb_init+0x74>
	}

	p_lsd_huart = ( UART_HandleTypeDef * ) periph_handle;
 8002d44:	4a19      	ldr	r2, [pc, #100]	@ (8002dac <lsd_usb_init+0x7c>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6013      	str	r3, [r2, #0]

	p_lsd_huart->Instance = USART2;
 8002d4a:	4b18      	ldr	r3, [pc, #96]	@ (8002dac <lsd_usb_init+0x7c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a18      	ldr	r2, [pc, #96]	@ (8002db0 <lsd_usb_init+0x80>)
 8002d50:	601a      	str	r2, [r3, #0]
	p_lsd_huart->Init.BaudRate = 115200;
 8002d52:	4b16      	ldr	r3, [pc, #88]	@ (8002dac <lsd_usb_init+0x7c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d5a:	605a      	str	r2, [r3, #4]
	p_lsd_huart->Init.WordLength = UART_WORDLENGTH_8B;
 8002d5c:	4b13      	ldr	r3, [pc, #76]	@ (8002dac <lsd_usb_init+0x7c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
	p_lsd_huart->Init.StopBits = UART_STOPBITS_1;
 8002d64:	4b11      	ldr	r3, [pc, #68]	@ (8002dac <lsd_usb_init+0x7c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	60da      	str	r2, [r3, #12]
	p_lsd_huart->Init.Parity = UART_PARITY_NONE;
 8002d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dac <lsd_usb_init+0x7c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2200      	movs	r2, #0
 8002d72:	611a      	str	r2, [r3, #16]
	p_lsd_huart->Init.Mode = UART_MODE_TX_RX;
 8002d74:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <lsd_usb_init+0x7c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	220c      	movs	r2, #12
 8002d7a:	615a      	str	r2, [r3, #20]
	p_lsd_huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <lsd_usb_init+0x7c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2200      	movs	r2, #0
 8002d82:	619a      	str	r2, [r3, #24]
	p_lsd_huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8002d84:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <lsd_usb_init+0x7c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	61da      	str	r2, [r3, #28]

	if( HAL_UART_Init( p_lsd_huart ) != HAL_OK )
 8002d8c:	4b07      	ldr	r3, [pc, #28]	@ (8002dac <lsd_usb_init+0x7c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f006 ff8b 	bl	8009cac <HAL_UART_Init>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <lsd_usb_init+0x72>
	{
		return LSD_ERR_INIT_FAIL;
 8002d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002da0:	e000      	b.n	8002da4 <lsd_usb_init+0x74>
	}
#endif /* LSD_PERIPH_USED_USB */

	return LSD_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000468 	.word	0x20000468
 8002db0:	40004400 	.word	0x40004400

08002db4 <lsd_usb_reinit>:

int8_t lsd_usb_reinit( void ){
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
#if LSD_PERIPH_USED_USB == TRUE
	return lsd_usb_init( NULL );
#else
	return lsd_usb_init( ( uint32_t * ) p_lsd_huart );
 8002db8:	4b03      	ldr	r3, [pc, #12]	@ (8002dc8 <lsd_usb_reinit+0x14>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ffb7 	bl	8002d30 <lsd_usb_init>
 8002dc2:	4603      	mov	r3, r0
#endif /* LSD_PERIPH_USED_USB */
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000468 	.word	0x20000468

08002dcc <lsd_usb_deinit>:

int8_t lsd_usb_deinit( void ){
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
#if LSD_PERIPH_USED_USB == TRUE
	MX_USB_DEVICE_Deinit();
	__HAL_RCC_USB_CLK_DISABLE();
#else
	HAL_UART_DeInit( p_lsd_huart );
 8002dd0:	4b03      	ldr	r3, [pc, #12]	@ (8002de0 <lsd_usb_deinit+0x14>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f006 ffb9 	bl	8009d4c <HAL_UART_DeInit>
#endif /* LSD_PERIPH_USED_USB */

	return LSD_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20000468 	.word	0x20000468

08002de4 <lsd_print_msg_usb>:

int8_t lsd_print_msg_usb( char *msg, uint16_t msg_len ){
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
	if( msg == NULL || msg_len <= 0 ){
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <lsd_print_msg_usb+0x18>
 8002df6:	887b      	ldrh	r3, [r7, #2]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <lsd_print_msg_usb+0x1e>
		return LSD_ERR_NULL_HANDLE;
 8002dfc:	f06f 0302 	mvn.w	r3, #2
 8002e00:	e008      	b.n	8002e14 <lsd_print_msg_usb+0x30>
	}

#if LSD_PERIPH_USED_USB == TRUE
	CDC_Transmit_FS( (uint8_t *) msg, msg_len );
#else
	HAL_UART_Transmit( p_lsd_huart, (const uint8_t *) msg, msg_len, 1000 );
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <lsd_print_msg_usb+0x38>)
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	f006 ffcf 	bl	8009db0 <HAL_UART_Transmit>
#endif /* LSD_PERIPH_USED_USB */

	return LSD_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000468 	.word	0x20000468

08002e20 <lsd_print_log_data_usb>:

int8_t lsd_print_log_data_usb( LSD_LOG_DATA_T *p_log ){
 8002e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e24:	b0aa      	sub	sp, #168	@ 0xa8
 8002e26:	af08      	add	r7, sp, #32
 8002e28:	6078      	str	r0, [r7, #4]
	if( p_log == NULL ){
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d102      	bne.n	8002e36 <lsd_print_log_data_usb+0x16>
		return LSD_ERR_NULL_HANDLE;
 8002e30:	f06f 0302 	mvn.w	r3, #2
 8002e34:	e0f5      	b.n	8003022 <lsd_print_log_data_usb+0x202>
	}

	char msg[USB_LOG_DATA_MSG_SIZE];

	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "temperature = %.2f [*C]\tcategory : %d\n",
			p_log->clim.temperature, p_log->clim.temperature_category );
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "temperature = %.2f [*C]\tcategory : %d\n",
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd faf4 	bl	8000428 <__aeabi_f2d>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
			p_log->clim.temperature, p_log->clim.temperature_category );
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	7a09      	ldrb	r1, [r1, #8]
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "temperature = %.2f [*C]\tcategory : %d\n",
 8002e48:	f107 0008 	add.w	r0, r7, #8
 8002e4c:	9102      	str	r1, [sp, #8]
 8002e4e:	e9cd 2300 	strd	r2, r3, [sp]
 8002e52:	4a76      	ldr	r2, [pc, #472]	@ (800302c <lsd_print_log_data_usb+0x20c>)
 8002e54:	2180      	movs	r1, #128	@ 0x80
 8002e56:	f00c fe81 	bl	800fb5c <sniprintf>
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002e5a:	f107 0308 	add.w	r3, r7, #8
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd f976 	bl	8000150 <strlen>
 8002e64:	4603      	mov	r3, r0
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	f107 0308 	add.w	r3, r7, #8
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ffb8 	bl	8002de4 <lsd_print_msg_usb>

	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "humidity = %.2f [RH]\tcategory : %d\n",
			p_log->clim.humidity, p_log->clim.humidity_category );
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "humidity = %.2f [RH]\tcategory : %d\n",
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd fad5 	bl	8000428 <__aeabi_f2d>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
			p_log->clim.humidity, p_log->clim.humidity_category );
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	7a49      	ldrb	r1, [r1, #9]
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "humidity = %.2f [RH]\tcategory : %d\n",
 8002e86:	f107 0008 	add.w	r0, r7, #8
 8002e8a:	9102      	str	r1, [sp, #8]
 8002e8c:	e9cd 2300 	strd	r2, r3, [sp]
 8002e90:	4a67      	ldr	r2, [pc, #412]	@ (8003030 <lsd_print_log_data_usb+0x210>)
 8002e92:	2180      	movs	r1, #128	@ 0x80
 8002e94:	f00c fe62 	bl	800fb5c <sniprintf>
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fd f957 	bl	8000150 <strlen>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	f107 0308 	add.w	r3, r7, #8
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff99 	bl	8002de4 <lsd_print_msg_usb>

	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "distance = %.2f [m]\tcategory : %d\n",
			p_log->dist.distance, p_log->dist.distance_category );
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "distance = %.2f [m]\tcategory : %d\n",
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fab6 	bl	8000428 <__aeabi_f2d>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
			p_log->dist.distance, p_log->dist.distance_category );
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	7d09      	ldrb	r1, [r1, #20]
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "distance = %.2f [m]\tcategory : %d\n",
 8002ec4:	f107 0008 	add.w	r0, r7, #8
 8002ec8:	9102      	str	r1, [sp, #8]
 8002eca:	e9cd 2300 	strd	r2, r3, [sp]
 8002ece:	4a59      	ldr	r2, [pc, #356]	@ (8003034 <lsd_print_log_data_usb+0x214>)
 8002ed0:	2180      	movs	r1, #128	@ 0x80
 8002ed2:	f00c fe43 	bl	800fb5c <sniprintf>
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002ed6:	f107 0308 	add.w	r3, r7, #8
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd f938 	bl	8000150 <strlen>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	f107 0308 	add.w	r3, r7, #8
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ff7a 	bl	8002de4 <lsd_print_msg_usb>

	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "speed_of_sound = %.2f [m/s]\tcategory : %d\n",
			p_log->dist.speed_of_sound, p_log->dist.speed_of_sound_category );
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "speed_of_sound = %.2f [m/s]\tcategory : %d\n",
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd fa97 	bl	8000428 <__aeabi_f2d>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
			p_log->dist.speed_of_sound, p_log->dist.speed_of_sound_category );
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	7d49      	ldrb	r1, [r1, #21]
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "speed_of_sound = %.2f [m/s]\tcategory : %d\n",
 8002f02:	f107 0008 	add.w	r0, r7, #8
 8002f06:	9102      	str	r1, [sp, #8]
 8002f08:	e9cd 2300 	strd	r2, r3, [sp]
 8002f0c:	4a4a      	ldr	r2, [pc, #296]	@ (8003038 <lsd_print_log_data_usb+0x218>)
 8002f0e:	2180      	movs	r1, #128	@ 0x80
 8002f10:	f00c fe24 	bl	800fb5c <sniprintf>
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002f14:	f107 0308 	add.w	r3, r7, #8
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd f919 	bl	8000150 <strlen>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	f107 0308 	add.w	r3, r7, #8
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff5b 	bl	8002de4 <lsd_print_msg_usb>

	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	7e1b      	ldrb	r3, [r3, #24]
 8002f32:	b25b      	sxtb	r3, r3
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	da02      	bge.n	8002f3e <lsd_print_log_data_usb+0x11e>
 8002f38:	f04f 0e31 	mov.w	lr, #49	@ 0x31
 8002f3c:	e001      	b.n	8002f42 <lsd_print_log_data_usb+0x122>
 8002f3e:	f04f 0e30 	mov.w	lr, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	7e1b      	ldrb	r3, [r3, #24]
 8002f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <lsd_print_log_data_usb+0x132>
 8002f4e:	2331      	movs	r3, #49	@ 0x31
 8002f50:	e000      	b.n	8002f54 <lsd_print_log_data_usb+0x134>
 8002f52:	2330      	movs	r3, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	7e12      	ldrb	r2, [r2, #24]
 8002f58:	f002 0220 	and.w	r2, r2, #32
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002f5c:	2a00      	cmp	r2, #0
 8002f5e:	d001      	beq.n	8002f64 <lsd_print_log_data_usb+0x144>
 8002f60:	2231      	movs	r2, #49	@ 0x31
 8002f62:	e000      	b.n	8002f66 <lsd_print_log_data_usb+0x146>
 8002f64:	2230      	movs	r2, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	7e09      	ldrb	r1, [r1, #24]
 8002f6a:	f001 0110 	and.w	r1, r1, #16
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002f6e:	2900      	cmp	r1, #0
 8002f70:	d001      	beq.n	8002f76 <lsd_print_log_data_usb+0x156>
 8002f72:	2131      	movs	r1, #49	@ 0x31
 8002f74:	e000      	b.n	8002f78 <lsd_print_log_data_usb+0x158>
 8002f76:	2130      	movs	r1, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	7e00      	ldrb	r0, [r0, #24]
 8002f7c:	f000 0008 	and.w	r0, r0, #8
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002f80:	2800      	cmp	r0, #0
 8002f82:	d001      	beq.n	8002f88 <lsd_print_log_data_usb+0x168>
 8002f84:	2031      	movs	r0, #49	@ 0x31
 8002f86:	e000      	b.n	8002f8a <lsd_print_log_data_usb+0x16a>
 8002f88:	2030      	movs	r0, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002f8a:	687c      	ldr	r4, [r7, #4]
 8002f8c:	7e24      	ldrb	r4, [r4, #24]
 8002f8e:	f004 0404 	and.w	r4, r4, #4
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002f92:	2c00      	cmp	r4, #0
 8002f94:	d001      	beq.n	8002f9a <lsd_print_log_data_usb+0x17a>
 8002f96:	2431      	movs	r4, #49	@ 0x31
 8002f98:	e000      	b.n	8002f9c <lsd_print_log_data_usb+0x17c>
 8002f9a:	2430      	movs	r4, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002f9c:	687d      	ldr	r5, [r7, #4]
 8002f9e:	7e2d      	ldrb	r5, [r5, #24]
 8002fa0:	f005 0502 	and.w	r5, r5, #2
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002fa4:	2d00      	cmp	r5, #0
 8002fa6:	d001      	beq.n	8002fac <lsd_print_log_data_usb+0x18c>
 8002fa8:	2531      	movs	r5, #49	@ 0x31
 8002faa:	e000      	b.n	8002fae <lsd_print_log_data_usb+0x18e>
 8002fac:	2530      	movs	r5, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002fae:	687e      	ldr	r6, [r7, #4]
 8002fb0:	7e36      	ldrb	r6, [r6, #24]
 8002fb2:	f006 0601 	and.w	r6, r6, #1
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002fb6:	2e00      	cmp	r6, #0
 8002fb8:	d001      	beq.n	8002fbe <lsd_print_log_data_usb+0x19e>
 8002fba:	2631      	movs	r6, #49	@ 0x31
 8002fbc:	e000      	b.n	8002fc0 <lsd_print_log_data_usb+0x1a0>
 8002fbe:	2630      	movs	r6, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002fc0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8002fc4:	f89c c019 	ldrb.w	ip, [ip, #25]
	snprintf( msg, USB_LOG_DATA_MSG_SIZE, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002fc8:	f1bc 0f00 	cmp.w	ip, #0
 8002fcc:	d004      	beq.n	8002fd8 <lsd_print_log_data_usb+0x1b8>
 8002fce:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 800303c <lsd_print_log_data_usb+0x21c>
 8002fd2:	f8c7 c000 	str.w	ip, [r7]
 8002fd6:	e003      	b.n	8002fe0 <lsd_print_log_data_usb+0x1c0>
 8002fd8:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8003040 <lsd_print_log_data_usb+0x220>
 8002fdc:	f8c7 c000 	str.w	ip, [r7]
 8002fe0:	f107 0c08 	add.w	ip, r7, #8
 8002fe4:	f8d7 8000 	ldr.w	r8, [r7]
 8002fe8:	f8cd 801c 	str.w	r8, [sp, #28]
 8002fec:	9606      	str	r6, [sp, #24]
 8002fee:	9505      	str	r5, [sp, #20]
 8002ff0:	9404      	str	r4, [sp, #16]
 8002ff2:	9003      	str	r0, [sp, #12]
 8002ff4:	9102      	str	r1, [sp, #8]
 8002ff6:	9201      	str	r2, [sp, #4]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	4673      	mov	r3, lr
 8002ffc:	4a11      	ldr	r2, [pc, #68]	@ (8003044 <lsd_print_log_data_usb+0x224>)
 8002ffe:	2180      	movs	r1, #128	@ 0x80
 8003000:	4660      	mov	r0, ip
 8003002:	f00c fdab 	bl	800fb5c <sniprintf>
	lsd_print_msg_usb( msg, strlen( msg ) );
 8003006:	f107 0308 	add.w	r3, r7, #8
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd f8a0 	bl	8000150 <strlen>
 8003010:	4603      	mov	r3, r0
 8003012:	b29a      	uxth	r2, r3
 8003014:	f107 0308 	add.w	r3, r7, #8
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fee2 	bl	8002de4 <lsd_print_msg_usb>

	return LSD_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3788      	adds	r7, #136	@ 0x88
 8003026:	46bd      	mov	sp, r7
 8003028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800302c:	08012b6c 	.word	0x08012b6c
 8003030:	08012b94 	.word	0x08012b94
 8003034:	08012bb8 	.word	0x08012bb8
 8003038:	08012bdc 	.word	0x08012bdc
 800303c:	08012c08 	.word	0x08012c08
 8003040:	08012c10 	.word	0x08012c10
 8003044:	08012c18 	.word	0x08012c18

08003048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800304c:	f000 fe80 	bl	8003d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003050:	f000 f840 	bl	80030d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003054:	f000 fa9e 	bl	8003594 <MX_GPIO_Init>
  MX_TIM2_Init();
 8003058:	f000 f92e 	bl	80032b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800305c:	f000 f9aa 	bl	80033b4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8003060:	f000 f898 	bl	8003194 <MX_I2C1_Init>
  MX_TIM4_Init();
 8003064:	f000 f9f4 	bl	8003450 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003068:	f000 fa40 	bl	80034ec <MX_USART1_UART_Init>
  MX_RTC_Init();
 800306c:	f000 f8c0 	bl	80031f0 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8003070:	f00b fb22 	bl	800e6b8 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8003074:	f000 fa64 	bl	8003540 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  hmcu_peripherals.mcu_hi2c = &hi2c1;
 8003078:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <main+0x68>)
 800307a:	4a0e      	ldr	r2, [pc, #56]	@ (80030b4 <main+0x6c>)
 800307c:	601a      	str	r2, [r3, #0]
  hmcu_peripherals.mcu_htim[LSD_TIM_GENERAL] = &htim2;
 800307e:	4b0c      	ldr	r3, [pc, #48]	@ (80030b0 <main+0x68>)
 8003080:	4a0d      	ldr	r2, [pc, #52]	@ (80030b8 <main+0x70>)
 8003082:	605a      	str	r2, [r3, #4]
  hmcu_peripherals.mcu_htim[LSD_TIM_COMMON] = &htim3;
 8003084:	4b0a      	ldr	r3, [pc, #40]	@ (80030b0 <main+0x68>)
 8003086:	4a0d      	ldr	r2, [pc, #52]	@ (80030bc <main+0x74>)
 8003088:	609a      	str	r2, [r3, #8]
  hmcu_peripherals.mcu_htim[LSD_TIM_SENSORS] = &htim4;
 800308a:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <main+0x68>)
 800308c:	4a0c      	ldr	r2, [pc, #48]	@ (80030c0 <main+0x78>)
 800308e:	60da      	str	r2, [r3, #12]
  hmcu_peripherals.mcu_huart[LSD_UART_MODEM] = &huart1;
 8003090:	4b07      	ldr	r3, [pc, #28]	@ (80030b0 <main+0x68>)
 8003092:	4a0c      	ldr	r2, [pc, #48]	@ (80030c4 <main+0x7c>)
 8003094:	611a      	str	r2, [r3, #16]
  hmcu_peripherals.mcu_huart[LSD_UART_FTDI] = &huart2;
 8003096:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <main+0x68>)
 8003098:	4a0b      	ldr	r2, [pc, #44]	@ (80030c8 <main+0x80>)
 800309a:	615a      	str	r2, [r3, #20]
  hmcu_peripherals.mcu_hrtc = &hrtc;
 800309c:	4b04      	ldr	r3, [pc, #16]	@ (80030b0 <main+0x68>)
 800309e:	4a0b      	ldr	r2, [pc, #44]	@ (80030cc <main+0x84>)
 80030a0:	619a      	str	r2, [r3, #24]

  state_machine_init( &hmcu_peripherals, &SystemClock_Config );
 80030a2:	490b      	ldr	r1, [pc, #44]	@ (80030d0 <main+0x88>)
 80030a4:	4802      	ldr	r0, [pc, #8]	@ (80030b0 <main+0x68>)
 80030a6:	f7ff fc5b 	bl	8002960 <state_machine_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	state_machine_run();
 80030aa:	f7ff fcd7 	bl	8002a5c <state_machine_run>
 80030ae:	e7fc      	b.n	80030aa <main+0x62>
 80030b0:	20001888 	.word	0x20001888
 80030b4:	200016b8 	.word	0x200016b8
 80030b8:	20001720 	.word	0x20001720
 80030bc:	20001768 	.word	0x20001768
 80030c0:	200017b0 	.word	0x200017b0
 80030c4:	200017f8 	.word	0x200017f8
 80030c8:	20001840 	.word	0x20001840
 80030cc:	2000170c 	.word	0x2000170c
 80030d0:	080030d5 	.word	0x080030d5

080030d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b094      	sub	sp, #80	@ 0x50
 80030d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030de:	2228      	movs	r2, #40	@ 0x28
 80030e0:	2100      	movs	r1, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f00c fdb1 	bl	800fc4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030f8:	1d3b      	adds	r3, r7, #4
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	609a      	str	r2, [r3, #8]
 8003102:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003104:	2309      	movs	r3, #9
 8003106:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003108:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800310c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800310e:	2300      	movs	r3, #0
 8003110:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003112:	2301      	movs	r3, #1
 8003114:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003116:	2301      	movs	r3, #1
 8003118:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800311a:	2302      	movs	r3, #2
 800311c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800311e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003122:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8003124:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003128:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800312a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800312e:	4618      	mov	r0, r3
 8003130:	f004 f900 	bl	8007334 <HAL_RCC_OscConfig>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800313a:	f000 fac3 	bl	80036c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800313e:	230f      	movs	r3, #15
 8003140:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003142:	2301      	movs	r3, #1
 8003144:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800314a:	2300      	movs	r3, #0
 800314c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800314e:	2300      	movs	r3, #0
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003152:	f107 0314 	add.w	r3, r7, #20
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f004 fb6d 	bl	8007838 <HAL_RCC_ClockConfig>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003164:	f000 faae 	bl	80036c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8003168:	2311      	movs	r3, #17
 800316a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800316c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003170:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8003172:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003176:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003178:	1d3b      	adds	r3, r7, #4
 800317a:	4618      	mov	r0, r3
 800317c:	f004 fcec 	bl	8007b58 <HAL_RCCEx_PeriphCLKConfig>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003186:	f000 fa9d 	bl	80036c4 <Error_Handler>
  }
}
 800318a:	bf00      	nop
 800318c:	3750      	adds	r7, #80	@ 0x50
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003198:	4b12      	ldr	r3, [pc, #72]	@ (80031e4 <MX_I2C1_Init+0x50>)
 800319a:	4a13      	ldr	r2, [pc, #76]	@ (80031e8 <MX_I2C1_Init+0x54>)
 800319c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800319e:	4b11      	ldr	r3, [pc, #68]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031a0:	4a12      	ldr	r2, [pc, #72]	@ (80031ec <MX_I2C1_Init+0x58>)
 80031a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031a4:	4b0f      	ldr	r3, [pc, #60]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031aa:	4b0e      	ldr	r3, [pc, #56]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031b0:	4b0c      	ldr	r3, [pc, #48]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031b8:	4b0a      	ldr	r3, [pc, #40]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80031be:	4b09      	ldr	r3, [pc, #36]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031c4:	4b07      	ldr	r3, [pc, #28]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031ca:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031d0:	4804      	ldr	r0, [pc, #16]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031d2:	f001 fabd 	bl	8004750 <HAL_I2C_Init>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80031dc:	f000 fa72 	bl	80036c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	200016b8 	.word	0x200016b8
 80031e8:	40005400 	.word	0x40005400
 80031ec:	000186a0 	.word	0x000186a0

080031f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80031f6:	f107 030c 	add.w	r3, r7, #12
 80031fa:	2100      	movs	r1, #0
 80031fc:	460a      	mov	r2, r1
 80031fe:	801a      	strh	r2, [r3, #0]
 8003200:	460a      	mov	r2, r1
 8003202:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8003204:	2300      	movs	r3, #0
 8003206:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8003208:	463b      	mov	r3, r7
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003210:	4b27      	ldr	r3, [pc, #156]	@ (80032b0 <MX_RTC_Init+0xc0>)
 8003212:	4a28      	ldr	r2, [pc, #160]	@ (80032b4 <MX_RTC_Init+0xc4>)
 8003214:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8003216:	4b26      	ldr	r3, [pc, #152]	@ (80032b0 <MX_RTC_Init+0xc0>)
 8003218:	f04f 32ff 	mov.w	r2, #4294967295
 800321c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800321e:	4b24      	ldr	r3, [pc, #144]	@ (80032b0 <MX_RTC_Init+0xc0>)
 8003220:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003224:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003226:	4822      	ldr	r0, [pc, #136]	@ (80032b0 <MX_RTC_Init+0xc0>)
 8003228:	f004 fe02 	bl	8007e30 <HAL_RTC_Init>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003232:	f000 fa47 	bl	80036c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003242:	f107 030c 	add.w	r3, r7, #12
 8003246:	2200      	movs	r2, #0
 8003248:	4619      	mov	r1, r3
 800324a:	4819      	ldr	r0, [pc, #100]	@ (80032b0 <MX_RTC_Init+0xc0>)
 800324c:	f004 fe7c 	bl	8007f48 <HAL_RTC_SetTime>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8003256:	f000 fa35 	bl	80036c4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800325a:	2301      	movs	r3, #1
 800325c:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800325e:	2301      	movs	r3, #1
 8003260:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 800326a:	f107 0308 	add.w	r3, r7, #8
 800326e:	2200      	movs	r2, #0
 8003270:	4619      	mov	r1, r3
 8003272:	480f      	ldr	r0, [pc, #60]	@ (80032b0 <MX_RTC_Init+0xc0>)
 8003274:	f004 ffd8 	bl	8008228 <HAL_RTC_SetDate>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800327e:	f000 fa21 	bl	80036c4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 10;
 800328a:	230a      	movs	r3, #10
 800328c:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 800328e:	2300      	movs	r3, #0
 8003290:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003292:	463b      	mov	r3, r7
 8003294:	2200      	movs	r2, #0
 8003296:	4619      	mov	r1, r3
 8003298:	4805      	ldr	r0, [pc, #20]	@ (80032b0 <MX_RTC_Init+0xc0>)
 800329a:	f005 f8cf 	bl	800843c <HAL_RTC_SetAlarm_IT>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80032a4:	f000 fa0e 	bl	80036c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80032a8:	bf00      	nop
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	2000170c 	.word	0x2000170c
 80032b4:	40002800 	.word	0x40002800

080032b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08e      	sub	sp, #56	@ 0x38
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	605a      	str	r2, [r3, #4]
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032cc:	f107 0320 	add.w	r3, r7, #32
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032d6:	1d3b      	adds	r3, r7, #4
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
 80032e4:	615a      	str	r2, [r3, #20]
 80032e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032e8:	4b31      	ldr	r3, [pc, #196]	@ (80033b0 <MX_TIM2_Init+0xf8>)
 80032ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80032ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000 - 1;
 80032f0:	4b2f      	ldr	r3, [pc, #188]	@ (80033b0 <MX_TIM2_Init+0xf8>)
 80032f2:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80032f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f8:	4b2d      	ldr	r3, [pc, #180]	@ (80033b0 <MX_TIM2_Init+0xf8>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80032fe:	4b2c      	ldr	r3, [pc, #176]	@ (80033b0 <MX_TIM2_Init+0xf8>)
 8003300:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003304:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003306:	4b2a      	ldr	r3, [pc, #168]	@ (80033b0 <MX_TIM2_Init+0xf8>)
 8003308:	2200      	movs	r2, #0
 800330a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800330c:	4b28      	ldr	r3, [pc, #160]	@ (80033b0 <MX_TIM2_Init+0xf8>)
 800330e:	2200      	movs	r2, #0
 8003310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003312:	4827      	ldr	r0, [pc, #156]	@ (80033b0 <MX_TIM2_Init+0xf8>)
 8003314:	f005 fc67 	bl	8008be6 <HAL_TIM_Base_Init>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800331e:	f000 f9d1 	bl	80036c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003322:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003326:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003328:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800332c:	4619      	mov	r1, r3
 800332e:	4820      	ldr	r0, [pc, #128]	@ (80033b0 <MX_TIM2_Init+0xf8>)
 8003330:	f006 f8b0 	bl	8009494 <HAL_TIM_ConfigClockSource>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800333a:	f000 f9c3 	bl	80036c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800333e:	481c      	ldr	r0, [pc, #112]	@ (80033b0 <MX_TIM2_Init+0xf8>)
 8003340:	f005 fd62 	bl	8008e08 <HAL_TIM_OC_Init>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800334a:	f000 f9bb 	bl	80036c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800334e:	2300      	movs	r3, #0
 8003350:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003352:	2300      	movs	r3, #0
 8003354:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003356:	f107 0320 	add.w	r3, r7, #32
 800335a:	4619      	mov	r1, r3
 800335c:	4814      	ldr	r0, [pc, #80]	@ (80033b0 <MX_TIM2_Init+0xf8>)
 800335e:	f006 fc35 	bl	8009bcc <HAL_TIMEx_MasterConfigSynchronization>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003368:	f000 f9ac 	bl	80036c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800336c:	2300      	movs	r3, #0
 800336e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800337c:	1d3b      	adds	r3, r7, #4
 800337e:	2200      	movs	r2, #0
 8003380:	4619      	mov	r1, r3
 8003382:	480b      	ldr	r0, [pc, #44]	@ (80033b0 <MX_TIM2_Init+0xf8>)
 8003384:	f006 f82a 	bl	80093dc <HAL_TIM_OC_ConfigChannel>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800338e:	f000 f999 	bl	80036c4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	2204      	movs	r2, #4
 8003396:	4619      	mov	r1, r3
 8003398:	4805      	ldr	r0, [pc, #20]	@ (80033b0 <MX_TIM2_Init+0xf8>)
 800339a:	f006 f81f 	bl	80093dc <HAL_TIM_OC_ConfigChannel>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80033a4:	f000 f98e 	bl	80036c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033a8:	bf00      	nop
 80033aa:	3738      	adds	r7, #56	@ 0x38
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20001720 	.word	0x20001720

080033b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ba:	f107 0308 	add.w	r3, r7, #8
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	609a      	str	r2, [r3, #8]
 80033c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033c8:	463b      	mov	r3, r7
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003448 <MX_TIM3_Init+0x94>)
 80033d2:	4a1e      	ldr	r2, [pc, #120]	@ (800344c <MX_TIM3_Init+0x98>)
 80033d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 80033d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003448 <MX_TIM3_Init+0x94>)
 80033d8:	220f      	movs	r2, #15
 80033da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <MX_TIM3_Init+0x94>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80033e2:	4b19      	ldr	r3, [pc, #100]	@ (8003448 <MX_TIM3_Init+0x94>)
 80033e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ea:	4b17      	ldr	r3, [pc, #92]	@ (8003448 <MX_TIM3_Init+0x94>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033f0:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <MX_TIM3_Init+0x94>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033f6:	4814      	ldr	r0, [pc, #80]	@ (8003448 <MX_TIM3_Init+0x94>)
 80033f8:	f005 fbf5 	bl	8008be6 <HAL_TIM_Base_Init>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003402:	f000 f95f 	bl	80036c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003406:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800340a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800340c:	f107 0308 	add.w	r3, r7, #8
 8003410:	4619      	mov	r1, r3
 8003412:	480d      	ldr	r0, [pc, #52]	@ (8003448 <MX_TIM3_Init+0x94>)
 8003414:	f006 f83e 	bl	8009494 <HAL_TIM_ConfigClockSource>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800341e:	f000 f951 	bl	80036c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003426:	2300      	movs	r3, #0
 8003428:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800342a:	463b      	mov	r3, r7
 800342c:	4619      	mov	r1, r3
 800342e:	4806      	ldr	r0, [pc, #24]	@ (8003448 <MX_TIM3_Init+0x94>)
 8003430:	f006 fbcc 	bl	8009bcc <HAL_TIMEx_MasterConfigSynchronization>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800343a:	f000 f943 	bl	80036c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20001768 	.word	0x20001768
 800344c:	40000400 	.word	0x40000400

08003450 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003456:	f107 0308 	add.w	r3, r7, #8
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	609a      	str	r2, [r3, #8]
 8003462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003464:	463b      	mov	r3, r7
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800346c:	4b1d      	ldr	r3, [pc, #116]	@ (80034e4 <MX_TIM4_Init+0x94>)
 800346e:	4a1e      	ldr	r2, [pc, #120]	@ (80034e8 <MX_TIM4_Init+0x98>)
 8003470:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16 - 1;
 8003472:	4b1c      	ldr	r3, [pc, #112]	@ (80034e4 <MX_TIM4_Init+0x94>)
 8003474:	220f      	movs	r2, #15
 8003476:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003478:	4b1a      	ldr	r3, [pc, #104]	@ (80034e4 <MX_TIM4_Init+0x94>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800347e:	4b19      	ldr	r3, [pc, #100]	@ (80034e4 <MX_TIM4_Init+0x94>)
 8003480:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003484:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003486:	4b17      	ldr	r3, [pc, #92]	@ (80034e4 <MX_TIM4_Init+0x94>)
 8003488:	2200      	movs	r2, #0
 800348a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800348c:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <MX_TIM4_Init+0x94>)
 800348e:	2200      	movs	r2, #0
 8003490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003492:	4814      	ldr	r0, [pc, #80]	@ (80034e4 <MX_TIM4_Init+0x94>)
 8003494:	f005 fba7 	bl	8008be6 <HAL_TIM_Base_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800349e:	f000 f911 	bl	80036c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80034a8:	f107 0308 	add.w	r3, r7, #8
 80034ac:	4619      	mov	r1, r3
 80034ae:	480d      	ldr	r0, [pc, #52]	@ (80034e4 <MX_TIM4_Init+0x94>)
 80034b0:	f005 fff0 	bl	8009494 <HAL_TIM_ConfigClockSource>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80034ba:	f000 f903 	bl	80036c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034c6:	463b      	mov	r3, r7
 80034c8:	4619      	mov	r1, r3
 80034ca:	4806      	ldr	r0, [pc, #24]	@ (80034e4 <MX_TIM4_Init+0x94>)
 80034cc:	f006 fb7e 	bl	8009bcc <HAL_TIMEx_MasterConfigSynchronization>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80034d6:	f000 f8f5 	bl	80036c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	200017b0 	.word	0x200017b0
 80034e8:	40000800 	.word	0x40000800

080034ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80034f0:	4b11      	ldr	r3, [pc, #68]	@ (8003538 <MX_USART1_UART_Init+0x4c>)
 80034f2:	4a12      	ldr	r2, [pc, #72]	@ (800353c <MX_USART1_UART_Init+0x50>)
 80034f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80034f6:	4b10      	ldr	r3, [pc, #64]	@ (8003538 <MX_USART1_UART_Init+0x4c>)
 80034f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80034fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003538 <MX_USART1_UART_Init+0x4c>)
 8003500:	2200      	movs	r2, #0
 8003502:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003504:	4b0c      	ldr	r3, [pc, #48]	@ (8003538 <MX_USART1_UART_Init+0x4c>)
 8003506:	2200      	movs	r2, #0
 8003508:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800350a:	4b0b      	ldr	r3, [pc, #44]	@ (8003538 <MX_USART1_UART_Init+0x4c>)
 800350c:	2200      	movs	r2, #0
 800350e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003510:	4b09      	ldr	r3, [pc, #36]	@ (8003538 <MX_USART1_UART_Init+0x4c>)
 8003512:	220c      	movs	r2, #12
 8003514:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003516:	4b08      	ldr	r3, [pc, #32]	@ (8003538 <MX_USART1_UART_Init+0x4c>)
 8003518:	2200      	movs	r2, #0
 800351a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800351c:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <MX_USART1_UART_Init+0x4c>)
 800351e:	2200      	movs	r2, #0
 8003520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003522:	4805      	ldr	r0, [pc, #20]	@ (8003538 <MX_USART1_UART_Init+0x4c>)
 8003524:	f006 fbc2 	bl	8009cac <HAL_UART_Init>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800352e:	f000 f8c9 	bl	80036c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200017f8 	.word	0x200017f8
 800353c:	40013800 	.word	0x40013800

08003540 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003544:	4b11      	ldr	r3, [pc, #68]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 8003546:	4a12      	ldr	r2, [pc, #72]	@ (8003590 <MX_USART2_UART_Init+0x50>)
 8003548:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800354a:	4b10      	ldr	r3, [pc, #64]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 800354c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003550:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003552:	4b0e      	ldr	r3, [pc, #56]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003558:	4b0c      	ldr	r3, [pc, #48]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 800355a:	2200      	movs	r2, #0
 800355c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800355e:	4b0b      	ldr	r3, [pc, #44]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 8003560:	2200      	movs	r2, #0
 8003562:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003564:	4b09      	ldr	r3, [pc, #36]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 8003566:	220c      	movs	r2, #12
 8003568:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800356a:	4b08      	ldr	r3, [pc, #32]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 800356c:	2200      	movs	r2, #0
 800356e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003570:	4b06      	ldr	r3, [pc, #24]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 8003572:	2200      	movs	r2, #0
 8003574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003576:	4805      	ldr	r0, [pc, #20]	@ (800358c <MX_USART2_UART_Init+0x4c>)
 8003578:	f006 fb98 	bl	8009cac <HAL_UART_Init>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003582:	f000 f89f 	bl	80036c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20001840 	.word	0x20001840
 8003590:	40004400 	.word	0x40004400

08003594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359a:	f107 0310 	add.w	r3, r7, #16
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a8:	4b42      	ldr	r3, [pc, #264]	@ (80036b4 <MX_GPIO_Init+0x120>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	4a41      	ldr	r2, [pc, #260]	@ (80036b4 <MX_GPIO_Init+0x120>)
 80035ae:	f043 0310 	orr.w	r3, r3, #16
 80035b2:	6193      	str	r3, [r2, #24]
 80035b4:	4b3f      	ldr	r3, [pc, #252]	@ (80036b4 <MX_GPIO_Init+0x120>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035c0:	4b3c      	ldr	r3, [pc, #240]	@ (80036b4 <MX_GPIO_Init+0x120>)
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	4a3b      	ldr	r2, [pc, #236]	@ (80036b4 <MX_GPIO_Init+0x120>)
 80035c6:	f043 0320 	orr.w	r3, r3, #32
 80035ca:	6193      	str	r3, [r2, #24]
 80035cc:	4b39      	ldr	r3, [pc, #228]	@ (80036b4 <MX_GPIO_Init+0x120>)
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d8:	4b36      	ldr	r3, [pc, #216]	@ (80036b4 <MX_GPIO_Init+0x120>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	4a35      	ldr	r2, [pc, #212]	@ (80036b4 <MX_GPIO_Init+0x120>)
 80035de:	f043 0304 	orr.w	r3, r3, #4
 80035e2:	6193      	str	r3, [r2, #24]
 80035e4:	4b33      	ldr	r3, [pc, #204]	@ (80036b4 <MX_GPIO_Init+0x120>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	607b      	str	r3, [r7, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f0:	4b30      	ldr	r3, [pc, #192]	@ (80036b4 <MX_GPIO_Init+0x120>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	4a2f      	ldr	r2, [pc, #188]	@ (80036b4 <MX_GPIO_Init+0x120>)
 80035f6:	f043 0308 	orr.w	r3, r3, #8
 80035fa:	6193      	str	r3, [r2, #24]
 80035fc:	4b2d      	ldr	r3, [pc, #180]	@ (80036b4 <MX_GPIO_Init+0x120>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, US_TRIG_Pin|SENSOR_PWR_Pin, GPIO_PIN_RESET);
 8003608:	2200      	movs	r2, #0
 800360a:	2112      	movs	r1, #18
 800360c:	482a      	ldr	r0, [pc, #168]	@ (80036b8 <MX_GPIO_Init+0x124>)
 800360e:	f001 f86e 	bl	80046ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(uLTE_PWR_GPIO_Port, uLTE_PWR_Pin, GPIO_PIN_SET);
 8003612:	2201      	movs	r2, #1
 8003614:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003618:	4827      	ldr	r0, [pc, #156]	@ (80036b8 <MX_GPIO_Init+0x124>)
 800361a:	f001 f868 	bl	80046ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_INFO1_Pin|LED_INFO2_Pin, GPIO_PIN_RESET);
 800361e:	2200      	movs	r2, #0
 8003620:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003624:	4825      	ldr	r0, [pc, #148]	@ (80036bc <MX_GPIO_Init+0x128>)
 8003626:	f001 f862 	bl	80046ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : US_ECHO_Pin */
  GPIO_InitStruct.Pin = US_ECHO_Pin;
 800362a:	2301      	movs	r3, #1
 800362c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800362e:	4b24      	ldr	r3, [pc, #144]	@ (80036c0 <MX_GPIO_Init+0x12c>)
 8003630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(US_ECHO_GPIO_Port, &GPIO_InitStruct);
 8003636:	f107 0310 	add.w	r3, r7, #16
 800363a:	4619      	mov	r1, r3
 800363c:	481e      	ldr	r0, [pc, #120]	@ (80036b8 <MX_GPIO_Init+0x124>)
 800363e:	f000 fdff 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : US_TRIG_Pin SENSOR_PWR_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin|SENSOR_PWR_Pin;
 8003642:	2312      	movs	r3, #18
 8003644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003646:	2301      	movs	r3, #1
 8003648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364e:	2302      	movs	r3, #2
 8003650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003652:	f107 0310 	add.w	r3, r7, #16
 8003656:	4619      	mov	r1, r3
 8003658:	4817      	ldr	r0, [pc, #92]	@ (80036b8 <MX_GPIO_Init+0x124>)
 800365a:	f000 fdf1 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pin : uLTE_PWR_Pin */
  GPIO_InitStruct.Pin = uLTE_PWR_Pin;
 800365e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003664:	2301      	movs	r3, #1
 8003666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003668:	2301      	movs	r3, #1
 800366a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366c:	2302      	movs	r3, #2
 800366e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(uLTE_PWR_GPIO_Port, &GPIO_InitStruct);
 8003670:	f107 0310 	add.w	r3, r7, #16
 8003674:	4619      	mov	r1, r3
 8003676:	4810      	ldr	r0, [pc, #64]	@ (80036b8 <MX_GPIO_Init+0x124>)
 8003678:	f000 fde2 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INFO1_Pin LED_INFO2_Pin */
  GPIO_InitStruct.Pin = LED_INFO1_Pin|LED_INFO2_Pin;
 800367c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003682:	2301      	movs	r3, #1
 8003684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368a:	2302      	movs	r3, #2
 800368c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800368e:	f107 0310 	add.w	r3, r7, #16
 8003692:	4619      	mov	r1, r3
 8003694:	4809      	ldr	r0, [pc, #36]	@ (80036bc <MX_GPIO_Init+0x128>)
 8003696:	f000 fdd3 	bl	8004240 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800369a:	2200      	movs	r2, #0
 800369c:	2100      	movs	r1, #0
 800369e:	2006      	movs	r0, #6
 80036a0:	f000 fcd7 	bl	8004052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80036a4:	2006      	movs	r0, #6
 80036a6:	f000 fcf0 	bl	800408a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80036aa:	bf00      	nop
 80036ac:	3720      	adds	r7, #32
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40010c00 	.word	0x40010c00
 80036bc:	40011000 	.word	0x40011000
 80036c0:	10310000 	.word	0x10310000

080036c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036c8:	b672      	cpsid	i
}
 80036ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036cc:	bf00      	nop
 80036ce:	e7fd      	b.n	80036cc <Error_Handler+0x8>

080036d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80036d6:	4b19      	ldr	r3, [pc, #100]	@ (800373c <HAL_MspInit+0x6c>)
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	4a18      	ldr	r2, [pc, #96]	@ (800373c <HAL_MspInit+0x6c>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6193      	str	r3, [r2, #24]
 80036e2:	4b16      	ldr	r3, [pc, #88]	@ (800373c <HAL_MspInit+0x6c>)
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036ee:	4b13      	ldr	r3, [pc, #76]	@ (800373c <HAL_MspInit+0x6c>)
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4a12      	ldr	r2, [pc, #72]	@ (800373c <HAL_MspInit+0x6c>)
 80036f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036f8:	61d3      	str	r3, [r2, #28]
 80036fa:	4b10      	ldr	r3, [pc, #64]	@ (800373c <HAL_MspInit+0x6c>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003702:	607b      	str	r3, [r7, #4]
 8003704:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8003706:	2200      	movs	r2, #0
 8003708:	2100      	movs	r1, #0
 800370a:	2001      	movs	r0, #1
 800370c:	f000 fca1 	bl	8004052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8003710:	2001      	movs	r0, #1
 8003712:	f000 fcba 	bl	800408a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003716:	4b0a      	ldr	r3, [pc, #40]	@ (8003740 <HAL_MspInit+0x70>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	4a04      	ldr	r2, [pc, #16]	@ (8003740 <HAL_MspInit+0x70>)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	40010000 	.word	0x40010000

08003744 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800374c:	f107 0310 	add.w	r3, r7, #16
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a15      	ldr	r2, [pc, #84]	@ (80037b4 <HAL_I2C_MspInit+0x70>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d123      	bne.n	80037ac <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003764:	4b14      	ldr	r3, [pc, #80]	@ (80037b8 <HAL_I2C_MspInit+0x74>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	4a13      	ldr	r2, [pc, #76]	@ (80037b8 <HAL_I2C_MspInit+0x74>)
 800376a:	f043 0308 	orr.w	r3, r3, #8
 800376e:	6193      	str	r3, [r2, #24]
 8003770:	4b11      	ldr	r3, [pc, #68]	@ (80037b8 <HAL_I2C_MspInit+0x74>)
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800377c:	23c0      	movs	r3, #192	@ 0xc0
 800377e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003780:	2312      	movs	r3, #18
 8003782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003784:	2303      	movs	r3, #3
 8003786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003788:	f107 0310 	add.w	r3, r7, #16
 800378c:	4619      	mov	r1, r3
 800378e:	480b      	ldr	r0, [pc, #44]	@ (80037bc <HAL_I2C_MspInit+0x78>)
 8003790:	f000 fd56 	bl	8004240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003794:	4b08      	ldr	r3, [pc, #32]	@ (80037b8 <HAL_I2C_MspInit+0x74>)
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	4a07      	ldr	r2, [pc, #28]	@ (80037b8 <HAL_I2C_MspInit+0x74>)
 800379a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800379e:	61d3      	str	r3, [r2, #28]
 80037a0:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <HAL_I2C_MspInit+0x74>)
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80037ac:	bf00      	nop
 80037ae:	3720      	adds	r7, #32
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40005400 	.word	0x40005400
 80037b8:	40021000 	.word	0x40021000
 80037bc:	40010c00 	.word	0x40010c00

080037c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a13      	ldr	r2, [pc, #76]	@ (800381c <HAL_RTC_MspInit+0x5c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d120      	bne.n	8003814 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80037d2:	f003 fd59 	bl	8007288 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80037d6:	4b12      	ldr	r3, [pc, #72]	@ (8003820 <HAL_RTC_MspInit+0x60>)
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	4a11      	ldr	r2, [pc, #68]	@ (8003820 <HAL_RTC_MspInit+0x60>)
 80037dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037e0:	61d3      	str	r3, [r2, #28]
 80037e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003820 <HAL_RTC_MspInit+0x60>)
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80037ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003824 <HAL_RTC_MspInit+0x64>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80037f4:	2200      	movs	r2, #0
 80037f6:	2100      	movs	r1, #0
 80037f8:	2003      	movs	r0, #3
 80037fa:	f000 fc2a 	bl	8004052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80037fe:	2003      	movs	r0, #3
 8003800:	f000 fc43 	bl	800408a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003804:	2200      	movs	r2, #0
 8003806:	2100      	movs	r1, #0
 8003808:	2029      	movs	r0, #41	@ 0x29
 800380a:	f000 fc22 	bl	8004052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800380e:	2029      	movs	r0, #41	@ 0x29
 8003810:	f000 fc3b 	bl	800408a <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40002800 	.word	0x40002800
 8003820:	40021000 	.word	0x40021000
 8003824:	4242043c 	.word	0x4242043c

08003828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003838:	d114      	bne.n	8003864 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800383a:	4b26      	ldr	r3, [pc, #152]	@ (80038d4 <HAL_TIM_Base_MspInit+0xac>)
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	4a25      	ldr	r2, [pc, #148]	@ (80038d4 <HAL_TIM_Base_MspInit+0xac>)
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	61d3      	str	r3, [r2, #28]
 8003846:	4b23      	ldr	r3, [pc, #140]	@ (80038d4 <HAL_TIM_Base_MspInit+0xac>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003852:	2200      	movs	r2, #0
 8003854:	2100      	movs	r1, #0
 8003856:	201c      	movs	r0, #28
 8003858:	f000 fbfb 	bl	8004052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800385c:	201c      	movs	r0, #28
 800385e:	f000 fc14 	bl	800408a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003862:	e032      	b.n	80038ca <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1b      	ldr	r2, [pc, #108]	@ (80038d8 <HAL_TIM_Base_MspInit+0xb0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d114      	bne.n	8003898 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800386e:	4b19      	ldr	r3, [pc, #100]	@ (80038d4 <HAL_TIM_Base_MspInit+0xac>)
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	4a18      	ldr	r2, [pc, #96]	@ (80038d4 <HAL_TIM_Base_MspInit+0xac>)
 8003874:	f043 0302 	orr.w	r3, r3, #2
 8003878:	61d3      	str	r3, [r2, #28]
 800387a:	4b16      	ldr	r3, [pc, #88]	@ (80038d4 <HAL_TIM_Base_MspInit+0xac>)
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003886:	2200      	movs	r2, #0
 8003888:	2100      	movs	r1, #0
 800388a:	201d      	movs	r0, #29
 800388c:	f000 fbe1 	bl	8004052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003890:	201d      	movs	r0, #29
 8003892:	f000 fbfa 	bl	800408a <HAL_NVIC_EnableIRQ>
}
 8003896:	e018      	b.n	80038ca <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0f      	ldr	r2, [pc, #60]	@ (80038dc <HAL_TIM_Base_MspInit+0xb4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d113      	bne.n	80038ca <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038a2:	4b0c      	ldr	r3, [pc, #48]	@ (80038d4 <HAL_TIM_Base_MspInit+0xac>)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4a0b      	ldr	r2, [pc, #44]	@ (80038d4 <HAL_TIM_Base_MspInit+0xac>)
 80038a8:	f043 0304 	orr.w	r3, r3, #4
 80038ac:	61d3      	str	r3, [r2, #28]
 80038ae:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <HAL_TIM_Base_MspInit+0xac>)
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80038ba:	2200      	movs	r2, #0
 80038bc:	2100      	movs	r1, #0
 80038be:	201e      	movs	r0, #30
 80038c0:	f000 fbc7 	bl	8004052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80038c4:	201e      	movs	r0, #30
 80038c6:	f000 fbe0 	bl	800408a <HAL_NVIC_EnableIRQ>
}
 80038ca:	bf00      	nop
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40000800 	.word	0x40000800

080038e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	@ 0x28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 0318 	add.w	r3, r7, #24
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a3b      	ldr	r2, [pc, #236]	@ (80039e8 <HAL_UART_MspInit+0x108>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d132      	bne.n	8003966 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003900:	4b3a      	ldr	r3, [pc, #232]	@ (80039ec <HAL_UART_MspInit+0x10c>)
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	4a39      	ldr	r2, [pc, #228]	@ (80039ec <HAL_UART_MspInit+0x10c>)
 8003906:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800390a:	6193      	str	r3, [r2, #24]
 800390c:	4b37      	ldr	r3, [pc, #220]	@ (80039ec <HAL_UART_MspInit+0x10c>)
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003918:	4b34      	ldr	r3, [pc, #208]	@ (80039ec <HAL_UART_MspInit+0x10c>)
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	4a33      	ldr	r2, [pc, #204]	@ (80039ec <HAL_UART_MspInit+0x10c>)
 800391e:	f043 0304 	orr.w	r3, r3, #4
 8003922:	6193      	str	r3, [r2, #24]
 8003924:	4b31      	ldr	r3, [pc, #196]	@ (80039ec <HAL_UART_MspInit+0x10c>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003930:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003936:	2302      	movs	r3, #2
 8003938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800393a:	2303      	movs	r3, #3
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800393e:	f107 0318 	add.w	r3, r7, #24
 8003942:	4619      	mov	r1, r3
 8003944:	482a      	ldr	r0, [pc, #168]	@ (80039f0 <HAL_UART_MspInit+0x110>)
 8003946:	f000 fc7b 	bl	8004240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800394a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800394e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	2300      	movs	r3, #0
 8003956:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003958:	f107 0318 	add.w	r3, r7, #24
 800395c:	4619      	mov	r1, r3
 800395e:	4824      	ldr	r0, [pc, #144]	@ (80039f0 <HAL_UART_MspInit+0x110>)
 8003960:	f000 fc6e 	bl	8004240 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003964:	e03c      	b.n	80039e0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a22      	ldr	r2, [pc, #136]	@ (80039f4 <HAL_UART_MspInit+0x114>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d137      	bne.n	80039e0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003970:	4b1e      	ldr	r3, [pc, #120]	@ (80039ec <HAL_UART_MspInit+0x10c>)
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	4a1d      	ldr	r2, [pc, #116]	@ (80039ec <HAL_UART_MspInit+0x10c>)
 8003976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800397a:	61d3      	str	r3, [r2, #28]
 800397c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ec <HAL_UART_MspInit+0x10c>)
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003988:	4b18      	ldr	r3, [pc, #96]	@ (80039ec <HAL_UART_MspInit+0x10c>)
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	4a17      	ldr	r2, [pc, #92]	@ (80039ec <HAL_UART_MspInit+0x10c>)
 800398e:	f043 0304 	orr.w	r3, r3, #4
 8003992:	6193      	str	r3, [r2, #24]
 8003994:	4b15      	ldr	r3, [pc, #84]	@ (80039ec <HAL_UART_MspInit+0x10c>)
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039a0:	2304      	movs	r3, #4
 80039a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a4:	2302      	movs	r3, #2
 80039a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039a8:	2303      	movs	r3, #3
 80039aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ac:	f107 0318 	add.w	r3, r7, #24
 80039b0:	4619      	mov	r1, r3
 80039b2:	480f      	ldr	r0, [pc, #60]	@ (80039f0 <HAL_UART_MspInit+0x110>)
 80039b4:	f000 fc44 	bl	8004240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039b8:	2308      	movs	r3, #8
 80039ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039bc:	2300      	movs	r3, #0
 80039be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c4:	f107 0318 	add.w	r3, r7, #24
 80039c8:	4619      	mov	r1, r3
 80039ca:	4809      	ldr	r0, [pc, #36]	@ (80039f0 <HAL_UART_MspInit+0x110>)
 80039cc:	f000 fc38 	bl	8004240 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80039d0:	2200      	movs	r2, #0
 80039d2:	2100      	movs	r1, #0
 80039d4:	2026      	movs	r0, #38	@ 0x26
 80039d6:	f000 fb3c 	bl	8004052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039da:	2026      	movs	r0, #38	@ 0x26
 80039dc:	f000 fb55 	bl	800408a <HAL_NVIC_EnableIRQ>
}
 80039e0:	bf00      	nop
 80039e2:	3728      	adds	r7, #40	@ 0x28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40013800 	.word	0x40013800
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40010800 	.word	0x40010800
 80039f4:	40004400 	.word	0x40004400

080039f8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a12      	ldr	r2, [pc, #72]	@ (8003a50 <HAL_UART_MspDeInit+0x58>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d10b      	bne.n	8003a22 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003a0a:	4b12      	ldr	r3, [pc, #72]	@ (8003a54 <HAL_UART_MspDeInit+0x5c>)
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	4a11      	ldr	r2, [pc, #68]	@ (8003a54 <HAL_UART_MspDeInit+0x5c>)
 8003a10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a14:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003a16:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003a1a:	480f      	ldr	r0, [pc, #60]	@ (8003a58 <HAL_UART_MspDeInit+0x60>)
 8003a1c:	f000 fd94 	bl	8004548 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003a20:	e011      	b.n	8003a46 <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a0d      	ldr	r2, [pc, #52]	@ (8003a5c <HAL_UART_MspDeInit+0x64>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d10c      	bne.n	8003a46 <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003a2c:	4b09      	ldr	r3, [pc, #36]	@ (8003a54 <HAL_UART_MspDeInit+0x5c>)
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	4a08      	ldr	r2, [pc, #32]	@ (8003a54 <HAL_UART_MspDeInit+0x5c>)
 8003a32:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003a36:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003a38:	210c      	movs	r1, #12
 8003a3a:	4807      	ldr	r0, [pc, #28]	@ (8003a58 <HAL_UART_MspDeInit+0x60>)
 8003a3c:	f000 fd84 	bl	8004548 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003a40:	2026      	movs	r0, #38	@ 0x26
 8003a42:	f000 fb30 	bl	80040a6 <HAL_NVIC_DisableIRQ>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40013800 	.word	0x40013800
 8003a54:	40021000 	.word	0x40021000
 8003a58:	40010800 	.word	0x40010800
 8003a5c:	40004400 	.word	0x40004400

08003a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a64:	bf00      	nop
 8003a66:	e7fd      	b.n	8003a64 <NMI_Handler+0x4>

08003a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a6c:	bf00      	nop
 8003a6e:	e7fd      	b.n	8003a6c <HardFault_Handler+0x4>

08003a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a74:	bf00      	nop
 8003a76:	e7fd      	b.n	8003a74 <MemManage_Handler+0x4>

08003a78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a7c:	bf00      	nop
 8003a7e:	e7fd      	b.n	8003a7c <BusFault_Handler+0x4>

08003a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <UsageFault_Handler+0x4>

08003a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ab0:	f000 f994 	bl	8003ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ab4:	bf00      	nop
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003abc:	f003 fc22 	bl	8007304 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8003ac0:	bf00      	nop
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8003ac8:	4802      	ldr	r0, [pc, #8]	@ (8003ad4 <RTC_IRQHandler+0x10>)
 8003aca:	f005 f843 	bl	8008b54 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	2000170c 	.word	0x2000170c

08003ad8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(US_ECHO_Pin);
 8003adc:	2001      	movs	r0, #1
 8003ade:	f000 fe1f 	bl	8004720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003aec:	4802      	ldr	r0, [pc, #8]	@ (8003af8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8003aee:	f001 ff7e 	bl	80059ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20002574 	.word	0x20002574

08003afc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003b00:	4802      	ldr	r0, [pc, #8]	@ (8003b0c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003b02:	f001 ff74 	bl	80059ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20002574 	.word	0x20002574

08003b10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b14:	4802      	ldr	r0, [pc, #8]	@ (8003b20 <TIM2_IRQHandler+0x10>)
 8003b16:	f005 fb71 	bl	80091fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20001720 	.word	0x20001720

08003b24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b28:	4802      	ldr	r0, [pc, #8]	@ (8003b34 <TIM3_IRQHandler+0x10>)
 8003b2a:	f005 fb67 	bl	80091fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20001768 	.word	0x20001768

08003b38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b3c:	4802      	ldr	r0, [pc, #8]	@ (8003b48 <TIM4_IRQHandler+0x10>)
 8003b3e:	f005 fb5d 	bl	80091fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200017b0 	.word	0x200017b0

08003b4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b50:	4802      	ldr	r0, [pc, #8]	@ (8003b5c <USART2_IRQHandler+0x10>)
 8003b52:	f006 f9b9 	bl	8009ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20001840 	.word	0x20001840

08003b60 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003b64:	4802      	ldr	r0, [pc, #8]	@ (8003b70 <RTC_Alarm_IRQHandler+0x10>)
 8003b66:	f004 fd21 	bl	80085ac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000170c 	.word	0x2000170c

08003b74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return 1;
 8003b78:	2301      	movs	r3, #1
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <_kill>:

int _kill(int pid, int sig)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b8c:	f00c f8c0 	bl	800fd10 <__errno>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2216      	movs	r2, #22
 8003b94:	601a      	str	r2, [r3, #0]
  return -1;
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <_exit>:

void _exit (int status)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003baa:	f04f 31ff 	mov.w	r1, #4294967295
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ffe7 	bl	8003b82 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bb4:	bf00      	nop
 8003bb6:	e7fd      	b.n	8003bb4 <_exit+0x12>

08003bb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	e00a      	b.n	8003be0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bca:	f3af 8000 	nop.w
 8003bce:	4601      	mov	r1, r0
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	60ba      	str	r2, [r7, #8]
 8003bd6:	b2ca      	uxtb	r2, r1
 8003bd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	dbf0      	blt.n	8003bca <_read+0x12>
  }

  return len;
 8003be8:	687b      	ldr	r3, [r7, #4]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b086      	sub	sp, #24
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	e009      	b.n	8003c18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	60ba      	str	r2, [r7, #8]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	3301      	adds	r3, #1
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	dbf1      	blt.n	8003c04 <_write+0x12>
  }
  return len;
 8003c20:	687b      	ldr	r3, [r7, #4]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <_close>:

int _close(int file)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c50:	605a      	str	r2, [r3, #4]
  return 0;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <_isatty>:

int _isatty(int file)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c66:	2301      	movs	r3, #1
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr

08003c72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b085      	sub	sp, #20
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
	...

08003c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c94:	4a14      	ldr	r2, [pc, #80]	@ (8003ce8 <_sbrk+0x5c>)
 8003c96:	4b15      	ldr	r3, [pc, #84]	@ (8003cec <_sbrk+0x60>)
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ca0:	4b13      	ldr	r3, [pc, #76]	@ (8003cf0 <_sbrk+0x64>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ca8:	4b11      	ldr	r3, [pc, #68]	@ (8003cf0 <_sbrk+0x64>)
 8003caa:	4a12      	ldr	r2, [pc, #72]	@ (8003cf4 <_sbrk+0x68>)
 8003cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cae:	4b10      	ldr	r3, [pc, #64]	@ (8003cf0 <_sbrk+0x64>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d207      	bcs.n	8003ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cbc:	f00c f828 	bl	800fd10 <__errno>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	220c      	movs	r2, #12
 8003cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cca:	e009      	b.n	8003ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ccc:	4b08      	ldr	r3, [pc, #32]	@ (8003cf0 <_sbrk+0x64>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cd2:	4b07      	ldr	r3, [pc, #28]	@ (8003cf0 <_sbrk+0x64>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	4a05      	ldr	r2, [pc, #20]	@ (8003cf0 <_sbrk+0x64>)
 8003cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cde:	68fb      	ldr	r3, [r7, #12]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	20005000 	.word	0x20005000
 8003cec:	00000400 	.word	0x00000400
 8003cf0:	200018a4 	.word	0x200018a4
 8003cf4:	20002bb8 	.word	0x20002bb8

08003cf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d04:	f7ff fff8 	bl	8003cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d08:	480b      	ldr	r0, [pc, #44]	@ (8003d38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003d0a:	490c      	ldr	r1, [pc, #48]	@ (8003d3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003d0c:	4a0c      	ldr	r2, [pc, #48]	@ (8003d40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d10:	e002      	b.n	8003d18 <LoopCopyDataInit>

08003d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d16:	3304      	adds	r3, #4

08003d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d1c:	d3f9      	bcc.n	8003d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d1e:	4a09      	ldr	r2, [pc, #36]	@ (8003d44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003d20:	4c09      	ldr	r4, [pc, #36]	@ (8003d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d24:	e001      	b.n	8003d2a <LoopFillZerobss>

08003d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d28:	3204      	adds	r2, #4

08003d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d2c:	d3fb      	bcc.n	8003d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d2e:	f00b fff5 	bl	800fd1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d32:	f7ff f989 	bl	8003048 <main>
  bx lr
 8003d36:	4770      	bx	lr
  ldr r0, =_sdata
 8003d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d3c:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8003d40:	08013078 	.word	0x08013078
  ldr r2, =_sbss
 8003d44:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8003d48:	20002bb8 	.word	0x20002bb8

08003d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d4c:	e7fe      	b.n	8003d4c <ADC1_2_IRQHandler>
	...

08003d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d54:	4b08      	ldr	r3, [pc, #32]	@ (8003d78 <HAL_Init+0x28>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a07      	ldr	r2, [pc, #28]	@ (8003d78 <HAL_Init+0x28>)
 8003d5a:	f043 0310 	orr.w	r3, r3, #16
 8003d5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d60:	2003      	movs	r0, #3
 8003d62:	f000 f96b 	bl	800403c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d66:	200f      	movs	r0, #15
 8003d68:	f000 f808 	bl	8003d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d6c:	f7ff fcb0 	bl	80036d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40022000 	.word	0x40022000

08003d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d84:	4b12      	ldr	r3, [pc, #72]	@ (8003dd0 <HAL_InitTick+0x54>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b12      	ldr	r3, [pc, #72]	@ (8003dd4 <HAL_InitTick+0x58>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 f991 	bl	80040c2 <HAL_SYSTICK_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e00e      	b.n	8003dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b0f      	cmp	r3, #15
 8003dae:	d80a      	bhi.n	8003dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003db0:	2200      	movs	r2, #0
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	f04f 30ff 	mov.w	r0, #4294967295
 8003db8:	f000 f94b 	bl	8004052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dbc:	4a06      	ldr	r2, [pc, #24]	@ (8003dd8 <HAL_InitTick+0x5c>)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e000      	b.n	8003dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	20000008 	.word	0x20000008
 8003dd8:	20000004 	.word	0x20000004

08003ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003de0:	4b05      	ldr	r3, [pc, #20]	@ (8003df8 <HAL_IncTick+0x1c>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <HAL_IncTick+0x20>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4413      	add	r3, r2
 8003dec:	4a03      	ldr	r2, [pc, #12]	@ (8003dfc <HAL_IncTick+0x20>)
 8003dee:	6013      	str	r3, [r2, #0]
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr
 8003df8:	20000008 	.word	0x20000008
 8003dfc:	200018a8 	.word	0x200018a8

08003e00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  return uwTick;
 8003e04:	4b02      	ldr	r3, [pc, #8]	@ (8003e10 <HAL_GetTick+0x10>)
 8003e06:	681b      	ldr	r3, [r3, #0]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	200018a8 	.word	0x200018a8

08003e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e1c:	f7ff fff0 	bl	8003e00 <HAL_GetTick>
 8003e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d005      	beq.n	8003e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e58 <HAL_Delay+0x44>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4413      	add	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e3a:	bf00      	nop
 8003e3c:	f7ff ffe0 	bl	8003e00 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d8f7      	bhi.n	8003e3c <HAL_Delay+0x28>
  {
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000008 	.word	0x20000008

08003e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e8e:	4a04      	ldr	r2, [pc, #16]	@ (8003ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	60d3      	str	r3, [r2, #12]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	e000ed00 	.word	0xe000ed00

08003ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ea8:	4b04      	ldr	r3, [pc, #16]	@ (8003ebc <__NVIC_GetPriorityGrouping+0x18>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	f003 0307 	and.w	r3, r3, #7
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	db0b      	blt.n	8003eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	f003 021f 	and.w	r2, r3, #31
 8003ed8:	4906      	ldr	r1, [pc, #24]	@ (8003ef4 <__NVIC_EnableIRQ+0x34>)
 8003eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	e000e100 	.word	0xe000e100

08003ef8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	db12      	blt.n	8003f30 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	f003 021f 	and.w	r2, r3, #31
 8003f10:	490a      	ldr	r1, [pc, #40]	@ (8003f3c <__NVIC_DisableIRQ+0x44>)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	2001      	movs	r0, #1
 8003f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f1e:	3320      	adds	r3, #32
 8003f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f24:	f3bf 8f4f 	dsb	sy
}
 8003f28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f2a:	f3bf 8f6f 	isb	sy
}
 8003f2e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	e000e100 	.word	0xe000e100

08003f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	db0a      	blt.n	8003f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	490c      	ldr	r1, [pc, #48]	@ (8003f8c <__NVIC_SetPriority+0x4c>)
 8003f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	440b      	add	r3, r1
 8003f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f68:	e00a      	b.n	8003f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4908      	ldr	r1, [pc, #32]	@ (8003f90 <__NVIC_SetPriority+0x50>)
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	3b04      	subs	r3, #4
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	761a      	strb	r2, [r3, #24]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	e000e100 	.word	0xe000e100
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b089      	sub	sp, #36	@ 0x24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f1c3 0307 	rsb	r3, r3, #7
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	bf28      	it	cs
 8003fb2:	2304      	movcs	r3, #4
 8003fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	2b06      	cmp	r3, #6
 8003fbc:	d902      	bls.n	8003fc4 <NVIC_EncodePriority+0x30>
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	3b03      	subs	r3, #3
 8003fc2:	e000      	b.n	8003fc6 <NVIC_EncodePriority+0x32>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	43d9      	mvns	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fec:	4313      	orrs	r3, r2
         );
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3724      	adds	r7, #36	@ 0x24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3b01      	subs	r3, #1
 8004004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004008:	d301      	bcc.n	800400e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800400a:	2301      	movs	r3, #1
 800400c:	e00f      	b.n	800402e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800400e:	4a0a      	ldr	r2, [pc, #40]	@ (8004038 <SysTick_Config+0x40>)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3b01      	subs	r3, #1
 8004014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004016:	210f      	movs	r1, #15
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
 800401c:	f7ff ff90 	bl	8003f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004020:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <SysTick_Config+0x40>)
 8004022:	2200      	movs	r2, #0
 8004024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004026:	4b04      	ldr	r3, [pc, #16]	@ (8004038 <SysTick_Config+0x40>)
 8004028:	2207      	movs	r2, #7
 800402a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	e000e010 	.word	0xe000e010

0800403c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ff09 	bl	8003e5c <__NVIC_SetPriorityGrouping>
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004052:	b580      	push	{r7, lr}
 8004054:	b086      	sub	sp, #24
 8004056:	af00      	add	r7, sp, #0
 8004058:	4603      	mov	r3, r0
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004064:	f7ff ff1e 	bl	8003ea4 <__NVIC_GetPriorityGrouping>
 8004068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	f7ff ff90 	bl	8003f94 <NVIC_EncodePriority>
 8004074:	4602      	mov	r2, r0
 8004076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff5f 	bl	8003f40 <__NVIC_SetPriority>
}
 8004082:	bf00      	nop
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	4603      	mov	r3, r0
 8004092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff ff11 	bl	8003ec0 <__NVIC_EnableIRQ>
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	4603      	mov	r3, r0
 80040ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80040b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff ff1f 	bl	8003ef8 <__NVIC_DisableIRQ>
}
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff ff94 	bl	8003ff8 <SysTick_Config>
 80040d0:	4603      	mov	r3, r0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d008      	beq.n	8004104 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2204      	movs	r2, #4
 80040f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e020      	b.n	8004146 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 020e 	bic.w	r2, r2, #14
 8004112:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0201 	bic.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412c:	2101      	movs	r1, #1
 800412e:	fa01 f202 	lsl.w	r2, r1, r2
 8004132:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004144:	7bfb      	ldrb	r3, [r7, #15]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d005      	beq.n	8004174 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2204      	movs	r2, #4
 800416c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	73fb      	strb	r3, [r7, #15]
 8004172:	e051      	b.n	8004218 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 020e 	bic.w	r2, r2, #14
 8004182:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0201 	bic.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a22      	ldr	r2, [pc, #136]	@ (8004224 <HAL_DMA_Abort_IT+0xd4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d029      	beq.n	80041f2 <HAL_DMA_Abort_IT+0xa2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a21      	ldr	r2, [pc, #132]	@ (8004228 <HAL_DMA_Abort_IT+0xd8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d022      	beq.n	80041ee <HAL_DMA_Abort_IT+0x9e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1f      	ldr	r2, [pc, #124]	@ (800422c <HAL_DMA_Abort_IT+0xdc>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d01a      	beq.n	80041e8 <HAL_DMA_Abort_IT+0x98>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004230 <HAL_DMA_Abort_IT+0xe0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d012      	beq.n	80041e2 <HAL_DMA_Abort_IT+0x92>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004234 <HAL_DMA_Abort_IT+0xe4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00a      	beq.n	80041dc <HAL_DMA_Abort_IT+0x8c>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004238 <HAL_DMA_Abort_IT+0xe8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d102      	bne.n	80041d6 <HAL_DMA_Abort_IT+0x86>
 80041d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80041d4:	e00e      	b.n	80041f4 <HAL_DMA_Abort_IT+0xa4>
 80041d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041da:	e00b      	b.n	80041f4 <HAL_DMA_Abort_IT+0xa4>
 80041dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041e0:	e008      	b.n	80041f4 <HAL_DMA_Abort_IT+0xa4>
 80041e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041e6:	e005      	b.n	80041f4 <HAL_DMA_Abort_IT+0xa4>
 80041e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041ec:	e002      	b.n	80041f4 <HAL_DMA_Abort_IT+0xa4>
 80041ee:	2310      	movs	r3, #16
 80041f0:	e000      	b.n	80041f4 <HAL_DMA_Abort_IT+0xa4>
 80041f2:	2301      	movs	r3, #1
 80041f4:	4a11      	ldr	r2, [pc, #68]	@ (800423c <HAL_DMA_Abort_IT+0xec>)
 80041f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4798      	blx	r3
    } 
  }
  return status;
 8004218:	7bfb      	ldrb	r3, [r7, #15]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40020008 	.word	0x40020008
 8004228:	4002001c 	.word	0x4002001c
 800422c:	40020030 	.word	0x40020030
 8004230:	40020044 	.word	0x40020044
 8004234:	40020058 	.word	0x40020058
 8004238:	4002006c 	.word	0x4002006c
 800423c:	40020000 	.word	0x40020000

08004240 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004240:	b480      	push	{r7}
 8004242:	b08b      	sub	sp, #44	@ 0x2c
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800424a:	2300      	movs	r3, #0
 800424c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800424e:	2300      	movs	r3, #0
 8004250:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004252:	e169      	b.n	8004528 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004254:	2201      	movs	r2, #1
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	429a      	cmp	r2, r3
 800426e:	f040 8158 	bne.w	8004522 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4a9a      	ldr	r2, [pc, #616]	@ (80044e0 <HAL_GPIO_Init+0x2a0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d05e      	beq.n	800433a <HAL_GPIO_Init+0xfa>
 800427c:	4a98      	ldr	r2, [pc, #608]	@ (80044e0 <HAL_GPIO_Init+0x2a0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d875      	bhi.n	800436e <HAL_GPIO_Init+0x12e>
 8004282:	4a98      	ldr	r2, [pc, #608]	@ (80044e4 <HAL_GPIO_Init+0x2a4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d058      	beq.n	800433a <HAL_GPIO_Init+0xfa>
 8004288:	4a96      	ldr	r2, [pc, #600]	@ (80044e4 <HAL_GPIO_Init+0x2a4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d86f      	bhi.n	800436e <HAL_GPIO_Init+0x12e>
 800428e:	4a96      	ldr	r2, [pc, #600]	@ (80044e8 <HAL_GPIO_Init+0x2a8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d052      	beq.n	800433a <HAL_GPIO_Init+0xfa>
 8004294:	4a94      	ldr	r2, [pc, #592]	@ (80044e8 <HAL_GPIO_Init+0x2a8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d869      	bhi.n	800436e <HAL_GPIO_Init+0x12e>
 800429a:	4a94      	ldr	r2, [pc, #592]	@ (80044ec <HAL_GPIO_Init+0x2ac>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d04c      	beq.n	800433a <HAL_GPIO_Init+0xfa>
 80042a0:	4a92      	ldr	r2, [pc, #584]	@ (80044ec <HAL_GPIO_Init+0x2ac>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d863      	bhi.n	800436e <HAL_GPIO_Init+0x12e>
 80042a6:	4a92      	ldr	r2, [pc, #584]	@ (80044f0 <HAL_GPIO_Init+0x2b0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d046      	beq.n	800433a <HAL_GPIO_Init+0xfa>
 80042ac:	4a90      	ldr	r2, [pc, #576]	@ (80044f0 <HAL_GPIO_Init+0x2b0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d85d      	bhi.n	800436e <HAL_GPIO_Init+0x12e>
 80042b2:	2b12      	cmp	r3, #18
 80042b4:	d82a      	bhi.n	800430c <HAL_GPIO_Init+0xcc>
 80042b6:	2b12      	cmp	r3, #18
 80042b8:	d859      	bhi.n	800436e <HAL_GPIO_Init+0x12e>
 80042ba:	a201      	add	r2, pc, #4	@ (adr r2, 80042c0 <HAL_GPIO_Init+0x80>)
 80042bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c0:	0800433b 	.word	0x0800433b
 80042c4:	08004315 	.word	0x08004315
 80042c8:	08004327 	.word	0x08004327
 80042cc:	08004369 	.word	0x08004369
 80042d0:	0800436f 	.word	0x0800436f
 80042d4:	0800436f 	.word	0x0800436f
 80042d8:	0800436f 	.word	0x0800436f
 80042dc:	0800436f 	.word	0x0800436f
 80042e0:	0800436f 	.word	0x0800436f
 80042e4:	0800436f 	.word	0x0800436f
 80042e8:	0800436f 	.word	0x0800436f
 80042ec:	0800436f 	.word	0x0800436f
 80042f0:	0800436f 	.word	0x0800436f
 80042f4:	0800436f 	.word	0x0800436f
 80042f8:	0800436f 	.word	0x0800436f
 80042fc:	0800436f 	.word	0x0800436f
 8004300:	0800436f 	.word	0x0800436f
 8004304:	0800431d 	.word	0x0800431d
 8004308:	08004331 	.word	0x08004331
 800430c:	4a79      	ldr	r2, [pc, #484]	@ (80044f4 <HAL_GPIO_Init+0x2b4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d013      	beq.n	800433a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004312:	e02c      	b.n	800436e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	623b      	str	r3, [r7, #32]
          break;
 800431a:	e029      	b.n	8004370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	3304      	adds	r3, #4
 8004322:	623b      	str	r3, [r7, #32]
          break;
 8004324:	e024      	b.n	8004370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	3308      	adds	r3, #8
 800432c:	623b      	str	r3, [r7, #32]
          break;
 800432e:	e01f      	b.n	8004370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	330c      	adds	r3, #12
 8004336:	623b      	str	r3, [r7, #32]
          break;
 8004338:	e01a      	b.n	8004370 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d102      	bne.n	8004348 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004342:	2304      	movs	r3, #4
 8004344:	623b      	str	r3, [r7, #32]
          break;
 8004346:	e013      	b.n	8004370 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d105      	bne.n	800435c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004350:	2308      	movs	r3, #8
 8004352:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	611a      	str	r2, [r3, #16]
          break;
 800435a:	e009      	b.n	8004370 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800435c:	2308      	movs	r3, #8
 800435e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	615a      	str	r2, [r3, #20]
          break;
 8004366:	e003      	b.n	8004370 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004368:	2300      	movs	r3, #0
 800436a:	623b      	str	r3, [r7, #32]
          break;
 800436c:	e000      	b.n	8004370 <HAL_GPIO_Init+0x130>
          break;
 800436e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	2bff      	cmp	r3, #255	@ 0xff
 8004374:	d801      	bhi.n	800437a <HAL_GPIO_Init+0x13a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	e001      	b.n	800437e <HAL_GPIO_Init+0x13e>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3304      	adds	r3, #4
 800437e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2bff      	cmp	r3, #255	@ 0xff
 8004384:	d802      	bhi.n	800438c <HAL_GPIO_Init+0x14c>
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	e002      	b.n	8004392 <HAL_GPIO_Init+0x152>
 800438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438e:	3b08      	subs	r3, #8
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	210f      	movs	r1, #15
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	fa01 f303 	lsl.w	r3, r1, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	401a      	ands	r2, r3
 80043a4:	6a39      	ldr	r1, [r7, #32]
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ac:	431a      	orrs	r2, r3
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 80b1 	beq.w	8004522 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80043c0:	4b4d      	ldr	r3, [pc, #308]	@ (80044f8 <HAL_GPIO_Init+0x2b8>)
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	4a4c      	ldr	r2, [pc, #304]	@ (80044f8 <HAL_GPIO_Init+0x2b8>)
 80043c6:	f043 0301 	orr.w	r3, r3, #1
 80043ca:	6193      	str	r3, [r2, #24]
 80043cc:	4b4a      	ldr	r3, [pc, #296]	@ (80044f8 <HAL_GPIO_Init+0x2b8>)
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80043d8:	4a48      	ldr	r2, [pc, #288]	@ (80044fc <HAL_GPIO_Init+0x2bc>)
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	089b      	lsrs	r3, r3, #2
 80043de:	3302      	adds	r3, #2
 80043e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80043e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e8:	f003 0303 	and.w	r3, r3, #3
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	220f      	movs	r2, #15
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4013      	ands	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a40      	ldr	r2, [pc, #256]	@ (8004500 <HAL_GPIO_Init+0x2c0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <HAL_GPIO_Init+0x1ec>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a3f      	ldr	r2, [pc, #252]	@ (8004504 <HAL_GPIO_Init+0x2c4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00d      	beq.n	8004428 <HAL_GPIO_Init+0x1e8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a3e      	ldr	r2, [pc, #248]	@ (8004508 <HAL_GPIO_Init+0x2c8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d007      	beq.n	8004424 <HAL_GPIO_Init+0x1e4>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a3d      	ldr	r2, [pc, #244]	@ (800450c <HAL_GPIO_Init+0x2cc>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d101      	bne.n	8004420 <HAL_GPIO_Init+0x1e0>
 800441c:	2303      	movs	r3, #3
 800441e:	e006      	b.n	800442e <HAL_GPIO_Init+0x1ee>
 8004420:	2304      	movs	r3, #4
 8004422:	e004      	b.n	800442e <HAL_GPIO_Init+0x1ee>
 8004424:	2302      	movs	r3, #2
 8004426:	e002      	b.n	800442e <HAL_GPIO_Init+0x1ee>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <HAL_GPIO_Init+0x1ee>
 800442c:	2300      	movs	r3, #0
 800442e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004430:	f002 0203 	and.w	r2, r2, #3
 8004434:	0092      	lsls	r2, r2, #2
 8004436:	4093      	lsls	r3, r2
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800443e:	492f      	ldr	r1, [pc, #188]	@ (80044fc <HAL_GPIO_Init+0x2bc>)
 8004440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004442:	089b      	lsrs	r3, r3, #2
 8004444:	3302      	adds	r3, #2
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d006      	beq.n	8004466 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004458:	4b2d      	ldr	r3, [pc, #180]	@ (8004510 <HAL_GPIO_Init+0x2d0>)
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	492c      	ldr	r1, [pc, #176]	@ (8004510 <HAL_GPIO_Init+0x2d0>)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	4313      	orrs	r3, r2
 8004462:	608b      	str	r3, [r1, #8]
 8004464:	e006      	b.n	8004474 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004466:	4b2a      	ldr	r3, [pc, #168]	@ (8004510 <HAL_GPIO_Init+0x2d0>)
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	43db      	mvns	r3, r3
 800446e:	4928      	ldr	r1, [pc, #160]	@ (8004510 <HAL_GPIO_Init+0x2d0>)
 8004470:	4013      	ands	r3, r2
 8004472:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d006      	beq.n	800448e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004480:	4b23      	ldr	r3, [pc, #140]	@ (8004510 <HAL_GPIO_Init+0x2d0>)
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	4922      	ldr	r1, [pc, #136]	@ (8004510 <HAL_GPIO_Init+0x2d0>)
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	4313      	orrs	r3, r2
 800448a:	60cb      	str	r3, [r1, #12]
 800448c:	e006      	b.n	800449c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800448e:	4b20      	ldr	r3, [pc, #128]	@ (8004510 <HAL_GPIO_Init+0x2d0>)
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	43db      	mvns	r3, r3
 8004496:	491e      	ldr	r1, [pc, #120]	@ (8004510 <HAL_GPIO_Init+0x2d0>)
 8004498:	4013      	ands	r3, r2
 800449a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d006      	beq.n	80044b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80044a8:	4b19      	ldr	r3, [pc, #100]	@ (8004510 <HAL_GPIO_Init+0x2d0>)
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	4918      	ldr	r1, [pc, #96]	@ (8004510 <HAL_GPIO_Init+0x2d0>)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
 80044b4:	e006      	b.n	80044c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80044b6:	4b16      	ldr	r3, [pc, #88]	@ (8004510 <HAL_GPIO_Init+0x2d0>)
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	43db      	mvns	r3, r3
 80044be:	4914      	ldr	r1, [pc, #80]	@ (8004510 <HAL_GPIO_Init+0x2d0>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d021      	beq.n	8004514 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80044d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004510 <HAL_GPIO_Init+0x2d0>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	490e      	ldr	r1, [pc, #56]	@ (8004510 <HAL_GPIO_Init+0x2d0>)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]
 80044dc:	e021      	b.n	8004522 <HAL_GPIO_Init+0x2e2>
 80044de:	bf00      	nop
 80044e0:	10320000 	.word	0x10320000
 80044e4:	10310000 	.word	0x10310000
 80044e8:	10220000 	.word	0x10220000
 80044ec:	10210000 	.word	0x10210000
 80044f0:	10120000 	.word	0x10120000
 80044f4:	10110000 	.word	0x10110000
 80044f8:	40021000 	.word	0x40021000
 80044fc:	40010000 	.word	0x40010000
 8004500:	40010800 	.word	0x40010800
 8004504:	40010c00 	.word	0x40010c00
 8004508:	40011000 	.word	0x40011000
 800450c:	40011400 	.word	0x40011400
 8004510:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004514:	4b0b      	ldr	r3, [pc, #44]	@ (8004544 <HAL_GPIO_Init+0x304>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	43db      	mvns	r3, r3
 800451c:	4909      	ldr	r1, [pc, #36]	@ (8004544 <HAL_GPIO_Init+0x304>)
 800451e:	4013      	ands	r3, r2
 8004520:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	3301      	adds	r3, #1
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452e:	fa22 f303 	lsr.w	r3, r2, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	f47f ae8e 	bne.w	8004254 <HAL_GPIO_Init+0x14>
  }
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	372c      	adds	r7, #44	@ 0x2c
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr
 8004544:	40010400 	.word	0x40010400

08004548 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004548:	b480      	push	{r7}
 800454a:	b089      	sub	sp, #36	@ 0x24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8004556:	e09a      	b.n	800468e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004558:	2201      	movs	r2, #1
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	4013      	ands	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 808d 	beq.w	8004688 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800456e:	4a4e      	ldr	r2, [pc, #312]	@ (80046a8 <HAL_GPIO_DeInit+0x160>)
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	089b      	lsrs	r3, r3, #2
 8004574:	3302      	adds	r3, #2
 8004576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800457a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	220f      	movs	r2, #15
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	4013      	ands	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a46      	ldr	r2, [pc, #280]	@ (80046ac <HAL_GPIO_DeInit+0x164>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d013      	beq.n	80045c0 <HAL_GPIO_DeInit+0x78>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a45      	ldr	r2, [pc, #276]	@ (80046b0 <HAL_GPIO_DeInit+0x168>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00d      	beq.n	80045bc <HAL_GPIO_DeInit+0x74>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a44      	ldr	r2, [pc, #272]	@ (80046b4 <HAL_GPIO_DeInit+0x16c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d007      	beq.n	80045b8 <HAL_GPIO_DeInit+0x70>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a43      	ldr	r2, [pc, #268]	@ (80046b8 <HAL_GPIO_DeInit+0x170>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d101      	bne.n	80045b4 <HAL_GPIO_DeInit+0x6c>
 80045b0:	2303      	movs	r3, #3
 80045b2:	e006      	b.n	80045c2 <HAL_GPIO_DeInit+0x7a>
 80045b4:	2304      	movs	r3, #4
 80045b6:	e004      	b.n	80045c2 <HAL_GPIO_DeInit+0x7a>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e002      	b.n	80045c2 <HAL_GPIO_DeInit+0x7a>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <HAL_GPIO_DeInit+0x7a>
 80045c0:	2300      	movs	r3, #0
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	f002 0203 	and.w	r2, r2, #3
 80045c8:	0092      	lsls	r2, r2, #2
 80045ca:	4093      	lsls	r3, r2
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d132      	bne.n	8004638 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80045d2:	4b3a      	ldr	r3, [pc, #232]	@ (80046bc <HAL_GPIO_DeInit+0x174>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	43db      	mvns	r3, r3
 80045da:	4938      	ldr	r1, [pc, #224]	@ (80046bc <HAL_GPIO_DeInit+0x174>)
 80045dc:	4013      	ands	r3, r2
 80045de:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80045e0:	4b36      	ldr	r3, [pc, #216]	@ (80046bc <HAL_GPIO_DeInit+0x174>)
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	43db      	mvns	r3, r3
 80045e8:	4934      	ldr	r1, [pc, #208]	@ (80046bc <HAL_GPIO_DeInit+0x174>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80045ee:	4b33      	ldr	r3, [pc, #204]	@ (80046bc <HAL_GPIO_DeInit+0x174>)
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	4931      	ldr	r1, [pc, #196]	@ (80046bc <HAL_GPIO_DeInit+0x174>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80045fc:	4b2f      	ldr	r3, [pc, #188]	@ (80046bc <HAL_GPIO_DeInit+0x174>)
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	43db      	mvns	r3, r3
 8004604:	492d      	ldr	r1, [pc, #180]	@ (80046bc <HAL_GPIO_DeInit+0x174>)
 8004606:	4013      	ands	r3, r2
 8004608:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	220f      	movs	r2, #15
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800461a:	4a23      	ldr	r2, [pc, #140]	@ (80046a8 <HAL_GPIO_DeInit+0x160>)
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	089b      	lsrs	r3, r3, #2
 8004620:	3302      	adds	r3, #2
 8004622:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	43da      	mvns	r2, r3
 800462a:	481f      	ldr	r0, [pc, #124]	@ (80046a8 <HAL_GPIO_DeInit+0x160>)
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	089b      	lsrs	r3, r3, #2
 8004630:	400a      	ands	r2, r1
 8004632:	3302      	adds	r3, #2
 8004634:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2bff      	cmp	r3, #255	@ 0xff
 800463c:	d801      	bhi.n	8004642 <HAL_GPIO_DeInit+0xfa>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	e001      	b.n	8004646 <HAL_GPIO_DeInit+0xfe>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3304      	adds	r3, #4
 8004646:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	2bff      	cmp	r3, #255	@ 0xff
 800464c:	d802      	bhi.n	8004654 <HAL_GPIO_DeInit+0x10c>
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	e002      	b.n	800465a <HAL_GPIO_DeInit+0x112>
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	3b08      	subs	r3, #8
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	210f      	movs	r1, #15
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	fa01 f303 	lsl.w	r3, r1, r3
 8004668:	43db      	mvns	r3, r3
 800466a:	401a      	ands	r2, r3
 800466c:	2104      	movs	r1, #4
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	fa01 f303 	lsl.w	r3, r1, r3
 8004674:	431a      	orrs	r2, r3
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	43db      	mvns	r3, r3
 8004682:	401a      	ands	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	3301      	adds	r3, #1
 800468c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	fa22 f303 	lsr.w	r3, r2, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	f47f af5e 	bne.w	8004558 <HAL_GPIO_DeInit+0x10>
  }
}
 800469c:	bf00      	nop
 800469e:	bf00      	nop
 80046a0:	3724      	adds	r7, #36	@ 0x24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr
 80046a8:	40010000 	.word	0x40010000
 80046ac:	40010800 	.word	0x40010800
 80046b0:	40010c00 	.word	0x40010c00
 80046b4:	40011000 	.word	0x40011000
 80046b8:	40011400 	.word	0x40011400
 80046bc:	40010400 	.word	0x40010400

080046c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	887b      	ldrh	r3, [r7, #2]
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
 80046dc:	e001      	b.n	80046e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr

080046ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	460b      	mov	r3, r1
 80046f8:	807b      	strh	r3, [r7, #2]
 80046fa:	4613      	mov	r3, r2
 80046fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046fe:	787b      	ldrb	r3, [r7, #1]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004704:	887a      	ldrh	r2, [r7, #2]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800470a:	e003      	b.n	8004714 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800470c:	887b      	ldrh	r3, [r7, #2]
 800470e:	041a      	lsls	r2, r3, #16
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	611a      	str	r2, [r3, #16]
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr
	...

08004720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800472a:	4b08      	ldr	r3, [pc, #32]	@ (800474c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d006      	beq.n	8004744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004736:	4a05      	ldr	r2, [pc, #20]	@ (800474c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004738:	88fb      	ldrh	r3, [r7, #6]
 800473a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	4618      	mov	r0, r3
 8004740:	f7fd f998 	bl	8001a74 <HAL_GPIO_EXTI_Callback>
  }
}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40010400 	.word	0x40010400

08004750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e12b      	b.n	80049ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fe ffe4 	bl	8003744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2224      	movs	r2, #36	@ 0x24
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0201 	bic.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047b4:	f003 f98a 	bl	8007acc <HAL_RCC_GetPCLK1Freq>
 80047b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4a81      	ldr	r2, [pc, #516]	@ (80049c4 <HAL_I2C_Init+0x274>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d807      	bhi.n	80047d4 <HAL_I2C_Init+0x84>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a80      	ldr	r2, [pc, #512]	@ (80049c8 <HAL_I2C_Init+0x278>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	bf94      	ite	ls
 80047cc:	2301      	movls	r3, #1
 80047ce:	2300      	movhi	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	e006      	b.n	80047e2 <HAL_I2C_Init+0x92>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4a7d      	ldr	r2, [pc, #500]	@ (80049cc <HAL_I2C_Init+0x27c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	bf94      	ite	ls
 80047dc:	2301      	movls	r3, #1
 80047de:	2300      	movhi	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e0e7      	b.n	80049ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4a78      	ldr	r2, [pc, #480]	@ (80049d0 <HAL_I2C_Init+0x280>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	0c9b      	lsrs	r3, r3, #18
 80047f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	430a      	orrs	r2, r1
 8004808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a6a      	ldr	r2, [pc, #424]	@ (80049c4 <HAL_I2C_Init+0x274>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d802      	bhi.n	8004824 <HAL_I2C_Init+0xd4>
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	3301      	adds	r3, #1
 8004822:	e009      	b.n	8004838 <HAL_I2C_Init+0xe8>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800482a:	fb02 f303 	mul.w	r3, r2, r3
 800482e:	4a69      	ldr	r2, [pc, #420]	@ (80049d4 <HAL_I2C_Init+0x284>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	099b      	lsrs	r3, r3, #6
 8004836:	3301      	adds	r3, #1
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	430b      	orrs	r3, r1
 800483e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800484a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	495c      	ldr	r1, [pc, #368]	@ (80049c4 <HAL_I2C_Init+0x274>)
 8004854:	428b      	cmp	r3, r1
 8004856:	d819      	bhi.n	800488c <HAL_I2C_Init+0x13c>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1e59      	subs	r1, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	fbb1 f3f3 	udiv	r3, r1, r3
 8004866:	1c59      	adds	r1, r3, #1
 8004868:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800486c:	400b      	ands	r3, r1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_I2C_Init+0x138>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1e59      	subs	r1, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004880:	3301      	adds	r3, #1
 8004882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004886:	e051      	b.n	800492c <HAL_I2C_Init+0x1dc>
 8004888:	2304      	movs	r3, #4
 800488a:	e04f      	b.n	800492c <HAL_I2C_Init+0x1dc>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d111      	bne.n	80048b8 <HAL_I2C_Init+0x168>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1e58      	subs	r0, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6859      	ldr	r1, [r3, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	440b      	add	r3, r1
 80048a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048a6:	3301      	adds	r3, #1
 80048a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	bf0c      	ite	eq
 80048b0:	2301      	moveq	r3, #1
 80048b2:	2300      	movne	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	e012      	b.n	80048de <HAL_I2C_Init+0x18e>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	1e58      	subs	r0, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6859      	ldr	r1, [r3, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	0099      	lsls	r1, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ce:	3301      	adds	r3, #1
 80048d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf0c      	ite	eq
 80048d8:	2301      	moveq	r3, #1
 80048da:	2300      	movne	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_I2C_Init+0x196>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e022      	b.n	800492c <HAL_I2C_Init+0x1dc>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10e      	bne.n	800490c <HAL_I2C_Init+0x1bc>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1e58      	subs	r0, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6859      	ldr	r1, [r3, #4]
 80048f6:	460b      	mov	r3, r1
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	440b      	add	r3, r1
 80048fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004900:	3301      	adds	r3, #1
 8004902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800490a:	e00f      	b.n	800492c <HAL_I2C_Init+0x1dc>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	1e58      	subs	r0, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6859      	ldr	r1, [r3, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	0099      	lsls	r1, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004922:	3301      	adds	r3, #1
 8004924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004928:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	6809      	ldr	r1, [r1, #0]
 8004930:	4313      	orrs	r3, r2
 8004932:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69da      	ldr	r2, [r3, #28]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800495a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6911      	ldr	r1, [r2, #16]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68d2      	ldr	r2, [r2, #12]
 8004966:	4311      	orrs	r1, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	430b      	orrs	r3, r1
 800496e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	000186a0 	.word	0x000186a0
 80049c8:	001e847f 	.word	0x001e847f
 80049cc:	003d08ff 	.word	0x003d08ff
 80049d0:	431bde83 	.word	0x431bde83
 80049d4:	10624dd3 	.word	0x10624dd3

080049d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	607a      	str	r2, [r7, #4]
 80049e2:	461a      	mov	r2, r3
 80049e4:	460b      	mov	r3, r1
 80049e6:	817b      	strh	r3, [r7, #10]
 80049e8:	4613      	mov	r3, r2
 80049ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049ec:	f7ff fa08 	bl	8003e00 <HAL_GetTick>
 80049f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	f040 80e0 	bne.w	8004bc0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2319      	movs	r3, #25
 8004a06:	2201      	movs	r2, #1
 8004a08:	4970      	ldr	r1, [pc, #448]	@ (8004bcc <HAL_I2C_Master_Transmit+0x1f4>)
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 fc9e 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a16:	2302      	movs	r3, #2
 8004a18:	e0d3      	b.n	8004bc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_I2C_Master_Transmit+0x50>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e0cc      	b.n	8004bc2 <HAL_I2C_Master_Transmit+0x1ea>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d007      	beq.n	8004a4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 0201 	orr.w	r2, r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2221      	movs	r2, #33	@ 0x21
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2210      	movs	r2, #16
 8004a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	893a      	ldrh	r2, [r7, #8]
 8004a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4a50      	ldr	r2, [pc, #320]	@ (8004bd0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a90:	8979      	ldrh	r1, [r7, #10]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	6a3a      	ldr	r2, [r7, #32]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 fb08 	bl	80050ac <I2C_MasterRequestWrite>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e08d      	b.n	8004bc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004abc:	e066      	b.n	8004b8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	6a39      	ldr	r1, [r7, #32]
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fd5c 	bl	8005580 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00d      	beq.n	8004aea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d107      	bne.n	8004ae6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e06b      	b.n	8004bc2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aee:	781a      	ldrb	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d11b      	bne.n	8004b60 <HAL_I2C_Master_Transmit+0x188>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d017      	beq.n	8004b60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	781a      	ldrb	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	6a39      	ldr	r1, [r7, #32]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 fd53 	bl	8005610 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00d      	beq.n	8004b8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d107      	bne.n	8004b88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e01a      	b.n	8004bc2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d194      	bne.n	8004abe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	e000      	b.n	8004bc2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004bc0:	2302      	movs	r3, #2
  }
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	00100002 	.word	0x00100002
 8004bd0:	ffff0000 	.word	0xffff0000

08004bd4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08c      	sub	sp, #48	@ 0x30
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	607a      	str	r2, [r7, #4]
 8004bde:	461a      	mov	r2, r3
 8004be0:	460b      	mov	r3, r1
 8004be2:	817b      	strh	r3, [r7, #10]
 8004be4:	4613      	mov	r3, r2
 8004be6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bec:	f7ff f908 	bl	8003e00 <HAL_GetTick>
 8004bf0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	f040 824b 	bne.w	8005096 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	2319      	movs	r3, #25
 8004c06:	2201      	movs	r2, #1
 8004c08:	497f      	ldr	r1, [pc, #508]	@ (8004e08 <HAL_I2C_Master_Receive+0x234>)
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 fb9e 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004c16:	2302      	movs	r3, #2
 8004c18:	e23e      	b.n	8005098 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_I2C_Master_Receive+0x54>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e237      	b.n	8005098 <HAL_I2C_Master_Receive+0x4c4>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d007      	beq.n	8004c4e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0201 	orr.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2222      	movs	r2, #34	@ 0x22
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2210      	movs	r2, #16
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	893a      	ldrh	r2, [r7, #8]
 8004c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4a5f      	ldr	r2, [pc, #380]	@ (8004e0c <HAL_I2C_Master_Receive+0x238>)
 8004c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c90:	8979      	ldrh	r1, [r7, #10]
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fa8a 	bl	80051b0 <I2C_MasterRequestRead>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e1f8      	b.n	8005098 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d113      	bne.n	8004cd6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61fb      	str	r3, [r7, #28]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	61fb      	str	r3, [r7, #28]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	e1cc      	b.n	8005070 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d11e      	bne.n	8004d1c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004cee:	b672      	cpsid	i
}
 8004cf0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61bb      	str	r3, [r7, #24]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d18:	b662      	cpsie	i
}
 8004d1a:	e035      	b.n	8004d88 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d11e      	bne.n	8004d62 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d34:	b672      	cpsid	i
}
 8004d36:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d5e:	b662      	cpsie	i
}
 8004d60:	e012      	b.n	8004d88 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d72:	2300      	movs	r3, #0
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004d88:	e172      	b.n	8005070 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	f200 811f 	bhi.w	8004fd2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d123      	bne.n	8004de4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 fc7d 	bl	80056a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e173      	b.n	8005098 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004de2:	e145      	b.n	8005070 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d152      	bne.n	8004e92 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df2:	2200      	movs	r2, #0
 8004df4:	4906      	ldr	r1, [pc, #24]	@ (8004e10 <HAL_I2C_Master_Receive+0x23c>)
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 faa8 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e148      	b.n	8005098 <HAL_I2C_Master_Receive+0x4c4>
 8004e06:	bf00      	nop
 8004e08:	00100002 	.word	0x00100002
 8004e0c:	ffff0000 	.word	0xffff0000
 8004e10:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004e14:	b672      	cpsid	i
}
 8004e16:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004e5a:	b662      	cpsie	i
}
 8004e5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e90:	e0ee      	b.n	8005070 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4981      	ldr	r1, [pc, #516]	@ (80050a0 <HAL_I2C_Master_Receive+0x4cc>)
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 fa55 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0f5      	b.n	8005098 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ebc:	b672      	cpsid	i
}
 8004ebe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ef2:	4b6c      	ldr	r3, [pc, #432]	@ (80050a4 <HAL_I2C_Master_Receive+0x4d0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	08db      	lsrs	r3, r3, #3
 8004ef8:	4a6b      	ldr	r2, [pc, #428]	@ (80050a8 <HAL_I2C_Master_Receive+0x4d4>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	0a1a      	lsrs	r2, r3, #8
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	00da      	lsls	r2, r3, #3
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d118      	bne.n	8004f4a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	f043 0220 	orr.w	r2, r3, #32
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004f3a:	b662      	cpsie	i
}
 8004f3c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e0a6      	b.n	8005098 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d1d9      	bne.n	8004f0c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f9a:	b662      	cpsie	i
}
 8004f9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004fd0:	e04e      	b.n	8005070 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 fb62 	bl	80056a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e058      	b.n	8005098 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b04      	cmp	r3, #4
 8005024:	d124      	bne.n	8005070 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502a:	2b03      	cmp	r3, #3
 800502c:	d107      	bne.n	800503e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800503c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005074:	2b00      	cmp	r3, #0
 8005076:	f47f ae88 	bne.w	8004d8a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	e000      	b.n	8005098 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8005096:	2302      	movs	r3, #2
  }
}
 8005098:	4618      	mov	r0, r3
 800509a:	3728      	adds	r7, #40	@ 0x28
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	00010004 	.word	0x00010004
 80050a4:	20000000 	.word	0x20000000
 80050a8:	14f8b589 	.word	0x14f8b589

080050ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	460b      	mov	r3, r1
 80050ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d006      	beq.n	80050d6 <I2C_MasterRequestWrite+0x2a>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d003      	beq.n	80050d6 <I2C_MasterRequestWrite+0x2a>
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050d4:	d108      	bne.n	80050e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e00b      	b.n	8005100 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ec:	2b12      	cmp	r3, #18
 80050ee:	d107      	bne.n	8005100 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f91d 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00d      	beq.n	8005134 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005126:	d103      	bne.n	8005130 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800512e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e035      	b.n	80051a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800513c:	d108      	bne.n	8005150 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800513e:	897b      	ldrh	r3, [r7, #10]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	461a      	mov	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800514c:	611a      	str	r2, [r3, #16]
 800514e:	e01b      	b.n	8005188 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005150:	897b      	ldrh	r3, [r7, #10]
 8005152:	11db      	asrs	r3, r3, #7
 8005154:	b2db      	uxtb	r3, r3
 8005156:	f003 0306 	and.w	r3, r3, #6
 800515a:	b2db      	uxtb	r3, r3
 800515c:	f063 030f 	orn	r3, r3, #15
 8005160:	b2da      	uxtb	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	490e      	ldr	r1, [pc, #56]	@ (80051a8 <I2C_MasterRequestWrite+0xfc>)
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 f966 	bl	8005440 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e010      	b.n	80051a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800517e:	897b      	ldrh	r3, [r7, #10]
 8005180:	b2da      	uxtb	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4907      	ldr	r1, [pc, #28]	@ (80051ac <I2C_MasterRequestWrite+0x100>)
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f956 	bl	8005440 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	00010008 	.word	0x00010008
 80051ac:	00010002 	.word	0x00010002

080051b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	607a      	str	r2, [r7, #4]
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	460b      	mov	r3, r1
 80051be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d006      	beq.n	80051ea <I2C_MasterRequestRead+0x3a>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d003      	beq.n	80051ea <I2C_MasterRequestRead+0x3a>
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051e8:	d108      	bne.n	80051fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	e00b      	b.n	8005214 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005200:	2b11      	cmp	r3, #17
 8005202:	d107      	bne.n	8005214 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005212:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f893 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00d      	beq.n	8005248 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800523a:	d103      	bne.n	8005244 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005242:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e079      	b.n	800533c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005250:	d108      	bne.n	8005264 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005252:	897b      	ldrh	r3, [r7, #10]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	b2da      	uxtb	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	611a      	str	r2, [r3, #16]
 8005262:	e05f      	b.n	8005324 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005264:	897b      	ldrh	r3, [r7, #10]
 8005266:	11db      	asrs	r3, r3, #7
 8005268:	b2db      	uxtb	r3, r3
 800526a:	f003 0306 	and.w	r3, r3, #6
 800526e:	b2db      	uxtb	r3, r3
 8005270:	f063 030f 	orn	r3, r3, #15
 8005274:	b2da      	uxtb	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	4930      	ldr	r1, [pc, #192]	@ (8005344 <I2C_MasterRequestRead+0x194>)
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 f8dc 	bl	8005440 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e054      	b.n	800533c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005292:	897b      	ldrh	r3, [r7, #10]
 8005294:	b2da      	uxtb	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	4929      	ldr	r1, [pc, #164]	@ (8005348 <I2C_MasterRequestRead+0x198>)
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f8cc 	bl	8005440 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e044      	b.n	800533c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b2:	2300      	movs	r3, #0
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f831 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00d      	beq.n	800530c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052fe:	d103      	bne.n	8005308 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005306:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e017      	b.n	800533c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800530c:	897b      	ldrh	r3, [r7, #10]
 800530e:	11db      	asrs	r3, r3, #7
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f003 0306 	and.w	r3, r3, #6
 8005316:	b2db      	uxtb	r3, r3
 8005318:	f063 030e 	orn	r3, r3, #14
 800531c:	b2da      	uxtb	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	4907      	ldr	r1, [pc, #28]	@ (8005348 <I2C_MasterRequestRead+0x198>)
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f888 	bl	8005440 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	00010008 	.word	0x00010008
 8005348:	00010002 	.word	0x00010002

0800534c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	4613      	mov	r3, r2
 800535a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800535c:	e048      	b.n	80053f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005364:	d044      	beq.n	80053f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005366:	f7fe fd4b 	bl	8003e00 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d302      	bcc.n	800537c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d139      	bne.n	80053f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	0c1b      	lsrs	r3, r3, #16
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b01      	cmp	r3, #1
 8005384:	d10d      	bne.n	80053a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	43da      	mvns	r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	4013      	ands	r3, r2
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	bf0c      	ite	eq
 8005398:	2301      	moveq	r3, #1
 800539a:	2300      	movne	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	461a      	mov	r2, r3
 80053a0:	e00c      	b.n	80053bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	43da      	mvns	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4013      	ands	r3, r2
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf0c      	ite	eq
 80053b4:	2301      	moveq	r3, #1
 80053b6:	2300      	movne	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d116      	bne.n	80053f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053dc:	f043 0220 	orr.w	r2, r3, #32
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e023      	b.n	8005438 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	0c1b      	lsrs	r3, r3, #16
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d10d      	bne.n	8005416 <I2C_WaitOnFlagUntilTimeout+0xca>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	43da      	mvns	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	4013      	ands	r3, r2
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	bf0c      	ite	eq
 800540c:	2301      	moveq	r3, #1
 800540e:	2300      	movne	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	461a      	mov	r2, r3
 8005414:	e00c      	b.n	8005430 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	43da      	mvns	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	4013      	ands	r3, r2
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	bf0c      	ite	eq
 8005428:	2301      	moveq	r3, #1
 800542a:	2300      	movne	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	461a      	mov	r2, r3
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	429a      	cmp	r2, r3
 8005434:	d093      	beq.n	800535e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800544e:	e071      	b.n	8005534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800545a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800545e:	d123      	bne.n	80054a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800546e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005478:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005494:	f043 0204 	orr.w	r2, r3, #4
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e067      	b.n	8005578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ae:	d041      	beq.n	8005534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b0:	f7fe fca6 	bl	8003e00 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d302      	bcc.n	80054c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d136      	bne.n	8005534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d10c      	bne.n	80054ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	43da      	mvns	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4013      	ands	r3, r2
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bf14      	ite	ne
 80054e2:	2301      	movne	r3, #1
 80054e4:	2300      	moveq	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	e00b      	b.n	8005502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	43da      	mvns	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4013      	ands	r3, r2
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	bf14      	ite	ne
 80054fc:	2301      	movne	r3, #1
 80054fe:	2300      	moveq	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d016      	beq.n	8005534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005520:	f043 0220 	orr.w	r2, r3, #32
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e021      	b.n	8005578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	0c1b      	lsrs	r3, r3, #16
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b01      	cmp	r3, #1
 800553c:	d10c      	bne.n	8005558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	43da      	mvns	r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	4013      	ands	r3, r2
 800554a:	b29b      	uxth	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	bf14      	ite	ne
 8005550:	2301      	movne	r3, #1
 8005552:	2300      	moveq	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	e00b      	b.n	8005570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	43da      	mvns	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4013      	ands	r3, r2
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	bf14      	ite	ne
 800556a:	2301      	movne	r3, #1
 800556c:	2300      	moveq	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	f47f af6d 	bne.w	8005450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800558c:	e034      	b.n	80055f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f8e3 	bl	800575a <I2C_IsAcknowledgeFailed>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e034      	b.n	8005608 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a4:	d028      	beq.n	80055f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a6:	f7fe fc2b 	bl	8003e00 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d302      	bcc.n	80055bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d11d      	bne.n	80055f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c6:	2b80      	cmp	r3, #128	@ 0x80
 80055c8:	d016      	beq.n	80055f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e4:	f043 0220 	orr.w	r2, r3, #32
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e007      	b.n	8005608 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005602:	2b80      	cmp	r3, #128	@ 0x80
 8005604:	d1c3      	bne.n	800558e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800561c:	e034      	b.n	8005688 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 f89b 	bl	800575a <I2C_IsAcknowledgeFailed>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e034      	b.n	8005698 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005634:	d028      	beq.n	8005688 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005636:	f7fe fbe3 	bl	8003e00 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	429a      	cmp	r2, r3
 8005644:	d302      	bcc.n	800564c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d11d      	bne.n	8005688 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b04      	cmp	r3, #4
 8005658:	d016      	beq.n	8005688 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005674:	f043 0220 	orr.w	r2, r3, #32
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e007      	b.n	8005698 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b04      	cmp	r3, #4
 8005694:	d1c3      	bne.n	800561e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056ac:	e049      	b.n	8005742 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d119      	bne.n	80056f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0210 	mvn.w	r2, #16
 80056c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e030      	b.n	8005752 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f0:	f7fe fb86 	bl	8003e00 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d302      	bcc.n	8005706 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d11d      	bne.n	8005742 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005710:	2b40      	cmp	r3, #64	@ 0x40
 8005712:	d016      	beq.n	8005742 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572e:	f043 0220 	orr.w	r2, r3, #32
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e007      	b.n	8005752 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574c:	2b40      	cmp	r3, #64	@ 0x40
 800574e:	d1ae      	bne.n	80056ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800576c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005770:	d11b      	bne.n	80057aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800577a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005796:	f043 0204 	orr.w	r2, r3, #4
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc80      	pop	{r7}
 80057b4:	4770      	bx	lr

080057b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e0e8      	b.n	800599a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d106      	bne.n	80057e2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f009 f937 	bl	800ea50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2203      	movs	r2, #3
 80057e6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f005 f8b2 	bl	800a95e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005804:	f005 f888 	bl	800a918 <USB_CoreInit>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d005      	beq.n	800581a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e0bf      	b.n	800599a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2100      	movs	r1, #0
 8005820:	4618      	mov	r0, r3
 8005822:	f005 f8b6 	bl	800a992 <USB_SetCurrentMode>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e0b0      	b.n	800599a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005838:	2300      	movs	r3, #0
 800583a:	73fb      	strb	r3, [r7, #15]
 800583c:	e03e      	b.n	80058bc <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800583e:	7bfa      	ldrb	r2, [r7, #15]
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	440b      	add	r3, r1
 800584c:	3311      	adds	r3, #17
 800584e:	2201      	movs	r2, #1
 8005850:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005852:	7bfa      	ldrb	r2, [r7, #15]
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	440b      	add	r3, r1
 8005860:	3310      	adds	r3, #16
 8005862:	7bfa      	ldrb	r2, [r7, #15]
 8005864:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005866:	7bfa      	ldrb	r2, [r7, #15]
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	440b      	add	r3, r1
 8005874:	3313      	adds	r3, #19
 8005876:	2200      	movs	r2, #0
 8005878:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800587a:	7bfa      	ldrb	r2, [r7, #15]
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	4613      	mov	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	440b      	add	r3, r1
 8005888:	3320      	adds	r3, #32
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800588e:	7bfa      	ldrb	r2, [r7, #15]
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	440b      	add	r3, r1
 800589c:	3324      	adds	r3, #36	@ 0x24
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	440b      	add	r3, r1
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	3301      	adds	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	791b      	ldrb	r3, [r3, #4]
 80058c0:	7bfa      	ldrb	r2, [r7, #15]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d3bb      	bcc.n	800583e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058c6:	2300      	movs	r3, #0
 80058c8:	73fb      	strb	r3, [r7, #15]
 80058ca:	e044      	b.n	8005956 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058cc:	7bfa      	ldrb	r2, [r7, #15]
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	4613      	mov	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	440b      	add	r3, r1
 80058da:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80058de:	2200      	movs	r2, #0
 80058e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058e2:	7bfa      	ldrb	r2, [r7, #15]
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	440b      	add	r3, r1
 80058f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80058f4:	7bfa      	ldrb	r2, [r7, #15]
 80058f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80058f8:	7bfa      	ldrb	r2, [r7, #15]
 80058fa:	6879      	ldr	r1, [r7, #4]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	440b      	add	r3, r1
 8005906:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800590e:	7bfa      	ldrb	r2, [r7, #15]
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	440b      	add	r3, r1
 800591c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005924:	7bfa      	ldrb	r2, [r7, #15]
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	440b      	add	r3, r1
 8005932:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005936:	2200      	movs	r2, #0
 8005938:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800593a:	7bfa      	ldrb	r2, [r7, #15]
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	440b      	add	r3, r1
 8005948:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	3301      	adds	r3, #1
 8005954:	73fb      	strb	r3, [r7, #15]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	791b      	ldrb	r3, [r3, #4]
 800595a:	7bfa      	ldrb	r2, [r7, #15]
 800595c:	429a      	cmp	r2, r3
 800595e:	d3b5      	bcc.n	80058cc <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3304      	adds	r3, #4
 8005968:	cb0e      	ldmia	r3, {r1, r2, r3}
 800596a:	f005 f81e 	bl	800a9aa <USB_DevInit>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e00c      	b.n	800599a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f007 fa9d 	bl	800ced2 <USB_DevDisconnect>

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_PCD_Start+0x16>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e016      	b.n	80059e6 <HAL_PCD_Start+0x44>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f004 ffb4 	bl	800a932 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80059ca:	2101      	movs	r1, #1
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f009 faba 	bl	800ef46 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f007 fa71 	bl	800cebe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b088      	sub	sp, #32
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f007 fa73 	bl	800cee6 <USB_ReadInterrupts>
 8005a00:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fb1a 	bl	8006046 <PCD_EP_ISR_Handler>

    return;
 8005a12:	e119      	b.n	8005c48 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d013      	beq.n	8005a46 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a30:	b292      	uxth	r2, r2
 8005a32:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f009 f88d 	bl	800eb56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f905 	bl	8005c4e <HAL_PCD_SetAddress>

    return;
 8005a44:	e100      	b.n	8005c48 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00c      	beq.n	8005a6a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a62:	b292      	uxth	r2, r2
 8005a64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005a68:	e0ee      	b.n	8005c48 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00c      	beq.n	8005a8e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a86:	b292      	uxth	r2, r2
 8005a88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005a8c:	e0dc      	b.n	8005c48 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d027      	beq.n	8005ae8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0204 	bic.w	r2, r2, #4
 8005aaa:	b292      	uxth	r2, r2
 8005aac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0208 	bic.w	r2, r2, #8
 8005ac2:	b292      	uxth	r2, r2
 8005ac4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f009 f87d 	bl	800ebc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ae0:	b292      	uxth	r2, r2
 8005ae2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005ae6:	e0af      	b.n	8005c48 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 8083 	beq.w	8005bfa <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8005af4:	2300      	movs	r3, #0
 8005af6:	77fb      	strb	r3, [r7, #31]
 8005af8:	e010      	b.n	8005b1c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	7ffb      	ldrb	r3, [r7, #31]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	441a      	add	r2, r3
 8005b06:	7ffb      	ldrb	r3, [r7, #31]
 8005b08:	8812      	ldrh	r2, [r2, #0]
 8005b0a:	b292      	uxth	r2, r2
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	3320      	adds	r3, #32
 8005b10:	443b      	add	r3, r7
 8005b12:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8005b16:	7ffb      	ldrb	r3, [r7, #31]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	77fb      	strb	r3, [r7, #31]
 8005b1c:	7ffb      	ldrb	r3, [r7, #31]
 8005b1e:	2b07      	cmp	r3, #7
 8005b20:	d9eb      	bls.n	8005afa <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0201 	orr.w	r2, r2, #1
 8005b34:	b292      	uxth	r2, r2
 8005b36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0201 	bic.w	r2, r2, #1
 8005b4c:	b292      	uxth	r2, r2
 8005b4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005b52:	bf00      	nop
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0f6      	beq.n	8005b54 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b78:	b292      	uxth	r2, r2
 8005b7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005b7e:	2300      	movs	r3, #0
 8005b80:	77fb      	strb	r3, [r7, #31]
 8005b82:	e00f      	b.n	8005ba4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005b84:	7ffb      	ldrb	r3, [r7, #31]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	7ffa      	ldrb	r2, [r7, #31]
 8005b8e:	0092      	lsls	r2, r2, #2
 8005b90:	440a      	add	r2, r1
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	3320      	adds	r3, #32
 8005b96:	443b      	add	r3, r7
 8005b98:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005b9c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005b9e:	7ffb      	ldrb	r3, [r7, #31]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	7ffb      	ldrb	r3, [r7, #31]
 8005ba6:	2b07      	cmp	r3, #7
 8005ba8:	d9ec      	bls.n	8005b84 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0208 	orr.w	r2, r2, #8
 8005bbc:	b292      	uxth	r2, r2
 8005bbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bd4:	b292      	uxth	r2, r2
 8005bd6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0204 	orr.w	r2, r2, #4
 8005bec:	b292      	uxth	r2, r2
 8005bee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f008 ffce 	bl	800eb94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005bf8:	e026      	b.n	8005c48 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00f      	beq.n	8005c24 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005c16:	b292      	uxth	r2, r2
 8005c18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f008 ff8c 	bl	800eb3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005c22:	e011      	b.n	8005c48 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00c      	beq.n	8005c48 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c40:	b292      	uxth	r2, r2
 8005c42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005c46:	bf00      	nop
  }
}
 8005c48:	3720      	adds	r7, #32
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	460b      	mov	r3, r1
 8005c58:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_PCD_SetAddress+0x1a>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e012      	b.n	8005c8e <HAL_PCD_SetAddress+0x40>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	78fa      	ldrb	r2, [r7, #3]
 8005c74:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	78fa      	ldrb	r2, [r7, #3]
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f007 f90a 	bl	800ce98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	4608      	mov	r0, r1
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	70fb      	strb	r3, [r7, #3]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	803b      	strh	r3, [r7, #0]
 8005cac:	4613      	mov	r3, r2
 8005cae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	da0e      	bge.n	8005cda <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	f003 0207 	and.w	r2, r3, #7
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	3310      	adds	r3, #16
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	4413      	add	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	705a      	strb	r2, [r3, #1]
 8005cd8:	e00e      	b.n	8005cf8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cda:	78fb      	ldrb	r3, [r7, #3]
 8005cdc:	f003 0207 	and.w	r2, r3, #7
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	4413      	add	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005d04:	883a      	ldrh	r2, [r7, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	78ba      	ldrb	r2, [r7, #2]
 8005d0e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d10:	78bb      	ldrb	r3, [r7, #2]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d102      	bne.n	8005d1c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_PCD_EP_Open+0x94>
 8005d26:	2302      	movs	r3, #2
 8005d28:	e00e      	b.n	8005d48 <HAL_PCD_EP_Open+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f004 fe53 	bl	800a9e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005d46:	7afb      	ldrb	r3, [r7, #11]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	da0e      	bge.n	8005d82 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	f003 0207 	and.w	r2, r3, #7
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	3310      	adds	r3, #16
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	4413      	add	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	705a      	strb	r2, [r3, #1]
 8005d80:	e00e      	b.n	8005da0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d82:	78fb      	ldrb	r3, [r7, #3]
 8005d84:	f003 0207 	and.w	r2, r3, #7
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	4413      	add	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_PCD_EP_Close+0x6a>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e00e      	b.n	8005dd8 <HAL_PCD_EP_Close+0x88>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68f9      	ldr	r1, [r7, #12]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f005 f9cb 	bl	800b164 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	607a      	str	r2, [r7, #4]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	460b      	mov	r3, r1
 8005dee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005df0:	7afb      	ldrb	r3, [r7, #11]
 8005df2:	f003 0207 	and.w	r2, r3, #7
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4413      	add	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2200      	movs	r2, #0
 8005e18:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e20:	7afb      	ldrb	r3, [r7, #11]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6979      	ldr	r1, [r7, #20]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f005 fb82 	bl	800b53c <USB_EPStartXfer>

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005e4e:	78fb      	ldrb	r3, [r7, #3]
 8005e50:	f003 0207 	and.w	r2, r3, #7
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	440b      	add	r3, r1
 8005e60:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005e64:	681b      	ldr	r3, [r3, #0]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	607a      	str	r2, [r7, #4]
 8005e7a:	603b      	str	r3, [r7, #0]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e80:	7afb      	ldrb	r3, [r7, #11]
 8005e82:	f003 0207 	and.w	r2, r3, #7
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	3310      	adds	r3, #16
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ebc:	7afb      	ldrb	r3, [r7, #11]
 8005ebe:	f003 0307 	and.w	r3, r3, #7
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6979      	ldr	r1, [r7, #20]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f005 fb34 	bl	800b53c <USB_EPStartXfer>

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	7912      	ldrb	r2, [r2, #4]
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d901      	bls.n	8005efc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e04c      	b.n	8005f96 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	da0e      	bge.n	8005f22 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	f003 0207 	and.w	r2, r3, #7
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	3310      	adds	r3, #16
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	4413      	add	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	705a      	strb	r2, [r3, #1]
 8005f20:	e00c      	b.n	8005f3c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f22:	78fa      	ldrb	r2, [r7, #3]
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	4413      	add	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_PCD_EP_SetStall+0x7e>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e01c      	b.n	8005f96 <HAL_PCD_EP_SetStall+0xb8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68f9      	ldr	r1, [r7, #12]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f006 fe97 	bl	800cc9e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	f003 0307 	and.w	r3, r3, #7
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d108      	bne.n	8005f8c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8005f84:	4619      	mov	r1, r3
 8005f86:	4610      	mov	r0, r2
 8005f88:	f006 ffbc 	bl	800cf04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005faa:	78fb      	ldrb	r3, [r7, #3]
 8005fac:	f003 030f 	and.w	r3, r3, #15
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	7912      	ldrb	r2, [r2, #4]
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d901      	bls.n	8005fbc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e040      	b.n	800603e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	da0e      	bge.n	8005fe2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	f003 0207 	and.w	r2, r3, #7
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	3310      	adds	r3, #16
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	705a      	strb	r2, [r3, #1]
 8005fe0:	e00e      	b.n	8006000 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	f003 0207 	and.w	r2, r3, #7
 8005fe8:	4613      	mov	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006006:	78fb      	ldrb	r3, [r7, #3]
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	b2da      	uxtb	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_PCD_EP_ClrStall+0x82>
 800601c:	2302      	movs	r3, #2
 800601e:	e00e      	b.n	800603e <HAL_PCD_EP_ClrStall+0xa0>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68f9      	ldr	r1, [r7, #12]
 800602e:	4618      	mov	r0, r3
 8006030:	f006 fe85 	bl	800cd3e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b096      	sub	sp, #88	@ 0x58
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800604e:	e3bb      	b.n	80067c8 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006058:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800605c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006060:	b2db      	uxtb	r3, r3
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800606a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800606e:	2b00      	cmp	r3, #0
 8006070:	f040 8175 	bne.w	800635e <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006074:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	d14e      	bne.n	800611e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29b      	uxth	r3, r3
 8006088:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800608c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006090:	81fb      	strh	r3, [r7, #14]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	89fb      	ldrh	r3, [r7, #14]
 8006098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800609c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3310      	adds	r3, #16
 80060a8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	461a      	mov	r2, r3
 80060b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	4413      	add	r3, r2
 80060be:	3302      	adds	r3, #2
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6812      	ldr	r2, [r2, #0]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80060d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80060d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d8:	695a      	ldr	r2, [r3, #20]
 80060da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	441a      	add	r2, r3
 80060e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80060e4:	2100      	movs	r1, #0
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f008 fd0d 	bl	800eb06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	7b5b      	ldrb	r3, [r3, #13]
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 8368 	beq.w	80067c8 <PCD_EP_ISR_Handler+0x782>
 80060f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f040 8363 	bne.w	80067c8 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	7b5b      	ldrb	r3, [r3, #13]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800610c:	b2da      	uxtb	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	735a      	strb	r2, [r3, #13]
 800611c:	e354      	b.n	80067c8 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006124:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006130:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006134:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006138:	2b00      	cmp	r3, #0
 800613a:	d034      	beq.n	80061a6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006144:	b29b      	uxth	r3, r3
 8006146:	461a      	mov	r2, r3
 8006148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	4413      	add	r3, r2
 8006150:	3306      	adds	r3, #6
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6812      	ldr	r2, [r2, #0]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006166:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8006172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006174:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006178:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800617a:	b29b      	uxth	r3, r3
 800617c:	f006 ff12 	bl	800cfa4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	b29a      	uxth	r2, r3
 8006188:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800618c:	4013      	ands	r3, r2
 800618e:	823b      	strh	r3, [r7, #16]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	8a3a      	ldrh	r2, [r7, #16]
 8006196:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800619a:	b292      	uxth	r2, r2
 800619c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f008 fc84 	bl	800eaac <HAL_PCD_SetupStageCallback>
 80061a4:	e310      	b.n	80067c8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80061a6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f280 830c 	bge.w	80067c8 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80061bc:	4013      	ands	r3, r2
 80061be:	83fb      	strh	r3, [r7, #30]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	8bfa      	ldrh	r2, [r7, #30]
 80061c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80061ca:	b292      	uxth	r2, r2
 80061cc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	4413      	add	r3, r2
 80061e2:	3306      	adds	r3, #6
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	6812      	ldr	r2, [r2, #0]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80061f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061f8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80061fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d019      	beq.n	8006236 <PCD_EP_ISR_Handler+0x1f0>
 8006202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d015      	beq.n	8006236 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006210:	6959      	ldr	r1, [r3, #20]
 8006212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006214:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006218:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800621a:	b29b      	uxth	r3, r3
 800621c:	f006 fec2 	bl	800cfa4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006222:	695a      	ldr	r2, [r3, #20]
 8006224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	441a      	add	r2, r3
 800622a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800622c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800622e:	2100      	movs	r1, #0
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f008 fc4d 	bl	800ead0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006240:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006244:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006248:	2b00      	cmp	r3, #0
 800624a:	f040 82bd 	bne.w	80067c8 <PCD_EP_ISR_Handler+0x782>
 800624e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006252:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006256:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800625a:	f000 82b5 	beq.w	80067c8 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800626c:	b29b      	uxth	r3, r3
 800626e:	461a      	mov	r2, r3
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	4413      	add	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800627c:	617b      	str	r3, [r7, #20]
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29b      	uxth	r3, r3
 8006284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006288:	b29a      	uxth	r2, r3
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	801a      	strh	r2, [r3, #0]
 800628e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b3e      	cmp	r3, #62	@ 0x3e
 8006294:	d91d      	bls.n	80062d2 <PCD_EP_ISR_Handler+0x28c>
 8006296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	647b      	str	r3, [r7, #68]	@ 0x44
 800629e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f003 031f 	and.w	r3, r3, #31
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d102      	bne.n	80062b0 <PCD_EP_ISR_Handler+0x26a>
 80062aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ac:	3b01      	subs	r3, #1
 80062ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	029b      	lsls	r3, r3, #10
 80062bc:	b29b      	uxth	r3, r3
 80062be:	4313      	orrs	r3, r2
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	801a      	strh	r2, [r3, #0]
 80062d0:	e026      	b.n	8006320 <PCD_EP_ISR_Handler+0x2da>
 80062d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10a      	bne.n	80062f0 <PCD_EP_ISR_Handler+0x2aa>
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	e017      	b.n	8006320 <PCD_EP_ISR_Handler+0x2da>
 80062f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	085b      	lsrs	r3, r3, #1
 80062f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80062f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <PCD_EP_ISR_Handler+0x2c4>
 8006304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006306:	3301      	adds	r3, #1
 8006308:	647b      	str	r3, [r7, #68]	@ 0x44
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29a      	uxth	r2, r3
 8006310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006312:	b29b      	uxth	r3, r3
 8006314:	029b      	lsls	r3, r3, #10
 8006316:	b29b      	uxth	r3, r3
 8006318:	4313      	orrs	r3, r2
 800631a:	b29a      	uxth	r2, r3
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29b      	uxth	r3, r3
 8006328:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800632c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006330:	827b      	strh	r3, [r7, #18]
 8006332:	8a7b      	ldrh	r3, [r7, #18]
 8006334:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006338:	827b      	strh	r3, [r7, #18]
 800633a:	8a7b      	ldrh	r3, [r7, #18]
 800633c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006340:	827b      	strh	r3, [r7, #18]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	8a7b      	ldrh	r3, [r7, #18]
 8006348:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800634c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006350:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006358:	b29b      	uxth	r3, r3
 800635a:	8013      	strh	r3, [r2, #0]
 800635c:	e234      	b.n	80067c8 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006372:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006376:	2b00      	cmp	r3, #0
 8006378:	f280 80fc 	bge.w	8006574 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	461a      	mov	r2, r3
 8006382:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29a      	uxth	r2, r3
 800638e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006392:	4013      	ands	r3, r2
 8006394:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	461a      	mov	r2, r3
 800639e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80063aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80063ae:	b292      	uxth	r2, r2
 80063b0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80063b2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80063b6:	4613      	mov	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	4413      	add	r3, r2
 80063c6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80063c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063ca:	7b1b      	ldrb	r3, [r3, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d125      	bne.n	800641c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063d8:	b29b      	uxth	r3, r3
 80063da:	461a      	mov	r2, r3
 80063dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	4413      	add	r3, r2
 80063e4:	3306      	adds	r3, #6
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	6812      	ldr	r2, [r2, #0]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063f8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80063fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 8092 	beq.w	800652a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800640c:	6959      	ldr	r1, [r3, #20]
 800640e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006410:	88da      	ldrh	r2, [r3, #6]
 8006412:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006416:	f006 fdc5 	bl	800cfa4 <USB_ReadPMA>
 800641a:	e086      	b.n	800652a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800641c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800641e:	78db      	ldrb	r3, [r3, #3]
 8006420:	2b02      	cmp	r3, #2
 8006422:	d10a      	bne.n	800643a <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006424:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006428:	461a      	mov	r2, r3
 800642a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f9d9 	bl	80067e4 <HAL_PCD_EP_DB_Receive>
 8006432:	4603      	mov	r3, r0
 8006434:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8006438:	e077      	b.n	800652a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006454:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	441a      	add	r2, r3
 8006466:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800646a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800646e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006472:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006476:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800647a:	b29b      	uxth	r3, r3
 800647c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 8006490:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d024      	beq.n	80064e2 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	4413      	add	r3, r2
 80064ac:	3302      	adds	r3, #2
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6812      	ldr	r2, [r2, #0]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064c0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80064c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d02e      	beq.n	800652a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064d2:	6959      	ldr	r1, [r3, #20]
 80064d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064d6:	891a      	ldrh	r2, [r3, #8]
 80064d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80064dc:	f006 fd62 	bl	800cfa4 <USB_ReadPMA>
 80064e0:	e023      	b.n	800652a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	4413      	add	r3, r2
 80064f6:	3306      	adds	r3, #6
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6812      	ldr	r2, [r2, #0]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800650a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800650e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006512:	2b00      	cmp	r3, #0
 8006514:	d009      	beq.n	800652a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800651c:	6959      	ldr	r1, [r3, #20]
 800651e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006520:	895a      	ldrh	r2, [r3, #10]
 8006522:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006526:	f006 fd3d 	bl	800cfa4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800652a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800652c:	69da      	ldr	r2, [r3, #28]
 800652e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006532:	441a      	add	r2, r3
 8006534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006536:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800653a:	695a      	ldr	r2, [r3, #20]
 800653c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006540:	441a      	add	r2, r3
 8006542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006544:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d005      	beq.n	800655a <PCD_EP_ISR_Handler+0x514>
 800654e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8006552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	429a      	cmp	r2, r3
 8006558:	d206      	bcs.n	8006568 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800655a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f008 fab5 	bl	800ead0 <HAL_PCD_DataOutStageCallback>
 8006566:	e005      	b.n	8006574 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800656e:	4618      	mov	r0, r3
 8006570:	f004 ffe4 	bl	800b53c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006574:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 8123 	beq.w	80067c8 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8006582:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	3310      	adds	r3, #16
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	4413      	add	r3, r2
 8006594:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80065ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80065c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80065d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065d4:	78db      	ldrb	r3, [r3, #3]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	f040 80a2 	bne.w	8006720 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80065dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065de:	2200      	movs	r2, #0
 80065e0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80065e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065e4:	7b1b      	ldrb	r3, [r3, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f000 8093 	beq.w	8006712 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80065ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80065f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d046      	beq.n	8006686 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d126      	bne.n	800664e <PCD_EP_ISR_Handler+0x608>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	627b      	str	r3, [r7, #36]	@ 0x24
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800660e:	b29b      	uxth	r3, r3
 8006610:	461a      	mov	r2, r3
 8006612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006614:	4413      	add	r3, r2
 8006616:	627b      	str	r3, [r7, #36]	@ 0x24
 8006618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	011a      	lsls	r2, r3, #4
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	4413      	add	r3, r2
 8006622:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006626:	623b      	str	r3, [r7, #32]
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	b29b      	uxth	r3, r3
 800662e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006632:	b29a      	uxth	r2, r3
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	801a      	strh	r2, [r3, #0]
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006646:	b29a      	uxth	r2, r3
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	801a      	strh	r2, [r3, #0]
 800664c:	e061      	b.n	8006712 <PCD_EP_ISR_Handler+0x6cc>
 800664e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006650:	785b      	ldrb	r3, [r3, #1]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d15d      	bne.n	8006712 <PCD_EP_ISR_Handler+0x6cc>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006664:	b29b      	uxth	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666a:	4413      	add	r3, r2
 800666c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800666e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	011a      	lsls	r2, r3, #4
 8006674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006676:	4413      	add	r3, r2
 8006678:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800667c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800667e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006680:	2200      	movs	r2, #0
 8006682:	801a      	strh	r2, [r3, #0]
 8006684:	e045      	b.n	8006712 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800668c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800668e:	785b      	ldrb	r3, [r3, #1]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d126      	bne.n	80066e2 <PCD_EP_ISR_Handler+0x69c>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	637b      	str	r3, [r7, #52]	@ 0x34
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a8:	4413      	add	r3, r2
 80066aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	011a      	lsls	r2, r3, #4
 80066b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b4:	4413      	add	r3, r2
 80066b6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80066bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066da:	b29a      	uxth	r2, r3
 80066dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066de:	801a      	strh	r2, [r3, #0]
 80066e0:	e017      	b.n	8006712 <PCD_EP_ISR_Handler+0x6cc>
 80066e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066e4:	785b      	ldrb	r3, [r3, #1]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d113      	bne.n	8006712 <PCD_EP_ISR_Handler+0x6cc>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	461a      	mov	r2, r3
 80066f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066f8:	4413      	add	r3, r2
 80066fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	011a      	lsls	r2, r3, #4
 8006702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006704:	4413      	add	r3, r2
 8006706:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800670a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800670c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670e:	2200      	movs	r2, #0
 8006710:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f008 f9f4 	bl	800eb06 <HAL_PCD_DataInStageCallback>
 800671e:	e053      	b.n	80067c8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006720:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006728:	2b00      	cmp	r3, #0
 800672a:	d146      	bne.n	80067ba <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006734:	b29b      	uxth	r3, r3
 8006736:	461a      	mov	r2, r3
 8006738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	4413      	add	r3, r2
 8006740:	3302      	adds	r3, #2
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6812      	ldr	r2, [r2, #0]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006754:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8006758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800675a:	699a      	ldr	r2, [r3, #24]
 800675c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006760:	429a      	cmp	r2, r3
 8006762:	d907      	bls.n	8006774 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8006764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006766:	699a      	ldr	r2, [r3, #24]
 8006768:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800676c:	1ad2      	subs	r2, r2, r3
 800676e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006770:	619a      	str	r2, [r3, #24]
 8006772:	e002      	b.n	800677a <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8006774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006776:	2200      	movs	r2, #0
 8006778:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800677a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d106      	bne.n	8006790 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f008 f9bc 	bl	800eb06 <HAL_PCD_DataInStageCallback>
 800678e:	e01b      	b.n	80067c8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006792:	695a      	ldr	r2, [r3, #20]
 8006794:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006798:	441a      	add	r2, r3
 800679a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800679c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800679e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067a0:	69da      	ldr	r2, [r3, #28]
 80067a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80067a6:	441a      	add	r2, r3
 80067a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067aa:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067b2:	4618      	mov	r0, r3
 80067b4:	f004 fec2 	bl	800b53c <USB_EPStartXfer>
 80067b8:	e006      	b.n	80067c8 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80067ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80067be:	461a      	mov	r2, r3
 80067c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f91b 	bl	80069fe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	b21b      	sxth	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f6ff ac3b 	blt.w	8006050 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3758      	adds	r7, #88	@ 0x58
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	4613      	mov	r3, r2
 80067f0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80067f2:	88fb      	ldrh	r3, [r7, #6]
 80067f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d07e      	beq.n	80068fa <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006804:	b29b      	uxth	r3, r3
 8006806:	461a      	mov	r2, r3
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	4413      	add	r3, r2
 8006810:	3302      	adds	r3, #2
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	6812      	ldr	r2, [r2, #0]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006824:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	699a      	ldr	r2, [r3, #24]
 800682a:	8b7b      	ldrh	r3, [r7, #26]
 800682c:	429a      	cmp	r2, r3
 800682e:	d306      	bcc.n	800683e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	699a      	ldr	r2, [r3, #24]
 8006834:	8b7b      	ldrh	r3, [r7, #26]
 8006836:	1ad2      	subs	r2, r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	619a      	str	r2, [r3, #24]
 800683c:	e002      	b.n	8006844 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2200      	movs	r2, #0
 8006842:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d123      	bne.n	8006894 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	b29b      	uxth	r3, r3
 800685e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006866:	833b      	strh	r3, [r7, #24]
 8006868:	8b3b      	ldrh	r3, [r7, #24]
 800686a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800686e:	833b      	strh	r3, [r7, #24]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	461a      	mov	r2, r3
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	441a      	add	r2, r3
 800687e:	8b3b      	ldrh	r3, [r7, #24]
 8006880:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006884:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800688c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006890:	b29b      	uxth	r3, r3
 8006892:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006894:	88fb      	ldrh	r3, [r7, #6]
 8006896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	d01f      	beq.n	80068de <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068b8:	82fb      	strh	r3, [r7, #22]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	441a      	add	r2, r3
 80068c8:	8afb      	ldrh	r3, [r7, #22]
 80068ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068da:	b29b      	uxth	r3, r3
 80068dc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80068de:	8b7b      	ldrh	r3, [r7, #26]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 8087 	beq.w	80069f4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	6959      	ldr	r1, [r3, #20]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	891a      	ldrh	r2, [r3, #8]
 80068f2:	8b7b      	ldrh	r3, [r7, #26]
 80068f4:	f006 fb56 	bl	800cfa4 <USB_ReadPMA>
 80068f8:	e07c      	b.n	80069f4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006902:	b29b      	uxth	r3, r3
 8006904:	461a      	mov	r2, r3
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	4413      	add	r3, r2
 800690e:	3306      	adds	r3, #6
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	6812      	ldr	r2, [r2, #0]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006922:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	699a      	ldr	r2, [r3, #24]
 8006928:	8b7b      	ldrh	r3, [r7, #26]
 800692a:	429a      	cmp	r2, r3
 800692c:	d306      	bcc.n	800693c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	8b7b      	ldrh	r3, [r7, #26]
 8006934:	1ad2      	subs	r2, r2, r3
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	619a      	str	r2, [r3, #24]
 800693a:	e002      	b.n	8006942 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2200      	movs	r2, #0
 8006940:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d123      	bne.n	8006992 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006964:	83fb      	strh	r3, [r7, #30]
 8006966:	8bfb      	ldrh	r3, [r7, #30]
 8006968:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800696c:	83fb      	strh	r3, [r7, #30]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	441a      	add	r2, r3
 800697c:	8bfb      	ldrh	r3, [r7, #30]
 800697e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006982:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800698a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800698e:	b29b      	uxth	r3, r3
 8006990:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006992:	88fb      	ldrh	r3, [r7, #6]
 8006994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006998:	2b00      	cmp	r3, #0
 800699a:	d11f      	bne.n	80069dc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	461a      	mov	r2, r3
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069b6:	83bb      	strh	r3, [r7, #28]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	441a      	add	r2, r3
 80069c6:	8bbb      	ldrh	r3, [r7, #28]
 80069c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069d8:	b29b      	uxth	r3, r3
 80069da:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80069dc:	8b7b      	ldrh	r3, [r7, #26]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d008      	beq.n	80069f4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	6959      	ldr	r1, [r3, #20]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	895a      	ldrh	r2, [r3, #10]
 80069ee:	8b7b      	ldrh	r3, [r7, #26]
 80069f0:	f006 fad8 	bl	800cfa4 <USB_ReadPMA>
    }
  }

  return count;
 80069f4:	8b7b      	ldrh	r3, [r7, #26]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3720      	adds	r7, #32
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b0a4      	sub	sp, #144	@ 0x90
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	60b9      	str	r1, [r7, #8]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006a0c:	88fb      	ldrh	r3, [r7, #6]
 8006a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 81dd 	beq.w	8006dd2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	461a      	mov	r2, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	00db      	lsls	r3, r3, #3
 8006a2a:	4413      	add	r3, r2
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a40:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	699a      	ldr	r2, [r3, #24]
 8006a48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d907      	bls.n	8006a60 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	699a      	ldr	r2, [r3, #24]
 8006a54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006a58:	1ad2      	subs	r2, r2, r3
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	619a      	str	r2, [r3, #24]
 8006a5e:	e002      	b.n	8006a66 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2200      	movs	r2, #0
 8006a64:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f040 80b9 	bne.w	8006be2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	785b      	ldrb	r3, [r3, #1]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d126      	bne.n	8006ac6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8c:	4413      	add	r3, r2
 8006a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	011a      	lsls	r2, r3, #4
 8006a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a98:	4413      	add	r3, r2
 8006a9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aae:	801a      	strh	r2, [r3, #0]
 8006ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac2:	801a      	strh	r2, [r3, #0]
 8006ac4:	e01a      	b.n	8006afc <HAL_PCD_EP_DB_Transmit+0xfe>
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	785b      	ldrb	r3, [r3, #1]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d116      	bne.n	8006afc <HAL_PCD_EP_DB_Transmit+0xfe>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	461a      	mov	r2, r3
 8006ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae2:	4413      	add	r3, r2
 8006ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	011a      	lsls	r2, r3, #4
 8006aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aee:	4413      	add	r3, r2
 8006af0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	2200      	movs	r2, #0
 8006afa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	785b      	ldrb	r3, [r3, #1]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d126      	bne.n	8006b58 <HAL_PCD_EP_DB_Transmit+0x15a>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	4413      	add	r3, r2
 8006b20:	61fb      	str	r3, [r7, #28]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	011a      	lsls	r2, r3, #4
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	801a      	strh	r2, [r3, #0]
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	801a      	strh	r2, [r3, #0]
 8006b56:	e017      	b.n	8006b88 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	785b      	ldrb	r3, [r3, #1]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d113      	bne.n	8006b88 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6e:	4413      	add	r3, r2
 8006b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	011a      	lsls	r2, r3, #4
 8006b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b80:	623b      	str	r3, [r7, #32]
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	2200      	movs	r2, #0
 8006b86:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f007 ffb9 	bl	800eb06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b94:	88fb      	ldrh	r3, [r7, #6]
 8006b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 82fc 	beq.w	8007198 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bba:	82fb      	strh	r3, [r7, #22]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	441a      	add	r2, r3
 8006bca:	8afb      	ldrh	r3, [r7, #22]
 8006bcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	8013      	strh	r3, [r2, #0]
 8006be0:	e2da      	b.n	8007198 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d021      	beq.n	8006c30 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c06:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	441a      	add	r2, r3
 8006c18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	f040 82ae 	bne.w	8007198 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	695a      	ldr	r2, [r3, #20]
 8006c40:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006c44:	441a      	add	r2, r3
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	69da      	ldr	r2, [r3, #28]
 8006c4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006c52:	441a      	add	r2, r3
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	6a1a      	ldr	r2, [r3, #32]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d30b      	bcc.n	8006c7c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	6a1a      	ldr	r2, [r3, #32]
 8006c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c74:	1ad2      	subs	r2, r2, r3
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	621a      	str	r2, [r3, #32]
 8006c7a:	e017      	b.n	8006cac <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d108      	bne.n	8006c96 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8006c84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006c88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006c94:	e00a      	b.n	8006cac <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d165      	bne.n	8006d80 <HAL_PCD_EP_DB_Transmit+0x382>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc8:	4413      	add	r3, r2
 8006cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	011a      	lsls	r2, r3, #4
 8006cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cea:	801a      	strh	r2, [r3, #0]
 8006cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cf0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cf2:	d91d      	bls.n	8006d30 <HAL_PCD_EP_DB_Transmit+0x332>
 8006cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cf8:	095b      	lsrs	r3, r3, #5
 8006cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <HAL_PCD_EP_DB_Transmit+0x310>
 8006d08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	029b      	lsls	r3, r3, #10
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2c:	801a      	strh	r2, [r3, #0]
 8006d2e:	e044      	b.n	8006dba <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006d30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10a      	bne.n	8006d4e <HAL_PCD_EP_DB_Transmit+0x350>
 8006d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	e035      	b.n	8006dba <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <HAL_PCD_EP_DB_Transmit+0x36a>
 8006d62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d64:	3301      	adds	r3, #1
 8006d66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	029b      	lsls	r3, r3, #10
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	4313      	orrs	r3, r2
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7c:	801a      	strh	r2, [r3, #0]
 8006d7e:	e01c      	b.n	8006dba <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	785b      	ldrb	r3, [r3, #1]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d118      	bne.n	8006dba <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	461a      	mov	r2, r3
 8006d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d9c:	4413      	add	r3, r2
 8006d9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	011a      	lsls	r2, r3, #4
 8006da6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006da8:	4413      	add	r3, r2
 8006daa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006dae:	643b      	str	r3, [r7, #64]	@ 0x40
 8006db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006db8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6818      	ldr	r0, [r3, #0]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	6959      	ldr	r1, [r3, #20]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	891a      	ldrh	r2, [r3, #8]
 8006dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	f006 f8a5 	bl	800cf1a <USB_WritePMA>
 8006dd0:	e1e2      	b.n	8007198 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	461a      	mov	r2, r3
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	4413      	add	r3, r2
 8006de6:	3306      	adds	r3, #6
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	6812      	ldr	r2, [r2, #0]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dfa:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	699a      	ldr	r2, [r3, #24]
 8006e02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d307      	bcc.n	8006e1a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	699a      	ldr	r2, [r3, #24]
 8006e0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006e12:	1ad2      	subs	r2, r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	619a      	str	r2, [r3, #24]
 8006e18:	e002      	b.n	8006e20 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f040 80c0 	bne.w	8006faa <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	785b      	ldrb	r3, [r3, #1]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d126      	bne.n	8006e80 <HAL_PCD_EP_DB_Transmit+0x482>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	461a      	mov	r2, r3
 8006e44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e46:	4413      	add	r3, r2
 8006e48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	011a      	lsls	r2, r3, #4
 8006e50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e52:	4413      	add	r3, r2
 8006e54:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e68:	801a      	strh	r2, [r3, #0]
 8006e6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e7c:	801a      	strh	r2, [r3, #0]
 8006e7e:	e01a      	b.n	8006eb6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	785b      	ldrb	r3, [r3, #1]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d116      	bne.n	8006eb6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e9c:	4413      	add	r3, r2
 8006e9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	011a      	lsls	r2, r3, #4
 8006ea6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006eae:	663b      	str	r3, [r7, #96]	@ 0x60
 8006eb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	785b      	ldrb	r3, [r3, #1]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d12b      	bne.n	8006f1c <HAL_PCD_EP_DB_Transmit+0x51e>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ed8:	4413      	add	r3, r2
 8006eda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	011a      	lsls	r2, r3, #4
 8006ee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006eea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006eee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f00:	801a      	strh	r2, [r3, #0]
 8006f02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f18:	801a      	strh	r2, [r3, #0]
 8006f1a:	e017      	b.n	8006f4c <HAL_PCD_EP_DB_Transmit+0x54e>
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	785b      	ldrb	r3, [r3, #1]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d113      	bne.n	8006f4c <HAL_PCD_EP_DB_Transmit+0x54e>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	461a      	mov	r2, r3
 8006f30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f32:	4413      	add	r3, r2
 8006f34:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	011a      	lsls	r2, r3, #4
 8006f3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f3e:	4413      	add	r3, r2
 8006f40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f44:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f48:	2200      	movs	r2, #0
 8006f4a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	4619      	mov	r1, r3
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f007 fdd7 	bl	800eb06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006f58:	88fb      	ldrh	r3, [r7, #6]
 8006f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f040 811a 	bne.w	8007198 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f7e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	441a      	add	r2, r3
 8006f90:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006f94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	8013      	strh	r3, [r2, #0]
 8006fa8:	e0f6      	b.n	8007198 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006faa:	88fb      	ldrh	r3, [r7, #6]
 8006fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d121      	bne.n	8006ff8 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fce:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	441a      	add	r2, r3
 8006fe0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006fe4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fe8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	f040 80ca 	bne.w	8007198 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	695a      	ldr	r2, [r3, #20]
 8007008:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800700c:	441a      	add	r2, r3
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	69da      	ldr	r2, [r3, #28]
 8007016:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800701a:	441a      	add	r2, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	6a1a      	ldr	r2, [r3, #32]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	429a      	cmp	r2, r3
 800702a:	d30b      	bcc.n	8007044 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	6a1a      	ldr	r2, [r3, #32]
 8007038:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800703c:	1ad2      	subs	r2, r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	621a      	str	r2, [r3, #32]
 8007042:	e017      	b.n	8007074 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d108      	bne.n	800705e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800704c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007050:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800705c:	e00a      	b.n	8007074 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2200      	movs	r2, #0
 800706a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	657b      	str	r3, [r7, #84]	@ 0x54
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	785b      	ldrb	r3, [r3, #1]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d165      	bne.n	800714e <HAL_PCD_EP_DB_Transmit+0x750>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007090:	b29b      	uxth	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007096:	4413      	add	r3, r2
 8007098:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	011a      	lsls	r2, r3, #4
 80070a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070a2:	4413      	add	r3, r2
 80070a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070b8:	801a      	strh	r2, [r3, #0]
 80070ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070be:	2b3e      	cmp	r3, #62	@ 0x3e
 80070c0:	d91d      	bls.n	80070fe <HAL_PCD_EP_DB_Transmit+0x700>
 80070c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070ce:	f003 031f 	and.w	r3, r3, #31
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d102      	bne.n	80070dc <HAL_PCD_EP_DB_Transmit+0x6de>
 80070d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070d8:	3b01      	subs	r3, #1
 80070da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	029b      	lsls	r3, r3, #10
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	4313      	orrs	r3, r2
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070fa:	801a      	strh	r2, [r3, #0]
 80070fc:	e041      	b.n	8007182 <HAL_PCD_EP_DB_Transmit+0x784>
 80070fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <HAL_PCD_EP_DB_Transmit+0x71e>
 8007106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007114:	b29a      	uxth	r2, r3
 8007116:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007118:	801a      	strh	r2, [r3, #0]
 800711a:	e032      	b.n	8007182 <HAL_PCD_EP_DB_Transmit+0x784>
 800711c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007120:	085b      	lsrs	r3, r3, #1
 8007122:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007124:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <HAL_PCD_EP_DB_Transmit+0x738>
 8007130:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007132:	3301      	adds	r3, #1
 8007134:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	b29a      	uxth	r2, r3
 800713c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800713e:	b29b      	uxth	r3, r3
 8007140:	029b      	lsls	r3, r3, #10
 8007142:	b29b      	uxth	r3, r3
 8007144:	4313      	orrs	r3, r2
 8007146:	b29a      	uxth	r2, r3
 8007148:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800714a:	801a      	strh	r2, [r3, #0]
 800714c:	e019      	b.n	8007182 <HAL_PCD_EP_DB_Transmit+0x784>
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	785b      	ldrb	r3, [r3, #1]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d115      	bne.n	8007182 <HAL_PCD_EP_DB_Transmit+0x784>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800715e:	b29b      	uxth	r3, r3
 8007160:	461a      	mov	r2, r3
 8007162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007164:	4413      	add	r3, r2
 8007166:	657b      	str	r3, [r7, #84]	@ 0x54
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	011a      	lsls	r2, r3, #4
 800716e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007170:	4413      	add	r3, r2
 8007172:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007176:	653b      	str	r3, [r7, #80]	@ 0x50
 8007178:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800717c:	b29a      	uxth	r2, r3
 800717e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007180:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	6959      	ldr	r1, [r3, #20]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	895a      	ldrh	r2, [r3, #10]
 800718e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007192:	b29b      	uxth	r3, r3
 8007194:	f005 fec1 	bl	800cf1a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071b2:	82bb      	strh	r3, [r7, #20]
 80071b4:	8abb      	ldrh	r3, [r7, #20]
 80071b6:	f083 0310 	eor.w	r3, r3, #16
 80071ba:	82bb      	strh	r3, [r7, #20]
 80071bc:	8abb      	ldrh	r3, [r7, #20]
 80071be:	f083 0320 	eor.w	r3, r3, #32
 80071c2:	82bb      	strh	r3, [r7, #20]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	461a      	mov	r2, r3
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	441a      	add	r2, r3
 80071d2:	8abb      	ldrh	r3, [r7, #20]
 80071d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3790      	adds	r7, #144	@ 0x90
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b087      	sub	sp, #28
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	607b      	str	r3, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	817b      	strh	r3, [r7, #10]
 8007200:	4613      	mov	r3, r2
 8007202:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007204:	897b      	ldrh	r3, [r7, #10]
 8007206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800720a:	b29b      	uxth	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00b      	beq.n	8007228 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007210:	897b      	ldrh	r3, [r7, #10]
 8007212:	f003 0207 	and.w	r2, r3, #7
 8007216:	4613      	mov	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	3310      	adds	r3, #16
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4413      	add	r3, r2
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	e009      	b.n	800723c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007228:	897a      	ldrh	r2, [r7, #10]
 800722a:	4613      	mov	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	4413      	add	r3, r2
 800723a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800723c:	893b      	ldrh	r3, [r7, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d107      	bne.n	8007252 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2200      	movs	r2, #0
 8007246:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	b29a      	uxth	r2, r3
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	80da      	strh	r2, [r3, #6]
 8007250:	e00b      	b.n	800726a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2201      	movs	r2, #1
 8007256:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	b29a      	uxth	r2, r3
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	0c1b      	lsrs	r3, r3, #16
 8007264:	b29a      	uxth	r2, r3
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	371c      	adds	r7, #28
 8007270:	46bd      	mov	sp, r7
 8007272:	bc80      	pop	{r7}
 8007274:	4770      	bx	lr

08007276 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8007276:	b480      	push	{r7}
 8007278:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 800727a:	bf20      	wfe
  __asm volatile( "nop" );
 800727c:	bf00      	nop
}
 800727e:	bf00      	nop
 8007280:	46bd      	mov	sp, r7
 8007282:	bc80      	pop	{r7}
 8007284:	4770      	bx	lr
	...

08007288 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007288:	b480      	push	{r7}
 800728a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800728c:	4b03      	ldr	r3, [pc, #12]	@ (800729c <HAL_PWR_EnableBkUpAccess+0x14>)
 800728e:	2201      	movs	r2, #1
 8007290:	601a      	str	r2, [r3, #0]
}
 8007292:	bf00      	nop
 8007294:	46bd      	mov	sp, r7
 8007296:	bc80      	pop	{r7}
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	420e0020 	.word	0x420e0020

080072a0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 80072ac:	4b13      	ldr	r3, [pc, #76]	@ (80072fc <HAL_PWR_EnterSTOPMode+0x5c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a12      	ldr	r2, [pc, #72]	@ (80072fc <HAL_PWR_EnterSTOPMode+0x5c>)
 80072b2:	f023 0302 	bic.w	r3, r3, #2
 80072b6:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 80072b8:	4b10      	ldr	r3, [pc, #64]	@ (80072fc <HAL_PWR_EnterSTOPMode+0x5c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f023 0201 	bic.w	r2, r3, #1
 80072c0:	490e      	ldr	r1, [pc, #56]	@ (80072fc <HAL_PWR_EnterSTOPMode+0x5c>)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80072c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007300 <HAL_PWR_EnterSTOPMode+0x60>)
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	4a0c      	ldr	r2, [pc, #48]	@ (8007300 <HAL_PWR_EnterSTOPMode+0x60>)
 80072ce:	f043 0304 	orr.w	r3, r3, #4
 80072d2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80072da:	bf30      	wfi
 80072dc:	e004      	b.n	80072e8 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80072de:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 80072e0:	f7ff ffc9 	bl	8007276 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 80072e4:	f7ff ffc7 	bl	8007276 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80072e8:	4b05      	ldr	r3, [pc, #20]	@ (8007300 <HAL_PWR_EnterSTOPMode+0x60>)
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	4a04      	ldr	r2, [pc, #16]	@ (8007300 <HAL_PWR_EnterSTOPMode+0x60>)
 80072ee:	f023 0304 	bic.w	r3, r3, #4
 80072f2:	6113      	str	r3, [r2, #16]
}
 80072f4:	bf00      	nop
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	40007000 	.word	0x40007000
 8007300:	e000ed00 	.word	0xe000ed00

08007304 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8007308:	4b06      	ldr	r3, [pc, #24]	@ (8007324 <HAL_PWR_PVD_IRQHandler+0x20>)
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d005      	beq.n	8007320 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8007314:	f000 f808 	bl	8007328 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8007318:	4b02      	ldr	r3, [pc, #8]	@ (8007324 <HAL_PWR_PVD_IRQHandler+0x20>)
 800731a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800731e:	615a      	str	r2, [r3, #20]
  }
}
 8007320:	bf00      	nop
 8007322:	bd80      	pop	{r7, pc}
 8007324:	40010400 	.word	0x40010400

08007328 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8007328:	b480      	push	{r7}
 800732a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800732c:	bf00      	nop
 800732e:	46bd      	mov	sp, r7
 8007330:	bc80      	pop	{r7}
 8007332:	4770      	bx	lr

08007334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e272      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 8087 	beq.w	8007462 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007354:	4b92      	ldr	r3, [pc, #584]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f003 030c 	and.w	r3, r3, #12
 800735c:	2b04      	cmp	r3, #4
 800735e:	d00c      	beq.n	800737a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007360:	4b8f      	ldr	r3, [pc, #572]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f003 030c 	and.w	r3, r3, #12
 8007368:	2b08      	cmp	r3, #8
 800736a:	d112      	bne.n	8007392 <HAL_RCC_OscConfig+0x5e>
 800736c:	4b8c      	ldr	r3, [pc, #560]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007378:	d10b      	bne.n	8007392 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800737a:	4b89      	ldr	r3, [pc, #548]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d06c      	beq.n	8007460 <HAL_RCC_OscConfig+0x12c>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d168      	bne.n	8007460 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e24c      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800739a:	d106      	bne.n	80073aa <HAL_RCC_OscConfig+0x76>
 800739c:	4b80      	ldr	r3, [pc, #512]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a7f      	ldr	r2, [pc, #508]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 80073a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	e02e      	b.n	8007408 <HAL_RCC_OscConfig+0xd4>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10c      	bne.n	80073cc <HAL_RCC_OscConfig+0x98>
 80073b2:	4b7b      	ldr	r3, [pc, #492]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a7a      	ldr	r2, [pc, #488]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 80073b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073bc:	6013      	str	r3, [r2, #0]
 80073be:	4b78      	ldr	r3, [pc, #480]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a77      	ldr	r2, [pc, #476]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 80073c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073c8:	6013      	str	r3, [r2, #0]
 80073ca:	e01d      	b.n	8007408 <HAL_RCC_OscConfig+0xd4>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073d4:	d10c      	bne.n	80073f0 <HAL_RCC_OscConfig+0xbc>
 80073d6:	4b72      	ldr	r3, [pc, #456]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a71      	ldr	r2, [pc, #452]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 80073dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	4b6f      	ldr	r3, [pc, #444]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a6e      	ldr	r2, [pc, #440]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 80073e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	e00b      	b.n	8007408 <HAL_RCC_OscConfig+0xd4>
 80073f0:	4b6b      	ldr	r3, [pc, #428]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a6a      	ldr	r2, [pc, #424]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 80073f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	4b68      	ldr	r3, [pc, #416]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a67      	ldr	r2, [pc, #412]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 8007402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007406:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d013      	beq.n	8007438 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007410:	f7fc fcf6 	bl	8003e00 <HAL_GetTick>
 8007414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007416:	e008      	b.n	800742a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007418:	f7fc fcf2 	bl	8003e00 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b64      	cmp	r3, #100	@ 0x64
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e200      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800742a:	4b5d      	ldr	r3, [pc, #372]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d0f0      	beq.n	8007418 <HAL_RCC_OscConfig+0xe4>
 8007436:	e014      	b.n	8007462 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007438:	f7fc fce2 	bl	8003e00 <HAL_GetTick>
 800743c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800743e:	e008      	b.n	8007452 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007440:	f7fc fcde 	bl	8003e00 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b64      	cmp	r3, #100	@ 0x64
 800744c:	d901      	bls.n	8007452 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e1ec      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007452:	4b53      	ldr	r3, [pc, #332]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1f0      	bne.n	8007440 <HAL_RCC_OscConfig+0x10c>
 800745e:	e000      	b.n	8007462 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d063      	beq.n	8007536 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800746e:	4b4c      	ldr	r3, [pc, #304]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f003 030c 	and.w	r3, r3, #12
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00b      	beq.n	8007492 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800747a:	4b49      	ldr	r3, [pc, #292]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f003 030c 	and.w	r3, r3, #12
 8007482:	2b08      	cmp	r3, #8
 8007484:	d11c      	bne.n	80074c0 <HAL_RCC_OscConfig+0x18c>
 8007486:	4b46      	ldr	r3, [pc, #280]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d116      	bne.n	80074c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007492:	4b43      	ldr	r3, [pc, #268]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d005      	beq.n	80074aa <HAL_RCC_OscConfig+0x176>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d001      	beq.n	80074aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e1c0      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074aa:	4b3d      	ldr	r3, [pc, #244]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	00db      	lsls	r3, r3, #3
 80074b8:	4939      	ldr	r1, [pc, #228]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074be:	e03a      	b.n	8007536 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d020      	beq.n	800750a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074c8:	4b36      	ldr	r3, [pc, #216]	@ (80075a4 <HAL_RCC_OscConfig+0x270>)
 80074ca:	2201      	movs	r2, #1
 80074cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ce:	f7fc fc97 	bl	8003e00 <HAL_GetTick>
 80074d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074d4:	e008      	b.n	80074e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074d6:	f7fc fc93 	bl	8003e00 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d901      	bls.n	80074e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e1a1      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074e8:	4b2d      	ldr	r3, [pc, #180]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d0f0      	beq.n	80074d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074f4:	4b2a      	ldr	r3, [pc, #168]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	4927      	ldr	r1, [pc, #156]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 8007504:	4313      	orrs	r3, r2
 8007506:	600b      	str	r3, [r1, #0]
 8007508:	e015      	b.n	8007536 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800750a:	4b26      	ldr	r3, [pc, #152]	@ (80075a4 <HAL_RCC_OscConfig+0x270>)
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007510:	f7fc fc76 	bl	8003e00 <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007516:	e008      	b.n	800752a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007518:	f7fc fc72 	bl	8003e00 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d901      	bls.n	800752a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e180      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800752a:	4b1d      	ldr	r3, [pc, #116]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1f0      	bne.n	8007518 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0308 	and.w	r3, r3, #8
 800753e:	2b00      	cmp	r3, #0
 8007540:	d03a      	beq.n	80075b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d019      	beq.n	800757e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800754a:	4b17      	ldr	r3, [pc, #92]	@ (80075a8 <HAL_RCC_OscConfig+0x274>)
 800754c:	2201      	movs	r2, #1
 800754e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007550:	f7fc fc56 	bl	8003e00 <HAL_GetTick>
 8007554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007556:	e008      	b.n	800756a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007558:	f7fc fc52 	bl	8003e00 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	2b02      	cmp	r3, #2
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e160      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800756a:	4b0d      	ldr	r3, [pc, #52]	@ (80075a0 <HAL_RCC_OscConfig+0x26c>)
 800756c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0f0      	beq.n	8007558 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007576:	2001      	movs	r0, #1
 8007578:	f000 fad0 	bl	8007b1c <RCC_Delay>
 800757c:	e01c      	b.n	80075b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800757e:	4b0a      	ldr	r3, [pc, #40]	@ (80075a8 <HAL_RCC_OscConfig+0x274>)
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007584:	f7fc fc3c 	bl	8003e00 <HAL_GetTick>
 8007588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800758a:	e00f      	b.n	80075ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800758c:	f7fc fc38 	bl	8003e00 <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	2b02      	cmp	r3, #2
 8007598:	d908      	bls.n	80075ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e146      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>
 800759e:	bf00      	nop
 80075a0:	40021000 	.word	0x40021000
 80075a4:	42420000 	.word	0x42420000
 80075a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075ac:	4b92      	ldr	r3, [pc, #584]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 80075ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1e9      	bne.n	800758c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0304 	and.w	r3, r3, #4
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 80a6 	beq.w	8007712 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075c6:	2300      	movs	r3, #0
 80075c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075ca:	4b8b      	ldr	r3, [pc, #556]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10d      	bne.n	80075f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075d6:	4b88      	ldr	r3, [pc, #544]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	4a87      	ldr	r2, [pc, #540]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 80075dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075e0:	61d3      	str	r3, [r2, #28]
 80075e2:	4b85      	ldr	r3, [pc, #532]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075ea:	60bb      	str	r3, [r7, #8]
 80075ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075ee:	2301      	movs	r3, #1
 80075f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075f2:	4b82      	ldr	r3, [pc, #520]	@ (80077fc <HAL_RCC_OscConfig+0x4c8>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d118      	bne.n	8007630 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075fe:	4b7f      	ldr	r3, [pc, #508]	@ (80077fc <HAL_RCC_OscConfig+0x4c8>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a7e      	ldr	r2, [pc, #504]	@ (80077fc <HAL_RCC_OscConfig+0x4c8>)
 8007604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800760a:	f7fc fbf9 	bl	8003e00 <HAL_GetTick>
 800760e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007610:	e008      	b.n	8007624 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007612:	f7fc fbf5 	bl	8003e00 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b64      	cmp	r3, #100	@ 0x64
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e103      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007624:	4b75      	ldr	r3, [pc, #468]	@ (80077fc <HAL_RCC_OscConfig+0x4c8>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0f0      	beq.n	8007612 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d106      	bne.n	8007646 <HAL_RCC_OscConfig+0x312>
 8007638:	4b6f      	ldr	r3, [pc, #444]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 800763a:	6a1b      	ldr	r3, [r3, #32]
 800763c:	4a6e      	ldr	r2, [pc, #440]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 800763e:	f043 0301 	orr.w	r3, r3, #1
 8007642:	6213      	str	r3, [r2, #32]
 8007644:	e02d      	b.n	80076a2 <HAL_RCC_OscConfig+0x36e>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10c      	bne.n	8007668 <HAL_RCC_OscConfig+0x334>
 800764e:	4b6a      	ldr	r3, [pc, #424]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	4a69      	ldr	r2, [pc, #420]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 8007654:	f023 0301 	bic.w	r3, r3, #1
 8007658:	6213      	str	r3, [r2, #32]
 800765a:	4b67      	ldr	r3, [pc, #412]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	4a66      	ldr	r2, [pc, #408]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 8007660:	f023 0304 	bic.w	r3, r3, #4
 8007664:	6213      	str	r3, [r2, #32]
 8007666:	e01c      	b.n	80076a2 <HAL_RCC_OscConfig+0x36e>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	2b05      	cmp	r3, #5
 800766e:	d10c      	bne.n	800768a <HAL_RCC_OscConfig+0x356>
 8007670:	4b61      	ldr	r3, [pc, #388]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	4a60      	ldr	r2, [pc, #384]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 8007676:	f043 0304 	orr.w	r3, r3, #4
 800767a:	6213      	str	r3, [r2, #32]
 800767c:	4b5e      	ldr	r3, [pc, #376]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	4a5d      	ldr	r2, [pc, #372]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 8007682:	f043 0301 	orr.w	r3, r3, #1
 8007686:	6213      	str	r3, [r2, #32]
 8007688:	e00b      	b.n	80076a2 <HAL_RCC_OscConfig+0x36e>
 800768a:	4b5b      	ldr	r3, [pc, #364]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	4a5a      	ldr	r2, [pc, #360]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 8007690:	f023 0301 	bic.w	r3, r3, #1
 8007694:	6213      	str	r3, [r2, #32]
 8007696:	4b58      	ldr	r3, [pc, #352]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	4a57      	ldr	r2, [pc, #348]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 800769c:	f023 0304 	bic.w	r3, r3, #4
 80076a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d015      	beq.n	80076d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076aa:	f7fc fba9 	bl	8003e00 <HAL_GetTick>
 80076ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076b0:	e00a      	b.n	80076c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076b2:	f7fc fba5 	bl	8003e00 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d901      	bls.n	80076c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e0b1      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076c8:	4b4b      	ldr	r3, [pc, #300]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 80076ca:	6a1b      	ldr	r3, [r3, #32]
 80076cc:	f003 0302 	and.w	r3, r3, #2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0ee      	beq.n	80076b2 <HAL_RCC_OscConfig+0x37e>
 80076d4:	e014      	b.n	8007700 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076d6:	f7fc fb93 	bl	8003e00 <HAL_GetTick>
 80076da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076dc:	e00a      	b.n	80076f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076de:	f7fc fb8f 	bl	8003e00 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d901      	bls.n	80076f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e09b      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076f4:	4b40      	ldr	r3, [pc, #256]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 80076f6:	6a1b      	ldr	r3, [r3, #32]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1ee      	bne.n	80076de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d105      	bne.n	8007712 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007706:	4b3c      	ldr	r3, [pc, #240]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	4a3b      	ldr	r2, [pc, #236]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 800770c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007710:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 8087 	beq.w	800782a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800771c:	4b36      	ldr	r3, [pc, #216]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f003 030c 	and.w	r3, r3, #12
 8007724:	2b08      	cmp	r3, #8
 8007726:	d061      	beq.n	80077ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	69db      	ldr	r3, [r3, #28]
 800772c:	2b02      	cmp	r3, #2
 800772e:	d146      	bne.n	80077be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007730:	4b33      	ldr	r3, [pc, #204]	@ (8007800 <HAL_RCC_OscConfig+0x4cc>)
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007736:	f7fc fb63 	bl	8003e00 <HAL_GetTick>
 800773a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800773c:	e008      	b.n	8007750 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800773e:	f7fc fb5f 	bl	8003e00 <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	2b02      	cmp	r3, #2
 800774a:	d901      	bls.n	8007750 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e06d      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007750:	4b29      	ldr	r3, [pc, #164]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1f0      	bne.n	800773e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007764:	d108      	bne.n	8007778 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007766:	4b24      	ldr	r3, [pc, #144]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	4921      	ldr	r1, [pc, #132]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 8007774:	4313      	orrs	r3, r2
 8007776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007778:	4b1f      	ldr	r3, [pc, #124]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a19      	ldr	r1, [r3, #32]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007788:	430b      	orrs	r3, r1
 800778a:	491b      	ldr	r1, [pc, #108]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 800778c:	4313      	orrs	r3, r2
 800778e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007790:	4b1b      	ldr	r3, [pc, #108]	@ (8007800 <HAL_RCC_OscConfig+0x4cc>)
 8007792:	2201      	movs	r2, #1
 8007794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007796:	f7fc fb33 	bl	8003e00 <HAL_GetTick>
 800779a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800779c:	e008      	b.n	80077b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800779e:	f7fc fb2f 	bl	8003e00 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d901      	bls.n	80077b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e03d      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80077b0:	4b11      	ldr	r3, [pc, #68]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d0f0      	beq.n	800779e <HAL_RCC_OscConfig+0x46a>
 80077bc:	e035      	b.n	800782a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077be:	4b10      	ldr	r3, [pc, #64]	@ (8007800 <HAL_RCC_OscConfig+0x4cc>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077c4:	f7fc fb1c 	bl	8003e00 <HAL_GetTick>
 80077c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80077ca:	e008      	b.n	80077de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077cc:	f7fc fb18 	bl	8003e00 <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d901      	bls.n	80077de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e026      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80077de:	4b06      	ldr	r3, [pc, #24]	@ (80077f8 <HAL_RCC_OscConfig+0x4c4>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1f0      	bne.n	80077cc <HAL_RCC_OscConfig+0x498>
 80077ea:	e01e      	b.n	800782a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d107      	bne.n	8007804 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e019      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>
 80077f8:	40021000 	.word	0x40021000
 80077fc:	40007000 	.word	0x40007000
 8007800:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007804:	4b0b      	ldr	r3, [pc, #44]	@ (8007834 <HAL_RCC_OscConfig+0x500>)
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	429a      	cmp	r2, r3
 8007816:	d106      	bne.n	8007826 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007822:	429a      	cmp	r2, r3
 8007824:	d001      	beq.n	800782a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	40021000 	.word	0x40021000

08007838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e0d0      	b.n	80079ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800784c:	4b6a      	ldr	r3, [pc, #424]	@ (80079f8 <HAL_RCC_ClockConfig+0x1c0>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0307 	and.w	r3, r3, #7
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d910      	bls.n	800787c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800785a:	4b67      	ldr	r3, [pc, #412]	@ (80079f8 <HAL_RCC_ClockConfig+0x1c0>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f023 0207 	bic.w	r2, r3, #7
 8007862:	4965      	ldr	r1, [pc, #404]	@ (80079f8 <HAL_RCC_ClockConfig+0x1c0>)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	4313      	orrs	r3, r2
 8007868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800786a:	4b63      	ldr	r3, [pc, #396]	@ (80079f8 <HAL_RCC_ClockConfig+0x1c0>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0307 	and.w	r3, r3, #7
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	429a      	cmp	r2, r3
 8007876:	d001      	beq.n	800787c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e0b8      	b.n	80079ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d020      	beq.n	80078ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007894:	4b59      	ldr	r3, [pc, #356]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	4a58      	ldr	r2, [pc, #352]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 800789a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800789e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0308 	and.w	r3, r3, #8
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d005      	beq.n	80078b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078ac:	4b53      	ldr	r3, [pc, #332]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	4a52      	ldr	r2, [pc, #328]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 80078b2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80078b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078b8:	4b50      	ldr	r3, [pc, #320]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	494d      	ldr	r1, [pc, #308]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d040      	beq.n	8007958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d107      	bne.n	80078ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078de:	4b47      	ldr	r3, [pc, #284]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d115      	bne.n	8007916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e07f      	b.n	80079ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d107      	bne.n	8007906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078f6:	4b41      	ldr	r3, [pc, #260]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d109      	bne.n	8007916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e073      	b.n	80079ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007906:	4b3d      	ldr	r3, [pc, #244]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e06b      	b.n	80079ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007916:	4b39      	ldr	r3, [pc, #228]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f023 0203 	bic.w	r2, r3, #3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	4936      	ldr	r1, [pc, #216]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 8007924:	4313      	orrs	r3, r2
 8007926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007928:	f7fc fa6a 	bl	8003e00 <HAL_GetTick>
 800792c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800792e:	e00a      	b.n	8007946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007930:	f7fc fa66 	bl	8003e00 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800793e:	4293      	cmp	r3, r2
 8007940:	d901      	bls.n	8007946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e053      	b.n	80079ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007946:	4b2d      	ldr	r3, [pc, #180]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f003 020c 	and.w	r2, r3, #12
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	429a      	cmp	r2, r3
 8007956:	d1eb      	bne.n	8007930 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007958:	4b27      	ldr	r3, [pc, #156]	@ (80079f8 <HAL_RCC_ClockConfig+0x1c0>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0307 	and.w	r3, r3, #7
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	d210      	bcs.n	8007988 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007966:	4b24      	ldr	r3, [pc, #144]	@ (80079f8 <HAL_RCC_ClockConfig+0x1c0>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f023 0207 	bic.w	r2, r3, #7
 800796e:	4922      	ldr	r1, [pc, #136]	@ (80079f8 <HAL_RCC_ClockConfig+0x1c0>)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	4313      	orrs	r3, r2
 8007974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007976:	4b20      	ldr	r3, [pc, #128]	@ (80079f8 <HAL_RCC_ClockConfig+0x1c0>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0307 	and.w	r3, r3, #7
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d001      	beq.n	8007988 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e032      	b.n	80079ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	d008      	beq.n	80079a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007994:	4b19      	ldr	r3, [pc, #100]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	4916      	ldr	r1, [pc, #88]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0308 	and.w	r3, r3, #8
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d009      	beq.n	80079c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80079b2:	4b12      	ldr	r3, [pc, #72]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	490e      	ldr	r1, [pc, #56]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80079c6:	f000 f821 	bl	8007a0c <HAL_RCC_GetSysClockFreq>
 80079ca:	4602      	mov	r2, r0
 80079cc:	4b0b      	ldr	r3, [pc, #44]	@ (80079fc <HAL_RCC_ClockConfig+0x1c4>)
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	091b      	lsrs	r3, r3, #4
 80079d2:	f003 030f 	and.w	r3, r3, #15
 80079d6:	490a      	ldr	r1, [pc, #40]	@ (8007a00 <HAL_RCC_ClockConfig+0x1c8>)
 80079d8:	5ccb      	ldrb	r3, [r1, r3]
 80079da:	fa22 f303 	lsr.w	r3, r2, r3
 80079de:	4a09      	ldr	r2, [pc, #36]	@ (8007a04 <HAL_RCC_ClockConfig+0x1cc>)
 80079e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80079e2:	4b09      	ldr	r3, [pc, #36]	@ (8007a08 <HAL_RCC_ClockConfig+0x1d0>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fc f9c8 	bl	8003d7c <HAL_InitTick>

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	40022000 	.word	0x40022000
 80079fc:	40021000 	.word	0x40021000
 8007a00:	08012c8c 	.word	0x08012c8c
 8007a04:	20000000 	.word	0x20000000
 8007a08:	20000004 	.word	0x20000004

08007a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	2300      	movs	r3, #0
 8007a18:	60bb      	str	r3, [r7, #8]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	617b      	str	r3, [r7, #20]
 8007a1e:	2300      	movs	r3, #0
 8007a20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007a26:	4b1e      	ldr	r3, [pc, #120]	@ (8007aa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f003 030c 	and.w	r3, r3, #12
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	d002      	beq.n	8007a3c <HAL_RCC_GetSysClockFreq+0x30>
 8007a36:	2b08      	cmp	r3, #8
 8007a38:	d003      	beq.n	8007a42 <HAL_RCC_GetSysClockFreq+0x36>
 8007a3a:	e027      	b.n	8007a8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007a3c:	4b19      	ldr	r3, [pc, #100]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8007a3e:	613b      	str	r3, [r7, #16]
      break;
 8007a40:	e027      	b.n	8007a92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	0c9b      	lsrs	r3, r3, #18
 8007a46:	f003 030f 	and.w	r3, r3, #15
 8007a4a:	4a17      	ldr	r2, [pc, #92]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007a4c:	5cd3      	ldrb	r3, [r2, r3]
 8007a4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d010      	beq.n	8007a7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007a5a:	4b11      	ldr	r3, [pc, #68]	@ (8007aa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	0c5b      	lsrs	r3, r3, #17
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	4a11      	ldr	r2, [pc, #68]	@ (8007aac <HAL_RCC_GetSysClockFreq+0xa0>)
 8007a66:	5cd3      	ldrb	r3, [r2, r3]
 8007a68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8007a6e:	fb03 f202 	mul.w	r2, r3, r2
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a78:	617b      	str	r3, [r7, #20]
 8007a7a:	e004      	b.n	8007a86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007a80:	fb02 f303 	mul.w	r3, r2, r3
 8007a84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	613b      	str	r3, [r7, #16]
      break;
 8007a8a:	e002      	b.n	8007a92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007a8c:	4b09      	ldr	r3, [pc, #36]	@ (8007ab4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8007a8e:	613b      	str	r3, [r7, #16]
      break;
 8007a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a92:	693b      	ldr	r3, [r7, #16]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	371c      	adds	r7, #28
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bc80      	pop	{r7}
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	40021000 	.word	0x40021000
 8007aa4:	00f42400 	.word	0x00f42400
 8007aa8:	08012ca4 	.word	0x08012ca4
 8007aac:	08012cb4 	.word	0x08012cb4
 8007ab0:	003d0900 	.word	0x003d0900
 8007ab4:	007a1200 	.word	0x007a1200

08007ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007abc:	4b02      	ldr	r3, [pc, #8]	@ (8007ac8 <HAL_RCC_GetHCLKFreq+0x10>)
 8007abe:	681b      	ldr	r3, [r3, #0]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bc80      	pop	{r7}
 8007ac6:	4770      	bx	lr
 8007ac8:	20000000 	.word	0x20000000

08007acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ad0:	f7ff fff2 	bl	8007ab8 <HAL_RCC_GetHCLKFreq>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	4b05      	ldr	r3, [pc, #20]	@ (8007aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	0a1b      	lsrs	r3, r3, #8
 8007adc:	f003 0307 	and.w	r3, r3, #7
 8007ae0:	4903      	ldr	r1, [pc, #12]	@ (8007af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ae2:	5ccb      	ldrb	r3, [r1, r3]
 8007ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	40021000 	.word	0x40021000
 8007af0:	08012c9c 	.word	0x08012c9c

08007af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007af8:	f7ff ffde 	bl	8007ab8 <HAL_RCC_GetHCLKFreq>
 8007afc:	4602      	mov	r2, r0
 8007afe:	4b05      	ldr	r3, [pc, #20]	@ (8007b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	0adb      	lsrs	r3, r3, #11
 8007b04:	f003 0307 	and.w	r3, r3, #7
 8007b08:	4903      	ldr	r1, [pc, #12]	@ (8007b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b0a:	5ccb      	ldrb	r3, [r1, r3]
 8007b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	40021000 	.word	0x40021000
 8007b18:	08012c9c 	.word	0x08012c9c

08007b1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007b24:	4b0a      	ldr	r3, [pc, #40]	@ (8007b50 <RCC_Delay+0x34>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a0a      	ldr	r2, [pc, #40]	@ (8007b54 <RCC_Delay+0x38>)
 8007b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2e:	0a5b      	lsrs	r3, r3, #9
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	fb02 f303 	mul.w	r3, r2, r3
 8007b36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007b38:	bf00      	nop
  }
  while (Delay --);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	1e5a      	subs	r2, r3, #1
 8007b3e:	60fa      	str	r2, [r7, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1f9      	bne.n	8007b38 <RCC_Delay+0x1c>
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bc80      	pop	{r7}
 8007b4e:	4770      	bx	lr
 8007b50:	20000000 	.word	0x20000000
 8007b54:	10624dd3 	.word	0x10624dd3

08007b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	613b      	str	r3, [r7, #16]
 8007b64:	2300      	movs	r3, #0
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d07d      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007b74:	2300      	movs	r3, #0
 8007b76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b78:	4b4f      	ldr	r3, [pc, #316]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10d      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b84:	4b4c      	ldr	r3, [pc, #304]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	4a4b      	ldr	r2, [pc, #300]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b8e:	61d3      	str	r3, [r2, #28]
 8007b90:	4b49      	ldr	r3, [pc, #292]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b92:	69db      	ldr	r3, [r3, #28]
 8007b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b98:	60bb      	str	r3, [r7, #8]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ba0:	4b46      	ldr	r3, [pc, #280]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d118      	bne.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bac:	4b43      	ldr	r3, [pc, #268]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a42      	ldr	r2, [pc, #264]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bb8:	f7fc f922 	bl	8003e00 <HAL_GetTick>
 8007bbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bbe:	e008      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bc0:	f7fc f91e 	bl	8003e00 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	2b64      	cmp	r3, #100	@ 0x64
 8007bcc:	d901      	bls.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e06d      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0f0      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007bde:	4b36      	ldr	r3, [pc, #216]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007be6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d02e      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d027      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c06:	4b2e      	ldr	r3, [pc, #184]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007c08:	2201      	movs	r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007c12:	4a29      	ldr	r2, [pc, #164]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d014      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c22:	f7fc f8ed 	bl	8003e00 <HAL_GetTick>
 8007c26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c28:	e00a      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c2a:	f7fc f8e9 	bl	8003e00 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d901      	bls.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e036      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c40:	4b1d      	ldr	r3, [pc, #116]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d0ee      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	4917      	ldr	r1, [pc, #92]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d105      	bne.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c64:	4b14      	ldr	r3, [pc, #80]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	4a13      	ldr	r2, [pc, #76]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d008      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	490b      	ldr	r1, [pc, #44]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0310 	and.w	r3, r3, #16
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d008      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c9a:	4b07      	ldr	r3, [pc, #28]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	4904      	ldr	r1, [pc, #16]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	40021000 	.word	0x40021000
 8007cbc:	40007000 	.word	0x40007000
 8007cc0:	42420440 	.word	0x42420440

08007cc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61fb      	str	r3, [r7, #28]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b10      	cmp	r3, #16
 8007ce4:	d00a      	beq.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2b10      	cmp	r3, #16
 8007cea:	f200 8089 	bhi.w	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d045      	beq.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d074      	beq.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007cfa:	e081      	b.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 8007cfc:	4b45      	ldr	r3, [pc, #276]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007d02:	4b44      	ldr	r3, [pc, #272]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d07a      	beq.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	0c9b      	lsrs	r3, r3, #18
 8007d12:	f003 030f 	and.w	r3, r3, #15
 8007d16:	4a40      	ldr	r2, [pc, #256]	@ (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007d18:	5cd3      	ldrb	r3, [r2, r3]
 8007d1a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d015      	beq.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007d26:	4b3b      	ldr	r3, [pc, #236]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	0c5b      	lsrs	r3, r3, #17
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	4a3a      	ldr	r2, [pc, #232]	@ (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8007d32:	5cd3      	ldrb	r3, [r2, r3]
 8007d34:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00d      	beq.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007d40:	4a37      	ldr	r2, [pc, #220]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	fb02 f303 	mul.w	r3, r2, r3
 8007d4e:	61fb      	str	r3, [r7, #28]
 8007d50:	e004      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	4a33      	ldr	r2, [pc, #204]	@ (8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8007d56:	fb02 f303 	mul.w	r3, r2, r3
 8007d5a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d68:	d102      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	61bb      	str	r3, [r7, #24]
      break;
 8007d6e:	e049      	b.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	4a2c      	ldr	r2, [pc, #176]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8007d76:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7a:	085b      	lsrs	r3, r3, #1
 8007d7c:	61bb      	str	r3, [r7, #24]
      break;
 8007d7e:	e041      	b.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 8007d80:	4b24      	ldr	r3, [pc, #144]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d90:	d108      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d003      	beq.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8007d9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007da0:	61bb      	str	r3, [r7, #24]
 8007da2:	e01e      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007daa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dae:	d109      	bne.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007db0:	4b18      	ldr	r3, [pc, #96]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db4:	f003 0302 	and.w	r3, r3, #2
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8007dbc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8007dc0:	61bb      	str	r3, [r7, #24]
 8007dc2:	e00e      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dce:	d11b      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8007dd0:	4b10      	ldr	r3, [pc, #64]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d015      	beq.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 8007ddc:	4b13      	ldr	r3, [pc, #76]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007dde:	61bb      	str	r3, [r7, #24]
      break;
 8007de0:	e012      	b.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8007de2:	e011      	b.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007de4:	f7ff fe86 	bl	8007af4 <HAL_RCC_GetPCLK2Freq>
 8007de8:	4602      	mov	r2, r0
 8007dea:	4b0a      	ldr	r3, [pc, #40]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	0b9b      	lsrs	r3, r3, #14
 8007df0:	f003 0303 	and.w	r3, r3, #3
 8007df4:	3301      	adds	r3, #1
 8007df6:	005b      	lsls	r3, r3, #1
 8007df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dfc:	61bb      	str	r3, [r7, #24]
      break;
 8007dfe:	e004      	b.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8007e00:	bf00      	nop
 8007e02:	e002      	b.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8007e04:	bf00      	nop
 8007e06:	e000      	b.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8007e08:	bf00      	nop
    }
  }
  return (frequency);
 8007e0a:	69bb      	ldr	r3, [r7, #24]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3720      	adds	r7, #32
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	40021000 	.word	0x40021000
 8007e18:	08012cb8 	.word	0x08012cb8
 8007e1c:	08012cc8 	.word	0x08012cc8
 8007e20:	00f42400 	.word	0x00f42400
 8007e24:	003d0900 	.word	0x003d0900
 8007e28:	aaaaaaab 	.word	0xaaaaaaab
 8007e2c:	0001e848 	.word	0x0001e848

08007e30 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e07a      	b.n	8007f3c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	7c5b      	ldrb	r3, [r3, #17]
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d105      	bne.n	8007e5c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7fb fcb2 	bl	80037c0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fbd5 	bl	8008612 <HAL_RTC_WaitForSynchro>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d004      	beq.n	8007e78 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2204      	movs	r2, #4
 8007e72:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e061      	b.n	8007f3c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fc8e 	bl	800879a <RTC_EnterInitMode>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2204      	movs	r2, #4
 8007e88:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e056      	b.n	8007f3c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 0207 	bic.w	r2, r2, #7
 8007e9c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d005      	beq.n	8007eb2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8007ea6:	4b27      	ldr	r3, [pc, #156]	@ (8007f44 <HAL_RTC_Init+0x114>)
 8007ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eaa:	4a26      	ldr	r2, [pc, #152]	@ (8007f44 <HAL_RTC_Init+0x114>)
 8007eac:	f023 0301 	bic.w	r3, r3, #1
 8007eb0:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007eb2:	4b24      	ldr	r3, [pc, #144]	@ (8007f44 <HAL_RTC_Init+0x114>)
 8007eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb6:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	4921      	ldr	r1, [pc, #132]	@ (8007f44 <HAL_RTC_Init+0x114>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ecc:	d003      	beq.n	8007ed6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	e00e      	b.n	8007ef4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	f7ff fef4 	bl	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007edc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d104      	bne.n	8007eee <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2204      	movs	r2, #4
 8007ee8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e026      	b.n	8007f3c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	0c1a      	lsrs	r2, r3, #16
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f002 020f 	and.w	r2, r2, #15
 8007f00:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	b292      	uxth	r2, r2
 8007f0a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fc6c 	bl	80087ea <RTC_ExitInitMode>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d004      	beq.n	8007f22 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2204      	movs	r2, #4
 8007f1c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e00c      	b.n	8007f3c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
  }
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	40006c00 	.word	0x40006c00

08007f48 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007f48:	b590      	push	{r4, r7, lr}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	617b      	str	r3, [r7, #20]
 8007f58:	2300      	movs	r3, #0
 8007f5a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d002      	beq.n	8007f68 <HAL_RTC_SetTime+0x20>
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e080      	b.n	800806e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	7c1b      	ldrb	r3, [r3, #16]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d101      	bne.n	8007f78 <HAL_RTC_SetTime+0x30>
 8007f74:	2302      	movs	r3, #2
 8007f76:	e07a      	b.n	800806e <HAL_RTC_SetTime+0x126>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2202      	movs	r2, #2
 8007f82:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d113      	bne.n	8007fb2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007f94:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	785b      	ldrb	r3, [r3, #1]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	011b      	lsls	r3, r3, #4
 8007fa2:	1a5b      	subs	r3, r3, r1
 8007fa4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007fa6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007fac:	4413      	add	r3, r2
 8007fae:	617b      	str	r3, [r7, #20]
 8007fb0:	e01e      	b.n	8007ff0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 fc5c 	bl	8008874 <RTC_Bcd2ToByte>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007fc4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	785b      	ldrb	r3, [r3, #1]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 fc51 	bl	8008874 <RTC_Bcd2ToByte>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	011b      	lsls	r3, r3, #4
 8007fda:	1a9b      	subs	r3, r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007fde:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	789b      	ldrb	r3, [r3, #2]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fc45 	bl	8008874 <RTC_Bcd2ToByte>
 8007fea:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007fec:	4423      	add	r3, r4
 8007fee:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007ff0:	6979      	ldr	r1, [r7, #20]
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 fb6a 	bl	80086cc <RTC_WriteTimeCounter>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d007      	beq.n	800800e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2204      	movs	r2, #4
 8008002:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e02f      	b.n	800806e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0205 	bic.w	r2, r2, #5
 800801c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 fb7b 	bl	800871a <RTC_ReadAlarmCounter>
 8008024:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802c:	d018      	beq.n	8008060 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	429a      	cmp	r2, r3
 8008034:	d214      	bcs.n	8008060 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800803c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8008040:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008042:	6939      	ldr	r1, [r7, #16]
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 fb81 	bl	800874c <RTC_WriteAlarmCounter>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d007      	beq.n	8008060 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2204      	movs	r2, #4
 8008054:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e006      	b.n	800806e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2201      	movs	r2, #1
 8008064:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800806c:	2300      	movs	r3, #0
  }
}
 800806e:	4618      	mov	r0, r3
 8008070:	371c      	adds	r7, #28
 8008072:	46bd      	mov	sp, r7
 8008074:	bd90      	pop	{r4, r7, pc}
	...

08008078 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b088      	sub	sp, #32
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	61bb      	str	r3, [r7, #24]
 8008088:	2300      	movs	r3, #0
 800808a:	61fb      	str	r3, [r7, #28]
 800808c:	2300      	movs	r3, #0
 800808e:	617b      	str	r3, [r7, #20]
 8008090:	2300      	movs	r3, #0
 8008092:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d002      	beq.n	80080a0 <HAL_RTC_GetTime+0x28>
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d101      	bne.n	80080a4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e0b5      	b.n	8008210 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f003 0304 	and.w	r3, r3, #4
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e0ac      	b.n	8008210 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 fad8 	bl	800866c <RTC_ReadTimeCounter>
 80080bc:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	4a55      	ldr	r2, [pc, #340]	@ (8008218 <HAL_RTC_GetTime+0x1a0>)
 80080c2:	fba2 2303 	umull	r2, r3, r2, r3
 80080c6:	0adb      	lsrs	r3, r3, #11
 80080c8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	4b52      	ldr	r3, [pc, #328]	@ (8008218 <HAL_RTC_GetTime+0x1a0>)
 80080ce:	fba3 1302 	umull	r1, r3, r3, r2
 80080d2:	0adb      	lsrs	r3, r3, #11
 80080d4:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80080d8:	fb01 f303 	mul.w	r3, r1, r3
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	4a4f      	ldr	r2, [pc, #316]	@ (800821c <HAL_RTC_GetTime+0x1a4>)
 80080e0:	fba2 2303 	umull	r2, r3, r2, r3
 80080e4:	095b      	lsrs	r3, r3, #5
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	4a4a      	ldr	r2, [pc, #296]	@ (8008218 <HAL_RTC_GetTime+0x1a0>)
 80080f0:	fba2 1203 	umull	r1, r2, r2, r3
 80080f4:	0ad2      	lsrs	r2, r2, #11
 80080f6:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80080fa:	fb01 f202 	mul.w	r2, r1, r2
 80080fe:	1a9a      	subs	r2, r3, r2
 8008100:	4b46      	ldr	r3, [pc, #280]	@ (800821c <HAL_RTC_GetTime+0x1a4>)
 8008102:	fba3 1302 	umull	r1, r3, r3, r2
 8008106:	0959      	lsrs	r1, r3, #5
 8008108:	460b      	mov	r3, r1
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	1a5b      	subs	r3, r3, r1
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	1ad1      	subs	r1, r2, r3
 8008112:	b2ca      	uxtb	r2, r1
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	2b17      	cmp	r3, #23
 800811c:	d955      	bls.n	80081ca <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	4a3f      	ldr	r2, [pc, #252]	@ (8008220 <HAL_RTC_GetTime+0x1a8>)
 8008122:	fba2 2303 	umull	r2, r3, r2, r3
 8008126:	091b      	lsrs	r3, r3, #4
 8008128:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800812a:	6939      	ldr	r1, [r7, #16]
 800812c:	4b3c      	ldr	r3, [pc, #240]	@ (8008220 <HAL_RTC_GetTime+0x1a8>)
 800812e:	fba3 2301 	umull	r2, r3, r3, r1
 8008132:	091a      	lsrs	r2, r3, #4
 8008134:	4613      	mov	r3, r2
 8008136:	005b      	lsls	r3, r3, #1
 8008138:	4413      	add	r3, r2
 800813a:	00db      	lsls	r3, r3, #3
 800813c:	1aca      	subs	r2, r1, r3
 800813e:	b2d2      	uxtb	r2, r2
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 fae8 	bl	800871a <RTC_ReadAlarmCounter>
 800814a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008152:	d008      	beq.n	8008166 <HAL_RTC_GetTime+0xee>
 8008154:	69fa      	ldr	r2, [r7, #28]
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	429a      	cmp	r2, r3
 800815a:	d904      	bls.n	8008166 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800815c:	69fa      	ldr	r2, [r7, #28]
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	61fb      	str	r3, [r7, #28]
 8008164:	e002      	b.n	800816c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8008166:	f04f 33ff 	mov.w	r3, #4294967295
 800816a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	4a2d      	ldr	r2, [pc, #180]	@ (8008224 <HAL_RTC_GetTime+0x1ac>)
 8008170:	fb02 f303 	mul.w	r3, r2, r3
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800817a:	69b9      	ldr	r1, [r7, #24]
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f000 faa5 	bl	80086cc <RTC_WriteTimeCounter>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e041      	b.n	8008210 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008192:	d00c      	beq.n	80081ae <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8008194:	69fa      	ldr	r2, [r7, #28]
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	4413      	add	r3, r2
 800819a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800819c:	69f9      	ldr	r1, [r7, #28]
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 fad4 	bl	800874c <RTC_WriteAlarmCounter>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00a      	beq.n	80081c0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e030      	b.n	8008210 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80081ae:	69f9      	ldr	r1, [r7, #28]
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 facb 	bl	800874c <RTC_WriteAlarmCounter>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e027      	b.n	8008210 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80081c0:	6979      	ldr	r1, [r7, #20]
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 fb73 	bl	80088ae <RTC_DateUpdate>
 80081c8:	e003      	b.n	80081d2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01a      	beq.n	800820e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 fb2c 	bl	800883a <RTC_ByteToBcd2>
 80081e2:	4603      	mov	r3, r0
 80081e4:	461a      	mov	r2, r3
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	785b      	ldrb	r3, [r3, #1]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fb23 	bl	800883a <RTC_ByteToBcd2>
 80081f4:	4603      	mov	r3, r0
 80081f6:	461a      	mov	r2, r3
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	789b      	ldrb	r3, [r3, #2]
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fb1a 	bl	800883a <RTC_ByteToBcd2>
 8008206:	4603      	mov	r3, r0
 8008208:	461a      	mov	r2, r3
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3720      	adds	r7, #32
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	91a2b3c5 	.word	0x91a2b3c5
 800821c:	88888889 	.word	0x88888889
 8008220:	aaaaaaab 	.word	0xaaaaaaab
 8008224:	00015180 	.word	0x00015180

08008228 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8008234:	2300      	movs	r3, #0
 8008236:	61fb      	str	r3, [r7, #28]
 8008238:	2300      	movs	r3, #0
 800823a:	61bb      	str	r3, [r7, #24]
 800823c:	2300      	movs	r3, #0
 800823e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d002      	beq.n	800824c <HAL_RTC_SetDate+0x24>
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d101      	bne.n	8008250 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e097      	b.n	8008380 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	7c1b      	ldrb	r3, [r3, #16]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d101      	bne.n	800825c <HAL_RTC_SetDate+0x34>
 8008258:	2302      	movs	r3, #2
 800825a:	e091      	b.n	8008380 <HAL_RTC_SetDate+0x158>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2201      	movs	r2, #1
 8008260:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2202      	movs	r2, #2
 8008266:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10c      	bne.n	8008288 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	78da      	ldrb	r2, [r3, #3]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	785a      	ldrb	r2, [r3, #1]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	789a      	ldrb	r2, [r3, #2]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	739a      	strb	r2, [r3, #14]
 8008286:	e01a      	b.n	80082be <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	78db      	ldrb	r3, [r3, #3]
 800828c:	4618      	mov	r0, r3
 800828e:	f000 faf1 	bl	8008874 <RTC_Bcd2ToByte>
 8008292:	4603      	mov	r3, r0
 8008294:	461a      	mov	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	785b      	ldrb	r3, [r3, #1]
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fae8 	bl	8008874 <RTC_Bcd2ToByte>
 80082a4:	4603      	mov	r3, r0
 80082a6:	461a      	mov	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	789b      	ldrb	r3, [r3, #2]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 fadf 	bl	8008874 <RTC_Bcd2ToByte>
 80082b6:	4603      	mov	r3, r0
 80082b8:	461a      	mov	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	7bdb      	ldrb	r3, [r3, #15]
 80082c2:	4618      	mov	r0, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	7b59      	ldrb	r1, [r3, #13]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	7b9b      	ldrb	r3, [r3, #14]
 80082cc:	461a      	mov	r2, r3
 80082ce:	f000 fbc9 	bl	8008a64 <RTC_WeekDayNum>
 80082d2:	4603      	mov	r3, r0
 80082d4:	461a      	mov	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	7b1a      	ldrb	r2, [r3, #12]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 f9c2 	bl	800866c <RTC_ReadTimeCounter>
 80082e8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	4a26      	ldr	r2, [pc, #152]	@ (8008388 <HAL_RTC_SetDate+0x160>)
 80082ee:	fba2 2303 	umull	r2, r3, r2, r3
 80082f2:	0adb      	lsrs	r3, r3, #11
 80082f4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	2b18      	cmp	r3, #24
 80082fa:	d93a      	bls.n	8008372 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	4a23      	ldr	r2, [pc, #140]	@ (800838c <HAL_RTC_SetDate+0x164>)
 8008300:	fba2 2303 	umull	r2, r3, r2, r3
 8008304:	091b      	lsrs	r3, r3, #4
 8008306:	4a22      	ldr	r2, [pc, #136]	@ (8008390 <HAL_RTC_SetDate+0x168>)
 8008308:	fb02 f303 	mul.w	r3, r2, r3
 800830c:	69fa      	ldr	r2, [r7, #28]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008312:	69f9      	ldr	r1, [r7, #28]
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f000 f9d9 	bl	80086cc <RTC_WriteTimeCounter>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d007      	beq.n	8008330 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2204      	movs	r2, #4
 8008324:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e027      	b.n	8008380 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 f9f2 	bl	800871a <RTC_ReadAlarmCounter>
 8008336:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833e:	d018      	beq.n	8008372 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	429a      	cmp	r2, r3
 8008346:	d214      	bcs.n	8008372 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800834e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8008352:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008354:	69b9      	ldr	r1, [r7, #24]
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 f9f8 	bl	800874c <RTC_WriteAlarmCounter>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d007      	beq.n	8008372 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2204      	movs	r2, #4
 8008366:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e006      	b.n	8008380 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2201      	movs	r2, #1
 8008376:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3720      	adds	r7, #32
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	91a2b3c5 	.word	0x91a2b3c5
 800838c:	aaaaaaab 	.word	0xaaaaaaab
 8008390:	00015180 	.word	0x00015180

08008394 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80083a0:	f107 0314 	add.w	r3, r7, #20
 80083a4:	2100      	movs	r1, #0
 80083a6:	460a      	mov	r2, r1
 80083a8:	801a      	strh	r2, [r3, #0]
 80083aa:	460a      	mov	r2, r1
 80083ac:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <HAL_RTC_GetDate+0x26>
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e03a      	b.n	8008434 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80083be:	f107 0314 	add.w	r3, r7, #20
 80083c2:	2200      	movs	r2, #0
 80083c4:	4619      	mov	r1, r3
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f7ff fe56 	bl	8008078 <HAL_RTC_GetTime>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e02e      	b.n	8008434 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	7b1a      	ldrb	r2, [r3, #12]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	7bda      	ldrb	r2, [r3, #15]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	7b5a      	ldrb	r2, [r3, #13]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	7b9a      	ldrb	r2, [r3, #14]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d01a      	beq.n	8008432 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	78db      	ldrb	r3, [r3, #3]
 8008400:	4618      	mov	r0, r3
 8008402:	f000 fa1a 	bl	800883a <RTC_ByteToBcd2>
 8008406:	4603      	mov	r3, r0
 8008408:	461a      	mov	r2, r3
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	785b      	ldrb	r3, [r3, #1]
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fa11 	bl	800883a <RTC_ByteToBcd2>
 8008418:	4603      	mov	r3, r0
 800841a:	461a      	mov	r2, r3
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	789b      	ldrb	r3, [r3, #2]
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fa08 	bl	800883a <RTC_ByteToBcd2>
 800842a:	4603      	mov	r3, r0
 800842c:	461a      	mov	r2, r3
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800843c:	b590      	push	{r4, r7, lr}
 800843e:	b089      	sub	sp, #36	@ 0x24
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8008448:	2300      	movs	r3, #0
 800844a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 800844c:	f107 0314 	add.w	r3, r7, #20
 8008450:	2100      	movs	r1, #0
 8008452:	460a      	mov	r2, r1
 8008454:	801a      	strh	r2, [r3, #0]
 8008456:	460a      	mov	r2, r1
 8008458:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <HAL_RTC_SetAlarm_IT+0x2a>
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e099      	b.n	800859e <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	7c1b      	ldrb	r3, [r3, #16]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d101      	bne.n	8008476 <HAL_RTC_SetAlarm_IT+0x3a>
 8008472:	2302      	movs	r3, #2
 8008474:	e093      	b.n	800859e <HAL_RTC_SetAlarm_IT+0x162>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2201      	movs	r2, #1
 800847a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2202      	movs	r2, #2
 8008480:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8008482:	f107 0314 	add.w	r3, r7, #20
 8008486:	2200      	movs	r2, #0
 8008488:	4619      	mov	r1, r3
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f7ff fdf4 	bl	8008078 <HAL_RTC_GetTime>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e081      	b.n	800859e <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800849a:	7d3b      	ldrb	r3, [r7, #20]
 800849c:	461a      	mov	r2, r3
 800849e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80084a2:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80084a6:	7d7b      	ldrb	r3, [r7, #21]
 80084a8:	4619      	mov	r1, r3
 80084aa:	460b      	mov	r3, r1
 80084ac:	011b      	lsls	r3, r3, #4
 80084ae:	1a5b      	subs	r3, r3, r1
 80084b0:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80084b2:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80084b4:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80084b6:	4413      	add	r3, r2
 80084b8:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d113      	bne.n	80084e8 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80084ca:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	785b      	ldrb	r3, [r3, #1]
 80084d2:	4619      	mov	r1, r3
 80084d4:	460b      	mov	r3, r1
 80084d6:	011b      	lsls	r3, r3, #4
 80084d8:	1a5b      	subs	r3, r3, r1
 80084da:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80084dc:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80084e2:	4413      	add	r3, r2
 80084e4:	61fb      	str	r3, [r7, #28]
 80084e6:	e01e      	b.n	8008526 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 f9c1 	bl	8008874 <RTC_Bcd2ToByte>
 80084f2:	4603      	mov	r3, r0
 80084f4:	461a      	mov	r2, r3
 80084f6:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80084fa:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	785b      	ldrb	r3, [r3, #1]
 8008502:	4618      	mov	r0, r3
 8008504:	f000 f9b6 	bl	8008874 <RTC_Bcd2ToByte>
 8008508:	4603      	mov	r3, r0
 800850a:	461a      	mov	r2, r3
 800850c:	4613      	mov	r3, r2
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	1a9b      	subs	r3, r3, r2
 8008512:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8008514:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	789b      	ldrb	r3, [r3, #2]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 f9aa 	bl	8008874 <RTC_Bcd2ToByte>
 8008520:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8008522:	4423      	add	r3, r4
 8008524:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8008526:	69fa      	ldr	r2, [r7, #28]
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	429a      	cmp	r2, r3
 800852c:	d205      	bcs.n	800853a <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8008534:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8008538:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800853a:	69f9      	ldr	r1, [r7, #28]
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f000 f905 	bl	800874c <RTC_WriteAlarmCounter>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d007      	beq.n	8008558 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2204      	movs	r2, #4
 800854c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e022      	b.n	800859e <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0202 	bic.w	r2, r2, #2
 8008566:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f042 0202 	orr.w	r2, r2, #2
 8008576:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008578:	4b0b      	ldr	r3, [pc, #44]	@ (80085a8 <HAL_RTC_SetAlarm_IT+0x16c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a0a      	ldr	r2, [pc, #40]	@ (80085a8 <HAL_RTC_SetAlarm_IT+0x16c>)
 800857e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008582:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008584:	4b08      	ldr	r3, [pc, #32]	@ (80085a8 <HAL_RTC_SetAlarm_IT+0x16c>)
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	4a07      	ldr	r2, [pc, #28]	@ (80085a8 <HAL_RTC_SetAlarm_IT+0x16c>)
 800858a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800858e:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2201      	movs	r2, #1
 8008594:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800859c:	2300      	movs	r3, #0
  }
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3724      	adds	r7, #36	@ 0x24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd90      	pop	{r4, r7, pc}
 80085a6:	bf00      	nop
 80085a8:	40010400 	.word	0x40010400

080085ac <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d011      	beq.n	80085e6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f815 	bl	8008600 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f022 0202 	bic.w	r2, r2, #2
 80085e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80085e6:	4b05      	ldr	r3, [pc, #20]	@ (80085fc <HAL_RTC_AlarmIRQHandler+0x50>)
 80085e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80085ec:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	745a      	strb	r2, [r3, #17]
}
 80085f4:	bf00      	nop
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	40010400 	.word	0x40010400

08008600 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	bc80      	pop	{r7}
 8008610:	4770      	bx	lr

08008612 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d101      	bne.n	8008628 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e01d      	b.n	8008664 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f022 0208 	bic.w	r2, r2, #8
 8008636:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008638:	f7fb fbe2 	bl	8003e00 <HAL_GetTick>
 800863c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800863e:	e009      	b.n	8008654 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008640:	f7fb fbde 	bl	8003e00 <HAL_GetTick>
 8008644:	4602      	mov	r2, r0
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800864e:	d901      	bls.n	8008654 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e007      	b.n	8008664 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f003 0308 	and.w	r3, r3, #8
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0ee      	beq.n	8008640 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8008674:	2300      	movs	r3, #0
 8008676:	827b      	strh	r3, [r7, #18]
 8008678:	2300      	movs	r3, #0
 800867a:	823b      	strh	r3, [r7, #16]
 800867c:	2300      	movs	r3, #0
 800867e:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800869c:	8a7a      	ldrh	r2, [r7, #18]
 800869e:	8a3b      	ldrh	r3, [r7, #16]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d008      	beq.n	80086b6 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80086a4:	8a3b      	ldrh	r3, [r7, #16]
 80086a6:	041a      	lsls	r2, r3, #16
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	4313      	orrs	r3, r2
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	e004      	b.n	80086c0 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80086b6:	8a7b      	ldrh	r3, [r7, #18]
 80086b8:	041a      	lsls	r2, r3, #16
 80086ba:	89fb      	ldrh	r3, [r7, #14]
 80086bc:	4313      	orrs	r3, r2
 80086be:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80086c0:	697b      	ldr	r3, [r7, #20]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	371c      	adds	r7, #28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bc80      	pop	{r7}
 80086ca:	4770      	bx	lr

080086cc <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f85d 	bl	800879a <RTC_EnterInitMode>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	73fb      	strb	r3, [r7, #15]
 80086ea:	e011      	b.n	8008710 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	683a      	ldr	r2, [r7, #0]
 80086f2:	0c12      	lsrs	r2, r2, #16
 80086f4:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	b292      	uxth	r2, r2
 80086fe:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f872 	bl	80087ea <RTC_ExitInitMode>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008710:	7bfb      	ldrb	r3, [r7, #15]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800871a:	b480      	push	{r7}
 800871c:	b085      	sub	sp, #20
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	81fb      	strh	r3, [r7, #14]
 8008726:	2300      	movs	r3, #0
 8008728:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6a1b      	ldr	r3, [r3, #32]
 8008730:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008738:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800873a:	89fb      	ldrh	r3, [r7, #14]
 800873c:	041a      	lsls	r2, r3, #16
 800873e:	89bb      	ldrh	r3, [r7, #12]
 8008740:	4313      	orrs	r3, r2
}
 8008742:	4618      	mov	r0, r3
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	bc80      	pop	{r7}
 800874a:	4770      	bx	lr

0800874c <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f81d 	bl	800879a <RTC_EnterInitMode>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d002      	beq.n	800876c <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	73fb      	strb	r3, [r7, #15]
 800876a:	e011      	b.n	8008790 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	0c12      	lsrs	r2, r2, #16
 8008774:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	b292      	uxth	r2, r2
 800877e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f832 	bl	80087ea <RTC_ExitInitMode>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008790:	7bfb      	ldrb	r3, [r7, #15]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80087a6:	f7fb fb2b 	bl	8003e00 <HAL_GetTick>
 80087aa:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80087ac:	e009      	b.n	80087c2 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80087ae:	f7fb fb27 	bl	8003e00 <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80087bc:	d901      	bls.n	80087c2 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e00f      	b.n	80087e2 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f003 0320 	and.w	r3, r3, #32
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d0ee      	beq.n	80087ae <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0210 	orr.w	r2, r2, #16
 80087de:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f022 0210 	bic.w	r2, r2, #16
 8008804:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008806:	f7fb fafb 	bl	8003e00 <HAL_GetTick>
 800880a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800880c:	e009      	b.n	8008822 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800880e:	f7fb faf7 	bl	8003e00 <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800881c:	d901      	bls.n	8008822 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e007      	b.n	8008832 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	f003 0320 	and.w	r3, r3, #32
 800882c:	2b00      	cmp	r3, #0
 800882e:	d0ee      	beq.n	800880e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800883a:	b480      	push	{r7}
 800883c:	b085      	sub	sp, #20
 800883e:	af00      	add	r7, sp, #0
 8008840:	4603      	mov	r3, r0
 8008842:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008844:	2300      	movs	r3, #0
 8008846:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8008848:	e005      	b.n	8008856 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3301      	adds	r3, #1
 800884e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008850:	79fb      	ldrb	r3, [r7, #7]
 8008852:	3b0a      	subs	r3, #10
 8008854:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8008856:	79fb      	ldrb	r3, [r7, #7]
 8008858:	2b09      	cmp	r3, #9
 800885a:	d8f6      	bhi.n	800884a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	b2db      	uxtb	r3, r3
 8008860:	011b      	lsls	r3, r3, #4
 8008862:	b2da      	uxtb	r2, r3
 8008864:	79fb      	ldrb	r3, [r7, #7]
 8008866:	4313      	orrs	r3, r2
 8008868:	b2db      	uxtb	r3, r3
}
 800886a:	4618      	mov	r0, r3
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	bc80      	pop	{r7}
 8008872:	4770      	bx	lr

08008874 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8008882:	79fb      	ldrb	r3, [r7, #7]
 8008884:	091b      	lsrs	r3, r3, #4
 8008886:	b2db      	uxtb	r3, r3
 8008888:	461a      	mov	r2, r3
 800888a:	4613      	mov	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4413      	add	r3, r2
 8008890:	005b      	lsls	r3, r3, #1
 8008892:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	f003 030f 	and.w	r3, r3, #15
 800889a:	b2da      	uxtb	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	4413      	add	r3, r2
 80088a2:	b2db      	uxtb	r3, r3
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bc80      	pop	{r7}
 80088ac:	4770      	bx	lr

080088ae <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b086      	sub	sp, #24
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80088b8:	2300      	movs	r3, #0
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	2300      	movs	r3, #0
 80088be:	613b      	str	r3, [r7, #16]
 80088c0:	2300      	movs	r3, #0
 80088c2:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	7bdb      	ldrb	r3, [r3, #15]
 80088cc:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	7b5b      	ldrb	r3, [r3, #13]
 80088d2:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	7b9b      	ldrb	r3, [r3, #14]
 80088d8:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80088da:	2300      	movs	r3, #0
 80088dc:	60bb      	str	r3, [r7, #8]
 80088de:	e06f      	b.n	80089c0 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d011      	beq.n	800890a <RTC_DateUpdate+0x5c>
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	2b03      	cmp	r3, #3
 80088ea:	d00e      	beq.n	800890a <RTC_DateUpdate+0x5c>
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	2b05      	cmp	r3, #5
 80088f0:	d00b      	beq.n	800890a <RTC_DateUpdate+0x5c>
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	2b07      	cmp	r3, #7
 80088f6:	d008      	beq.n	800890a <RTC_DateUpdate+0x5c>
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	2b08      	cmp	r3, #8
 80088fc:	d005      	beq.n	800890a <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2b0a      	cmp	r3, #10
 8008902:	d002      	beq.n	800890a <RTC_DateUpdate+0x5c>
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	2b0c      	cmp	r3, #12
 8008908:	d117      	bne.n	800893a <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b1e      	cmp	r3, #30
 800890e:	d803      	bhi.n	8008918 <RTC_DateUpdate+0x6a>
      {
        day++;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3301      	adds	r3, #1
 8008914:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008916:	e050      	b.n	80089ba <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	2b0c      	cmp	r3, #12
 800891c:	d005      	beq.n	800892a <RTC_DateUpdate+0x7c>
        {
          month++;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	3301      	adds	r3, #1
 8008922:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008924:	2301      	movs	r3, #1
 8008926:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008928:	e047      	b.n	80089ba <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800892a:	2301      	movs	r3, #1
 800892c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800892e:	2301      	movs	r3, #1
 8008930:	60fb      	str	r3, [r7, #12]
          year++;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	3301      	adds	r3, #1
 8008936:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8008938:	e03f      	b.n	80089ba <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	2b04      	cmp	r3, #4
 800893e:	d008      	beq.n	8008952 <RTC_DateUpdate+0xa4>
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	2b06      	cmp	r3, #6
 8008944:	d005      	beq.n	8008952 <RTC_DateUpdate+0xa4>
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	2b09      	cmp	r3, #9
 800894a:	d002      	beq.n	8008952 <RTC_DateUpdate+0xa4>
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	2b0b      	cmp	r3, #11
 8008950:	d10c      	bne.n	800896c <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2b1d      	cmp	r3, #29
 8008956:	d803      	bhi.n	8008960 <RTC_DateUpdate+0xb2>
      {
        day++;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3301      	adds	r3, #1
 800895c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800895e:	e02c      	b.n	80089ba <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	3301      	adds	r3, #1
 8008964:	613b      	str	r3, [r7, #16]
        day = 1U;
 8008966:	2301      	movs	r3, #1
 8008968:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800896a:	e026      	b.n	80089ba <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	2b02      	cmp	r3, #2
 8008970:	d123      	bne.n	80089ba <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b1b      	cmp	r3, #27
 8008976:	d803      	bhi.n	8008980 <RTC_DateUpdate+0xd2>
      {
        day++;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3301      	adds	r3, #1
 800897c:	60fb      	str	r3, [r7, #12]
 800897e:	e01c      	b.n	80089ba <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b1c      	cmp	r3, #28
 8008984:	d111      	bne.n	80089aa <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	b29b      	uxth	r3, r3
 800898a:	4618      	mov	r0, r3
 800898c:	f000 f838 	bl	8008a00 <RTC_IsLeapYear>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d003      	beq.n	800899e <RTC_DateUpdate+0xf0>
        {
          day++;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3301      	adds	r3, #1
 800899a:	60fb      	str	r3, [r7, #12]
 800899c:	e00d      	b.n	80089ba <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	3301      	adds	r3, #1
 80089a2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80089a4:	2301      	movs	r3, #1
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	e007      	b.n	80089ba <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2b1d      	cmp	r3, #29
 80089ae:	d104      	bne.n	80089ba <RTC_DateUpdate+0x10c>
      {
        month++;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	3301      	adds	r3, #1
 80089b4:	613b      	str	r3, [r7, #16]
        day = 1U;
 80089b6:	2301      	movs	r3, #1
 80089b8:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	3301      	adds	r3, #1
 80089be:	60bb      	str	r3, [r7, #8]
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d38b      	bcc.n	80088e0 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	b2d2      	uxtb	r2, r2
 80089e8:	4619      	mov	r1, r3
 80089ea:	6978      	ldr	r0, [r7, #20]
 80089ec:	f000 f83a 	bl	8008a64 <RTC_WeekDayNum>
 80089f0:	4603      	mov	r3, r0
 80089f2:	461a      	mov	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	731a      	strb	r2, [r3, #12]
}
 80089f8:	bf00      	nop
 80089fa:	3718      	adds	r7, #24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	4603      	mov	r3, r0
 8008a08:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8008a0a:	88fb      	ldrh	r3, [r7, #6]
 8008a0c:	f003 0303 	and.w	r3, r3, #3
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	e01d      	b.n	8008a56 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8008a1a:	88fb      	ldrh	r3, [r7, #6]
 8008a1c:	4a10      	ldr	r2, [pc, #64]	@ (8008a60 <RTC_IsLeapYear+0x60>)
 8008a1e:	fba2 1203 	umull	r1, r2, r2, r3
 8008a22:	0952      	lsrs	r2, r2, #5
 8008a24:	2164      	movs	r1, #100	@ 0x64
 8008a26:	fb01 f202 	mul.w	r2, r1, r2
 8008a2a:	1a9b      	subs	r3, r3, r2
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e00f      	b.n	8008a56 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8008a36:	88fb      	ldrh	r3, [r7, #6]
 8008a38:	4a09      	ldr	r2, [pc, #36]	@ (8008a60 <RTC_IsLeapYear+0x60>)
 8008a3a:	fba2 1203 	umull	r1, r2, r2, r3
 8008a3e:	09d2      	lsrs	r2, r2, #7
 8008a40:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8008a44:	fb01 f202 	mul.w	r2, r1, r2
 8008a48:	1a9b      	subs	r3, r3, r2
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e000      	b.n	8008a56 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8008a54:	2300      	movs	r3, #0
  }
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bc80      	pop	{r7}
 8008a5e:	4770      	bx	lr
 8008a60:	51eb851f 	.word	0x51eb851f

08008a64 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
 8008a70:	4613      	mov	r3, r2
 8008a72:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60bb      	str	r3, [r7, #8]
 8008a78:	2300      	movs	r3, #0
 8008a7a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8008a82:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8008a84:	78fb      	ldrb	r3, [r7, #3]
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d82d      	bhi.n	8008ae6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8008a8a:	78fa      	ldrb	r2, [r7, #3]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	4413      	add	r3, r2
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	1a9b      	subs	r3, r3, r2
 8008a96:	4a2c      	ldr	r2, [pc, #176]	@ (8008b48 <RTC_WeekDayNum+0xe4>)
 8008a98:	fba2 2303 	umull	r2, r3, r2, r3
 8008a9c:	085a      	lsrs	r2, r3, #1
 8008a9e:	78bb      	ldrb	r3, [r7, #2]
 8008aa0:	441a      	add	r2, r3
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	441a      	add	r2, r3
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	089b      	lsrs	r3, r3, #2
 8008aac:	441a      	add	r2, r3
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	4926      	ldr	r1, [pc, #152]	@ (8008b4c <RTC_WeekDayNum+0xe8>)
 8008ab4:	fba1 1303 	umull	r1, r3, r1, r3
 8008ab8:	095b      	lsrs	r3, r3, #5
 8008aba:	1ad2      	subs	r2, r2, r3
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	4922      	ldr	r1, [pc, #136]	@ (8008b4c <RTC_WeekDayNum+0xe8>)
 8008ac2:	fba1 1303 	umull	r1, r3, r1, r3
 8008ac6:	09db      	lsrs	r3, r3, #7
 8008ac8:	4413      	add	r3, r2
 8008aca:	1d1a      	adds	r2, r3, #4
 8008acc:	4b20      	ldr	r3, [pc, #128]	@ (8008b50 <RTC_WeekDayNum+0xec>)
 8008ace:	fba3 1302 	umull	r1, r3, r3, r2
 8008ad2:	1ad1      	subs	r1, r2, r3
 8008ad4:	0849      	lsrs	r1, r1, #1
 8008ad6:	440b      	add	r3, r1
 8008ad8:	0899      	lsrs	r1, r3, #2
 8008ada:	460b      	mov	r3, r1
 8008adc:	00db      	lsls	r3, r3, #3
 8008ade:	1a5b      	subs	r3, r3, r1
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	e029      	b.n	8008b3a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8008ae6:	78fa      	ldrb	r2, [r7, #3]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	005b      	lsls	r3, r3, #1
 8008aec:	4413      	add	r3, r2
 8008aee:	00db      	lsls	r3, r3, #3
 8008af0:	1a9b      	subs	r3, r3, r2
 8008af2:	4a15      	ldr	r2, [pc, #84]	@ (8008b48 <RTC_WeekDayNum+0xe4>)
 8008af4:	fba2 2303 	umull	r2, r3, r2, r3
 8008af8:	085a      	lsrs	r2, r3, #1
 8008afa:	78bb      	ldrb	r3, [r7, #2]
 8008afc:	441a      	add	r2, r3
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	441a      	add	r2, r3
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	089b      	lsrs	r3, r3, #2
 8008b06:	441a      	add	r2, r3
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	4910      	ldr	r1, [pc, #64]	@ (8008b4c <RTC_WeekDayNum+0xe8>)
 8008b0c:	fba1 1303 	umull	r1, r3, r1, r3
 8008b10:	095b      	lsrs	r3, r3, #5
 8008b12:	1ad2      	subs	r2, r2, r3
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	490d      	ldr	r1, [pc, #52]	@ (8008b4c <RTC_WeekDayNum+0xe8>)
 8008b18:	fba1 1303 	umull	r1, r3, r1, r3
 8008b1c:	09db      	lsrs	r3, r3, #7
 8008b1e:	4413      	add	r3, r2
 8008b20:	1c9a      	adds	r2, r3, #2
 8008b22:	4b0b      	ldr	r3, [pc, #44]	@ (8008b50 <RTC_WeekDayNum+0xec>)
 8008b24:	fba3 1302 	umull	r1, r3, r3, r2
 8008b28:	1ad1      	subs	r1, r2, r3
 8008b2a:	0849      	lsrs	r1, r1, #1
 8008b2c:	440b      	add	r3, r1
 8008b2e:	0899      	lsrs	r1, r3, #2
 8008b30:	460b      	mov	r3, r1
 8008b32:	00db      	lsls	r3, r3, #3
 8008b34:	1a5b      	subs	r3, r3, r1
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	b2db      	uxtb	r3, r3
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bc80      	pop	{r7}
 8008b46:	4770      	bx	lr
 8008b48:	38e38e39 	.word	0x38e38e39
 8008b4c:	51eb851f 	.word	0x51eb851f
 8008b50:	24924925 	.word	0x24924925

08008b54 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d027      	beq.n	8008bba <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f003 0301 	and.w	r3, r3, #1
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d020      	beq.n	8008bba <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f003 0304 	and.w	r3, r3, #4
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00b      	beq.n	8008b9e <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f824 	bl	8008bd4 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f06f 0204 	mvn.w	r2, #4
 8008b94:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2204      	movs	r2, #4
 8008b9a:	745a      	strb	r2, [r3, #17]
 8008b9c:	e005      	b.n	8008baa <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f80f 	bl	8008bc2 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f022 0201 	bic.w	r2, r2, #1
 8008bb8:	605a      	str	r2, [r3, #4]
    }
  }
}
 8008bba:	bf00      	nop
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8008bca:	bf00      	nop
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bc80      	pop	{r7}
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bc80      	pop	{r7}
 8008be4:	4770      	bx	lr

08008be6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e041      	b.n	8008c7c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d106      	bne.n	8008c12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7fa fe0b 	bl	8003828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2202      	movs	r2, #2
 8008c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	3304      	adds	r3, #4
 8008c22:	4619      	mov	r1, r3
 8008c24:	4610      	mov	r0, r2
 8008c26:	f000 fd21 	bl	800966c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d001      	beq.n	8008c9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e032      	b.n	8008d02 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a18      	ldr	r2, [pc, #96]	@ (8008d0c <HAL_TIM_Base_Start+0x88>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d00e      	beq.n	8008ccc <HAL_TIM_Base_Start+0x48>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cb6:	d009      	beq.n	8008ccc <HAL_TIM_Base_Start+0x48>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a14      	ldr	r2, [pc, #80]	@ (8008d10 <HAL_TIM_Base_Start+0x8c>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d004      	beq.n	8008ccc <HAL_TIM_Base_Start+0x48>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a13      	ldr	r2, [pc, #76]	@ (8008d14 <HAL_TIM_Base_Start+0x90>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d111      	bne.n	8008cf0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b06      	cmp	r3, #6
 8008cdc:	d010      	beq.n	8008d00 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f042 0201 	orr.w	r2, r2, #1
 8008cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cee:	e007      	b.n	8008d00 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f042 0201 	orr.w	r2, r2, #1
 8008cfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bc80      	pop	{r7}
 8008d0a:	4770      	bx	lr
 8008d0c:	40012c00 	.word	0x40012c00
 8008d10:	40000400 	.word	0x40000400
 8008d14:	40000800 	.word	0x40000800

08008d18 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6a1a      	ldr	r2, [r3, #32]
 8008d26:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10f      	bne.n	8008d50 <HAL_TIM_Base_Stop+0x38>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6a1a      	ldr	r2, [r3, #32]
 8008d36:	f240 4344 	movw	r3, #1092	@ 0x444
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d107      	bne.n	8008d50 <HAL_TIM_Base_Stop+0x38>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f022 0201 	bic.w	r2, r2, #1
 8008d4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bc80      	pop	{r7}
 8008d62:	4770      	bx	lr

08008d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d001      	beq.n	8008d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e03a      	b.n	8008df2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68da      	ldr	r2, [r3, #12]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f042 0201 	orr.w	r2, r2, #1
 8008d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a18      	ldr	r2, [pc, #96]	@ (8008dfc <HAL_TIM_Base_Start_IT+0x98>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d00e      	beq.n	8008dbc <HAL_TIM_Base_Start_IT+0x58>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008da6:	d009      	beq.n	8008dbc <HAL_TIM_Base_Start_IT+0x58>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a14      	ldr	r2, [pc, #80]	@ (8008e00 <HAL_TIM_Base_Start_IT+0x9c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d004      	beq.n	8008dbc <HAL_TIM_Base_Start_IT+0x58>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a13      	ldr	r2, [pc, #76]	@ (8008e04 <HAL_TIM_Base_Start_IT+0xa0>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d111      	bne.n	8008de0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f003 0307 	and.w	r3, r3, #7
 8008dc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2b06      	cmp	r3, #6
 8008dcc:	d010      	beq.n	8008df0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f042 0201 	orr.w	r2, r2, #1
 8008ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dde:	e007      	b.n	8008df0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f042 0201 	orr.w	r2, r2, #1
 8008dee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bc80      	pop	{r7}
 8008dfa:	4770      	bx	lr
 8008dfc:	40012c00 	.word	0x40012c00
 8008e00:	40000400 	.word	0x40000400
 8008e04:	40000800 	.word	0x40000800

08008e08 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e041      	b.n	8008e9e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d106      	bne.n	8008e34 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f839 	bl	8008ea6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2202      	movs	r2, #2
 8008e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3304      	adds	r3, #4
 8008e44:	4619      	mov	r1, r3
 8008e46:	4610      	mov	r0, r2
 8008e48:	f000 fc10 	bl	800966c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b083      	sub	sp, #12
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008eae:	bf00      	nop
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bc80      	pop	{r7}
 8008eb6:	4770      	bx	lr

08008eb8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d109      	bne.n	8008ee0 <HAL_TIM_OC_Start_IT+0x28>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	bf14      	ite	ne
 8008ed8:	2301      	movne	r3, #1
 8008eda:	2300      	moveq	r3, #0
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	e022      	b.n	8008f26 <HAL_TIM_OC_Start_IT+0x6e>
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d109      	bne.n	8008efa <HAL_TIM_OC_Start_IT+0x42>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	bf14      	ite	ne
 8008ef2:	2301      	movne	r3, #1
 8008ef4:	2300      	moveq	r3, #0
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	e015      	b.n	8008f26 <HAL_TIM_OC_Start_IT+0x6e>
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2b08      	cmp	r3, #8
 8008efe:	d109      	bne.n	8008f14 <HAL_TIM_OC_Start_IT+0x5c>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	bf14      	ite	ne
 8008f0c:	2301      	movne	r3, #1
 8008f0e:	2300      	moveq	r3, #0
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	e008      	b.n	8008f26 <HAL_TIM_OC_Start_IT+0x6e>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	bf14      	ite	ne
 8008f20:	2301      	movne	r3, #1
 8008f22:	2300      	moveq	r3, #0
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e0a9      	b.n	8009082 <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d104      	bne.n	8008f3e <HAL_TIM_OC_Start_IT+0x86>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2202      	movs	r2, #2
 8008f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f3c:	e013      	b.n	8008f66 <HAL_TIM_OC_Start_IT+0xae>
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b04      	cmp	r3, #4
 8008f42:	d104      	bne.n	8008f4e <HAL_TIM_OC_Start_IT+0x96>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f4c:	e00b      	b.n	8008f66 <HAL_TIM_OC_Start_IT+0xae>
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b08      	cmp	r3, #8
 8008f52:	d104      	bne.n	8008f5e <HAL_TIM_OC_Start_IT+0xa6>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2202      	movs	r2, #2
 8008f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f5c:	e003      	b.n	8008f66 <HAL_TIM_OC_Start_IT+0xae>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2202      	movs	r2, #2
 8008f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	2b0c      	cmp	r3, #12
 8008f6a:	d841      	bhi.n	8008ff0 <HAL_TIM_OC_Start_IT+0x138>
 8008f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f74 <HAL_TIM_OC_Start_IT+0xbc>)
 8008f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f72:	bf00      	nop
 8008f74:	08008fa9 	.word	0x08008fa9
 8008f78:	08008ff1 	.word	0x08008ff1
 8008f7c:	08008ff1 	.word	0x08008ff1
 8008f80:	08008ff1 	.word	0x08008ff1
 8008f84:	08008fbb 	.word	0x08008fbb
 8008f88:	08008ff1 	.word	0x08008ff1
 8008f8c:	08008ff1 	.word	0x08008ff1
 8008f90:	08008ff1 	.word	0x08008ff1
 8008f94:	08008fcd 	.word	0x08008fcd
 8008f98:	08008ff1 	.word	0x08008ff1
 8008f9c:	08008ff1 	.word	0x08008ff1
 8008fa0:	08008ff1 	.word	0x08008ff1
 8008fa4:	08008fdf 	.word	0x08008fdf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68da      	ldr	r2, [r3, #12]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f042 0202 	orr.w	r2, r2, #2
 8008fb6:	60da      	str	r2, [r3, #12]
      break;
 8008fb8:	e01d      	b.n	8008ff6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68da      	ldr	r2, [r3, #12]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f042 0204 	orr.w	r2, r2, #4
 8008fc8:	60da      	str	r2, [r3, #12]
      break;
 8008fca:	e014      	b.n	8008ff6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f042 0208 	orr.w	r2, r2, #8
 8008fda:	60da      	str	r2, [r3, #12]
      break;
 8008fdc:	e00b      	b.n	8008ff6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f042 0210 	orr.w	r2, r2, #16
 8008fec:	60da      	str	r2, [r3, #12]
      break;
 8008fee:	e002      	b.n	8008ff6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ff4:	bf00      	nop
  }

  if (status == HAL_OK)
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d141      	bne.n	8009080 <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2201      	movs	r2, #1
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	4618      	mov	r0, r3
 8009006:	f000 fdbd 	bl	8009b84 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a1f      	ldr	r2, [pc, #124]	@ (800908c <HAL_TIM_OC_Start_IT+0x1d4>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d107      	bne.n	8009024 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009022:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a18      	ldr	r2, [pc, #96]	@ (800908c <HAL_TIM_OC_Start_IT+0x1d4>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d00e      	beq.n	800904c <HAL_TIM_OC_Start_IT+0x194>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009036:	d009      	beq.n	800904c <HAL_TIM_OC_Start_IT+0x194>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a14      	ldr	r2, [pc, #80]	@ (8009090 <HAL_TIM_OC_Start_IT+0x1d8>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d004      	beq.n	800904c <HAL_TIM_OC_Start_IT+0x194>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a13      	ldr	r2, [pc, #76]	@ (8009094 <HAL_TIM_OC_Start_IT+0x1dc>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d111      	bne.n	8009070 <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	2b06      	cmp	r3, #6
 800905c:	d010      	beq.n	8009080 <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f042 0201 	orr.w	r2, r2, #1
 800906c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800906e:	e007      	b.n	8009080 <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0201 	orr.w	r2, r2, #1
 800907e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009080:	7bfb      	ldrb	r3, [r7, #15]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	40012c00 	.word	0x40012c00
 8009090:	40000400 	.word	0x40000400
 8009094:	40000800 	.word	0x40000800

08009098 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2b0c      	cmp	r3, #12
 80090aa:	d841      	bhi.n	8009130 <HAL_TIM_OC_Stop_IT+0x98>
 80090ac:	a201      	add	r2, pc, #4	@ (adr r2, 80090b4 <HAL_TIM_OC_Stop_IT+0x1c>)
 80090ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b2:	bf00      	nop
 80090b4:	080090e9 	.word	0x080090e9
 80090b8:	08009131 	.word	0x08009131
 80090bc:	08009131 	.word	0x08009131
 80090c0:	08009131 	.word	0x08009131
 80090c4:	080090fb 	.word	0x080090fb
 80090c8:	08009131 	.word	0x08009131
 80090cc:	08009131 	.word	0x08009131
 80090d0:	08009131 	.word	0x08009131
 80090d4:	0800910d 	.word	0x0800910d
 80090d8:	08009131 	.word	0x08009131
 80090dc:	08009131 	.word	0x08009131
 80090e0:	08009131 	.word	0x08009131
 80090e4:	0800911f 	.word	0x0800911f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68da      	ldr	r2, [r3, #12]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0202 	bic.w	r2, r2, #2
 80090f6:	60da      	str	r2, [r3, #12]
      break;
 80090f8:	e01d      	b.n	8009136 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68da      	ldr	r2, [r3, #12]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f022 0204 	bic.w	r2, r2, #4
 8009108:	60da      	str	r2, [r3, #12]
      break;
 800910a:	e014      	b.n	8009136 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68da      	ldr	r2, [r3, #12]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f022 0208 	bic.w	r2, r2, #8
 800911a:	60da      	str	r2, [r3, #12]
      break;
 800911c:	e00b      	b.n	8009136 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68da      	ldr	r2, [r3, #12]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f022 0210 	bic.w	r2, r2, #16
 800912c:	60da      	str	r2, [r3, #12]
      break;
 800912e:	e002      	b.n	8009136 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	73fb      	strb	r3, [r7, #15]
      break;
 8009134:	bf00      	nop
  }

  if (status == HAL_OK)
 8009136:	7bfb      	ldrb	r3, [r7, #15]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d157      	bne.n	80091ec <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2200      	movs	r2, #0
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fd1d 	bl	8009b84 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a2a      	ldr	r2, [pc, #168]	@ (80091f8 <HAL_TIM_OC_Stop_IT+0x160>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d117      	bne.n	8009184 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6a1a      	ldr	r2, [r3, #32]
 800915a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800915e:	4013      	ands	r3, r2
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10f      	bne.n	8009184 <HAL_TIM_OC_Stop_IT+0xec>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6a1a      	ldr	r2, [r3, #32]
 800916a:	f240 4344 	movw	r3, #1092	@ 0x444
 800916e:	4013      	ands	r3, r2
 8009170:	2b00      	cmp	r3, #0
 8009172:	d107      	bne.n	8009184 <HAL_TIM_OC_Stop_IT+0xec>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009182:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6a1a      	ldr	r2, [r3, #32]
 800918a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800918e:	4013      	ands	r3, r2
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10f      	bne.n	80091b4 <HAL_TIM_OC_Stop_IT+0x11c>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6a1a      	ldr	r2, [r3, #32]
 800919a:	f240 4344 	movw	r3, #1092	@ 0x444
 800919e:	4013      	ands	r3, r2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d107      	bne.n	80091b4 <HAL_TIM_OC_Stop_IT+0x11c>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f022 0201 	bic.w	r2, r2, #1
 80091b2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d104      	bne.n	80091c4 <HAL_TIM_OC_Stop_IT+0x12c>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80091c2:	e013      	b.n	80091ec <HAL_TIM_OC_Stop_IT+0x154>
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d104      	bne.n	80091d4 <HAL_TIM_OC_Stop_IT+0x13c>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80091d2:	e00b      	b.n	80091ec <HAL_TIM_OC_Stop_IT+0x154>
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2b08      	cmp	r3, #8
 80091d8:	d104      	bne.n	80091e4 <HAL_TIM_OC_Stop_IT+0x14c>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091e2:	e003      	b.n	80091ec <HAL_TIM_OC_Stop_IT+0x154>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	40012c00 	.word	0x40012c00

080091fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	f003 0302 	and.w	r3, r3, #2
 800921a:	2b00      	cmp	r3, #0
 800921c:	d020      	beq.n	8009260 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f003 0302 	and.w	r3, r3, #2
 8009224:	2b00      	cmp	r3, #0
 8009226:	d01b      	beq.n	8009260 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f06f 0202 	mvn.w	r2, #2
 8009230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	f003 0303 	and.w	r3, r3, #3
 8009242:	2b00      	cmp	r3, #0
 8009244:	d003      	beq.n	800924e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f9f4 	bl	8009634 <HAL_TIM_IC_CaptureCallback>
 800924c:	e005      	b.n	800925a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7f8 fbf8 	bl	8001a44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f9f6 	bl	8009646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	f003 0304 	and.w	r3, r3, #4
 8009266:	2b00      	cmp	r3, #0
 8009268:	d020      	beq.n	80092ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b00      	cmp	r3, #0
 8009272:	d01b      	beq.n	80092ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f06f 0204 	mvn.w	r2, #4
 800927c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2202      	movs	r2, #2
 8009282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f9ce 	bl	8009634 <HAL_TIM_IC_CaptureCallback>
 8009298:	e005      	b.n	80092a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7f8 fbd2 	bl	8001a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f9d0 	bl	8009646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f003 0308 	and.w	r3, r3, #8
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d020      	beq.n	80092f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f003 0308 	and.w	r3, r3, #8
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d01b      	beq.n	80092f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f06f 0208 	mvn.w	r2, #8
 80092c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2204      	movs	r2, #4
 80092ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	69db      	ldr	r3, [r3, #28]
 80092d6:	f003 0303 	and.w	r3, r3, #3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f9a8 	bl	8009634 <HAL_TIM_IC_CaptureCallback>
 80092e4:	e005      	b.n	80092f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7f8 fbac 	bl	8001a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f9aa 	bl	8009646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	f003 0310 	and.w	r3, r3, #16
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d020      	beq.n	8009344 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f003 0310 	and.w	r3, r3, #16
 8009308:	2b00      	cmp	r3, #0
 800930a:	d01b      	beq.n	8009344 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f06f 0210 	mvn.w	r2, #16
 8009314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2208      	movs	r2, #8
 800931a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009326:	2b00      	cmp	r3, #0
 8009328:	d003      	beq.n	8009332 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f982 	bl	8009634 <HAL_TIM_IC_CaptureCallback>
 8009330:	e005      	b.n	800933e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7f8 fb86 	bl	8001a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f984 	bl	8009646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00c      	beq.n	8009368 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b00      	cmp	r3, #0
 8009356:	d007      	beq.n	8009368 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f06f 0201 	mvn.w	r2, #1
 8009360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f95d 	bl	8009622 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00c      	beq.n	800938c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009378:	2b00      	cmp	r3, #0
 800937a:	d007      	beq.n	800938c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fc87 	bl	8009c9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00c      	beq.n	80093b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800939c:	2b00      	cmp	r3, #0
 800939e:	d007      	beq.n	80093b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80093a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f954 	bl	8009658 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00c      	beq.n	80093d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f003 0320 	and.w	r3, r3, #32
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d007      	beq.n	80093d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f06f 0220 	mvn.w	r2, #32
 80093cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fc5a 	bl	8009c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093d4:	bf00      	nop
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d101      	bne.n	80093fa <HAL_TIM_OC_ConfigChannel+0x1e>
 80093f6:	2302      	movs	r3, #2
 80093f8:	e048      	b.n	800948c <HAL_TIM_OC_ConfigChannel+0xb0>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b0c      	cmp	r3, #12
 8009406:	d839      	bhi.n	800947c <HAL_TIM_OC_ConfigChannel+0xa0>
 8009408:	a201      	add	r2, pc, #4	@ (adr r2, 8009410 <HAL_TIM_OC_ConfigChannel+0x34>)
 800940a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940e:	bf00      	nop
 8009410:	08009445 	.word	0x08009445
 8009414:	0800947d 	.word	0x0800947d
 8009418:	0800947d 	.word	0x0800947d
 800941c:	0800947d 	.word	0x0800947d
 8009420:	08009453 	.word	0x08009453
 8009424:	0800947d 	.word	0x0800947d
 8009428:	0800947d 	.word	0x0800947d
 800942c:	0800947d 	.word	0x0800947d
 8009430:	08009461 	.word	0x08009461
 8009434:	0800947d 	.word	0x0800947d
 8009438:	0800947d 	.word	0x0800947d
 800943c:	0800947d 	.word	0x0800947d
 8009440:	0800946f 	.word	0x0800946f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68b9      	ldr	r1, [r7, #8]
 800944a:	4618      	mov	r0, r3
 800944c:	f000 f97c 	bl	8009748 <TIM_OC1_SetConfig>
      break;
 8009450:	e017      	b.n	8009482 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68b9      	ldr	r1, [r7, #8]
 8009458:	4618      	mov	r0, r3
 800945a:	f000 f9db 	bl	8009814 <TIM_OC2_SetConfig>
      break;
 800945e:	e010      	b.n	8009482 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68b9      	ldr	r1, [r7, #8]
 8009466:	4618      	mov	r0, r3
 8009468:	f000 fa3e 	bl	80098e8 <TIM_OC3_SetConfig>
      break;
 800946c:	e009      	b.n	8009482 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68b9      	ldr	r1, [r7, #8]
 8009474:	4618      	mov	r0, r3
 8009476:	f000 faa1 	bl	80099bc <TIM_OC4_SetConfig>
      break;
 800947a:	e002      	b.n	8009482 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	75fb      	strb	r3, [r7, #23]
      break;
 8009480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800948a:	7dfb      	ldrb	r3, [r7, #23]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3718      	adds	r7, #24
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d101      	bne.n	80094b0 <HAL_TIM_ConfigClockSource+0x1c>
 80094ac:	2302      	movs	r3, #2
 80094ae:	e0b4      	b.n	800961a <HAL_TIM_ConfigClockSource+0x186>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80094ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80094d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094e8:	d03e      	beq.n	8009568 <HAL_TIM_ConfigClockSource+0xd4>
 80094ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094ee:	f200 8087 	bhi.w	8009600 <HAL_TIM_ConfigClockSource+0x16c>
 80094f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094f6:	f000 8086 	beq.w	8009606 <HAL_TIM_ConfigClockSource+0x172>
 80094fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094fe:	d87f      	bhi.n	8009600 <HAL_TIM_ConfigClockSource+0x16c>
 8009500:	2b70      	cmp	r3, #112	@ 0x70
 8009502:	d01a      	beq.n	800953a <HAL_TIM_ConfigClockSource+0xa6>
 8009504:	2b70      	cmp	r3, #112	@ 0x70
 8009506:	d87b      	bhi.n	8009600 <HAL_TIM_ConfigClockSource+0x16c>
 8009508:	2b60      	cmp	r3, #96	@ 0x60
 800950a:	d050      	beq.n	80095ae <HAL_TIM_ConfigClockSource+0x11a>
 800950c:	2b60      	cmp	r3, #96	@ 0x60
 800950e:	d877      	bhi.n	8009600 <HAL_TIM_ConfigClockSource+0x16c>
 8009510:	2b50      	cmp	r3, #80	@ 0x50
 8009512:	d03c      	beq.n	800958e <HAL_TIM_ConfigClockSource+0xfa>
 8009514:	2b50      	cmp	r3, #80	@ 0x50
 8009516:	d873      	bhi.n	8009600 <HAL_TIM_ConfigClockSource+0x16c>
 8009518:	2b40      	cmp	r3, #64	@ 0x40
 800951a:	d058      	beq.n	80095ce <HAL_TIM_ConfigClockSource+0x13a>
 800951c:	2b40      	cmp	r3, #64	@ 0x40
 800951e:	d86f      	bhi.n	8009600 <HAL_TIM_ConfigClockSource+0x16c>
 8009520:	2b30      	cmp	r3, #48	@ 0x30
 8009522:	d064      	beq.n	80095ee <HAL_TIM_ConfigClockSource+0x15a>
 8009524:	2b30      	cmp	r3, #48	@ 0x30
 8009526:	d86b      	bhi.n	8009600 <HAL_TIM_ConfigClockSource+0x16c>
 8009528:	2b20      	cmp	r3, #32
 800952a:	d060      	beq.n	80095ee <HAL_TIM_ConfigClockSource+0x15a>
 800952c:	2b20      	cmp	r3, #32
 800952e:	d867      	bhi.n	8009600 <HAL_TIM_ConfigClockSource+0x16c>
 8009530:	2b00      	cmp	r3, #0
 8009532:	d05c      	beq.n	80095ee <HAL_TIM_ConfigClockSource+0x15a>
 8009534:	2b10      	cmp	r3, #16
 8009536:	d05a      	beq.n	80095ee <HAL_TIM_ConfigClockSource+0x15a>
 8009538:	e062      	b.n	8009600 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800954a:	f000 fafc 	bl	8009b46 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800955c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	609a      	str	r2, [r3, #8]
      break;
 8009566:	e04f      	b.n	8009608 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009578:	f000 fae5 	bl	8009b46 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	689a      	ldr	r2, [r3, #8]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800958a:	609a      	str	r2, [r3, #8]
      break;
 800958c:	e03c      	b.n	8009608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800959a:	461a      	mov	r2, r3
 800959c:	f000 fa5c 	bl	8009a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2150      	movs	r1, #80	@ 0x50
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 fab3 	bl	8009b12 <TIM_ITRx_SetConfig>
      break;
 80095ac:	e02c      	b.n	8009608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80095ba:	461a      	mov	r2, r3
 80095bc:	f000 fa7a 	bl	8009ab4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2160      	movs	r1, #96	@ 0x60
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 faa3 	bl	8009b12 <TIM_ITRx_SetConfig>
      break;
 80095cc:	e01c      	b.n	8009608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095da:	461a      	mov	r2, r3
 80095dc:	f000 fa3c 	bl	8009a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2140      	movs	r1, #64	@ 0x40
 80095e6:	4618      	mov	r0, r3
 80095e8:	f000 fa93 	bl	8009b12 <TIM_ITRx_SetConfig>
      break;
 80095ec:	e00c      	b.n	8009608 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4619      	mov	r1, r3
 80095f8:	4610      	mov	r0, r2
 80095fa:	f000 fa8a 	bl	8009b12 <TIM_ITRx_SetConfig>
      break;
 80095fe:	e003      	b.n	8009608 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	73fb      	strb	r3, [r7, #15]
      break;
 8009604:	e000      	b.n	8009608 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009618:	7bfb      	ldrb	r3, [r7, #15]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800962a:	bf00      	nop
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	bc80      	pop	{r7}
 8009632:	4770      	bx	lr

08009634 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800963c:	bf00      	nop
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	bc80      	pop	{r7}
 8009644:	4770      	bx	lr

08009646 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800964e:	bf00      	nop
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	bc80      	pop	{r7}
 8009656:	4770      	bx	lr

08009658 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	bc80      	pop	{r7}
 8009668:	4770      	bx	lr
	...

0800966c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a2f      	ldr	r2, [pc, #188]	@ (800973c <TIM_Base_SetConfig+0xd0>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d00b      	beq.n	800969c <TIM_Base_SetConfig+0x30>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800968a:	d007      	beq.n	800969c <TIM_Base_SetConfig+0x30>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a2c      	ldr	r2, [pc, #176]	@ (8009740 <TIM_Base_SetConfig+0xd4>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d003      	beq.n	800969c <TIM_Base_SetConfig+0x30>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a2b      	ldr	r2, [pc, #172]	@ (8009744 <TIM_Base_SetConfig+0xd8>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d108      	bne.n	80096ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a22      	ldr	r2, [pc, #136]	@ (800973c <TIM_Base_SetConfig+0xd0>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d00b      	beq.n	80096ce <TIM_Base_SetConfig+0x62>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096bc:	d007      	beq.n	80096ce <TIM_Base_SetConfig+0x62>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a1f      	ldr	r2, [pc, #124]	@ (8009740 <TIM_Base_SetConfig+0xd4>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d003      	beq.n	80096ce <TIM_Base_SetConfig+0x62>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a1e      	ldr	r2, [pc, #120]	@ (8009744 <TIM_Base_SetConfig+0xd8>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d108      	bne.n	80096e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	4313      	orrs	r3, r2
 80096de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	689a      	ldr	r2, [r3, #8]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a0d      	ldr	r2, [pc, #52]	@ (800973c <TIM_Base_SetConfig+0xd0>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d103      	bne.n	8009714 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	691a      	ldr	r2, [r3, #16]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	2b00      	cmp	r3, #0
 8009724:	d005      	beq.n	8009732 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	f023 0201 	bic.w	r2, r3, #1
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	611a      	str	r2, [r3, #16]
  }
}
 8009732:	bf00      	nop
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	bc80      	pop	{r7}
 800973a:	4770      	bx	lr
 800973c:	40012c00 	.word	0x40012c00
 8009740:	40000400 	.word	0x40000400
 8009744:	40000800 	.word	0x40000800

08009748 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009748:	b480      	push	{r7}
 800974a:	b087      	sub	sp, #28
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a1b      	ldr	r3, [r3, #32]
 800975c:	f023 0201 	bic.w	r2, r3, #1
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f023 0303 	bic.w	r3, r3, #3
 800977e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	4313      	orrs	r3, r2
 8009788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f023 0302 	bic.w	r3, r3, #2
 8009790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	4313      	orrs	r3, r2
 800979a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a1c      	ldr	r2, [pc, #112]	@ (8009810 <TIM_OC1_SetConfig+0xc8>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d10c      	bne.n	80097be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f023 0308 	bic.w	r3, r3, #8
 80097aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	f023 0304 	bic.w	r3, r3, #4
 80097bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4a13      	ldr	r2, [pc, #76]	@ (8009810 <TIM_OC1_SetConfig+0xc8>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d111      	bne.n	80097ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80097d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	4313      	orrs	r3, r2
 80097de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	685a      	ldr	r2, [r3, #4]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	697a      	ldr	r2, [r7, #20]
 8009802:	621a      	str	r2, [r3, #32]
}
 8009804:	bf00      	nop
 8009806:	371c      	adds	r7, #28
 8009808:	46bd      	mov	sp, r7
 800980a:	bc80      	pop	{r7}
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	40012c00 	.word	0x40012c00

08009814 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009814:	b480      	push	{r7}
 8009816:	b087      	sub	sp, #28
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a1b      	ldr	r3, [r3, #32]
 8009828:	f023 0210 	bic.w	r2, r3, #16
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800984a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	021b      	lsls	r3, r3, #8
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	4313      	orrs	r3, r2
 8009856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	f023 0320 	bic.w	r3, r3, #32
 800985e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	011b      	lsls	r3, r3, #4
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	4313      	orrs	r3, r2
 800986a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a1d      	ldr	r2, [pc, #116]	@ (80098e4 <TIM_OC2_SetConfig+0xd0>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d10d      	bne.n	8009890 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800987a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	011b      	lsls	r3, r3, #4
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800988e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a14      	ldr	r2, [pc, #80]	@ (80098e4 <TIM_OC2_SetConfig+0xd0>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d113      	bne.n	80098c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800989e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80098a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	4313      	orrs	r3, r2
 80098be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	621a      	str	r2, [r3, #32]
}
 80098da:	bf00      	nop
 80098dc:	371c      	adds	r7, #28
 80098de:	46bd      	mov	sp, r7
 80098e0:	bc80      	pop	{r7}
 80098e2:	4770      	bx	lr
 80098e4:	40012c00 	.word	0x40012c00

080098e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a1b      	ldr	r3, [r3, #32]
 80098f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a1b      	ldr	r3, [r3, #32]
 80098fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	69db      	ldr	r3, [r3, #28]
 800990e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f023 0303 	bic.w	r3, r3, #3
 800991e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	4313      	orrs	r3, r2
 8009928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	021b      	lsls	r3, r3, #8
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	4313      	orrs	r3, r2
 800993c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a1d      	ldr	r2, [pc, #116]	@ (80099b8 <TIM_OC3_SetConfig+0xd0>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d10d      	bne.n	8009962 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800994c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	021b      	lsls	r3, r3, #8
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	4313      	orrs	r3, r2
 8009958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a14      	ldr	r2, [pc, #80]	@ (80099b8 <TIM_OC3_SetConfig+0xd0>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d113      	bne.n	8009992 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	011b      	lsls	r3, r3, #4
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	4313      	orrs	r3, r2
 8009984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	011b      	lsls	r3, r3, #4
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	4313      	orrs	r3, r2
 8009990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	621a      	str	r2, [r3, #32]
}
 80099ac:	bf00      	nop
 80099ae:	371c      	adds	r7, #28
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bc80      	pop	{r7}
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	40012c00 	.word	0x40012c00

080099bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099bc:	b480      	push	{r7}
 80099be:	b087      	sub	sp, #28
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a1b      	ldr	r3, [r3, #32]
 80099d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	69db      	ldr	r3, [r3, #28]
 80099e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	021b      	lsls	r3, r3, #8
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	031b      	lsls	r3, r3, #12
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a0f      	ldr	r2, [pc, #60]	@ (8009a54 <TIM_OC4_SetConfig+0x98>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d109      	bne.n	8009a30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	695b      	ldr	r3, [r3, #20]
 8009a28:	019b      	lsls	r3, r3, #6
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	685a      	ldr	r2, [r3, #4]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	621a      	str	r2, [r3, #32]
}
 8009a4a:	bf00      	nop
 8009a4c:	371c      	adds	r7, #28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bc80      	pop	{r7}
 8009a52:	4770      	bx	lr
 8009a54:	40012c00 	.word	0x40012c00

08009a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b087      	sub	sp, #28
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6a1b      	ldr	r3, [r3, #32]
 8009a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6a1b      	ldr	r3, [r3, #32]
 8009a6e:	f023 0201 	bic.w	r2, r3, #1
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	011b      	lsls	r3, r3, #4
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	f023 030a 	bic.w	r3, r3, #10
 8009a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	693a      	ldr	r2, [r7, #16]
 8009aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	621a      	str	r2, [r3, #32]
}
 8009aaa:	bf00      	nop
 8009aac:	371c      	adds	r7, #28
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bc80      	pop	{r7}
 8009ab2:	4770      	bx	lr

08009ab4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6a1b      	ldr	r3, [r3, #32]
 8009ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	f023 0210 	bic.w	r2, r3, #16
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	031b      	lsls	r3, r3, #12
 8009ae4:	693a      	ldr	r2, [r7, #16]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009af0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	011b      	lsls	r3, r3, #4
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	621a      	str	r2, [r3, #32]
}
 8009b08:	bf00      	nop
 8009b0a:	371c      	adds	r7, #28
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bc80      	pop	{r7}
 8009b10:	4770      	bx	lr

08009b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b085      	sub	sp, #20
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	f043 0307 	orr.w	r3, r3, #7
 8009b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	609a      	str	r2, [r3, #8]
}
 8009b3c:	bf00      	nop
 8009b3e:	3714      	adds	r7, #20
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bc80      	pop	{r7}
 8009b44:	4770      	bx	lr

08009b46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b087      	sub	sp, #28
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	60f8      	str	r0, [r7, #12]
 8009b4e:	60b9      	str	r1, [r7, #8]
 8009b50:	607a      	str	r2, [r7, #4]
 8009b52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	021a      	lsls	r2, r3, #8
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	431a      	orrs	r2, r3
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	609a      	str	r2, [r3, #8]
}
 8009b7a:	bf00      	nop
 8009b7c:	371c      	adds	r7, #28
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bc80      	pop	{r7}
 8009b82:	4770      	bx	lr

08009b84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	f003 031f 	and.w	r3, r3, #31
 8009b96:	2201      	movs	r2, #1
 8009b98:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6a1a      	ldr	r2, [r3, #32]
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	43db      	mvns	r3, r3
 8009ba6:	401a      	ands	r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6a1a      	ldr	r2, [r3, #32]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	f003 031f 	and.w	r3, r3, #31
 8009bb6:	6879      	ldr	r1, [r7, #4]
 8009bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bbc:	431a      	orrs	r2, r3
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	621a      	str	r2, [r3, #32]
}
 8009bc2:	bf00      	nop
 8009bc4:	371c      	adds	r7, #28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bc80      	pop	{r7}
 8009bca:	4770      	bx	lr

08009bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d101      	bne.n	8009be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009be0:	2302      	movs	r3, #2
 8009be2:	e046      	b.n	8009c72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2202      	movs	r2, #2
 8009bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a16      	ldr	r2, [pc, #88]	@ (8009c7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d00e      	beq.n	8009c46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c30:	d009      	beq.n	8009c46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a12      	ldr	r2, [pc, #72]	@ (8009c80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d004      	beq.n	8009c46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a10      	ldr	r2, [pc, #64]	@ (8009c84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d10c      	bne.n	8009c60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3714      	adds	r7, #20
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bc80      	pop	{r7}
 8009c7a:	4770      	bx	lr
 8009c7c:	40012c00 	.word	0x40012c00
 8009c80:	40000400 	.word	0x40000400
 8009c84:	40000800 	.word	0x40000800

08009c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bc80      	pop	{r7}
 8009c98:	4770      	bx	lr

08009c9a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b083      	sub	sp, #12
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ca2:	bf00      	nop
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bc80      	pop	{r7}
 8009caa:	4770      	bx	lr

08009cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d101      	bne.n	8009cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e042      	b.n	8009d44 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d106      	bne.n	8009cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7f9 fe04 	bl	80038e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2224      	movs	r2, #36	@ 0x24
 8009cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fd83 	bl	800a7fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	691a      	ldr	r2, [r3, #16]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	695a      	ldr	r2, [r3, #20]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68da      	ldr	r2, [r3, #12]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2220      	movs	r2, #32
 8009d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d101      	bne.n	8009d5e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e024      	b.n	8009da8 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2224      	movs	r2, #36	@ 0x24
 8009d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68da      	ldr	r2, [r3, #12]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009d74:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7f9 fe3e 	bl	80039f8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3708      	adds	r7, #8
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b08a      	sub	sp, #40	@ 0x28
 8009db4:	af02      	add	r7, sp, #8
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	603b      	str	r3, [r7, #0]
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	2b20      	cmp	r3, #32
 8009dce:	d175      	bne.n	8009ebc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d002      	beq.n	8009ddc <HAL_UART_Transmit+0x2c>
 8009dd6:	88fb      	ldrh	r3, [r7, #6]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e06e      	b.n	8009ebe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2221      	movs	r2, #33	@ 0x21
 8009dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009dee:	f7fa f807 	bl	8003e00 <HAL_GetTick>
 8009df2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	88fa      	ldrh	r2, [r7, #6]
 8009df8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	88fa      	ldrh	r2, [r7, #6]
 8009dfe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e08:	d108      	bne.n	8009e1c <HAL_UART_Transmit+0x6c>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d104      	bne.n	8009e1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	61bb      	str	r3, [r7, #24]
 8009e1a:	e003      	b.n	8009e24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e20:	2300      	movs	r3, #0
 8009e22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009e24:	e02e      	b.n	8009e84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	2180      	movs	r1, #128	@ 0x80
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f000 faef 	bl	800a414 <UART_WaitOnFlagUntilTimeout>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d005      	beq.n	8009e48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2220      	movs	r2, #32
 8009e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e03a      	b.n	8009ebe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10b      	bne.n	8009e66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	881b      	ldrh	r3, [r3, #0]
 8009e52:	461a      	mov	r2, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	3302      	adds	r3, #2
 8009e62:	61bb      	str	r3, [r7, #24]
 8009e64:	e007      	b.n	8009e76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	781a      	ldrb	r2, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	3301      	adds	r3, #1
 8009e74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1cb      	bne.n	8009e26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	9300      	str	r3, [sp, #0]
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2200      	movs	r2, #0
 8009e96:	2140      	movs	r1, #64	@ 0x40
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 fabb 	bl	800a414 <UART_WaitOnFlagUntilTimeout>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d005      	beq.n	8009eb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2220      	movs	r2, #32
 8009ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009eac:	2303      	movs	r3, #3
 8009eae:	e006      	b.n	8009ebe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2220      	movs	r2, #32
 8009eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	e000      	b.n	8009ebe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009ebc:	2302      	movs	r3, #2
  }
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3720      	adds	r7, #32
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
	...

08009ec8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b0ba      	sub	sp, #232	@ 0xe8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009efe:	f003 030f 	and.w	r3, r3, #15
 8009f02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10f      	bne.n	8009f2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f12:	f003 0320 	and.w	r3, r3, #32
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d009      	beq.n	8009f2e <HAL_UART_IRQHandler+0x66>
 8009f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f1e:	f003 0320 	and.w	r3, r3, #32
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d003      	beq.n	8009f2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fbaa 	bl	800a680 <UART_Receive_IT>
      return;
 8009f2c:	e25b      	b.n	800a3e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 80de 	beq.w	800a0f4 <HAL_UART_IRQHandler+0x22c>
 8009f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f3c:	f003 0301 	and.w	r3, r3, #1
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d106      	bne.n	8009f52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 80d1 	beq.w	800a0f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00b      	beq.n	8009f76 <HAL_UART_IRQHandler+0xae>
 8009f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d005      	beq.n	8009f76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f6e:	f043 0201 	orr.w	r2, r3, #1
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f7a:	f003 0304 	and.w	r3, r3, #4
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00b      	beq.n	8009f9a <HAL_UART_IRQHandler+0xd2>
 8009f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d005      	beq.n	8009f9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f92:	f043 0202 	orr.w	r2, r3, #2
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f9e:	f003 0302 	and.w	r3, r3, #2
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00b      	beq.n	8009fbe <HAL_UART_IRQHandler+0xf6>
 8009fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009faa:	f003 0301 	and.w	r3, r3, #1
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d005      	beq.n	8009fbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fb6:	f043 0204 	orr.w	r2, r3, #4
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fc2:	f003 0308 	and.w	r3, r3, #8
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d011      	beq.n	8009fee <HAL_UART_IRQHandler+0x126>
 8009fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fce:	f003 0320 	and.w	r3, r3, #32
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d105      	bne.n	8009fe2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d005      	beq.n	8009fee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fe6:	f043 0208 	orr.w	r2, r3, #8
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f000 81f2 	beq.w	800a3dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ffc:	f003 0320 	and.w	r3, r3, #32
 800a000:	2b00      	cmp	r3, #0
 800a002:	d008      	beq.n	800a016 <HAL_UART_IRQHandler+0x14e>
 800a004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a008:	f003 0320 	and.w	r3, r3, #32
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d002      	beq.n	800a016 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fb35 	bl	800a680 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	695b      	ldr	r3, [r3, #20]
 800a01c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a020:	2b00      	cmp	r3, #0
 800a022:	bf14      	ite	ne
 800a024:	2301      	movne	r3, #1
 800a026:	2300      	moveq	r3, #0
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a032:	f003 0308 	and.w	r3, r3, #8
 800a036:	2b00      	cmp	r3, #0
 800a038:	d103      	bne.n	800a042 <HAL_UART_IRQHandler+0x17a>
 800a03a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d04f      	beq.n	800a0e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 fa3f 	bl	800a4c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a052:	2b00      	cmp	r3, #0
 800a054:	d041      	beq.n	800a0da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3314      	adds	r3, #20
 800a05c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a060:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a064:	e853 3f00 	ldrex	r3, [r3]
 800a068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a06c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3314      	adds	r3, #20
 800a07e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a082:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a086:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a08e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a092:	e841 2300 	strex	r3, r2, [r1]
 800a096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a09a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1d9      	bne.n	800a056 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d013      	beq.n	800a0d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0ae:	4a7e      	ldr	r2, [pc, #504]	@ (800a2a8 <HAL_UART_IRQHandler+0x3e0>)
 800a0b0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fa f84a 	bl	8004150 <HAL_DMA_Abort_IT>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d016      	beq.n	800a0f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0d0:	e00e      	b.n	800a0f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f98a 	bl	800a3ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0d8:	e00a      	b.n	800a0f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f986 	bl	800a3ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0e0:	e006      	b.n	800a0f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f982 	bl	800a3ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a0ee:	e175      	b.n	800a3dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f0:	bf00      	nop
    return;
 800a0f2:	e173      	b.n	800a3dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	f040 814f 	bne.w	800a39c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a0fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a102:	f003 0310 	and.w	r3, r3, #16
 800a106:	2b00      	cmp	r3, #0
 800a108:	f000 8148 	beq.w	800a39c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a10c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a110:	f003 0310 	and.w	r3, r3, #16
 800a114:	2b00      	cmp	r3, #0
 800a116:	f000 8141 	beq.w	800a39c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a11a:	2300      	movs	r3, #0
 800a11c:	60bb      	str	r3, [r7, #8]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	60bb      	str	r3, [r7, #8]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	60bb      	str	r3, [r7, #8]
 800a12e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	695b      	ldr	r3, [r3, #20]
 800a136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 80b6 	beq.w	800a2ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a14c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a150:	2b00      	cmp	r3, #0
 800a152:	f000 8145 	beq.w	800a3e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a15a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a15e:	429a      	cmp	r2, r3
 800a160:	f080 813e 	bcs.w	800a3e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a16a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	2b20      	cmp	r3, #32
 800a174:	f000 8088 	beq.w	800a288 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	330c      	adds	r3, #12
 800a17e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a182:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a186:	e853 3f00 	ldrex	r3, [r3]
 800a18a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a18e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a192:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a196:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	330c      	adds	r3, #12
 800a1a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a1a4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a1a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a1b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a1b4:	e841 2300 	strex	r3, r2, [r1]
 800a1b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a1bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1d9      	bne.n	800a178 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	3314      	adds	r3, #20
 800a1ca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a1ce:	e853 3f00 	ldrex	r3, [r3]
 800a1d2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a1d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1d6:	f023 0301 	bic.w	r3, r3, #1
 800a1da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	3314      	adds	r3, #20
 800a1e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a1e8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a1ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a1f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a1f4:	e841 2300 	strex	r3, r2, [r1]
 800a1f8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a1fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1e1      	bne.n	800a1c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3314      	adds	r3, #20
 800a206:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a208:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a20a:	e853 3f00 	ldrex	r3, [r3]
 800a20e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a210:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a216:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3314      	adds	r3, #20
 800a220:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a224:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a226:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a228:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a22a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a22c:	e841 2300 	strex	r3, r2, [r1]
 800a230:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a232:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1e3      	bne.n	800a200 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2220      	movs	r2, #32
 800a23c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	330c      	adds	r3, #12
 800a24c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a250:	e853 3f00 	ldrex	r3, [r3]
 800a254:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a258:	f023 0310 	bic.w	r3, r3, #16
 800a25c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	330c      	adds	r3, #12
 800a266:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a26a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a26c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a270:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a272:	e841 2300 	strex	r3, r2, [r1]
 800a276:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a278:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d1e3      	bne.n	800a246 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a282:	4618      	mov	r0, r3
 800a284:	f7f9 ff29 	bl	80040da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a296:	b29b      	uxth	r3, r3
 800a298:	1ad3      	subs	r3, r2, r3
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	4619      	mov	r1, r3
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f8ad 	bl	800a3fe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a2a4:	e09c      	b.n	800a3e0 <HAL_UART_IRQHandler+0x518>
 800a2a6:	bf00      	nop
 800a2a8:	0800a58b 	.word	0x0800a58b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f000 808e 	beq.w	800a3e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a2c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f000 8089 	beq.w	800a3e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	330c      	adds	r3, #12
 800a2d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2dc:	e853 3f00 	ldrex	r3, [r3]
 800a2e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	330c      	adds	r3, #12
 800a2f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a2f6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a2f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a2fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2fe:	e841 2300 	strex	r3, r2, [r1]
 800a302:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1e3      	bne.n	800a2d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	3314      	adds	r3, #20
 800a310:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a314:	e853 3f00 	ldrex	r3, [r3]
 800a318:	623b      	str	r3, [r7, #32]
   return(result);
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	f023 0301 	bic.w	r3, r3, #1
 800a320:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	3314      	adds	r3, #20
 800a32a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a32e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a330:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a336:	e841 2300 	strex	r3, r2, [r1]
 800a33a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1e3      	bne.n	800a30a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2220      	movs	r2, #32
 800a346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	330c      	adds	r3, #12
 800a356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	e853 3f00 	ldrex	r3, [r3]
 800a35e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f023 0310 	bic.w	r3, r3, #16
 800a366:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	330c      	adds	r3, #12
 800a370:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a374:	61fa      	str	r2, [r7, #28]
 800a376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a378:	69b9      	ldr	r1, [r7, #24]
 800a37a:	69fa      	ldr	r2, [r7, #28]
 800a37c:	e841 2300 	strex	r3, r2, [r1]
 800a380:	617b      	str	r3, [r7, #20]
   return(result);
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1e3      	bne.n	800a350 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2202      	movs	r2, #2
 800a38c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a38e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f832 	bl	800a3fe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a39a:	e023      	b.n	800a3e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a39c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d009      	beq.n	800a3bc <HAL_UART_IRQHandler+0x4f4>
 800a3a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d003      	beq.n	800a3bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f8fc 	bl	800a5b2 <UART_Transmit_IT>
    return;
 800a3ba:	e014      	b.n	800a3e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a3bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00e      	beq.n	800a3e6 <HAL_UART_IRQHandler+0x51e>
 800a3c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d008      	beq.n	800a3e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 f93b 	bl	800a650 <UART_EndTransmit_IT>
    return;
 800a3da:	e004      	b.n	800a3e6 <HAL_UART_IRQHandler+0x51e>
    return;
 800a3dc:	bf00      	nop
 800a3de:	e002      	b.n	800a3e6 <HAL_UART_IRQHandler+0x51e>
      return;
 800a3e0:	bf00      	nop
 800a3e2:	e000      	b.n	800a3e6 <HAL_UART_IRQHandler+0x51e>
      return;
 800a3e4:	bf00      	nop
  }
}
 800a3e6:	37e8      	adds	r7, #232	@ 0xe8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bc80      	pop	{r7}
 800a3fc:	4770      	bx	lr

0800a3fe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3fe:	b480      	push	{r7}
 800a400:	b083      	sub	sp, #12
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	460b      	mov	r3, r1
 800a408:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a40a:	bf00      	nop
 800a40c:	370c      	adds	r7, #12
 800a40e:	46bd      	mov	sp, r7
 800a410:	bc80      	pop	{r7}
 800a412:	4770      	bx	lr

0800a414 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	603b      	str	r3, [r7, #0]
 800a420:	4613      	mov	r3, r2
 800a422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a424:	e03b      	b.n	800a49e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a42c:	d037      	beq.n	800a49e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a42e:	f7f9 fce7 	bl	8003e00 <HAL_GetTick>
 800a432:	4602      	mov	r2, r0
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	6a3a      	ldr	r2, [r7, #32]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d302      	bcc.n	800a444 <UART_WaitOnFlagUntilTimeout+0x30>
 800a43e:	6a3b      	ldr	r3, [r7, #32]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d101      	bne.n	800a448 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	e03a      	b.n	800a4be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	f003 0304 	and.w	r3, r3, #4
 800a452:	2b00      	cmp	r3, #0
 800a454:	d023      	beq.n	800a49e <UART_WaitOnFlagUntilTimeout+0x8a>
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2b80      	cmp	r3, #128	@ 0x80
 800a45a:	d020      	beq.n	800a49e <UART_WaitOnFlagUntilTimeout+0x8a>
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2b40      	cmp	r3, #64	@ 0x40
 800a460:	d01d      	beq.n	800a49e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 0308 	and.w	r3, r3, #8
 800a46c:	2b08      	cmp	r3, #8
 800a46e:	d116      	bne.n	800a49e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a470:	2300      	movs	r3, #0
 800a472:	617b      	str	r3, [r7, #20]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	617b      	str	r3, [r7, #20]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	617b      	str	r3, [r7, #20]
 800a484:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f000 f81d 	bl	800a4c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2208      	movs	r2, #8
 800a490:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e00f      	b.n	800a4be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	bf0c      	ite	eq
 800a4ae:	2301      	moveq	r3, #1
 800a4b0:	2300      	movne	r3, #0
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	79fb      	ldrb	r3, [r7, #7]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d0b4      	beq.n	800a426 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3718      	adds	r7, #24
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b095      	sub	sp, #84	@ 0x54
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	330c      	adds	r3, #12
 800a4d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d8:	e853 3f00 	ldrex	r3, [r3]
 800a4dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	330c      	adds	r3, #12
 800a4ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a4ee:	643a      	str	r2, [r7, #64]	@ 0x40
 800a4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4f6:	e841 2300 	strex	r3, r2, [r1]
 800a4fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1e5      	bne.n	800a4ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	3314      	adds	r3, #20
 800a508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50a:	6a3b      	ldr	r3, [r7, #32]
 800a50c:	e853 3f00 	ldrex	r3, [r3]
 800a510:	61fb      	str	r3, [r7, #28]
   return(result);
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	f023 0301 	bic.w	r3, r3, #1
 800a518:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3314      	adds	r3, #20
 800a520:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a524:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a526:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a52a:	e841 2300 	strex	r3, r2, [r1]
 800a52e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1e5      	bne.n	800a502 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d119      	bne.n	800a572 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	330c      	adds	r3, #12
 800a544:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	e853 3f00 	ldrex	r3, [r3]
 800a54c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	f023 0310 	bic.w	r3, r3, #16
 800a554:	647b      	str	r3, [r7, #68]	@ 0x44
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	330c      	adds	r3, #12
 800a55c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a55e:	61ba      	str	r2, [r7, #24]
 800a560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a562:	6979      	ldr	r1, [r7, #20]
 800a564:	69ba      	ldr	r2, [r7, #24]
 800a566:	e841 2300 	strex	r3, r2, [r1]
 800a56a:	613b      	str	r3, [r7, #16]
   return(result);
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1e5      	bne.n	800a53e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2220      	movs	r2, #32
 800a576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a580:	bf00      	nop
 800a582:	3754      	adds	r7, #84	@ 0x54
 800a584:	46bd      	mov	sp, r7
 800a586:	bc80      	pop	{r7}
 800a588:	4770      	bx	lr

0800a58a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a596:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f7ff ff21 	bl	800a3ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5aa:	bf00      	nop
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b085      	sub	sp, #20
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	2b21      	cmp	r3, #33	@ 0x21
 800a5c4:	d13e      	bne.n	800a644 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5ce:	d114      	bne.n	800a5fa <UART_Transmit_IT+0x48>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d110      	bne.n	800a5fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a1b      	ldr	r3, [r3, #32]
 800a5dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a1b      	ldr	r3, [r3, #32]
 800a5f2:	1c9a      	adds	r2, r3, #2
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	621a      	str	r2, [r3, #32]
 800a5f8:	e008      	b.n	800a60c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a1b      	ldr	r3, [r3, #32]
 800a5fe:	1c59      	adds	r1, r3, #1
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	6211      	str	r1, [r2, #32]
 800a604:	781a      	ldrb	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a610:	b29b      	uxth	r3, r3
 800a612:	3b01      	subs	r3, #1
 800a614:	b29b      	uxth	r3, r3
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	4619      	mov	r1, r3
 800a61a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10f      	bne.n	800a640 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68da      	ldr	r2, [r3, #12]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a62e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a63e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	e000      	b.n	800a646 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a644:	2302      	movs	r3, #2
  }
}
 800a646:	4618      	mov	r0, r3
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bc80      	pop	{r7}
 800a64e:	4770      	bx	lr

0800a650 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68da      	ldr	r2, [r3, #12]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a666:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2220      	movs	r2, #32
 800a66c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7f7 fa25 	bl	8001ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b08c      	sub	sp, #48	@ 0x30
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	2b22      	cmp	r3, #34	@ 0x22
 800a692:	f040 80ae 	bne.w	800a7f2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a69e:	d117      	bne.n	800a6d0 <UART_Receive_IT+0x50>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d113      	bne.n	800a6d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c8:	1c9a      	adds	r2, r3, #2
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	629a      	str	r2, [r3, #40]	@ 0x28
 800a6ce:	e026      	b.n	800a71e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6e2:	d007      	beq.n	800a6f4 <UART_Receive_IT+0x74>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d10a      	bne.n	800a702 <UART_Receive_IT+0x82>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d106      	bne.n	800a702 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6fe:	701a      	strb	r2, [r3, #0]
 800a700:	e008      	b.n	800a714 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a712:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a718:	1c5a      	adds	r2, r3, #1
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a722:	b29b      	uxth	r3, r3
 800a724:	3b01      	subs	r3, #1
 800a726:	b29b      	uxth	r3, r3
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	4619      	mov	r1, r3
 800a72c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d15d      	bne.n	800a7ee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68da      	ldr	r2, [r3, #12]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f022 0220 	bic.w	r2, r2, #32
 800a740:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68da      	ldr	r2, [r3, #12]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a750:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	695a      	ldr	r2, [r3, #20]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f022 0201 	bic.w	r2, r2, #1
 800a760:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2220      	movs	r2, #32
 800a766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a774:	2b01      	cmp	r3, #1
 800a776:	d135      	bne.n	800a7e4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	330c      	adds	r3, #12
 800a784:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	e853 3f00 	ldrex	r3, [r3]
 800a78c:	613b      	str	r3, [r7, #16]
   return(result);
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	f023 0310 	bic.w	r3, r3, #16
 800a794:	627b      	str	r3, [r7, #36]	@ 0x24
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	330c      	adds	r3, #12
 800a79c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a79e:	623a      	str	r2, [r7, #32]
 800a7a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a2:	69f9      	ldr	r1, [r7, #28]
 800a7a4:	6a3a      	ldr	r2, [r7, #32]
 800a7a6:	e841 2300 	strex	r3, r2, [r1]
 800a7aa:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7ac:	69bb      	ldr	r3, [r7, #24]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1e5      	bne.n	800a77e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 0310 	and.w	r3, r3, #16
 800a7bc:	2b10      	cmp	r3, #16
 800a7be:	d10a      	bne.n	800a7d6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	60fb      	str	r3, [r7, #12]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	60fb      	str	r3, [r7, #12]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	60fb      	str	r3, [r7, #12]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7ff fe0e 	bl	800a3fe <HAL_UARTEx_RxEventCallback>
 800a7e2:	e002      	b.n	800a7ea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7f7 f961 	bl	8001aac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	e002      	b.n	800a7f4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	e000      	b.n	800a7f4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a7f2:	2302      	movs	r3, #2
  }
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3730      	adds	r7, #48	@ 0x30
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	68da      	ldr	r2, [r3, #12]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	430a      	orrs	r2, r1
 800a818:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	689a      	ldr	r2, [r3, #8]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	431a      	orrs	r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	695b      	ldr	r3, [r3, #20]
 800a828:	4313      	orrs	r3, r2
 800a82a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800a836:	f023 030c 	bic.w	r3, r3, #12
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	6812      	ldr	r2, [r2, #0]
 800a83e:	68b9      	ldr	r1, [r7, #8]
 800a840:	430b      	orrs	r3, r1
 800a842:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	699a      	ldr	r2, [r3, #24]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	430a      	orrs	r2, r1
 800a858:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a2c      	ldr	r2, [pc, #176]	@ (800a910 <UART_SetConfig+0x114>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d103      	bne.n	800a86c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a864:	f7fd f946 	bl	8007af4 <HAL_RCC_GetPCLK2Freq>
 800a868:	60f8      	str	r0, [r7, #12]
 800a86a:	e002      	b.n	800a872 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a86c:	f7fd f92e 	bl	8007acc <HAL_RCC_GetPCLK1Freq>
 800a870:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	4613      	mov	r3, r2
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	4413      	add	r3, r2
 800a87a:	009a      	lsls	r2, r3, #2
 800a87c:	441a      	add	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	fbb2 f3f3 	udiv	r3, r2, r3
 800a888:	4a22      	ldr	r2, [pc, #136]	@ (800a914 <UART_SetConfig+0x118>)
 800a88a:	fba2 2303 	umull	r2, r3, r2, r3
 800a88e:	095b      	lsrs	r3, r3, #5
 800a890:	0119      	lsls	r1, r3, #4
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	4613      	mov	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4413      	add	r3, r2
 800a89a:	009a      	lsls	r2, r3, #2
 800a89c:	441a      	add	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a8a8:	4b1a      	ldr	r3, [pc, #104]	@ (800a914 <UART_SetConfig+0x118>)
 800a8aa:	fba3 0302 	umull	r0, r3, r3, r2
 800a8ae:	095b      	lsrs	r3, r3, #5
 800a8b0:	2064      	movs	r0, #100	@ 0x64
 800a8b2:	fb00 f303 	mul.w	r3, r0, r3
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	011b      	lsls	r3, r3, #4
 800a8ba:	3332      	adds	r3, #50	@ 0x32
 800a8bc:	4a15      	ldr	r2, [pc, #84]	@ (800a914 <UART_SetConfig+0x118>)
 800a8be:	fba2 2303 	umull	r2, r3, r2, r3
 800a8c2:	095b      	lsrs	r3, r3, #5
 800a8c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a8c8:	4419      	add	r1, r3
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	4413      	add	r3, r2
 800a8d2:	009a      	lsls	r2, r3, #2
 800a8d4:	441a      	add	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	fbb2 f2f3 	udiv	r2, r2, r3
 800a8e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a914 <UART_SetConfig+0x118>)
 800a8e2:	fba3 0302 	umull	r0, r3, r3, r2
 800a8e6:	095b      	lsrs	r3, r3, #5
 800a8e8:	2064      	movs	r0, #100	@ 0x64
 800a8ea:	fb00 f303 	mul.w	r3, r0, r3
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	011b      	lsls	r3, r3, #4
 800a8f2:	3332      	adds	r3, #50	@ 0x32
 800a8f4:	4a07      	ldr	r2, [pc, #28]	@ (800a914 <UART_SetConfig+0x118>)
 800a8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8fa:	095b      	lsrs	r3, r3, #5
 800a8fc:	f003 020f 	and.w	r2, r3, #15
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	440a      	add	r2, r1
 800a906:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a908:	bf00      	nop
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	40013800 	.word	0x40013800
 800a914:	51eb851f 	.word	0x51eb851f

0800a918 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	4638      	mov	r0, r7
 800a922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3714      	adds	r7, #20
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bc80      	pop	{r7}
 800a930:	4770      	bx	lr

0800a932 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a932:	b480      	push	{r7}
 800a934:	b085      	sub	sp, #20
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a942:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800a946:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	bc80      	pop	{r7}
 800a95c:	4770      	bx	lr

0800a95e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a95e:	b480      	push	{r7}
 800a960:	b085      	sub	sp, #20
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a966:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800a96a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a972:	b29a      	uxth	r2, r3
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	b29b      	uxth	r3, r3
 800a978:	43db      	mvns	r3, r3
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	4013      	ands	r3, r2
 800a97e:	b29a      	uxth	r2, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3714      	adds	r7, #20
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bc80      	pop	{r7}
 800a990:	4770      	bx	lr

0800a992 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800a992:	b480      	push	{r7}
 800a994:	b083      	sub	sp, #12
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	460b      	mov	r3, r1
 800a99c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bc80      	pop	{r7}
 800a9a8:	4770      	bx	lr

0800a9aa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b085      	sub	sp, #20
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	60f8      	str	r0, [r7, #12]
 800a9b2:	4638      	mov	r0, r7
 800a9b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a9d8:	2300      	movs	r3, #0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bc80      	pop	{r7}
 800a9e2:	4770      	bx	lr

0800a9e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b09d      	sub	sp, #116	@ 0x74
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	4413      	add	r3, r2
 800a9fe:	881b      	ldrh	r3, [r3, #0]
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800aa06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa0a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	78db      	ldrb	r3, [r3, #3]
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	d81f      	bhi.n	800aa56 <USB_ActivateEndpoint+0x72>
 800aa16:	a201      	add	r2, pc, #4	@ (adr r2, 800aa1c <USB_ActivateEndpoint+0x38>)
 800aa18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1c:	0800aa2d 	.word	0x0800aa2d
 800aa20:	0800aa49 	.word	0x0800aa49
 800aa24:	0800aa5f 	.word	0x0800aa5f
 800aa28:	0800aa3b 	.word	0x0800aa3b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800aa2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800aa30:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800aa34:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800aa38:	e012      	b.n	800aa60 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800aa3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800aa3e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800aa42:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800aa46:	e00b      	b.n	800aa60 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800aa48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800aa4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800aa50:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800aa54:	e004      	b.n	800aa60 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800aa5c:	e000      	b.n	800aa60 <USB_ActivateEndpoint+0x7c>
      break;
 800aa5e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	441a      	add	r2, r3
 800aa6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800aa6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	4413      	add	r3, r2
 800aa8c:	881b      	ldrh	r3, [r3, #0]
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	683a      	ldr	r2, [r7, #0]
 800aa9c:	7812      	ldrb	r2, [r2, #0]
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	441a      	add	r2, r3
 800aaae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800aab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aaba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aabe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	7b1b      	ldrb	r3, [r3, #12]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f040 8178 	bne.w	800adc0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	785b      	ldrb	r3, [r3, #1]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f000 8084 	beq.w	800abe2 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	61bb      	str	r3, [r7, #24]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	461a      	mov	r2, r3
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	4413      	add	r3, r2
 800aaec:	61bb      	str	r3, [r7, #24]
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	011a      	lsls	r2, r3, #4
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aafc:	617b      	str	r3, [r7, #20]
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	88db      	ldrh	r3, [r3, #6]
 800ab02:	085b      	lsrs	r3, r3, #1
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	005b      	lsls	r3, r3, #1
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	881b      	ldrh	r3, [r3, #0]
 800ab1a:	827b      	strh	r3, [r7, #18]
 800ab1c:	8a7b      	ldrh	r3, [r7, #18]
 800ab1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d01b      	beq.n	800ab5e <USB_ActivateEndpoint+0x17a>
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	4413      	add	r3, r2
 800ab30:	881b      	ldrh	r3, [r3, #0]
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab3c:	823b      	strh	r3, [r7, #16]
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	441a      	add	r2, r3
 800ab48:	8a3b      	ldrh	r3, [r7, #16]
 800ab4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	78db      	ldrb	r3, [r3, #3]
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d020      	beq.n	800aba8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	4413      	add	r3, r2
 800ab70:	881b      	ldrh	r3, [r3, #0]
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab7c:	81bb      	strh	r3, [r7, #12]
 800ab7e:	89bb      	ldrh	r3, [r7, #12]
 800ab80:	f083 0320 	eor.w	r3, r3, #32
 800ab84:	81bb      	strh	r3, [r7, #12]
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	441a      	add	r2, r3
 800ab90:	89bb      	ldrh	r3, [r7, #12]
 800ab92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	8013      	strh	r3, [r2, #0]
 800aba6:	e2d5      	b.n	800b154 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	4413      	add	r3, r2
 800abb2:	881b      	ldrh	r3, [r3, #0]
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abbe:	81fb      	strh	r3, [r7, #14]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	441a      	add	r2, r3
 800abca:	89fb      	ldrh	r3, [r7, #14]
 800abcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abdc:	b29b      	uxth	r3, r3
 800abde:	8013      	strh	r3, [r2, #0]
 800abe0:	e2b8      	b.n	800b154 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	633b      	str	r3, [r7, #48]	@ 0x30
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abec:	b29b      	uxth	r3, r3
 800abee:	461a      	mov	r2, r3
 800abf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf2:	4413      	add	r3, r2
 800abf4:	633b      	str	r3, [r7, #48]	@ 0x30
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	011a      	lsls	r2, r3, #4
 800abfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfe:	4413      	add	r3, r2
 800ac00:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800ac04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	88db      	ldrh	r3, [r3, #6]
 800ac0a:	085b      	lsrs	r3, r3, #1
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	005b      	lsls	r3, r3, #1
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac14:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	461a      	mov	r2, r3
 800ac24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac26:	4413      	add	r3, r2
 800ac28:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	011a      	lsls	r2, r3, #4
 800ac30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac32:	4413      	add	r3, r2
 800ac34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ac38:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac48:	801a      	strh	r2, [r3, #0]
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac50:	d91d      	bls.n	800ac8e <USB_ActivateEndpoint+0x2aa>
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	095b      	lsrs	r3, r3, #5
 800ac58:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	691b      	ldr	r3, [r3, #16]
 800ac5e:	f003 031f 	and.w	r3, r3, #31
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d102      	bne.n	800ac6c <USB_ActivateEndpoint+0x288>
 800ac66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6e:	881b      	ldrh	r3, [r3, #0]
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	029b      	lsls	r3, r3, #10
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8a:	801a      	strh	r2, [r3, #0]
 800ac8c:	e026      	b.n	800acdc <USB_ActivateEndpoint+0x2f8>
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d10a      	bne.n	800acac <USB_ActivateEndpoint+0x2c8>
 800ac96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac98:	881b      	ldrh	r3, [r3, #0]
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aca4:	b29a      	uxth	r2, r3
 800aca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca8:	801a      	strh	r2, [r3, #0]
 800acaa:	e017      	b.n	800acdc <USB_ActivateEndpoint+0x2f8>
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	085b      	lsrs	r3, r3, #1
 800acb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	f003 0301 	and.w	r3, r3, #1
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <USB_ActivateEndpoint+0x2e2>
 800acc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800acc2:	3301      	adds	r3, #1
 800acc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	b29a      	uxth	r2, r3
 800accc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800acce:	b29b      	uxth	r3, r3
 800acd0:	029b      	lsls	r3, r3, #10
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	4313      	orrs	r3, r2
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acda:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	847b      	strh	r3, [r7, #34]	@ 0x22
 800acea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800acec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d01b      	beq.n	800ad2c <USB_ActivateEndpoint+0x348>
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4413      	add	r3, r2
 800acfe:	881b      	ldrh	r3, [r3, #0]
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad0a:	843b      	strh	r3, [r7, #32]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	441a      	add	r2, r3
 800ad16:	8c3b      	ldrh	r3, [r7, #32]
 800ad18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ad24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d124      	bne.n	800ad7e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4413      	add	r3, r2
 800ad3e:	881b      	ldrh	r3, [r3, #0]
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad4a:	83bb      	strh	r3, [r7, #28]
 800ad4c:	8bbb      	ldrh	r3, [r7, #28]
 800ad4e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ad52:	83bb      	strh	r3, [r7, #28]
 800ad54:	8bbb      	ldrh	r3, [r7, #28]
 800ad56:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ad5a:	83bb      	strh	r3, [r7, #28]
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	441a      	add	r2, r3
 800ad66:	8bbb      	ldrh	r3, [r7, #28]
 800ad68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	8013      	strh	r3, [r2, #0]
 800ad7c:	e1ea      	b.n	800b154 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	881b      	ldrh	r3, [r3, #0]
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad94:	83fb      	strh	r3, [r7, #30]
 800ad96:	8bfb      	ldrh	r3, [r7, #30]
 800ad98:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ad9c:	83fb      	strh	r3, [r7, #30]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	441a      	add	r2, r3
 800ada8:	8bfb      	ldrh	r3, [r7, #30]
 800adaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adba:	b29b      	uxth	r3, r3
 800adbc:	8013      	strh	r3, [r2, #0]
 800adbe:	e1c9      	b.n	800b154 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	78db      	ldrb	r3, [r3, #3]
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d11e      	bne.n	800ae06 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4413      	add	r3, r2
 800add2:	881b      	ldrh	r3, [r3, #0]
 800add4:	b29b      	uxth	r3, r3
 800add6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800adda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adde:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	441a      	add	r2, r3
 800adec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800adf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adf8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800adfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	8013      	strh	r3, [r2, #0]
 800ae04:	e01d      	b.n	800ae42 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	881b      	ldrh	r3, [r3, #0]
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ae18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae1c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	441a      	add	r2, r3
 800ae2a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800ae2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	461a      	mov	r2, r3
 800ae50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae52:	4413      	add	r3, r2
 800ae54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	011a      	lsls	r2, r3, #4
 800ae5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae5e:	4413      	add	r3, r2
 800ae60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae64:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	891b      	ldrh	r3, [r3, #8]
 800ae6a:	085b      	lsrs	r3, r3, #1
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	005b      	lsls	r3, r3, #1
 800ae70:	b29a      	uxth	r2, r3
 800ae72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae74:	801a      	strh	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	657b      	str	r3, [r7, #84]	@ 0x54
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	461a      	mov	r2, r3
 800ae84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae86:	4413      	add	r3, r2
 800ae88:	657b      	str	r3, [r7, #84]	@ 0x54
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	011a      	lsls	r2, r3, #4
 800ae90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae92:	4413      	add	r3, r2
 800ae94:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800ae98:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	895b      	ldrh	r3, [r3, #10]
 800ae9e:	085b      	lsrs	r3, r3, #1
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	005b      	lsls	r3, r3, #1
 800aea4:	b29a      	uxth	r2, r3
 800aea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aea8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	785b      	ldrb	r3, [r3, #1]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f040 8093 	bne.w	800afda <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800aec4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800aec8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d01b      	beq.n	800af08 <USB_ActivateEndpoint+0x524>
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	881b      	ldrh	r3, [r3, #0]
 800aedc:	b29b      	uxth	r3, r3
 800aede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aee6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	441a      	add	r2, r3
 800aef2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800aef4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aef8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aefc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800af00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af04:	b29b      	uxth	r3, r3
 800af06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	881b      	ldrh	r3, [r3, #0]
 800af14:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800af16:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800af18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d01b      	beq.n	800af58 <USB_ActivateEndpoint+0x574>
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	4413      	add	r3, r2
 800af2a:	881b      	ldrh	r3, [r3, #0]
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af36:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	441a      	add	r2, r3
 800af42:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800af44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800af54:	b29b      	uxth	r3, r3
 800af56:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	4413      	add	r3, r2
 800af62:	881b      	ldrh	r3, [r3, #0]
 800af64:	b29b      	uxth	r3, r3
 800af66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af6e:	873b      	strh	r3, [r7, #56]	@ 0x38
 800af70:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800af72:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800af76:	873b      	strh	r3, [r7, #56]	@ 0x38
 800af78:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800af7a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800af7e:	873b      	strh	r3, [r7, #56]	@ 0x38
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	441a      	add	r2, r3
 800af8a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800af8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	4413      	add	r3, r2
 800afaa:	881b      	ldrh	r3, [r3, #0]
 800afac:	b29b      	uxth	r3, r3
 800afae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afb6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	441a      	add	r2, r3
 800afc2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800afc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	8013      	strh	r3, [r2, #0]
 800afd8:	e0bc      	b.n	800b154 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	881b      	ldrh	r3, [r3, #0]
 800afe6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800afea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800afee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d01d      	beq.n	800b032 <USB_ActivateEndpoint+0x64e>
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	4413      	add	r3, r2
 800b000:	881b      	ldrh	r3, [r3, #0]
 800b002:	b29b      	uxth	r3, r3
 800b004:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b00c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	441a      	add	r2, r3
 800b01a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800b01e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b022:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b026:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b02a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b02e:	b29b      	uxth	r3, r3
 800b030:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4413      	add	r3, r2
 800b03c:	881b      	ldrh	r3, [r3, #0]
 800b03e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800b042:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d01d      	beq.n	800b08a <USB_ActivateEndpoint+0x6a6>
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	4413      	add	r3, r2
 800b058:	881b      	ldrh	r3, [r3, #0]
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b064:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	441a      	add	r2, r3
 800b072:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800b076:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b07a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b07e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b082:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b086:	b29b      	uxth	r3, r3
 800b088:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	78db      	ldrb	r3, [r3, #3]
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d024      	beq.n	800b0dc <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	881b      	ldrh	r3, [r3, #0]
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0a8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800b0ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b0b0:	f083 0320 	eor.w	r3, r3, #32
 800b0b4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	441a      	add	r2, r3
 800b0c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b0c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	8013      	strh	r3, [r2, #0]
 800b0da:	e01d      	b.n	800b118 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	881b      	ldrh	r3, [r3, #0]
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	441a      	add	r2, r3
 800b100:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b10c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b114:	b29b      	uxth	r3, r3
 800b116:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	881b      	ldrh	r3, [r3, #0]
 800b124:	b29b      	uxth	r3, r3
 800b126:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b12a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b12e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	441a      	add	r2, r3
 800b13c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b140:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b144:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b14c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b150:	b29b      	uxth	r3, r3
 800b152:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b154:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3774      	adds	r7, #116	@ 0x74
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bc80      	pop	{r7}
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop

0800b164 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b164:	b480      	push	{r7}
 800b166:	b08d      	sub	sp, #52	@ 0x34
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	7b1b      	ldrb	r3, [r3, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	f040 808e 	bne.w	800b294 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	785b      	ldrb	r3, [r3, #1]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d044      	beq.n	800b20a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4413      	add	r3, r2
 800b18a:	881b      	ldrh	r3, [r3, #0]
 800b18c:	81bb      	strh	r3, [r7, #12]
 800b18e:	89bb      	ldrh	r3, [r7, #12]
 800b190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b194:	2b00      	cmp	r3, #0
 800b196:	d01b      	beq.n	800b1d0 <USB_DeactivateEndpoint+0x6c>
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4413      	add	r3, r2
 800b1a2:	881b      	ldrh	r3, [r3, #0]
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1ae:	817b      	strh	r3, [r7, #10]
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	441a      	add	r2, r3
 800b1ba:	897b      	ldrh	r3, [r7, #10]
 800b1bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4413      	add	r3, r2
 800b1da:	881b      	ldrh	r3, [r3, #0]
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1e6:	813b      	strh	r3, [r7, #8]
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	441a      	add	r2, r3
 800b1f2:	893b      	ldrh	r3, [r7, #8]
 800b1f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b204:	b29b      	uxth	r3, r3
 800b206:	8013      	strh	r3, [r2, #0]
 800b208:	e192      	b.n	800b530 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	4413      	add	r3, r2
 800b214:	881b      	ldrh	r3, [r3, #0]
 800b216:	827b      	strh	r3, [r7, #18]
 800b218:	8a7b      	ldrh	r3, [r7, #18]
 800b21a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d01b      	beq.n	800b25a <USB_DeactivateEndpoint+0xf6>
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	4413      	add	r3, r2
 800b22c:	881b      	ldrh	r3, [r3, #0]
 800b22e:	b29b      	uxth	r3, r3
 800b230:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b238:	823b      	strh	r3, [r7, #16]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	441a      	add	r2, r3
 800b244:	8a3b      	ldrh	r3, [r7, #16]
 800b246:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b24a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b24e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b256:	b29b      	uxth	r3, r3
 800b258:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	4413      	add	r3, r2
 800b264:	881b      	ldrh	r3, [r3, #0]
 800b266:	b29b      	uxth	r3, r3
 800b268:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b26c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b270:	81fb      	strh	r3, [r7, #14]
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	441a      	add	r2, r3
 800b27c:	89fb      	ldrh	r3, [r7, #14]
 800b27e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b282:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b28a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b28e:	b29b      	uxth	r3, r3
 800b290:	8013      	strh	r3, [r2, #0]
 800b292:	e14d      	b.n	800b530 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	785b      	ldrb	r3, [r3, #1]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f040 80a5 	bne.w	800b3e8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4413      	add	r3, r2
 800b2a8:	881b      	ldrh	r3, [r3, #0]
 800b2aa:	843b      	strh	r3, [r7, #32]
 800b2ac:	8c3b      	ldrh	r3, [r7, #32]
 800b2ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d01b      	beq.n	800b2ee <USB_DeactivateEndpoint+0x18a>
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	881b      	ldrh	r3, [r3, #0]
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2cc:	83fb      	strh	r3, [r7, #30]
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	441a      	add	r2, r3
 800b2d8:	8bfb      	ldrh	r3, [r7, #30]
 800b2da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b2e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	4413      	add	r3, r2
 800b2f8:	881b      	ldrh	r3, [r3, #0]
 800b2fa:	83bb      	strh	r3, [r7, #28]
 800b2fc:	8bbb      	ldrh	r3, [r7, #28]
 800b2fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b302:	2b00      	cmp	r3, #0
 800b304:	d01b      	beq.n	800b33e <USB_DeactivateEndpoint+0x1da>
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	4413      	add	r3, r2
 800b310:	881b      	ldrh	r3, [r3, #0]
 800b312:	b29b      	uxth	r3, r3
 800b314:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b31c:	837b      	strh	r3, [r7, #26]
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	441a      	add	r2, r3
 800b328:	8b7b      	ldrh	r3, [r7, #26]
 800b32a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b32e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b336:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	881b      	ldrh	r3, [r3, #0]
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b350:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b354:	833b      	strh	r3, [r7, #24]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	441a      	add	r2, r3
 800b360:	8b3b      	ldrh	r3, [r7, #24]
 800b362:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b366:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b36a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b36e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b372:	b29b      	uxth	r3, r3
 800b374:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	4413      	add	r3, r2
 800b380:	881b      	ldrh	r3, [r3, #0]
 800b382:	b29b      	uxth	r3, r3
 800b384:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b38c:	82fb      	strh	r3, [r7, #22]
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	441a      	add	r2, r3
 800b398:	8afb      	ldrh	r3, [r7, #22]
 800b39a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b39e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b3a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	881b      	ldrh	r3, [r3, #0]
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3c4:	82bb      	strh	r3, [r7, #20]
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	441a      	add	r2, r3
 800b3d0:	8abb      	ldrh	r3, [r7, #20]
 800b3d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b3d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b3da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	8013      	strh	r3, [r2, #0]
 800b3e6:	e0a3      	b.n	800b530 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	881b      	ldrh	r3, [r3, #0]
 800b3f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b3f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b3f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d01b      	beq.n	800b438 <USB_DeactivateEndpoint+0x2d4>
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	881b      	ldrh	r3, [r3, #0]
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b416:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	441a      	add	r2, r3
 800b422:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b424:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b428:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b42c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b434:	b29b      	uxth	r3, r3
 800b436:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	4413      	add	r3, r2
 800b442:	881b      	ldrh	r3, [r3, #0]
 800b444:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800b446:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d01b      	beq.n	800b488 <USB_DeactivateEndpoint+0x324>
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	4413      	add	r3, r2
 800b45a:	881b      	ldrh	r3, [r3, #0]
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b466:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	441a      	add	r2, r3
 800b472:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b474:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b478:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b47c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b480:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b484:	b29b      	uxth	r3, r3
 800b486:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4413      	add	r3, r2
 800b492:	881b      	ldrh	r3, [r3, #0]
 800b494:	b29b      	uxth	r3, r3
 800b496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b49a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b49e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	441a      	add	r2, r3
 800b4aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b4ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b4b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	4413      	add	r3, r2
 800b4ca:	881b      	ldrh	r3, [r3, #0]
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	441a      	add	r2, r3
 800b4e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	4413      	add	r3, r2
 800b502:	881b      	ldrh	r3, [r3, #0]
 800b504:	b29b      	uxth	r3, r3
 800b506:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b50a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b50e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	441a      	add	r2, r3
 800b51a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b51c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b520:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b524:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3734      	adds	r7, #52	@ 0x34
 800b536:	46bd      	mov	sp, r7
 800b538:	bc80      	pop	{r7}
 800b53a:	4770      	bx	lr

0800b53c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b0c2      	sub	sp, #264	@ 0x108
 800b540:	af00      	add	r7, sp, #0
 800b542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b546:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b54a:	6018      	str	r0, [r3, #0]
 800b54c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b554:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b55a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	785b      	ldrb	r3, [r3, #1]
 800b562:	2b01      	cmp	r3, #1
 800b564:	f040 86b7 	bne.w	800c2d6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b56c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	699a      	ldr	r2, [r3, #24]
 800b574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	429a      	cmp	r2, r3
 800b582:	d908      	bls.n	800b596 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b594:	e007      	b.n	800b5a6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b59a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	699b      	ldr	r3, [r3, #24]
 800b5a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b5a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	7b1b      	ldrb	r3, [r3, #12]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d13a      	bne.n	800b62c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b5b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	6959      	ldr	r1, [r3, #20]
 800b5c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	88da      	ldrh	r2, [r3, #6]
 800b5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b5d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b5dc:	6800      	ldr	r0, [r0, #0]
 800b5de:	f001 fc9c 	bl	800cf1a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b5e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	613b      	str	r3, [r7, #16]
 800b5ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	461a      	mov	r2, r3
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	4413      	add	r3, r2
 800b604:	613b      	str	r3, [r7, #16]
 800b606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b60a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	011a      	lsls	r2, r3, #4
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	4413      	add	r3, r2
 800b618:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b61c:	60fb      	str	r3, [r7, #12]
 800b61e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b622:	b29a      	uxth	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	801a      	strh	r2, [r3, #0]
 800b628:	f000 be1f 	b.w	800c26a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b62c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	78db      	ldrb	r3, [r3, #3]
 800b638:	2b02      	cmp	r3, #2
 800b63a:	f040 8462 	bne.w	800bf02 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b63e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6a1a      	ldr	r2, [r3, #32]
 800b64a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b64e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	429a      	cmp	r2, r3
 800b658:	f240 83df 	bls.w	800be1a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b65c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b660:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b66a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4413      	add	r3, r2
 800b676:	881b      	ldrh	r3, [r3, #0]
 800b678:	b29b      	uxth	r3, r3
 800b67a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b67e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b682:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b68a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	441a      	add	r2, r3
 800b6a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b6a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6ac:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b6b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b6b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	6a1a      	ldr	r2, [r3, #32]
 800b6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6c8:	1ad2      	subs	r2, r2, r3
 800b6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b6d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	4413      	add	r3, r2
 800b6f0:	881b      	ldrh	r3, [r3, #0]
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f000 81c7 	beq.w	800ba8c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b6fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b702:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	633b      	str	r3, [r7, #48]	@ 0x30
 800b70a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b70e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	785b      	ldrb	r3, [r3, #1]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d177      	bne.n	800b80a <USB_EPStartXfer+0x2ce>
 800b71a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b71e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b72a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b734:	b29b      	uxth	r3, r3
 800b736:	461a      	mov	r2, r3
 800b738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b73a:	4413      	add	r3, r2
 800b73c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b73e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	011a      	lsls	r2, r3, #4
 800b74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b74e:	4413      	add	r3, r2
 800b750:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b754:	627b      	str	r3, [r7, #36]	@ 0x24
 800b756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b758:	881b      	ldrh	r3, [r3, #0]
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b760:	b29a      	uxth	r2, r3
 800b762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b764:	801a      	strh	r2, [r3, #0]
 800b766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b76a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b76c:	d921      	bls.n	800b7b2 <USB_EPStartXfer+0x276>
 800b76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b772:	095b      	lsrs	r3, r3, #5
 800b774:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b77c:	f003 031f 	and.w	r3, r3, #31
 800b780:	2b00      	cmp	r3, #0
 800b782:	d104      	bne.n	800b78e <USB_EPStartXfer+0x252>
 800b784:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b788:	3b01      	subs	r3, #1
 800b78a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b790:	881b      	ldrh	r3, [r3, #0]
 800b792:	b29a      	uxth	r2, r3
 800b794:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b798:	b29b      	uxth	r3, r3
 800b79a:	029b      	lsls	r3, r3, #10
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ae:	801a      	strh	r2, [r3, #0]
 800b7b0:	e050      	b.n	800b854 <USB_EPStartXfer+0x318>
 800b7b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10a      	bne.n	800b7d0 <USB_EPStartXfer+0x294>
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7bc:	881b      	ldrh	r3, [r3, #0]
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7c8:	b29a      	uxth	r2, r3
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7cc:	801a      	strh	r2, [r3, #0]
 800b7ce:	e041      	b.n	800b854 <USB_EPStartXfer+0x318>
 800b7d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7d4:	085b      	lsrs	r3, r3, #1
 800b7d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7de:	f003 0301 	and.w	r3, r3, #1
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d004      	beq.n	800b7f0 <USB_EPStartXfer+0x2b4>
 800b7e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	029b      	lsls	r3, r3, #10
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	4313      	orrs	r3, r2
 800b802:	b29a      	uxth	r2, r3
 800b804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b806:	801a      	strh	r2, [r3, #0]
 800b808:	e024      	b.n	800b854 <USB_EPStartXfer+0x318>
 800b80a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b80e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	785b      	ldrb	r3, [r3, #1]
 800b816:	2b01      	cmp	r3, #1
 800b818:	d11c      	bne.n	800b854 <USB_EPStartXfer+0x318>
 800b81a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b81e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b828:	b29b      	uxth	r3, r3
 800b82a:	461a      	mov	r2, r3
 800b82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b82e:	4413      	add	r3, r2
 800b830:	633b      	str	r3, [r7, #48]	@ 0x30
 800b832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	011a      	lsls	r2, r3, #4
 800b840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b842:	4413      	add	r3, r2
 800b844:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b84e:	b29a      	uxth	r2, r3
 800b850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b852:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	895b      	ldrh	r3, [r3, #10]
 800b860:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b868:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	6959      	ldr	r1, [r3, #20]
 800b870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b874:	b29b      	uxth	r3, r3
 800b876:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b87a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b87e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b882:	6800      	ldr	r0, [r0, #0]
 800b884:	f001 fb49 	bl	800cf1a <USB_WritePMA>
            ep->xfer_buff += len;
 800b888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b88c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	695a      	ldr	r2, [r3, #20]
 800b894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b898:	441a      	add	r2, r3
 800b89a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b89e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b8a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	6a1a      	ldr	r2, [r3, #32]
 800b8b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	691b      	ldr	r3, [r3, #16]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d90f      	bls.n	800b8e2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b8c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	6a1a      	ldr	r2, [r3, #32]
 800b8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8d2:	1ad2      	subs	r2, r2, r3
 800b8d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	621a      	str	r2, [r3, #32]
 800b8e0:	e00e      	b.n	800b900 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b8e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	6a1b      	ldr	r3, [r3, #32]
 800b8ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b8f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	785b      	ldrb	r3, [r3, #1]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d177      	bne.n	800ba00 <USB_EPStartXfer+0x4c4>
 800b910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b914:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	61bb      	str	r3, [r7, #24]
 800b91c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b920:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	461a      	mov	r2, r3
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	4413      	add	r3, r2
 800b932:	61bb      	str	r3, [r7, #24]
 800b934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	011a      	lsls	r2, r3, #4
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	4413      	add	r3, r2
 800b946:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b94a:	617b      	str	r3, [r7, #20]
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	881b      	ldrh	r3, [r3, #0]
 800b950:	b29b      	uxth	r3, r3
 800b952:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b956:	b29a      	uxth	r2, r3
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	801a      	strh	r2, [r3, #0]
 800b95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b960:	2b3e      	cmp	r3, #62	@ 0x3e
 800b962:	d921      	bls.n	800b9a8 <USB_EPStartXfer+0x46c>
 800b964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b968:	095b      	lsrs	r3, r3, #5
 800b96a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b96e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b972:	f003 031f 	and.w	r3, r3, #31
 800b976:	2b00      	cmp	r3, #0
 800b978:	d104      	bne.n	800b984 <USB_EPStartXfer+0x448>
 800b97a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b97e:	3b01      	subs	r3, #1
 800b980:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	881b      	ldrh	r3, [r3, #0]
 800b988:	b29a      	uxth	r2, r3
 800b98a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b98e:	b29b      	uxth	r3, r3
 800b990:	029b      	lsls	r3, r3, #10
 800b992:	b29b      	uxth	r3, r3
 800b994:	4313      	orrs	r3, r2
 800b996:	b29b      	uxth	r3, r3
 800b998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b99c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	801a      	strh	r2, [r3, #0]
 800b9a6:	e056      	b.n	800ba56 <USB_EPStartXfer+0x51a>
 800b9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10a      	bne.n	800b9c6 <USB_EPStartXfer+0x48a>
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	881b      	ldrh	r3, [r3, #0]
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	801a      	strh	r2, [r3, #0]
 800b9c4:	e047      	b.n	800ba56 <USB_EPStartXfer+0x51a>
 800b9c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9ca:	085b      	lsrs	r3, r3, #1
 800b9cc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9d4:	f003 0301 	and.w	r3, r3, #1
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d004      	beq.n	800b9e6 <USB_EPStartXfer+0x4aa>
 800b9dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	881b      	ldrh	r3, [r3, #0]
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	029b      	lsls	r3, r3, #10
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	801a      	strh	r2, [r3, #0]
 800b9fe:	e02a      	b.n	800ba56 <USB_EPStartXfer+0x51a>
 800ba00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	785b      	ldrb	r3, [r3, #1]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d122      	bne.n	800ba56 <USB_EPStartXfer+0x51a>
 800ba10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	623b      	str	r3, [r7, #32]
 800ba1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	6a3b      	ldr	r3, [r7, #32]
 800ba30:	4413      	add	r3, r2
 800ba32:	623b      	str	r3, [r7, #32]
 800ba34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	011a      	lsls	r2, r3, #4
 800ba42:	6a3b      	ldr	r3, [r7, #32]
 800ba44:	4413      	add	r3, r2
 800ba46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ba4a:	61fb      	str	r3, [r7, #28]
 800ba4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ba56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	891b      	ldrh	r3, [r3, #8]
 800ba62:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	6959      	ldr	r1, [r3, #20]
 800ba72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ba7c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ba80:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ba84:	6800      	ldr	r0, [r0, #0]
 800ba86:	f001 fa48 	bl	800cf1a <USB_WritePMA>
 800ba8a:	e3ee      	b.n	800c26a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ba8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	785b      	ldrb	r3, [r3, #1]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d177      	bne.n	800bb8c <USB_EPStartXfer+0x650>
 800ba9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baa0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800baa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	461a      	mov	r2, r3
 800baba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800babc:	4413      	add	r3, r2
 800babe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	011a      	lsls	r2, r3, #4
 800bace:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bad0:	4413      	add	r3, r2
 800bad2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bad6:	647b      	str	r3, [r7, #68]	@ 0x44
 800bad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bada:	881b      	ldrh	r3, [r3, #0]
 800badc:	b29b      	uxth	r3, r3
 800bade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bae6:	801a      	strh	r2, [r3, #0]
 800bae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baec:	2b3e      	cmp	r3, #62	@ 0x3e
 800baee:	d921      	bls.n	800bb34 <USB_EPStartXfer+0x5f8>
 800baf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baf4:	095b      	lsrs	r3, r3, #5
 800baf6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bafa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bafe:	f003 031f 	and.w	r3, r3, #31
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d104      	bne.n	800bb10 <USB_EPStartXfer+0x5d4>
 800bb06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bb10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb12:	881b      	ldrh	r3, [r3, #0]
 800bb14:	b29a      	uxth	r2, r3
 800bb16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	029b      	lsls	r3, r3, #10
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	4313      	orrs	r3, r2
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb2c:	b29a      	uxth	r2, r3
 800bb2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb30:	801a      	strh	r2, [r3, #0]
 800bb32:	e056      	b.n	800bbe2 <USB_EPStartXfer+0x6a6>
 800bb34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d10a      	bne.n	800bb52 <USB_EPStartXfer+0x616>
 800bb3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb3e:	881b      	ldrh	r3, [r3, #0]
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb4e:	801a      	strh	r2, [r3, #0]
 800bb50:	e047      	b.n	800bbe2 <USB_EPStartXfer+0x6a6>
 800bb52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb56:	085b      	lsrs	r3, r3, #1
 800bb58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bb5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb60:	f003 0301 	and.w	r3, r3, #1
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d004      	beq.n	800bb72 <USB_EPStartXfer+0x636>
 800bb68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bb72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb74:	881b      	ldrh	r3, [r3, #0]
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	029b      	lsls	r3, r3, #10
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	4313      	orrs	r3, r2
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb88:	801a      	strh	r2, [r3, #0]
 800bb8a:	e02a      	b.n	800bbe2 <USB_EPStartXfer+0x6a6>
 800bb8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	785b      	ldrb	r3, [r3, #1]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d122      	bne.n	800bbe2 <USB_EPStartXfer+0x6a6>
 800bb9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bba0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	653b      	str	r3, [r7, #80]	@ 0x50
 800bba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	461a      	mov	r2, r3
 800bbba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbbc:	4413      	add	r3, r2
 800bbbe:	653b      	str	r3, [r7, #80]	@ 0x50
 800bbc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	011a      	lsls	r2, r3, #4
 800bbce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbd0:	4413      	add	r3, r2
 800bbd2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bbd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbdc:	b29a      	uxth	r2, r3
 800bbde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbe0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bbe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	891b      	ldrh	r3, [r3, #8]
 800bbee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bbf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	6959      	ldr	r1, [r3, #20]
 800bbfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bc08:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bc0c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bc10:	6800      	ldr	r0, [r0, #0]
 800bc12:	f001 f982 	bl	800cf1a <USB_WritePMA>
            ep->xfer_buff += len;
 800bc16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	695a      	ldr	r2, [r3, #20]
 800bc22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc26:	441a      	add	r2, r3
 800bc28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bc34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	6a1a      	ldr	r2, [r3, #32]
 800bc40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d90f      	bls.n	800bc70 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800bc50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	6a1a      	ldr	r2, [r3, #32]
 800bc5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc60:	1ad2      	subs	r2, r2, r3
 800bc62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	621a      	str	r2, [r3, #32]
 800bc6e:	e00e      	b.n	800bc8e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800bc70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	6a1b      	ldr	r3, [r3, #32]
 800bc7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800bc80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bc8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	785b      	ldrb	r3, [r3, #1]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d177      	bne.n	800bd9a <USB_EPStartXfer+0x85e>
 800bcaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bcb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcca:	4413      	add	r3, r2
 800bccc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bcce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	011a      	lsls	r2, r3, #4
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcde:	4413      	add	r3, r2
 800bce0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bce4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bce8:	881b      	ldrh	r3, [r3, #0]
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcf4:	801a      	strh	r2, [r3, #0]
 800bcf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcfa:	2b3e      	cmp	r3, #62	@ 0x3e
 800bcfc:	d921      	bls.n	800bd42 <USB_EPStartXfer+0x806>
 800bcfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd02:	095b      	lsrs	r3, r3, #5
 800bd04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bd08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd0c:	f003 031f 	and.w	r3, r3, #31
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d104      	bne.n	800bd1e <USB_EPStartXfer+0x7e2>
 800bd14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bd1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd20:	881b      	ldrh	r3, [r3, #0]
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	029b      	lsls	r3, r3, #10
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd3a:	b29a      	uxth	r2, r3
 800bd3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd3e:	801a      	strh	r2, [r3, #0]
 800bd40:	e050      	b.n	800bde4 <USB_EPStartXfer+0x8a8>
 800bd42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d10a      	bne.n	800bd60 <USB_EPStartXfer+0x824>
 800bd4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd4c:	881b      	ldrh	r3, [r3, #0]
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd58:	b29a      	uxth	r2, r3
 800bd5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd5c:	801a      	strh	r2, [r3, #0]
 800bd5e:	e041      	b.n	800bde4 <USB_EPStartXfer+0x8a8>
 800bd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd64:	085b      	lsrs	r3, r3, #1
 800bd66:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bd6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd6e:	f003 0301 	and.w	r3, r3, #1
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d004      	beq.n	800bd80 <USB_EPStartXfer+0x844>
 800bd76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bd80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd82:	881b      	ldrh	r3, [r3, #0]
 800bd84:	b29a      	uxth	r2, r3
 800bd86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	029b      	lsls	r3, r3, #10
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	4313      	orrs	r3, r2
 800bd92:	b29a      	uxth	r2, r3
 800bd94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd96:	801a      	strh	r2, [r3, #0]
 800bd98:	e024      	b.n	800bde4 <USB_EPStartXfer+0x8a8>
 800bd9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	785b      	ldrb	r3, [r3, #1]
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d11c      	bne.n	800bde4 <USB_EPStartXfer+0x8a8>
 800bdaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	461a      	mov	r2, r3
 800bdbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdbe:	4413      	add	r3, r2
 800bdc0:	643b      	str	r3, [r7, #64]	@ 0x40
 800bdc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	011a      	lsls	r2, r3, #4
 800bdd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdd2:	4413      	add	r3, r2
 800bdd4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bdd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdde:	b29a      	uxth	r2, r3
 800bde0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bde2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bde4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bde8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	895b      	ldrh	r3, [r3, #10]
 800bdf0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bdf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	6959      	ldr	r1, [r3, #20]
 800be00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be04:	b29b      	uxth	r3, r3
 800be06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800be0a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800be0e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800be12:	6800      	ldr	r0, [r0, #0]
 800be14:	f001 f881 	bl	800cf1a <USB_WritePMA>
 800be18:	e227      	b.n	800c26a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800be1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	6a1b      	ldr	r3, [r3, #32]
 800be26:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800be2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	4413      	add	r3, r2
 800be44:	881b      	ldrh	r3, [r3, #0]
 800be46:	b29b      	uxth	r3, r3
 800be48:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800be4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be50:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800be54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	441a      	add	r2, r3
 800be6e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800be72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be82:	b29b      	uxth	r3, r3
 800be84:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800be86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800be92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	461a      	mov	r2, r3
 800bea4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bea6:	4413      	add	r3, r2
 800bea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800beaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800beae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	011a      	lsls	r2, r3, #4
 800beb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800beba:	4413      	add	r3, r2
 800bebc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bec0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bec6:	b29a      	uxth	r2, r3
 800bec8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800beca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800becc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	891b      	ldrh	r3, [r3, #8]
 800bed8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bedc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	6959      	ldr	r1, [r3, #20]
 800bee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beec:	b29b      	uxth	r3, r3
 800beee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bef2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bef6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800befa:	6800      	ldr	r0, [r0, #0]
 800befc:	f001 f80d 	bl	800cf1a <USB_WritePMA>
 800bf00:	e1b3      	b.n	800c26a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bf02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	6a1a      	ldr	r2, [r3, #32]
 800bf0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf12:	1ad2      	subs	r2, r2, r3
 800bf14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bf20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	4413      	add	r3, r2
 800bf3a:	881b      	ldrh	r3, [r3, #0]
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f000 80c6 	beq.w	800c0d4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bf48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	673b      	str	r3, [r7, #112]	@ 0x70
 800bf54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	785b      	ldrb	r3, [r3, #1]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d177      	bne.n	800c054 <USB_EPStartXfer+0xb18>
 800bf64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bf70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	461a      	mov	r2, r3
 800bf82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf84:	4413      	add	r3, r2
 800bf86:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bf88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	011a      	lsls	r2, r3, #4
 800bf96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf98:	4413      	add	r3, r2
 800bf9a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bf9e:	667b      	str	r3, [r7, #100]	@ 0x64
 800bfa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfa2:	881b      	ldrh	r3, [r3, #0]
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfae:	801a      	strh	r2, [r3, #0]
 800bfb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb4:	2b3e      	cmp	r3, #62	@ 0x3e
 800bfb6:	d921      	bls.n	800bffc <USB_EPStartXfer+0xac0>
 800bfb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfbc:	095b      	lsrs	r3, r3, #5
 800bfbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bfc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfc6:	f003 031f 	and.w	r3, r3, #31
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d104      	bne.n	800bfd8 <USB_EPStartXfer+0xa9c>
 800bfce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bfd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfda:	881b      	ldrh	r3, [r3, #0]
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	029b      	lsls	r3, r3, #10
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bff4:	b29a      	uxth	r2, r3
 800bff6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bff8:	801a      	strh	r2, [r3, #0]
 800bffa:	e050      	b.n	800c09e <USB_EPStartXfer+0xb62>
 800bffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10a      	bne.n	800c01a <USB_EPStartXfer+0xade>
 800c004:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c006:	881b      	ldrh	r3, [r3, #0]
 800c008:	b29b      	uxth	r3, r3
 800c00a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c00e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c012:	b29a      	uxth	r2, r3
 800c014:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c016:	801a      	strh	r2, [r3, #0]
 800c018:	e041      	b.n	800c09e <USB_EPStartXfer+0xb62>
 800c01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c01e:	085b      	lsrs	r3, r3, #1
 800c020:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c028:	f003 0301 	and.w	r3, r3, #1
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d004      	beq.n	800c03a <USB_EPStartXfer+0xafe>
 800c030:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c034:	3301      	adds	r3, #1
 800c036:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c03a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c03c:	881b      	ldrh	r3, [r3, #0]
 800c03e:	b29a      	uxth	r2, r3
 800c040:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c044:	b29b      	uxth	r3, r3
 800c046:	029b      	lsls	r3, r3, #10
 800c048:	b29b      	uxth	r3, r3
 800c04a:	4313      	orrs	r3, r2
 800c04c:	b29a      	uxth	r2, r3
 800c04e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c050:	801a      	strh	r2, [r3, #0]
 800c052:	e024      	b.n	800c09e <USB_EPStartXfer+0xb62>
 800c054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	785b      	ldrb	r3, [r3, #1]
 800c060:	2b01      	cmp	r3, #1
 800c062:	d11c      	bne.n	800c09e <USB_EPStartXfer+0xb62>
 800c064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c068:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c072:	b29b      	uxth	r3, r3
 800c074:	461a      	mov	r2, r3
 800c076:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c078:	4413      	add	r3, r2
 800c07a:	673b      	str	r3, [r7, #112]	@ 0x70
 800c07c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	011a      	lsls	r2, r3, #4
 800c08a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c08c:	4413      	add	r3, r2
 800c08e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c092:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c098:	b29a      	uxth	r2, r3
 800c09a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c09c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c09e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	895b      	ldrh	r3, [r3, #10]
 800c0aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c0ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	6959      	ldr	r1, [r3, #20]
 800c0ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c0c4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c0c8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c0cc:	6800      	ldr	r0, [r0, #0]
 800c0ce:	f000 ff24 	bl	800cf1a <USB_WritePMA>
 800c0d2:	e0ca      	b.n	800c26a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c0d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	785b      	ldrb	r3, [r3, #1]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d177      	bne.n	800c1d4 <USB_EPStartXfer+0xc98>
 800c0e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c0f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	461a      	mov	r2, r3
 800c102:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c104:	4413      	add	r3, r2
 800c106:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c10c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	011a      	lsls	r2, r3, #4
 800c116:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c118:	4413      	add	r3, r2
 800c11a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c11e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c120:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c122:	881b      	ldrh	r3, [r3, #0]
 800c124:	b29b      	uxth	r3, r3
 800c126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c12e:	801a      	strh	r2, [r3, #0]
 800c130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c134:	2b3e      	cmp	r3, #62	@ 0x3e
 800c136:	d921      	bls.n	800c17c <USB_EPStartXfer+0xc40>
 800c138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c13c:	095b      	lsrs	r3, r3, #5
 800c13e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c146:	f003 031f 	and.w	r3, r3, #31
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d104      	bne.n	800c158 <USB_EPStartXfer+0xc1c>
 800c14e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c152:	3b01      	subs	r3, #1
 800c154:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c158:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c15a:	881b      	ldrh	r3, [r3, #0]
 800c15c:	b29a      	uxth	r2, r3
 800c15e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c162:	b29b      	uxth	r3, r3
 800c164:	029b      	lsls	r3, r3, #10
 800c166:	b29b      	uxth	r3, r3
 800c168:	4313      	orrs	r3, r2
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c174:	b29a      	uxth	r2, r3
 800c176:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c178:	801a      	strh	r2, [r3, #0]
 800c17a:	e05c      	b.n	800c236 <USB_EPStartXfer+0xcfa>
 800c17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c180:	2b00      	cmp	r3, #0
 800c182:	d10a      	bne.n	800c19a <USB_EPStartXfer+0xc5e>
 800c184:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c186:	881b      	ldrh	r3, [r3, #0]
 800c188:	b29b      	uxth	r3, r3
 800c18a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c18e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c192:	b29a      	uxth	r2, r3
 800c194:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c196:	801a      	strh	r2, [r3, #0]
 800c198:	e04d      	b.n	800c236 <USB_EPStartXfer+0xcfa>
 800c19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c19e:	085b      	lsrs	r3, r3, #1
 800c1a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1a8:	f003 0301 	and.w	r3, r3, #1
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d004      	beq.n	800c1ba <USB_EPStartXfer+0xc7e>
 800c1b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c1ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1bc:	881b      	ldrh	r3, [r3, #0]
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	029b      	lsls	r3, r3, #10
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1d0:	801a      	strh	r2, [r3, #0]
 800c1d2:	e030      	b.n	800c236 <USB_EPStartXfer+0xcfa>
 800c1d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	785b      	ldrb	r3, [r3, #1]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d128      	bne.n	800c236 <USB_EPStartXfer+0xcfa>
 800c1e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c1f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c200:	b29b      	uxth	r3, r3
 800c202:	461a      	mov	r2, r3
 800c204:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c208:	4413      	add	r3, r2
 800c20a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c20e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	011a      	lsls	r2, r3, #4
 800c21c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c220:	4413      	add	r3, r2
 800c222:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c226:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c22a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c22e:	b29a      	uxth	r2, r3
 800c230:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c234:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c23a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	891b      	ldrh	r3, [r3, #8]
 800c242:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c24a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	6959      	ldr	r1, [r3, #20]
 800c252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c256:	b29b      	uxth	r3, r3
 800c258:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c25c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c260:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c264:	6800      	ldr	r0, [r0, #0]
 800c266:	f000 fe58 	bl	800cf1a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c26a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c26e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	881b      	ldrh	r3, [r3, #0]
 800c286:	b29b      	uxth	r3, r3
 800c288:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c28c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c290:	817b      	strh	r3, [r7, #10]
 800c292:	897b      	ldrh	r3, [r7, #10]
 800c294:	f083 0310 	eor.w	r3, r3, #16
 800c298:	817b      	strh	r3, [r7, #10]
 800c29a:	897b      	ldrh	r3, [r7, #10]
 800c29c:	f083 0320 	eor.w	r3, r3, #32
 800c2a0:	817b      	strh	r3, [r7, #10]
 800c2a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	441a      	add	r2, r3
 800c2bc:	897b      	ldrh	r3, [r7, #10]
 800c2be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	8013      	strh	r3, [r2, #0]
 800c2d2:	f000 bcde 	b.w	800cc92 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c2d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	7b1b      	ldrb	r3, [r3, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f040 80bb 	bne.w	800c45e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c2e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	699a      	ldr	r2, [r3, #24]
 800c2f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	429a      	cmp	r2, r3
 800c302:	d917      	bls.n	800c334 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800c314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	699a      	ldr	r2, [r3, #24]
 800c320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c324:	1ad2      	subs	r2, r2, r3
 800c326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c32a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	619a      	str	r2, [r3, #24]
 800c332:	e00e      	b.n	800c352 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	699b      	ldr	r3, [r3, #24]
 800c340:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800c344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2200      	movs	r2, #0
 800c350:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c356:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c364:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c36e:	b29b      	uxth	r3, r3
 800c370:	461a      	mov	r2, r3
 800c372:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c376:	4413      	add	r3, r2
 800c378:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c37c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	011a      	lsls	r2, r3, #4
 800c38a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c38e:	4413      	add	r3, r2
 800c390:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c394:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c398:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c39c:	881b      	ldrh	r3, [r3, #0]
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c3aa:	801a      	strh	r2, [r3, #0]
 800c3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b0:	2b3e      	cmp	r3, #62	@ 0x3e
 800c3b2:	d924      	bls.n	800c3fe <USB_EPStartXfer+0xec2>
 800c3b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b8:	095b      	lsrs	r3, r3, #5
 800c3ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3c2:	f003 031f 	and.w	r3, r3, #31
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d104      	bne.n	800c3d4 <USB_EPStartXfer+0xe98>
 800c3ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c3d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c3d8:	881b      	ldrh	r3, [r3, #0]
 800c3da:	b29a      	uxth	r2, r3
 800c3dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	029b      	lsls	r3, r3, #10
 800c3e4:	b29b      	uxth	r3, r3
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3f2:	b29a      	uxth	r2, r3
 800c3f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c3f8:	801a      	strh	r2, [r3, #0]
 800c3fa:	f000 bc10 	b.w	800cc1e <USB_EPStartXfer+0x16e2>
 800c3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c402:	2b00      	cmp	r3, #0
 800c404:	d10c      	bne.n	800c420 <USB_EPStartXfer+0xee4>
 800c406:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c40a:	881b      	ldrh	r3, [r3, #0]
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c416:	b29a      	uxth	r2, r3
 800c418:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c41c:	801a      	strh	r2, [r3, #0]
 800c41e:	e3fe      	b.n	800cc1e <USB_EPStartXfer+0x16e2>
 800c420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c424:	085b      	lsrs	r3, r3, #1
 800c426:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c42e:	f003 0301 	and.w	r3, r3, #1
 800c432:	2b00      	cmp	r3, #0
 800c434:	d004      	beq.n	800c440 <USB_EPStartXfer+0xf04>
 800c436:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c43a:	3301      	adds	r3, #1
 800c43c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c440:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c444:	881b      	ldrh	r3, [r3, #0]
 800c446:	b29a      	uxth	r2, r3
 800c448:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	029b      	lsls	r3, r3, #10
 800c450:	b29b      	uxth	r3, r3
 800c452:	4313      	orrs	r3, r2
 800c454:	b29a      	uxth	r2, r3
 800c456:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c45a:	801a      	strh	r2, [r3, #0]
 800c45c:	e3df      	b.n	800cc1e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c45e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	78db      	ldrb	r3, [r3, #3]
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	f040 8218 	bne.w	800c8a0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	785b      	ldrb	r3, [r3, #1]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f040 809d 	bne.w	800c5bc <USB_EPStartXfer+0x1080>
 800c482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c486:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c494:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4a6:	4413      	add	r3, r2
 800c4a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c4ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	011a      	lsls	r2, r3, #4
 800c4ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4be:	4413      	add	r3, r2
 800c4c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c4c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c4c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c4cc:	881b      	ldrh	r3, [r3, #0]
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4d4:	b29a      	uxth	r2, r3
 800c4d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c4da:	801a      	strh	r2, [r3, #0]
 800c4dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	691b      	ldr	r3, [r3, #16]
 800c4e8:	2b3e      	cmp	r3, #62	@ 0x3e
 800c4ea:	d92b      	bls.n	800c544 <USB_EPStartXfer+0x1008>
 800c4ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	691b      	ldr	r3, [r3, #16]
 800c4f8:	095b      	lsrs	r3, r3, #5
 800c4fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c4fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	f003 031f 	and.w	r3, r3, #31
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d104      	bne.n	800c51c <USB_EPStartXfer+0xfe0>
 800c512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c516:	3b01      	subs	r3, #1
 800c518:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c51c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c520:	881b      	ldrh	r3, [r3, #0]
 800c522:	b29a      	uxth	r2, r3
 800c524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c528:	b29b      	uxth	r3, r3
 800c52a:	029b      	lsls	r3, r3, #10
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	4313      	orrs	r3, r2
 800c530:	b29b      	uxth	r3, r3
 800c532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c53a:	b29a      	uxth	r2, r3
 800c53c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c540:	801a      	strh	r2, [r3, #0]
 800c542:	e070      	b.n	800c626 <USB_EPStartXfer+0x10ea>
 800c544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	691b      	ldr	r3, [r3, #16]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d10c      	bne.n	800c56e <USB_EPStartXfer+0x1032>
 800c554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c558:	881b      	ldrh	r3, [r3, #0]
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c564:	b29a      	uxth	r2, r3
 800c566:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c56a:	801a      	strh	r2, [r3, #0]
 800c56c:	e05b      	b.n	800c626 <USB_EPStartXfer+0x10ea>
 800c56e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	691b      	ldr	r3, [r3, #16]
 800c57a:	085b      	lsrs	r3, r3, #1
 800c57c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	f003 0301 	and.w	r3, r3, #1
 800c590:	2b00      	cmp	r3, #0
 800c592:	d004      	beq.n	800c59e <USB_EPStartXfer+0x1062>
 800c594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c598:	3301      	adds	r3, #1
 800c59a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c59e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c5a2:	881b      	ldrh	r3, [r3, #0]
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	029b      	lsls	r3, r3, #10
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	b29a      	uxth	r2, r3
 800c5b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c5b8:	801a      	strh	r2, [r3, #0]
 800c5ba:	e034      	b.n	800c626 <USB_EPStartXfer+0x10ea>
 800c5bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	785b      	ldrb	r3, [r3, #1]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d12c      	bne.n	800c626 <USB_EPStartXfer+0x10ea>
 800c5cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c5da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c5f0:	4413      	add	r3, r2
 800c5f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c5f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	011a      	lsls	r2, r3, #4
 800c604:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c608:	4413      	add	r3, r2
 800c60a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c60e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	b29a      	uxth	r2, r3
 800c620:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c624:	801a      	strh	r2, [r3, #0]
 800c626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c62a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	785b      	ldrb	r3, [r3, #1]
 800c640:	2b00      	cmp	r3, #0
 800c642:	f040 809d 	bne.w	800c780 <USB_EPStartXfer+0x1244>
 800c646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c64a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c658:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c662:	b29b      	uxth	r3, r3
 800c664:	461a      	mov	r2, r3
 800c666:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c66a:	4413      	add	r3, r2
 800c66c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	011a      	lsls	r2, r3, #4
 800c67e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c682:	4413      	add	r3, r2
 800c684:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c688:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c68c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c690:	881b      	ldrh	r3, [r3, #0]
 800c692:	b29b      	uxth	r3, r3
 800c694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c698:	b29a      	uxth	r2, r3
 800c69a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c69e:	801a      	strh	r2, [r3, #0]
 800c6a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	691b      	ldr	r3, [r3, #16]
 800c6ac:	2b3e      	cmp	r3, #62	@ 0x3e
 800c6ae:	d92b      	bls.n	800c708 <USB_EPStartXfer+0x11cc>
 800c6b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	095b      	lsrs	r3, r3, #5
 800c6be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c6c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	f003 031f 	and.w	r3, r3, #31
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d104      	bne.n	800c6e0 <USB_EPStartXfer+0x11a4>
 800c6d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c6e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c6e4:	881b      	ldrh	r3, [r3, #0]
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	029b      	lsls	r3, r3, #10
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c704:	801a      	strh	r2, [r3, #0]
 800c706:	e069      	b.n	800c7dc <USB_EPStartXfer+0x12a0>
 800c708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c70c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d10c      	bne.n	800c732 <USB_EPStartXfer+0x11f6>
 800c718:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	b29b      	uxth	r3, r3
 800c720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c728:	b29a      	uxth	r2, r3
 800c72a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c72e:	801a      	strh	r2, [r3, #0]
 800c730:	e054      	b.n	800c7dc <USB_EPStartXfer+0x12a0>
 800c732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	691b      	ldr	r3, [r3, #16]
 800c73e:	085b      	lsrs	r3, r3, #1
 800c740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	691b      	ldr	r3, [r3, #16]
 800c750:	f003 0301 	and.w	r3, r3, #1
 800c754:	2b00      	cmp	r3, #0
 800c756:	d004      	beq.n	800c762 <USB_EPStartXfer+0x1226>
 800c758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c75c:	3301      	adds	r3, #1
 800c75e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c762:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c766:	881b      	ldrh	r3, [r3, #0]
 800c768:	b29a      	uxth	r2, r3
 800c76a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c76e:	b29b      	uxth	r3, r3
 800c770:	029b      	lsls	r3, r3, #10
 800c772:	b29b      	uxth	r3, r3
 800c774:	4313      	orrs	r3, r2
 800c776:	b29a      	uxth	r2, r3
 800c778:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c77c:	801a      	strh	r2, [r3, #0]
 800c77e:	e02d      	b.n	800c7dc <USB_EPStartXfer+0x12a0>
 800c780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	785b      	ldrb	r3, [r3, #1]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d125      	bne.n	800c7dc <USB_EPStartXfer+0x12a0>
 800c790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c794:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c7a6:	4413      	add	r3, r2
 800c7a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c7ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	011a      	lsls	r2, r3, #4
 800c7ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c7be:	4413      	add	r3, r2
 800c7c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c7c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c7c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	691b      	ldr	r3, [r3, #16]
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c7da:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c7dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	69db      	ldr	r3, [r3, #28]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f000 8218 	beq.w	800cc1e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c7ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	4413      	add	r3, r2
 800c808:	881b      	ldrh	r3, [r3, #0]
 800c80a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c80e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c816:	2b00      	cmp	r3, #0
 800c818:	d005      	beq.n	800c826 <USB_EPStartXfer+0x12ea>
 800c81a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c81e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c822:	2b00      	cmp	r3, #0
 800c824:	d10d      	bne.n	800c842 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c826:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c82a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f040 81f5 	bne.w	800cc1e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c834:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	f040 81ee 	bne.w	800cc1e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c846:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	4413      	add	r3, r2
 800c85c:	881b      	ldrh	r3, [r3, #0]
 800c85e:	b29b      	uxth	r3, r3
 800c860:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c868:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c86c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c870:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c87a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	441a      	add	r2, r3
 800c886:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c88a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c88e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c896:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	8013      	strh	r3, [r2, #0]
 800c89e:	e1be      	b.n	800cc1e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c8a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	78db      	ldrb	r3, [r3, #3]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	f040 81b4 	bne.w	800cc1a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c8b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	699a      	ldr	r2, [r3, #24]
 800c8be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	691b      	ldr	r3, [r3, #16]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d917      	bls.n	800c8fe <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c8ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800c8de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	699a      	ldr	r2, [r3, #24]
 800c8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8ee:	1ad2      	subs	r2, r2, r3
 800c8f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	619a      	str	r2, [r3, #24]
 800c8fc:	e00e      	b.n	800c91c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c8fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	699b      	ldr	r3, [r3, #24]
 800c90a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800c90e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2200      	movs	r2, #0
 800c91a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c91c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	785b      	ldrb	r3, [r3, #1]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f040 8085 	bne.w	800ca38 <USB_EPStartXfer+0x14fc>
 800c92e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c93c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c940:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	461a      	mov	r2, r3
 800c94e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c952:	4413      	add	r3, r2
 800c954:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c95c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	011a      	lsls	r2, r3, #4
 800c966:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c96a:	4413      	add	r3, r2
 800c96c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c970:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c974:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c978:	881b      	ldrh	r3, [r3, #0]
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c980:	b29a      	uxth	r2, r3
 800c982:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c986:	801a      	strh	r2, [r3, #0]
 800c988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c98c:	2b3e      	cmp	r3, #62	@ 0x3e
 800c98e:	d923      	bls.n	800c9d8 <USB_EPStartXfer+0x149c>
 800c990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c994:	095b      	lsrs	r3, r3, #5
 800c996:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c99e:	f003 031f 	and.w	r3, r3, #31
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d104      	bne.n	800c9b0 <USB_EPStartXfer+0x1474>
 800c9a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c9b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c9b4:	881b      	ldrh	r3, [r3, #0]
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	029b      	lsls	r3, r3, #10
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c9d4:	801a      	strh	r2, [r3, #0]
 800c9d6:	e060      	b.n	800ca9a <USB_EPStartXfer+0x155e>
 800c9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d10c      	bne.n	800c9fa <USB_EPStartXfer+0x14be>
 800c9e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c9e4:	881b      	ldrh	r3, [r3, #0]
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9f0:	b29a      	uxth	r2, r3
 800c9f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c9f6:	801a      	strh	r2, [r3, #0]
 800c9f8:	e04f      	b.n	800ca9a <USB_EPStartXfer+0x155e>
 800c9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9fe:	085b      	lsrs	r3, r3, #1
 800ca00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ca04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca08:	f003 0301 	and.w	r3, r3, #1
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d004      	beq.n	800ca1a <USB_EPStartXfer+0x14de>
 800ca10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca14:	3301      	adds	r3, #1
 800ca16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ca1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca1e:	881b      	ldrh	r3, [r3, #0]
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	029b      	lsls	r3, r3, #10
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	b29a      	uxth	r2, r3
 800ca30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca34:	801a      	strh	r2, [r3, #0]
 800ca36:	e030      	b.n	800ca9a <USB_EPStartXfer+0x155e>
 800ca38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	785b      	ldrb	r3, [r3, #1]
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d128      	bne.n	800ca9a <USB_EPStartXfer+0x155e>
 800ca48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ca56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	461a      	mov	r2, r3
 800ca68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ca6c:	4413      	add	r3, r2
 800ca6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ca72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	011a      	lsls	r2, r3, #4
 800ca80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ca84:	4413      	add	r3, r2
 800ca86:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ca8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ca8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca92:	b29a      	uxth	r2, r3
 800ca94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ca98:	801a      	strh	r2, [r3, #0]
 800ca9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800caa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	785b      	ldrb	r3, [r3, #1]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	f040 8085 	bne.w	800cbc4 <USB_EPStartXfer+0x1688>
 800caba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cabe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cacc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	461a      	mov	r2, r3
 800cada:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800cade:	4413      	add	r3, r2
 800cae0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	011a      	lsls	r2, r3, #4
 800caf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800caf6:	4413      	add	r3, r2
 800caf8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800cafc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cb00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb04:	881b      	ldrh	r3, [r3, #0]
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb12:	801a      	strh	r2, [r3, #0]
 800cb14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb18:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb1a:	d923      	bls.n	800cb64 <USB_EPStartXfer+0x1628>
 800cb1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb20:	095b      	lsrs	r3, r3, #5
 800cb22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cb26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb2a:	f003 031f 	and.w	r3, r3, #31
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d104      	bne.n	800cb3c <USB_EPStartXfer+0x1600>
 800cb32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cb36:	3b01      	subs	r3, #1
 800cb38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cb3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb40:	881b      	ldrh	r3, [r3, #0]
 800cb42:	b29a      	uxth	r2, r3
 800cb44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	029b      	lsls	r3, r3, #10
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb5a:	b29a      	uxth	r2, r3
 800cb5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb60:	801a      	strh	r2, [r3, #0]
 800cb62:	e05c      	b.n	800cc1e <USB_EPStartXfer+0x16e2>
 800cb64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d10c      	bne.n	800cb86 <USB_EPStartXfer+0x164a>
 800cb6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb70:	881b      	ldrh	r3, [r3, #0]
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb82:	801a      	strh	r2, [r3, #0]
 800cb84:	e04b      	b.n	800cc1e <USB_EPStartXfer+0x16e2>
 800cb86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb8a:	085b      	lsrs	r3, r3, #1
 800cb8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cb90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb94:	f003 0301 	and.w	r3, r3, #1
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d004      	beq.n	800cba6 <USB_EPStartXfer+0x166a>
 800cb9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cba0:	3301      	adds	r3, #1
 800cba2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cbaa:	881b      	ldrh	r3, [r3, #0]
 800cbac:	b29a      	uxth	r2, r3
 800cbae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	029b      	lsls	r3, r3, #10
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	b29a      	uxth	r2, r3
 800cbbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cbc0:	801a      	strh	r2, [r3, #0]
 800cbc2:	e02c      	b.n	800cc1e <USB_EPStartXfer+0x16e2>
 800cbc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	785b      	ldrb	r3, [r3, #1]
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d124      	bne.n	800cc1e <USB_EPStartXfer+0x16e2>
 800cbd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cbea:	4413      	add	r3, r2
 800cbec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cbf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	011a      	lsls	r2, r3, #4
 800cbfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cc02:	4413      	add	r3, r2
 800cc04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800cc08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cc16:	801a      	strh	r2, [r3, #0]
 800cc18:	e001      	b.n	800cc1e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e03a      	b.n	800cc94 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cc1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	4413      	add	r3, r2
 800cc38:	881b      	ldrh	r3, [r3, #0]
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cc40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc44:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cc48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cc4c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cc50:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cc54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cc58:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cc5c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cc60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	441a      	add	r2, r3
 800cc7a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cc7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cc92:	2300      	movs	r3, #0
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cc9e:	b480      	push	{r7}
 800cca0:	b085      	sub	sp, #20
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
 800cca6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	785b      	ldrb	r3, [r3, #1]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d020      	beq.n	800ccf2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	4413      	add	r3, r2
 800ccba:	881b      	ldrh	r3, [r3, #0]
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ccc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccc6:	81bb      	strh	r3, [r7, #12]
 800ccc8:	89bb      	ldrh	r3, [r7, #12]
 800ccca:	f083 0310 	eor.w	r3, r3, #16
 800ccce:	81bb      	strh	r3, [r7, #12]
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	441a      	add	r2, r3
 800ccda:	89bb      	ldrh	r3, [r7, #12]
 800ccdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cce0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cce4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	8013      	strh	r3, [r2, #0]
 800ccf0:	e01f      	b.n	800cd32 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	4413      	add	r3, r2
 800ccfc:	881b      	ldrh	r3, [r3, #0]
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd08:	81fb      	strh	r3, [r7, #14]
 800cd0a:	89fb      	ldrh	r3, [r7, #14]
 800cd0c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cd10:	81fb      	strh	r3, [r7, #14]
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	441a      	add	r2, r3
 800cd1c:	89fb      	ldrh	r3, [r7, #14]
 800cd1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3714      	adds	r7, #20
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bc80      	pop	{r7}
 800cd3c:	4770      	bx	lr

0800cd3e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cd3e:	b480      	push	{r7}
 800cd40:	b087      	sub	sp, #28
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
 800cd46:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	7b1b      	ldrb	r3, [r3, #12]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	f040 809d 	bne.w	800ce8c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	785b      	ldrb	r3, [r3, #1]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d04c      	beq.n	800cdf4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	4413      	add	r3, r2
 800cd64:	881b      	ldrh	r3, [r3, #0]
 800cd66:	823b      	strh	r3, [r7, #16]
 800cd68:	8a3b      	ldrh	r3, [r7, #16]
 800cd6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d01b      	beq.n	800cdaa <USB_EPClearStall+0x6c>
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	4413      	add	r3, r2
 800cd7c:	881b      	ldrh	r3, [r3, #0]
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd88:	81fb      	strh	r3, [r7, #14]
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	441a      	add	r2, r3
 800cd94:	89fb      	ldrh	r3, [r7, #14]
 800cd96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cda2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	78db      	ldrb	r3, [r3, #3]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d06c      	beq.n	800ce8c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	4413      	add	r3, r2
 800cdbc:	881b      	ldrh	r3, [r3, #0]
 800cdbe:	b29b      	uxth	r3, r3
 800cdc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdc8:	81bb      	strh	r3, [r7, #12]
 800cdca:	89bb      	ldrh	r3, [r7, #12]
 800cdcc:	f083 0320 	eor.w	r3, r3, #32
 800cdd0:	81bb      	strh	r3, [r7, #12]
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	441a      	add	r2, r3
 800cddc:	89bb      	ldrh	r3, [r7, #12]
 800cdde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cde2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cde6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	8013      	strh	r3, [r2, #0]
 800cdf2:	e04b      	b.n	800ce8c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	4413      	add	r3, r2
 800cdfe:	881b      	ldrh	r3, [r3, #0]
 800ce00:	82fb      	strh	r3, [r7, #22]
 800ce02:	8afb      	ldrh	r3, [r7, #22]
 800ce04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d01b      	beq.n	800ce44 <USB_EPClearStall+0x106>
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	4413      	add	r3, r2
 800ce16:	881b      	ldrh	r3, [r3, #0]
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce22:	82bb      	strh	r3, [r7, #20]
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	441a      	add	r2, r3
 800ce2e:	8abb      	ldrh	r3, [r7, #20]
 800ce30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ce3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	4413      	add	r3, r2
 800ce4e:	881b      	ldrh	r3, [r3, #0]
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ce56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce5a:	827b      	strh	r3, [r7, #18]
 800ce5c:	8a7b      	ldrh	r3, [r7, #18]
 800ce5e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ce62:	827b      	strh	r3, [r7, #18]
 800ce64:	8a7b      	ldrh	r3, [r7, #18]
 800ce66:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ce6a:	827b      	strh	r3, [r7, #18]
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	441a      	add	r2, r3
 800ce76:	8a7b      	ldrh	r3, [r7, #18]
 800ce78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ce8c:	2300      	movs	r3, #0
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	371c      	adds	r7, #28
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bc80      	pop	{r7}
 800ce96:	4770      	bx	lr

0800ce98 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	460b      	mov	r3, r1
 800cea2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cea4:	78fb      	ldrb	r3, [r7, #3]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d103      	bne.n	800ceb2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2280      	movs	r2, #128	@ 0x80
 800ceae:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bc80      	pop	{r7}
 800cebc:	4770      	bx	lr

0800cebe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cebe:	b480      	push	{r7}
 800cec0:	b083      	sub	sp, #12
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800cec6:	2300      	movs	r3, #0
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	bc80      	pop	{r7}
 800ced0:	4770      	bx	lr

0800ced2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ced2:	b480      	push	{r7}
 800ced4:	b083      	sub	sp, #12
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bc80      	pop	{r7}
 800cee4:	4770      	bx	lr

0800cee6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800cee6:	b480      	push	{r7}
 800cee8:	b085      	sub	sp, #20
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cef8:	68fb      	ldr	r3, [r7, #12]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3714      	adds	r7, #20
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bc80      	pop	{r7}
 800cf02:	4770      	bx	lr

0800cf04 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800cf0e:	2300      	movs	r3, #0
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bc80      	pop	{r7}
 800cf18:	4770      	bx	lr

0800cf1a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cf1a:	b480      	push	{r7}
 800cf1c:	b08b      	sub	sp, #44	@ 0x2c
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	60f8      	str	r0, [r7, #12]
 800cf22:	60b9      	str	r1, [r7, #8]
 800cf24:	4611      	mov	r1, r2
 800cf26:	461a      	mov	r2, r3
 800cf28:	460b      	mov	r3, r1
 800cf2a:	80fb      	strh	r3, [r7, #6]
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cf30:	88bb      	ldrh	r3, [r7, #4]
 800cf32:	3301      	adds	r3, #1
 800cf34:	085b      	lsrs	r3, r3, #1
 800cf36:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cf40:	88fb      	ldrh	r3, [r7, #6]
 800cf42:	005a      	lsls	r2, r3, #1
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	4413      	add	r3, r2
 800cf48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cf4c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf52:	e01e      	b.n	800cf92 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800cf54:	69fb      	ldr	r3, [r7, #28]
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800cf5a:	69fb      	ldr	r3, [r7, #28]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	021b      	lsls	r3, r3, #8
 800cf62:	b21a      	sxth	r2, r3
 800cf64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	b21b      	sxth	r3, r3
 800cf6c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800cf6e:	6a3b      	ldr	r3, [r7, #32]
 800cf70:	8a7a      	ldrh	r2, [r7, #18]
 800cf72:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cf74:	6a3b      	ldr	r3, [r7, #32]
 800cf76:	3302      	adds	r3, #2
 800cf78:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800cf7a:	6a3b      	ldr	r3, [r7, #32]
 800cf7c:	3302      	adds	r3, #2
 800cf7e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	3301      	adds	r3, #1
 800cf84:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cf8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf8e:	3b01      	subs	r3, #1
 800cf90:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d1dd      	bne.n	800cf54 <USB_WritePMA+0x3a>
  }
}
 800cf98:	bf00      	nop
 800cf9a:	bf00      	nop
 800cf9c:	372c      	adds	r7, #44	@ 0x2c
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bc80      	pop	{r7}
 800cfa2:	4770      	bx	lr

0800cfa4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b08b      	sub	sp, #44	@ 0x2c
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	60b9      	str	r1, [r7, #8]
 800cfae:	4611      	mov	r1, r2
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	80fb      	strh	r3, [r7, #6]
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cfba:	88bb      	ldrh	r3, [r7, #4]
 800cfbc:	085b      	lsrs	r3, r3, #1
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cfca:	88fb      	ldrh	r3, [r7, #6]
 800cfcc:	005a      	lsls	r2, r3, #1
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cfd6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfdc:	e01b      	b.n	800d016 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cfde:	6a3b      	ldr	r3, [r7, #32]
 800cfe0:	881b      	ldrh	r3, [r3, #0]
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cfe6:	6a3b      	ldr	r3, [r7, #32]
 800cfe8:	3302      	adds	r3, #2
 800cfea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	3301      	adds	r3, #1
 800cff8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	0a1b      	lsrs	r3, r3, #8
 800cffe:	b2da      	uxtb	r2, r3
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	3301      	adds	r3, #1
 800d008:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800d00a:	6a3b      	ldr	r3, [r7, #32]
 800d00c:	3302      	adds	r3, #2
 800d00e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800d010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d012:	3b01      	subs	r3, #1
 800d014:	627b      	str	r3, [r7, #36]	@ 0x24
 800d016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d1e0      	bne.n	800cfde <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d01c:	88bb      	ldrh	r3, [r7, #4]
 800d01e:	f003 0301 	and.w	r3, r3, #1
 800d022:	b29b      	uxth	r3, r3
 800d024:	2b00      	cmp	r3, #0
 800d026:	d007      	beq.n	800d038 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800d028:	6a3b      	ldr	r3, [r7, #32]
 800d02a:	881b      	ldrh	r3, [r3, #0]
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	b2da      	uxtb	r2, r3
 800d034:	69fb      	ldr	r3, [r7, #28]
 800d036:	701a      	strb	r2, [r3, #0]
  }
}
 800d038:	bf00      	nop
 800d03a:	372c      	adds	r7, #44	@ 0x2c
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bc80      	pop	{r7}
 800d040:	4770      	bx	lr

0800d042 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b084      	sub	sp, #16
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
 800d04a:	460b      	mov	r3, r1
 800d04c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d04e:	2300      	movs	r3, #0
 800d050:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	7c1b      	ldrb	r3, [r3, #16]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d115      	bne.n	800d086 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d05a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d05e:	2202      	movs	r2, #2
 800d060:	2181      	movs	r1, #129	@ 0x81
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f001 fe33 	bl	800ecce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2201      	movs	r2, #1
 800d06c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d06e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d072:	2202      	movs	r2, #2
 800d074:	2101      	movs	r1, #1
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f001 fe29 	bl	800ecce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2201      	movs	r2, #1
 800d080:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800d084:	e012      	b.n	800d0ac <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d086:	2340      	movs	r3, #64	@ 0x40
 800d088:	2202      	movs	r2, #2
 800d08a:	2181      	movs	r1, #129	@ 0x81
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f001 fe1e 	bl	800ecce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2201      	movs	r2, #1
 800d096:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d098:	2340      	movs	r3, #64	@ 0x40
 800d09a:	2202      	movs	r2, #2
 800d09c:	2101      	movs	r1, #1
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f001 fe15 	bl	800ecce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d0ac:	2308      	movs	r3, #8
 800d0ae:	2203      	movs	r2, #3
 800d0b0:	2182      	movs	r1, #130	@ 0x82
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f001 fe0b 	bl	800ecce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d0be:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d0c2:	f001 ff2b 	bl	800ef1c <USBD_static_malloc>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d102      	bne.n	800d0de <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	73fb      	strb	r3, [r7, #15]
 800d0dc:	e026      	b.n	800d12c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0e4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	7c1b      	ldrb	r3, [r3, #16]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d109      	bne.n	800d11c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d10e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d112:	2101      	movs	r1, #1
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f001 feca 	bl	800eeae <USBD_LL_PrepareReceive>
 800d11a:	e007      	b.n	800d12c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d122:	2340      	movs	r3, #64	@ 0x40
 800d124:	2101      	movs	r1, #1
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f001 fec1 	bl	800eeae <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800d12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3710      	adds	r7, #16
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b084      	sub	sp, #16
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
 800d13e:	460b      	mov	r3, r1
 800d140:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d142:	2300      	movs	r3, #0
 800d144:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d146:	2181      	movs	r1, #129	@ 0x81
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f001 fde6 	bl	800ed1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d154:	2101      	movs	r1, #1
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f001 fddf 	bl	800ed1a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d164:	2182      	movs	r1, #130	@ 0x82
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f001 fdd7 	bl	800ed1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2200      	movs	r2, #0
 800d170:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00e      	beq.n	800d19a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d18c:	4618      	mov	r0, r3
 800d18e:	f001 fed1 	bl	800ef34 <USBD_static_free>
    pdev->pClassData = NULL;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2200      	movs	r2, #0
 800d196:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800d19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3710      	adds	r7, #16
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b086      	sub	sp, #24
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1b4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d039      	beq.n	800d242 <USBD_CDC_Setup+0x9e>
 800d1ce:	2b20      	cmp	r3, #32
 800d1d0:	d17f      	bne.n	800d2d2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	88db      	ldrh	r3, [r3, #6]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d029      	beq.n	800d22e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	b25b      	sxtb	r3, r3
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	da11      	bge.n	800d208 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	683a      	ldr	r2, [r7, #0]
 800d1ee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800d1f0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d1f2:	683a      	ldr	r2, [r7, #0]
 800d1f4:	88d2      	ldrh	r2, [r2, #6]
 800d1f6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d1f8:	6939      	ldr	r1, [r7, #16]
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	88db      	ldrh	r3, [r3, #6]
 800d1fe:	461a      	mov	r2, r3
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f001 f9d5 	bl	800e5b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800d206:	e06b      	b.n	800d2e0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	785a      	ldrb	r2, [r3, #1]
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	88db      	ldrh	r3, [r3, #6]
 800d216:	b2da      	uxtb	r2, r3
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d21e:	6939      	ldr	r1, [r7, #16]
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	88db      	ldrh	r3, [r3, #6]
 800d224:	461a      	mov	r2, r3
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f001 f9f0 	bl	800e60c <USBD_CtlPrepareRx>
      break;
 800d22c:	e058      	b.n	800d2e0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d234:	689b      	ldr	r3, [r3, #8]
 800d236:	683a      	ldr	r2, [r7, #0]
 800d238:	7850      	ldrb	r0, [r2, #1]
 800d23a:	2200      	movs	r2, #0
 800d23c:	6839      	ldr	r1, [r7, #0]
 800d23e:	4798      	blx	r3
      break;
 800d240:	e04e      	b.n	800d2e0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	785b      	ldrb	r3, [r3, #1]
 800d246:	2b0b      	cmp	r3, #11
 800d248:	d02e      	beq.n	800d2a8 <USBD_CDC_Setup+0x104>
 800d24a:	2b0b      	cmp	r3, #11
 800d24c:	dc38      	bgt.n	800d2c0 <USBD_CDC_Setup+0x11c>
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d002      	beq.n	800d258 <USBD_CDC_Setup+0xb4>
 800d252:	2b0a      	cmp	r3, #10
 800d254:	d014      	beq.n	800d280 <USBD_CDC_Setup+0xdc>
 800d256:	e033      	b.n	800d2c0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d25e:	2b03      	cmp	r3, #3
 800d260:	d107      	bne.n	800d272 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800d262:	f107 030c 	add.w	r3, r7, #12
 800d266:	2202      	movs	r2, #2
 800d268:	4619      	mov	r1, r3
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f001 f9a0 	bl	800e5b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d270:	e02e      	b.n	800d2d0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800d272:	6839      	ldr	r1, [r7, #0]
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f001 f931 	bl	800e4dc <USBD_CtlError>
            ret = USBD_FAIL;
 800d27a:	2302      	movs	r3, #2
 800d27c:	75fb      	strb	r3, [r7, #23]
          break;
 800d27e:	e027      	b.n	800d2d0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d286:	2b03      	cmp	r3, #3
 800d288:	d107      	bne.n	800d29a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800d28a:	f107 030f 	add.w	r3, r7, #15
 800d28e:	2201      	movs	r2, #1
 800d290:	4619      	mov	r1, r3
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f001 f98c 	bl	800e5b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d298:	e01a      	b.n	800d2d0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800d29a:	6839      	ldr	r1, [r7, #0]
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f001 f91d 	bl	800e4dc <USBD_CtlError>
            ret = USBD_FAIL;
 800d2a2:	2302      	movs	r3, #2
 800d2a4:	75fb      	strb	r3, [r7, #23]
          break;
 800d2a6:	e013      	b.n	800d2d0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2ae:	2b03      	cmp	r3, #3
 800d2b0:	d00d      	beq.n	800d2ce <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800d2b2:	6839      	ldr	r1, [r7, #0]
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f001 f911 	bl	800e4dc <USBD_CtlError>
            ret = USBD_FAIL;
 800d2ba:	2302      	movs	r3, #2
 800d2bc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d2be:	e006      	b.n	800d2ce <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800d2c0:	6839      	ldr	r1, [r7, #0]
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f001 f90a 	bl	800e4dc <USBD_CtlError>
          ret = USBD_FAIL;
 800d2c8:	2302      	movs	r3, #2
 800d2ca:	75fb      	strb	r3, [r7, #23]
          break;
 800d2cc:	e000      	b.n	800d2d0 <USBD_CDC_Setup+0x12c>
          break;
 800d2ce:	bf00      	nop
      }
      break;
 800d2d0:	e006      	b.n	800d2e0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d2d2:	6839      	ldr	r1, [r7, #0]
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f001 f901 	bl	800e4dc <USBD_CtlError>
      ret = USBD_FAIL;
 800d2da:	2302      	movs	r3, #2
 800d2dc:	75fb      	strb	r3, [r7, #23]
      break;
 800d2de:	bf00      	nop
  }

  return ret;
 800d2e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3718      	adds	r7, #24
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b084      	sub	sp, #16
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2fc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d304:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d03a      	beq.n	800d386 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d310:	78fa      	ldrb	r2, [r7, #3]
 800d312:	6879      	ldr	r1, [r7, #4]
 800d314:	4613      	mov	r3, r2
 800d316:	009b      	lsls	r3, r3, #2
 800d318:	4413      	add	r3, r2
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	440b      	add	r3, r1
 800d31e:	331c      	adds	r3, #28
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d029      	beq.n	800d37a <USBD_CDC_DataIn+0x90>
 800d326:	78fa      	ldrb	r2, [r7, #3]
 800d328:	6879      	ldr	r1, [r7, #4]
 800d32a:	4613      	mov	r3, r2
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	4413      	add	r3, r2
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	440b      	add	r3, r1
 800d334:	331c      	adds	r3, #28
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	78f9      	ldrb	r1, [r7, #3]
 800d33a:	68b8      	ldr	r0, [r7, #8]
 800d33c:	460b      	mov	r3, r1
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	440b      	add	r3, r1
 800d342:	00db      	lsls	r3, r3, #3
 800d344:	4403      	add	r3, r0
 800d346:	3320      	adds	r3, #32
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	fbb2 f1f3 	udiv	r1, r2, r3
 800d34e:	fb01 f303 	mul.w	r3, r1, r3
 800d352:	1ad3      	subs	r3, r2, r3
 800d354:	2b00      	cmp	r3, #0
 800d356:	d110      	bne.n	800d37a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d358:	78fa      	ldrb	r2, [r7, #3]
 800d35a:	6879      	ldr	r1, [r7, #4]
 800d35c:	4613      	mov	r3, r2
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4413      	add	r3, r2
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	440b      	add	r3, r1
 800d366:	331c      	adds	r3, #28
 800d368:	2200      	movs	r2, #0
 800d36a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d36c:	78f9      	ldrb	r1, [r7, #3]
 800d36e:	2300      	movs	r3, #0
 800d370:	2200      	movs	r2, #0
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f001 fd78 	bl	800ee68 <USBD_LL_Transmit>
 800d378:	e003      	b.n	800d382 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2200      	movs	r2, #0
 800d37e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800d382:	2300      	movs	r3, #0
 800d384:	e000      	b.n	800d388 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800d386:	2302      	movs	r3, #2
  }
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3710      	adds	r7, #16
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	460b      	mov	r3, r1
 800d39a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3a2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d3a4:	78fb      	ldrb	r3, [r7, #3]
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f001 fda3 	bl	800eef4 <USBD_LL_GetRxDataSize>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00d      	beq.n	800d3dc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d3d4:	4611      	mov	r1, r2
 800d3d6:	4798      	blx	r3

    return USBD_OK;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	e000      	b.n	800d3de <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800d3dc:	2302      	movs	r3, #2
  }
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b084      	sub	sp, #16
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3f4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d014      	beq.n	800d42a <USBD_CDC_EP0_RxReady+0x44>
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d406:	2bff      	cmp	r3, #255	@ 0xff
 800d408:	d00f      	beq.n	800d42a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	68fa      	ldr	r2, [r7, #12]
 800d414:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800d418:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d41a:	68fa      	ldr	r2, [r7, #12]
 800d41c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d420:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	22ff      	movs	r2, #255	@ 0xff
 800d426:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800d42a:	2300      	movs	r3, #0
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2243      	movs	r2, #67	@ 0x43
 800d440:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d442:	4b03      	ldr	r3, [pc, #12]	@ (800d450 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d444:	4618      	mov	r0, r3
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	bc80      	pop	{r7}
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	20000094 	.word	0x20000094

0800d454 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d454:	b480      	push	{r7}
 800d456:	b083      	sub	sp, #12
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2243      	movs	r2, #67	@ 0x43
 800d460:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d462:	4b03      	ldr	r3, [pc, #12]	@ (800d470 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d464:	4618      	mov	r0, r3
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	bc80      	pop	{r7}
 800d46c:	4770      	bx	lr
 800d46e:	bf00      	nop
 800d470:	20000050 	.word	0x20000050

0800d474 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2243      	movs	r2, #67	@ 0x43
 800d480:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d482:	4b03      	ldr	r3, [pc, #12]	@ (800d490 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d484:	4618      	mov	r0, r3
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	bc80      	pop	{r7}
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop
 800d490:	200000d8 	.word	0x200000d8

0800d494 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	220a      	movs	r2, #10
 800d4a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d4a2:	4b03      	ldr	r3, [pc, #12]	@ (800d4b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bc80      	pop	{r7}
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop
 800d4b0:	2000000c 	.word	0x2000000c

0800d4b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b085      	sub	sp, #20
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d4be:	2302      	movs	r3, #2
 800d4c0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d005      	beq.n	800d4d4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	683a      	ldr	r2, [r7, #0]
 800d4cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3714      	adds	r7, #20
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bc80      	pop	{r7}
 800d4de:	4770      	bx	lr

0800d4e0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b087      	sub	sp, #28
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4f4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	68ba      	ldr	r2, [r7, #8]
 800d4fa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d4fe:	88fa      	ldrh	r2, [r7, #6]
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800d506:	2300      	movs	r3, #0
}
 800d508:	4618      	mov	r0, r3
 800d50a:	371c      	adds	r7, #28
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bc80      	pop	{r7}
 800d510:	4770      	bx	lr

0800d512 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800d512:	b480      	push	{r7}
 800d514:	b085      	sub	sp, #20
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
 800d51a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d522:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	683a      	ldr	r2, [r7, #0]
 800d528:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800d52c:	2300      	movs	r3, #0
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3714      	adds	r7, #20
 800d532:	46bd      	mov	sp, r7
 800d534:	bc80      	pop	{r7}
 800d536:	4770      	bx	lr

0800d538 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d546:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d017      	beq.n	800d582 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	7c1b      	ldrb	r3, [r3, #16]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d109      	bne.n	800d56e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d560:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d564:	2101      	movs	r1, #1
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f001 fca1 	bl	800eeae <USBD_LL_PrepareReceive>
 800d56c:	e007      	b.n	800d57e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d574:	2340      	movs	r3, #64	@ 0x40
 800d576:	2101      	movs	r1, #1
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f001 fc98 	bl	800eeae <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d57e:	2300      	movs	r3, #0
 800d580:	e000      	b.n	800d584 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d582:	2302      	movs	r3, #2
  }
}
 800d584:	4618      	mov	r0, r3
 800d586:	3710      	adds	r7, #16
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	4613      	mov	r3, r2
 800d598:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d101      	bne.n	800d5a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d5a0:	2302      	movs	r3, #2
 800d5a2:	e01a      	b.n	800d5da <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d003      	beq.n	800d5b6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d003      	beq.n	800d5c4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	68ba      	ldr	r2, [r7, #8]
 800d5c0:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	79fa      	ldrb	r2, [r7, #7]
 800d5d0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f001 fb06 	bl	800ebe4 <USBD_LL_Init>

  return USBD_OK;
 800d5d8:	2300      	movs	r3, #0
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3710      	adds	r7, #16
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d5e2:	b480      	push	{r7}
 800d5e4:	b085      	sub	sp, #20
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
 800d5ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d006      	beq.n	800d604 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	683a      	ldr	r2, [r7, #0]
 800d5fa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800d5fe:	2300      	movs	r3, #0
 800d600:	73fb      	strb	r3, [r7, #15]
 800d602:	e001      	b.n	800d608 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d604:	2302      	movs	r3, #2
 800d606:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d608:	7bfb      	ldrb	r3, [r7, #15]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3714      	adds	r7, #20
 800d60e:	46bd      	mov	sp, r7
 800d610:	bc80      	pop	{r7}
 800d612:	4770      	bx	lr

0800d614 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f001 fb3b 	bl	800ec98 <USBD_LL_Start>

  return USBD_OK;
 800d622:	2300      	movs	r3, #0
}
 800d624:	4618      	mov	r0, r3
 800d626:	3708      	adds	r7, #8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b083      	sub	sp, #12
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	370c      	adds	r7, #12
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bc80      	pop	{r7}
 800d63e:	4770      	bx	lr

0800d640 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	460b      	mov	r3, r1
 800d64a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d64c:	2302      	movs	r3, #2
 800d64e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d656:	2b00      	cmp	r3, #0
 800d658:	d00c      	beq.n	800d674 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	78fa      	ldrb	r2, [r7, #3]
 800d664:	4611      	mov	r1, r2
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	4798      	blx	r3
 800d66a:	4603      	mov	r3, r0
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d101      	bne.n	800d674 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d670:	2300      	movs	r3, #0
 800d672:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d674:	7bfb      	ldrb	r3, [r7, #15]
}
 800d676:	4618      	mov	r0, r3
 800d678:	3710      	adds	r7, #16
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b082      	sub	sp, #8
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
 800d686:	460b      	mov	r3, r1
 800d688:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	78fa      	ldrb	r2, [r7, #3]
 800d694:	4611      	mov	r1, r2
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	4798      	blx	r3

  return USBD_OK;
 800d69a:	2300      	movs	r3, #0
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f000 fed7 	bl	800e46a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2201      	movs	r2, #1
 800d6c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800d6d8:	f003 031f 	and.w	r3, r3, #31
 800d6dc:	2b02      	cmp	r3, #2
 800d6de:	d016      	beq.n	800d70e <USBD_LL_SetupStage+0x6a>
 800d6e0:	2b02      	cmp	r3, #2
 800d6e2:	d81c      	bhi.n	800d71e <USBD_LL_SetupStage+0x7a>
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d002      	beq.n	800d6ee <USBD_LL_SetupStage+0x4a>
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d008      	beq.n	800d6fe <USBD_LL_SetupStage+0x5a>
 800d6ec:	e017      	b.n	800d71e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 f9ca 	bl	800da90 <USBD_StdDevReq>
      break;
 800d6fc:	e01a      	b.n	800d734 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800d704:	4619      	mov	r1, r3
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 fa2c 	bl	800db64 <USBD_StdItfReq>
      break;
 800d70c:	e012      	b.n	800d734 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800d714:	4619      	mov	r1, r3
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 fa6c 	bl	800dbf4 <USBD_StdEPReq>
      break;
 800d71c:	e00a      	b.n	800d734 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800d724:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	4619      	mov	r1, r3
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f001 fb13 	bl	800ed58 <USBD_LL_StallEP>
      break;
 800d732:	bf00      	nop
  }

  return USBD_OK;
 800d734:	2300      	movs	r3, #0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3708      	adds	r7, #8
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}

0800d73e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	b086      	sub	sp, #24
 800d742:	af00      	add	r7, sp, #0
 800d744:	60f8      	str	r0, [r7, #12]
 800d746:	460b      	mov	r3, r1
 800d748:	607a      	str	r2, [r7, #4]
 800d74a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d74c:	7afb      	ldrb	r3, [r7, #11]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d14b      	bne.n	800d7ea <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d758:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d760:	2b03      	cmp	r3, #3
 800d762:	d134      	bne.n	800d7ce <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	68da      	ldr	r2, [r3, #12]
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	691b      	ldr	r3, [r3, #16]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d919      	bls.n	800d7a4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	68da      	ldr	r2, [r3, #12]
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	691b      	ldr	r3, [r3, #16]
 800d778:	1ad2      	subs	r2, r2, r3
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	68da      	ldr	r2, [r3, #12]
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d786:	429a      	cmp	r2, r3
 800d788:	d203      	bcs.n	800d792 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800d78e:	b29b      	uxth	r3, r3
 800d790:	e002      	b.n	800d798 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d796:	b29b      	uxth	r3, r3
 800d798:	461a      	mov	r2, r3
 800d79a:	6879      	ldr	r1, [r7, #4]
 800d79c:	68f8      	ldr	r0, [r7, #12]
 800d79e:	f000 ff53 	bl	800e648 <USBD_CtlContinueRx>
 800d7a2:	e038      	b.n	800d816 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7aa:	691b      	ldr	r3, [r3, #16]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d00a      	beq.n	800d7c6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d7b6:	2b03      	cmp	r3, #3
 800d7b8:	d105      	bne.n	800d7c6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7c0:	691b      	ldr	r3, [r3, #16]
 800d7c2:	68f8      	ldr	r0, [r7, #12]
 800d7c4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d7c6:	68f8      	ldr	r0, [r7, #12]
 800d7c8:	f000 ff50 	bl	800e66c <USBD_CtlSendStatus>
 800d7cc:	e023      	b.n	800d816 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d7d4:	2b05      	cmp	r3, #5
 800d7d6:	d11e      	bne.n	800d816 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800d7e0:	2100      	movs	r1, #0
 800d7e2:	68f8      	ldr	r0, [r7, #12]
 800d7e4:	f001 fab8 	bl	800ed58 <USBD_LL_StallEP>
 800d7e8:	e015      	b.n	800d816 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7f0:	699b      	ldr	r3, [r3, #24]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d00d      	beq.n	800d812 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d7fc:	2b03      	cmp	r3, #3
 800d7fe:	d108      	bne.n	800d812 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d806:	699b      	ldr	r3, [r3, #24]
 800d808:	7afa      	ldrb	r2, [r7, #11]
 800d80a:	4611      	mov	r1, r2
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	4798      	blx	r3
 800d810:	e001      	b.n	800d816 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d812:	2302      	movs	r3, #2
 800d814:	e000      	b.n	800d818 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d816:	2300      	movs	r3, #0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3718      	adds	r7, #24
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b086      	sub	sp, #24
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	460b      	mov	r3, r1
 800d82a:	607a      	str	r2, [r7, #4]
 800d82c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d82e:	7afb      	ldrb	r3, [r7, #11]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d17f      	bne.n	800d934 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	3314      	adds	r3, #20
 800d838:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d840:	2b02      	cmp	r3, #2
 800d842:	d15c      	bne.n	800d8fe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	68da      	ldr	r2, [r3, #12]
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	691b      	ldr	r3, [r3, #16]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d915      	bls.n	800d87c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	68da      	ldr	r2, [r3, #12]
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	691b      	ldr	r3, [r3, #16]
 800d858:	1ad2      	subs	r2, r2, r3
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	b29b      	uxth	r3, r3
 800d864:	461a      	mov	r2, r3
 800d866:	6879      	ldr	r1, [r7, #4]
 800d868:	68f8      	ldr	r0, [r7, #12]
 800d86a:	f000 febd 	bl	800e5e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d86e:	2300      	movs	r3, #0
 800d870:	2200      	movs	r2, #0
 800d872:	2100      	movs	r1, #0
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	f001 fb1a 	bl	800eeae <USBD_LL_PrepareReceive>
 800d87a:	e04e      	b.n	800d91a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	697a      	ldr	r2, [r7, #20]
 800d882:	6912      	ldr	r2, [r2, #16]
 800d884:	fbb3 f1f2 	udiv	r1, r3, r2
 800d888:	fb01 f202 	mul.w	r2, r1, r2
 800d88c:	1a9b      	subs	r3, r3, r2
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d11c      	bne.n	800d8cc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	689a      	ldr	r2, [r3, #8]
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d316      	bcc.n	800d8cc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	689a      	ldr	r2, [r3, #8]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d20f      	bcs.n	800d8cc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	2100      	movs	r1, #0
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f000 fe99 	bl	800e5e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d8be:	2300      	movs	r3, #0
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f001 faf2 	bl	800eeae <USBD_LL_PrepareReceive>
 800d8ca:	e026      	b.n	800d91a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00a      	beq.n	800d8ee <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d8de:	2b03      	cmp	r3, #3
 800d8e0:	d105      	bne.n	800d8ee <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d8e8:	68db      	ldr	r3, [r3, #12]
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d8ee:	2180      	movs	r1, #128	@ 0x80
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f001 fa31 	bl	800ed58 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f000 fecb 	bl	800e692 <USBD_CtlReceiveStatus>
 800d8fc:	e00d      	b.n	800d91a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d904:	2b04      	cmp	r3, #4
 800d906:	d004      	beq.n	800d912 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d103      	bne.n	800d91a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d912:	2180      	movs	r1, #128	@ 0x80
 800d914:	68f8      	ldr	r0, [r7, #12]
 800d916:	f001 fa1f 	bl	800ed58 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d920:	2b01      	cmp	r3, #1
 800d922:	d11d      	bne.n	800d960 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d924:	68f8      	ldr	r0, [r7, #12]
 800d926:	f7ff fe81 	bl	800d62c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2200      	movs	r2, #0
 800d92e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d932:	e015      	b.n	800d960 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d93a:	695b      	ldr	r3, [r3, #20]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d00d      	beq.n	800d95c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d946:	2b03      	cmp	r3, #3
 800d948:	d108      	bne.n	800d95c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d950:	695b      	ldr	r3, [r3, #20]
 800d952:	7afa      	ldrb	r2, [r7, #11]
 800d954:	4611      	mov	r1, r2
 800d956:	68f8      	ldr	r0, [r7, #12]
 800d958:	4798      	blx	r3
 800d95a:	e001      	b.n	800d960 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d95c:	2302      	movs	r3, #2
 800d95e:	e000      	b.n	800d962 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d960:	2300      	movs	r3, #0
}
 800d962:	4618      	mov	r0, r3
 800d964:	3718      	adds	r7, #24
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}

0800d96a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d96a:	b580      	push	{r7, lr}
 800d96c:	b082      	sub	sp, #8
 800d96e:	af00      	add	r7, sp, #0
 800d970:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d972:	2340      	movs	r3, #64	@ 0x40
 800d974:	2200      	movs	r2, #0
 800d976:	2100      	movs	r1, #0
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f001 f9a8 	bl	800ecce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2201      	movs	r2, #1
 800d982:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2240      	movs	r2, #64	@ 0x40
 800d98a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d98e:	2340      	movs	r3, #64	@ 0x40
 800d990:	2200      	movs	r2, #0
 800d992:	2180      	movs	r1, #128	@ 0x80
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f001 f99a 	bl	800ecce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2201      	movs	r2, #1
 800d99e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2240      	movs	r2, #64	@ 0x40
 800d9a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d009      	beq.n	800d9e2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	6852      	ldr	r2, [r2, #4]
 800d9da:	b2d2      	uxtb	r2, r2
 800d9dc:	4611      	mov	r1, r2
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	4798      	blx	r3
  }

  return USBD_OK;
 800d9e2:	2300      	movs	r3, #0
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3708      	adds	r7, #8
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	78fa      	ldrb	r2, [r7, #3]
 800d9fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d9fe:	2300      	movs	r3, #0
}
 800da00:	4618      	mov	r0, r3
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	bc80      	pop	{r7}
 800da08:	4770      	bx	lr

0800da0a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800da0a:	b480      	push	{r7}
 800da0c:	b083      	sub	sp, #12
 800da0e:	af00      	add	r7, sp, #0
 800da10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2204      	movs	r2, #4
 800da22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800da26:	2300      	movs	r3, #0
}
 800da28:	4618      	mov	r0, r3
 800da2a:	370c      	adds	r7, #12
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bc80      	pop	{r7}
 800da30:	4770      	bx	lr

0800da32 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800da32:	b480      	push	{r7}
 800da34:	b083      	sub	sp, #12
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da40:	2b04      	cmp	r3, #4
 800da42:	d105      	bne.n	800da50 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800da50:	2300      	movs	r3, #0
}
 800da52:	4618      	mov	r0, r3
 800da54:	370c      	adds	r7, #12
 800da56:	46bd      	mov	sp, r7
 800da58:	bc80      	pop	{r7}
 800da5a:	4770      	bx	lr

0800da5c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da6a:	2b03      	cmp	r3, #3
 800da6c:	d10b      	bne.n	800da86 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800da74:	69db      	ldr	r3, [r3, #28]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d005      	beq.n	800da86 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800da80:	69db      	ldr	r3, [r3, #28]
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da9a:	2300      	movs	r3, #0
 800da9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800daa6:	2b40      	cmp	r3, #64	@ 0x40
 800daa8:	d005      	beq.n	800dab6 <USBD_StdDevReq+0x26>
 800daaa:	2b40      	cmp	r3, #64	@ 0x40
 800daac:	d84f      	bhi.n	800db4e <USBD_StdDevReq+0xbe>
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d009      	beq.n	800dac6 <USBD_StdDevReq+0x36>
 800dab2:	2b20      	cmp	r3, #32
 800dab4:	d14b      	bne.n	800db4e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dabc:	689b      	ldr	r3, [r3, #8]
 800dabe:	6839      	ldr	r1, [r7, #0]
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	4798      	blx	r3
      break;
 800dac4:	e048      	b.n	800db58 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	785b      	ldrb	r3, [r3, #1]
 800daca:	2b09      	cmp	r3, #9
 800dacc:	d839      	bhi.n	800db42 <USBD_StdDevReq+0xb2>
 800dace:	a201      	add	r2, pc, #4	@ (adr r2, 800dad4 <USBD_StdDevReq+0x44>)
 800dad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad4:	0800db25 	.word	0x0800db25
 800dad8:	0800db39 	.word	0x0800db39
 800dadc:	0800db43 	.word	0x0800db43
 800dae0:	0800db2f 	.word	0x0800db2f
 800dae4:	0800db43 	.word	0x0800db43
 800dae8:	0800db07 	.word	0x0800db07
 800daec:	0800dafd 	.word	0x0800dafd
 800daf0:	0800db43 	.word	0x0800db43
 800daf4:	0800db1b 	.word	0x0800db1b
 800daf8:	0800db11 	.word	0x0800db11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dafc:	6839      	ldr	r1, [r7, #0]
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 f9dc 	bl	800debc <USBD_GetDescriptor>
          break;
 800db04:	e022      	b.n	800db4c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800db06:	6839      	ldr	r1, [r7, #0]
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f000 fb3f 	bl	800e18c <USBD_SetAddress>
          break;
 800db0e:	e01d      	b.n	800db4c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800db10:	6839      	ldr	r1, [r7, #0]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 fb7e 	bl	800e214 <USBD_SetConfig>
          break;
 800db18:	e018      	b.n	800db4c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800db1a:	6839      	ldr	r1, [r7, #0]
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 fc07 	bl	800e330 <USBD_GetConfig>
          break;
 800db22:	e013      	b.n	800db4c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800db24:	6839      	ldr	r1, [r7, #0]
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 fc37 	bl	800e39a <USBD_GetStatus>
          break;
 800db2c:	e00e      	b.n	800db4c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800db2e:	6839      	ldr	r1, [r7, #0]
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 fc65 	bl	800e400 <USBD_SetFeature>
          break;
 800db36:	e009      	b.n	800db4c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800db38:	6839      	ldr	r1, [r7, #0]
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 fc74 	bl	800e428 <USBD_ClrFeature>
          break;
 800db40:	e004      	b.n	800db4c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800db42:	6839      	ldr	r1, [r7, #0]
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f000 fcc9 	bl	800e4dc <USBD_CtlError>
          break;
 800db4a:	bf00      	nop
      }
      break;
 800db4c:	e004      	b.n	800db58 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800db4e:	6839      	ldr	r1, [r7, #0]
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f000 fcc3 	bl	800e4dc <USBD_CtlError>
      break;
 800db56:	bf00      	nop
  }

  return ret;
 800db58:	7bfb      	ldrb	r3, [r7, #15]
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3710      	adds	r7, #16
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop

0800db64 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db6e:	2300      	movs	r3, #0
 800db70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800db7a:	2b40      	cmp	r3, #64	@ 0x40
 800db7c:	d005      	beq.n	800db8a <USBD_StdItfReq+0x26>
 800db7e:	2b40      	cmp	r3, #64	@ 0x40
 800db80:	d82e      	bhi.n	800dbe0 <USBD_StdItfReq+0x7c>
 800db82:	2b00      	cmp	r3, #0
 800db84:	d001      	beq.n	800db8a <USBD_StdItfReq+0x26>
 800db86:	2b20      	cmp	r3, #32
 800db88:	d12a      	bne.n	800dbe0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db90:	3b01      	subs	r3, #1
 800db92:	2b02      	cmp	r3, #2
 800db94:	d81d      	bhi.n	800dbd2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	889b      	ldrh	r3, [r3, #4]
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d813      	bhi.n	800dbc8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dba6:	689b      	ldr	r3, [r3, #8]
 800dba8:	6839      	ldr	r1, [r7, #0]
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	4798      	blx	r3
 800dbae:	4603      	mov	r3, r0
 800dbb0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	88db      	ldrh	r3, [r3, #6]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d110      	bne.n	800dbdc <USBD_StdItfReq+0x78>
 800dbba:	7bfb      	ldrb	r3, [r7, #15]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d10d      	bne.n	800dbdc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 fd53 	bl	800e66c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dbc6:	e009      	b.n	800dbdc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800dbc8:	6839      	ldr	r1, [r7, #0]
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 fc86 	bl	800e4dc <USBD_CtlError>
          break;
 800dbd0:	e004      	b.n	800dbdc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800dbd2:	6839      	ldr	r1, [r7, #0]
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 fc81 	bl	800e4dc <USBD_CtlError>
          break;
 800dbda:	e000      	b.n	800dbde <USBD_StdItfReq+0x7a>
          break;
 800dbdc:	bf00      	nop
      }
      break;
 800dbde:	e004      	b.n	800dbea <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800dbe0:	6839      	ldr	r1, [r7, #0]
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f000 fc7a 	bl	800e4dc <USBD_CtlError>
      break;
 800dbe8:	bf00      	nop
  }

  return USBD_OK;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3710      	adds	r7, #16
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	889b      	ldrh	r3, [r3, #4]
 800dc06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	781b      	ldrb	r3, [r3, #0]
 800dc0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dc10:	2b40      	cmp	r3, #64	@ 0x40
 800dc12:	d007      	beq.n	800dc24 <USBD_StdEPReq+0x30>
 800dc14:	2b40      	cmp	r3, #64	@ 0x40
 800dc16:	f200 8146 	bhi.w	800dea6 <USBD_StdEPReq+0x2b2>
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00a      	beq.n	800dc34 <USBD_StdEPReq+0x40>
 800dc1e:	2b20      	cmp	r3, #32
 800dc20:	f040 8141 	bne.w	800dea6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc2a:	689b      	ldr	r3, [r3, #8]
 800dc2c:	6839      	ldr	r1, [r7, #0]
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	4798      	blx	r3
      break;
 800dc32:	e13d      	b.n	800deb0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dc3c:	2b20      	cmp	r3, #32
 800dc3e:	d10a      	bne.n	800dc56 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	6839      	ldr	r1, [r7, #0]
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	4798      	blx	r3
 800dc4e:	4603      	mov	r3, r0
 800dc50:	73fb      	strb	r3, [r7, #15]

        return ret;
 800dc52:	7bfb      	ldrb	r3, [r7, #15]
 800dc54:	e12d      	b.n	800deb2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	785b      	ldrb	r3, [r3, #1]
 800dc5a:	2b03      	cmp	r3, #3
 800dc5c:	d007      	beq.n	800dc6e <USBD_StdEPReq+0x7a>
 800dc5e:	2b03      	cmp	r3, #3
 800dc60:	f300 811b 	bgt.w	800de9a <USBD_StdEPReq+0x2a6>
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d072      	beq.n	800dd4e <USBD_StdEPReq+0x15a>
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d03a      	beq.n	800dce2 <USBD_StdEPReq+0xee>
 800dc6c:	e115      	b.n	800de9a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc74:	2b02      	cmp	r3, #2
 800dc76:	d002      	beq.n	800dc7e <USBD_StdEPReq+0x8a>
 800dc78:	2b03      	cmp	r3, #3
 800dc7a:	d015      	beq.n	800dca8 <USBD_StdEPReq+0xb4>
 800dc7c:	e02b      	b.n	800dcd6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc7e:	7bbb      	ldrb	r3, [r7, #14]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d00c      	beq.n	800dc9e <USBD_StdEPReq+0xaa>
 800dc84:	7bbb      	ldrb	r3, [r7, #14]
 800dc86:	2b80      	cmp	r3, #128	@ 0x80
 800dc88:	d009      	beq.n	800dc9e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800dc8a:	7bbb      	ldrb	r3, [r7, #14]
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f001 f862 	bl	800ed58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800dc94:	2180      	movs	r1, #128	@ 0x80
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f001 f85e 	bl	800ed58 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc9c:	e020      	b.n	800dce0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800dc9e:	6839      	ldr	r1, [r7, #0]
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f000 fc1b 	bl	800e4dc <USBD_CtlError>
              break;
 800dca6:	e01b      	b.n	800dce0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	885b      	ldrh	r3, [r3, #2]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10e      	bne.n	800dcce <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800dcb0:	7bbb      	ldrb	r3, [r7, #14]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00b      	beq.n	800dcce <USBD_StdEPReq+0xda>
 800dcb6:	7bbb      	ldrb	r3, [r7, #14]
 800dcb8:	2b80      	cmp	r3, #128	@ 0x80
 800dcba:	d008      	beq.n	800dcce <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	88db      	ldrh	r3, [r3, #6]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d104      	bne.n	800dcce <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800dcc4:	7bbb      	ldrb	r3, [r7, #14]
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f001 f845 	bl	800ed58 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f000 fccc 	bl	800e66c <USBD_CtlSendStatus>

              break;
 800dcd4:	e004      	b.n	800dce0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800dcd6:	6839      	ldr	r1, [r7, #0]
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f000 fbff 	bl	800e4dc <USBD_CtlError>
              break;
 800dcde:	bf00      	nop
          }
          break;
 800dce0:	e0e0      	b.n	800dea4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dce8:	2b02      	cmp	r3, #2
 800dcea:	d002      	beq.n	800dcf2 <USBD_StdEPReq+0xfe>
 800dcec:	2b03      	cmp	r3, #3
 800dcee:	d015      	beq.n	800dd1c <USBD_StdEPReq+0x128>
 800dcf0:	e026      	b.n	800dd40 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dcf2:	7bbb      	ldrb	r3, [r7, #14]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d00c      	beq.n	800dd12 <USBD_StdEPReq+0x11e>
 800dcf8:	7bbb      	ldrb	r3, [r7, #14]
 800dcfa:	2b80      	cmp	r3, #128	@ 0x80
 800dcfc:	d009      	beq.n	800dd12 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800dcfe:	7bbb      	ldrb	r3, [r7, #14]
 800dd00:	4619      	mov	r1, r3
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f001 f828 	bl	800ed58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800dd08:	2180      	movs	r1, #128	@ 0x80
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f001 f824 	bl	800ed58 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dd10:	e01c      	b.n	800dd4c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800dd12:	6839      	ldr	r1, [r7, #0]
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 fbe1 	bl	800e4dc <USBD_CtlError>
              break;
 800dd1a:	e017      	b.n	800dd4c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	885b      	ldrh	r3, [r3, #2]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d112      	bne.n	800dd4a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dd24:	7bbb      	ldrb	r3, [r7, #14]
 800dd26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d004      	beq.n	800dd38 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800dd2e:	7bbb      	ldrb	r3, [r7, #14]
 800dd30:	4619      	mov	r1, r3
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f001 f82f 	bl	800ed96 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f000 fc97 	bl	800e66c <USBD_CtlSendStatus>
              }
              break;
 800dd3e:	e004      	b.n	800dd4a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800dd40:	6839      	ldr	r1, [r7, #0]
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 fbca 	bl	800e4dc <USBD_CtlError>
              break;
 800dd48:	e000      	b.n	800dd4c <USBD_StdEPReq+0x158>
              break;
 800dd4a:	bf00      	nop
          }
          break;
 800dd4c:	e0aa      	b.n	800dea4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd54:	2b02      	cmp	r3, #2
 800dd56:	d002      	beq.n	800dd5e <USBD_StdEPReq+0x16a>
 800dd58:	2b03      	cmp	r3, #3
 800dd5a:	d032      	beq.n	800ddc2 <USBD_StdEPReq+0x1ce>
 800dd5c:	e097      	b.n	800de8e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd5e:	7bbb      	ldrb	r3, [r7, #14]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d007      	beq.n	800dd74 <USBD_StdEPReq+0x180>
 800dd64:	7bbb      	ldrb	r3, [r7, #14]
 800dd66:	2b80      	cmp	r3, #128	@ 0x80
 800dd68:	d004      	beq.n	800dd74 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800dd6a:	6839      	ldr	r1, [r7, #0]
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 fbb5 	bl	800e4dc <USBD_CtlError>
                break;
 800dd72:	e091      	b.n	800de98 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	da0b      	bge.n	800dd94 <USBD_StdEPReq+0x1a0>
 800dd7c:	7bbb      	ldrb	r3, [r7, #14]
 800dd7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dd82:	4613      	mov	r3, r2
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	4413      	add	r3, r2
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	3310      	adds	r3, #16
 800dd8c:	687a      	ldr	r2, [r7, #4]
 800dd8e:	4413      	add	r3, r2
 800dd90:	3304      	adds	r3, #4
 800dd92:	e00b      	b.n	800ddac <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dd94:	7bbb      	ldrb	r3, [r7, #14]
 800dd96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd9a:	4613      	mov	r3, r2
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	4413      	add	r3, r2
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	4413      	add	r3, r2
 800ddaa:	3304      	adds	r3, #4
 800ddac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	2202      	movs	r2, #2
 800ddb8:	4619      	mov	r1, r3
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 fbf8 	bl	800e5b0 <USBD_CtlSendData>
              break;
 800ddc0:	e06a      	b.n	800de98 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ddc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	da11      	bge.n	800ddee <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ddca:	7bbb      	ldrb	r3, [r7, #14]
 800ddcc:	f003 020f 	and.w	r2, r3, #15
 800ddd0:	6879      	ldr	r1, [r7, #4]
 800ddd2:	4613      	mov	r3, r2
 800ddd4:	009b      	lsls	r3, r3, #2
 800ddd6:	4413      	add	r3, r2
 800ddd8:	009b      	lsls	r3, r3, #2
 800ddda:	440b      	add	r3, r1
 800dddc:	3318      	adds	r3, #24
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d117      	bne.n	800de14 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800dde4:	6839      	ldr	r1, [r7, #0]
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 fb78 	bl	800e4dc <USBD_CtlError>
                  break;
 800ddec:	e054      	b.n	800de98 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ddee:	7bbb      	ldrb	r3, [r7, #14]
 800ddf0:	f003 020f 	and.w	r2, r3, #15
 800ddf4:	6879      	ldr	r1, [r7, #4]
 800ddf6:	4613      	mov	r3, r2
 800ddf8:	009b      	lsls	r3, r3, #2
 800ddfa:	4413      	add	r3, r2
 800ddfc:	009b      	lsls	r3, r3, #2
 800ddfe:	440b      	add	r3, r1
 800de00:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d104      	bne.n	800de14 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800de0a:	6839      	ldr	r1, [r7, #0]
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 fb65 	bl	800e4dc <USBD_CtlError>
                  break;
 800de12:	e041      	b.n	800de98 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	da0b      	bge.n	800de34 <USBD_StdEPReq+0x240>
 800de1c:	7bbb      	ldrb	r3, [r7, #14]
 800de1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de22:	4613      	mov	r3, r2
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	4413      	add	r3, r2
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	3310      	adds	r3, #16
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	4413      	add	r3, r2
 800de30:	3304      	adds	r3, #4
 800de32:	e00b      	b.n	800de4c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800de34:	7bbb      	ldrb	r3, [r7, #14]
 800de36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de3a:	4613      	mov	r3, r2
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	4413      	add	r3, r2
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800de46:	687a      	ldr	r2, [r7, #4]
 800de48:	4413      	add	r3, r2
 800de4a:	3304      	adds	r3, #4
 800de4c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800de4e:	7bbb      	ldrb	r3, [r7, #14]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d002      	beq.n	800de5a <USBD_StdEPReq+0x266>
 800de54:	7bbb      	ldrb	r3, [r7, #14]
 800de56:	2b80      	cmp	r3, #128	@ 0x80
 800de58:	d103      	bne.n	800de62 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	2200      	movs	r2, #0
 800de5e:	601a      	str	r2, [r3, #0]
 800de60:	e00e      	b.n	800de80 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800de62:	7bbb      	ldrb	r3, [r7, #14]
 800de64:	4619      	mov	r1, r3
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 ffb4 	bl	800edd4 <USBD_LL_IsStallEP>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d003      	beq.n	800de7a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	2201      	movs	r2, #1
 800de76:	601a      	str	r2, [r3, #0]
 800de78:	e002      	b.n	800de80 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	2200      	movs	r2, #0
 800de7e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	2202      	movs	r2, #2
 800de84:	4619      	mov	r1, r3
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 fb92 	bl	800e5b0 <USBD_CtlSendData>
              break;
 800de8c:	e004      	b.n	800de98 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800de8e:	6839      	ldr	r1, [r7, #0]
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 fb23 	bl	800e4dc <USBD_CtlError>
              break;
 800de96:	bf00      	nop
          }
          break;
 800de98:	e004      	b.n	800dea4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800de9a:	6839      	ldr	r1, [r7, #0]
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f000 fb1d 	bl	800e4dc <USBD_CtlError>
          break;
 800dea2:	bf00      	nop
      }
      break;
 800dea4:	e004      	b.n	800deb0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800dea6:	6839      	ldr	r1, [r7, #0]
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 fb17 	bl	800e4dc <USBD_CtlError>
      break;
 800deae:	bf00      	nop
  }

  return ret;
 800deb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3710      	adds	r7, #16
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
	...

0800debc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dec6:	2300      	movs	r3, #0
 800dec8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800deca:	2300      	movs	r3, #0
 800decc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dece:	2300      	movs	r3, #0
 800ded0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	885b      	ldrh	r3, [r3, #2]
 800ded6:	0a1b      	lsrs	r3, r3, #8
 800ded8:	b29b      	uxth	r3, r3
 800deda:	3b01      	subs	r3, #1
 800dedc:	2b06      	cmp	r3, #6
 800dede:	f200 8128 	bhi.w	800e132 <USBD_GetDescriptor+0x276>
 800dee2:	a201      	add	r2, pc, #4	@ (adr r2, 800dee8 <USBD_GetDescriptor+0x2c>)
 800dee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee8:	0800df05 	.word	0x0800df05
 800deec:	0800df1d 	.word	0x0800df1d
 800def0:	0800df5d 	.word	0x0800df5d
 800def4:	0800e133 	.word	0x0800e133
 800def8:	0800e133 	.word	0x0800e133
 800defc:	0800e0d3 	.word	0x0800e0d3
 800df00:	0800e0ff 	.word	0x0800e0ff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	7c12      	ldrb	r2, [r2, #16]
 800df10:	f107 0108 	add.w	r1, r7, #8
 800df14:	4610      	mov	r0, r2
 800df16:	4798      	blx	r3
 800df18:	60f8      	str	r0, [r7, #12]
      break;
 800df1a:	e112      	b.n	800e142 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	7c1b      	ldrb	r3, [r3, #16]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d10d      	bne.n	800df40 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df2c:	f107 0208 	add.w	r2, r7, #8
 800df30:	4610      	mov	r0, r2
 800df32:	4798      	blx	r3
 800df34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	3301      	adds	r3, #1
 800df3a:	2202      	movs	r2, #2
 800df3c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800df3e:	e100      	b.n	800e142 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df48:	f107 0208 	add.w	r2, r7, #8
 800df4c:	4610      	mov	r0, r2
 800df4e:	4798      	blx	r3
 800df50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	3301      	adds	r3, #1
 800df56:	2202      	movs	r2, #2
 800df58:	701a      	strb	r2, [r3, #0]
      break;
 800df5a:	e0f2      	b.n	800e142 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	885b      	ldrh	r3, [r3, #2]
 800df60:	b2db      	uxtb	r3, r3
 800df62:	2b05      	cmp	r3, #5
 800df64:	f200 80ac 	bhi.w	800e0c0 <USBD_GetDescriptor+0x204>
 800df68:	a201      	add	r2, pc, #4	@ (adr r2, 800df70 <USBD_GetDescriptor+0xb4>)
 800df6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df6e:	bf00      	nop
 800df70:	0800df89 	.word	0x0800df89
 800df74:	0800dfbd 	.word	0x0800dfbd
 800df78:	0800dff1 	.word	0x0800dff1
 800df7c:	0800e025 	.word	0x0800e025
 800df80:	0800e059 	.word	0x0800e059
 800df84:	0800e08d 	.word	0x0800e08d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d00b      	beq.n	800dfac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	7c12      	ldrb	r2, [r2, #16]
 800dfa0:	f107 0108 	add.w	r1, r7, #8
 800dfa4:	4610      	mov	r0, r2
 800dfa6:	4798      	blx	r3
 800dfa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfaa:	e091      	b.n	800e0d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dfac:	6839      	ldr	r1, [r7, #0]
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 fa94 	bl	800e4dc <USBD_CtlError>
            err++;
 800dfb4:	7afb      	ldrb	r3, [r7, #11]
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	72fb      	strb	r3, [r7, #11]
          break;
 800dfba:	e089      	b.n	800e0d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800dfc2:	689b      	ldr	r3, [r3, #8]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d00b      	beq.n	800dfe0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	7c12      	ldrb	r2, [r2, #16]
 800dfd4:	f107 0108 	add.w	r1, r7, #8
 800dfd8:	4610      	mov	r0, r2
 800dfda:	4798      	blx	r3
 800dfdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfde:	e077      	b.n	800e0d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dfe0:	6839      	ldr	r1, [r7, #0]
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 fa7a 	bl	800e4dc <USBD_CtlError>
            err++;
 800dfe8:	7afb      	ldrb	r3, [r7, #11]
 800dfea:	3301      	adds	r3, #1
 800dfec:	72fb      	strb	r3, [r7, #11]
          break;
 800dfee:	e06f      	b.n	800e0d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d00b      	beq.n	800e014 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	7c12      	ldrb	r2, [r2, #16]
 800e008:	f107 0108 	add.w	r1, r7, #8
 800e00c:	4610      	mov	r0, r2
 800e00e:	4798      	blx	r3
 800e010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e012:	e05d      	b.n	800e0d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e014:	6839      	ldr	r1, [r7, #0]
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 fa60 	bl	800e4dc <USBD_CtlError>
            err++;
 800e01c:	7afb      	ldrb	r3, [r7, #11]
 800e01e:	3301      	adds	r3, #1
 800e020:	72fb      	strb	r3, [r7, #11]
          break;
 800e022:	e055      	b.n	800e0d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800e02a:	691b      	ldr	r3, [r3, #16]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d00b      	beq.n	800e048 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800e036:	691b      	ldr	r3, [r3, #16]
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	7c12      	ldrb	r2, [r2, #16]
 800e03c:	f107 0108 	add.w	r1, r7, #8
 800e040:	4610      	mov	r0, r2
 800e042:	4798      	blx	r3
 800e044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e046:	e043      	b.n	800e0d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e048:	6839      	ldr	r1, [r7, #0]
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f000 fa46 	bl	800e4dc <USBD_CtlError>
            err++;
 800e050:	7afb      	ldrb	r3, [r7, #11]
 800e052:	3301      	adds	r3, #1
 800e054:	72fb      	strb	r3, [r7, #11]
          break;
 800e056:	e03b      	b.n	800e0d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800e05e:	695b      	ldr	r3, [r3, #20]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d00b      	beq.n	800e07c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800e06a:	695b      	ldr	r3, [r3, #20]
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	7c12      	ldrb	r2, [r2, #16]
 800e070:	f107 0108 	add.w	r1, r7, #8
 800e074:	4610      	mov	r0, r2
 800e076:	4798      	blx	r3
 800e078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e07a:	e029      	b.n	800e0d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e07c:	6839      	ldr	r1, [r7, #0]
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 fa2c 	bl	800e4dc <USBD_CtlError>
            err++;
 800e084:	7afb      	ldrb	r3, [r7, #11]
 800e086:	3301      	adds	r3, #1
 800e088:	72fb      	strb	r3, [r7, #11]
          break;
 800e08a:	e021      	b.n	800e0d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800e092:	699b      	ldr	r3, [r3, #24]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d00b      	beq.n	800e0b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800e09e:	699b      	ldr	r3, [r3, #24]
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	7c12      	ldrb	r2, [r2, #16]
 800e0a4:	f107 0108 	add.w	r1, r7, #8
 800e0a8:	4610      	mov	r0, r2
 800e0aa:	4798      	blx	r3
 800e0ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0ae:	e00f      	b.n	800e0d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e0b0:	6839      	ldr	r1, [r7, #0]
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f000 fa12 	bl	800e4dc <USBD_CtlError>
            err++;
 800e0b8:	7afb      	ldrb	r3, [r7, #11]
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	72fb      	strb	r3, [r7, #11]
          break;
 800e0be:	e007      	b.n	800e0d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800e0c0:	6839      	ldr	r1, [r7, #0]
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 fa0a 	bl	800e4dc <USBD_CtlError>
          err++;
 800e0c8:	7afb      	ldrb	r3, [r7, #11]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800e0ce:	e038      	b.n	800e142 <USBD_GetDescriptor+0x286>
 800e0d0:	e037      	b.n	800e142 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	7c1b      	ldrb	r3, [r3, #16]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d109      	bne.n	800e0ee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e0e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0e2:	f107 0208 	add.w	r2, r7, #8
 800e0e6:	4610      	mov	r0, r2
 800e0e8:	4798      	blx	r3
 800e0ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e0ec:	e029      	b.n	800e142 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e0ee:	6839      	ldr	r1, [r7, #0]
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 f9f3 	bl	800e4dc <USBD_CtlError>
        err++;
 800e0f6:	7afb      	ldrb	r3, [r7, #11]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	72fb      	strb	r3, [r7, #11]
      break;
 800e0fc:	e021      	b.n	800e142 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	7c1b      	ldrb	r3, [r3, #16]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d10d      	bne.n	800e122 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e10c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e10e:	f107 0208 	add.w	r2, r7, #8
 800e112:	4610      	mov	r0, r2
 800e114:	4798      	blx	r3
 800e116:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	3301      	adds	r3, #1
 800e11c:	2207      	movs	r2, #7
 800e11e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e120:	e00f      	b.n	800e142 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e122:	6839      	ldr	r1, [r7, #0]
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f000 f9d9 	bl	800e4dc <USBD_CtlError>
        err++;
 800e12a:	7afb      	ldrb	r3, [r7, #11]
 800e12c:	3301      	adds	r3, #1
 800e12e:	72fb      	strb	r3, [r7, #11]
      break;
 800e130:	e007      	b.n	800e142 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e132:	6839      	ldr	r1, [r7, #0]
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f000 f9d1 	bl	800e4dc <USBD_CtlError>
      err++;
 800e13a:	7afb      	ldrb	r3, [r7, #11]
 800e13c:	3301      	adds	r3, #1
 800e13e:	72fb      	strb	r3, [r7, #11]
      break;
 800e140:	bf00      	nop
  }

  if (err != 0U)
 800e142:	7afb      	ldrb	r3, [r7, #11]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d11c      	bne.n	800e182 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800e148:	893b      	ldrh	r3, [r7, #8]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d011      	beq.n	800e172 <USBD_GetDescriptor+0x2b6>
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	88db      	ldrh	r3, [r3, #6]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00d      	beq.n	800e172 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	88da      	ldrh	r2, [r3, #6]
 800e15a:	893b      	ldrh	r3, [r7, #8]
 800e15c:	4293      	cmp	r3, r2
 800e15e:	bf28      	it	cs
 800e160:	4613      	movcs	r3, r2
 800e162:	b29b      	uxth	r3, r3
 800e164:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e166:	893b      	ldrh	r3, [r7, #8]
 800e168:	461a      	mov	r2, r3
 800e16a:	68f9      	ldr	r1, [r7, #12]
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f000 fa1f 	bl	800e5b0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	88db      	ldrh	r3, [r3, #6]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d104      	bne.n	800e184 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 fa76 	bl	800e66c <USBD_CtlSendStatus>
 800e180:	e000      	b.n	800e184 <USBD_GetDescriptor+0x2c8>
    return;
 800e182:	bf00      	nop
    }
  }
}
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop

0800e18c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	889b      	ldrh	r3, [r3, #4]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d130      	bne.n	800e200 <USBD_SetAddress+0x74>
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	88db      	ldrh	r3, [r3, #6]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d12c      	bne.n	800e200 <USBD_SetAddress+0x74>
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	885b      	ldrh	r3, [r3, #2]
 800e1aa:	2b7f      	cmp	r3, #127	@ 0x7f
 800e1ac:	d828      	bhi.n	800e200 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	885b      	ldrh	r3, [r3, #2]
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1c0:	2b03      	cmp	r3, #3
 800e1c2:	d104      	bne.n	800e1ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800e1c4:	6839      	ldr	r1, [r7, #0]
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f000 f988 	bl	800e4dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1cc:	e01d      	b.n	800e20a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	7bfa      	ldrb	r2, [r7, #15]
 800e1d2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e1d6:	7bfb      	ldrb	r3, [r7, #15]
 800e1d8:	4619      	mov	r1, r3
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 fe25 	bl	800ee2a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f000 fa43 	bl	800e66c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e1e6:	7bfb      	ldrb	r3, [r7, #15]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d004      	beq.n	800e1f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2202      	movs	r2, #2
 800e1f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1f4:	e009      	b.n	800e20a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1fe:	e004      	b.n	800e20a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e200:	6839      	ldr	r1, [r7, #0]
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 f96a 	bl	800e4dc <USBD_CtlError>
  }
}
 800e208:	bf00      	nop
 800e20a:	bf00      	nop
 800e20c:	3710      	adds	r7, #16
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
	...

0800e214 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	885b      	ldrh	r3, [r3, #2]
 800e222:	b2da      	uxtb	r2, r3
 800e224:	4b41      	ldr	r3, [pc, #260]	@ (800e32c <USBD_SetConfig+0x118>)
 800e226:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e228:	4b40      	ldr	r3, [pc, #256]	@ (800e32c <USBD_SetConfig+0x118>)
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d904      	bls.n	800e23a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800e230:	6839      	ldr	r1, [r7, #0]
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 f952 	bl	800e4dc <USBD_CtlError>
 800e238:	e075      	b.n	800e326 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e240:	2b02      	cmp	r3, #2
 800e242:	d002      	beq.n	800e24a <USBD_SetConfig+0x36>
 800e244:	2b03      	cmp	r3, #3
 800e246:	d023      	beq.n	800e290 <USBD_SetConfig+0x7c>
 800e248:	e062      	b.n	800e310 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800e24a:	4b38      	ldr	r3, [pc, #224]	@ (800e32c <USBD_SetConfig+0x118>)
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d01a      	beq.n	800e288 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800e252:	4b36      	ldr	r3, [pc, #216]	@ (800e32c <USBD_SetConfig+0x118>)
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	461a      	mov	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2203      	movs	r2, #3
 800e260:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e264:	4b31      	ldr	r3, [pc, #196]	@ (800e32c <USBD_SetConfig+0x118>)
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	4619      	mov	r1, r3
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f7ff f9e8 	bl	800d640 <USBD_SetClassConfig>
 800e270:	4603      	mov	r3, r0
 800e272:	2b02      	cmp	r3, #2
 800e274:	d104      	bne.n	800e280 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800e276:	6839      	ldr	r1, [r7, #0]
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f000 f92f 	bl	800e4dc <USBD_CtlError>
            return;
 800e27e:	e052      	b.n	800e326 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 f9f3 	bl	800e66c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e286:	e04e      	b.n	800e326 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 f9ef 	bl	800e66c <USBD_CtlSendStatus>
        break;
 800e28e:	e04a      	b.n	800e326 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800e290:	4b26      	ldr	r3, [pc, #152]	@ (800e32c <USBD_SetConfig+0x118>)
 800e292:	781b      	ldrb	r3, [r3, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d112      	bne.n	800e2be <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2202      	movs	r2, #2
 800e29c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800e2a0:	4b22      	ldr	r3, [pc, #136]	@ (800e32c <USBD_SetConfig+0x118>)
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800e2aa:	4b20      	ldr	r3, [pc, #128]	@ (800e32c <USBD_SetConfig+0x118>)
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f7ff f9e4 	bl	800d67e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f000 f9d8 	bl	800e66c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e2bc:	e033      	b.n	800e326 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800e2be:	4b1b      	ldr	r3, [pc, #108]	@ (800e32c <USBD_SetConfig+0x118>)
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d01d      	beq.n	800e308 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7ff f9d2 	bl	800d67e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800e2da:	4b14      	ldr	r3, [pc, #80]	@ (800e32c <USBD_SetConfig+0x118>)
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	461a      	mov	r2, r3
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e2e4:	4b11      	ldr	r3, [pc, #68]	@ (800e32c <USBD_SetConfig+0x118>)
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f7ff f9a8 	bl	800d640 <USBD_SetClassConfig>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b02      	cmp	r3, #2
 800e2f4:	d104      	bne.n	800e300 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800e2f6:	6839      	ldr	r1, [r7, #0]
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f000 f8ef 	bl	800e4dc <USBD_CtlError>
            return;
 800e2fe:	e012      	b.n	800e326 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 f9b3 	bl	800e66c <USBD_CtlSendStatus>
        break;
 800e306:	e00e      	b.n	800e326 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 f9af 	bl	800e66c <USBD_CtlSendStatus>
        break;
 800e30e:	e00a      	b.n	800e326 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800e310:	6839      	ldr	r1, [r7, #0]
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f000 f8e2 	bl	800e4dc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800e318:	4b04      	ldr	r3, [pc, #16]	@ (800e32c <USBD_SetConfig+0x118>)
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	4619      	mov	r1, r3
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f7ff f9ad 	bl	800d67e <USBD_ClrClassConfig>
        break;
 800e324:	bf00      	nop
    }
  }
}
 800e326:	3708      	adds	r7, #8
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	200018ac 	.word	0x200018ac

0800e330 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	88db      	ldrh	r3, [r3, #6]
 800e33e:	2b01      	cmp	r3, #1
 800e340:	d004      	beq.n	800e34c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e342:	6839      	ldr	r1, [r7, #0]
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 f8c9 	bl	800e4dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e34a:	e022      	b.n	800e392 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e352:	2b02      	cmp	r3, #2
 800e354:	dc02      	bgt.n	800e35c <USBD_GetConfig+0x2c>
 800e356:	2b00      	cmp	r3, #0
 800e358:	dc03      	bgt.n	800e362 <USBD_GetConfig+0x32>
 800e35a:	e015      	b.n	800e388 <USBD_GetConfig+0x58>
 800e35c:	2b03      	cmp	r3, #3
 800e35e:	d00b      	beq.n	800e378 <USBD_GetConfig+0x48>
 800e360:	e012      	b.n	800e388 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2200      	movs	r2, #0
 800e366:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	3308      	adds	r3, #8
 800e36c:	2201      	movs	r2, #1
 800e36e:	4619      	mov	r1, r3
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f000 f91d 	bl	800e5b0 <USBD_CtlSendData>
        break;
 800e376:	e00c      	b.n	800e392 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	3304      	adds	r3, #4
 800e37c:	2201      	movs	r2, #1
 800e37e:	4619      	mov	r1, r3
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 f915 	bl	800e5b0 <USBD_CtlSendData>
        break;
 800e386:	e004      	b.n	800e392 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800e388:	6839      	ldr	r1, [r7, #0]
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 f8a6 	bl	800e4dc <USBD_CtlError>
        break;
 800e390:	bf00      	nop
}
 800e392:	bf00      	nop
 800e394:	3708      	adds	r7, #8
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}

0800e39a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e39a:	b580      	push	{r7, lr}
 800e39c:	b082      	sub	sp, #8
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
 800e3a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e3aa:	3b01      	subs	r3, #1
 800e3ac:	2b02      	cmp	r3, #2
 800e3ae:	d81e      	bhi.n	800e3ee <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	88db      	ldrh	r3, [r3, #6]
 800e3b4:	2b02      	cmp	r3, #2
 800e3b6:	d004      	beq.n	800e3c2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800e3b8:	6839      	ldr	r1, [r7, #0]
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 f88e 	bl	800e4dc <USBD_CtlError>
        break;
 800e3c0:	e01a      	b.n	800e3f8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d005      	beq.n	800e3de <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	f043 0202 	orr.w	r2, r3, #2
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	330c      	adds	r3, #12
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f000 f8e2 	bl	800e5b0 <USBD_CtlSendData>
      break;
 800e3ec:	e004      	b.n	800e3f8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800e3ee:	6839      	ldr	r1, [r7, #0]
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 f873 	bl	800e4dc <USBD_CtlError>
      break;
 800e3f6:	bf00      	nop
  }
}
 800e3f8:	bf00      	nop
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	885b      	ldrh	r3, [r3, #2]
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d106      	bne.n	800e420 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2201      	movs	r2, #1
 800e416:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f000 f926 	bl	800e66c <USBD_CtlSendStatus>
  }
}
 800e420:	bf00      	nop
 800e422:	3708      	adds	r7, #8
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}

0800e428 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e438:	3b01      	subs	r3, #1
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	d80b      	bhi.n	800e456 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	885b      	ldrh	r3, [r3, #2]
 800e442:	2b01      	cmp	r3, #1
 800e444:	d10c      	bne.n	800e460 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2200      	movs	r2, #0
 800e44a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f000 f90c 	bl	800e66c <USBD_CtlSendStatus>
      }
      break;
 800e454:	e004      	b.n	800e460 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800e456:	6839      	ldr	r1, [r7, #0]
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 f83f 	bl	800e4dc <USBD_CtlError>
      break;
 800e45e:	e000      	b.n	800e462 <USBD_ClrFeature+0x3a>
      break;
 800e460:	bf00      	nop
  }
}
 800e462:	bf00      	nop
 800e464:	3708      	adds	r7, #8
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}

0800e46a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e46a:	b480      	push	{r7}
 800e46c:	b083      	sub	sp, #12
 800e46e:	af00      	add	r7, sp, #0
 800e470:	6078      	str	r0, [r7, #4]
 800e472:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	781a      	ldrb	r2, [r3, #0]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	785a      	ldrb	r2, [r3, #1]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	3302      	adds	r3, #2
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	461a      	mov	r2, r3
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	3303      	adds	r3, #3
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	021b      	lsls	r3, r3, #8
 800e494:	b29b      	uxth	r3, r3
 800e496:	4413      	add	r3, r2
 800e498:	b29a      	uxth	r2, r3
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	3304      	adds	r3, #4
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	3305      	adds	r3, #5
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	021b      	lsls	r3, r3, #8
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	4413      	add	r3, r2
 800e4b2:	b29a      	uxth	r2, r3
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	3306      	adds	r3, #6
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	461a      	mov	r2, r3
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	3307      	adds	r3, #7
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	021b      	lsls	r3, r3, #8
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	4413      	add	r3, r2
 800e4cc:	b29a      	uxth	r2, r3
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	80da      	strh	r2, [r3, #6]

}
 800e4d2:	bf00      	nop
 800e4d4:	370c      	adds	r7, #12
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bc80      	pop	{r7}
 800e4da:	4770      	bx	lr

0800e4dc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800e4e6:	2180      	movs	r1, #128	@ 0x80
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f000 fc35 	bl	800ed58 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e4ee:	2100      	movs	r1, #0
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 fc31 	bl	800ed58 <USBD_LL_StallEP>
}
 800e4f6:	bf00      	nop
 800e4f8:	3708      	adds	r7, #8
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}

0800e4fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e4fe:	b580      	push	{r7, lr}
 800e500:	b086      	sub	sp, #24
 800e502:	af00      	add	r7, sp, #0
 800e504:	60f8      	str	r0, [r7, #12]
 800e506:	60b9      	str	r1, [r7, #8]
 800e508:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e50a:	2300      	movs	r3, #0
 800e50c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d032      	beq.n	800e57a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e514:	68f8      	ldr	r0, [r7, #12]
 800e516:	f000 f834 	bl	800e582 <USBD_GetLen>
 800e51a:	4603      	mov	r3, r0
 800e51c:	3301      	adds	r3, #1
 800e51e:	b29b      	uxth	r3, r3
 800e520:	005b      	lsls	r3, r3, #1
 800e522:	b29a      	uxth	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e528:	7dfb      	ldrb	r3, [r7, #23]
 800e52a:	1c5a      	adds	r2, r3, #1
 800e52c:	75fa      	strb	r2, [r7, #23]
 800e52e:	461a      	mov	r2, r3
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	4413      	add	r3, r2
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	7812      	ldrb	r2, [r2, #0]
 800e538:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e53a:	7dfb      	ldrb	r3, [r7, #23]
 800e53c:	1c5a      	adds	r2, r3, #1
 800e53e:	75fa      	strb	r2, [r7, #23]
 800e540:	461a      	mov	r2, r3
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	4413      	add	r3, r2
 800e546:	2203      	movs	r2, #3
 800e548:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e54a:	e012      	b.n	800e572 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	1c5a      	adds	r2, r3, #1
 800e550:	60fa      	str	r2, [r7, #12]
 800e552:	7dfa      	ldrb	r2, [r7, #23]
 800e554:	1c51      	adds	r1, r2, #1
 800e556:	75f9      	strb	r1, [r7, #23]
 800e558:	4611      	mov	r1, r2
 800e55a:	68ba      	ldr	r2, [r7, #8]
 800e55c:	440a      	add	r2, r1
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e562:	7dfb      	ldrb	r3, [r7, #23]
 800e564:	1c5a      	adds	r2, r3, #1
 800e566:	75fa      	strb	r2, [r7, #23]
 800e568:	461a      	mov	r2, r3
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	4413      	add	r3, r2
 800e56e:	2200      	movs	r2, #0
 800e570:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d1e8      	bne.n	800e54c <USBD_GetString+0x4e>
    }
  }
}
 800e57a:	bf00      	nop
 800e57c:	3718      	adds	r7, #24
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}

0800e582 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e582:	b480      	push	{r7}
 800e584:	b085      	sub	sp, #20
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e58a:	2300      	movs	r3, #0
 800e58c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800e58e:	e005      	b.n	800e59c <USBD_GetLen+0x1a>
  {
    len++;
 800e590:	7bfb      	ldrb	r3, [r7, #15]
 800e592:	3301      	adds	r3, #1
 800e594:	73fb      	strb	r3, [r7, #15]
    buf++;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	3301      	adds	r3, #1
 800e59a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1f5      	bne.n	800e590 <USBD_GetLen+0xe>
  }

  return len;
 800e5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3714      	adds	r7, #20
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bc80      	pop	{r7}
 800e5ae:	4770      	bx	lr

0800e5b0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b084      	sub	sp, #16
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2202      	movs	r2, #2
 800e5c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e5c6:	88fa      	ldrh	r2, [r7, #6]
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e5cc:	88fa      	ldrh	r2, [r7, #6]
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e5d2:	88fb      	ldrh	r3, [r7, #6]
 800e5d4:	68ba      	ldr	r2, [r7, #8]
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	f000 fc45 	bl	800ee68 <USBD_LL_Transmit>

  return USBD_OK;
 800e5de:	2300      	movs	r3, #0
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3710      	adds	r7, #16
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	60f8      	str	r0, [r7, #12]
 800e5f0:	60b9      	str	r1, [r7, #8]
 800e5f2:	4613      	mov	r3, r2
 800e5f4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e5f6:	88fb      	ldrh	r3, [r7, #6]
 800e5f8:	68ba      	ldr	r2, [r7, #8]
 800e5fa:	2100      	movs	r1, #0
 800e5fc:	68f8      	ldr	r0, [r7, #12]
 800e5fe:	f000 fc33 	bl	800ee68 <USBD_LL_Transmit>

  return USBD_OK;
 800e602:	2300      	movs	r3, #0
}
 800e604:	4618      	mov	r0, r3
 800e606:	3710      	adds	r7, #16
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}

0800e60c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	60f8      	str	r0, [r7, #12]
 800e614:	60b9      	str	r1, [r7, #8]
 800e616:	4613      	mov	r3, r2
 800e618:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2203      	movs	r2, #3
 800e61e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e622:	88fa      	ldrh	r2, [r7, #6]
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800e62a:	88fa      	ldrh	r2, [r7, #6]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e632:	88fb      	ldrh	r3, [r7, #6]
 800e634:	68ba      	ldr	r2, [r7, #8]
 800e636:	2100      	movs	r1, #0
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f000 fc38 	bl	800eeae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e63e:	2300      	movs	r3, #0
}
 800e640:	4618      	mov	r0, r3
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	4613      	mov	r3, r2
 800e654:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e656:	88fb      	ldrh	r3, [r7, #6]
 800e658:	68ba      	ldr	r2, [r7, #8]
 800e65a:	2100      	movs	r1, #0
 800e65c:	68f8      	ldr	r0, [r7, #12]
 800e65e:	f000 fc26 	bl	800eeae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e662:	2300      	movs	r3, #0
}
 800e664:	4618      	mov	r0, r3
 800e666:	3710      	adds	r7, #16
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}

0800e66c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2204      	movs	r2, #4
 800e678:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e67c:	2300      	movs	r3, #0
 800e67e:	2200      	movs	r2, #0
 800e680:	2100      	movs	r1, #0
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 fbf0 	bl	800ee68 <USBD_LL_Transmit>

  return USBD_OK;
 800e688:	2300      	movs	r3, #0
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3708      	adds	r7, #8
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e692:	b580      	push	{r7, lr}
 800e694:	b082      	sub	sp, #8
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2205      	movs	r2, #5
 800e69e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f000 fc00 	bl	800eeae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6ae:	2300      	movs	r3, #0
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3708      	adds	r7, #8
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
#if LSD_PERIPH_USED_USB == TRUE
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e6bc:	2200      	movs	r2, #0
 800e6be:	4912      	ldr	r1, [pc, #72]	@ (800e708 <MX_USB_DEVICE_Init+0x50>)
 800e6c0:	4812      	ldr	r0, [pc, #72]	@ (800e70c <MX_USB_DEVICE_Init+0x54>)
 800e6c2:	f7fe ff63 	bl	800d58c <USBD_Init>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d001      	beq.n	800e6d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e6cc:	f7f4 fffa 	bl	80036c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e6d0:	490f      	ldr	r1, [pc, #60]	@ (800e710 <MX_USB_DEVICE_Init+0x58>)
 800e6d2:	480e      	ldr	r0, [pc, #56]	@ (800e70c <MX_USB_DEVICE_Init+0x54>)
 800e6d4:	f7fe ff85 	bl	800d5e2 <USBD_RegisterClass>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d001      	beq.n	800e6e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e6de:	f7f4 fff1 	bl	80036c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e6e2:	490c      	ldr	r1, [pc, #48]	@ (800e714 <MX_USB_DEVICE_Init+0x5c>)
 800e6e4:	4809      	ldr	r0, [pc, #36]	@ (800e70c <MX_USB_DEVICE_Init+0x54>)
 800e6e6:	f7fe fee5 	bl	800d4b4 <USBD_CDC_RegisterInterface>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d001      	beq.n	800e6f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e6f0:	f7f4 ffe8 	bl	80036c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e6f4:	4805      	ldr	r0, [pc, #20]	@ (800e70c <MX_USB_DEVICE_Init+0x54>)
 800e6f6:	f7fe ff8d 	bl	800d614 <USBD_Start>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d001      	beq.n	800e704 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e700:	f7f4 ffe0 	bl	80036c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
#endif /* LSD_PERIPH_USED_USB */
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e704:	bf00      	nop
 800e706:	bd80      	pop	{r7, pc}
 800e708:	2000012c 	.word	0x2000012c
 800e70c:	200018b0 	.word	0x200018b0
 800e710:	20000018 	.word	0x20000018
 800e714:	2000011c 	.word	0x2000011c

0800e718 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e71c:	2200      	movs	r2, #0
 800e71e:	4905      	ldr	r1, [pc, #20]	@ (800e734 <CDC_Init_FS+0x1c>)
 800e720:	4805      	ldr	r0, [pc, #20]	@ (800e738 <CDC_Init_FS+0x20>)
 800e722:	f7fe fedd 	bl	800d4e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e726:	4905      	ldr	r1, [pc, #20]	@ (800e73c <CDC_Init_FS+0x24>)
 800e728:	4803      	ldr	r0, [pc, #12]	@ (800e738 <CDC_Init_FS+0x20>)
 800e72a:	f7fe fef2 	bl	800d512 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e72e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e730:	4618      	mov	r0, r3
 800e732:	bd80      	pop	{r7, pc}
 800e734:	20001f74 	.word	0x20001f74
 800e738:	200018b0 	.word	0x200018b0
 800e73c:	20001b74 	.word	0x20001b74

0800e740 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e740:	b480      	push	{r7}
 800e742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e744:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e746:	4618      	mov	r0, r3
 800e748:	46bd      	mov	sp, r7
 800e74a:	bc80      	pop	{r7}
 800e74c:	4770      	bx	lr
	...

0800e750 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	4603      	mov	r3, r0
 800e758:	6039      	str	r1, [r7, #0]
 800e75a:	71fb      	strb	r3, [r7, #7]
 800e75c:	4613      	mov	r3, r2
 800e75e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e760:	79fb      	ldrb	r3, [r7, #7]
 800e762:	2b23      	cmp	r3, #35	@ 0x23
 800e764:	d84a      	bhi.n	800e7fc <CDC_Control_FS+0xac>
 800e766:	a201      	add	r2, pc, #4	@ (adr r2, 800e76c <CDC_Control_FS+0x1c>)
 800e768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e76c:	0800e7fd 	.word	0x0800e7fd
 800e770:	0800e7fd 	.word	0x0800e7fd
 800e774:	0800e7fd 	.word	0x0800e7fd
 800e778:	0800e7fd 	.word	0x0800e7fd
 800e77c:	0800e7fd 	.word	0x0800e7fd
 800e780:	0800e7fd 	.word	0x0800e7fd
 800e784:	0800e7fd 	.word	0x0800e7fd
 800e788:	0800e7fd 	.word	0x0800e7fd
 800e78c:	0800e7fd 	.word	0x0800e7fd
 800e790:	0800e7fd 	.word	0x0800e7fd
 800e794:	0800e7fd 	.word	0x0800e7fd
 800e798:	0800e7fd 	.word	0x0800e7fd
 800e79c:	0800e7fd 	.word	0x0800e7fd
 800e7a0:	0800e7fd 	.word	0x0800e7fd
 800e7a4:	0800e7fd 	.word	0x0800e7fd
 800e7a8:	0800e7fd 	.word	0x0800e7fd
 800e7ac:	0800e7fd 	.word	0x0800e7fd
 800e7b0:	0800e7fd 	.word	0x0800e7fd
 800e7b4:	0800e7fd 	.word	0x0800e7fd
 800e7b8:	0800e7fd 	.word	0x0800e7fd
 800e7bc:	0800e7fd 	.word	0x0800e7fd
 800e7c0:	0800e7fd 	.word	0x0800e7fd
 800e7c4:	0800e7fd 	.word	0x0800e7fd
 800e7c8:	0800e7fd 	.word	0x0800e7fd
 800e7cc:	0800e7fd 	.word	0x0800e7fd
 800e7d0:	0800e7fd 	.word	0x0800e7fd
 800e7d4:	0800e7fd 	.word	0x0800e7fd
 800e7d8:	0800e7fd 	.word	0x0800e7fd
 800e7dc:	0800e7fd 	.word	0x0800e7fd
 800e7e0:	0800e7fd 	.word	0x0800e7fd
 800e7e4:	0800e7fd 	.word	0x0800e7fd
 800e7e8:	0800e7fd 	.word	0x0800e7fd
 800e7ec:	0800e7fd 	.word	0x0800e7fd
 800e7f0:	0800e7fd 	.word	0x0800e7fd
 800e7f4:	0800e7fd 	.word	0x0800e7fd
 800e7f8:	0800e7fd 	.word	0x0800e7fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e7fc:	bf00      	nop
  }

  return (USBD_OK);
 800e7fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e800:	4618      	mov	r0, r3
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	bc80      	pop	{r7}
 800e808:	4770      	bx	lr
 800e80a:	bf00      	nop

0800e80c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e816:	6879      	ldr	r1, [r7, #4]
 800e818:	4805      	ldr	r0, [pc, #20]	@ (800e830 <CDC_Receive_FS+0x24>)
 800e81a:	f7fe fe7a 	bl	800d512 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e81e:	4804      	ldr	r0, [pc, #16]	@ (800e830 <CDC_Receive_FS+0x24>)
 800e820:	f7fe fe8a 	bl	800d538 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e824:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e826:	4618      	mov	r0, r3
 800e828:	3708      	adds	r7, #8
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}
 800e82e:	bf00      	nop
 800e830:	200018b0 	.word	0x200018b0

0800e834 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e834:	b480      	push	{r7}
 800e836:	b083      	sub	sp, #12
 800e838:	af00      	add	r7, sp, #0
 800e83a:	4603      	mov	r3, r0
 800e83c:	6039      	str	r1, [r7, #0]
 800e83e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	2212      	movs	r2, #18
 800e844:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e846:	4b03      	ldr	r3, [pc, #12]	@ (800e854 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e848:	4618      	mov	r0, r3
 800e84a:	370c      	adds	r7, #12
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bc80      	pop	{r7}
 800e850:	4770      	bx	lr
 800e852:	bf00      	nop
 800e854:	20000148 	.word	0x20000148

0800e858 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e858:	b480      	push	{r7}
 800e85a:	b083      	sub	sp, #12
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	4603      	mov	r3, r0
 800e860:	6039      	str	r1, [r7, #0]
 800e862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	2204      	movs	r2, #4
 800e868:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e86a:	4b03      	ldr	r3, [pc, #12]	@ (800e878 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	370c      	adds	r7, #12
 800e870:	46bd      	mov	sp, r7
 800e872:	bc80      	pop	{r7}
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop
 800e878:	2000015c 	.word	0x2000015c

0800e87c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b082      	sub	sp, #8
 800e880:	af00      	add	r7, sp, #0
 800e882:	4603      	mov	r3, r0
 800e884:	6039      	str	r1, [r7, #0]
 800e886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e888:	79fb      	ldrb	r3, [r7, #7]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d105      	bne.n	800e89a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e88e:	683a      	ldr	r2, [r7, #0]
 800e890:	4907      	ldr	r1, [pc, #28]	@ (800e8b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e892:	4808      	ldr	r0, [pc, #32]	@ (800e8b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e894:	f7ff fe33 	bl	800e4fe <USBD_GetString>
 800e898:	e004      	b.n	800e8a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e89a:	683a      	ldr	r2, [r7, #0]
 800e89c:	4904      	ldr	r1, [pc, #16]	@ (800e8b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e89e:	4805      	ldr	r0, [pc, #20]	@ (800e8b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e8a0:	f7ff fe2d 	bl	800e4fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800e8a4:	4b02      	ldr	r3, [pc, #8]	@ (800e8b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3708      	adds	r7, #8
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	20002374 	.word	0x20002374
 800e8b4:	08012c44 	.word	0x08012c44

0800e8b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	4603      	mov	r3, r0
 800e8c0:	6039      	str	r1, [r7, #0]
 800e8c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e8c4:	683a      	ldr	r2, [r7, #0]
 800e8c6:	4904      	ldr	r1, [pc, #16]	@ (800e8d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e8c8:	4804      	ldr	r0, [pc, #16]	@ (800e8dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e8ca:	f7ff fe18 	bl	800e4fe <USBD_GetString>
  return USBD_StrDesc;
 800e8ce:	4b02      	ldr	r3, [pc, #8]	@ (800e8d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3708      	adds	r7, #8
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	20002374 	.word	0x20002374
 800e8dc:	08012c5c 	.word	0x08012c5c

0800e8e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	6039      	str	r1, [r7, #0]
 800e8ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	221a      	movs	r2, #26
 800e8f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e8f2:	f000 f843 	bl	800e97c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e8f6:	4b02      	ldr	r3, [pc, #8]	@ (800e900 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3708      	adds	r7, #8
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}
 800e900:	20000160 	.word	0x20000160

0800e904 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b082      	sub	sp, #8
 800e908:	af00      	add	r7, sp, #0
 800e90a:	4603      	mov	r3, r0
 800e90c:	6039      	str	r1, [r7, #0]
 800e90e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e910:	79fb      	ldrb	r3, [r7, #7]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d105      	bne.n	800e922 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e916:	683a      	ldr	r2, [r7, #0]
 800e918:	4907      	ldr	r1, [pc, #28]	@ (800e938 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e91a:	4808      	ldr	r0, [pc, #32]	@ (800e93c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e91c:	f7ff fdef 	bl	800e4fe <USBD_GetString>
 800e920:	e004      	b.n	800e92c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e922:	683a      	ldr	r2, [r7, #0]
 800e924:	4904      	ldr	r1, [pc, #16]	@ (800e938 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e926:	4805      	ldr	r0, [pc, #20]	@ (800e93c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e928:	f7ff fde9 	bl	800e4fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800e92c:	4b02      	ldr	r3, [pc, #8]	@ (800e938 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3708      	adds	r7, #8
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	20002374 	.word	0x20002374
 800e93c:	08012c70 	.word	0x08012c70

0800e940 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	4603      	mov	r3, r0
 800e948:	6039      	str	r1, [r7, #0]
 800e94a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e94c:	79fb      	ldrb	r3, [r7, #7]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d105      	bne.n	800e95e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e952:	683a      	ldr	r2, [r7, #0]
 800e954:	4907      	ldr	r1, [pc, #28]	@ (800e974 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e956:	4808      	ldr	r0, [pc, #32]	@ (800e978 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e958:	f7ff fdd1 	bl	800e4fe <USBD_GetString>
 800e95c:	e004      	b.n	800e968 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e95e:	683a      	ldr	r2, [r7, #0]
 800e960:	4904      	ldr	r1, [pc, #16]	@ (800e974 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e962:	4805      	ldr	r0, [pc, #20]	@ (800e978 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e964:	f7ff fdcb 	bl	800e4fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800e968:	4b02      	ldr	r3, [pc, #8]	@ (800e974 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3708      	adds	r7, #8
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	20002374 	.word	0x20002374
 800e978:	08012c7c 	.word	0x08012c7c

0800e97c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e982:	4b0f      	ldr	r3, [pc, #60]	@ (800e9c0 <Get_SerialNum+0x44>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e988:	4b0e      	ldr	r3, [pc, #56]	@ (800e9c4 <Get_SerialNum+0x48>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e98e:	4b0e      	ldr	r3, [pc, #56]	@ (800e9c8 <Get_SerialNum+0x4c>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e994:	68fa      	ldr	r2, [r7, #12]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	4413      	add	r3, r2
 800e99a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d009      	beq.n	800e9b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e9a2:	2208      	movs	r2, #8
 800e9a4:	4909      	ldr	r1, [pc, #36]	@ (800e9cc <Get_SerialNum+0x50>)
 800e9a6:	68f8      	ldr	r0, [r7, #12]
 800e9a8:	f000 f814 	bl	800e9d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e9ac:	2204      	movs	r2, #4
 800e9ae:	4908      	ldr	r1, [pc, #32]	@ (800e9d0 <Get_SerialNum+0x54>)
 800e9b0:	68b8      	ldr	r0, [r7, #8]
 800e9b2:	f000 f80f 	bl	800e9d4 <IntToUnicode>
  }
}
 800e9b6:	bf00      	nop
 800e9b8:	3710      	adds	r7, #16
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	1ffff7e8 	.word	0x1ffff7e8
 800e9c4:	1ffff7ec 	.word	0x1ffff7ec
 800e9c8:	1ffff7f0 	.word	0x1ffff7f0
 800e9cc:	20000162 	.word	0x20000162
 800e9d0:	20000172 	.word	0x20000172

0800e9d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b087      	sub	sp, #28
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	4613      	mov	r3, r2
 800e9e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	75fb      	strb	r3, [r7, #23]
 800e9ea:	e027      	b.n	800ea3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	0f1b      	lsrs	r3, r3, #28
 800e9f0:	2b09      	cmp	r3, #9
 800e9f2:	d80b      	bhi.n	800ea0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	0f1b      	lsrs	r3, r3, #28
 800e9f8:	b2da      	uxtb	r2, r3
 800e9fa:	7dfb      	ldrb	r3, [r7, #23]
 800e9fc:	005b      	lsls	r3, r3, #1
 800e9fe:	4619      	mov	r1, r3
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	440b      	add	r3, r1
 800ea04:	3230      	adds	r2, #48	@ 0x30
 800ea06:	b2d2      	uxtb	r2, r2
 800ea08:	701a      	strb	r2, [r3, #0]
 800ea0a:	e00a      	b.n	800ea22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	0f1b      	lsrs	r3, r3, #28
 800ea10:	b2da      	uxtb	r2, r3
 800ea12:	7dfb      	ldrb	r3, [r7, #23]
 800ea14:	005b      	lsls	r3, r3, #1
 800ea16:	4619      	mov	r1, r3
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	440b      	add	r3, r1
 800ea1c:	3237      	adds	r2, #55	@ 0x37
 800ea1e:	b2d2      	uxtb	r2, r2
 800ea20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	011b      	lsls	r3, r3, #4
 800ea26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ea28:	7dfb      	ldrb	r3, [r7, #23]
 800ea2a:	005b      	lsls	r3, r3, #1
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	68ba      	ldr	r2, [r7, #8]
 800ea30:	4413      	add	r3, r2
 800ea32:	2200      	movs	r2, #0
 800ea34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ea36:	7dfb      	ldrb	r3, [r7, #23]
 800ea38:	3301      	adds	r3, #1
 800ea3a:	75fb      	strb	r3, [r7, #23]
 800ea3c:	7dfa      	ldrb	r2, [r7, #23]
 800ea3e:	79fb      	ldrb	r3, [r7, #7]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d3d3      	bcc.n	800e9ec <IntToUnicode+0x18>
  }
}
 800ea44:	bf00      	nop
 800ea46:	bf00      	nop
 800ea48:	371c      	adds	r7, #28
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bc80      	pop	{r7}
 800ea4e:	4770      	bx	lr

0800ea50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b084      	sub	sp, #16
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	4a11      	ldr	r2, [pc, #68]	@ (800eaa4 <HAL_PCD_MspInit+0x54>)
 800ea5e:	4293      	cmp	r3, r2
 800ea60:	d11b      	bne.n	800ea9a <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ea62:	4b11      	ldr	r3, [pc, #68]	@ (800eaa8 <HAL_PCD_MspInit+0x58>)
 800ea64:	69db      	ldr	r3, [r3, #28]
 800ea66:	4a10      	ldr	r2, [pc, #64]	@ (800eaa8 <HAL_PCD_MspInit+0x58>)
 800ea68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ea6c:	61d3      	str	r3, [r2, #28]
 800ea6e:	4b0e      	ldr	r3, [pc, #56]	@ (800eaa8 <HAL_PCD_MspInit+0x58>)
 800ea70:	69db      	ldr	r3, [r3, #28]
 800ea72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ea76:	60fb      	str	r3, [r7, #12]
 800ea78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	2100      	movs	r1, #0
 800ea7e:	2013      	movs	r0, #19
 800ea80:	f7f5 fae7 	bl	8004052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800ea84:	2013      	movs	r0, #19
 800ea86:	f7f5 fb00 	bl	800408a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	2100      	movs	r1, #0
 800ea8e:	2014      	movs	r0, #20
 800ea90:	f7f5 fadf 	bl	8004052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ea94:	2014      	movs	r0, #20
 800ea96:	f7f5 faf8 	bl	800408a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ea9a:	bf00      	nop
 800ea9c:	3710      	adds	r7, #16
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	40005c00 	.word	0x40005c00
 800eaa8:	40021000 	.word	0x40021000

0800eaac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800eac0:	4619      	mov	r1, r3
 800eac2:	4610      	mov	r0, r2
 800eac4:	f7fe fdee 	bl	800d6a4 <USBD_LL_SetupStage>
}
 800eac8:	bf00      	nop
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	460b      	mov	r3, r1
 800eada:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800eae2:	78fa      	ldrb	r2, [r7, #3]
 800eae4:	6879      	ldr	r1, [r7, #4]
 800eae6:	4613      	mov	r3, r2
 800eae8:	009b      	lsls	r3, r3, #2
 800eaea:	4413      	add	r3, r2
 800eaec:	00db      	lsls	r3, r3, #3
 800eaee:	440b      	add	r3, r1
 800eaf0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	78fb      	ldrb	r3, [r7, #3]
 800eaf8:	4619      	mov	r1, r3
 800eafa:	f7fe fe20 	bl	800d73e <USBD_LL_DataOutStage>
}
 800eafe:	bf00      	nop
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b082      	sub	sp, #8
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
 800eb0e:	460b      	mov	r3, r1
 800eb10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800eb18:	78fa      	ldrb	r2, [r7, #3]
 800eb1a:	6879      	ldr	r1, [r7, #4]
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	009b      	lsls	r3, r3, #2
 800eb20:	4413      	add	r3, r2
 800eb22:	00db      	lsls	r3, r3, #3
 800eb24:	440b      	add	r3, r1
 800eb26:	3324      	adds	r3, #36	@ 0x24
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	78fb      	ldrb	r3, [r7, #3]
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	f7fe fe77 	bl	800d820 <USBD_LL_DataInStage>
}
 800eb32:	bf00      	nop
 800eb34:	3708      	adds	r7, #8
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b082      	sub	sp, #8
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7fe ff87 	bl	800da5c <USBD_LL_SOF>
}
 800eb4e:	bf00      	nop
 800eb50:	3708      	adds	r7, #8
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}

0800eb56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb56:	b580      	push	{r7, lr}
 800eb58:	b084      	sub	sp, #16
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eb5e:	2301      	movs	r3, #1
 800eb60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	799b      	ldrb	r3, [r3, #6]
 800eb66:	2b02      	cmp	r3, #2
 800eb68:	d001      	beq.n	800eb6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800eb6a:	f7f4 fdab 	bl	80036c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eb74:	7bfa      	ldrb	r2, [r7, #15]
 800eb76:	4611      	mov	r1, r2
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fe ff37 	bl	800d9ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eb84:	4618      	mov	r0, r3
 800eb86:	f7fe fef0 	bl	800d96a <USBD_LL_Reset>
}
 800eb8a:	bf00      	nop
 800eb8c:	3710      	adds	r7, #16
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
	...

0800eb94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7fe ff31 	bl	800da0a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	7a9b      	ldrb	r3, [r3, #10]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d005      	beq.n	800ebbc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ebb0:	4b04      	ldr	r3, [pc, #16]	@ (800ebc4 <HAL_PCD_SuspendCallback+0x30>)
 800ebb2:	691b      	ldr	r3, [r3, #16]
 800ebb4:	4a03      	ldr	r2, [pc, #12]	@ (800ebc4 <HAL_PCD_SuspendCallback+0x30>)
 800ebb6:	f043 0306 	orr.w	r3, r3, #6
 800ebba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ebbc:	bf00      	nop
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	e000ed00 	.word	0xe000ed00

0800ebc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7fe ff2b 	bl	800da32 <USBD_LL_Resume>
}
 800ebdc:	bf00      	nop
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ebec:	4a28      	ldr	r2, [pc, #160]	@ (800ec90 <USBD_LL_Init+0xac>)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	4a26      	ldr	r2, [pc, #152]	@ (800ec90 <USBD_LL_Init+0xac>)
 800ebf8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ebfc:	4b24      	ldr	r3, [pc, #144]	@ (800ec90 <USBD_LL_Init+0xac>)
 800ebfe:	4a25      	ldr	r2, [pc, #148]	@ (800ec94 <USBD_LL_Init+0xb0>)
 800ec00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ec02:	4b23      	ldr	r3, [pc, #140]	@ (800ec90 <USBD_LL_Init+0xac>)
 800ec04:	2208      	movs	r2, #8
 800ec06:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ec08:	4b21      	ldr	r3, [pc, #132]	@ (800ec90 <USBD_LL_Init+0xac>)
 800ec0a:	2202      	movs	r2, #2
 800ec0c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ec0e:	4b20      	ldr	r3, [pc, #128]	@ (800ec90 <USBD_LL_Init+0xac>)
 800ec10:	2200      	movs	r2, #0
 800ec12:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ec14:	4b1e      	ldr	r3, [pc, #120]	@ (800ec90 <USBD_LL_Init+0xac>)
 800ec16:	2200      	movs	r2, #0
 800ec18:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ec1a:	4b1d      	ldr	r3, [pc, #116]	@ (800ec90 <USBD_LL_Init+0xac>)
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ec20:	481b      	ldr	r0, [pc, #108]	@ (800ec90 <USBD_LL_Init+0xac>)
 800ec22:	f7f6 fdc8 	bl	80057b6 <HAL_PCD_Init>
 800ec26:	4603      	mov	r3, r0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d001      	beq.n	800ec30 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ec2c:	f7f4 fd4a 	bl	80036c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ec36:	2318      	movs	r3, #24
 800ec38:	2200      	movs	r2, #0
 800ec3a:	2100      	movs	r1, #0
 800ec3c:	f7f8 fad9 	bl	80071f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ec46:	2358      	movs	r3, #88	@ 0x58
 800ec48:	2200      	movs	r2, #0
 800ec4a:	2180      	movs	r1, #128	@ 0x80
 800ec4c:	f7f8 fad1 	bl	80071f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ec56:	23c0      	movs	r3, #192	@ 0xc0
 800ec58:	2200      	movs	r2, #0
 800ec5a:	2181      	movs	r1, #129	@ 0x81
 800ec5c:	f7f8 fac9 	bl	80071f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ec66:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	2101      	movs	r1, #1
 800ec6e:	f7f8 fac0 	bl	80071f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ec78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	2182      	movs	r1, #130	@ 0x82
 800ec80:	f7f8 fab7 	bl	80071f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ec84:	2300      	movs	r3, #0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3708      	adds	r7, #8
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	20002574 	.word	0x20002574
 800ec94:	40005c00 	.word	0x40005c00

0800ec98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eca0:	2300      	movs	r3, #0
 800eca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eca4:	2300      	movs	r3, #0
 800eca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7f6 fe77 	bl	80059a2 <HAL_PCD_Start>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecb8:	7bfb      	ldrb	r3, [r7, #15]
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f000 f94e 	bl	800ef5c <USBD_Get_USB_Status>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ecce:	b580      	push	{r7, lr}
 800ecd0:	b084      	sub	sp, #16
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
 800ecd6:	4608      	mov	r0, r1
 800ecd8:	4611      	mov	r1, r2
 800ecda:	461a      	mov	r2, r3
 800ecdc:	4603      	mov	r3, r0
 800ecde:	70fb      	strb	r3, [r7, #3]
 800ece0:	460b      	mov	r3, r1
 800ece2:	70bb      	strb	r3, [r7, #2]
 800ece4:	4613      	mov	r3, r2
 800ece6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ece8:	2300      	movs	r3, #0
 800ecea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecec:	2300      	movs	r3, #0
 800ecee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ecf6:	78bb      	ldrb	r3, [r7, #2]
 800ecf8:	883a      	ldrh	r2, [r7, #0]
 800ecfa:	78f9      	ldrb	r1, [r7, #3]
 800ecfc:	f7f6 ffcb 	bl	8005c96 <HAL_PCD_EP_Open>
 800ed00:	4603      	mov	r3, r0
 800ed02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed04:	7bfb      	ldrb	r3, [r7, #15]
 800ed06:	4618      	mov	r0, r3
 800ed08:	f000 f928 	bl	800ef5c <USBD_Get_USB_Status>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed10:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3710      	adds	r7, #16
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}

0800ed1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed1a:	b580      	push	{r7, lr}
 800ed1c:	b084      	sub	sp, #16
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	6078      	str	r0, [r7, #4]
 800ed22:	460b      	mov	r3, r1
 800ed24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed26:	2300      	movs	r3, #0
 800ed28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ed34:	78fa      	ldrb	r2, [r7, #3]
 800ed36:	4611      	mov	r1, r2
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7f7 f809 	bl	8005d50 <HAL_PCD_EP_Close>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed42:	7bfb      	ldrb	r3, [r7, #15]
 800ed44:	4618      	mov	r0, r3
 800ed46:	f000 f909 	bl	800ef5c <USBD_Get_USB_Status>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3710      	adds	r7, #16
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	460b      	mov	r3, r1
 800ed62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed64:	2300      	movs	r3, #0
 800ed66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ed72:	78fa      	ldrb	r2, [r7, #3]
 800ed74:	4611      	mov	r1, r2
 800ed76:	4618      	mov	r0, r3
 800ed78:	f7f7 f8b1 	bl	8005ede <HAL_PCD_EP_SetStall>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed80:	7bfb      	ldrb	r3, [r7, #15]
 800ed82:	4618      	mov	r0, r3
 800ed84:	f000 f8ea 	bl	800ef5c <USBD_Get_USB_Status>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b084      	sub	sp, #16
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
 800ed9e:	460b      	mov	r3, r1
 800eda0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eda2:	2300      	movs	r3, #0
 800eda4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eda6:	2300      	movs	r3, #0
 800eda8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800edb0:	78fa      	ldrb	r2, [r7, #3]
 800edb2:	4611      	mov	r1, r2
 800edb4:	4618      	mov	r0, r3
 800edb6:	f7f7 f8f2 	bl	8005f9e <HAL_PCD_EP_ClrStall>
 800edba:	4603      	mov	r3, r0
 800edbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edbe:	7bfb      	ldrb	r3, [r7, #15]
 800edc0:	4618      	mov	r0, r3
 800edc2:	f000 f8cb 	bl	800ef5c <USBD_Get_USB_Status>
 800edc6:	4603      	mov	r3, r0
 800edc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edca:	7bbb      	ldrb	r3, [r7, #14]
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3710      	adds	r7, #16
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edd4:	b480      	push	{r7}
 800edd6:	b085      	sub	sp, #20
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	460b      	mov	r3, r1
 800edde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ede6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ede8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800edec:	2b00      	cmp	r3, #0
 800edee:	da0b      	bge.n	800ee08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800edf0:	78fb      	ldrb	r3, [r7, #3]
 800edf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800edf6:	68f9      	ldr	r1, [r7, #12]
 800edf8:	4613      	mov	r3, r2
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	4413      	add	r3, r2
 800edfe:	00db      	lsls	r3, r3, #3
 800ee00:	440b      	add	r3, r1
 800ee02:	3312      	adds	r3, #18
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	e00b      	b.n	800ee20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ee08:	78fb      	ldrb	r3, [r7, #3]
 800ee0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee0e:	68f9      	ldr	r1, [r7, #12]
 800ee10:	4613      	mov	r3, r2
 800ee12:	009b      	lsls	r3, r3, #2
 800ee14:	4413      	add	r3, r2
 800ee16:	00db      	lsls	r3, r3, #3
 800ee18:	440b      	add	r3, r1
 800ee1a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ee1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3714      	adds	r7, #20
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bc80      	pop	{r7}
 800ee28:	4770      	bx	lr

0800ee2a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b084      	sub	sp, #16
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
 800ee32:	460b      	mov	r3, r1
 800ee34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee36:	2300      	movs	r3, #0
 800ee38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ee44:	78fa      	ldrb	r2, [r7, #3]
 800ee46:	4611      	mov	r1, r2
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7f6 ff00 	bl	8005c4e <HAL_PCD_SetAddress>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee52:	7bfb      	ldrb	r3, [r7, #15]
 800ee54:	4618      	mov	r0, r3
 800ee56:	f000 f881 	bl	800ef5c <USBD_Get_USB_Status>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3710      	adds	r7, #16
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b086      	sub	sp, #24
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	607a      	str	r2, [r7, #4]
 800ee72:	461a      	mov	r2, r3
 800ee74:	460b      	mov	r3, r1
 800ee76:	72fb      	strb	r3, [r7, #11]
 800ee78:	4613      	mov	r3, r2
 800ee7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee80:	2300      	movs	r3, #0
 800ee82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ee8a:	893b      	ldrh	r3, [r7, #8]
 800ee8c:	7af9      	ldrb	r1, [r7, #11]
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	f7f6 ffee 	bl	8005e70 <HAL_PCD_EP_Transmit>
 800ee94:	4603      	mov	r3, r0
 800ee96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee98:	7dfb      	ldrb	r3, [r7, #23]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f000 f85e 	bl	800ef5c <USBD_Get_USB_Status>
 800eea0:	4603      	mov	r3, r0
 800eea2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eea4:	7dbb      	ldrb	r3, [r7, #22]
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3718      	adds	r7, #24
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}

0800eeae <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800eeae:	b580      	push	{r7, lr}
 800eeb0:	b086      	sub	sp, #24
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	60f8      	str	r0, [r7, #12]
 800eeb6:	607a      	str	r2, [r7, #4]
 800eeb8:	461a      	mov	r2, r3
 800eeba:	460b      	mov	r3, r1
 800eebc:	72fb      	strb	r3, [r7, #11]
 800eebe:	4613      	mov	r3, r2
 800eec0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eec2:	2300      	movs	r3, #0
 800eec4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eec6:	2300      	movs	r3, #0
 800eec8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800eed0:	893b      	ldrh	r3, [r7, #8]
 800eed2:	7af9      	ldrb	r1, [r7, #11]
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	f7f6 ff83 	bl	8005de0 <HAL_PCD_EP_Receive>
 800eeda:	4603      	mov	r3, r0
 800eedc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eede:	7dfb      	ldrb	r3, [r7, #23]
 800eee0:	4618      	mov	r0, r3
 800eee2:	f000 f83b 	bl	800ef5c <USBD_Get_USB_Status>
 800eee6:	4603      	mov	r3, r0
 800eee8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eeea:	7dbb      	ldrb	r3, [r7, #22]
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3718      	adds	r7, #24
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	460b      	mov	r3, r1
 800eefe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ef06:	78fa      	ldrb	r2, [r7, #3]
 800ef08:	4611      	mov	r1, r2
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7f6 ff99 	bl	8005e42 <HAL_PCD_EP_GetRxCount>
 800ef10:	4603      	mov	r3, r0
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3708      	adds	r7, #8
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
	...

0800ef1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b083      	sub	sp, #12
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ef24:	4b02      	ldr	r3, [pc, #8]	@ (800ef30 <USBD_static_malloc+0x14>)
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	370c      	adds	r7, #12
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bc80      	pop	{r7}
 800ef2e:	4770      	bx	lr
 800ef30:	2000284c 	.word	0x2000284c

0800ef34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]

}
 800ef3c:	bf00      	nop
 800ef3e:	370c      	adds	r7, #12
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bc80      	pop	{r7}
 800ef44:	4770      	bx	lr

0800ef46 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef46:	b480      	push	{r7}
 800ef48:	b083      	sub	sp, #12
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	6078      	str	r0, [r7, #4]
 800ef4e:	460b      	mov	r3, r1
 800ef50:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ef52:	bf00      	nop
 800ef54:	370c      	adds	r7, #12
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bc80      	pop	{r7}
 800ef5a:	4770      	bx	lr

0800ef5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b085      	sub	sp, #20
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	4603      	mov	r3, r0
 800ef64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef66:	2300      	movs	r3, #0
 800ef68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ef6a:	79fb      	ldrb	r3, [r7, #7]
 800ef6c:	2b03      	cmp	r3, #3
 800ef6e:	d817      	bhi.n	800efa0 <USBD_Get_USB_Status+0x44>
 800ef70:	a201      	add	r2, pc, #4	@ (adr r2, 800ef78 <USBD_Get_USB_Status+0x1c>)
 800ef72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef76:	bf00      	nop
 800ef78:	0800ef89 	.word	0x0800ef89
 800ef7c:	0800ef8f 	.word	0x0800ef8f
 800ef80:	0800ef95 	.word	0x0800ef95
 800ef84:	0800ef9b 	.word	0x0800ef9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ef8c:	e00b      	b.n	800efa6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ef8e:	2302      	movs	r3, #2
 800ef90:	73fb      	strb	r3, [r7, #15]
    break;
 800ef92:	e008      	b.n	800efa6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ef94:	2301      	movs	r3, #1
 800ef96:	73fb      	strb	r3, [r7, #15]
    break;
 800ef98:	e005      	b.n	800efa6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ef9a:	2302      	movs	r3, #2
 800ef9c:	73fb      	strb	r3, [r7, #15]
    break;
 800ef9e:	e002      	b.n	800efa6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800efa0:	2302      	movs	r3, #2
 800efa2:	73fb      	strb	r3, [r7, #15]
    break;
 800efa4:	bf00      	nop
  }
  return usb_status;
 800efa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3714      	adds	r7, #20
 800efac:	46bd      	mov	sp, r7
 800efae:	bc80      	pop	{r7}
 800efb0:	4770      	bx	lr
 800efb2:	bf00      	nop

0800efb4 <malloc>:
 800efb4:	4b02      	ldr	r3, [pc, #8]	@ (800efc0 <malloc+0xc>)
 800efb6:	4601      	mov	r1, r0
 800efb8:	6818      	ldr	r0, [r3, #0]
 800efba:	f000 b825 	b.w	800f008 <_malloc_r>
 800efbe:	bf00      	nop
 800efc0:	20000188 	.word	0x20000188

0800efc4 <sbrk_aligned>:
 800efc4:	b570      	push	{r4, r5, r6, lr}
 800efc6:	4e0f      	ldr	r6, [pc, #60]	@ (800f004 <sbrk_aligned+0x40>)
 800efc8:	460c      	mov	r4, r1
 800efca:	6831      	ldr	r1, [r6, #0]
 800efcc:	4605      	mov	r5, r0
 800efce:	b911      	cbnz	r1, 800efd6 <sbrk_aligned+0x12>
 800efd0:	f000 fe7c 	bl	800fccc <_sbrk_r>
 800efd4:	6030      	str	r0, [r6, #0]
 800efd6:	4621      	mov	r1, r4
 800efd8:	4628      	mov	r0, r5
 800efda:	f000 fe77 	bl	800fccc <_sbrk_r>
 800efde:	1c43      	adds	r3, r0, #1
 800efe0:	d103      	bne.n	800efea <sbrk_aligned+0x26>
 800efe2:	f04f 34ff 	mov.w	r4, #4294967295
 800efe6:	4620      	mov	r0, r4
 800efe8:	bd70      	pop	{r4, r5, r6, pc}
 800efea:	1cc4      	adds	r4, r0, #3
 800efec:	f024 0403 	bic.w	r4, r4, #3
 800eff0:	42a0      	cmp	r0, r4
 800eff2:	d0f8      	beq.n	800efe6 <sbrk_aligned+0x22>
 800eff4:	1a21      	subs	r1, r4, r0
 800eff6:	4628      	mov	r0, r5
 800eff8:	f000 fe68 	bl	800fccc <_sbrk_r>
 800effc:	3001      	adds	r0, #1
 800effe:	d1f2      	bne.n	800efe6 <sbrk_aligned+0x22>
 800f000:	e7ef      	b.n	800efe2 <sbrk_aligned+0x1e>
 800f002:	bf00      	nop
 800f004:	20002a6c 	.word	0x20002a6c

0800f008 <_malloc_r>:
 800f008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f00c:	1ccd      	adds	r5, r1, #3
 800f00e:	f025 0503 	bic.w	r5, r5, #3
 800f012:	3508      	adds	r5, #8
 800f014:	2d0c      	cmp	r5, #12
 800f016:	bf38      	it	cc
 800f018:	250c      	movcc	r5, #12
 800f01a:	2d00      	cmp	r5, #0
 800f01c:	4606      	mov	r6, r0
 800f01e:	db01      	blt.n	800f024 <_malloc_r+0x1c>
 800f020:	42a9      	cmp	r1, r5
 800f022:	d904      	bls.n	800f02e <_malloc_r+0x26>
 800f024:	230c      	movs	r3, #12
 800f026:	6033      	str	r3, [r6, #0]
 800f028:	2000      	movs	r0, #0
 800f02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f02e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f104 <_malloc_r+0xfc>
 800f032:	f000 f869 	bl	800f108 <__malloc_lock>
 800f036:	f8d8 3000 	ldr.w	r3, [r8]
 800f03a:	461c      	mov	r4, r3
 800f03c:	bb44      	cbnz	r4, 800f090 <_malloc_r+0x88>
 800f03e:	4629      	mov	r1, r5
 800f040:	4630      	mov	r0, r6
 800f042:	f7ff ffbf 	bl	800efc4 <sbrk_aligned>
 800f046:	1c43      	adds	r3, r0, #1
 800f048:	4604      	mov	r4, r0
 800f04a:	d158      	bne.n	800f0fe <_malloc_r+0xf6>
 800f04c:	f8d8 4000 	ldr.w	r4, [r8]
 800f050:	4627      	mov	r7, r4
 800f052:	2f00      	cmp	r7, #0
 800f054:	d143      	bne.n	800f0de <_malloc_r+0xd6>
 800f056:	2c00      	cmp	r4, #0
 800f058:	d04b      	beq.n	800f0f2 <_malloc_r+0xea>
 800f05a:	6823      	ldr	r3, [r4, #0]
 800f05c:	4639      	mov	r1, r7
 800f05e:	4630      	mov	r0, r6
 800f060:	eb04 0903 	add.w	r9, r4, r3
 800f064:	f000 fe32 	bl	800fccc <_sbrk_r>
 800f068:	4581      	cmp	r9, r0
 800f06a:	d142      	bne.n	800f0f2 <_malloc_r+0xea>
 800f06c:	6821      	ldr	r1, [r4, #0]
 800f06e:	4630      	mov	r0, r6
 800f070:	1a6d      	subs	r5, r5, r1
 800f072:	4629      	mov	r1, r5
 800f074:	f7ff ffa6 	bl	800efc4 <sbrk_aligned>
 800f078:	3001      	adds	r0, #1
 800f07a:	d03a      	beq.n	800f0f2 <_malloc_r+0xea>
 800f07c:	6823      	ldr	r3, [r4, #0]
 800f07e:	442b      	add	r3, r5
 800f080:	6023      	str	r3, [r4, #0]
 800f082:	f8d8 3000 	ldr.w	r3, [r8]
 800f086:	685a      	ldr	r2, [r3, #4]
 800f088:	bb62      	cbnz	r2, 800f0e4 <_malloc_r+0xdc>
 800f08a:	f8c8 7000 	str.w	r7, [r8]
 800f08e:	e00f      	b.n	800f0b0 <_malloc_r+0xa8>
 800f090:	6822      	ldr	r2, [r4, #0]
 800f092:	1b52      	subs	r2, r2, r5
 800f094:	d420      	bmi.n	800f0d8 <_malloc_r+0xd0>
 800f096:	2a0b      	cmp	r2, #11
 800f098:	d917      	bls.n	800f0ca <_malloc_r+0xc2>
 800f09a:	1961      	adds	r1, r4, r5
 800f09c:	42a3      	cmp	r3, r4
 800f09e:	6025      	str	r5, [r4, #0]
 800f0a0:	bf18      	it	ne
 800f0a2:	6059      	strne	r1, [r3, #4]
 800f0a4:	6863      	ldr	r3, [r4, #4]
 800f0a6:	bf08      	it	eq
 800f0a8:	f8c8 1000 	streq.w	r1, [r8]
 800f0ac:	5162      	str	r2, [r4, r5]
 800f0ae:	604b      	str	r3, [r1, #4]
 800f0b0:	4630      	mov	r0, r6
 800f0b2:	f000 f82f 	bl	800f114 <__malloc_unlock>
 800f0b6:	f104 000b 	add.w	r0, r4, #11
 800f0ba:	1d23      	adds	r3, r4, #4
 800f0bc:	f020 0007 	bic.w	r0, r0, #7
 800f0c0:	1ac2      	subs	r2, r0, r3
 800f0c2:	bf1c      	itt	ne
 800f0c4:	1a1b      	subne	r3, r3, r0
 800f0c6:	50a3      	strne	r3, [r4, r2]
 800f0c8:	e7af      	b.n	800f02a <_malloc_r+0x22>
 800f0ca:	6862      	ldr	r2, [r4, #4]
 800f0cc:	42a3      	cmp	r3, r4
 800f0ce:	bf0c      	ite	eq
 800f0d0:	f8c8 2000 	streq.w	r2, [r8]
 800f0d4:	605a      	strne	r2, [r3, #4]
 800f0d6:	e7eb      	b.n	800f0b0 <_malloc_r+0xa8>
 800f0d8:	4623      	mov	r3, r4
 800f0da:	6864      	ldr	r4, [r4, #4]
 800f0dc:	e7ae      	b.n	800f03c <_malloc_r+0x34>
 800f0de:	463c      	mov	r4, r7
 800f0e0:	687f      	ldr	r7, [r7, #4]
 800f0e2:	e7b6      	b.n	800f052 <_malloc_r+0x4a>
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	42a3      	cmp	r3, r4
 800f0ea:	d1fb      	bne.n	800f0e4 <_malloc_r+0xdc>
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	6053      	str	r3, [r2, #4]
 800f0f0:	e7de      	b.n	800f0b0 <_malloc_r+0xa8>
 800f0f2:	230c      	movs	r3, #12
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	6033      	str	r3, [r6, #0]
 800f0f8:	f000 f80c 	bl	800f114 <__malloc_unlock>
 800f0fc:	e794      	b.n	800f028 <_malloc_r+0x20>
 800f0fe:	6005      	str	r5, [r0, #0]
 800f100:	e7d6      	b.n	800f0b0 <_malloc_r+0xa8>
 800f102:	bf00      	nop
 800f104:	20002a70 	.word	0x20002a70

0800f108 <__malloc_lock>:
 800f108:	4801      	ldr	r0, [pc, #4]	@ (800f110 <__malloc_lock+0x8>)
 800f10a:	f000 be2c 	b.w	800fd66 <__retarget_lock_acquire_recursive>
 800f10e:	bf00      	nop
 800f110:	20002bb4 	.word	0x20002bb4

0800f114 <__malloc_unlock>:
 800f114:	4801      	ldr	r0, [pc, #4]	@ (800f11c <__malloc_unlock+0x8>)
 800f116:	f000 be27 	b.w	800fd68 <__retarget_lock_release_recursive>
 800f11a:	bf00      	nop
 800f11c:	20002bb4 	.word	0x20002bb4

0800f120 <__cvt>:
 800f120:	2b00      	cmp	r3, #0
 800f122:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f126:	461d      	mov	r5, r3
 800f128:	bfbb      	ittet	lt
 800f12a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800f12e:	461d      	movlt	r5, r3
 800f130:	2300      	movge	r3, #0
 800f132:	232d      	movlt	r3, #45	@ 0x2d
 800f134:	b088      	sub	sp, #32
 800f136:	4614      	mov	r4, r2
 800f138:	bfb8      	it	lt
 800f13a:	4614      	movlt	r4, r2
 800f13c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f13e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800f140:	7013      	strb	r3, [r2, #0]
 800f142:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f144:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800f148:	f023 0820 	bic.w	r8, r3, #32
 800f14c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f150:	d005      	beq.n	800f15e <__cvt+0x3e>
 800f152:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f156:	d100      	bne.n	800f15a <__cvt+0x3a>
 800f158:	3601      	adds	r6, #1
 800f15a:	2302      	movs	r3, #2
 800f15c:	e000      	b.n	800f160 <__cvt+0x40>
 800f15e:	2303      	movs	r3, #3
 800f160:	aa07      	add	r2, sp, #28
 800f162:	9204      	str	r2, [sp, #16]
 800f164:	aa06      	add	r2, sp, #24
 800f166:	e9cd a202 	strd	sl, r2, [sp, #8]
 800f16a:	e9cd 3600 	strd	r3, r6, [sp]
 800f16e:	4622      	mov	r2, r4
 800f170:	462b      	mov	r3, r5
 800f172:	f000 fe91 	bl	800fe98 <_dtoa_r>
 800f176:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f17a:	4607      	mov	r7, r0
 800f17c:	d119      	bne.n	800f1b2 <__cvt+0x92>
 800f17e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f180:	07db      	lsls	r3, r3, #31
 800f182:	d50e      	bpl.n	800f1a2 <__cvt+0x82>
 800f184:	eb00 0906 	add.w	r9, r0, r6
 800f188:	2200      	movs	r2, #0
 800f18a:	2300      	movs	r3, #0
 800f18c:	4620      	mov	r0, r4
 800f18e:	4629      	mov	r1, r5
 800f190:	f7f1 fc0a 	bl	80009a8 <__aeabi_dcmpeq>
 800f194:	b108      	cbz	r0, 800f19a <__cvt+0x7a>
 800f196:	f8cd 901c 	str.w	r9, [sp, #28]
 800f19a:	2230      	movs	r2, #48	@ 0x30
 800f19c:	9b07      	ldr	r3, [sp, #28]
 800f19e:	454b      	cmp	r3, r9
 800f1a0:	d31e      	bcc.n	800f1e0 <__cvt+0xc0>
 800f1a2:	4638      	mov	r0, r7
 800f1a4:	9b07      	ldr	r3, [sp, #28]
 800f1a6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f1a8:	1bdb      	subs	r3, r3, r7
 800f1aa:	6013      	str	r3, [r2, #0]
 800f1ac:	b008      	add	sp, #32
 800f1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1b2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f1b6:	eb00 0906 	add.w	r9, r0, r6
 800f1ba:	d1e5      	bne.n	800f188 <__cvt+0x68>
 800f1bc:	7803      	ldrb	r3, [r0, #0]
 800f1be:	2b30      	cmp	r3, #48	@ 0x30
 800f1c0:	d10a      	bne.n	800f1d8 <__cvt+0xb8>
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	4629      	mov	r1, r5
 800f1ca:	f7f1 fbed 	bl	80009a8 <__aeabi_dcmpeq>
 800f1ce:	b918      	cbnz	r0, 800f1d8 <__cvt+0xb8>
 800f1d0:	f1c6 0601 	rsb	r6, r6, #1
 800f1d4:	f8ca 6000 	str.w	r6, [sl]
 800f1d8:	f8da 3000 	ldr.w	r3, [sl]
 800f1dc:	4499      	add	r9, r3
 800f1de:	e7d3      	b.n	800f188 <__cvt+0x68>
 800f1e0:	1c59      	adds	r1, r3, #1
 800f1e2:	9107      	str	r1, [sp, #28]
 800f1e4:	701a      	strb	r2, [r3, #0]
 800f1e6:	e7d9      	b.n	800f19c <__cvt+0x7c>

0800f1e8 <__exponent>:
 800f1e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1ea:	2900      	cmp	r1, #0
 800f1ec:	bfb6      	itet	lt
 800f1ee:	232d      	movlt	r3, #45	@ 0x2d
 800f1f0:	232b      	movge	r3, #43	@ 0x2b
 800f1f2:	4249      	neglt	r1, r1
 800f1f4:	2909      	cmp	r1, #9
 800f1f6:	7002      	strb	r2, [r0, #0]
 800f1f8:	7043      	strb	r3, [r0, #1]
 800f1fa:	dd29      	ble.n	800f250 <__exponent+0x68>
 800f1fc:	f10d 0307 	add.w	r3, sp, #7
 800f200:	461d      	mov	r5, r3
 800f202:	270a      	movs	r7, #10
 800f204:	fbb1 f6f7 	udiv	r6, r1, r7
 800f208:	461a      	mov	r2, r3
 800f20a:	fb07 1416 	mls	r4, r7, r6, r1
 800f20e:	3430      	adds	r4, #48	@ 0x30
 800f210:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f214:	460c      	mov	r4, r1
 800f216:	2c63      	cmp	r4, #99	@ 0x63
 800f218:	4631      	mov	r1, r6
 800f21a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f21e:	dcf1      	bgt.n	800f204 <__exponent+0x1c>
 800f220:	3130      	adds	r1, #48	@ 0x30
 800f222:	1e94      	subs	r4, r2, #2
 800f224:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f228:	4623      	mov	r3, r4
 800f22a:	1c41      	adds	r1, r0, #1
 800f22c:	42ab      	cmp	r3, r5
 800f22e:	d30a      	bcc.n	800f246 <__exponent+0x5e>
 800f230:	f10d 0309 	add.w	r3, sp, #9
 800f234:	1a9b      	subs	r3, r3, r2
 800f236:	42ac      	cmp	r4, r5
 800f238:	bf88      	it	hi
 800f23a:	2300      	movhi	r3, #0
 800f23c:	3302      	adds	r3, #2
 800f23e:	4403      	add	r3, r0
 800f240:	1a18      	subs	r0, r3, r0
 800f242:	b003      	add	sp, #12
 800f244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f246:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f24a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f24e:	e7ed      	b.n	800f22c <__exponent+0x44>
 800f250:	2330      	movs	r3, #48	@ 0x30
 800f252:	3130      	adds	r1, #48	@ 0x30
 800f254:	7083      	strb	r3, [r0, #2]
 800f256:	70c1      	strb	r1, [r0, #3]
 800f258:	1d03      	adds	r3, r0, #4
 800f25a:	e7f1      	b.n	800f240 <__exponent+0x58>

0800f25c <_printf_float>:
 800f25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f260:	b091      	sub	sp, #68	@ 0x44
 800f262:	460c      	mov	r4, r1
 800f264:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800f268:	4616      	mov	r6, r2
 800f26a:	461f      	mov	r7, r3
 800f26c:	4605      	mov	r5, r0
 800f26e:	f000 fcf5 	bl	800fc5c <_localeconv_r>
 800f272:	6803      	ldr	r3, [r0, #0]
 800f274:	4618      	mov	r0, r3
 800f276:	9308      	str	r3, [sp, #32]
 800f278:	f7f0 ff6a 	bl	8000150 <strlen>
 800f27c:	2300      	movs	r3, #0
 800f27e:	930e      	str	r3, [sp, #56]	@ 0x38
 800f280:	f8d8 3000 	ldr.w	r3, [r8]
 800f284:	9009      	str	r0, [sp, #36]	@ 0x24
 800f286:	3307      	adds	r3, #7
 800f288:	f023 0307 	bic.w	r3, r3, #7
 800f28c:	f103 0208 	add.w	r2, r3, #8
 800f290:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f294:	f8d4 b000 	ldr.w	fp, [r4]
 800f298:	f8c8 2000 	str.w	r2, [r8]
 800f29c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f2a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f2a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2a6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f2aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f2b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f2b6:	4b9c      	ldr	r3, [pc, #624]	@ (800f528 <_printf_float+0x2cc>)
 800f2b8:	f7f1 fba8 	bl	8000a0c <__aeabi_dcmpun>
 800f2bc:	bb70      	cbnz	r0, 800f31c <_printf_float+0xc0>
 800f2be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800f2c6:	4b98      	ldr	r3, [pc, #608]	@ (800f528 <_printf_float+0x2cc>)
 800f2c8:	f7f1 fb82 	bl	80009d0 <__aeabi_dcmple>
 800f2cc:	bb30      	cbnz	r0, 800f31c <_printf_float+0xc0>
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	4640      	mov	r0, r8
 800f2d4:	4649      	mov	r1, r9
 800f2d6:	f7f1 fb71 	bl	80009bc <__aeabi_dcmplt>
 800f2da:	b110      	cbz	r0, 800f2e2 <_printf_float+0x86>
 800f2dc:	232d      	movs	r3, #45	@ 0x2d
 800f2de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2e2:	4a92      	ldr	r2, [pc, #584]	@ (800f52c <_printf_float+0x2d0>)
 800f2e4:	4b92      	ldr	r3, [pc, #584]	@ (800f530 <_printf_float+0x2d4>)
 800f2e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f2ea:	bf94      	ite	ls
 800f2ec:	4690      	movls	r8, r2
 800f2ee:	4698      	movhi	r8, r3
 800f2f0:	2303      	movs	r3, #3
 800f2f2:	f04f 0900 	mov.w	r9, #0
 800f2f6:	6123      	str	r3, [r4, #16]
 800f2f8:	f02b 0304 	bic.w	r3, fp, #4
 800f2fc:	6023      	str	r3, [r4, #0]
 800f2fe:	4633      	mov	r3, r6
 800f300:	4621      	mov	r1, r4
 800f302:	4628      	mov	r0, r5
 800f304:	9700      	str	r7, [sp, #0]
 800f306:	aa0f      	add	r2, sp, #60	@ 0x3c
 800f308:	f000 f9d4 	bl	800f6b4 <_printf_common>
 800f30c:	3001      	adds	r0, #1
 800f30e:	f040 8090 	bne.w	800f432 <_printf_float+0x1d6>
 800f312:	f04f 30ff 	mov.w	r0, #4294967295
 800f316:	b011      	add	sp, #68	@ 0x44
 800f318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31c:	4642      	mov	r2, r8
 800f31e:	464b      	mov	r3, r9
 800f320:	4640      	mov	r0, r8
 800f322:	4649      	mov	r1, r9
 800f324:	f7f1 fb72 	bl	8000a0c <__aeabi_dcmpun>
 800f328:	b148      	cbz	r0, 800f33e <_printf_float+0xe2>
 800f32a:	464b      	mov	r3, r9
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	bfb8      	it	lt
 800f330:	232d      	movlt	r3, #45	@ 0x2d
 800f332:	4a80      	ldr	r2, [pc, #512]	@ (800f534 <_printf_float+0x2d8>)
 800f334:	bfb8      	it	lt
 800f336:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f33a:	4b7f      	ldr	r3, [pc, #508]	@ (800f538 <_printf_float+0x2dc>)
 800f33c:	e7d3      	b.n	800f2e6 <_printf_float+0x8a>
 800f33e:	6863      	ldr	r3, [r4, #4]
 800f340:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800f344:	1c5a      	adds	r2, r3, #1
 800f346:	d13f      	bne.n	800f3c8 <_printf_float+0x16c>
 800f348:	2306      	movs	r3, #6
 800f34a:	6063      	str	r3, [r4, #4]
 800f34c:	2200      	movs	r2, #0
 800f34e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800f352:	6023      	str	r3, [r4, #0]
 800f354:	9206      	str	r2, [sp, #24]
 800f356:	aa0e      	add	r2, sp, #56	@ 0x38
 800f358:	e9cd a204 	strd	sl, r2, [sp, #16]
 800f35c:	aa0d      	add	r2, sp, #52	@ 0x34
 800f35e:	9203      	str	r2, [sp, #12]
 800f360:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800f364:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f368:	6863      	ldr	r3, [r4, #4]
 800f36a:	4642      	mov	r2, r8
 800f36c:	9300      	str	r3, [sp, #0]
 800f36e:	4628      	mov	r0, r5
 800f370:	464b      	mov	r3, r9
 800f372:	910a      	str	r1, [sp, #40]	@ 0x28
 800f374:	f7ff fed4 	bl	800f120 <__cvt>
 800f378:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f37a:	4680      	mov	r8, r0
 800f37c:	2947      	cmp	r1, #71	@ 0x47
 800f37e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f380:	d128      	bne.n	800f3d4 <_printf_float+0x178>
 800f382:	1cc8      	adds	r0, r1, #3
 800f384:	db02      	blt.n	800f38c <_printf_float+0x130>
 800f386:	6863      	ldr	r3, [r4, #4]
 800f388:	4299      	cmp	r1, r3
 800f38a:	dd40      	ble.n	800f40e <_printf_float+0x1b2>
 800f38c:	f1aa 0a02 	sub.w	sl, sl, #2
 800f390:	fa5f fa8a 	uxtb.w	sl, sl
 800f394:	4652      	mov	r2, sl
 800f396:	3901      	subs	r1, #1
 800f398:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f39c:	910d      	str	r1, [sp, #52]	@ 0x34
 800f39e:	f7ff ff23 	bl	800f1e8 <__exponent>
 800f3a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f3a4:	4681      	mov	r9, r0
 800f3a6:	1813      	adds	r3, r2, r0
 800f3a8:	2a01      	cmp	r2, #1
 800f3aa:	6123      	str	r3, [r4, #16]
 800f3ac:	dc02      	bgt.n	800f3b4 <_printf_float+0x158>
 800f3ae:	6822      	ldr	r2, [r4, #0]
 800f3b0:	07d2      	lsls	r2, r2, #31
 800f3b2:	d501      	bpl.n	800f3b8 <_printf_float+0x15c>
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	6123      	str	r3, [r4, #16]
 800f3b8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d09e      	beq.n	800f2fe <_printf_float+0xa2>
 800f3c0:	232d      	movs	r3, #45	@ 0x2d
 800f3c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3c6:	e79a      	b.n	800f2fe <_printf_float+0xa2>
 800f3c8:	2947      	cmp	r1, #71	@ 0x47
 800f3ca:	d1bf      	bne.n	800f34c <_printf_float+0xf0>
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d1bd      	bne.n	800f34c <_printf_float+0xf0>
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	e7ba      	b.n	800f34a <_printf_float+0xee>
 800f3d4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f3d8:	d9dc      	bls.n	800f394 <_printf_float+0x138>
 800f3da:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f3de:	d118      	bne.n	800f412 <_printf_float+0x1b6>
 800f3e0:	2900      	cmp	r1, #0
 800f3e2:	6863      	ldr	r3, [r4, #4]
 800f3e4:	dd0b      	ble.n	800f3fe <_printf_float+0x1a2>
 800f3e6:	6121      	str	r1, [r4, #16]
 800f3e8:	b913      	cbnz	r3, 800f3f0 <_printf_float+0x194>
 800f3ea:	6822      	ldr	r2, [r4, #0]
 800f3ec:	07d0      	lsls	r0, r2, #31
 800f3ee:	d502      	bpl.n	800f3f6 <_printf_float+0x19a>
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	440b      	add	r3, r1
 800f3f4:	6123      	str	r3, [r4, #16]
 800f3f6:	f04f 0900 	mov.w	r9, #0
 800f3fa:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f3fc:	e7dc      	b.n	800f3b8 <_printf_float+0x15c>
 800f3fe:	b913      	cbnz	r3, 800f406 <_printf_float+0x1aa>
 800f400:	6822      	ldr	r2, [r4, #0]
 800f402:	07d2      	lsls	r2, r2, #31
 800f404:	d501      	bpl.n	800f40a <_printf_float+0x1ae>
 800f406:	3302      	adds	r3, #2
 800f408:	e7f4      	b.n	800f3f4 <_printf_float+0x198>
 800f40a:	2301      	movs	r3, #1
 800f40c:	e7f2      	b.n	800f3f4 <_printf_float+0x198>
 800f40e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f414:	4299      	cmp	r1, r3
 800f416:	db05      	blt.n	800f424 <_printf_float+0x1c8>
 800f418:	6823      	ldr	r3, [r4, #0]
 800f41a:	6121      	str	r1, [r4, #16]
 800f41c:	07d8      	lsls	r0, r3, #31
 800f41e:	d5ea      	bpl.n	800f3f6 <_printf_float+0x19a>
 800f420:	1c4b      	adds	r3, r1, #1
 800f422:	e7e7      	b.n	800f3f4 <_printf_float+0x198>
 800f424:	2900      	cmp	r1, #0
 800f426:	bfcc      	ite	gt
 800f428:	2201      	movgt	r2, #1
 800f42a:	f1c1 0202 	rsble	r2, r1, #2
 800f42e:	4413      	add	r3, r2
 800f430:	e7e0      	b.n	800f3f4 <_printf_float+0x198>
 800f432:	6823      	ldr	r3, [r4, #0]
 800f434:	055a      	lsls	r2, r3, #21
 800f436:	d407      	bmi.n	800f448 <_printf_float+0x1ec>
 800f438:	6923      	ldr	r3, [r4, #16]
 800f43a:	4642      	mov	r2, r8
 800f43c:	4631      	mov	r1, r6
 800f43e:	4628      	mov	r0, r5
 800f440:	47b8      	blx	r7
 800f442:	3001      	adds	r0, #1
 800f444:	d12b      	bne.n	800f49e <_printf_float+0x242>
 800f446:	e764      	b.n	800f312 <_printf_float+0xb6>
 800f448:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f44c:	f240 80dc 	bls.w	800f608 <_printf_float+0x3ac>
 800f450:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f454:	2200      	movs	r2, #0
 800f456:	2300      	movs	r3, #0
 800f458:	f7f1 faa6 	bl	80009a8 <__aeabi_dcmpeq>
 800f45c:	2800      	cmp	r0, #0
 800f45e:	d033      	beq.n	800f4c8 <_printf_float+0x26c>
 800f460:	2301      	movs	r3, #1
 800f462:	4631      	mov	r1, r6
 800f464:	4628      	mov	r0, r5
 800f466:	4a35      	ldr	r2, [pc, #212]	@ (800f53c <_printf_float+0x2e0>)
 800f468:	47b8      	blx	r7
 800f46a:	3001      	adds	r0, #1
 800f46c:	f43f af51 	beq.w	800f312 <_printf_float+0xb6>
 800f470:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800f474:	4543      	cmp	r3, r8
 800f476:	db02      	blt.n	800f47e <_printf_float+0x222>
 800f478:	6823      	ldr	r3, [r4, #0]
 800f47a:	07d8      	lsls	r0, r3, #31
 800f47c:	d50f      	bpl.n	800f49e <_printf_float+0x242>
 800f47e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f482:	4631      	mov	r1, r6
 800f484:	4628      	mov	r0, r5
 800f486:	47b8      	blx	r7
 800f488:	3001      	adds	r0, #1
 800f48a:	f43f af42 	beq.w	800f312 <_printf_float+0xb6>
 800f48e:	f04f 0900 	mov.w	r9, #0
 800f492:	f108 38ff 	add.w	r8, r8, #4294967295
 800f496:	f104 0a1a 	add.w	sl, r4, #26
 800f49a:	45c8      	cmp	r8, r9
 800f49c:	dc09      	bgt.n	800f4b2 <_printf_float+0x256>
 800f49e:	6823      	ldr	r3, [r4, #0]
 800f4a0:	079b      	lsls	r3, r3, #30
 800f4a2:	f100 8102 	bmi.w	800f6aa <_printf_float+0x44e>
 800f4a6:	68e0      	ldr	r0, [r4, #12]
 800f4a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4aa:	4298      	cmp	r0, r3
 800f4ac:	bfb8      	it	lt
 800f4ae:	4618      	movlt	r0, r3
 800f4b0:	e731      	b.n	800f316 <_printf_float+0xba>
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	4652      	mov	r2, sl
 800f4b6:	4631      	mov	r1, r6
 800f4b8:	4628      	mov	r0, r5
 800f4ba:	47b8      	blx	r7
 800f4bc:	3001      	adds	r0, #1
 800f4be:	f43f af28 	beq.w	800f312 <_printf_float+0xb6>
 800f4c2:	f109 0901 	add.w	r9, r9, #1
 800f4c6:	e7e8      	b.n	800f49a <_printf_float+0x23e>
 800f4c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	dc38      	bgt.n	800f540 <_printf_float+0x2e4>
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	4631      	mov	r1, r6
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	4a19      	ldr	r2, [pc, #100]	@ (800f53c <_printf_float+0x2e0>)
 800f4d6:	47b8      	blx	r7
 800f4d8:	3001      	adds	r0, #1
 800f4da:	f43f af1a 	beq.w	800f312 <_printf_float+0xb6>
 800f4de:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800f4e2:	ea59 0303 	orrs.w	r3, r9, r3
 800f4e6:	d102      	bne.n	800f4ee <_printf_float+0x292>
 800f4e8:	6823      	ldr	r3, [r4, #0]
 800f4ea:	07d9      	lsls	r1, r3, #31
 800f4ec:	d5d7      	bpl.n	800f49e <_printf_float+0x242>
 800f4ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f4f2:	4631      	mov	r1, r6
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	47b8      	blx	r7
 800f4f8:	3001      	adds	r0, #1
 800f4fa:	f43f af0a 	beq.w	800f312 <_printf_float+0xb6>
 800f4fe:	f04f 0a00 	mov.w	sl, #0
 800f502:	f104 0b1a 	add.w	fp, r4, #26
 800f506:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f508:	425b      	negs	r3, r3
 800f50a:	4553      	cmp	r3, sl
 800f50c:	dc01      	bgt.n	800f512 <_printf_float+0x2b6>
 800f50e:	464b      	mov	r3, r9
 800f510:	e793      	b.n	800f43a <_printf_float+0x1de>
 800f512:	2301      	movs	r3, #1
 800f514:	465a      	mov	r2, fp
 800f516:	4631      	mov	r1, r6
 800f518:	4628      	mov	r0, r5
 800f51a:	47b8      	blx	r7
 800f51c:	3001      	adds	r0, #1
 800f51e:	f43f aef8 	beq.w	800f312 <_printf_float+0xb6>
 800f522:	f10a 0a01 	add.w	sl, sl, #1
 800f526:	e7ee      	b.n	800f506 <_printf_float+0x2aa>
 800f528:	7fefffff 	.word	0x7fefffff
 800f52c:	08012cca 	.word	0x08012cca
 800f530:	08012cce 	.word	0x08012cce
 800f534:	08012cd2 	.word	0x08012cd2
 800f538:	08012cd6 	.word	0x08012cd6
 800f53c:	08012cda 	.word	0x08012cda
 800f540:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f542:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800f546:	4553      	cmp	r3, sl
 800f548:	bfa8      	it	ge
 800f54a:	4653      	movge	r3, sl
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	4699      	mov	r9, r3
 800f550:	dc36      	bgt.n	800f5c0 <_printf_float+0x364>
 800f552:	f04f 0b00 	mov.w	fp, #0
 800f556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f55a:	f104 021a 	add.w	r2, r4, #26
 800f55e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f560:	930a      	str	r3, [sp, #40]	@ 0x28
 800f562:	eba3 0309 	sub.w	r3, r3, r9
 800f566:	455b      	cmp	r3, fp
 800f568:	dc31      	bgt.n	800f5ce <_printf_float+0x372>
 800f56a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f56c:	459a      	cmp	sl, r3
 800f56e:	dc3a      	bgt.n	800f5e6 <_printf_float+0x38a>
 800f570:	6823      	ldr	r3, [r4, #0]
 800f572:	07da      	lsls	r2, r3, #31
 800f574:	d437      	bmi.n	800f5e6 <_printf_float+0x38a>
 800f576:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f578:	ebaa 0903 	sub.w	r9, sl, r3
 800f57c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f57e:	ebaa 0303 	sub.w	r3, sl, r3
 800f582:	4599      	cmp	r9, r3
 800f584:	bfa8      	it	ge
 800f586:	4699      	movge	r9, r3
 800f588:	f1b9 0f00 	cmp.w	r9, #0
 800f58c:	dc33      	bgt.n	800f5f6 <_printf_float+0x39a>
 800f58e:	f04f 0800 	mov.w	r8, #0
 800f592:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f596:	f104 0b1a 	add.w	fp, r4, #26
 800f59a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f59c:	ebaa 0303 	sub.w	r3, sl, r3
 800f5a0:	eba3 0309 	sub.w	r3, r3, r9
 800f5a4:	4543      	cmp	r3, r8
 800f5a6:	f77f af7a 	ble.w	800f49e <_printf_float+0x242>
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	465a      	mov	r2, fp
 800f5ae:	4631      	mov	r1, r6
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	47b8      	blx	r7
 800f5b4:	3001      	adds	r0, #1
 800f5b6:	f43f aeac 	beq.w	800f312 <_printf_float+0xb6>
 800f5ba:	f108 0801 	add.w	r8, r8, #1
 800f5be:	e7ec      	b.n	800f59a <_printf_float+0x33e>
 800f5c0:	4642      	mov	r2, r8
 800f5c2:	4631      	mov	r1, r6
 800f5c4:	4628      	mov	r0, r5
 800f5c6:	47b8      	blx	r7
 800f5c8:	3001      	adds	r0, #1
 800f5ca:	d1c2      	bne.n	800f552 <_printf_float+0x2f6>
 800f5cc:	e6a1      	b.n	800f312 <_printf_float+0xb6>
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	4631      	mov	r1, r6
 800f5d2:	4628      	mov	r0, r5
 800f5d4:	920a      	str	r2, [sp, #40]	@ 0x28
 800f5d6:	47b8      	blx	r7
 800f5d8:	3001      	adds	r0, #1
 800f5da:	f43f ae9a 	beq.w	800f312 <_printf_float+0xb6>
 800f5de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f5e0:	f10b 0b01 	add.w	fp, fp, #1
 800f5e4:	e7bb      	b.n	800f55e <_printf_float+0x302>
 800f5e6:	4631      	mov	r1, r6
 800f5e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	47b8      	blx	r7
 800f5f0:	3001      	adds	r0, #1
 800f5f2:	d1c0      	bne.n	800f576 <_printf_float+0x31a>
 800f5f4:	e68d      	b.n	800f312 <_printf_float+0xb6>
 800f5f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f5f8:	464b      	mov	r3, r9
 800f5fa:	4631      	mov	r1, r6
 800f5fc:	4628      	mov	r0, r5
 800f5fe:	4442      	add	r2, r8
 800f600:	47b8      	blx	r7
 800f602:	3001      	adds	r0, #1
 800f604:	d1c3      	bne.n	800f58e <_printf_float+0x332>
 800f606:	e684      	b.n	800f312 <_printf_float+0xb6>
 800f608:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800f60c:	f1ba 0f01 	cmp.w	sl, #1
 800f610:	dc01      	bgt.n	800f616 <_printf_float+0x3ba>
 800f612:	07db      	lsls	r3, r3, #31
 800f614:	d536      	bpl.n	800f684 <_printf_float+0x428>
 800f616:	2301      	movs	r3, #1
 800f618:	4642      	mov	r2, r8
 800f61a:	4631      	mov	r1, r6
 800f61c:	4628      	mov	r0, r5
 800f61e:	47b8      	blx	r7
 800f620:	3001      	adds	r0, #1
 800f622:	f43f ae76 	beq.w	800f312 <_printf_float+0xb6>
 800f626:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f62a:	4631      	mov	r1, r6
 800f62c:	4628      	mov	r0, r5
 800f62e:	47b8      	blx	r7
 800f630:	3001      	adds	r0, #1
 800f632:	f43f ae6e 	beq.w	800f312 <_printf_float+0xb6>
 800f636:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f63a:	2200      	movs	r2, #0
 800f63c:	2300      	movs	r3, #0
 800f63e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f642:	f7f1 f9b1 	bl	80009a8 <__aeabi_dcmpeq>
 800f646:	b9c0      	cbnz	r0, 800f67a <_printf_float+0x41e>
 800f648:	4653      	mov	r3, sl
 800f64a:	f108 0201 	add.w	r2, r8, #1
 800f64e:	4631      	mov	r1, r6
 800f650:	4628      	mov	r0, r5
 800f652:	47b8      	blx	r7
 800f654:	3001      	adds	r0, #1
 800f656:	d10c      	bne.n	800f672 <_printf_float+0x416>
 800f658:	e65b      	b.n	800f312 <_printf_float+0xb6>
 800f65a:	2301      	movs	r3, #1
 800f65c:	465a      	mov	r2, fp
 800f65e:	4631      	mov	r1, r6
 800f660:	4628      	mov	r0, r5
 800f662:	47b8      	blx	r7
 800f664:	3001      	adds	r0, #1
 800f666:	f43f ae54 	beq.w	800f312 <_printf_float+0xb6>
 800f66a:	f108 0801 	add.w	r8, r8, #1
 800f66e:	45d0      	cmp	r8, sl
 800f670:	dbf3      	blt.n	800f65a <_printf_float+0x3fe>
 800f672:	464b      	mov	r3, r9
 800f674:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f678:	e6e0      	b.n	800f43c <_printf_float+0x1e0>
 800f67a:	f04f 0800 	mov.w	r8, #0
 800f67e:	f104 0b1a 	add.w	fp, r4, #26
 800f682:	e7f4      	b.n	800f66e <_printf_float+0x412>
 800f684:	2301      	movs	r3, #1
 800f686:	4642      	mov	r2, r8
 800f688:	e7e1      	b.n	800f64e <_printf_float+0x3f2>
 800f68a:	2301      	movs	r3, #1
 800f68c:	464a      	mov	r2, r9
 800f68e:	4631      	mov	r1, r6
 800f690:	4628      	mov	r0, r5
 800f692:	47b8      	blx	r7
 800f694:	3001      	adds	r0, #1
 800f696:	f43f ae3c 	beq.w	800f312 <_printf_float+0xb6>
 800f69a:	f108 0801 	add.w	r8, r8, #1
 800f69e:	68e3      	ldr	r3, [r4, #12]
 800f6a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f6a2:	1a5b      	subs	r3, r3, r1
 800f6a4:	4543      	cmp	r3, r8
 800f6a6:	dcf0      	bgt.n	800f68a <_printf_float+0x42e>
 800f6a8:	e6fd      	b.n	800f4a6 <_printf_float+0x24a>
 800f6aa:	f04f 0800 	mov.w	r8, #0
 800f6ae:	f104 0919 	add.w	r9, r4, #25
 800f6b2:	e7f4      	b.n	800f69e <_printf_float+0x442>

0800f6b4 <_printf_common>:
 800f6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b8:	4616      	mov	r6, r2
 800f6ba:	4698      	mov	r8, r3
 800f6bc:	688a      	ldr	r2, [r1, #8]
 800f6be:	690b      	ldr	r3, [r1, #16]
 800f6c0:	4607      	mov	r7, r0
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	bfb8      	it	lt
 800f6c6:	4613      	movlt	r3, r2
 800f6c8:	6033      	str	r3, [r6, #0]
 800f6ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f6ce:	460c      	mov	r4, r1
 800f6d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f6d4:	b10a      	cbz	r2, 800f6da <_printf_common+0x26>
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	6033      	str	r3, [r6, #0]
 800f6da:	6823      	ldr	r3, [r4, #0]
 800f6dc:	0699      	lsls	r1, r3, #26
 800f6de:	bf42      	ittt	mi
 800f6e0:	6833      	ldrmi	r3, [r6, #0]
 800f6e2:	3302      	addmi	r3, #2
 800f6e4:	6033      	strmi	r3, [r6, #0]
 800f6e6:	6825      	ldr	r5, [r4, #0]
 800f6e8:	f015 0506 	ands.w	r5, r5, #6
 800f6ec:	d106      	bne.n	800f6fc <_printf_common+0x48>
 800f6ee:	f104 0a19 	add.w	sl, r4, #25
 800f6f2:	68e3      	ldr	r3, [r4, #12]
 800f6f4:	6832      	ldr	r2, [r6, #0]
 800f6f6:	1a9b      	subs	r3, r3, r2
 800f6f8:	42ab      	cmp	r3, r5
 800f6fa:	dc2b      	bgt.n	800f754 <_printf_common+0xa0>
 800f6fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f700:	6822      	ldr	r2, [r4, #0]
 800f702:	3b00      	subs	r3, #0
 800f704:	bf18      	it	ne
 800f706:	2301      	movne	r3, #1
 800f708:	0692      	lsls	r2, r2, #26
 800f70a:	d430      	bmi.n	800f76e <_printf_common+0xba>
 800f70c:	4641      	mov	r1, r8
 800f70e:	4638      	mov	r0, r7
 800f710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f714:	47c8      	blx	r9
 800f716:	3001      	adds	r0, #1
 800f718:	d023      	beq.n	800f762 <_printf_common+0xae>
 800f71a:	6823      	ldr	r3, [r4, #0]
 800f71c:	6922      	ldr	r2, [r4, #16]
 800f71e:	f003 0306 	and.w	r3, r3, #6
 800f722:	2b04      	cmp	r3, #4
 800f724:	bf14      	ite	ne
 800f726:	2500      	movne	r5, #0
 800f728:	6833      	ldreq	r3, [r6, #0]
 800f72a:	f04f 0600 	mov.w	r6, #0
 800f72e:	bf08      	it	eq
 800f730:	68e5      	ldreq	r5, [r4, #12]
 800f732:	f104 041a 	add.w	r4, r4, #26
 800f736:	bf08      	it	eq
 800f738:	1aed      	subeq	r5, r5, r3
 800f73a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f73e:	bf08      	it	eq
 800f740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f744:	4293      	cmp	r3, r2
 800f746:	bfc4      	itt	gt
 800f748:	1a9b      	subgt	r3, r3, r2
 800f74a:	18ed      	addgt	r5, r5, r3
 800f74c:	42b5      	cmp	r5, r6
 800f74e:	d11a      	bne.n	800f786 <_printf_common+0xd2>
 800f750:	2000      	movs	r0, #0
 800f752:	e008      	b.n	800f766 <_printf_common+0xb2>
 800f754:	2301      	movs	r3, #1
 800f756:	4652      	mov	r2, sl
 800f758:	4641      	mov	r1, r8
 800f75a:	4638      	mov	r0, r7
 800f75c:	47c8      	blx	r9
 800f75e:	3001      	adds	r0, #1
 800f760:	d103      	bne.n	800f76a <_printf_common+0xb6>
 800f762:	f04f 30ff 	mov.w	r0, #4294967295
 800f766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f76a:	3501      	adds	r5, #1
 800f76c:	e7c1      	b.n	800f6f2 <_printf_common+0x3e>
 800f76e:	2030      	movs	r0, #48	@ 0x30
 800f770:	18e1      	adds	r1, r4, r3
 800f772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f776:	1c5a      	adds	r2, r3, #1
 800f778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f77c:	4422      	add	r2, r4
 800f77e:	3302      	adds	r3, #2
 800f780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f784:	e7c2      	b.n	800f70c <_printf_common+0x58>
 800f786:	2301      	movs	r3, #1
 800f788:	4622      	mov	r2, r4
 800f78a:	4641      	mov	r1, r8
 800f78c:	4638      	mov	r0, r7
 800f78e:	47c8      	blx	r9
 800f790:	3001      	adds	r0, #1
 800f792:	d0e6      	beq.n	800f762 <_printf_common+0xae>
 800f794:	3601      	adds	r6, #1
 800f796:	e7d9      	b.n	800f74c <_printf_common+0x98>

0800f798 <_printf_i>:
 800f798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f79c:	7e0f      	ldrb	r7, [r1, #24]
 800f79e:	4691      	mov	r9, r2
 800f7a0:	2f78      	cmp	r7, #120	@ 0x78
 800f7a2:	4680      	mov	r8, r0
 800f7a4:	460c      	mov	r4, r1
 800f7a6:	469a      	mov	sl, r3
 800f7a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f7aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f7ae:	d807      	bhi.n	800f7c0 <_printf_i+0x28>
 800f7b0:	2f62      	cmp	r7, #98	@ 0x62
 800f7b2:	d80a      	bhi.n	800f7ca <_printf_i+0x32>
 800f7b4:	2f00      	cmp	r7, #0
 800f7b6:	f000 80d3 	beq.w	800f960 <_printf_i+0x1c8>
 800f7ba:	2f58      	cmp	r7, #88	@ 0x58
 800f7bc:	f000 80ba 	beq.w	800f934 <_printf_i+0x19c>
 800f7c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f7c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f7c8:	e03a      	b.n	800f840 <_printf_i+0xa8>
 800f7ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f7ce:	2b15      	cmp	r3, #21
 800f7d0:	d8f6      	bhi.n	800f7c0 <_printf_i+0x28>
 800f7d2:	a101      	add	r1, pc, #4	@ (adr r1, 800f7d8 <_printf_i+0x40>)
 800f7d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f7d8:	0800f831 	.word	0x0800f831
 800f7dc:	0800f845 	.word	0x0800f845
 800f7e0:	0800f7c1 	.word	0x0800f7c1
 800f7e4:	0800f7c1 	.word	0x0800f7c1
 800f7e8:	0800f7c1 	.word	0x0800f7c1
 800f7ec:	0800f7c1 	.word	0x0800f7c1
 800f7f0:	0800f845 	.word	0x0800f845
 800f7f4:	0800f7c1 	.word	0x0800f7c1
 800f7f8:	0800f7c1 	.word	0x0800f7c1
 800f7fc:	0800f7c1 	.word	0x0800f7c1
 800f800:	0800f7c1 	.word	0x0800f7c1
 800f804:	0800f947 	.word	0x0800f947
 800f808:	0800f86f 	.word	0x0800f86f
 800f80c:	0800f901 	.word	0x0800f901
 800f810:	0800f7c1 	.word	0x0800f7c1
 800f814:	0800f7c1 	.word	0x0800f7c1
 800f818:	0800f969 	.word	0x0800f969
 800f81c:	0800f7c1 	.word	0x0800f7c1
 800f820:	0800f86f 	.word	0x0800f86f
 800f824:	0800f7c1 	.word	0x0800f7c1
 800f828:	0800f7c1 	.word	0x0800f7c1
 800f82c:	0800f909 	.word	0x0800f909
 800f830:	6833      	ldr	r3, [r6, #0]
 800f832:	1d1a      	adds	r2, r3, #4
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	6032      	str	r2, [r6, #0]
 800f838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f83c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f840:	2301      	movs	r3, #1
 800f842:	e09e      	b.n	800f982 <_printf_i+0x1ea>
 800f844:	6833      	ldr	r3, [r6, #0]
 800f846:	6820      	ldr	r0, [r4, #0]
 800f848:	1d19      	adds	r1, r3, #4
 800f84a:	6031      	str	r1, [r6, #0]
 800f84c:	0606      	lsls	r6, r0, #24
 800f84e:	d501      	bpl.n	800f854 <_printf_i+0xbc>
 800f850:	681d      	ldr	r5, [r3, #0]
 800f852:	e003      	b.n	800f85c <_printf_i+0xc4>
 800f854:	0645      	lsls	r5, r0, #25
 800f856:	d5fb      	bpl.n	800f850 <_printf_i+0xb8>
 800f858:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f85c:	2d00      	cmp	r5, #0
 800f85e:	da03      	bge.n	800f868 <_printf_i+0xd0>
 800f860:	232d      	movs	r3, #45	@ 0x2d
 800f862:	426d      	negs	r5, r5
 800f864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f868:	230a      	movs	r3, #10
 800f86a:	4859      	ldr	r0, [pc, #356]	@ (800f9d0 <_printf_i+0x238>)
 800f86c:	e011      	b.n	800f892 <_printf_i+0xfa>
 800f86e:	6821      	ldr	r1, [r4, #0]
 800f870:	6833      	ldr	r3, [r6, #0]
 800f872:	0608      	lsls	r0, r1, #24
 800f874:	f853 5b04 	ldr.w	r5, [r3], #4
 800f878:	d402      	bmi.n	800f880 <_printf_i+0xe8>
 800f87a:	0649      	lsls	r1, r1, #25
 800f87c:	bf48      	it	mi
 800f87e:	b2ad      	uxthmi	r5, r5
 800f880:	2f6f      	cmp	r7, #111	@ 0x6f
 800f882:	6033      	str	r3, [r6, #0]
 800f884:	bf14      	ite	ne
 800f886:	230a      	movne	r3, #10
 800f888:	2308      	moveq	r3, #8
 800f88a:	4851      	ldr	r0, [pc, #324]	@ (800f9d0 <_printf_i+0x238>)
 800f88c:	2100      	movs	r1, #0
 800f88e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f892:	6866      	ldr	r6, [r4, #4]
 800f894:	2e00      	cmp	r6, #0
 800f896:	bfa8      	it	ge
 800f898:	6821      	ldrge	r1, [r4, #0]
 800f89a:	60a6      	str	r6, [r4, #8]
 800f89c:	bfa4      	itt	ge
 800f89e:	f021 0104 	bicge.w	r1, r1, #4
 800f8a2:	6021      	strge	r1, [r4, #0]
 800f8a4:	b90d      	cbnz	r5, 800f8aa <_printf_i+0x112>
 800f8a6:	2e00      	cmp	r6, #0
 800f8a8:	d04b      	beq.n	800f942 <_printf_i+0x1aa>
 800f8aa:	4616      	mov	r6, r2
 800f8ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800f8b0:	fb03 5711 	mls	r7, r3, r1, r5
 800f8b4:	5dc7      	ldrb	r7, [r0, r7]
 800f8b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f8ba:	462f      	mov	r7, r5
 800f8bc:	42bb      	cmp	r3, r7
 800f8be:	460d      	mov	r5, r1
 800f8c0:	d9f4      	bls.n	800f8ac <_printf_i+0x114>
 800f8c2:	2b08      	cmp	r3, #8
 800f8c4:	d10b      	bne.n	800f8de <_printf_i+0x146>
 800f8c6:	6823      	ldr	r3, [r4, #0]
 800f8c8:	07df      	lsls	r7, r3, #31
 800f8ca:	d508      	bpl.n	800f8de <_printf_i+0x146>
 800f8cc:	6923      	ldr	r3, [r4, #16]
 800f8ce:	6861      	ldr	r1, [r4, #4]
 800f8d0:	4299      	cmp	r1, r3
 800f8d2:	bfde      	ittt	le
 800f8d4:	2330      	movle	r3, #48	@ 0x30
 800f8d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f8da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f8de:	1b92      	subs	r2, r2, r6
 800f8e0:	6122      	str	r2, [r4, #16]
 800f8e2:	464b      	mov	r3, r9
 800f8e4:	4621      	mov	r1, r4
 800f8e6:	4640      	mov	r0, r8
 800f8e8:	f8cd a000 	str.w	sl, [sp]
 800f8ec:	aa03      	add	r2, sp, #12
 800f8ee:	f7ff fee1 	bl	800f6b4 <_printf_common>
 800f8f2:	3001      	adds	r0, #1
 800f8f4:	d14a      	bne.n	800f98c <_printf_i+0x1f4>
 800f8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f8fa:	b004      	add	sp, #16
 800f8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f900:	6823      	ldr	r3, [r4, #0]
 800f902:	f043 0320 	orr.w	r3, r3, #32
 800f906:	6023      	str	r3, [r4, #0]
 800f908:	2778      	movs	r7, #120	@ 0x78
 800f90a:	4832      	ldr	r0, [pc, #200]	@ (800f9d4 <_printf_i+0x23c>)
 800f90c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f910:	6823      	ldr	r3, [r4, #0]
 800f912:	6831      	ldr	r1, [r6, #0]
 800f914:	061f      	lsls	r7, r3, #24
 800f916:	f851 5b04 	ldr.w	r5, [r1], #4
 800f91a:	d402      	bmi.n	800f922 <_printf_i+0x18a>
 800f91c:	065f      	lsls	r7, r3, #25
 800f91e:	bf48      	it	mi
 800f920:	b2ad      	uxthmi	r5, r5
 800f922:	6031      	str	r1, [r6, #0]
 800f924:	07d9      	lsls	r1, r3, #31
 800f926:	bf44      	itt	mi
 800f928:	f043 0320 	orrmi.w	r3, r3, #32
 800f92c:	6023      	strmi	r3, [r4, #0]
 800f92e:	b11d      	cbz	r5, 800f938 <_printf_i+0x1a0>
 800f930:	2310      	movs	r3, #16
 800f932:	e7ab      	b.n	800f88c <_printf_i+0xf4>
 800f934:	4826      	ldr	r0, [pc, #152]	@ (800f9d0 <_printf_i+0x238>)
 800f936:	e7e9      	b.n	800f90c <_printf_i+0x174>
 800f938:	6823      	ldr	r3, [r4, #0]
 800f93a:	f023 0320 	bic.w	r3, r3, #32
 800f93e:	6023      	str	r3, [r4, #0]
 800f940:	e7f6      	b.n	800f930 <_printf_i+0x198>
 800f942:	4616      	mov	r6, r2
 800f944:	e7bd      	b.n	800f8c2 <_printf_i+0x12a>
 800f946:	6833      	ldr	r3, [r6, #0]
 800f948:	6825      	ldr	r5, [r4, #0]
 800f94a:	1d18      	adds	r0, r3, #4
 800f94c:	6961      	ldr	r1, [r4, #20]
 800f94e:	6030      	str	r0, [r6, #0]
 800f950:	062e      	lsls	r6, r5, #24
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	d501      	bpl.n	800f95a <_printf_i+0x1c2>
 800f956:	6019      	str	r1, [r3, #0]
 800f958:	e002      	b.n	800f960 <_printf_i+0x1c8>
 800f95a:	0668      	lsls	r0, r5, #25
 800f95c:	d5fb      	bpl.n	800f956 <_printf_i+0x1be>
 800f95e:	8019      	strh	r1, [r3, #0]
 800f960:	2300      	movs	r3, #0
 800f962:	4616      	mov	r6, r2
 800f964:	6123      	str	r3, [r4, #16]
 800f966:	e7bc      	b.n	800f8e2 <_printf_i+0x14a>
 800f968:	6833      	ldr	r3, [r6, #0]
 800f96a:	2100      	movs	r1, #0
 800f96c:	1d1a      	adds	r2, r3, #4
 800f96e:	6032      	str	r2, [r6, #0]
 800f970:	681e      	ldr	r6, [r3, #0]
 800f972:	6862      	ldr	r2, [r4, #4]
 800f974:	4630      	mov	r0, r6
 800f976:	f000 f9f8 	bl	800fd6a <memchr>
 800f97a:	b108      	cbz	r0, 800f980 <_printf_i+0x1e8>
 800f97c:	1b80      	subs	r0, r0, r6
 800f97e:	6060      	str	r0, [r4, #4]
 800f980:	6863      	ldr	r3, [r4, #4]
 800f982:	6123      	str	r3, [r4, #16]
 800f984:	2300      	movs	r3, #0
 800f986:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f98a:	e7aa      	b.n	800f8e2 <_printf_i+0x14a>
 800f98c:	4632      	mov	r2, r6
 800f98e:	4649      	mov	r1, r9
 800f990:	4640      	mov	r0, r8
 800f992:	6923      	ldr	r3, [r4, #16]
 800f994:	47d0      	blx	sl
 800f996:	3001      	adds	r0, #1
 800f998:	d0ad      	beq.n	800f8f6 <_printf_i+0x15e>
 800f99a:	6823      	ldr	r3, [r4, #0]
 800f99c:	079b      	lsls	r3, r3, #30
 800f99e:	d413      	bmi.n	800f9c8 <_printf_i+0x230>
 800f9a0:	68e0      	ldr	r0, [r4, #12]
 800f9a2:	9b03      	ldr	r3, [sp, #12]
 800f9a4:	4298      	cmp	r0, r3
 800f9a6:	bfb8      	it	lt
 800f9a8:	4618      	movlt	r0, r3
 800f9aa:	e7a6      	b.n	800f8fa <_printf_i+0x162>
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	4632      	mov	r2, r6
 800f9b0:	4649      	mov	r1, r9
 800f9b2:	4640      	mov	r0, r8
 800f9b4:	47d0      	blx	sl
 800f9b6:	3001      	adds	r0, #1
 800f9b8:	d09d      	beq.n	800f8f6 <_printf_i+0x15e>
 800f9ba:	3501      	adds	r5, #1
 800f9bc:	68e3      	ldr	r3, [r4, #12]
 800f9be:	9903      	ldr	r1, [sp, #12]
 800f9c0:	1a5b      	subs	r3, r3, r1
 800f9c2:	42ab      	cmp	r3, r5
 800f9c4:	dcf2      	bgt.n	800f9ac <_printf_i+0x214>
 800f9c6:	e7eb      	b.n	800f9a0 <_printf_i+0x208>
 800f9c8:	2500      	movs	r5, #0
 800f9ca:	f104 0619 	add.w	r6, r4, #25
 800f9ce:	e7f5      	b.n	800f9bc <_printf_i+0x224>
 800f9d0:	08012cdc 	.word	0x08012cdc
 800f9d4:	08012ced 	.word	0x08012ced

0800f9d8 <std>:
 800f9d8:	2300      	movs	r3, #0
 800f9da:	b510      	push	{r4, lr}
 800f9dc:	4604      	mov	r4, r0
 800f9de:	e9c0 3300 	strd	r3, r3, [r0]
 800f9e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f9e6:	6083      	str	r3, [r0, #8]
 800f9e8:	8181      	strh	r1, [r0, #12]
 800f9ea:	6643      	str	r3, [r0, #100]	@ 0x64
 800f9ec:	81c2      	strh	r2, [r0, #14]
 800f9ee:	6183      	str	r3, [r0, #24]
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	2208      	movs	r2, #8
 800f9f4:	305c      	adds	r0, #92	@ 0x5c
 800f9f6:	f000 f928 	bl	800fc4a <memset>
 800f9fa:	4b0d      	ldr	r3, [pc, #52]	@ (800fa30 <std+0x58>)
 800f9fc:	6224      	str	r4, [r4, #32]
 800f9fe:	6263      	str	r3, [r4, #36]	@ 0x24
 800fa00:	4b0c      	ldr	r3, [pc, #48]	@ (800fa34 <std+0x5c>)
 800fa02:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fa04:	4b0c      	ldr	r3, [pc, #48]	@ (800fa38 <std+0x60>)
 800fa06:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fa08:	4b0c      	ldr	r3, [pc, #48]	@ (800fa3c <std+0x64>)
 800fa0a:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa0c:	4b0c      	ldr	r3, [pc, #48]	@ (800fa40 <std+0x68>)
 800fa0e:	429c      	cmp	r4, r3
 800fa10:	d006      	beq.n	800fa20 <std+0x48>
 800fa12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fa16:	4294      	cmp	r4, r2
 800fa18:	d002      	beq.n	800fa20 <std+0x48>
 800fa1a:	33d0      	adds	r3, #208	@ 0xd0
 800fa1c:	429c      	cmp	r4, r3
 800fa1e:	d105      	bne.n	800fa2c <std+0x54>
 800fa20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fa24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa28:	f000 b99c 	b.w	800fd64 <__retarget_lock_init_recursive>
 800fa2c:	bd10      	pop	{r4, pc}
 800fa2e:	bf00      	nop
 800fa30:	0800fbc5 	.word	0x0800fbc5
 800fa34:	0800fbe7 	.word	0x0800fbe7
 800fa38:	0800fc1f 	.word	0x0800fc1f
 800fa3c:	0800fc43 	.word	0x0800fc43
 800fa40:	20002a74 	.word	0x20002a74

0800fa44 <stdio_exit_handler>:
 800fa44:	4a02      	ldr	r2, [pc, #8]	@ (800fa50 <stdio_exit_handler+0xc>)
 800fa46:	4903      	ldr	r1, [pc, #12]	@ (800fa54 <stdio_exit_handler+0x10>)
 800fa48:	4803      	ldr	r0, [pc, #12]	@ (800fa58 <stdio_exit_handler+0x14>)
 800fa4a:	f000 b869 	b.w	800fb20 <_fwalk_sglue>
 800fa4e:	bf00      	nop
 800fa50:	2000017c 	.word	0x2000017c
 800fa54:	08011569 	.word	0x08011569
 800fa58:	2000018c 	.word	0x2000018c

0800fa5c <cleanup_stdio>:
 800fa5c:	6841      	ldr	r1, [r0, #4]
 800fa5e:	4b0c      	ldr	r3, [pc, #48]	@ (800fa90 <cleanup_stdio+0x34>)
 800fa60:	b510      	push	{r4, lr}
 800fa62:	4299      	cmp	r1, r3
 800fa64:	4604      	mov	r4, r0
 800fa66:	d001      	beq.n	800fa6c <cleanup_stdio+0x10>
 800fa68:	f001 fd7e 	bl	8011568 <_fflush_r>
 800fa6c:	68a1      	ldr	r1, [r4, #8]
 800fa6e:	4b09      	ldr	r3, [pc, #36]	@ (800fa94 <cleanup_stdio+0x38>)
 800fa70:	4299      	cmp	r1, r3
 800fa72:	d002      	beq.n	800fa7a <cleanup_stdio+0x1e>
 800fa74:	4620      	mov	r0, r4
 800fa76:	f001 fd77 	bl	8011568 <_fflush_r>
 800fa7a:	68e1      	ldr	r1, [r4, #12]
 800fa7c:	4b06      	ldr	r3, [pc, #24]	@ (800fa98 <cleanup_stdio+0x3c>)
 800fa7e:	4299      	cmp	r1, r3
 800fa80:	d004      	beq.n	800fa8c <cleanup_stdio+0x30>
 800fa82:	4620      	mov	r0, r4
 800fa84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa88:	f001 bd6e 	b.w	8011568 <_fflush_r>
 800fa8c:	bd10      	pop	{r4, pc}
 800fa8e:	bf00      	nop
 800fa90:	20002a74 	.word	0x20002a74
 800fa94:	20002adc 	.word	0x20002adc
 800fa98:	20002b44 	.word	0x20002b44

0800fa9c <global_stdio_init.part.0>:
 800fa9c:	b510      	push	{r4, lr}
 800fa9e:	4b0b      	ldr	r3, [pc, #44]	@ (800facc <global_stdio_init.part.0+0x30>)
 800faa0:	4c0b      	ldr	r4, [pc, #44]	@ (800fad0 <global_stdio_init.part.0+0x34>)
 800faa2:	4a0c      	ldr	r2, [pc, #48]	@ (800fad4 <global_stdio_init.part.0+0x38>)
 800faa4:	4620      	mov	r0, r4
 800faa6:	601a      	str	r2, [r3, #0]
 800faa8:	2104      	movs	r1, #4
 800faaa:	2200      	movs	r2, #0
 800faac:	f7ff ff94 	bl	800f9d8 <std>
 800fab0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fab4:	2201      	movs	r2, #1
 800fab6:	2109      	movs	r1, #9
 800fab8:	f7ff ff8e 	bl	800f9d8 <std>
 800fabc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fac0:	2202      	movs	r2, #2
 800fac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fac6:	2112      	movs	r1, #18
 800fac8:	f7ff bf86 	b.w	800f9d8 <std>
 800facc:	20002bac 	.word	0x20002bac
 800fad0:	20002a74 	.word	0x20002a74
 800fad4:	0800fa45 	.word	0x0800fa45

0800fad8 <__sfp_lock_acquire>:
 800fad8:	4801      	ldr	r0, [pc, #4]	@ (800fae0 <__sfp_lock_acquire+0x8>)
 800fada:	f000 b944 	b.w	800fd66 <__retarget_lock_acquire_recursive>
 800fade:	bf00      	nop
 800fae0:	20002bb5 	.word	0x20002bb5

0800fae4 <__sfp_lock_release>:
 800fae4:	4801      	ldr	r0, [pc, #4]	@ (800faec <__sfp_lock_release+0x8>)
 800fae6:	f000 b93f 	b.w	800fd68 <__retarget_lock_release_recursive>
 800faea:	bf00      	nop
 800faec:	20002bb5 	.word	0x20002bb5

0800faf0 <__sinit>:
 800faf0:	b510      	push	{r4, lr}
 800faf2:	4604      	mov	r4, r0
 800faf4:	f7ff fff0 	bl	800fad8 <__sfp_lock_acquire>
 800faf8:	6a23      	ldr	r3, [r4, #32]
 800fafa:	b11b      	cbz	r3, 800fb04 <__sinit+0x14>
 800fafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb00:	f7ff bff0 	b.w	800fae4 <__sfp_lock_release>
 800fb04:	4b04      	ldr	r3, [pc, #16]	@ (800fb18 <__sinit+0x28>)
 800fb06:	6223      	str	r3, [r4, #32]
 800fb08:	4b04      	ldr	r3, [pc, #16]	@ (800fb1c <__sinit+0x2c>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d1f5      	bne.n	800fafc <__sinit+0xc>
 800fb10:	f7ff ffc4 	bl	800fa9c <global_stdio_init.part.0>
 800fb14:	e7f2      	b.n	800fafc <__sinit+0xc>
 800fb16:	bf00      	nop
 800fb18:	0800fa5d 	.word	0x0800fa5d
 800fb1c:	20002bac 	.word	0x20002bac

0800fb20 <_fwalk_sglue>:
 800fb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb24:	4607      	mov	r7, r0
 800fb26:	4688      	mov	r8, r1
 800fb28:	4614      	mov	r4, r2
 800fb2a:	2600      	movs	r6, #0
 800fb2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb30:	f1b9 0901 	subs.w	r9, r9, #1
 800fb34:	d505      	bpl.n	800fb42 <_fwalk_sglue+0x22>
 800fb36:	6824      	ldr	r4, [r4, #0]
 800fb38:	2c00      	cmp	r4, #0
 800fb3a:	d1f7      	bne.n	800fb2c <_fwalk_sglue+0xc>
 800fb3c:	4630      	mov	r0, r6
 800fb3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb42:	89ab      	ldrh	r3, [r5, #12]
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d907      	bls.n	800fb58 <_fwalk_sglue+0x38>
 800fb48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb4c:	3301      	adds	r3, #1
 800fb4e:	d003      	beq.n	800fb58 <_fwalk_sglue+0x38>
 800fb50:	4629      	mov	r1, r5
 800fb52:	4638      	mov	r0, r7
 800fb54:	47c0      	blx	r8
 800fb56:	4306      	orrs	r6, r0
 800fb58:	3568      	adds	r5, #104	@ 0x68
 800fb5a:	e7e9      	b.n	800fb30 <_fwalk_sglue+0x10>

0800fb5c <sniprintf>:
 800fb5c:	b40c      	push	{r2, r3}
 800fb5e:	b530      	push	{r4, r5, lr}
 800fb60:	4b17      	ldr	r3, [pc, #92]	@ (800fbc0 <sniprintf+0x64>)
 800fb62:	1e0c      	subs	r4, r1, #0
 800fb64:	681d      	ldr	r5, [r3, #0]
 800fb66:	b09d      	sub	sp, #116	@ 0x74
 800fb68:	da08      	bge.n	800fb7c <sniprintf+0x20>
 800fb6a:	238b      	movs	r3, #139	@ 0x8b
 800fb6c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb70:	602b      	str	r3, [r5, #0]
 800fb72:	b01d      	add	sp, #116	@ 0x74
 800fb74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb78:	b002      	add	sp, #8
 800fb7a:	4770      	bx	lr
 800fb7c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fb80:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fb84:	bf0c      	ite	eq
 800fb86:	4623      	moveq	r3, r4
 800fb88:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fb8c:	9304      	str	r3, [sp, #16]
 800fb8e:	9307      	str	r3, [sp, #28]
 800fb90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fb94:	9002      	str	r0, [sp, #8]
 800fb96:	9006      	str	r0, [sp, #24]
 800fb98:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fb9c:	4628      	mov	r0, r5
 800fb9e:	ab21      	add	r3, sp, #132	@ 0x84
 800fba0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fba2:	a902      	add	r1, sp, #8
 800fba4:	9301      	str	r3, [sp, #4]
 800fba6:	f001 fb63 	bl	8011270 <_svfiprintf_r>
 800fbaa:	1c43      	adds	r3, r0, #1
 800fbac:	bfbc      	itt	lt
 800fbae:	238b      	movlt	r3, #139	@ 0x8b
 800fbb0:	602b      	strlt	r3, [r5, #0]
 800fbb2:	2c00      	cmp	r4, #0
 800fbb4:	d0dd      	beq.n	800fb72 <sniprintf+0x16>
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	9b02      	ldr	r3, [sp, #8]
 800fbba:	701a      	strb	r2, [r3, #0]
 800fbbc:	e7d9      	b.n	800fb72 <sniprintf+0x16>
 800fbbe:	bf00      	nop
 800fbc0:	20000188 	.word	0x20000188

0800fbc4 <__sread>:
 800fbc4:	b510      	push	{r4, lr}
 800fbc6:	460c      	mov	r4, r1
 800fbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbcc:	f000 f86c 	bl	800fca8 <_read_r>
 800fbd0:	2800      	cmp	r0, #0
 800fbd2:	bfab      	itete	ge
 800fbd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fbd6:	89a3      	ldrhlt	r3, [r4, #12]
 800fbd8:	181b      	addge	r3, r3, r0
 800fbda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fbde:	bfac      	ite	ge
 800fbe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fbe2:	81a3      	strhlt	r3, [r4, #12]
 800fbe4:	bd10      	pop	{r4, pc}

0800fbe6 <__swrite>:
 800fbe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbea:	461f      	mov	r7, r3
 800fbec:	898b      	ldrh	r3, [r1, #12]
 800fbee:	4605      	mov	r5, r0
 800fbf0:	05db      	lsls	r3, r3, #23
 800fbf2:	460c      	mov	r4, r1
 800fbf4:	4616      	mov	r6, r2
 800fbf6:	d505      	bpl.n	800fc04 <__swrite+0x1e>
 800fbf8:	2302      	movs	r3, #2
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc00:	f000 f840 	bl	800fc84 <_lseek_r>
 800fc04:	89a3      	ldrh	r3, [r4, #12]
 800fc06:	4632      	mov	r2, r6
 800fc08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fc0c:	81a3      	strh	r3, [r4, #12]
 800fc0e:	4628      	mov	r0, r5
 800fc10:	463b      	mov	r3, r7
 800fc12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc1a:	f000 b867 	b.w	800fcec <_write_r>

0800fc1e <__sseek>:
 800fc1e:	b510      	push	{r4, lr}
 800fc20:	460c      	mov	r4, r1
 800fc22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc26:	f000 f82d 	bl	800fc84 <_lseek_r>
 800fc2a:	1c43      	adds	r3, r0, #1
 800fc2c:	89a3      	ldrh	r3, [r4, #12]
 800fc2e:	bf15      	itete	ne
 800fc30:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fc32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fc36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fc3a:	81a3      	strheq	r3, [r4, #12]
 800fc3c:	bf18      	it	ne
 800fc3e:	81a3      	strhne	r3, [r4, #12]
 800fc40:	bd10      	pop	{r4, pc}

0800fc42 <__sclose>:
 800fc42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc46:	f000 b80d 	b.w	800fc64 <_close_r>

0800fc4a <memset>:
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	4402      	add	r2, r0
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	d100      	bne.n	800fc54 <memset+0xa>
 800fc52:	4770      	bx	lr
 800fc54:	f803 1b01 	strb.w	r1, [r3], #1
 800fc58:	e7f9      	b.n	800fc4e <memset+0x4>
	...

0800fc5c <_localeconv_r>:
 800fc5c:	4800      	ldr	r0, [pc, #0]	@ (800fc60 <_localeconv_r+0x4>)
 800fc5e:	4770      	bx	lr
 800fc60:	200002c8 	.word	0x200002c8

0800fc64 <_close_r>:
 800fc64:	b538      	push	{r3, r4, r5, lr}
 800fc66:	2300      	movs	r3, #0
 800fc68:	4d05      	ldr	r5, [pc, #20]	@ (800fc80 <_close_r+0x1c>)
 800fc6a:	4604      	mov	r4, r0
 800fc6c:	4608      	mov	r0, r1
 800fc6e:	602b      	str	r3, [r5, #0]
 800fc70:	f7f3 ffdb 	bl	8003c2a <_close>
 800fc74:	1c43      	adds	r3, r0, #1
 800fc76:	d102      	bne.n	800fc7e <_close_r+0x1a>
 800fc78:	682b      	ldr	r3, [r5, #0]
 800fc7a:	b103      	cbz	r3, 800fc7e <_close_r+0x1a>
 800fc7c:	6023      	str	r3, [r4, #0]
 800fc7e:	bd38      	pop	{r3, r4, r5, pc}
 800fc80:	20002bb0 	.word	0x20002bb0

0800fc84 <_lseek_r>:
 800fc84:	b538      	push	{r3, r4, r5, lr}
 800fc86:	4604      	mov	r4, r0
 800fc88:	4608      	mov	r0, r1
 800fc8a:	4611      	mov	r1, r2
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	4d05      	ldr	r5, [pc, #20]	@ (800fca4 <_lseek_r+0x20>)
 800fc90:	602a      	str	r2, [r5, #0]
 800fc92:	461a      	mov	r2, r3
 800fc94:	f7f3 ffed 	bl	8003c72 <_lseek>
 800fc98:	1c43      	adds	r3, r0, #1
 800fc9a:	d102      	bne.n	800fca2 <_lseek_r+0x1e>
 800fc9c:	682b      	ldr	r3, [r5, #0]
 800fc9e:	b103      	cbz	r3, 800fca2 <_lseek_r+0x1e>
 800fca0:	6023      	str	r3, [r4, #0]
 800fca2:	bd38      	pop	{r3, r4, r5, pc}
 800fca4:	20002bb0 	.word	0x20002bb0

0800fca8 <_read_r>:
 800fca8:	b538      	push	{r3, r4, r5, lr}
 800fcaa:	4604      	mov	r4, r0
 800fcac:	4608      	mov	r0, r1
 800fcae:	4611      	mov	r1, r2
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	4d05      	ldr	r5, [pc, #20]	@ (800fcc8 <_read_r+0x20>)
 800fcb4:	602a      	str	r2, [r5, #0]
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	f7f3 ff7e 	bl	8003bb8 <_read>
 800fcbc:	1c43      	adds	r3, r0, #1
 800fcbe:	d102      	bne.n	800fcc6 <_read_r+0x1e>
 800fcc0:	682b      	ldr	r3, [r5, #0]
 800fcc2:	b103      	cbz	r3, 800fcc6 <_read_r+0x1e>
 800fcc4:	6023      	str	r3, [r4, #0]
 800fcc6:	bd38      	pop	{r3, r4, r5, pc}
 800fcc8:	20002bb0 	.word	0x20002bb0

0800fccc <_sbrk_r>:
 800fccc:	b538      	push	{r3, r4, r5, lr}
 800fcce:	2300      	movs	r3, #0
 800fcd0:	4d05      	ldr	r5, [pc, #20]	@ (800fce8 <_sbrk_r+0x1c>)
 800fcd2:	4604      	mov	r4, r0
 800fcd4:	4608      	mov	r0, r1
 800fcd6:	602b      	str	r3, [r5, #0]
 800fcd8:	f7f3 ffd8 	bl	8003c8c <_sbrk>
 800fcdc:	1c43      	adds	r3, r0, #1
 800fcde:	d102      	bne.n	800fce6 <_sbrk_r+0x1a>
 800fce0:	682b      	ldr	r3, [r5, #0]
 800fce2:	b103      	cbz	r3, 800fce6 <_sbrk_r+0x1a>
 800fce4:	6023      	str	r3, [r4, #0]
 800fce6:	bd38      	pop	{r3, r4, r5, pc}
 800fce8:	20002bb0 	.word	0x20002bb0

0800fcec <_write_r>:
 800fcec:	b538      	push	{r3, r4, r5, lr}
 800fcee:	4604      	mov	r4, r0
 800fcf0:	4608      	mov	r0, r1
 800fcf2:	4611      	mov	r1, r2
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	4d05      	ldr	r5, [pc, #20]	@ (800fd0c <_write_r+0x20>)
 800fcf8:	602a      	str	r2, [r5, #0]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	f7f3 ff79 	bl	8003bf2 <_write>
 800fd00:	1c43      	adds	r3, r0, #1
 800fd02:	d102      	bne.n	800fd0a <_write_r+0x1e>
 800fd04:	682b      	ldr	r3, [r5, #0]
 800fd06:	b103      	cbz	r3, 800fd0a <_write_r+0x1e>
 800fd08:	6023      	str	r3, [r4, #0]
 800fd0a:	bd38      	pop	{r3, r4, r5, pc}
 800fd0c:	20002bb0 	.word	0x20002bb0

0800fd10 <__errno>:
 800fd10:	4b01      	ldr	r3, [pc, #4]	@ (800fd18 <__errno+0x8>)
 800fd12:	6818      	ldr	r0, [r3, #0]
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop
 800fd18:	20000188 	.word	0x20000188

0800fd1c <__libc_init_array>:
 800fd1c:	b570      	push	{r4, r5, r6, lr}
 800fd1e:	2600      	movs	r6, #0
 800fd20:	4d0c      	ldr	r5, [pc, #48]	@ (800fd54 <__libc_init_array+0x38>)
 800fd22:	4c0d      	ldr	r4, [pc, #52]	@ (800fd58 <__libc_init_array+0x3c>)
 800fd24:	1b64      	subs	r4, r4, r5
 800fd26:	10a4      	asrs	r4, r4, #2
 800fd28:	42a6      	cmp	r6, r4
 800fd2a:	d109      	bne.n	800fd40 <__libc_init_array+0x24>
 800fd2c:	f002 feb8 	bl	8012aa0 <_init>
 800fd30:	2600      	movs	r6, #0
 800fd32:	4d0a      	ldr	r5, [pc, #40]	@ (800fd5c <__libc_init_array+0x40>)
 800fd34:	4c0a      	ldr	r4, [pc, #40]	@ (800fd60 <__libc_init_array+0x44>)
 800fd36:	1b64      	subs	r4, r4, r5
 800fd38:	10a4      	asrs	r4, r4, #2
 800fd3a:	42a6      	cmp	r6, r4
 800fd3c:	d105      	bne.n	800fd4a <__libc_init_array+0x2e>
 800fd3e:	bd70      	pop	{r4, r5, r6, pc}
 800fd40:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd44:	4798      	blx	r3
 800fd46:	3601      	adds	r6, #1
 800fd48:	e7ee      	b.n	800fd28 <__libc_init_array+0xc>
 800fd4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd4e:	4798      	blx	r3
 800fd50:	3601      	adds	r6, #1
 800fd52:	e7f2      	b.n	800fd3a <__libc_init_array+0x1e>
 800fd54:	08013070 	.word	0x08013070
 800fd58:	08013070 	.word	0x08013070
 800fd5c:	08013070 	.word	0x08013070
 800fd60:	08013074 	.word	0x08013074

0800fd64 <__retarget_lock_init_recursive>:
 800fd64:	4770      	bx	lr

0800fd66 <__retarget_lock_acquire_recursive>:
 800fd66:	4770      	bx	lr

0800fd68 <__retarget_lock_release_recursive>:
 800fd68:	4770      	bx	lr

0800fd6a <memchr>:
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	b510      	push	{r4, lr}
 800fd6e:	b2c9      	uxtb	r1, r1
 800fd70:	4402      	add	r2, r0
 800fd72:	4293      	cmp	r3, r2
 800fd74:	4618      	mov	r0, r3
 800fd76:	d101      	bne.n	800fd7c <memchr+0x12>
 800fd78:	2000      	movs	r0, #0
 800fd7a:	e003      	b.n	800fd84 <memchr+0x1a>
 800fd7c:	7804      	ldrb	r4, [r0, #0]
 800fd7e:	3301      	adds	r3, #1
 800fd80:	428c      	cmp	r4, r1
 800fd82:	d1f6      	bne.n	800fd72 <memchr+0x8>
 800fd84:	bd10      	pop	{r4, pc}

0800fd86 <quorem>:
 800fd86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd8a:	6903      	ldr	r3, [r0, #16]
 800fd8c:	690c      	ldr	r4, [r1, #16]
 800fd8e:	4607      	mov	r7, r0
 800fd90:	42a3      	cmp	r3, r4
 800fd92:	db7e      	blt.n	800fe92 <quorem+0x10c>
 800fd94:	3c01      	subs	r4, #1
 800fd96:	00a3      	lsls	r3, r4, #2
 800fd98:	f100 0514 	add.w	r5, r0, #20
 800fd9c:	f101 0814 	add.w	r8, r1, #20
 800fda0:	9300      	str	r3, [sp, #0]
 800fda2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fda6:	9301      	str	r3, [sp, #4]
 800fda8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fdac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	fbb2 f6f3 	udiv	r6, r2, r3
 800fdb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fdbc:	d32e      	bcc.n	800fe1c <quorem+0x96>
 800fdbe:	f04f 0a00 	mov.w	sl, #0
 800fdc2:	46c4      	mov	ip, r8
 800fdc4:	46ae      	mov	lr, r5
 800fdc6:	46d3      	mov	fp, sl
 800fdc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fdcc:	b298      	uxth	r0, r3
 800fdce:	fb06 a000 	mla	r0, r6, r0, sl
 800fdd2:	0c1b      	lsrs	r3, r3, #16
 800fdd4:	0c02      	lsrs	r2, r0, #16
 800fdd6:	fb06 2303 	mla	r3, r6, r3, r2
 800fdda:	f8de 2000 	ldr.w	r2, [lr]
 800fdde:	b280      	uxth	r0, r0
 800fde0:	b292      	uxth	r2, r2
 800fde2:	1a12      	subs	r2, r2, r0
 800fde4:	445a      	add	r2, fp
 800fde6:	f8de 0000 	ldr.w	r0, [lr]
 800fdea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fdee:	b29b      	uxth	r3, r3
 800fdf0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fdf4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fdf8:	b292      	uxth	r2, r2
 800fdfa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fdfe:	45e1      	cmp	r9, ip
 800fe00:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fe04:	f84e 2b04 	str.w	r2, [lr], #4
 800fe08:	d2de      	bcs.n	800fdc8 <quorem+0x42>
 800fe0a:	9b00      	ldr	r3, [sp, #0]
 800fe0c:	58eb      	ldr	r3, [r5, r3]
 800fe0e:	b92b      	cbnz	r3, 800fe1c <quorem+0x96>
 800fe10:	9b01      	ldr	r3, [sp, #4]
 800fe12:	3b04      	subs	r3, #4
 800fe14:	429d      	cmp	r5, r3
 800fe16:	461a      	mov	r2, r3
 800fe18:	d32f      	bcc.n	800fe7a <quorem+0xf4>
 800fe1a:	613c      	str	r4, [r7, #16]
 800fe1c:	4638      	mov	r0, r7
 800fe1e:	f001 f8c3 	bl	8010fa8 <__mcmp>
 800fe22:	2800      	cmp	r0, #0
 800fe24:	db25      	blt.n	800fe72 <quorem+0xec>
 800fe26:	4629      	mov	r1, r5
 800fe28:	2000      	movs	r0, #0
 800fe2a:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe2e:	f8d1 c000 	ldr.w	ip, [r1]
 800fe32:	fa1f fe82 	uxth.w	lr, r2
 800fe36:	fa1f f38c 	uxth.w	r3, ip
 800fe3a:	eba3 030e 	sub.w	r3, r3, lr
 800fe3e:	4403      	add	r3, r0
 800fe40:	0c12      	lsrs	r2, r2, #16
 800fe42:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fe46:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe50:	45c1      	cmp	r9, r8
 800fe52:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fe56:	f841 3b04 	str.w	r3, [r1], #4
 800fe5a:	d2e6      	bcs.n	800fe2a <quorem+0xa4>
 800fe5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe64:	b922      	cbnz	r2, 800fe70 <quorem+0xea>
 800fe66:	3b04      	subs	r3, #4
 800fe68:	429d      	cmp	r5, r3
 800fe6a:	461a      	mov	r2, r3
 800fe6c:	d30b      	bcc.n	800fe86 <quorem+0x100>
 800fe6e:	613c      	str	r4, [r7, #16]
 800fe70:	3601      	adds	r6, #1
 800fe72:	4630      	mov	r0, r6
 800fe74:	b003      	add	sp, #12
 800fe76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe7a:	6812      	ldr	r2, [r2, #0]
 800fe7c:	3b04      	subs	r3, #4
 800fe7e:	2a00      	cmp	r2, #0
 800fe80:	d1cb      	bne.n	800fe1a <quorem+0x94>
 800fe82:	3c01      	subs	r4, #1
 800fe84:	e7c6      	b.n	800fe14 <quorem+0x8e>
 800fe86:	6812      	ldr	r2, [r2, #0]
 800fe88:	3b04      	subs	r3, #4
 800fe8a:	2a00      	cmp	r2, #0
 800fe8c:	d1ef      	bne.n	800fe6e <quorem+0xe8>
 800fe8e:	3c01      	subs	r4, #1
 800fe90:	e7ea      	b.n	800fe68 <quorem+0xe2>
 800fe92:	2000      	movs	r0, #0
 800fe94:	e7ee      	b.n	800fe74 <quorem+0xee>
	...

0800fe98 <_dtoa_r>:
 800fe98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe9c:	4614      	mov	r4, r2
 800fe9e:	461d      	mov	r5, r3
 800fea0:	69c7      	ldr	r7, [r0, #28]
 800fea2:	b097      	sub	sp, #92	@ 0x5c
 800fea4:	4683      	mov	fp, r0
 800fea6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800feaa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800feac:	b97f      	cbnz	r7, 800fece <_dtoa_r+0x36>
 800feae:	2010      	movs	r0, #16
 800feb0:	f7ff f880 	bl	800efb4 <malloc>
 800feb4:	4602      	mov	r2, r0
 800feb6:	f8cb 001c 	str.w	r0, [fp, #28]
 800feba:	b920      	cbnz	r0, 800fec6 <_dtoa_r+0x2e>
 800febc:	21ef      	movs	r1, #239	@ 0xef
 800febe:	4ba8      	ldr	r3, [pc, #672]	@ (8010160 <_dtoa_r+0x2c8>)
 800fec0:	48a8      	ldr	r0, [pc, #672]	@ (8010164 <_dtoa_r+0x2cc>)
 800fec2:	f001 fba1 	bl	8011608 <__assert_func>
 800fec6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800feca:	6007      	str	r7, [r0, #0]
 800fecc:	60c7      	str	r7, [r0, #12]
 800fece:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fed2:	6819      	ldr	r1, [r3, #0]
 800fed4:	b159      	cbz	r1, 800feee <_dtoa_r+0x56>
 800fed6:	685a      	ldr	r2, [r3, #4]
 800fed8:	2301      	movs	r3, #1
 800feda:	4093      	lsls	r3, r2
 800fedc:	604a      	str	r2, [r1, #4]
 800fede:	608b      	str	r3, [r1, #8]
 800fee0:	4658      	mov	r0, fp
 800fee2:	f000 fe29 	bl	8010b38 <_Bfree>
 800fee6:	2200      	movs	r2, #0
 800fee8:	f8db 301c 	ldr.w	r3, [fp, #28]
 800feec:	601a      	str	r2, [r3, #0]
 800feee:	1e2b      	subs	r3, r5, #0
 800fef0:	bfaf      	iteee	ge
 800fef2:	2300      	movge	r3, #0
 800fef4:	2201      	movlt	r2, #1
 800fef6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fefa:	9303      	strlt	r3, [sp, #12]
 800fefc:	bfa8      	it	ge
 800fefe:	6033      	strge	r3, [r6, #0]
 800ff00:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ff04:	4b98      	ldr	r3, [pc, #608]	@ (8010168 <_dtoa_r+0x2d0>)
 800ff06:	bfb8      	it	lt
 800ff08:	6032      	strlt	r2, [r6, #0]
 800ff0a:	ea33 0308 	bics.w	r3, r3, r8
 800ff0e:	d112      	bne.n	800ff36 <_dtoa_r+0x9e>
 800ff10:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ff14:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ff16:	6013      	str	r3, [r2, #0]
 800ff18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ff1c:	4323      	orrs	r3, r4
 800ff1e:	f000 8550 	beq.w	80109c2 <_dtoa_r+0xb2a>
 800ff22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ff24:	f8df a244 	ldr.w	sl, [pc, #580]	@ 801016c <_dtoa_r+0x2d4>
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	f000 8552 	beq.w	80109d2 <_dtoa_r+0xb3a>
 800ff2e:	f10a 0303 	add.w	r3, sl, #3
 800ff32:	f000 bd4c 	b.w	80109ce <_dtoa_r+0xb36>
 800ff36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff3a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ff3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff42:	2200      	movs	r2, #0
 800ff44:	2300      	movs	r3, #0
 800ff46:	f7f0 fd2f 	bl	80009a8 <__aeabi_dcmpeq>
 800ff4a:	4607      	mov	r7, r0
 800ff4c:	b158      	cbz	r0, 800ff66 <_dtoa_r+0xce>
 800ff4e:	2301      	movs	r3, #1
 800ff50:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ff52:	6013      	str	r3, [r2, #0]
 800ff54:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ff56:	b113      	cbz	r3, 800ff5e <_dtoa_r+0xc6>
 800ff58:	4b85      	ldr	r3, [pc, #532]	@ (8010170 <_dtoa_r+0x2d8>)
 800ff5a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ff5c:	6013      	str	r3, [r2, #0]
 800ff5e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8010174 <_dtoa_r+0x2dc>
 800ff62:	f000 bd36 	b.w	80109d2 <_dtoa_r+0xb3a>
 800ff66:	ab14      	add	r3, sp, #80	@ 0x50
 800ff68:	9301      	str	r3, [sp, #4]
 800ff6a:	ab15      	add	r3, sp, #84	@ 0x54
 800ff6c:	9300      	str	r3, [sp, #0]
 800ff6e:	4658      	mov	r0, fp
 800ff70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ff74:	f001 f8c8 	bl	8011108 <__d2b>
 800ff78:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800ff7c:	4681      	mov	r9, r0
 800ff7e:	2e00      	cmp	r6, #0
 800ff80:	d077      	beq.n	8010072 <_dtoa_r+0x1da>
 800ff82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ff88:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ff8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff90:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ff94:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ff98:	9712      	str	r7, [sp, #72]	@ 0x48
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	4b76      	ldr	r3, [pc, #472]	@ (8010178 <_dtoa_r+0x2e0>)
 800ffa0:	f7f0 f8e2 	bl	8000168 <__aeabi_dsub>
 800ffa4:	a368      	add	r3, pc, #416	@ (adr r3, 8010148 <_dtoa_r+0x2b0>)
 800ffa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffaa:	f7f0 fa95 	bl	80004d8 <__aeabi_dmul>
 800ffae:	a368      	add	r3, pc, #416	@ (adr r3, 8010150 <_dtoa_r+0x2b8>)
 800ffb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb4:	f7f0 f8da 	bl	800016c <__adddf3>
 800ffb8:	4604      	mov	r4, r0
 800ffba:	4630      	mov	r0, r6
 800ffbc:	460d      	mov	r5, r1
 800ffbe:	f7f0 fa21 	bl	8000404 <__aeabi_i2d>
 800ffc2:	a365      	add	r3, pc, #404	@ (adr r3, 8010158 <_dtoa_r+0x2c0>)
 800ffc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc8:	f7f0 fa86 	bl	80004d8 <__aeabi_dmul>
 800ffcc:	4602      	mov	r2, r0
 800ffce:	460b      	mov	r3, r1
 800ffd0:	4620      	mov	r0, r4
 800ffd2:	4629      	mov	r1, r5
 800ffd4:	f7f0 f8ca 	bl	800016c <__adddf3>
 800ffd8:	4604      	mov	r4, r0
 800ffda:	460d      	mov	r5, r1
 800ffdc:	f7f0 fd2c 	bl	8000a38 <__aeabi_d2iz>
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	4607      	mov	r7, r0
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	4629      	mov	r1, r5
 800ffea:	f7f0 fce7 	bl	80009bc <__aeabi_dcmplt>
 800ffee:	b140      	cbz	r0, 8010002 <_dtoa_r+0x16a>
 800fff0:	4638      	mov	r0, r7
 800fff2:	f7f0 fa07 	bl	8000404 <__aeabi_i2d>
 800fff6:	4622      	mov	r2, r4
 800fff8:	462b      	mov	r3, r5
 800fffa:	f7f0 fcd5 	bl	80009a8 <__aeabi_dcmpeq>
 800fffe:	b900      	cbnz	r0, 8010002 <_dtoa_r+0x16a>
 8010000:	3f01      	subs	r7, #1
 8010002:	2f16      	cmp	r7, #22
 8010004:	d853      	bhi.n	80100ae <_dtoa_r+0x216>
 8010006:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801000a:	4b5c      	ldr	r3, [pc, #368]	@ (801017c <_dtoa_r+0x2e4>)
 801000c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010014:	f7f0 fcd2 	bl	80009bc <__aeabi_dcmplt>
 8010018:	2800      	cmp	r0, #0
 801001a:	d04a      	beq.n	80100b2 <_dtoa_r+0x21a>
 801001c:	2300      	movs	r3, #0
 801001e:	3f01      	subs	r7, #1
 8010020:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010022:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010024:	1b9b      	subs	r3, r3, r6
 8010026:	1e5a      	subs	r2, r3, #1
 8010028:	bf46      	itte	mi
 801002a:	f1c3 0801 	rsbmi	r8, r3, #1
 801002e:	2300      	movmi	r3, #0
 8010030:	f04f 0800 	movpl.w	r8, #0
 8010034:	9209      	str	r2, [sp, #36]	@ 0x24
 8010036:	bf48      	it	mi
 8010038:	9309      	strmi	r3, [sp, #36]	@ 0x24
 801003a:	2f00      	cmp	r7, #0
 801003c:	db3b      	blt.n	80100b6 <_dtoa_r+0x21e>
 801003e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010040:	970e      	str	r7, [sp, #56]	@ 0x38
 8010042:	443b      	add	r3, r7
 8010044:	9309      	str	r3, [sp, #36]	@ 0x24
 8010046:	2300      	movs	r3, #0
 8010048:	930a      	str	r3, [sp, #40]	@ 0x28
 801004a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801004c:	2b09      	cmp	r3, #9
 801004e:	d866      	bhi.n	801011e <_dtoa_r+0x286>
 8010050:	2b05      	cmp	r3, #5
 8010052:	bfc4      	itt	gt
 8010054:	3b04      	subgt	r3, #4
 8010056:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8010058:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801005a:	bfc8      	it	gt
 801005c:	2400      	movgt	r4, #0
 801005e:	f1a3 0302 	sub.w	r3, r3, #2
 8010062:	bfd8      	it	le
 8010064:	2401      	movle	r4, #1
 8010066:	2b03      	cmp	r3, #3
 8010068:	d864      	bhi.n	8010134 <_dtoa_r+0x29c>
 801006a:	e8df f003 	tbb	[pc, r3]
 801006e:	382b      	.short	0x382b
 8010070:	5636      	.short	0x5636
 8010072:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010076:	441e      	add	r6, r3
 8010078:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801007c:	2b20      	cmp	r3, #32
 801007e:	bfc1      	itttt	gt
 8010080:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010084:	fa08 f803 	lslgt.w	r8, r8, r3
 8010088:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801008c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010090:	bfd6      	itet	le
 8010092:	f1c3 0320 	rsble	r3, r3, #32
 8010096:	ea48 0003 	orrgt.w	r0, r8, r3
 801009a:	fa04 f003 	lslle.w	r0, r4, r3
 801009e:	f7f0 f9a1 	bl	80003e4 <__aeabi_ui2d>
 80100a2:	2201      	movs	r2, #1
 80100a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80100a8:	3e01      	subs	r6, #1
 80100aa:	9212      	str	r2, [sp, #72]	@ 0x48
 80100ac:	e775      	b.n	800ff9a <_dtoa_r+0x102>
 80100ae:	2301      	movs	r3, #1
 80100b0:	e7b6      	b.n	8010020 <_dtoa_r+0x188>
 80100b2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80100b4:	e7b5      	b.n	8010022 <_dtoa_r+0x18a>
 80100b6:	427b      	negs	r3, r7
 80100b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80100ba:	2300      	movs	r3, #0
 80100bc:	eba8 0807 	sub.w	r8, r8, r7
 80100c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80100c2:	e7c2      	b.n	801004a <_dtoa_r+0x1b2>
 80100c4:	2300      	movs	r3, #0
 80100c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80100c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	dc35      	bgt.n	801013a <_dtoa_r+0x2a2>
 80100ce:	2301      	movs	r3, #1
 80100d0:	461a      	mov	r2, r3
 80100d2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80100d6:	9221      	str	r2, [sp, #132]	@ 0x84
 80100d8:	e00b      	b.n	80100f2 <_dtoa_r+0x25a>
 80100da:	2301      	movs	r3, #1
 80100dc:	e7f3      	b.n	80100c6 <_dtoa_r+0x22e>
 80100de:	2300      	movs	r3, #0
 80100e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80100e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80100e4:	18fb      	adds	r3, r7, r3
 80100e6:	9308      	str	r3, [sp, #32]
 80100e8:	3301      	adds	r3, #1
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	9307      	str	r3, [sp, #28]
 80100ee:	bfb8      	it	lt
 80100f0:	2301      	movlt	r3, #1
 80100f2:	2100      	movs	r1, #0
 80100f4:	2204      	movs	r2, #4
 80100f6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80100fa:	f102 0514 	add.w	r5, r2, #20
 80100fe:	429d      	cmp	r5, r3
 8010100:	d91f      	bls.n	8010142 <_dtoa_r+0x2aa>
 8010102:	6041      	str	r1, [r0, #4]
 8010104:	4658      	mov	r0, fp
 8010106:	f000 fcd7 	bl	8010ab8 <_Balloc>
 801010a:	4682      	mov	sl, r0
 801010c:	2800      	cmp	r0, #0
 801010e:	d139      	bne.n	8010184 <_dtoa_r+0x2ec>
 8010110:	4602      	mov	r2, r0
 8010112:	f240 11af 	movw	r1, #431	@ 0x1af
 8010116:	4b1a      	ldr	r3, [pc, #104]	@ (8010180 <_dtoa_r+0x2e8>)
 8010118:	e6d2      	b.n	800fec0 <_dtoa_r+0x28>
 801011a:	2301      	movs	r3, #1
 801011c:	e7e0      	b.n	80100e0 <_dtoa_r+0x248>
 801011e:	2401      	movs	r4, #1
 8010120:	2300      	movs	r3, #0
 8010122:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010124:	9320      	str	r3, [sp, #128]	@ 0x80
 8010126:	f04f 33ff 	mov.w	r3, #4294967295
 801012a:	2200      	movs	r2, #0
 801012c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8010130:	2312      	movs	r3, #18
 8010132:	e7d0      	b.n	80100d6 <_dtoa_r+0x23e>
 8010134:	2301      	movs	r3, #1
 8010136:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010138:	e7f5      	b.n	8010126 <_dtoa_r+0x28e>
 801013a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801013c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8010140:	e7d7      	b.n	80100f2 <_dtoa_r+0x25a>
 8010142:	3101      	adds	r1, #1
 8010144:	0052      	lsls	r2, r2, #1
 8010146:	e7d8      	b.n	80100fa <_dtoa_r+0x262>
 8010148:	636f4361 	.word	0x636f4361
 801014c:	3fd287a7 	.word	0x3fd287a7
 8010150:	8b60c8b3 	.word	0x8b60c8b3
 8010154:	3fc68a28 	.word	0x3fc68a28
 8010158:	509f79fb 	.word	0x509f79fb
 801015c:	3fd34413 	.word	0x3fd34413
 8010160:	08012d0b 	.word	0x08012d0b
 8010164:	08012d22 	.word	0x08012d22
 8010168:	7ff00000 	.word	0x7ff00000
 801016c:	08012d07 	.word	0x08012d07
 8010170:	08012cdb 	.word	0x08012cdb
 8010174:	08012cda 	.word	0x08012cda
 8010178:	3ff80000 	.word	0x3ff80000
 801017c:	08012e18 	.word	0x08012e18
 8010180:	08012d7a 	.word	0x08012d7a
 8010184:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010188:	6018      	str	r0, [r3, #0]
 801018a:	9b07      	ldr	r3, [sp, #28]
 801018c:	2b0e      	cmp	r3, #14
 801018e:	f200 80a4 	bhi.w	80102da <_dtoa_r+0x442>
 8010192:	2c00      	cmp	r4, #0
 8010194:	f000 80a1 	beq.w	80102da <_dtoa_r+0x442>
 8010198:	2f00      	cmp	r7, #0
 801019a:	dd33      	ble.n	8010204 <_dtoa_r+0x36c>
 801019c:	4b86      	ldr	r3, [pc, #536]	@ (80103b8 <_dtoa_r+0x520>)
 801019e:	f007 020f 	and.w	r2, r7, #15
 80101a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101a6:	05f8      	lsls	r0, r7, #23
 80101a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80101ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80101b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80101b4:	d516      	bpl.n	80101e4 <_dtoa_r+0x34c>
 80101b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80101ba:	4b80      	ldr	r3, [pc, #512]	@ (80103bc <_dtoa_r+0x524>)
 80101bc:	2603      	movs	r6, #3
 80101be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80101c2:	f7f0 fab3 	bl	800072c <__aeabi_ddiv>
 80101c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101ca:	f004 040f 	and.w	r4, r4, #15
 80101ce:	4d7b      	ldr	r5, [pc, #492]	@ (80103bc <_dtoa_r+0x524>)
 80101d0:	b954      	cbnz	r4, 80101e8 <_dtoa_r+0x350>
 80101d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101da:	f7f0 faa7 	bl	800072c <__aeabi_ddiv>
 80101de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101e2:	e028      	b.n	8010236 <_dtoa_r+0x39e>
 80101e4:	2602      	movs	r6, #2
 80101e6:	e7f2      	b.n	80101ce <_dtoa_r+0x336>
 80101e8:	07e1      	lsls	r1, r4, #31
 80101ea:	d508      	bpl.n	80101fe <_dtoa_r+0x366>
 80101ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80101f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80101f4:	f7f0 f970 	bl	80004d8 <__aeabi_dmul>
 80101f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80101fc:	3601      	adds	r6, #1
 80101fe:	1064      	asrs	r4, r4, #1
 8010200:	3508      	adds	r5, #8
 8010202:	e7e5      	b.n	80101d0 <_dtoa_r+0x338>
 8010204:	f000 80d2 	beq.w	80103ac <_dtoa_r+0x514>
 8010208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801020c:	427c      	negs	r4, r7
 801020e:	4b6a      	ldr	r3, [pc, #424]	@ (80103b8 <_dtoa_r+0x520>)
 8010210:	f004 020f 	and.w	r2, r4, #15
 8010214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801021c:	f7f0 f95c 	bl	80004d8 <__aeabi_dmul>
 8010220:	2602      	movs	r6, #2
 8010222:	2300      	movs	r3, #0
 8010224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010228:	4d64      	ldr	r5, [pc, #400]	@ (80103bc <_dtoa_r+0x524>)
 801022a:	1124      	asrs	r4, r4, #4
 801022c:	2c00      	cmp	r4, #0
 801022e:	f040 80b2 	bne.w	8010396 <_dtoa_r+0x4fe>
 8010232:	2b00      	cmp	r3, #0
 8010234:	d1d3      	bne.n	80101de <_dtoa_r+0x346>
 8010236:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801023a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801023c:	2b00      	cmp	r3, #0
 801023e:	f000 80b7 	beq.w	80103b0 <_dtoa_r+0x518>
 8010242:	2200      	movs	r2, #0
 8010244:	4620      	mov	r0, r4
 8010246:	4629      	mov	r1, r5
 8010248:	4b5d      	ldr	r3, [pc, #372]	@ (80103c0 <_dtoa_r+0x528>)
 801024a:	f7f0 fbb7 	bl	80009bc <__aeabi_dcmplt>
 801024e:	2800      	cmp	r0, #0
 8010250:	f000 80ae 	beq.w	80103b0 <_dtoa_r+0x518>
 8010254:	9b07      	ldr	r3, [sp, #28]
 8010256:	2b00      	cmp	r3, #0
 8010258:	f000 80aa 	beq.w	80103b0 <_dtoa_r+0x518>
 801025c:	9b08      	ldr	r3, [sp, #32]
 801025e:	2b00      	cmp	r3, #0
 8010260:	dd37      	ble.n	80102d2 <_dtoa_r+0x43a>
 8010262:	1e7b      	subs	r3, r7, #1
 8010264:	4620      	mov	r0, r4
 8010266:	9304      	str	r3, [sp, #16]
 8010268:	2200      	movs	r2, #0
 801026a:	4629      	mov	r1, r5
 801026c:	4b55      	ldr	r3, [pc, #340]	@ (80103c4 <_dtoa_r+0x52c>)
 801026e:	f7f0 f933 	bl	80004d8 <__aeabi_dmul>
 8010272:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010276:	9c08      	ldr	r4, [sp, #32]
 8010278:	3601      	adds	r6, #1
 801027a:	4630      	mov	r0, r6
 801027c:	f7f0 f8c2 	bl	8000404 <__aeabi_i2d>
 8010280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010284:	f7f0 f928 	bl	80004d8 <__aeabi_dmul>
 8010288:	2200      	movs	r2, #0
 801028a:	4b4f      	ldr	r3, [pc, #316]	@ (80103c8 <_dtoa_r+0x530>)
 801028c:	f7ef ff6e 	bl	800016c <__adddf3>
 8010290:	4605      	mov	r5, r0
 8010292:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010296:	2c00      	cmp	r4, #0
 8010298:	f040 809a 	bne.w	80103d0 <_dtoa_r+0x538>
 801029c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102a0:	2200      	movs	r2, #0
 80102a2:	4b4a      	ldr	r3, [pc, #296]	@ (80103cc <_dtoa_r+0x534>)
 80102a4:	f7ef ff60 	bl	8000168 <__aeabi_dsub>
 80102a8:	4602      	mov	r2, r0
 80102aa:	460b      	mov	r3, r1
 80102ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80102b0:	462a      	mov	r2, r5
 80102b2:	4633      	mov	r3, r6
 80102b4:	f7f0 fba0 	bl	80009f8 <__aeabi_dcmpgt>
 80102b8:	2800      	cmp	r0, #0
 80102ba:	f040 828e 	bne.w	80107da <_dtoa_r+0x942>
 80102be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102c2:	462a      	mov	r2, r5
 80102c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80102c8:	f7f0 fb78 	bl	80009bc <__aeabi_dcmplt>
 80102cc:	2800      	cmp	r0, #0
 80102ce:	f040 8127 	bne.w	8010520 <_dtoa_r+0x688>
 80102d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80102d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80102da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80102dc:	2b00      	cmp	r3, #0
 80102de:	f2c0 8163 	blt.w	80105a8 <_dtoa_r+0x710>
 80102e2:	2f0e      	cmp	r7, #14
 80102e4:	f300 8160 	bgt.w	80105a8 <_dtoa_r+0x710>
 80102e8:	4b33      	ldr	r3, [pc, #204]	@ (80103b8 <_dtoa_r+0x520>)
 80102ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80102ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80102f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80102f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	da03      	bge.n	8010304 <_dtoa_r+0x46c>
 80102fc:	9b07      	ldr	r3, [sp, #28]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f340 8100 	ble.w	8010504 <_dtoa_r+0x66c>
 8010304:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010308:	4656      	mov	r6, sl
 801030a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801030e:	4620      	mov	r0, r4
 8010310:	4629      	mov	r1, r5
 8010312:	f7f0 fa0b 	bl	800072c <__aeabi_ddiv>
 8010316:	f7f0 fb8f 	bl	8000a38 <__aeabi_d2iz>
 801031a:	4680      	mov	r8, r0
 801031c:	f7f0 f872 	bl	8000404 <__aeabi_i2d>
 8010320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010324:	f7f0 f8d8 	bl	80004d8 <__aeabi_dmul>
 8010328:	4602      	mov	r2, r0
 801032a:	460b      	mov	r3, r1
 801032c:	4620      	mov	r0, r4
 801032e:	4629      	mov	r1, r5
 8010330:	f7ef ff1a 	bl	8000168 <__aeabi_dsub>
 8010334:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010338:	9d07      	ldr	r5, [sp, #28]
 801033a:	f806 4b01 	strb.w	r4, [r6], #1
 801033e:	eba6 040a 	sub.w	r4, r6, sl
 8010342:	42a5      	cmp	r5, r4
 8010344:	4602      	mov	r2, r0
 8010346:	460b      	mov	r3, r1
 8010348:	f040 8116 	bne.w	8010578 <_dtoa_r+0x6e0>
 801034c:	f7ef ff0e 	bl	800016c <__adddf3>
 8010350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010354:	4604      	mov	r4, r0
 8010356:	460d      	mov	r5, r1
 8010358:	f7f0 fb4e 	bl	80009f8 <__aeabi_dcmpgt>
 801035c:	2800      	cmp	r0, #0
 801035e:	f040 80f8 	bne.w	8010552 <_dtoa_r+0x6ba>
 8010362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010366:	4620      	mov	r0, r4
 8010368:	4629      	mov	r1, r5
 801036a:	f7f0 fb1d 	bl	80009a8 <__aeabi_dcmpeq>
 801036e:	b118      	cbz	r0, 8010378 <_dtoa_r+0x4e0>
 8010370:	f018 0f01 	tst.w	r8, #1
 8010374:	f040 80ed 	bne.w	8010552 <_dtoa_r+0x6ba>
 8010378:	4649      	mov	r1, r9
 801037a:	4658      	mov	r0, fp
 801037c:	f000 fbdc 	bl	8010b38 <_Bfree>
 8010380:	2300      	movs	r3, #0
 8010382:	7033      	strb	r3, [r6, #0]
 8010384:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010386:	3701      	adds	r7, #1
 8010388:	601f      	str	r7, [r3, #0]
 801038a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801038c:	2b00      	cmp	r3, #0
 801038e:	f000 8320 	beq.w	80109d2 <_dtoa_r+0xb3a>
 8010392:	601e      	str	r6, [r3, #0]
 8010394:	e31d      	b.n	80109d2 <_dtoa_r+0xb3a>
 8010396:	07e2      	lsls	r2, r4, #31
 8010398:	d505      	bpl.n	80103a6 <_dtoa_r+0x50e>
 801039a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801039e:	f7f0 f89b 	bl	80004d8 <__aeabi_dmul>
 80103a2:	2301      	movs	r3, #1
 80103a4:	3601      	adds	r6, #1
 80103a6:	1064      	asrs	r4, r4, #1
 80103a8:	3508      	adds	r5, #8
 80103aa:	e73f      	b.n	801022c <_dtoa_r+0x394>
 80103ac:	2602      	movs	r6, #2
 80103ae:	e742      	b.n	8010236 <_dtoa_r+0x39e>
 80103b0:	9c07      	ldr	r4, [sp, #28]
 80103b2:	9704      	str	r7, [sp, #16]
 80103b4:	e761      	b.n	801027a <_dtoa_r+0x3e2>
 80103b6:	bf00      	nop
 80103b8:	08012e18 	.word	0x08012e18
 80103bc:	08012df0 	.word	0x08012df0
 80103c0:	3ff00000 	.word	0x3ff00000
 80103c4:	40240000 	.word	0x40240000
 80103c8:	401c0000 	.word	0x401c0000
 80103cc:	40140000 	.word	0x40140000
 80103d0:	4b70      	ldr	r3, [pc, #448]	@ (8010594 <_dtoa_r+0x6fc>)
 80103d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80103d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80103d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80103dc:	4454      	add	r4, sl
 80103de:	2900      	cmp	r1, #0
 80103e0:	d045      	beq.n	801046e <_dtoa_r+0x5d6>
 80103e2:	2000      	movs	r0, #0
 80103e4:	496c      	ldr	r1, [pc, #432]	@ (8010598 <_dtoa_r+0x700>)
 80103e6:	f7f0 f9a1 	bl	800072c <__aeabi_ddiv>
 80103ea:	4633      	mov	r3, r6
 80103ec:	462a      	mov	r2, r5
 80103ee:	f7ef febb 	bl	8000168 <__aeabi_dsub>
 80103f2:	4656      	mov	r6, sl
 80103f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80103f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103fc:	f7f0 fb1c 	bl	8000a38 <__aeabi_d2iz>
 8010400:	4605      	mov	r5, r0
 8010402:	f7ef ffff 	bl	8000404 <__aeabi_i2d>
 8010406:	4602      	mov	r2, r0
 8010408:	460b      	mov	r3, r1
 801040a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801040e:	f7ef feab 	bl	8000168 <__aeabi_dsub>
 8010412:	4602      	mov	r2, r0
 8010414:	460b      	mov	r3, r1
 8010416:	3530      	adds	r5, #48	@ 0x30
 8010418:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801041c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010420:	f806 5b01 	strb.w	r5, [r6], #1
 8010424:	f7f0 faca 	bl	80009bc <__aeabi_dcmplt>
 8010428:	2800      	cmp	r0, #0
 801042a:	d163      	bne.n	80104f4 <_dtoa_r+0x65c>
 801042c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010430:	2000      	movs	r0, #0
 8010432:	495a      	ldr	r1, [pc, #360]	@ (801059c <_dtoa_r+0x704>)
 8010434:	f7ef fe98 	bl	8000168 <__aeabi_dsub>
 8010438:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801043c:	f7f0 fabe 	bl	80009bc <__aeabi_dcmplt>
 8010440:	2800      	cmp	r0, #0
 8010442:	f040 8087 	bne.w	8010554 <_dtoa_r+0x6bc>
 8010446:	42a6      	cmp	r6, r4
 8010448:	f43f af43 	beq.w	80102d2 <_dtoa_r+0x43a>
 801044c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010450:	2200      	movs	r2, #0
 8010452:	4b53      	ldr	r3, [pc, #332]	@ (80105a0 <_dtoa_r+0x708>)
 8010454:	f7f0 f840 	bl	80004d8 <__aeabi_dmul>
 8010458:	2200      	movs	r2, #0
 801045a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801045e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010462:	4b4f      	ldr	r3, [pc, #316]	@ (80105a0 <_dtoa_r+0x708>)
 8010464:	f7f0 f838 	bl	80004d8 <__aeabi_dmul>
 8010468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801046c:	e7c4      	b.n	80103f8 <_dtoa_r+0x560>
 801046e:	4631      	mov	r1, r6
 8010470:	4628      	mov	r0, r5
 8010472:	f7f0 f831 	bl	80004d8 <__aeabi_dmul>
 8010476:	4656      	mov	r6, sl
 8010478:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801047c:	9413      	str	r4, [sp, #76]	@ 0x4c
 801047e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010482:	f7f0 fad9 	bl	8000a38 <__aeabi_d2iz>
 8010486:	4605      	mov	r5, r0
 8010488:	f7ef ffbc 	bl	8000404 <__aeabi_i2d>
 801048c:	4602      	mov	r2, r0
 801048e:	460b      	mov	r3, r1
 8010490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010494:	f7ef fe68 	bl	8000168 <__aeabi_dsub>
 8010498:	4602      	mov	r2, r0
 801049a:	460b      	mov	r3, r1
 801049c:	3530      	adds	r5, #48	@ 0x30
 801049e:	f806 5b01 	strb.w	r5, [r6], #1
 80104a2:	42a6      	cmp	r6, r4
 80104a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80104a8:	f04f 0200 	mov.w	r2, #0
 80104ac:	d124      	bne.n	80104f8 <_dtoa_r+0x660>
 80104ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80104b2:	4b39      	ldr	r3, [pc, #228]	@ (8010598 <_dtoa_r+0x700>)
 80104b4:	f7ef fe5a 	bl	800016c <__adddf3>
 80104b8:	4602      	mov	r2, r0
 80104ba:	460b      	mov	r3, r1
 80104bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104c0:	f7f0 fa9a 	bl	80009f8 <__aeabi_dcmpgt>
 80104c4:	2800      	cmp	r0, #0
 80104c6:	d145      	bne.n	8010554 <_dtoa_r+0x6bc>
 80104c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80104cc:	2000      	movs	r0, #0
 80104ce:	4932      	ldr	r1, [pc, #200]	@ (8010598 <_dtoa_r+0x700>)
 80104d0:	f7ef fe4a 	bl	8000168 <__aeabi_dsub>
 80104d4:	4602      	mov	r2, r0
 80104d6:	460b      	mov	r3, r1
 80104d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104dc:	f7f0 fa6e 	bl	80009bc <__aeabi_dcmplt>
 80104e0:	2800      	cmp	r0, #0
 80104e2:	f43f aef6 	beq.w	80102d2 <_dtoa_r+0x43a>
 80104e6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80104e8:	1e73      	subs	r3, r6, #1
 80104ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80104ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80104f0:	2b30      	cmp	r3, #48	@ 0x30
 80104f2:	d0f8      	beq.n	80104e6 <_dtoa_r+0x64e>
 80104f4:	9f04      	ldr	r7, [sp, #16]
 80104f6:	e73f      	b.n	8010378 <_dtoa_r+0x4e0>
 80104f8:	4b29      	ldr	r3, [pc, #164]	@ (80105a0 <_dtoa_r+0x708>)
 80104fa:	f7ef ffed 	bl	80004d8 <__aeabi_dmul>
 80104fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010502:	e7bc      	b.n	801047e <_dtoa_r+0x5e6>
 8010504:	d10c      	bne.n	8010520 <_dtoa_r+0x688>
 8010506:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801050a:	2200      	movs	r2, #0
 801050c:	4b25      	ldr	r3, [pc, #148]	@ (80105a4 <_dtoa_r+0x70c>)
 801050e:	f7ef ffe3 	bl	80004d8 <__aeabi_dmul>
 8010512:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010516:	f7f0 fa65 	bl	80009e4 <__aeabi_dcmpge>
 801051a:	2800      	cmp	r0, #0
 801051c:	f000 815b 	beq.w	80107d6 <_dtoa_r+0x93e>
 8010520:	2400      	movs	r4, #0
 8010522:	4625      	mov	r5, r4
 8010524:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010526:	4656      	mov	r6, sl
 8010528:	43db      	mvns	r3, r3
 801052a:	9304      	str	r3, [sp, #16]
 801052c:	2700      	movs	r7, #0
 801052e:	4621      	mov	r1, r4
 8010530:	4658      	mov	r0, fp
 8010532:	f000 fb01 	bl	8010b38 <_Bfree>
 8010536:	2d00      	cmp	r5, #0
 8010538:	d0dc      	beq.n	80104f4 <_dtoa_r+0x65c>
 801053a:	b12f      	cbz	r7, 8010548 <_dtoa_r+0x6b0>
 801053c:	42af      	cmp	r7, r5
 801053e:	d003      	beq.n	8010548 <_dtoa_r+0x6b0>
 8010540:	4639      	mov	r1, r7
 8010542:	4658      	mov	r0, fp
 8010544:	f000 faf8 	bl	8010b38 <_Bfree>
 8010548:	4629      	mov	r1, r5
 801054a:	4658      	mov	r0, fp
 801054c:	f000 faf4 	bl	8010b38 <_Bfree>
 8010550:	e7d0      	b.n	80104f4 <_dtoa_r+0x65c>
 8010552:	9704      	str	r7, [sp, #16]
 8010554:	4633      	mov	r3, r6
 8010556:	461e      	mov	r6, r3
 8010558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801055c:	2a39      	cmp	r2, #57	@ 0x39
 801055e:	d107      	bne.n	8010570 <_dtoa_r+0x6d8>
 8010560:	459a      	cmp	sl, r3
 8010562:	d1f8      	bne.n	8010556 <_dtoa_r+0x6be>
 8010564:	9a04      	ldr	r2, [sp, #16]
 8010566:	3201      	adds	r2, #1
 8010568:	9204      	str	r2, [sp, #16]
 801056a:	2230      	movs	r2, #48	@ 0x30
 801056c:	f88a 2000 	strb.w	r2, [sl]
 8010570:	781a      	ldrb	r2, [r3, #0]
 8010572:	3201      	adds	r2, #1
 8010574:	701a      	strb	r2, [r3, #0]
 8010576:	e7bd      	b.n	80104f4 <_dtoa_r+0x65c>
 8010578:	2200      	movs	r2, #0
 801057a:	4b09      	ldr	r3, [pc, #36]	@ (80105a0 <_dtoa_r+0x708>)
 801057c:	f7ef ffac 	bl	80004d8 <__aeabi_dmul>
 8010580:	2200      	movs	r2, #0
 8010582:	2300      	movs	r3, #0
 8010584:	4604      	mov	r4, r0
 8010586:	460d      	mov	r5, r1
 8010588:	f7f0 fa0e 	bl	80009a8 <__aeabi_dcmpeq>
 801058c:	2800      	cmp	r0, #0
 801058e:	f43f aebc 	beq.w	801030a <_dtoa_r+0x472>
 8010592:	e6f1      	b.n	8010378 <_dtoa_r+0x4e0>
 8010594:	08012e18 	.word	0x08012e18
 8010598:	3fe00000 	.word	0x3fe00000
 801059c:	3ff00000 	.word	0x3ff00000
 80105a0:	40240000 	.word	0x40240000
 80105a4:	40140000 	.word	0x40140000
 80105a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80105aa:	2a00      	cmp	r2, #0
 80105ac:	f000 80db 	beq.w	8010766 <_dtoa_r+0x8ce>
 80105b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80105b2:	2a01      	cmp	r2, #1
 80105b4:	f300 80bf 	bgt.w	8010736 <_dtoa_r+0x89e>
 80105b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80105ba:	2a00      	cmp	r2, #0
 80105bc:	f000 80b7 	beq.w	801072e <_dtoa_r+0x896>
 80105c0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80105c4:	4646      	mov	r6, r8
 80105c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80105c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105ca:	2101      	movs	r1, #1
 80105cc:	441a      	add	r2, r3
 80105ce:	4658      	mov	r0, fp
 80105d0:	4498      	add	r8, r3
 80105d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80105d4:	f000 fb64 	bl	8010ca0 <__i2b>
 80105d8:	4605      	mov	r5, r0
 80105da:	b15e      	cbz	r6, 80105f4 <_dtoa_r+0x75c>
 80105dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105de:	2b00      	cmp	r3, #0
 80105e0:	dd08      	ble.n	80105f4 <_dtoa_r+0x75c>
 80105e2:	42b3      	cmp	r3, r6
 80105e4:	bfa8      	it	ge
 80105e6:	4633      	movge	r3, r6
 80105e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105ea:	eba8 0803 	sub.w	r8, r8, r3
 80105ee:	1af6      	subs	r6, r6, r3
 80105f0:	1ad3      	subs	r3, r2, r3
 80105f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80105f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105f6:	b1f3      	cbz	r3, 8010636 <_dtoa_r+0x79e>
 80105f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	f000 80b7 	beq.w	801076e <_dtoa_r+0x8d6>
 8010600:	b18c      	cbz	r4, 8010626 <_dtoa_r+0x78e>
 8010602:	4629      	mov	r1, r5
 8010604:	4622      	mov	r2, r4
 8010606:	4658      	mov	r0, fp
 8010608:	f000 fc08 	bl	8010e1c <__pow5mult>
 801060c:	464a      	mov	r2, r9
 801060e:	4601      	mov	r1, r0
 8010610:	4605      	mov	r5, r0
 8010612:	4658      	mov	r0, fp
 8010614:	f000 fb5a 	bl	8010ccc <__multiply>
 8010618:	4649      	mov	r1, r9
 801061a:	9004      	str	r0, [sp, #16]
 801061c:	4658      	mov	r0, fp
 801061e:	f000 fa8b 	bl	8010b38 <_Bfree>
 8010622:	9b04      	ldr	r3, [sp, #16]
 8010624:	4699      	mov	r9, r3
 8010626:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010628:	1b1a      	subs	r2, r3, r4
 801062a:	d004      	beq.n	8010636 <_dtoa_r+0x79e>
 801062c:	4649      	mov	r1, r9
 801062e:	4658      	mov	r0, fp
 8010630:	f000 fbf4 	bl	8010e1c <__pow5mult>
 8010634:	4681      	mov	r9, r0
 8010636:	2101      	movs	r1, #1
 8010638:	4658      	mov	r0, fp
 801063a:	f000 fb31 	bl	8010ca0 <__i2b>
 801063e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010640:	4604      	mov	r4, r0
 8010642:	2b00      	cmp	r3, #0
 8010644:	f000 81c9 	beq.w	80109da <_dtoa_r+0xb42>
 8010648:	461a      	mov	r2, r3
 801064a:	4601      	mov	r1, r0
 801064c:	4658      	mov	r0, fp
 801064e:	f000 fbe5 	bl	8010e1c <__pow5mult>
 8010652:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010654:	4604      	mov	r4, r0
 8010656:	2b01      	cmp	r3, #1
 8010658:	f300 808f 	bgt.w	801077a <_dtoa_r+0x8e2>
 801065c:	9b02      	ldr	r3, [sp, #8]
 801065e:	2b00      	cmp	r3, #0
 8010660:	f040 8087 	bne.w	8010772 <_dtoa_r+0x8da>
 8010664:	9b03      	ldr	r3, [sp, #12]
 8010666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801066a:	2b00      	cmp	r3, #0
 801066c:	f040 8083 	bne.w	8010776 <_dtoa_r+0x8de>
 8010670:	9b03      	ldr	r3, [sp, #12]
 8010672:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010676:	0d1b      	lsrs	r3, r3, #20
 8010678:	051b      	lsls	r3, r3, #20
 801067a:	b12b      	cbz	r3, 8010688 <_dtoa_r+0x7f0>
 801067c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801067e:	f108 0801 	add.w	r8, r8, #1
 8010682:	3301      	adds	r3, #1
 8010684:	9309      	str	r3, [sp, #36]	@ 0x24
 8010686:	2301      	movs	r3, #1
 8010688:	930a      	str	r3, [sp, #40]	@ 0x28
 801068a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801068c:	2b00      	cmp	r3, #0
 801068e:	f000 81aa 	beq.w	80109e6 <_dtoa_r+0xb4e>
 8010692:	6923      	ldr	r3, [r4, #16]
 8010694:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010698:	6918      	ldr	r0, [r3, #16]
 801069a:	f000 fab5 	bl	8010c08 <__hi0bits>
 801069e:	f1c0 0020 	rsb	r0, r0, #32
 80106a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106a4:	4418      	add	r0, r3
 80106a6:	f010 001f 	ands.w	r0, r0, #31
 80106aa:	d071      	beq.n	8010790 <_dtoa_r+0x8f8>
 80106ac:	f1c0 0320 	rsb	r3, r0, #32
 80106b0:	2b04      	cmp	r3, #4
 80106b2:	dd65      	ble.n	8010780 <_dtoa_r+0x8e8>
 80106b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106b6:	f1c0 001c 	rsb	r0, r0, #28
 80106ba:	4403      	add	r3, r0
 80106bc:	4480      	add	r8, r0
 80106be:	4406      	add	r6, r0
 80106c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80106c2:	f1b8 0f00 	cmp.w	r8, #0
 80106c6:	dd05      	ble.n	80106d4 <_dtoa_r+0x83c>
 80106c8:	4649      	mov	r1, r9
 80106ca:	4642      	mov	r2, r8
 80106cc:	4658      	mov	r0, fp
 80106ce:	f000 fbff 	bl	8010ed0 <__lshift>
 80106d2:	4681      	mov	r9, r0
 80106d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	dd05      	ble.n	80106e6 <_dtoa_r+0x84e>
 80106da:	4621      	mov	r1, r4
 80106dc:	461a      	mov	r2, r3
 80106de:	4658      	mov	r0, fp
 80106e0:	f000 fbf6 	bl	8010ed0 <__lshift>
 80106e4:	4604      	mov	r4, r0
 80106e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d053      	beq.n	8010794 <_dtoa_r+0x8fc>
 80106ec:	4621      	mov	r1, r4
 80106ee:	4648      	mov	r0, r9
 80106f0:	f000 fc5a 	bl	8010fa8 <__mcmp>
 80106f4:	2800      	cmp	r0, #0
 80106f6:	da4d      	bge.n	8010794 <_dtoa_r+0x8fc>
 80106f8:	1e7b      	subs	r3, r7, #1
 80106fa:	4649      	mov	r1, r9
 80106fc:	9304      	str	r3, [sp, #16]
 80106fe:	220a      	movs	r2, #10
 8010700:	2300      	movs	r3, #0
 8010702:	4658      	mov	r0, fp
 8010704:	f000 fa3a 	bl	8010b7c <__multadd>
 8010708:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801070a:	4681      	mov	r9, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	f000 816c 	beq.w	80109ea <_dtoa_r+0xb52>
 8010712:	2300      	movs	r3, #0
 8010714:	4629      	mov	r1, r5
 8010716:	220a      	movs	r2, #10
 8010718:	4658      	mov	r0, fp
 801071a:	f000 fa2f 	bl	8010b7c <__multadd>
 801071e:	9b08      	ldr	r3, [sp, #32]
 8010720:	4605      	mov	r5, r0
 8010722:	2b00      	cmp	r3, #0
 8010724:	dc61      	bgt.n	80107ea <_dtoa_r+0x952>
 8010726:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010728:	2b02      	cmp	r3, #2
 801072a:	dc3b      	bgt.n	80107a4 <_dtoa_r+0x90c>
 801072c:	e05d      	b.n	80107ea <_dtoa_r+0x952>
 801072e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010730:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010734:	e746      	b.n	80105c4 <_dtoa_r+0x72c>
 8010736:	9b07      	ldr	r3, [sp, #28]
 8010738:	1e5c      	subs	r4, r3, #1
 801073a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801073c:	42a3      	cmp	r3, r4
 801073e:	bfbf      	itttt	lt
 8010740:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010742:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8010744:	1ae3      	sublt	r3, r4, r3
 8010746:	18d2      	addlt	r2, r2, r3
 8010748:	bfa8      	it	ge
 801074a:	1b1c      	subge	r4, r3, r4
 801074c:	9b07      	ldr	r3, [sp, #28]
 801074e:	bfbe      	ittt	lt
 8010750:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010752:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8010754:	2400      	movlt	r4, #0
 8010756:	2b00      	cmp	r3, #0
 8010758:	bfb5      	itete	lt
 801075a:	eba8 0603 	sublt.w	r6, r8, r3
 801075e:	4646      	movge	r6, r8
 8010760:	2300      	movlt	r3, #0
 8010762:	9b07      	ldrge	r3, [sp, #28]
 8010764:	e730      	b.n	80105c8 <_dtoa_r+0x730>
 8010766:	4646      	mov	r6, r8
 8010768:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801076a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801076c:	e735      	b.n	80105da <_dtoa_r+0x742>
 801076e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010770:	e75c      	b.n	801062c <_dtoa_r+0x794>
 8010772:	2300      	movs	r3, #0
 8010774:	e788      	b.n	8010688 <_dtoa_r+0x7f0>
 8010776:	9b02      	ldr	r3, [sp, #8]
 8010778:	e786      	b.n	8010688 <_dtoa_r+0x7f0>
 801077a:	2300      	movs	r3, #0
 801077c:	930a      	str	r3, [sp, #40]	@ 0x28
 801077e:	e788      	b.n	8010692 <_dtoa_r+0x7fa>
 8010780:	d09f      	beq.n	80106c2 <_dtoa_r+0x82a>
 8010782:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010784:	331c      	adds	r3, #28
 8010786:	441a      	add	r2, r3
 8010788:	4498      	add	r8, r3
 801078a:	441e      	add	r6, r3
 801078c:	9209      	str	r2, [sp, #36]	@ 0x24
 801078e:	e798      	b.n	80106c2 <_dtoa_r+0x82a>
 8010790:	4603      	mov	r3, r0
 8010792:	e7f6      	b.n	8010782 <_dtoa_r+0x8ea>
 8010794:	9b07      	ldr	r3, [sp, #28]
 8010796:	9704      	str	r7, [sp, #16]
 8010798:	2b00      	cmp	r3, #0
 801079a:	dc20      	bgt.n	80107de <_dtoa_r+0x946>
 801079c:	9308      	str	r3, [sp, #32]
 801079e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80107a0:	2b02      	cmp	r3, #2
 80107a2:	dd1e      	ble.n	80107e2 <_dtoa_r+0x94a>
 80107a4:	9b08      	ldr	r3, [sp, #32]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	f47f aebc 	bne.w	8010524 <_dtoa_r+0x68c>
 80107ac:	4621      	mov	r1, r4
 80107ae:	2205      	movs	r2, #5
 80107b0:	4658      	mov	r0, fp
 80107b2:	f000 f9e3 	bl	8010b7c <__multadd>
 80107b6:	4601      	mov	r1, r0
 80107b8:	4604      	mov	r4, r0
 80107ba:	4648      	mov	r0, r9
 80107bc:	f000 fbf4 	bl	8010fa8 <__mcmp>
 80107c0:	2800      	cmp	r0, #0
 80107c2:	f77f aeaf 	ble.w	8010524 <_dtoa_r+0x68c>
 80107c6:	2331      	movs	r3, #49	@ 0x31
 80107c8:	4656      	mov	r6, sl
 80107ca:	f806 3b01 	strb.w	r3, [r6], #1
 80107ce:	9b04      	ldr	r3, [sp, #16]
 80107d0:	3301      	adds	r3, #1
 80107d2:	9304      	str	r3, [sp, #16]
 80107d4:	e6aa      	b.n	801052c <_dtoa_r+0x694>
 80107d6:	9c07      	ldr	r4, [sp, #28]
 80107d8:	9704      	str	r7, [sp, #16]
 80107da:	4625      	mov	r5, r4
 80107dc:	e7f3      	b.n	80107c6 <_dtoa_r+0x92e>
 80107de:	9b07      	ldr	r3, [sp, #28]
 80107e0:	9308      	str	r3, [sp, #32]
 80107e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	f000 8104 	beq.w	80109f2 <_dtoa_r+0xb5a>
 80107ea:	2e00      	cmp	r6, #0
 80107ec:	dd05      	ble.n	80107fa <_dtoa_r+0x962>
 80107ee:	4629      	mov	r1, r5
 80107f0:	4632      	mov	r2, r6
 80107f2:	4658      	mov	r0, fp
 80107f4:	f000 fb6c 	bl	8010ed0 <__lshift>
 80107f8:	4605      	mov	r5, r0
 80107fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d05a      	beq.n	80108b6 <_dtoa_r+0xa1e>
 8010800:	4658      	mov	r0, fp
 8010802:	6869      	ldr	r1, [r5, #4]
 8010804:	f000 f958 	bl	8010ab8 <_Balloc>
 8010808:	4606      	mov	r6, r0
 801080a:	b928      	cbnz	r0, 8010818 <_dtoa_r+0x980>
 801080c:	4602      	mov	r2, r0
 801080e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010812:	4b83      	ldr	r3, [pc, #524]	@ (8010a20 <_dtoa_r+0xb88>)
 8010814:	f7ff bb54 	b.w	800fec0 <_dtoa_r+0x28>
 8010818:	692a      	ldr	r2, [r5, #16]
 801081a:	f105 010c 	add.w	r1, r5, #12
 801081e:	3202      	adds	r2, #2
 8010820:	0092      	lsls	r2, r2, #2
 8010822:	300c      	adds	r0, #12
 8010824:	f000 fee2 	bl	80115ec <memcpy>
 8010828:	2201      	movs	r2, #1
 801082a:	4631      	mov	r1, r6
 801082c:	4658      	mov	r0, fp
 801082e:	f000 fb4f 	bl	8010ed0 <__lshift>
 8010832:	462f      	mov	r7, r5
 8010834:	4605      	mov	r5, r0
 8010836:	f10a 0301 	add.w	r3, sl, #1
 801083a:	9307      	str	r3, [sp, #28]
 801083c:	9b08      	ldr	r3, [sp, #32]
 801083e:	4453      	add	r3, sl
 8010840:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010842:	9b02      	ldr	r3, [sp, #8]
 8010844:	f003 0301 	and.w	r3, r3, #1
 8010848:	930a      	str	r3, [sp, #40]	@ 0x28
 801084a:	9b07      	ldr	r3, [sp, #28]
 801084c:	4621      	mov	r1, r4
 801084e:	3b01      	subs	r3, #1
 8010850:	4648      	mov	r0, r9
 8010852:	9302      	str	r3, [sp, #8]
 8010854:	f7ff fa97 	bl	800fd86 <quorem>
 8010858:	4639      	mov	r1, r7
 801085a:	9008      	str	r0, [sp, #32]
 801085c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010860:	4648      	mov	r0, r9
 8010862:	f000 fba1 	bl	8010fa8 <__mcmp>
 8010866:	462a      	mov	r2, r5
 8010868:	9009      	str	r0, [sp, #36]	@ 0x24
 801086a:	4621      	mov	r1, r4
 801086c:	4658      	mov	r0, fp
 801086e:	f000 fbb7 	bl	8010fe0 <__mdiff>
 8010872:	68c2      	ldr	r2, [r0, #12]
 8010874:	4606      	mov	r6, r0
 8010876:	bb02      	cbnz	r2, 80108ba <_dtoa_r+0xa22>
 8010878:	4601      	mov	r1, r0
 801087a:	4648      	mov	r0, r9
 801087c:	f000 fb94 	bl	8010fa8 <__mcmp>
 8010880:	4602      	mov	r2, r0
 8010882:	4631      	mov	r1, r6
 8010884:	4658      	mov	r0, fp
 8010886:	920c      	str	r2, [sp, #48]	@ 0x30
 8010888:	f000 f956 	bl	8010b38 <_Bfree>
 801088c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801088e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010890:	9e07      	ldr	r6, [sp, #28]
 8010892:	ea43 0102 	orr.w	r1, r3, r2
 8010896:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010898:	4319      	orrs	r1, r3
 801089a:	d110      	bne.n	80108be <_dtoa_r+0xa26>
 801089c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80108a0:	d029      	beq.n	80108f6 <_dtoa_r+0xa5e>
 80108a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	dd02      	ble.n	80108ae <_dtoa_r+0xa16>
 80108a8:	9b08      	ldr	r3, [sp, #32]
 80108aa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80108ae:	9b02      	ldr	r3, [sp, #8]
 80108b0:	f883 8000 	strb.w	r8, [r3]
 80108b4:	e63b      	b.n	801052e <_dtoa_r+0x696>
 80108b6:	4628      	mov	r0, r5
 80108b8:	e7bb      	b.n	8010832 <_dtoa_r+0x99a>
 80108ba:	2201      	movs	r2, #1
 80108bc:	e7e1      	b.n	8010882 <_dtoa_r+0x9ea>
 80108be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	db04      	blt.n	80108ce <_dtoa_r+0xa36>
 80108c4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80108c6:	430b      	orrs	r3, r1
 80108c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80108ca:	430b      	orrs	r3, r1
 80108cc:	d120      	bne.n	8010910 <_dtoa_r+0xa78>
 80108ce:	2a00      	cmp	r2, #0
 80108d0:	dded      	ble.n	80108ae <_dtoa_r+0xa16>
 80108d2:	4649      	mov	r1, r9
 80108d4:	2201      	movs	r2, #1
 80108d6:	4658      	mov	r0, fp
 80108d8:	f000 fafa 	bl	8010ed0 <__lshift>
 80108dc:	4621      	mov	r1, r4
 80108de:	4681      	mov	r9, r0
 80108e0:	f000 fb62 	bl	8010fa8 <__mcmp>
 80108e4:	2800      	cmp	r0, #0
 80108e6:	dc03      	bgt.n	80108f0 <_dtoa_r+0xa58>
 80108e8:	d1e1      	bne.n	80108ae <_dtoa_r+0xa16>
 80108ea:	f018 0f01 	tst.w	r8, #1
 80108ee:	d0de      	beq.n	80108ae <_dtoa_r+0xa16>
 80108f0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80108f4:	d1d8      	bne.n	80108a8 <_dtoa_r+0xa10>
 80108f6:	2339      	movs	r3, #57	@ 0x39
 80108f8:	9a02      	ldr	r2, [sp, #8]
 80108fa:	7013      	strb	r3, [r2, #0]
 80108fc:	4633      	mov	r3, r6
 80108fe:	461e      	mov	r6, r3
 8010900:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010904:	3b01      	subs	r3, #1
 8010906:	2a39      	cmp	r2, #57	@ 0x39
 8010908:	d052      	beq.n	80109b0 <_dtoa_r+0xb18>
 801090a:	3201      	adds	r2, #1
 801090c:	701a      	strb	r2, [r3, #0]
 801090e:	e60e      	b.n	801052e <_dtoa_r+0x696>
 8010910:	2a00      	cmp	r2, #0
 8010912:	dd07      	ble.n	8010924 <_dtoa_r+0xa8c>
 8010914:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010918:	d0ed      	beq.n	80108f6 <_dtoa_r+0xa5e>
 801091a:	9a02      	ldr	r2, [sp, #8]
 801091c:	f108 0301 	add.w	r3, r8, #1
 8010920:	7013      	strb	r3, [r2, #0]
 8010922:	e604      	b.n	801052e <_dtoa_r+0x696>
 8010924:	9b07      	ldr	r3, [sp, #28]
 8010926:	9a07      	ldr	r2, [sp, #28]
 8010928:	f803 8c01 	strb.w	r8, [r3, #-1]
 801092c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801092e:	4293      	cmp	r3, r2
 8010930:	d028      	beq.n	8010984 <_dtoa_r+0xaec>
 8010932:	4649      	mov	r1, r9
 8010934:	2300      	movs	r3, #0
 8010936:	220a      	movs	r2, #10
 8010938:	4658      	mov	r0, fp
 801093a:	f000 f91f 	bl	8010b7c <__multadd>
 801093e:	42af      	cmp	r7, r5
 8010940:	4681      	mov	r9, r0
 8010942:	f04f 0300 	mov.w	r3, #0
 8010946:	f04f 020a 	mov.w	r2, #10
 801094a:	4639      	mov	r1, r7
 801094c:	4658      	mov	r0, fp
 801094e:	d107      	bne.n	8010960 <_dtoa_r+0xac8>
 8010950:	f000 f914 	bl	8010b7c <__multadd>
 8010954:	4607      	mov	r7, r0
 8010956:	4605      	mov	r5, r0
 8010958:	9b07      	ldr	r3, [sp, #28]
 801095a:	3301      	adds	r3, #1
 801095c:	9307      	str	r3, [sp, #28]
 801095e:	e774      	b.n	801084a <_dtoa_r+0x9b2>
 8010960:	f000 f90c 	bl	8010b7c <__multadd>
 8010964:	4629      	mov	r1, r5
 8010966:	4607      	mov	r7, r0
 8010968:	2300      	movs	r3, #0
 801096a:	220a      	movs	r2, #10
 801096c:	4658      	mov	r0, fp
 801096e:	f000 f905 	bl	8010b7c <__multadd>
 8010972:	4605      	mov	r5, r0
 8010974:	e7f0      	b.n	8010958 <_dtoa_r+0xac0>
 8010976:	9b08      	ldr	r3, [sp, #32]
 8010978:	2700      	movs	r7, #0
 801097a:	2b00      	cmp	r3, #0
 801097c:	bfcc      	ite	gt
 801097e:	461e      	movgt	r6, r3
 8010980:	2601      	movle	r6, #1
 8010982:	4456      	add	r6, sl
 8010984:	4649      	mov	r1, r9
 8010986:	2201      	movs	r2, #1
 8010988:	4658      	mov	r0, fp
 801098a:	f000 faa1 	bl	8010ed0 <__lshift>
 801098e:	4621      	mov	r1, r4
 8010990:	4681      	mov	r9, r0
 8010992:	f000 fb09 	bl	8010fa8 <__mcmp>
 8010996:	2800      	cmp	r0, #0
 8010998:	dcb0      	bgt.n	80108fc <_dtoa_r+0xa64>
 801099a:	d102      	bne.n	80109a2 <_dtoa_r+0xb0a>
 801099c:	f018 0f01 	tst.w	r8, #1
 80109a0:	d1ac      	bne.n	80108fc <_dtoa_r+0xa64>
 80109a2:	4633      	mov	r3, r6
 80109a4:	461e      	mov	r6, r3
 80109a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109aa:	2a30      	cmp	r2, #48	@ 0x30
 80109ac:	d0fa      	beq.n	80109a4 <_dtoa_r+0xb0c>
 80109ae:	e5be      	b.n	801052e <_dtoa_r+0x696>
 80109b0:	459a      	cmp	sl, r3
 80109b2:	d1a4      	bne.n	80108fe <_dtoa_r+0xa66>
 80109b4:	9b04      	ldr	r3, [sp, #16]
 80109b6:	3301      	adds	r3, #1
 80109b8:	9304      	str	r3, [sp, #16]
 80109ba:	2331      	movs	r3, #49	@ 0x31
 80109bc:	f88a 3000 	strb.w	r3, [sl]
 80109c0:	e5b5      	b.n	801052e <_dtoa_r+0x696>
 80109c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80109c4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010a24 <_dtoa_r+0xb8c>
 80109c8:	b11b      	cbz	r3, 80109d2 <_dtoa_r+0xb3a>
 80109ca:	f10a 0308 	add.w	r3, sl, #8
 80109ce:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80109d0:	6013      	str	r3, [r2, #0]
 80109d2:	4650      	mov	r0, sl
 80109d4:	b017      	add	sp, #92	@ 0x5c
 80109d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80109dc:	2b01      	cmp	r3, #1
 80109de:	f77f ae3d 	ble.w	801065c <_dtoa_r+0x7c4>
 80109e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80109e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80109e6:	2001      	movs	r0, #1
 80109e8:	e65b      	b.n	80106a2 <_dtoa_r+0x80a>
 80109ea:	9b08      	ldr	r3, [sp, #32]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	f77f aed6 	ble.w	801079e <_dtoa_r+0x906>
 80109f2:	4656      	mov	r6, sl
 80109f4:	4621      	mov	r1, r4
 80109f6:	4648      	mov	r0, r9
 80109f8:	f7ff f9c5 	bl	800fd86 <quorem>
 80109fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010a00:	9b08      	ldr	r3, [sp, #32]
 8010a02:	f806 8b01 	strb.w	r8, [r6], #1
 8010a06:	eba6 020a 	sub.w	r2, r6, sl
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	ddb3      	ble.n	8010976 <_dtoa_r+0xade>
 8010a0e:	4649      	mov	r1, r9
 8010a10:	2300      	movs	r3, #0
 8010a12:	220a      	movs	r2, #10
 8010a14:	4658      	mov	r0, fp
 8010a16:	f000 f8b1 	bl	8010b7c <__multadd>
 8010a1a:	4681      	mov	r9, r0
 8010a1c:	e7ea      	b.n	80109f4 <_dtoa_r+0xb5c>
 8010a1e:	bf00      	nop
 8010a20:	08012d7a 	.word	0x08012d7a
 8010a24:	08012cfe 	.word	0x08012cfe

08010a28 <_free_r>:
 8010a28:	b538      	push	{r3, r4, r5, lr}
 8010a2a:	4605      	mov	r5, r0
 8010a2c:	2900      	cmp	r1, #0
 8010a2e:	d040      	beq.n	8010ab2 <_free_r+0x8a>
 8010a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a34:	1f0c      	subs	r4, r1, #4
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	bfb8      	it	lt
 8010a3a:	18e4      	addlt	r4, r4, r3
 8010a3c:	f7fe fb64 	bl	800f108 <__malloc_lock>
 8010a40:	4a1c      	ldr	r2, [pc, #112]	@ (8010ab4 <_free_r+0x8c>)
 8010a42:	6813      	ldr	r3, [r2, #0]
 8010a44:	b933      	cbnz	r3, 8010a54 <_free_r+0x2c>
 8010a46:	6063      	str	r3, [r4, #4]
 8010a48:	6014      	str	r4, [r2, #0]
 8010a4a:	4628      	mov	r0, r5
 8010a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a50:	f7fe bb60 	b.w	800f114 <__malloc_unlock>
 8010a54:	42a3      	cmp	r3, r4
 8010a56:	d908      	bls.n	8010a6a <_free_r+0x42>
 8010a58:	6820      	ldr	r0, [r4, #0]
 8010a5a:	1821      	adds	r1, r4, r0
 8010a5c:	428b      	cmp	r3, r1
 8010a5e:	bf01      	itttt	eq
 8010a60:	6819      	ldreq	r1, [r3, #0]
 8010a62:	685b      	ldreq	r3, [r3, #4]
 8010a64:	1809      	addeq	r1, r1, r0
 8010a66:	6021      	streq	r1, [r4, #0]
 8010a68:	e7ed      	b.n	8010a46 <_free_r+0x1e>
 8010a6a:	461a      	mov	r2, r3
 8010a6c:	685b      	ldr	r3, [r3, #4]
 8010a6e:	b10b      	cbz	r3, 8010a74 <_free_r+0x4c>
 8010a70:	42a3      	cmp	r3, r4
 8010a72:	d9fa      	bls.n	8010a6a <_free_r+0x42>
 8010a74:	6811      	ldr	r1, [r2, #0]
 8010a76:	1850      	adds	r0, r2, r1
 8010a78:	42a0      	cmp	r0, r4
 8010a7a:	d10b      	bne.n	8010a94 <_free_r+0x6c>
 8010a7c:	6820      	ldr	r0, [r4, #0]
 8010a7e:	4401      	add	r1, r0
 8010a80:	1850      	adds	r0, r2, r1
 8010a82:	4283      	cmp	r3, r0
 8010a84:	6011      	str	r1, [r2, #0]
 8010a86:	d1e0      	bne.n	8010a4a <_free_r+0x22>
 8010a88:	6818      	ldr	r0, [r3, #0]
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	4408      	add	r0, r1
 8010a8e:	6010      	str	r0, [r2, #0]
 8010a90:	6053      	str	r3, [r2, #4]
 8010a92:	e7da      	b.n	8010a4a <_free_r+0x22>
 8010a94:	d902      	bls.n	8010a9c <_free_r+0x74>
 8010a96:	230c      	movs	r3, #12
 8010a98:	602b      	str	r3, [r5, #0]
 8010a9a:	e7d6      	b.n	8010a4a <_free_r+0x22>
 8010a9c:	6820      	ldr	r0, [r4, #0]
 8010a9e:	1821      	adds	r1, r4, r0
 8010aa0:	428b      	cmp	r3, r1
 8010aa2:	bf01      	itttt	eq
 8010aa4:	6819      	ldreq	r1, [r3, #0]
 8010aa6:	685b      	ldreq	r3, [r3, #4]
 8010aa8:	1809      	addeq	r1, r1, r0
 8010aaa:	6021      	streq	r1, [r4, #0]
 8010aac:	6063      	str	r3, [r4, #4]
 8010aae:	6054      	str	r4, [r2, #4]
 8010ab0:	e7cb      	b.n	8010a4a <_free_r+0x22>
 8010ab2:	bd38      	pop	{r3, r4, r5, pc}
 8010ab4:	20002a70 	.word	0x20002a70

08010ab8 <_Balloc>:
 8010ab8:	b570      	push	{r4, r5, r6, lr}
 8010aba:	69c6      	ldr	r6, [r0, #28]
 8010abc:	4604      	mov	r4, r0
 8010abe:	460d      	mov	r5, r1
 8010ac0:	b976      	cbnz	r6, 8010ae0 <_Balloc+0x28>
 8010ac2:	2010      	movs	r0, #16
 8010ac4:	f7fe fa76 	bl	800efb4 <malloc>
 8010ac8:	4602      	mov	r2, r0
 8010aca:	61e0      	str	r0, [r4, #28]
 8010acc:	b920      	cbnz	r0, 8010ad8 <_Balloc+0x20>
 8010ace:	216b      	movs	r1, #107	@ 0x6b
 8010ad0:	4b17      	ldr	r3, [pc, #92]	@ (8010b30 <_Balloc+0x78>)
 8010ad2:	4818      	ldr	r0, [pc, #96]	@ (8010b34 <_Balloc+0x7c>)
 8010ad4:	f000 fd98 	bl	8011608 <__assert_func>
 8010ad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010adc:	6006      	str	r6, [r0, #0]
 8010ade:	60c6      	str	r6, [r0, #12]
 8010ae0:	69e6      	ldr	r6, [r4, #28]
 8010ae2:	68f3      	ldr	r3, [r6, #12]
 8010ae4:	b183      	cbz	r3, 8010b08 <_Balloc+0x50>
 8010ae6:	69e3      	ldr	r3, [r4, #28]
 8010ae8:	68db      	ldr	r3, [r3, #12]
 8010aea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010aee:	b9b8      	cbnz	r0, 8010b20 <_Balloc+0x68>
 8010af0:	2101      	movs	r1, #1
 8010af2:	fa01 f605 	lsl.w	r6, r1, r5
 8010af6:	1d72      	adds	r2, r6, #5
 8010af8:	4620      	mov	r0, r4
 8010afa:	0092      	lsls	r2, r2, #2
 8010afc:	f000 fda2 	bl	8011644 <_calloc_r>
 8010b00:	b160      	cbz	r0, 8010b1c <_Balloc+0x64>
 8010b02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010b06:	e00e      	b.n	8010b26 <_Balloc+0x6e>
 8010b08:	2221      	movs	r2, #33	@ 0x21
 8010b0a:	2104      	movs	r1, #4
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	f000 fd99 	bl	8011644 <_calloc_r>
 8010b12:	69e3      	ldr	r3, [r4, #28]
 8010b14:	60f0      	str	r0, [r6, #12]
 8010b16:	68db      	ldr	r3, [r3, #12]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d1e4      	bne.n	8010ae6 <_Balloc+0x2e>
 8010b1c:	2000      	movs	r0, #0
 8010b1e:	bd70      	pop	{r4, r5, r6, pc}
 8010b20:	6802      	ldr	r2, [r0, #0]
 8010b22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010b26:	2300      	movs	r3, #0
 8010b28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010b2c:	e7f7      	b.n	8010b1e <_Balloc+0x66>
 8010b2e:	bf00      	nop
 8010b30:	08012d0b 	.word	0x08012d0b
 8010b34:	08012d8b 	.word	0x08012d8b

08010b38 <_Bfree>:
 8010b38:	b570      	push	{r4, r5, r6, lr}
 8010b3a:	69c6      	ldr	r6, [r0, #28]
 8010b3c:	4605      	mov	r5, r0
 8010b3e:	460c      	mov	r4, r1
 8010b40:	b976      	cbnz	r6, 8010b60 <_Bfree+0x28>
 8010b42:	2010      	movs	r0, #16
 8010b44:	f7fe fa36 	bl	800efb4 <malloc>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	61e8      	str	r0, [r5, #28]
 8010b4c:	b920      	cbnz	r0, 8010b58 <_Bfree+0x20>
 8010b4e:	218f      	movs	r1, #143	@ 0x8f
 8010b50:	4b08      	ldr	r3, [pc, #32]	@ (8010b74 <_Bfree+0x3c>)
 8010b52:	4809      	ldr	r0, [pc, #36]	@ (8010b78 <_Bfree+0x40>)
 8010b54:	f000 fd58 	bl	8011608 <__assert_func>
 8010b58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b5c:	6006      	str	r6, [r0, #0]
 8010b5e:	60c6      	str	r6, [r0, #12]
 8010b60:	b13c      	cbz	r4, 8010b72 <_Bfree+0x3a>
 8010b62:	69eb      	ldr	r3, [r5, #28]
 8010b64:	6862      	ldr	r2, [r4, #4]
 8010b66:	68db      	ldr	r3, [r3, #12]
 8010b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b6c:	6021      	str	r1, [r4, #0]
 8010b6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010b72:	bd70      	pop	{r4, r5, r6, pc}
 8010b74:	08012d0b 	.word	0x08012d0b
 8010b78:	08012d8b 	.word	0x08012d8b

08010b7c <__multadd>:
 8010b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b80:	4607      	mov	r7, r0
 8010b82:	460c      	mov	r4, r1
 8010b84:	461e      	mov	r6, r3
 8010b86:	2000      	movs	r0, #0
 8010b88:	690d      	ldr	r5, [r1, #16]
 8010b8a:	f101 0c14 	add.w	ip, r1, #20
 8010b8e:	f8dc 3000 	ldr.w	r3, [ip]
 8010b92:	3001      	adds	r0, #1
 8010b94:	b299      	uxth	r1, r3
 8010b96:	fb02 6101 	mla	r1, r2, r1, r6
 8010b9a:	0c1e      	lsrs	r6, r3, #16
 8010b9c:	0c0b      	lsrs	r3, r1, #16
 8010b9e:	fb02 3306 	mla	r3, r2, r6, r3
 8010ba2:	b289      	uxth	r1, r1
 8010ba4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010ba8:	4285      	cmp	r5, r0
 8010baa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010bae:	f84c 1b04 	str.w	r1, [ip], #4
 8010bb2:	dcec      	bgt.n	8010b8e <__multadd+0x12>
 8010bb4:	b30e      	cbz	r6, 8010bfa <__multadd+0x7e>
 8010bb6:	68a3      	ldr	r3, [r4, #8]
 8010bb8:	42ab      	cmp	r3, r5
 8010bba:	dc19      	bgt.n	8010bf0 <__multadd+0x74>
 8010bbc:	6861      	ldr	r1, [r4, #4]
 8010bbe:	4638      	mov	r0, r7
 8010bc0:	3101      	adds	r1, #1
 8010bc2:	f7ff ff79 	bl	8010ab8 <_Balloc>
 8010bc6:	4680      	mov	r8, r0
 8010bc8:	b928      	cbnz	r0, 8010bd6 <__multadd+0x5a>
 8010bca:	4602      	mov	r2, r0
 8010bcc:	21ba      	movs	r1, #186	@ 0xba
 8010bce:	4b0c      	ldr	r3, [pc, #48]	@ (8010c00 <__multadd+0x84>)
 8010bd0:	480c      	ldr	r0, [pc, #48]	@ (8010c04 <__multadd+0x88>)
 8010bd2:	f000 fd19 	bl	8011608 <__assert_func>
 8010bd6:	6922      	ldr	r2, [r4, #16]
 8010bd8:	f104 010c 	add.w	r1, r4, #12
 8010bdc:	3202      	adds	r2, #2
 8010bde:	0092      	lsls	r2, r2, #2
 8010be0:	300c      	adds	r0, #12
 8010be2:	f000 fd03 	bl	80115ec <memcpy>
 8010be6:	4621      	mov	r1, r4
 8010be8:	4638      	mov	r0, r7
 8010bea:	f7ff ffa5 	bl	8010b38 <_Bfree>
 8010bee:	4644      	mov	r4, r8
 8010bf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010bf4:	3501      	adds	r5, #1
 8010bf6:	615e      	str	r6, [r3, #20]
 8010bf8:	6125      	str	r5, [r4, #16]
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c00:	08012d7a 	.word	0x08012d7a
 8010c04:	08012d8b 	.word	0x08012d8b

08010c08 <__hi0bits>:
 8010c08:	4603      	mov	r3, r0
 8010c0a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010c0e:	bf3a      	itte	cc
 8010c10:	0403      	lslcc	r3, r0, #16
 8010c12:	2010      	movcc	r0, #16
 8010c14:	2000      	movcs	r0, #0
 8010c16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010c1a:	bf3c      	itt	cc
 8010c1c:	021b      	lslcc	r3, r3, #8
 8010c1e:	3008      	addcc	r0, #8
 8010c20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010c24:	bf3c      	itt	cc
 8010c26:	011b      	lslcc	r3, r3, #4
 8010c28:	3004      	addcc	r0, #4
 8010c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c2e:	bf3c      	itt	cc
 8010c30:	009b      	lslcc	r3, r3, #2
 8010c32:	3002      	addcc	r0, #2
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	db05      	blt.n	8010c44 <__hi0bits+0x3c>
 8010c38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010c3c:	f100 0001 	add.w	r0, r0, #1
 8010c40:	bf08      	it	eq
 8010c42:	2020      	moveq	r0, #32
 8010c44:	4770      	bx	lr

08010c46 <__lo0bits>:
 8010c46:	6803      	ldr	r3, [r0, #0]
 8010c48:	4602      	mov	r2, r0
 8010c4a:	f013 0007 	ands.w	r0, r3, #7
 8010c4e:	d00b      	beq.n	8010c68 <__lo0bits+0x22>
 8010c50:	07d9      	lsls	r1, r3, #31
 8010c52:	d421      	bmi.n	8010c98 <__lo0bits+0x52>
 8010c54:	0798      	lsls	r0, r3, #30
 8010c56:	bf49      	itett	mi
 8010c58:	085b      	lsrmi	r3, r3, #1
 8010c5a:	089b      	lsrpl	r3, r3, #2
 8010c5c:	2001      	movmi	r0, #1
 8010c5e:	6013      	strmi	r3, [r2, #0]
 8010c60:	bf5c      	itt	pl
 8010c62:	2002      	movpl	r0, #2
 8010c64:	6013      	strpl	r3, [r2, #0]
 8010c66:	4770      	bx	lr
 8010c68:	b299      	uxth	r1, r3
 8010c6a:	b909      	cbnz	r1, 8010c70 <__lo0bits+0x2a>
 8010c6c:	2010      	movs	r0, #16
 8010c6e:	0c1b      	lsrs	r3, r3, #16
 8010c70:	b2d9      	uxtb	r1, r3
 8010c72:	b909      	cbnz	r1, 8010c78 <__lo0bits+0x32>
 8010c74:	3008      	adds	r0, #8
 8010c76:	0a1b      	lsrs	r3, r3, #8
 8010c78:	0719      	lsls	r1, r3, #28
 8010c7a:	bf04      	itt	eq
 8010c7c:	091b      	lsreq	r3, r3, #4
 8010c7e:	3004      	addeq	r0, #4
 8010c80:	0799      	lsls	r1, r3, #30
 8010c82:	bf04      	itt	eq
 8010c84:	089b      	lsreq	r3, r3, #2
 8010c86:	3002      	addeq	r0, #2
 8010c88:	07d9      	lsls	r1, r3, #31
 8010c8a:	d403      	bmi.n	8010c94 <__lo0bits+0x4e>
 8010c8c:	085b      	lsrs	r3, r3, #1
 8010c8e:	f100 0001 	add.w	r0, r0, #1
 8010c92:	d003      	beq.n	8010c9c <__lo0bits+0x56>
 8010c94:	6013      	str	r3, [r2, #0]
 8010c96:	4770      	bx	lr
 8010c98:	2000      	movs	r0, #0
 8010c9a:	4770      	bx	lr
 8010c9c:	2020      	movs	r0, #32
 8010c9e:	4770      	bx	lr

08010ca0 <__i2b>:
 8010ca0:	b510      	push	{r4, lr}
 8010ca2:	460c      	mov	r4, r1
 8010ca4:	2101      	movs	r1, #1
 8010ca6:	f7ff ff07 	bl	8010ab8 <_Balloc>
 8010caa:	4602      	mov	r2, r0
 8010cac:	b928      	cbnz	r0, 8010cba <__i2b+0x1a>
 8010cae:	f240 1145 	movw	r1, #325	@ 0x145
 8010cb2:	4b04      	ldr	r3, [pc, #16]	@ (8010cc4 <__i2b+0x24>)
 8010cb4:	4804      	ldr	r0, [pc, #16]	@ (8010cc8 <__i2b+0x28>)
 8010cb6:	f000 fca7 	bl	8011608 <__assert_func>
 8010cba:	2301      	movs	r3, #1
 8010cbc:	6144      	str	r4, [r0, #20]
 8010cbe:	6103      	str	r3, [r0, #16]
 8010cc0:	bd10      	pop	{r4, pc}
 8010cc2:	bf00      	nop
 8010cc4:	08012d7a 	.word	0x08012d7a
 8010cc8:	08012d8b 	.word	0x08012d8b

08010ccc <__multiply>:
 8010ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cd0:	4614      	mov	r4, r2
 8010cd2:	690a      	ldr	r2, [r1, #16]
 8010cd4:	6923      	ldr	r3, [r4, #16]
 8010cd6:	460f      	mov	r7, r1
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	bfa2      	ittt	ge
 8010cdc:	4623      	movge	r3, r4
 8010cde:	460c      	movge	r4, r1
 8010ce0:	461f      	movge	r7, r3
 8010ce2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010ce6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010cea:	68a3      	ldr	r3, [r4, #8]
 8010cec:	6861      	ldr	r1, [r4, #4]
 8010cee:	eb0a 0609 	add.w	r6, sl, r9
 8010cf2:	42b3      	cmp	r3, r6
 8010cf4:	b085      	sub	sp, #20
 8010cf6:	bfb8      	it	lt
 8010cf8:	3101      	addlt	r1, #1
 8010cfa:	f7ff fedd 	bl	8010ab8 <_Balloc>
 8010cfe:	b930      	cbnz	r0, 8010d0e <__multiply+0x42>
 8010d00:	4602      	mov	r2, r0
 8010d02:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010d06:	4b43      	ldr	r3, [pc, #268]	@ (8010e14 <__multiply+0x148>)
 8010d08:	4843      	ldr	r0, [pc, #268]	@ (8010e18 <__multiply+0x14c>)
 8010d0a:	f000 fc7d 	bl	8011608 <__assert_func>
 8010d0e:	f100 0514 	add.w	r5, r0, #20
 8010d12:	462b      	mov	r3, r5
 8010d14:	2200      	movs	r2, #0
 8010d16:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010d1a:	4543      	cmp	r3, r8
 8010d1c:	d321      	bcc.n	8010d62 <__multiply+0x96>
 8010d1e:	f107 0114 	add.w	r1, r7, #20
 8010d22:	f104 0214 	add.w	r2, r4, #20
 8010d26:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010d2a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010d2e:	9302      	str	r3, [sp, #8]
 8010d30:	1b13      	subs	r3, r2, r4
 8010d32:	3b15      	subs	r3, #21
 8010d34:	f023 0303 	bic.w	r3, r3, #3
 8010d38:	3304      	adds	r3, #4
 8010d3a:	f104 0715 	add.w	r7, r4, #21
 8010d3e:	42ba      	cmp	r2, r7
 8010d40:	bf38      	it	cc
 8010d42:	2304      	movcc	r3, #4
 8010d44:	9301      	str	r3, [sp, #4]
 8010d46:	9b02      	ldr	r3, [sp, #8]
 8010d48:	9103      	str	r1, [sp, #12]
 8010d4a:	428b      	cmp	r3, r1
 8010d4c:	d80c      	bhi.n	8010d68 <__multiply+0x9c>
 8010d4e:	2e00      	cmp	r6, #0
 8010d50:	dd03      	ble.n	8010d5a <__multiply+0x8e>
 8010d52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d05a      	beq.n	8010e10 <__multiply+0x144>
 8010d5a:	6106      	str	r6, [r0, #16]
 8010d5c:	b005      	add	sp, #20
 8010d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d62:	f843 2b04 	str.w	r2, [r3], #4
 8010d66:	e7d8      	b.n	8010d1a <__multiply+0x4e>
 8010d68:	f8b1 a000 	ldrh.w	sl, [r1]
 8010d6c:	f1ba 0f00 	cmp.w	sl, #0
 8010d70:	d023      	beq.n	8010dba <__multiply+0xee>
 8010d72:	46a9      	mov	r9, r5
 8010d74:	f04f 0c00 	mov.w	ip, #0
 8010d78:	f104 0e14 	add.w	lr, r4, #20
 8010d7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010d80:	f8d9 3000 	ldr.w	r3, [r9]
 8010d84:	fa1f fb87 	uxth.w	fp, r7
 8010d88:	b29b      	uxth	r3, r3
 8010d8a:	fb0a 330b 	mla	r3, sl, fp, r3
 8010d8e:	4463      	add	r3, ip
 8010d90:	f8d9 c000 	ldr.w	ip, [r9]
 8010d94:	0c3f      	lsrs	r7, r7, #16
 8010d96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8010d9a:	fb0a c707 	mla	r7, sl, r7, ip
 8010d9e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010da2:	b29b      	uxth	r3, r3
 8010da4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010da8:	4572      	cmp	r2, lr
 8010daa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010dae:	f849 3b04 	str.w	r3, [r9], #4
 8010db2:	d8e3      	bhi.n	8010d7c <__multiply+0xb0>
 8010db4:	9b01      	ldr	r3, [sp, #4]
 8010db6:	f845 c003 	str.w	ip, [r5, r3]
 8010dba:	9b03      	ldr	r3, [sp, #12]
 8010dbc:	3104      	adds	r1, #4
 8010dbe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010dc2:	f1b9 0f00 	cmp.w	r9, #0
 8010dc6:	d021      	beq.n	8010e0c <__multiply+0x140>
 8010dc8:	46ae      	mov	lr, r5
 8010dca:	f04f 0a00 	mov.w	sl, #0
 8010dce:	682b      	ldr	r3, [r5, #0]
 8010dd0:	f104 0c14 	add.w	ip, r4, #20
 8010dd4:	f8bc b000 	ldrh.w	fp, [ip]
 8010dd8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	fb09 770b 	mla	r7, r9, fp, r7
 8010de2:	4457      	add	r7, sl
 8010de4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010de8:	f84e 3b04 	str.w	r3, [lr], #4
 8010dec:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010df0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010df4:	f8be 3000 	ldrh.w	r3, [lr]
 8010df8:	4562      	cmp	r2, ip
 8010dfa:	fb09 330a 	mla	r3, r9, sl, r3
 8010dfe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010e02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010e06:	d8e5      	bhi.n	8010dd4 <__multiply+0x108>
 8010e08:	9f01      	ldr	r7, [sp, #4]
 8010e0a:	51eb      	str	r3, [r5, r7]
 8010e0c:	3504      	adds	r5, #4
 8010e0e:	e79a      	b.n	8010d46 <__multiply+0x7a>
 8010e10:	3e01      	subs	r6, #1
 8010e12:	e79c      	b.n	8010d4e <__multiply+0x82>
 8010e14:	08012d7a 	.word	0x08012d7a
 8010e18:	08012d8b 	.word	0x08012d8b

08010e1c <__pow5mult>:
 8010e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e20:	4615      	mov	r5, r2
 8010e22:	f012 0203 	ands.w	r2, r2, #3
 8010e26:	4607      	mov	r7, r0
 8010e28:	460e      	mov	r6, r1
 8010e2a:	d007      	beq.n	8010e3c <__pow5mult+0x20>
 8010e2c:	4c25      	ldr	r4, [pc, #148]	@ (8010ec4 <__pow5mult+0xa8>)
 8010e2e:	3a01      	subs	r2, #1
 8010e30:	2300      	movs	r3, #0
 8010e32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e36:	f7ff fea1 	bl	8010b7c <__multadd>
 8010e3a:	4606      	mov	r6, r0
 8010e3c:	10ad      	asrs	r5, r5, #2
 8010e3e:	d03d      	beq.n	8010ebc <__pow5mult+0xa0>
 8010e40:	69fc      	ldr	r4, [r7, #28]
 8010e42:	b97c      	cbnz	r4, 8010e64 <__pow5mult+0x48>
 8010e44:	2010      	movs	r0, #16
 8010e46:	f7fe f8b5 	bl	800efb4 <malloc>
 8010e4a:	4602      	mov	r2, r0
 8010e4c:	61f8      	str	r0, [r7, #28]
 8010e4e:	b928      	cbnz	r0, 8010e5c <__pow5mult+0x40>
 8010e50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010e54:	4b1c      	ldr	r3, [pc, #112]	@ (8010ec8 <__pow5mult+0xac>)
 8010e56:	481d      	ldr	r0, [pc, #116]	@ (8010ecc <__pow5mult+0xb0>)
 8010e58:	f000 fbd6 	bl	8011608 <__assert_func>
 8010e5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e60:	6004      	str	r4, [r0, #0]
 8010e62:	60c4      	str	r4, [r0, #12]
 8010e64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010e68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e6c:	b94c      	cbnz	r4, 8010e82 <__pow5mult+0x66>
 8010e6e:	f240 2171 	movw	r1, #625	@ 0x271
 8010e72:	4638      	mov	r0, r7
 8010e74:	f7ff ff14 	bl	8010ca0 <__i2b>
 8010e78:	2300      	movs	r3, #0
 8010e7a:	4604      	mov	r4, r0
 8010e7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e80:	6003      	str	r3, [r0, #0]
 8010e82:	f04f 0900 	mov.w	r9, #0
 8010e86:	07eb      	lsls	r3, r5, #31
 8010e88:	d50a      	bpl.n	8010ea0 <__pow5mult+0x84>
 8010e8a:	4631      	mov	r1, r6
 8010e8c:	4622      	mov	r2, r4
 8010e8e:	4638      	mov	r0, r7
 8010e90:	f7ff ff1c 	bl	8010ccc <__multiply>
 8010e94:	4680      	mov	r8, r0
 8010e96:	4631      	mov	r1, r6
 8010e98:	4638      	mov	r0, r7
 8010e9a:	f7ff fe4d 	bl	8010b38 <_Bfree>
 8010e9e:	4646      	mov	r6, r8
 8010ea0:	106d      	asrs	r5, r5, #1
 8010ea2:	d00b      	beq.n	8010ebc <__pow5mult+0xa0>
 8010ea4:	6820      	ldr	r0, [r4, #0]
 8010ea6:	b938      	cbnz	r0, 8010eb8 <__pow5mult+0x9c>
 8010ea8:	4622      	mov	r2, r4
 8010eaa:	4621      	mov	r1, r4
 8010eac:	4638      	mov	r0, r7
 8010eae:	f7ff ff0d 	bl	8010ccc <__multiply>
 8010eb2:	6020      	str	r0, [r4, #0]
 8010eb4:	f8c0 9000 	str.w	r9, [r0]
 8010eb8:	4604      	mov	r4, r0
 8010eba:	e7e4      	b.n	8010e86 <__pow5mult+0x6a>
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ec2:	bf00      	nop
 8010ec4:	08012de4 	.word	0x08012de4
 8010ec8:	08012d0b 	.word	0x08012d0b
 8010ecc:	08012d8b 	.word	0x08012d8b

08010ed0 <__lshift>:
 8010ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ed4:	460c      	mov	r4, r1
 8010ed6:	4607      	mov	r7, r0
 8010ed8:	4691      	mov	r9, r2
 8010eda:	6923      	ldr	r3, [r4, #16]
 8010edc:	6849      	ldr	r1, [r1, #4]
 8010ede:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010ee2:	68a3      	ldr	r3, [r4, #8]
 8010ee4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010ee8:	f108 0601 	add.w	r6, r8, #1
 8010eec:	42b3      	cmp	r3, r6
 8010eee:	db0b      	blt.n	8010f08 <__lshift+0x38>
 8010ef0:	4638      	mov	r0, r7
 8010ef2:	f7ff fde1 	bl	8010ab8 <_Balloc>
 8010ef6:	4605      	mov	r5, r0
 8010ef8:	b948      	cbnz	r0, 8010f0e <__lshift+0x3e>
 8010efa:	4602      	mov	r2, r0
 8010efc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010f00:	4b27      	ldr	r3, [pc, #156]	@ (8010fa0 <__lshift+0xd0>)
 8010f02:	4828      	ldr	r0, [pc, #160]	@ (8010fa4 <__lshift+0xd4>)
 8010f04:	f000 fb80 	bl	8011608 <__assert_func>
 8010f08:	3101      	adds	r1, #1
 8010f0a:	005b      	lsls	r3, r3, #1
 8010f0c:	e7ee      	b.n	8010eec <__lshift+0x1c>
 8010f0e:	2300      	movs	r3, #0
 8010f10:	f100 0114 	add.w	r1, r0, #20
 8010f14:	f100 0210 	add.w	r2, r0, #16
 8010f18:	4618      	mov	r0, r3
 8010f1a:	4553      	cmp	r3, sl
 8010f1c:	db33      	blt.n	8010f86 <__lshift+0xb6>
 8010f1e:	6920      	ldr	r0, [r4, #16]
 8010f20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010f24:	f104 0314 	add.w	r3, r4, #20
 8010f28:	f019 091f 	ands.w	r9, r9, #31
 8010f2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010f30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010f34:	d02b      	beq.n	8010f8e <__lshift+0xbe>
 8010f36:	468a      	mov	sl, r1
 8010f38:	2200      	movs	r2, #0
 8010f3a:	f1c9 0e20 	rsb	lr, r9, #32
 8010f3e:	6818      	ldr	r0, [r3, #0]
 8010f40:	fa00 f009 	lsl.w	r0, r0, r9
 8010f44:	4310      	orrs	r0, r2
 8010f46:	f84a 0b04 	str.w	r0, [sl], #4
 8010f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f4e:	459c      	cmp	ip, r3
 8010f50:	fa22 f20e 	lsr.w	r2, r2, lr
 8010f54:	d8f3      	bhi.n	8010f3e <__lshift+0x6e>
 8010f56:	ebac 0304 	sub.w	r3, ip, r4
 8010f5a:	3b15      	subs	r3, #21
 8010f5c:	f023 0303 	bic.w	r3, r3, #3
 8010f60:	3304      	adds	r3, #4
 8010f62:	f104 0015 	add.w	r0, r4, #21
 8010f66:	4584      	cmp	ip, r0
 8010f68:	bf38      	it	cc
 8010f6a:	2304      	movcc	r3, #4
 8010f6c:	50ca      	str	r2, [r1, r3]
 8010f6e:	b10a      	cbz	r2, 8010f74 <__lshift+0xa4>
 8010f70:	f108 0602 	add.w	r6, r8, #2
 8010f74:	3e01      	subs	r6, #1
 8010f76:	4638      	mov	r0, r7
 8010f78:	4621      	mov	r1, r4
 8010f7a:	612e      	str	r6, [r5, #16]
 8010f7c:	f7ff fddc 	bl	8010b38 <_Bfree>
 8010f80:	4628      	mov	r0, r5
 8010f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f86:	f842 0f04 	str.w	r0, [r2, #4]!
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	e7c5      	b.n	8010f1a <__lshift+0x4a>
 8010f8e:	3904      	subs	r1, #4
 8010f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f94:	459c      	cmp	ip, r3
 8010f96:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f9a:	d8f9      	bhi.n	8010f90 <__lshift+0xc0>
 8010f9c:	e7ea      	b.n	8010f74 <__lshift+0xa4>
 8010f9e:	bf00      	nop
 8010fa0:	08012d7a 	.word	0x08012d7a
 8010fa4:	08012d8b 	.word	0x08012d8b

08010fa8 <__mcmp>:
 8010fa8:	4603      	mov	r3, r0
 8010faa:	690a      	ldr	r2, [r1, #16]
 8010fac:	6900      	ldr	r0, [r0, #16]
 8010fae:	b530      	push	{r4, r5, lr}
 8010fb0:	1a80      	subs	r0, r0, r2
 8010fb2:	d10e      	bne.n	8010fd2 <__mcmp+0x2a>
 8010fb4:	3314      	adds	r3, #20
 8010fb6:	3114      	adds	r1, #20
 8010fb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010fbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010fc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010fc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010fc8:	4295      	cmp	r5, r2
 8010fca:	d003      	beq.n	8010fd4 <__mcmp+0x2c>
 8010fcc:	d205      	bcs.n	8010fda <__mcmp+0x32>
 8010fce:	f04f 30ff 	mov.w	r0, #4294967295
 8010fd2:	bd30      	pop	{r4, r5, pc}
 8010fd4:	42a3      	cmp	r3, r4
 8010fd6:	d3f3      	bcc.n	8010fc0 <__mcmp+0x18>
 8010fd8:	e7fb      	b.n	8010fd2 <__mcmp+0x2a>
 8010fda:	2001      	movs	r0, #1
 8010fdc:	e7f9      	b.n	8010fd2 <__mcmp+0x2a>
	...

08010fe0 <__mdiff>:
 8010fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe4:	4689      	mov	r9, r1
 8010fe6:	4606      	mov	r6, r0
 8010fe8:	4611      	mov	r1, r2
 8010fea:	4648      	mov	r0, r9
 8010fec:	4614      	mov	r4, r2
 8010fee:	f7ff ffdb 	bl	8010fa8 <__mcmp>
 8010ff2:	1e05      	subs	r5, r0, #0
 8010ff4:	d112      	bne.n	801101c <__mdiff+0x3c>
 8010ff6:	4629      	mov	r1, r5
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	f7ff fd5d 	bl	8010ab8 <_Balloc>
 8010ffe:	4602      	mov	r2, r0
 8011000:	b928      	cbnz	r0, 801100e <__mdiff+0x2e>
 8011002:	f240 2137 	movw	r1, #567	@ 0x237
 8011006:	4b3e      	ldr	r3, [pc, #248]	@ (8011100 <__mdiff+0x120>)
 8011008:	483e      	ldr	r0, [pc, #248]	@ (8011104 <__mdiff+0x124>)
 801100a:	f000 fafd 	bl	8011608 <__assert_func>
 801100e:	2301      	movs	r3, #1
 8011010:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011014:	4610      	mov	r0, r2
 8011016:	b003      	add	sp, #12
 8011018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801101c:	bfbc      	itt	lt
 801101e:	464b      	movlt	r3, r9
 8011020:	46a1      	movlt	r9, r4
 8011022:	4630      	mov	r0, r6
 8011024:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011028:	bfba      	itte	lt
 801102a:	461c      	movlt	r4, r3
 801102c:	2501      	movlt	r5, #1
 801102e:	2500      	movge	r5, #0
 8011030:	f7ff fd42 	bl	8010ab8 <_Balloc>
 8011034:	4602      	mov	r2, r0
 8011036:	b918      	cbnz	r0, 8011040 <__mdiff+0x60>
 8011038:	f240 2145 	movw	r1, #581	@ 0x245
 801103c:	4b30      	ldr	r3, [pc, #192]	@ (8011100 <__mdiff+0x120>)
 801103e:	e7e3      	b.n	8011008 <__mdiff+0x28>
 8011040:	f100 0b14 	add.w	fp, r0, #20
 8011044:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011048:	f109 0310 	add.w	r3, r9, #16
 801104c:	60c5      	str	r5, [r0, #12]
 801104e:	f04f 0c00 	mov.w	ip, #0
 8011052:	f109 0514 	add.w	r5, r9, #20
 8011056:	46d9      	mov	r9, fp
 8011058:	6926      	ldr	r6, [r4, #16]
 801105a:	f104 0e14 	add.w	lr, r4, #20
 801105e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011062:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011066:	9301      	str	r3, [sp, #4]
 8011068:	9b01      	ldr	r3, [sp, #4]
 801106a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801106e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011072:	b281      	uxth	r1, r0
 8011074:	9301      	str	r3, [sp, #4]
 8011076:	fa1f f38a 	uxth.w	r3, sl
 801107a:	1a5b      	subs	r3, r3, r1
 801107c:	0c00      	lsrs	r0, r0, #16
 801107e:	4463      	add	r3, ip
 8011080:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011084:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011088:	b29b      	uxth	r3, r3
 801108a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801108e:	4576      	cmp	r6, lr
 8011090:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011094:	f849 3b04 	str.w	r3, [r9], #4
 8011098:	d8e6      	bhi.n	8011068 <__mdiff+0x88>
 801109a:	1b33      	subs	r3, r6, r4
 801109c:	3b15      	subs	r3, #21
 801109e:	f023 0303 	bic.w	r3, r3, #3
 80110a2:	3415      	adds	r4, #21
 80110a4:	3304      	adds	r3, #4
 80110a6:	42a6      	cmp	r6, r4
 80110a8:	bf38      	it	cc
 80110aa:	2304      	movcc	r3, #4
 80110ac:	441d      	add	r5, r3
 80110ae:	445b      	add	r3, fp
 80110b0:	461e      	mov	r6, r3
 80110b2:	462c      	mov	r4, r5
 80110b4:	4544      	cmp	r4, r8
 80110b6:	d30e      	bcc.n	80110d6 <__mdiff+0xf6>
 80110b8:	f108 0103 	add.w	r1, r8, #3
 80110bc:	1b49      	subs	r1, r1, r5
 80110be:	f021 0103 	bic.w	r1, r1, #3
 80110c2:	3d03      	subs	r5, #3
 80110c4:	45a8      	cmp	r8, r5
 80110c6:	bf38      	it	cc
 80110c8:	2100      	movcc	r1, #0
 80110ca:	440b      	add	r3, r1
 80110cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80110d0:	b199      	cbz	r1, 80110fa <__mdiff+0x11a>
 80110d2:	6117      	str	r7, [r2, #16]
 80110d4:	e79e      	b.n	8011014 <__mdiff+0x34>
 80110d6:	46e6      	mov	lr, ip
 80110d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80110dc:	fa1f fc81 	uxth.w	ip, r1
 80110e0:	44f4      	add	ip, lr
 80110e2:	0c08      	lsrs	r0, r1, #16
 80110e4:	4471      	add	r1, lr
 80110e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80110ea:	b289      	uxth	r1, r1
 80110ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80110f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80110f4:	f846 1b04 	str.w	r1, [r6], #4
 80110f8:	e7dc      	b.n	80110b4 <__mdiff+0xd4>
 80110fa:	3f01      	subs	r7, #1
 80110fc:	e7e6      	b.n	80110cc <__mdiff+0xec>
 80110fe:	bf00      	nop
 8011100:	08012d7a 	.word	0x08012d7a
 8011104:	08012d8b 	.word	0x08012d8b

08011108 <__d2b>:
 8011108:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 801110c:	2101      	movs	r1, #1
 801110e:	4690      	mov	r8, r2
 8011110:	4699      	mov	r9, r3
 8011112:	9e08      	ldr	r6, [sp, #32]
 8011114:	f7ff fcd0 	bl	8010ab8 <_Balloc>
 8011118:	4604      	mov	r4, r0
 801111a:	b930      	cbnz	r0, 801112a <__d2b+0x22>
 801111c:	4602      	mov	r2, r0
 801111e:	f240 310f 	movw	r1, #783	@ 0x30f
 8011122:	4b23      	ldr	r3, [pc, #140]	@ (80111b0 <__d2b+0xa8>)
 8011124:	4823      	ldr	r0, [pc, #140]	@ (80111b4 <__d2b+0xac>)
 8011126:	f000 fa6f 	bl	8011608 <__assert_func>
 801112a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801112e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011132:	b10d      	cbz	r5, 8011138 <__d2b+0x30>
 8011134:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011138:	9301      	str	r3, [sp, #4]
 801113a:	f1b8 0300 	subs.w	r3, r8, #0
 801113e:	d024      	beq.n	801118a <__d2b+0x82>
 8011140:	4668      	mov	r0, sp
 8011142:	9300      	str	r3, [sp, #0]
 8011144:	f7ff fd7f 	bl	8010c46 <__lo0bits>
 8011148:	e9dd 1200 	ldrd	r1, r2, [sp]
 801114c:	b1d8      	cbz	r0, 8011186 <__d2b+0x7e>
 801114e:	f1c0 0320 	rsb	r3, r0, #32
 8011152:	fa02 f303 	lsl.w	r3, r2, r3
 8011156:	430b      	orrs	r3, r1
 8011158:	40c2      	lsrs	r2, r0
 801115a:	6163      	str	r3, [r4, #20]
 801115c:	9201      	str	r2, [sp, #4]
 801115e:	9b01      	ldr	r3, [sp, #4]
 8011160:	2b00      	cmp	r3, #0
 8011162:	bf0c      	ite	eq
 8011164:	2201      	moveq	r2, #1
 8011166:	2202      	movne	r2, #2
 8011168:	61a3      	str	r3, [r4, #24]
 801116a:	6122      	str	r2, [r4, #16]
 801116c:	b1ad      	cbz	r5, 801119a <__d2b+0x92>
 801116e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011172:	4405      	add	r5, r0
 8011174:	6035      	str	r5, [r6, #0]
 8011176:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801117a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801117c:	6018      	str	r0, [r3, #0]
 801117e:	4620      	mov	r0, r4
 8011180:	b002      	add	sp, #8
 8011182:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8011186:	6161      	str	r1, [r4, #20]
 8011188:	e7e9      	b.n	801115e <__d2b+0x56>
 801118a:	a801      	add	r0, sp, #4
 801118c:	f7ff fd5b 	bl	8010c46 <__lo0bits>
 8011190:	9b01      	ldr	r3, [sp, #4]
 8011192:	2201      	movs	r2, #1
 8011194:	6163      	str	r3, [r4, #20]
 8011196:	3020      	adds	r0, #32
 8011198:	e7e7      	b.n	801116a <__d2b+0x62>
 801119a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801119e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80111a2:	6030      	str	r0, [r6, #0]
 80111a4:	6918      	ldr	r0, [r3, #16]
 80111a6:	f7ff fd2f 	bl	8010c08 <__hi0bits>
 80111aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80111ae:	e7e4      	b.n	801117a <__d2b+0x72>
 80111b0:	08012d7a 	.word	0x08012d7a
 80111b4:	08012d8b 	.word	0x08012d8b

080111b8 <__ssputs_r>:
 80111b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111bc:	461f      	mov	r7, r3
 80111be:	688e      	ldr	r6, [r1, #8]
 80111c0:	4682      	mov	sl, r0
 80111c2:	42be      	cmp	r6, r7
 80111c4:	460c      	mov	r4, r1
 80111c6:	4690      	mov	r8, r2
 80111c8:	680b      	ldr	r3, [r1, #0]
 80111ca:	d82d      	bhi.n	8011228 <__ssputs_r+0x70>
 80111cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80111d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80111d4:	d026      	beq.n	8011224 <__ssputs_r+0x6c>
 80111d6:	6965      	ldr	r5, [r4, #20]
 80111d8:	6909      	ldr	r1, [r1, #16]
 80111da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80111de:	eba3 0901 	sub.w	r9, r3, r1
 80111e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80111e6:	1c7b      	adds	r3, r7, #1
 80111e8:	444b      	add	r3, r9
 80111ea:	106d      	asrs	r5, r5, #1
 80111ec:	429d      	cmp	r5, r3
 80111ee:	bf38      	it	cc
 80111f0:	461d      	movcc	r5, r3
 80111f2:	0553      	lsls	r3, r2, #21
 80111f4:	d527      	bpl.n	8011246 <__ssputs_r+0x8e>
 80111f6:	4629      	mov	r1, r5
 80111f8:	f7fd ff06 	bl	800f008 <_malloc_r>
 80111fc:	4606      	mov	r6, r0
 80111fe:	b360      	cbz	r0, 801125a <__ssputs_r+0xa2>
 8011200:	464a      	mov	r2, r9
 8011202:	6921      	ldr	r1, [r4, #16]
 8011204:	f000 f9f2 	bl	80115ec <memcpy>
 8011208:	89a3      	ldrh	r3, [r4, #12]
 801120a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801120e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011212:	81a3      	strh	r3, [r4, #12]
 8011214:	6126      	str	r6, [r4, #16]
 8011216:	444e      	add	r6, r9
 8011218:	6026      	str	r6, [r4, #0]
 801121a:	463e      	mov	r6, r7
 801121c:	6165      	str	r5, [r4, #20]
 801121e:	eba5 0509 	sub.w	r5, r5, r9
 8011222:	60a5      	str	r5, [r4, #8]
 8011224:	42be      	cmp	r6, r7
 8011226:	d900      	bls.n	801122a <__ssputs_r+0x72>
 8011228:	463e      	mov	r6, r7
 801122a:	4632      	mov	r2, r6
 801122c:	4641      	mov	r1, r8
 801122e:	6820      	ldr	r0, [r4, #0]
 8011230:	f000 f9c2 	bl	80115b8 <memmove>
 8011234:	2000      	movs	r0, #0
 8011236:	68a3      	ldr	r3, [r4, #8]
 8011238:	1b9b      	subs	r3, r3, r6
 801123a:	60a3      	str	r3, [r4, #8]
 801123c:	6823      	ldr	r3, [r4, #0]
 801123e:	4433      	add	r3, r6
 8011240:	6023      	str	r3, [r4, #0]
 8011242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011246:	462a      	mov	r2, r5
 8011248:	f000 fa22 	bl	8011690 <_realloc_r>
 801124c:	4606      	mov	r6, r0
 801124e:	2800      	cmp	r0, #0
 8011250:	d1e0      	bne.n	8011214 <__ssputs_r+0x5c>
 8011252:	4650      	mov	r0, sl
 8011254:	6921      	ldr	r1, [r4, #16]
 8011256:	f7ff fbe7 	bl	8010a28 <_free_r>
 801125a:	230c      	movs	r3, #12
 801125c:	f8ca 3000 	str.w	r3, [sl]
 8011260:	89a3      	ldrh	r3, [r4, #12]
 8011262:	f04f 30ff 	mov.w	r0, #4294967295
 8011266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801126a:	81a3      	strh	r3, [r4, #12]
 801126c:	e7e9      	b.n	8011242 <__ssputs_r+0x8a>
	...

08011270 <_svfiprintf_r>:
 8011270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011274:	4698      	mov	r8, r3
 8011276:	898b      	ldrh	r3, [r1, #12]
 8011278:	4607      	mov	r7, r0
 801127a:	061b      	lsls	r3, r3, #24
 801127c:	460d      	mov	r5, r1
 801127e:	4614      	mov	r4, r2
 8011280:	b09d      	sub	sp, #116	@ 0x74
 8011282:	d510      	bpl.n	80112a6 <_svfiprintf_r+0x36>
 8011284:	690b      	ldr	r3, [r1, #16]
 8011286:	b973      	cbnz	r3, 80112a6 <_svfiprintf_r+0x36>
 8011288:	2140      	movs	r1, #64	@ 0x40
 801128a:	f7fd febd 	bl	800f008 <_malloc_r>
 801128e:	6028      	str	r0, [r5, #0]
 8011290:	6128      	str	r0, [r5, #16]
 8011292:	b930      	cbnz	r0, 80112a2 <_svfiprintf_r+0x32>
 8011294:	230c      	movs	r3, #12
 8011296:	603b      	str	r3, [r7, #0]
 8011298:	f04f 30ff 	mov.w	r0, #4294967295
 801129c:	b01d      	add	sp, #116	@ 0x74
 801129e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112a2:	2340      	movs	r3, #64	@ 0x40
 80112a4:	616b      	str	r3, [r5, #20]
 80112a6:	2300      	movs	r3, #0
 80112a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80112aa:	2320      	movs	r3, #32
 80112ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80112b0:	2330      	movs	r3, #48	@ 0x30
 80112b2:	f04f 0901 	mov.w	r9, #1
 80112b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80112ba:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8011454 <_svfiprintf_r+0x1e4>
 80112be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80112c2:	4623      	mov	r3, r4
 80112c4:	469a      	mov	sl, r3
 80112c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112ca:	b10a      	cbz	r2, 80112d0 <_svfiprintf_r+0x60>
 80112cc:	2a25      	cmp	r2, #37	@ 0x25
 80112ce:	d1f9      	bne.n	80112c4 <_svfiprintf_r+0x54>
 80112d0:	ebba 0b04 	subs.w	fp, sl, r4
 80112d4:	d00b      	beq.n	80112ee <_svfiprintf_r+0x7e>
 80112d6:	465b      	mov	r3, fp
 80112d8:	4622      	mov	r2, r4
 80112da:	4629      	mov	r1, r5
 80112dc:	4638      	mov	r0, r7
 80112de:	f7ff ff6b 	bl	80111b8 <__ssputs_r>
 80112e2:	3001      	adds	r0, #1
 80112e4:	f000 80a7 	beq.w	8011436 <_svfiprintf_r+0x1c6>
 80112e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80112ea:	445a      	add	r2, fp
 80112ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80112ee:	f89a 3000 	ldrb.w	r3, [sl]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	f000 809f 	beq.w	8011436 <_svfiprintf_r+0x1c6>
 80112f8:	2300      	movs	r3, #0
 80112fa:	f04f 32ff 	mov.w	r2, #4294967295
 80112fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011302:	f10a 0a01 	add.w	sl, sl, #1
 8011306:	9304      	str	r3, [sp, #16]
 8011308:	9307      	str	r3, [sp, #28]
 801130a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801130e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011310:	4654      	mov	r4, sl
 8011312:	2205      	movs	r2, #5
 8011314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011318:	484e      	ldr	r0, [pc, #312]	@ (8011454 <_svfiprintf_r+0x1e4>)
 801131a:	f7fe fd26 	bl	800fd6a <memchr>
 801131e:	9a04      	ldr	r2, [sp, #16]
 8011320:	b9d8      	cbnz	r0, 801135a <_svfiprintf_r+0xea>
 8011322:	06d0      	lsls	r0, r2, #27
 8011324:	bf44      	itt	mi
 8011326:	2320      	movmi	r3, #32
 8011328:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801132c:	0711      	lsls	r1, r2, #28
 801132e:	bf44      	itt	mi
 8011330:	232b      	movmi	r3, #43	@ 0x2b
 8011332:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011336:	f89a 3000 	ldrb.w	r3, [sl]
 801133a:	2b2a      	cmp	r3, #42	@ 0x2a
 801133c:	d015      	beq.n	801136a <_svfiprintf_r+0xfa>
 801133e:	4654      	mov	r4, sl
 8011340:	2000      	movs	r0, #0
 8011342:	f04f 0c0a 	mov.w	ip, #10
 8011346:	9a07      	ldr	r2, [sp, #28]
 8011348:	4621      	mov	r1, r4
 801134a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801134e:	3b30      	subs	r3, #48	@ 0x30
 8011350:	2b09      	cmp	r3, #9
 8011352:	d94b      	bls.n	80113ec <_svfiprintf_r+0x17c>
 8011354:	b1b0      	cbz	r0, 8011384 <_svfiprintf_r+0x114>
 8011356:	9207      	str	r2, [sp, #28]
 8011358:	e014      	b.n	8011384 <_svfiprintf_r+0x114>
 801135a:	eba0 0308 	sub.w	r3, r0, r8
 801135e:	fa09 f303 	lsl.w	r3, r9, r3
 8011362:	4313      	orrs	r3, r2
 8011364:	46a2      	mov	sl, r4
 8011366:	9304      	str	r3, [sp, #16]
 8011368:	e7d2      	b.n	8011310 <_svfiprintf_r+0xa0>
 801136a:	9b03      	ldr	r3, [sp, #12]
 801136c:	1d19      	adds	r1, r3, #4
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	9103      	str	r1, [sp, #12]
 8011372:	2b00      	cmp	r3, #0
 8011374:	bfbb      	ittet	lt
 8011376:	425b      	neglt	r3, r3
 8011378:	f042 0202 	orrlt.w	r2, r2, #2
 801137c:	9307      	strge	r3, [sp, #28]
 801137e:	9307      	strlt	r3, [sp, #28]
 8011380:	bfb8      	it	lt
 8011382:	9204      	strlt	r2, [sp, #16]
 8011384:	7823      	ldrb	r3, [r4, #0]
 8011386:	2b2e      	cmp	r3, #46	@ 0x2e
 8011388:	d10a      	bne.n	80113a0 <_svfiprintf_r+0x130>
 801138a:	7863      	ldrb	r3, [r4, #1]
 801138c:	2b2a      	cmp	r3, #42	@ 0x2a
 801138e:	d132      	bne.n	80113f6 <_svfiprintf_r+0x186>
 8011390:	9b03      	ldr	r3, [sp, #12]
 8011392:	3402      	adds	r4, #2
 8011394:	1d1a      	adds	r2, r3, #4
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	9203      	str	r2, [sp, #12]
 801139a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801139e:	9305      	str	r3, [sp, #20]
 80113a0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8011458 <_svfiprintf_r+0x1e8>
 80113a4:	2203      	movs	r2, #3
 80113a6:	4650      	mov	r0, sl
 80113a8:	7821      	ldrb	r1, [r4, #0]
 80113aa:	f7fe fcde 	bl	800fd6a <memchr>
 80113ae:	b138      	cbz	r0, 80113c0 <_svfiprintf_r+0x150>
 80113b0:	2240      	movs	r2, #64	@ 0x40
 80113b2:	9b04      	ldr	r3, [sp, #16]
 80113b4:	eba0 000a 	sub.w	r0, r0, sl
 80113b8:	4082      	lsls	r2, r0
 80113ba:	4313      	orrs	r3, r2
 80113bc:	3401      	adds	r4, #1
 80113be:	9304      	str	r3, [sp, #16]
 80113c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113c4:	2206      	movs	r2, #6
 80113c6:	4825      	ldr	r0, [pc, #148]	@ (801145c <_svfiprintf_r+0x1ec>)
 80113c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80113cc:	f7fe fccd 	bl	800fd6a <memchr>
 80113d0:	2800      	cmp	r0, #0
 80113d2:	d036      	beq.n	8011442 <_svfiprintf_r+0x1d2>
 80113d4:	4b22      	ldr	r3, [pc, #136]	@ (8011460 <_svfiprintf_r+0x1f0>)
 80113d6:	bb1b      	cbnz	r3, 8011420 <_svfiprintf_r+0x1b0>
 80113d8:	9b03      	ldr	r3, [sp, #12]
 80113da:	3307      	adds	r3, #7
 80113dc:	f023 0307 	bic.w	r3, r3, #7
 80113e0:	3308      	adds	r3, #8
 80113e2:	9303      	str	r3, [sp, #12]
 80113e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113e6:	4433      	add	r3, r6
 80113e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80113ea:	e76a      	b.n	80112c2 <_svfiprintf_r+0x52>
 80113ec:	460c      	mov	r4, r1
 80113ee:	2001      	movs	r0, #1
 80113f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80113f4:	e7a8      	b.n	8011348 <_svfiprintf_r+0xd8>
 80113f6:	2300      	movs	r3, #0
 80113f8:	f04f 0c0a 	mov.w	ip, #10
 80113fc:	4619      	mov	r1, r3
 80113fe:	3401      	adds	r4, #1
 8011400:	9305      	str	r3, [sp, #20]
 8011402:	4620      	mov	r0, r4
 8011404:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011408:	3a30      	subs	r2, #48	@ 0x30
 801140a:	2a09      	cmp	r2, #9
 801140c:	d903      	bls.n	8011416 <_svfiprintf_r+0x1a6>
 801140e:	2b00      	cmp	r3, #0
 8011410:	d0c6      	beq.n	80113a0 <_svfiprintf_r+0x130>
 8011412:	9105      	str	r1, [sp, #20]
 8011414:	e7c4      	b.n	80113a0 <_svfiprintf_r+0x130>
 8011416:	4604      	mov	r4, r0
 8011418:	2301      	movs	r3, #1
 801141a:	fb0c 2101 	mla	r1, ip, r1, r2
 801141e:	e7f0      	b.n	8011402 <_svfiprintf_r+0x192>
 8011420:	ab03      	add	r3, sp, #12
 8011422:	9300      	str	r3, [sp, #0]
 8011424:	462a      	mov	r2, r5
 8011426:	4638      	mov	r0, r7
 8011428:	4b0e      	ldr	r3, [pc, #56]	@ (8011464 <_svfiprintf_r+0x1f4>)
 801142a:	a904      	add	r1, sp, #16
 801142c:	f7fd ff16 	bl	800f25c <_printf_float>
 8011430:	1c42      	adds	r2, r0, #1
 8011432:	4606      	mov	r6, r0
 8011434:	d1d6      	bne.n	80113e4 <_svfiprintf_r+0x174>
 8011436:	89ab      	ldrh	r3, [r5, #12]
 8011438:	065b      	lsls	r3, r3, #25
 801143a:	f53f af2d 	bmi.w	8011298 <_svfiprintf_r+0x28>
 801143e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011440:	e72c      	b.n	801129c <_svfiprintf_r+0x2c>
 8011442:	ab03      	add	r3, sp, #12
 8011444:	9300      	str	r3, [sp, #0]
 8011446:	462a      	mov	r2, r5
 8011448:	4638      	mov	r0, r7
 801144a:	4b06      	ldr	r3, [pc, #24]	@ (8011464 <_svfiprintf_r+0x1f4>)
 801144c:	a904      	add	r1, sp, #16
 801144e:	f7fe f9a3 	bl	800f798 <_printf_i>
 8011452:	e7ed      	b.n	8011430 <_svfiprintf_r+0x1c0>
 8011454:	08012ee0 	.word	0x08012ee0
 8011458:	08012ee6 	.word	0x08012ee6
 801145c:	08012eea 	.word	0x08012eea
 8011460:	0800f25d 	.word	0x0800f25d
 8011464:	080111b9 	.word	0x080111b9

08011468 <__sflush_r>:
 8011468:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801146e:	0716      	lsls	r6, r2, #28
 8011470:	4605      	mov	r5, r0
 8011472:	460c      	mov	r4, r1
 8011474:	d454      	bmi.n	8011520 <__sflush_r+0xb8>
 8011476:	684b      	ldr	r3, [r1, #4]
 8011478:	2b00      	cmp	r3, #0
 801147a:	dc02      	bgt.n	8011482 <__sflush_r+0x1a>
 801147c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801147e:	2b00      	cmp	r3, #0
 8011480:	dd48      	ble.n	8011514 <__sflush_r+0xac>
 8011482:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011484:	2e00      	cmp	r6, #0
 8011486:	d045      	beq.n	8011514 <__sflush_r+0xac>
 8011488:	2300      	movs	r3, #0
 801148a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801148e:	682f      	ldr	r7, [r5, #0]
 8011490:	6a21      	ldr	r1, [r4, #32]
 8011492:	602b      	str	r3, [r5, #0]
 8011494:	d030      	beq.n	80114f8 <__sflush_r+0x90>
 8011496:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011498:	89a3      	ldrh	r3, [r4, #12]
 801149a:	0759      	lsls	r1, r3, #29
 801149c:	d505      	bpl.n	80114aa <__sflush_r+0x42>
 801149e:	6863      	ldr	r3, [r4, #4]
 80114a0:	1ad2      	subs	r2, r2, r3
 80114a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80114a4:	b10b      	cbz	r3, 80114aa <__sflush_r+0x42>
 80114a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80114a8:	1ad2      	subs	r2, r2, r3
 80114aa:	2300      	movs	r3, #0
 80114ac:	4628      	mov	r0, r5
 80114ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114b0:	6a21      	ldr	r1, [r4, #32]
 80114b2:	47b0      	blx	r6
 80114b4:	1c43      	adds	r3, r0, #1
 80114b6:	89a3      	ldrh	r3, [r4, #12]
 80114b8:	d106      	bne.n	80114c8 <__sflush_r+0x60>
 80114ba:	6829      	ldr	r1, [r5, #0]
 80114bc:	291d      	cmp	r1, #29
 80114be:	d82b      	bhi.n	8011518 <__sflush_r+0xb0>
 80114c0:	4a28      	ldr	r2, [pc, #160]	@ (8011564 <__sflush_r+0xfc>)
 80114c2:	410a      	asrs	r2, r1
 80114c4:	07d6      	lsls	r6, r2, #31
 80114c6:	d427      	bmi.n	8011518 <__sflush_r+0xb0>
 80114c8:	2200      	movs	r2, #0
 80114ca:	6062      	str	r2, [r4, #4]
 80114cc:	6922      	ldr	r2, [r4, #16]
 80114ce:	04d9      	lsls	r1, r3, #19
 80114d0:	6022      	str	r2, [r4, #0]
 80114d2:	d504      	bpl.n	80114de <__sflush_r+0x76>
 80114d4:	1c42      	adds	r2, r0, #1
 80114d6:	d101      	bne.n	80114dc <__sflush_r+0x74>
 80114d8:	682b      	ldr	r3, [r5, #0]
 80114da:	b903      	cbnz	r3, 80114de <__sflush_r+0x76>
 80114dc:	6560      	str	r0, [r4, #84]	@ 0x54
 80114de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80114e0:	602f      	str	r7, [r5, #0]
 80114e2:	b1b9      	cbz	r1, 8011514 <__sflush_r+0xac>
 80114e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80114e8:	4299      	cmp	r1, r3
 80114ea:	d002      	beq.n	80114f2 <__sflush_r+0x8a>
 80114ec:	4628      	mov	r0, r5
 80114ee:	f7ff fa9b 	bl	8010a28 <_free_r>
 80114f2:	2300      	movs	r3, #0
 80114f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80114f6:	e00d      	b.n	8011514 <__sflush_r+0xac>
 80114f8:	2301      	movs	r3, #1
 80114fa:	4628      	mov	r0, r5
 80114fc:	47b0      	blx	r6
 80114fe:	4602      	mov	r2, r0
 8011500:	1c50      	adds	r0, r2, #1
 8011502:	d1c9      	bne.n	8011498 <__sflush_r+0x30>
 8011504:	682b      	ldr	r3, [r5, #0]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d0c6      	beq.n	8011498 <__sflush_r+0x30>
 801150a:	2b1d      	cmp	r3, #29
 801150c:	d001      	beq.n	8011512 <__sflush_r+0xaa>
 801150e:	2b16      	cmp	r3, #22
 8011510:	d11d      	bne.n	801154e <__sflush_r+0xe6>
 8011512:	602f      	str	r7, [r5, #0]
 8011514:	2000      	movs	r0, #0
 8011516:	e021      	b.n	801155c <__sflush_r+0xf4>
 8011518:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801151c:	b21b      	sxth	r3, r3
 801151e:	e01a      	b.n	8011556 <__sflush_r+0xee>
 8011520:	690f      	ldr	r7, [r1, #16]
 8011522:	2f00      	cmp	r7, #0
 8011524:	d0f6      	beq.n	8011514 <__sflush_r+0xac>
 8011526:	0793      	lsls	r3, r2, #30
 8011528:	bf18      	it	ne
 801152a:	2300      	movne	r3, #0
 801152c:	680e      	ldr	r6, [r1, #0]
 801152e:	bf08      	it	eq
 8011530:	694b      	ldreq	r3, [r1, #20]
 8011532:	1bf6      	subs	r6, r6, r7
 8011534:	600f      	str	r7, [r1, #0]
 8011536:	608b      	str	r3, [r1, #8]
 8011538:	2e00      	cmp	r6, #0
 801153a:	ddeb      	ble.n	8011514 <__sflush_r+0xac>
 801153c:	4633      	mov	r3, r6
 801153e:	463a      	mov	r2, r7
 8011540:	4628      	mov	r0, r5
 8011542:	6a21      	ldr	r1, [r4, #32]
 8011544:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8011548:	47e0      	blx	ip
 801154a:	2800      	cmp	r0, #0
 801154c:	dc07      	bgt.n	801155e <__sflush_r+0xf6>
 801154e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011556:	f04f 30ff 	mov.w	r0, #4294967295
 801155a:	81a3      	strh	r3, [r4, #12]
 801155c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801155e:	4407      	add	r7, r0
 8011560:	1a36      	subs	r6, r6, r0
 8011562:	e7e9      	b.n	8011538 <__sflush_r+0xd0>
 8011564:	dfbffffe 	.word	0xdfbffffe

08011568 <_fflush_r>:
 8011568:	b538      	push	{r3, r4, r5, lr}
 801156a:	690b      	ldr	r3, [r1, #16]
 801156c:	4605      	mov	r5, r0
 801156e:	460c      	mov	r4, r1
 8011570:	b913      	cbnz	r3, 8011578 <_fflush_r+0x10>
 8011572:	2500      	movs	r5, #0
 8011574:	4628      	mov	r0, r5
 8011576:	bd38      	pop	{r3, r4, r5, pc}
 8011578:	b118      	cbz	r0, 8011582 <_fflush_r+0x1a>
 801157a:	6a03      	ldr	r3, [r0, #32]
 801157c:	b90b      	cbnz	r3, 8011582 <_fflush_r+0x1a>
 801157e:	f7fe fab7 	bl	800faf0 <__sinit>
 8011582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d0f3      	beq.n	8011572 <_fflush_r+0xa>
 801158a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801158c:	07d0      	lsls	r0, r2, #31
 801158e:	d404      	bmi.n	801159a <_fflush_r+0x32>
 8011590:	0599      	lsls	r1, r3, #22
 8011592:	d402      	bmi.n	801159a <_fflush_r+0x32>
 8011594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011596:	f7fe fbe6 	bl	800fd66 <__retarget_lock_acquire_recursive>
 801159a:	4628      	mov	r0, r5
 801159c:	4621      	mov	r1, r4
 801159e:	f7ff ff63 	bl	8011468 <__sflush_r>
 80115a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80115a4:	4605      	mov	r5, r0
 80115a6:	07da      	lsls	r2, r3, #31
 80115a8:	d4e4      	bmi.n	8011574 <_fflush_r+0xc>
 80115aa:	89a3      	ldrh	r3, [r4, #12]
 80115ac:	059b      	lsls	r3, r3, #22
 80115ae:	d4e1      	bmi.n	8011574 <_fflush_r+0xc>
 80115b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115b2:	f7fe fbd9 	bl	800fd68 <__retarget_lock_release_recursive>
 80115b6:	e7dd      	b.n	8011574 <_fflush_r+0xc>

080115b8 <memmove>:
 80115b8:	4288      	cmp	r0, r1
 80115ba:	b510      	push	{r4, lr}
 80115bc:	eb01 0402 	add.w	r4, r1, r2
 80115c0:	d902      	bls.n	80115c8 <memmove+0x10>
 80115c2:	4284      	cmp	r4, r0
 80115c4:	4623      	mov	r3, r4
 80115c6:	d807      	bhi.n	80115d8 <memmove+0x20>
 80115c8:	1e43      	subs	r3, r0, #1
 80115ca:	42a1      	cmp	r1, r4
 80115cc:	d008      	beq.n	80115e0 <memmove+0x28>
 80115ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80115d6:	e7f8      	b.n	80115ca <memmove+0x12>
 80115d8:	4601      	mov	r1, r0
 80115da:	4402      	add	r2, r0
 80115dc:	428a      	cmp	r2, r1
 80115de:	d100      	bne.n	80115e2 <memmove+0x2a>
 80115e0:	bd10      	pop	{r4, pc}
 80115e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80115e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80115ea:	e7f7      	b.n	80115dc <memmove+0x24>

080115ec <memcpy>:
 80115ec:	440a      	add	r2, r1
 80115ee:	4291      	cmp	r1, r2
 80115f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80115f4:	d100      	bne.n	80115f8 <memcpy+0xc>
 80115f6:	4770      	bx	lr
 80115f8:	b510      	push	{r4, lr}
 80115fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80115fe:	4291      	cmp	r1, r2
 8011600:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011604:	d1f9      	bne.n	80115fa <memcpy+0xe>
 8011606:	bd10      	pop	{r4, pc}

08011608 <__assert_func>:
 8011608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801160a:	4614      	mov	r4, r2
 801160c:	461a      	mov	r2, r3
 801160e:	4b09      	ldr	r3, [pc, #36]	@ (8011634 <__assert_func+0x2c>)
 8011610:	4605      	mov	r5, r0
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	68d8      	ldr	r0, [r3, #12]
 8011616:	b954      	cbnz	r4, 801162e <__assert_func+0x26>
 8011618:	4b07      	ldr	r3, [pc, #28]	@ (8011638 <__assert_func+0x30>)
 801161a:	461c      	mov	r4, r3
 801161c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011620:	9100      	str	r1, [sp, #0]
 8011622:	462b      	mov	r3, r5
 8011624:	4905      	ldr	r1, [pc, #20]	@ (801163c <__assert_func+0x34>)
 8011626:	f000 f86f 	bl	8011708 <fiprintf>
 801162a:	f000 f87f 	bl	801172c <abort>
 801162e:	4b04      	ldr	r3, [pc, #16]	@ (8011640 <__assert_func+0x38>)
 8011630:	e7f4      	b.n	801161c <__assert_func+0x14>
 8011632:	bf00      	nop
 8011634:	20000188 	.word	0x20000188
 8011638:	08012f36 	.word	0x08012f36
 801163c:	08012f08 	.word	0x08012f08
 8011640:	08012efb 	.word	0x08012efb

08011644 <_calloc_r>:
 8011644:	b570      	push	{r4, r5, r6, lr}
 8011646:	fba1 5402 	umull	r5, r4, r1, r2
 801164a:	b93c      	cbnz	r4, 801165c <_calloc_r+0x18>
 801164c:	4629      	mov	r1, r5
 801164e:	f7fd fcdb 	bl	800f008 <_malloc_r>
 8011652:	4606      	mov	r6, r0
 8011654:	b928      	cbnz	r0, 8011662 <_calloc_r+0x1e>
 8011656:	2600      	movs	r6, #0
 8011658:	4630      	mov	r0, r6
 801165a:	bd70      	pop	{r4, r5, r6, pc}
 801165c:	220c      	movs	r2, #12
 801165e:	6002      	str	r2, [r0, #0]
 8011660:	e7f9      	b.n	8011656 <_calloc_r+0x12>
 8011662:	462a      	mov	r2, r5
 8011664:	4621      	mov	r1, r4
 8011666:	f7fe faf0 	bl	800fc4a <memset>
 801166a:	e7f5      	b.n	8011658 <_calloc_r+0x14>

0801166c <__ascii_mbtowc>:
 801166c:	b082      	sub	sp, #8
 801166e:	b901      	cbnz	r1, 8011672 <__ascii_mbtowc+0x6>
 8011670:	a901      	add	r1, sp, #4
 8011672:	b142      	cbz	r2, 8011686 <__ascii_mbtowc+0x1a>
 8011674:	b14b      	cbz	r3, 801168a <__ascii_mbtowc+0x1e>
 8011676:	7813      	ldrb	r3, [r2, #0]
 8011678:	600b      	str	r3, [r1, #0]
 801167a:	7812      	ldrb	r2, [r2, #0]
 801167c:	1e10      	subs	r0, r2, #0
 801167e:	bf18      	it	ne
 8011680:	2001      	movne	r0, #1
 8011682:	b002      	add	sp, #8
 8011684:	4770      	bx	lr
 8011686:	4610      	mov	r0, r2
 8011688:	e7fb      	b.n	8011682 <__ascii_mbtowc+0x16>
 801168a:	f06f 0001 	mvn.w	r0, #1
 801168e:	e7f8      	b.n	8011682 <__ascii_mbtowc+0x16>

08011690 <_realloc_r>:
 8011690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011694:	4680      	mov	r8, r0
 8011696:	4615      	mov	r5, r2
 8011698:	460c      	mov	r4, r1
 801169a:	b921      	cbnz	r1, 80116a6 <_realloc_r+0x16>
 801169c:	4611      	mov	r1, r2
 801169e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116a2:	f7fd bcb1 	b.w	800f008 <_malloc_r>
 80116a6:	b92a      	cbnz	r2, 80116b4 <_realloc_r+0x24>
 80116a8:	f7ff f9be 	bl	8010a28 <_free_r>
 80116ac:	2400      	movs	r4, #0
 80116ae:	4620      	mov	r0, r4
 80116b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116b4:	f000 f841 	bl	801173a <_malloc_usable_size_r>
 80116b8:	4285      	cmp	r5, r0
 80116ba:	4606      	mov	r6, r0
 80116bc:	d802      	bhi.n	80116c4 <_realloc_r+0x34>
 80116be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80116c2:	d8f4      	bhi.n	80116ae <_realloc_r+0x1e>
 80116c4:	4629      	mov	r1, r5
 80116c6:	4640      	mov	r0, r8
 80116c8:	f7fd fc9e 	bl	800f008 <_malloc_r>
 80116cc:	4607      	mov	r7, r0
 80116ce:	2800      	cmp	r0, #0
 80116d0:	d0ec      	beq.n	80116ac <_realloc_r+0x1c>
 80116d2:	42b5      	cmp	r5, r6
 80116d4:	462a      	mov	r2, r5
 80116d6:	4621      	mov	r1, r4
 80116d8:	bf28      	it	cs
 80116da:	4632      	movcs	r2, r6
 80116dc:	f7ff ff86 	bl	80115ec <memcpy>
 80116e0:	4621      	mov	r1, r4
 80116e2:	4640      	mov	r0, r8
 80116e4:	f7ff f9a0 	bl	8010a28 <_free_r>
 80116e8:	463c      	mov	r4, r7
 80116ea:	e7e0      	b.n	80116ae <_realloc_r+0x1e>

080116ec <__ascii_wctomb>:
 80116ec:	4603      	mov	r3, r0
 80116ee:	4608      	mov	r0, r1
 80116f0:	b141      	cbz	r1, 8011704 <__ascii_wctomb+0x18>
 80116f2:	2aff      	cmp	r2, #255	@ 0xff
 80116f4:	d904      	bls.n	8011700 <__ascii_wctomb+0x14>
 80116f6:	228a      	movs	r2, #138	@ 0x8a
 80116f8:	f04f 30ff 	mov.w	r0, #4294967295
 80116fc:	601a      	str	r2, [r3, #0]
 80116fe:	4770      	bx	lr
 8011700:	2001      	movs	r0, #1
 8011702:	700a      	strb	r2, [r1, #0]
 8011704:	4770      	bx	lr
	...

08011708 <fiprintf>:
 8011708:	b40e      	push	{r1, r2, r3}
 801170a:	b503      	push	{r0, r1, lr}
 801170c:	4601      	mov	r1, r0
 801170e:	ab03      	add	r3, sp, #12
 8011710:	4805      	ldr	r0, [pc, #20]	@ (8011728 <fiprintf+0x20>)
 8011712:	f853 2b04 	ldr.w	r2, [r3], #4
 8011716:	6800      	ldr	r0, [r0, #0]
 8011718:	9301      	str	r3, [sp, #4]
 801171a:	f000 f83d 	bl	8011798 <_vfiprintf_r>
 801171e:	b002      	add	sp, #8
 8011720:	f85d eb04 	ldr.w	lr, [sp], #4
 8011724:	b003      	add	sp, #12
 8011726:	4770      	bx	lr
 8011728:	20000188 	.word	0x20000188

0801172c <abort>:
 801172c:	2006      	movs	r0, #6
 801172e:	b508      	push	{r3, lr}
 8011730:	f000 fa06 	bl	8011b40 <raise>
 8011734:	2001      	movs	r0, #1
 8011736:	f7f2 fa34 	bl	8003ba2 <_exit>

0801173a <_malloc_usable_size_r>:
 801173a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801173e:	1f18      	subs	r0, r3, #4
 8011740:	2b00      	cmp	r3, #0
 8011742:	bfbc      	itt	lt
 8011744:	580b      	ldrlt	r3, [r1, r0]
 8011746:	18c0      	addlt	r0, r0, r3
 8011748:	4770      	bx	lr

0801174a <__sfputc_r>:
 801174a:	6893      	ldr	r3, [r2, #8]
 801174c:	b410      	push	{r4}
 801174e:	3b01      	subs	r3, #1
 8011750:	2b00      	cmp	r3, #0
 8011752:	6093      	str	r3, [r2, #8]
 8011754:	da07      	bge.n	8011766 <__sfputc_r+0x1c>
 8011756:	6994      	ldr	r4, [r2, #24]
 8011758:	42a3      	cmp	r3, r4
 801175a:	db01      	blt.n	8011760 <__sfputc_r+0x16>
 801175c:	290a      	cmp	r1, #10
 801175e:	d102      	bne.n	8011766 <__sfputc_r+0x1c>
 8011760:	bc10      	pop	{r4}
 8011762:	f000 b931 	b.w	80119c8 <__swbuf_r>
 8011766:	6813      	ldr	r3, [r2, #0]
 8011768:	1c58      	adds	r0, r3, #1
 801176a:	6010      	str	r0, [r2, #0]
 801176c:	7019      	strb	r1, [r3, #0]
 801176e:	4608      	mov	r0, r1
 8011770:	bc10      	pop	{r4}
 8011772:	4770      	bx	lr

08011774 <__sfputs_r>:
 8011774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011776:	4606      	mov	r6, r0
 8011778:	460f      	mov	r7, r1
 801177a:	4614      	mov	r4, r2
 801177c:	18d5      	adds	r5, r2, r3
 801177e:	42ac      	cmp	r4, r5
 8011780:	d101      	bne.n	8011786 <__sfputs_r+0x12>
 8011782:	2000      	movs	r0, #0
 8011784:	e007      	b.n	8011796 <__sfputs_r+0x22>
 8011786:	463a      	mov	r2, r7
 8011788:	4630      	mov	r0, r6
 801178a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801178e:	f7ff ffdc 	bl	801174a <__sfputc_r>
 8011792:	1c43      	adds	r3, r0, #1
 8011794:	d1f3      	bne.n	801177e <__sfputs_r+0xa>
 8011796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011798 <_vfiprintf_r>:
 8011798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801179c:	460d      	mov	r5, r1
 801179e:	4614      	mov	r4, r2
 80117a0:	4698      	mov	r8, r3
 80117a2:	4606      	mov	r6, r0
 80117a4:	b09d      	sub	sp, #116	@ 0x74
 80117a6:	b118      	cbz	r0, 80117b0 <_vfiprintf_r+0x18>
 80117a8:	6a03      	ldr	r3, [r0, #32]
 80117aa:	b90b      	cbnz	r3, 80117b0 <_vfiprintf_r+0x18>
 80117ac:	f7fe f9a0 	bl	800faf0 <__sinit>
 80117b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80117b2:	07d9      	lsls	r1, r3, #31
 80117b4:	d405      	bmi.n	80117c2 <_vfiprintf_r+0x2a>
 80117b6:	89ab      	ldrh	r3, [r5, #12]
 80117b8:	059a      	lsls	r2, r3, #22
 80117ba:	d402      	bmi.n	80117c2 <_vfiprintf_r+0x2a>
 80117bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117be:	f7fe fad2 	bl	800fd66 <__retarget_lock_acquire_recursive>
 80117c2:	89ab      	ldrh	r3, [r5, #12]
 80117c4:	071b      	lsls	r3, r3, #28
 80117c6:	d501      	bpl.n	80117cc <_vfiprintf_r+0x34>
 80117c8:	692b      	ldr	r3, [r5, #16]
 80117ca:	b99b      	cbnz	r3, 80117f4 <_vfiprintf_r+0x5c>
 80117cc:	4629      	mov	r1, r5
 80117ce:	4630      	mov	r0, r6
 80117d0:	f000 f938 	bl	8011a44 <__swsetup_r>
 80117d4:	b170      	cbz	r0, 80117f4 <_vfiprintf_r+0x5c>
 80117d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80117d8:	07dc      	lsls	r4, r3, #31
 80117da:	d504      	bpl.n	80117e6 <_vfiprintf_r+0x4e>
 80117dc:	f04f 30ff 	mov.w	r0, #4294967295
 80117e0:	b01d      	add	sp, #116	@ 0x74
 80117e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117e6:	89ab      	ldrh	r3, [r5, #12]
 80117e8:	0598      	lsls	r0, r3, #22
 80117ea:	d4f7      	bmi.n	80117dc <_vfiprintf_r+0x44>
 80117ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117ee:	f7fe fabb 	bl	800fd68 <__retarget_lock_release_recursive>
 80117f2:	e7f3      	b.n	80117dc <_vfiprintf_r+0x44>
 80117f4:	2300      	movs	r3, #0
 80117f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80117f8:	2320      	movs	r3, #32
 80117fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80117fe:	2330      	movs	r3, #48	@ 0x30
 8011800:	f04f 0901 	mov.w	r9, #1
 8011804:	f8cd 800c 	str.w	r8, [sp, #12]
 8011808:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80119b4 <_vfiprintf_r+0x21c>
 801180c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011810:	4623      	mov	r3, r4
 8011812:	469a      	mov	sl, r3
 8011814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011818:	b10a      	cbz	r2, 801181e <_vfiprintf_r+0x86>
 801181a:	2a25      	cmp	r2, #37	@ 0x25
 801181c:	d1f9      	bne.n	8011812 <_vfiprintf_r+0x7a>
 801181e:	ebba 0b04 	subs.w	fp, sl, r4
 8011822:	d00b      	beq.n	801183c <_vfiprintf_r+0xa4>
 8011824:	465b      	mov	r3, fp
 8011826:	4622      	mov	r2, r4
 8011828:	4629      	mov	r1, r5
 801182a:	4630      	mov	r0, r6
 801182c:	f7ff ffa2 	bl	8011774 <__sfputs_r>
 8011830:	3001      	adds	r0, #1
 8011832:	f000 80a7 	beq.w	8011984 <_vfiprintf_r+0x1ec>
 8011836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011838:	445a      	add	r2, fp
 801183a:	9209      	str	r2, [sp, #36]	@ 0x24
 801183c:	f89a 3000 	ldrb.w	r3, [sl]
 8011840:	2b00      	cmp	r3, #0
 8011842:	f000 809f 	beq.w	8011984 <_vfiprintf_r+0x1ec>
 8011846:	2300      	movs	r3, #0
 8011848:	f04f 32ff 	mov.w	r2, #4294967295
 801184c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011850:	f10a 0a01 	add.w	sl, sl, #1
 8011854:	9304      	str	r3, [sp, #16]
 8011856:	9307      	str	r3, [sp, #28]
 8011858:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801185c:	931a      	str	r3, [sp, #104]	@ 0x68
 801185e:	4654      	mov	r4, sl
 8011860:	2205      	movs	r2, #5
 8011862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011866:	4853      	ldr	r0, [pc, #332]	@ (80119b4 <_vfiprintf_r+0x21c>)
 8011868:	f7fe fa7f 	bl	800fd6a <memchr>
 801186c:	9a04      	ldr	r2, [sp, #16]
 801186e:	b9d8      	cbnz	r0, 80118a8 <_vfiprintf_r+0x110>
 8011870:	06d1      	lsls	r1, r2, #27
 8011872:	bf44      	itt	mi
 8011874:	2320      	movmi	r3, #32
 8011876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801187a:	0713      	lsls	r3, r2, #28
 801187c:	bf44      	itt	mi
 801187e:	232b      	movmi	r3, #43	@ 0x2b
 8011880:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011884:	f89a 3000 	ldrb.w	r3, [sl]
 8011888:	2b2a      	cmp	r3, #42	@ 0x2a
 801188a:	d015      	beq.n	80118b8 <_vfiprintf_r+0x120>
 801188c:	4654      	mov	r4, sl
 801188e:	2000      	movs	r0, #0
 8011890:	f04f 0c0a 	mov.w	ip, #10
 8011894:	9a07      	ldr	r2, [sp, #28]
 8011896:	4621      	mov	r1, r4
 8011898:	f811 3b01 	ldrb.w	r3, [r1], #1
 801189c:	3b30      	subs	r3, #48	@ 0x30
 801189e:	2b09      	cmp	r3, #9
 80118a0:	d94b      	bls.n	801193a <_vfiprintf_r+0x1a2>
 80118a2:	b1b0      	cbz	r0, 80118d2 <_vfiprintf_r+0x13a>
 80118a4:	9207      	str	r2, [sp, #28]
 80118a6:	e014      	b.n	80118d2 <_vfiprintf_r+0x13a>
 80118a8:	eba0 0308 	sub.w	r3, r0, r8
 80118ac:	fa09 f303 	lsl.w	r3, r9, r3
 80118b0:	4313      	orrs	r3, r2
 80118b2:	46a2      	mov	sl, r4
 80118b4:	9304      	str	r3, [sp, #16]
 80118b6:	e7d2      	b.n	801185e <_vfiprintf_r+0xc6>
 80118b8:	9b03      	ldr	r3, [sp, #12]
 80118ba:	1d19      	adds	r1, r3, #4
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	9103      	str	r1, [sp, #12]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	bfbb      	ittet	lt
 80118c4:	425b      	neglt	r3, r3
 80118c6:	f042 0202 	orrlt.w	r2, r2, #2
 80118ca:	9307      	strge	r3, [sp, #28]
 80118cc:	9307      	strlt	r3, [sp, #28]
 80118ce:	bfb8      	it	lt
 80118d0:	9204      	strlt	r2, [sp, #16]
 80118d2:	7823      	ldrb	r3, [r4, #0]
 80118d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80118d6:	d10a      	bne.n	80118ee <_vfiprintf_r+0x156>
 80118d8:	7863      	ldrb	r3, [r4, #1]
 80118da:	2b2a      	cmp	r3, #42	@ 0x2a
 80118dc:	d132      	bne.n	8011944 <_vfiprintf_r+0x1ac>
 80118de:	9b03      	ldr	r3, [sp, #12]
 80118e0:	3402      	adds	r4, #2
 80118e2:	1d1a      	adds	r2, r3, #4
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	9203      	str	r2, [sp, #12]
 80118e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80118ec:	9305      	str	r3, [sp, #20]
 80118ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80119b8 <_vfiprintf_r+0x220>
 80118f2:	2203      	movs	r2, #3
 80118f4:	4650      	mov	r0, sl
 80118f6:	7821      	ldrb	r1, [r4, #0]
 80118f8:	f7fe fa37 	bl	800fd6a <memchr>
 80118fc:	b138      	cbz	r0, 801190e <_vfiprintf_r+0x176>
 80118fe:	2240      	movs	r2, #64	@ 0x40
 8011900:	9b04      	ldr	r3, [sp, #16]
 8011902:	eba0 000a 	sub.w	r0, r0, sl
 8011906:	4082      	lsls	r2, r0
 8011908:	4313      	orrs	r3, r2
 801190a:	3401      	adds	r4, #1
 801190c:	9304      	str	r3, [sp, #16]
 801190e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011912:	2206      	movs	r2, #6
 8011914:	4829      	ldr	r0, [pc, #164]	@ (80119bc <_vfiprintf_r+0x224>)
 8011916:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801191a:	f7fe fa26 	bl	800fd6a <memchr>
 801191e:	2800      	cmp	r0, #0
 8011920:	d03f      	beq.n	80119a2 <_vfiprintf_r+0x20a>
 8011922:	4b27      	ldr	r3, [pc, #156]	@ (80119c0 <_vfiprintf_r+0x228>)
 8011924:	bb1b      	cbnz	r3, 801196e <_vfiprintf_r+0x1d6>
 8011926:	9b03      	ldr	r3, [sp, #12]
 8011928:	3307      	adds	r3, #7
 801192a:	f023 0307 	bic.w	r3, r3, #7
 801192e:	3308      	adds	r3, #8
 8011930:	9303      	str	r3, [sp, #12]
 8011932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011934:	443b      	add	r3, r7
 8011936:	9309      	str	r3, [sp, #36]	@ 0x24
 8011938:	e76a      	b.n	8011810 <_vfiprintf_r+0x78>
 801193a:	460c      	mov	r4, r1
 801193c:	2001      	movs	r0, #1
 801193e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011942:	e7a8      	b.n	8011896 <_vfiprintf_r+0xfe>
 8011944:	2300      	movs	r3, #0
 8011946:	f04f 0c0a 	mov.w	ip, #10
 801194a:	4619      	mov	r1, r3
 801194c:	3401      	adds	r4, #1
 801194e:	9305      	str	r3, [sp, #20]
 8011950:	4620      	mov	r0, r4
 8011952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011956:	3a30      	subs	r2, #48	@ 0x30
 8011958:	2a09      	cmp	r2, #9
 801195a:	d903      	bls.n	8011964 <_vfiprintf_r+0x1cc>
 801195c:	2b00      	cmp	r3, #0
 801195e:	d0c6      	beq.n	80118ee <_vfiprintf_r+0x156>
 8011960:	9105      	str	r1, [sp, #20]
 8011962:	e7c4      	b.n	80118ee <_vfiprintf_r+0x156>
 8011964:	4604      	mov	r4, r0
 8011966:	2301      	movs	r3, #1
 8011968:	fb0c 2101 	mla	r1, ip, r1, r2
 801196c:	e7f0      	b.n	8011950 <_vfiprintf_r+0x1b8>
 801196e:	ab03      	add	r3, sp, #12
 8011970:	9300      	str	r3, [sp, #0]
 8011972:	462a      	mov	r2, r5
 8011974:	4630      	mov	r0, r6
 8011976:	4b13      	ldr	r3, [pc, #76]	@ (80119c4 <_vfiprintf_r+0x22c>)
 8011978:	a904      	add	r1, sp, #16
 801197a:	f7fd fc6f 	bl	800f25c <_printf_float>
 801197e:	4607      	mov	r7, r0
 8011980:	1c78      	adds	r0, r7, #1
 8011982:	d1d6      	bne.n	8011932 <_vfiprintf_r+0x19a>
 8011984:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011986:	07d9      	lsls	r1, r3, #31
 8011988:	d405      	bmi.n	8011996 <_vfiprintf_r+0x1fe>
 801198a:	89ab      	ldrh	r3, [r5, #12]
 801198c:	059a      	lsls	r2, r3, #22
 801198e:	d402      	bmi.n	8011996 <_vfiprintf_r+0x1fe>
 8011990:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011992:	f7fe f9e9 	bl	800fd68 <__retarget_lock_release_recursive>
 8011996:	89ab      	ldrh	r3, [r5, #12]
 8011998:	065b      	lsls	r3, r3, #25
 801199a:	f53f af1f 	bmi.w	80117dc <_vfiprintf_r+0x44>
 801199e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80119a0:	e71e      	b.n	80117e0 <_vfiprintf_r+0x48>
 80119a2:	ab03      	add	r3, sp, #12
 80119a4:	9300      	str	r3, [sp, #0]
 80119a6:	462a      	mov	r2, r5
 80119a8:	4630      	mov	r0, r6
 80119aa:	4b06      	ldr	r3, [pc, #24]	@ (80119c4 <_vfiprintf_r+0x22c>)
 80119ac:	a904      	add	r1, sp, #16
 80119ae:	f7fd fef3 	bl	800f798 <_printf_i>
 80119b2:	e7e4      	b.n	801197e <_vfiprintf_r+0x1e6>
 80119b4:	08012ee0 	.word	0x08012ee0
 80119b8:	08012ee6 	.word	0x08012ee6
 80119bc:	08012eea 	.word	0x08012eea
 80119c0:	0800f25d 	.word	0x0800f25d
 80119c4:	08011775 	.word	0x08011775

080119c8 <__swbuf_r>:
 80119c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ca:	460e      	mov	r6, r1
 80119cc:	4614      	mov	r4, r2
 80119ce:	4605      	mov	r5, r0
 80119d0:	b118      	cbz	r0, 80119da <__swbuf_r+0x12>
 80119d2:	6a03      	ldr	r3, [r0, #32]
 80119d4:	b90b      	cbnz	r3, 80119da <__swbuf_r+0x12>
 80119d6:	f7fe f88b 	bl	800faf0 <__sinit>
 80119da:	69a3      	ldr	r3, [r4, #24]
 80119dc:	60a3      	str	r3, [r4, #8]
 80119de:	89a3      	ldrh	r3, [r4, #12]
 80119e0:	071a      	lsls	r2, r3, #28
 80119e2:	d501      	bpl.n	80119e8 <__swbuf_r+0x20>
 80119e4:	6923      	ldr	r3, [r4, #16]
 80119e6:	b943      	cbnz	r3, 80119fa <__swbuf_r+0x32>
 80119e8:	4621      	mov	r1, r4
 80119ea:	4628      	mov	r0, r5
 80119ec:	f000 f82a 	bl	8011a44 <__swsetup_r>
 80119f0:	b118      	cbz	r0, 80119fa <__swbuf_r+0x32>
 80119f2:	f04f 37ff 	mov.w	r7, #4294967295
 80119f6:	4638      	mov	r0, r7
 80119f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119fa:	6823      	ldr	r3, [r4, #0]
 80119fc:	6922      	ldr	r2, [r4, #16]
 80119fe:	b2f6      	uxtb	r6, r6
 8011a00:	1a98      	subs	r0, r3, r2
 8011a02:	6963      	ldr	r3, [r4, #20]
 8011a04:	4637      	mov	r7, r6
 8011a06:	4283      	cmp	r3, r0
 8011a08:	dc05      	bgt.n	8011a16 <__swbuf_r+0x4e>
 8011a0a:	4621      	mov	r1, r4
 8011a0c:	4628      	mov	r0, r5
 8011a0e:	f7ff fdab 	bl	8011568 <_fflush_r>
 8011a12:	2800      	cmp	r0, #0
 8011a14:	d1ed      	bne.n	80119f2 <__swbuf_r+0x2a>
 8011a16:	68a3      	ldr	r3, [r4, #8]
 8011a18:	3b01      	subs	r3, #1
 8011a1a:	60a3      	str	r3, [r4, #8]
 8011a1c:	6823      	ldr	r3, [r4, #0]
 8011a1e:	1c5a      	adds	r2, r3, #1
 8011a20:	6022      	str	r2, [r4, #0]
 8011a22:	701e      	strb	r6, [r3, #0]
 8011a24:	6962      	ldr	r2, [r4, #20]
 8011a26:	1c43      	adds	r3, r0, #1
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	d004      	beq.n	8011a36 <__swbuf_r+0x6e>
 8011a2c:	89a3      	ldrh	r3, [r4, #12]
 8011a2e:	07db      	lsls	r3, r3, #31
 8011a30:	d5e1      	bpl.n	80119f6 <__swbuf_r+0x2e>
 8011a32:	2e0a      	cmp	r6, #10
 8011a34:	d1df      	bne.n	80119f6 <__swbuf_r+0x2e>
 8011a36:	4621      	mov	r1, r4
 8011a38:	4628      	mov	r0, r5
 8011a3a:	f7ff fd95 	bl	8011568 <_fflush_r>
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	d0d9      	beq.n	80119f6 <__swbuf_r+0x2e>
 8011a42:	e7d6      	b.n	80119f2 <__swbuf_r+0x2a>

08011a44 <__swsetup_r>:
 8011a44:	b538      	push	{r3, r4, r5, lr}
 8011a46:	4b29      	ldr	r3, [pc, #164]	@ (8011aec <__swsetup_r+0xa8>)
 8011a48:	4605      	mov	r5, r0
 8011a4a:	6818      	ldr	r0, [r3, #0]
 8011a4c:	460c      	mov	r4, r1
 8011a4e:	b118      	cbz	r0, 8011a58 <__swsetup_r+0x14>
 8011a50:	6a03      	ldr	r3, [r0, #32]
 8011a52:	b90b      	cbnz	r3, 8011a58 <__swsetup_r+0x14>
 8011a54:	f7fe f84c 	bl	800faf0 <__sinit>
 8011a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a5c:	0719      	lsls	r1, r3, #28
 8011a5e:	d422      	bmi.n	8011aa6 <__swsetup_r+0x62>
 8011a60:	06da      	lsls	r2, r3, #27
 8011a62:	d407      	bmi.n	8011a74 <__swsetup_r+0x30>
 8011a64:	2209      	movs	r2, #9
 8011a66:	602a      	str	r2, [r5, #0]
 8011a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a70:	81a3      	strh	r3, [r4, #12]
 8011a72:	e033      	b.n	8011adc <__swsetup_r+0x98>
 8011a74:	0758      	lsls	r0, r3, #29
 8011a76:	d512      	bpl.n	8011a9e <__swsetup_r+0x5a>
 8011a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011a7a:	b141      	cbz	r1, 8011a8e <__swsetup_r+0x4a>
 8011a7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a80:	4299      	cmp	r1, r3
 8011a82:	d002      	beq.n	8011a8a <__swsetup_r+0x46>
 8011a84:	4628      	mov	r0, r5
 8011a86:	f7fe ffcf 	bl	8010a28 <_free_r>
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a8e:	89a3      	ldrh	r3, [r4, #12]
 8011a90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011a94:	81a3      	strh	r3, [r4, #12]
 8011a96:	2300      	movs	r3, #0
 8011a98:	6063      	str	r3, [r4, #4]
 8011a9a:	6923      	ldr	r3, [r4, #16]
 8011a9c:	6023      	str	r3, [r4, #0]
 8011a9e:	89a3      	ldrh	r3, [r4, #12]
 8011aa0:	f043 0308 	orr.w	r3, r3, #8
 8011aa4:	81a3      	strh	r3, [r4, #12]
 8011aa6:	6923      	ldr	r3, [r4, #16]
 8011aa8:	b94b      	cbnz	r3, 8011abe <__swsetup_r+0x7a>
 8011aaa:	89a3      	ldrh	r3, [r4, #12]
 8011aac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ab4:	d003      	beq.n	8011abe <__swsetup_r+0x7a>
 8011ab6:	4621      	mov	r1, r4
 8011ab8:	4628      	mov	r0, r5
 8011aba:	f000 f882 	bl	8011bc2 <__smakebuf_r>
 8011abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ac2:	f013 0201 	ands.w	r2, r3, #1
 8011ac6:	d00a      	beq.n	8011ade <__swsetup_r+0x9a>
 8011ac8:	2200      	movs	r2, #0
 8011aca:	60a2      	str	r2, [r4, #8]
 8011acc:	6962      	ldr	r2, [r4, #20]
 8011ace:	4252      	negs	r2, r2
 8011ad0:	61a2      	str	r2, [r4, #24]
 8011ad2:	6922      	ldr	r2, [r4, #16]
 8011ad4:	b942      	cbnz	r2, 8011ae8 <__swsetup_r+0xa4>
 8011ad6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011ada:	d1c5      	bne.n	8011a68 <__swsetup_r+0x24>
 8011adc:	bd38      	pop	{r3, r4, r5, pc}
 8011ade:	0799      	lsls	r1, r3, #30
 8011ae0:	bf58      	it	pl
 8011ae2:	6962      	ldrpl	r2, [r4, #20]
 8011ae4:	60a2      	str	r2, [r4, #8]
 8011ae6:	e7f4      	b.n	8011ad2 <__swsetup_r+0x8e>
 8011ae8:	2000      	movs	r0, #0
 8011aea:	e7f7      	b.n	8011adc <__swsetup_r+0x98>
 8011aec:	20000188 	.word	0x20000188

08011af0 <_raise_r>:
 8011af0:	291f      	cmp	r1, #31
 8011af2:	b538      	push	{r3, r4, r5, lr}
 8011af4:	4605      	mov	r5, r0
 8011af6:	460c      	mov	r4, r1
 8011af8:	d904      	bls.n	8011b04 <_raise_r+0x14>
 8011afa:	2316      	movs	r3, #22
 8011afc:	6003      	str	r3, [r0, #0]
 8011afe:	f04f 30ff 	mov.w	r0, #4294967295
 8011b02:	bd38      	pop	{r3, r4, r5, pc}
 8011b04:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011b06:	b112      	cbz	r2, 8011b0e <_raise_r+0x1e>
 8011b08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011b0c:	b94b      	cbnz	r3, 8011b22 <_raise_r+0x32>
 8011b0e:	4628      	mov	r0, r5
 8011b10:	f000 f830 	bl	8011b74 <_getpid_r>
 8011b14:	4622      	mov	r2, r4
 8011b16:	4601      	mov	r1, r0
 8011b18:	4628      	mov	r0, r5
 8011b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b1e:	f000 b817 	b.w	8011b50 <_kill_r>
 8011b22:	2b01      	cmp	r3, #1
 8011b24:	d00a      	beq.n	8011b3c <_raise_r+0x4c>
 8011b26:	1c59      	adds	r1, r3, #1
 8011b28:	d103      	bne.n	8011b32 <_raise_r+0x42>
 8011b2a:	2316      	movs	r3, #22
 8011b2c:	6003      	str	r3, [r0, #0]
 8011b2e:	2001      	movs	r0, #1
 8011b30:	e7e7      	b.n	8011b02 <_raise_r+0x12>
 8011b32:	2100      	movs	r1, #0
 8011b34:	4620      	mov	r0, r4
 8011b36:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011b3a:	4798      	blx	r3
 8011b3c:	2000      	movs	r0, #0
 8011b3e:	e7e0      	b.n	8011b02 <_raise_r+0x12>

08011b40 <raise>:
 8011b40:	4b02      	ldr	r3, [pc, #8]	@ (8011b4c <raise+0xc>)
 8011b42:	4601      	mov	r1, r0
 8011b44:	6818      	ldr	r0, [r3, #0]
 8011b46:	f7ff bfd3 	b.w	8011af0 <_raise_r>
 8011b4a:	bf00      	nop
 8011b4c:	20000188 	.word	0x20000188

08011b50 <_kill_r>:
 8011b50:	b538      	push	{r3, r4, r5, lr}
 8011b52:	2300      	movs	r3, #0
 8011b54:	4d06      	ldr	r5, [pc, #24]	@ (8011b70 <_kill_r+0x20>)
 8011b56:	4604      	mov	r4, r0
 8011b58:	4608      	mov	r0, r1
 8011b5a:	4611      	mov	r1, r2
 8011b5c:	602b      	str	r3, [r5, #0]
 8011b5e:	f7f2 f810 	bl	8003b82 <_kill>
 8011b62:	1c43      	adds	r3, r0, #1
 8011b64:	d102      	bne.n	8011b6c <_kill_r+0x1c>
 8011b66:	682b      	ldr	r3, [r5, #0]
 8011b68:	b103      	cbz	r3, 8011b6c <_kill_r+0x1c>
 8011b6a:	6023      	str	r3, [r4, #0]
 8011b6c:	bd38      	pop	{r3, r4, r5, pc}
 8011b6e:	bf00      	nop
 8011b70:	20002bb0 	.word	0x20002bb0

08011b74 <_getpid_r>:
 8011b74:	f7f1 bffe 	b.w	8003b74 <_getpid>

08011b78 <__swhatbuf_r>:
 8011b78:	b570      	push	{r4, r5, r6, lr}
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b80:	4615      	mov	r5, r2
 8011b82:	2900      	cmp	r1, #0
 8011b84:	461e      	mov	r6, r3
 8011b86:	b096      	sub	sp, #88	@ 0x58
 8011b88:	da0c      	bge.n	8011ba4 <__swhatbuf_r+0x2c>
 8011b8a:	89a3      	ldrh	r3, [r4, #12]
 8011b8c:	2100      	movs	r1, #0
 8011b8e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011b92:	bf14      	ite	ne
 8011b94:	2340      	movne	r3, #64	@ 0x40
 8011b96:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011b9a:	2000      	movs	r0, #0
 8011b9c:	6031      	str	r1, [r6, #0]
 8011b9e:	602b      	str	r3, [r5, #0]
 8011ba0:	b016      	add	sp, #88	@ 0x58
 8011ba2:	bd70      	pop	{r4, r5, r6, pc}
 8011ba4:	466a      	mov	r2, sp
 8011ba6:	f000 f849 	bl	8011c3c <_fstat_r>
 8011baa:	2800      	cmp	r0, #0
 8011bac:	dbed      	blt.n	8011b8a <__swhatbuf_r+0x12>
 8011bae:	9901      	ldr	r1, [sp, #4]
 8011bb0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011bb4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011bb8:	4259      	negs	r1, r3
 8011bba:	4159      	adcs	r1, r3
 8011bbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011bc0:	e7eb      	b.n	8011b9a <__swhatbuf_r+0x22>

08011bc2 <__smakebuf_r>:
 8011bc2:	898b      	ldrh	r3, [r1, #12]
 8011bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011bc6:	079d      	lsls	r5, r3, #30
 8011bc8:	4606      	mov	r6, r0
 8011bca:	460c      	mov	r4, r1
 8011bcc:	d507      	bpl.n	8011bde <__smakebuf_r+0x1c>
 8011bce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011bd2:	6023      	str	r3, [r4, #0]
 8011bd4:	6123      	str	r3, [r4, #16]
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	6163      	str	r3, [r4, #20]
 8011bda:	b003      	add	sp, #12
 8011bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bde:	466a      	mov	r2, sp
 8011be0:	ab01      	add	r3, sp, #4
 8011be2:	f7ff ffc9 	bl	8011b78 <__swhatbuf_r>
 8011be6:	9f00      	ldr	r7, [sp, #0]
 8011be8:	4605      	mov	r5, r0
 8011bea:	4639      	mov	r1, r7
 8011bec:	4630      	mov	r0, r6
 8011bee:	f7fd fa0b 	bl	800f008 <_malloc_r>
 8011bf2:	b948      	cbnz	r0, 8011c08 <__smakebuf_r+0x46>
 8011bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bf8:	059a      	lsls	r2, r3, #22
 8011bfa:	d4ee      	bmi.n	8011bda <__smakebuf_r+0x18>
 8011bfc:	f023 0303 	bic.w	r3, r3, #3
 8011c00:	f043 0302 	orr.w	r3, r3, #2
 8011c04:	81a3      	strh	r3, [r4, #12]
 8011c06:	e7e2      	b.n	8011bce <__smakebuf_r+0xc>
 8011c08:	89a3      	ldrh	r3, [r4, #12]
 8011c0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c12:	81a3      	strh	r3, [r4, #12]
 8011c14:	9b01      	ldr	r3, [sp, #4]
 8011c16:	6020      	str	r0, [r4, #0]
 8011c18:	b15b      	cbz	r3, 8011c32 <__smakebuf_r+0x70>
 8011c1a:	4630      	mov	r0, r6
 8011c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c20:	f000 f81e 	bl	8011c60 <_isatty_r>
 8011c24:	b128      	cbz	r0, 8011c32 <__smakebuf_r+0x70>
 8011c26:	89a3      	ldrh	r3, [r4, #12]
 8011c28:	f023 0303 	bic.w	r3, r3, #3
 8011c2c:	f043 0301 	orr.w	r3, r3, #1
 8011c30:	81a3      	strh	r3, [r4, #12]
 8011c32:	89a3      	ldrh	r3, [r4, #12]
 8011c34:	431d      	orrs	r5, r3
 8011c36:	81a5      	strh	r5, [r4, #12]
 8011c38:	e7cf      	b.n	8011bda <__smakebuf_r+0x18>
	...

08011c3c <_fstat_r>:
 8011c3c:	b538      	push	{r3, r4, r5, lr}
 8011c3e:	2300      	movs	r3, #0
 8011c40:	4d06      	ldr	r5, [pc, #24]	@ (8011c5c <_fstat_r+0x20>)
 8011c42:	4604      	mov	r4, r0
 8011c44:	4608      	mov	r0, r1
 8011c46:	4611      	mov	r1, r2
 8011c48:	602b      	str	r3, [r5, #0]
 8011c4a:	f7f1 fff9 	bl	8003c40 <_fstat>
 8011c4e:	1c43      	adds	r3, r0, #1
 8011c50:	d102      	bne.n	8011c58 <_fstat_r+0x1c>
 8011c52:	682b      	ldr	r3, [r5, #0]
 8011c54:	b103      	cbz	r3, 8011c58 <_fstat_r+0x1c>
 8011c56:	6023      	str	r3, [r4, #0]
 8011c58:	bd38      	pop	{r3, r4, r5, pc}
 8011c5a:	bf00      	nop
 8011c5c:	20002bb0 	.word	0x20002bb0

08011c60 <_isatty_r>:
 8011c60:	b538      	push	{r3, r4, r5, lr}
 8011c62:	2300      	movs	r3, #0
 8011c64:	4d05      	ldr	r5, [pc, #20]	@ (8011c7c <_isatty_r+0x1c>)
 8011c66:	4604      	mov	r4, r0
 8011c68:	4608      	mov	r0, r1
 8011c6a:	602b      	str	r3, [r5, #0]
 8011c6c:	f7f1 fff7 	bl	8003c5e <_isatty>
 8011c70:	1c43      	adds	r3, r0, #1
 8011c72:	d102      	bne.n	8011c7a <_isatty_r+0x1a>
 8011c74:	682b      	ldr	r3, [r5, #0]
 8011c76:	b103      	cbz	r3, 8011c7a <_isatty_r+0x1a>
 8011c78:	6023      	str	r3, [r4, #0]
 8011c7a:	bd38      	pop	{r3, r4, r5, pc}
 8011c7c:	20002bb0 	.word	0x20002bb0

08011c80 <pow>:
 8011c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c84:	4614      	mov	r4, r2
 8011c86:	461d      	mov	r5, r3
 8011c88:	4680      	mov	r8, r0
 8011c8a:	4689      	mov	r9, r1
 8011c8c:	f000 f868 	bl	8011d60 <__ieee754_pow>
 8011c90:	4622      	mov	r2, r4
 8011c92:	4606      	mov	r6, r0
 8011c94:	460f      	mov	r7, r1
 8011c96:	462b      	mov	r3, r5
 8011c98:	4620      	mov	r0, r4
 8011c9a:	4629      	mov	r1, r5
 8011c9c:	f7ee feb6 	bl	8000a0c <__aeabi_dcmpun>
 8011ca0:	bbc8      	cbnz	r0, 8011d16 <pow+0x96>
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	4640      	mov	r0, r8
 8011ca8:	4649      	mov	r1, r9
 8011caa:	f7ee fe7d 	bl	80009a8 <__aeabi_dcmpeq>
 8011cae:	b1b8      	cbz	r0, 8011ce0 <pow+0x60>
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	4620      	mov	r0, r4
 8011cb6:	4629      	mov	r1, r5
 8011cb8:	f7ee fe76 	bl	80009a8 <__aeabi_dcmpeq>
 8011cbc:	2800      	cmp	r0, #0
 8011cbe:	d141      	bne.n	8011d44 <pow+0xc4>
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	4629      	mov	r1, r5
 8011cc4:	f000 f844 	bl	8011d50 <finite>
 8011cc8:	b328      	cbz	r0, 8011d16 <pow+0x96>
 8011cca:	2200      	movs	r2, #0
 8011ccc:	2300      	movs	r3, #0
 8011cce:	4620      	mov	r0, r4
 8011cd0:	4629      	mov	r1, r5
 8011cd2:	f7ee fe73 	bl	80009bc <__aeabi_dcmplt>
 8011cd6:	b1f0      	cbz	r0, 8011d16 <pow+0x96>
 8011cd8:	f7fe f81a 	bl	800fd10 <__errno>
 8011cdc:	2322      	movs	r3, #34	@ 0x22
 8011cde:	e019      	b.n	8011d14 <pow+0x94>
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	4639      	mov	r1, r7
 8011ce4:	f000 f834 	bl	8011d50 <finite>
 8011ce8:	b9c8      	cbnz	r0, 8011d1e <pow+0x9e>
 8011cea:	4640      	mov	r0, r8
 8011cec:	4649      	mov	r1, r9
 8011cee:	f000 f82f 	bl	8011d50 <finite>
 8011cf2:	b1a0      	cbz	r0, 8011d1e <pow+0x9e>
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	4629      	mov	r1, r5
 8011cf8:	f000 f82a 	bl	8011d50 <finite>
 8011cfc:	b178      	cbz	r0, 8011d1e <pow+0x9e>
 8011cfe:	4632      	mov	r2, r6
 8011d00:	463b      	mov	r3, r7
 8011d02:	4630      	mov	r0, r6
 8011d04:	4639      	mov	r1, r7
 8011d06:	f7ee fe81 	bl	8000a0c <__aeabi_dcmpun>
 8011d0a:	2800      	cmp	r0, #0
 8011d0c:	d0e4      	beq.n	8011cd8 <pow+0x58>
 8011d0e:	f7fd ffff 	bl	800fd10 <__errno>
 8011d12:	2321      	movs	r3, #33	@ 0x21
 8011d14:	6003      	str	r3, [r0, #0]
 8011d16:	4630      	mov	r0, r6
 8011d18:	4639      	mov	r1, r7
 8011d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d1e:	2200      	movs	r2, #0
 8011d20:	2300      	movs	r3, #0
 8011d22:	4630      	mov	r0, r6
 8011d24:	4639      	mov	r1, r7
 8011d26:	f7ee fe3f 	bl	80009a8 <__aeabi_dcmpeq>
 8011d2a:	2800      	cmp	r0, #0
 8011d2c:	d0f3      	beq.n	8011d16 <pow+0x96>
 8011d2e:	4640      	mov	r0, r8
 8011d30:	4649      	mov	r1, r9
 8011d32:	f000 f80d 	bl	8011d50 <finite>
 8011d36:	2800      	cmp	r0, #0
 8011d38:	d0ed      	beq.n	8011d16 <pow+0x96>
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	4629      	mov	r1, r5
 8011d3e:	f000 f807 	bl	8011d50 <finite>
 8011d42:	e7c8      	b.n	8011cd6 <pow+0x56>
 8011d44:	2600      	movs	r6, #0
 8011d46:	4f01      	ldr	r7, [pc, #4]	@ (8011d4c <pow+0xcc>)
 8011d48:	e7e5      	b.n	8011d16 <pow+0x96>
 8011d4a:	bf00      	nop
 8011d4c:	3ff00000 	.word	0x3ff00000

08011d50 <finite>:
 8011d50:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8011d54:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8011d58:	0fc0      	lsrs	r0, r0, #31
 8011d5a:	4770      	bx	lr
 8011d5c:	0000      	movs	r0, r0
	...

08011d60 <__ieee754_pow>:
 8011d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d64:	b091      	sub	sp, #68	@ 0x44
 8011d66:	e9cd 2300 	strd	r2, r3, [sp]
 8011d6a:	468b      	mov	fp, r1
 8011d6c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8011d70:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8011d74:	4682      	mov	sl, r0
 8011d76:	ea57 0001 	orrs.w	r0, r7, r1
 8011d7a:	d112      	bne.n	8011da2 <__ieee754_pow+0x42>
 8011d7c:	4653      	mov	r3, sl
 8011d7e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8011d82:	18db      	adds	r3, r3, r3
 8011d84:	4152      	adcs	r2, r2
 8011d86:	4298      	cmp	r0, r3
 8011d88:	4b91      	ldr	r3, [pc, #580]	@ (8011fd0 <__ieee754_pow+0x270>)
 8011d8a:	4193      	sbcs	r3, r2
 8011d8c:	f080 84ce 	bcs.w	801272c <__ieee754_pow+0x9cc>
 8011d90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d94:	4650      	mov	r0, sl
 8011d96:	4659      	mov	r1, fp
 8011d98:	f7ee f9e8 	bl	800016c <__adddf3>
 8011d9c:	b011      	add	sp, #68	@ 0x44
 8011d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011da2:	4b8c      	ldr	r3, [pc, #560]	@ (8011fd4 <__ieee754_pow+0x274>)
 8011da4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8011da8:	429e      	cmp	r6, r3
 8011daa:	465d      	mov	r5, fp
 8011dac:	46d1      	mov	r9, sl
 8011dae:	d807      	bhi.n	8011dc0 <__ieee754_pow+0x60>
 8011db0:	d102      	bne.n	8011db8 <__ieee754_pow+0x58>
 8011db2:	f1ba 0f00 	cmp.w	sl, #0
 8011db6:	d1eb      	bne.n	8011d90 <__ieee754_pow+0x30>
 8011db8:	429f      	cmp	r7, r3
 8011dba:	d801      	bhi.n	8011dc0 <__ieee754_pow+0x60>
 8011dbc:	d10f      	bne.n	8011dde <__ieee754_pow+0x7e>
 8011dbe:	b171      	cbz	r1, 8011dde <__ieee754_pow+0x7e>
 8011dc0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8011dc4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8011dc8:	ea55 0509 	orrs.w	r5, r5, r9
 8011dcc:	d1e0      	bne.n	8011d90 <__ieee754_pow+0x30>
 8011dce:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011dd2:	18db      	adds	r3, r3, r3
 8011dd4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8011dd8:	4152      	adcs	r2, r2
 8011dda:	429d      	cmp	r5, r3
 8011ddc:	e7d4      	b.n	8011d88 <__ieee754_pow+0x28>
 8011dde:	2d00      	cmp	r5, #0
 8011de0:	4633      	mov	r3, r6
 8011de2:	da39      	bge.n	8011e58 <__ieee754_pow+0xf8>
 8011de4:	4a7c      	ldr	r2, [pc, #496]	@ (8011fd8 <__ieee754_pow+0x278>)
 8011de6:	4297      	cmp	r7, r2
 8011de8:	d84e      	bhi.n	8011e88 <__ieee754_pow+0x128>
 8011dea:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8011dee:	4297      	cmp	r7, r2
 8011df0:	f240 84ab 	bls.w	801274a <__ieee754_pow+0x9ea>
 8011df4:	153a      	asrs	r2, r7, #20
 8011df6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8011dfa:	2a14      	cmp	r2, #20
 8011dfc:	dd0f      	ble.n	8011e1e <__ieee754_pow+0xbe>
 8011dfe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8011e02:	fa21 f402 	lsr.w	r4, r1, r2
 8011e06:	fa04 f202 	lsl.w	r2, r4, r2
 8011e0a:	428a      	cmp	r2, r1
 8011e0c:	f040 849d 	bne.w	801274a <__ieee754_pow+0x9ea>
 8011e10:	f004 0401 	and.w	r4, r4, #1
 8011e14:	f1c4 0402 	rsb	r4, r4, #2
 8011e18:	2900      	cmp	r1, #0
 8011e1a:	d15a      	bne.n	8011ed2 <__ieee754_pow+0x172>
 8011e1c:	e00e      	b.n	8011e3c <__ieee754_pow+0xdc>
 8011e1e:	2900      	cmp	r1, #0
 8011e20:	d156      	bne.n	8011ed0 <__ieee754_pow+0x170>
 8011e22:	f1c2 0214 	rsb	r2, r2, #20
 8011e26:	fa47 f402 	asr.w	r4, r7, r2
 8011e2a:	fa04 f202 	lsl.w	r2, r4, r2
 8011e2e:	42ba      	cmp	r2, r7
 8011e30:	f040 8488 	bne.w	8012744 <__ieee754_pow+0x9e4>
 8011e34:	f004 0401 	and.w	r4, r4, #1
 8011e38:	f1c4 0402 	rsb	r4, r4, #2
 8011e3c:	4a67      	ldr	r2, [pc, #412]	@ (8011fdc <__ieee754_pow+0x27c>)
 8011e3e:	4297      	cmp	r7, r2
 8011e40:	d130      	bne.n	8011ea4 <__ieee754_pow+0x144>
 8011e42:	f1b8 0f00 	cmp.w	r8, #0
 8011e46:	f280 8479 	bge.w	801273c <__ieee754_pow+0x9dc>
 8011e4a:	4652      	mov	r2, sl
 8011e4c:	465b      	mov	r3, fp
 8011e4e:	2000      	movs	r0, #0
 8011e50:	4962      	ldr	r1, [pc, #392]	@ (8011fdc <__ieee754_pow+0x27c>)
 8011e52:	f7ee fc6b 	bl	800072c <__aeabi_ddiv>
 8011e56:	e7a1      	b.n	8011d9c <__ieee754_pow+0x3c>
 8011e58:	2400      	movs	r4, #0
 8011e5a:	2900      	cmp	r1, #0
 8011e5c:	d139      	bne.n	8011ed2 <__ieee754_pow+0x172>
 8011e5e:	4a5d      	ldr	r2, [pc, #372]	@ (8011fd4 <__ieee754_pow+0x274>)
 8011e60:	4297      	cmp	r7, r2
 8011e62:	d1eb      	bne.n	8011e3c <__ieee754_pow+0xdc>
 8011e64:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8011e68:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8011e6c:	ea53 0309 	orrs.w	r3, r3, r9
 8011e70:	f000 845c 	beq.w	801272c <__ieee754_pow+0x9cc>
 8011e74:	4b5a      	ldr	r3, [pc, #360]	@ (8011fe0 <__ieee754_pow+0x280>)
 8011e76:	429e      	cmp	r6, r3
 8011e78:	d908      	bls.n	8011e8c <__ieee754_pow+0x12c>
 8011e7a:	f1b8 0f00 	cmp.w	r8, #0
 8011e7e:	f2c0 8459 	blt.w	8012734 <__ieee754_pow+0x9d4>
 8011e82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e86:	e789      	b.n	8011d9c <__ieee754_pow+0x3c>
 8011e88:	2402      	movs	r4, #2
 8011e8a:	e7e6      	b.n	8011e5a <__ieee754_pow+0xfa>
 8011e8c:	f1b8 0f00 	cmp.w	r8, #0
 8011e90:	f04f 0000 	mov.w	r0, #0
 8011e94:	f04f 0100 	mov.w	r1, #0
 8011e98:	da80      	bge.n	8011d9c <__ieee754_pow+0x3c>
 8011e9a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011e9e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011ea2:	e77b      	b.n	8011d9c <__ieee754_pow+0x3c>
 8011ea4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8011ea8:	d106      	bne.n	8011eb8 <__ieee754_pow+0x158>
 8011eaa:	4652      	mov	r2, sl
 8011eac:	465b      	mov	r3, fp
 8011eae:	4650      	mov	r0, sl
 8011eb0:	4659      	mov	r1, fp
 8011eb2:	f7ee fb11 	bl	80004d8 <__aeabi_dmul>
 8011eb6:	e771      	b.n	8011d9c <__ieee754_pow+0x3c>
 8011eb8:	4a4a      	ldr	r2, [pc, #296]	@ (8011fe4 <__ieee754_pow+0x284>)
 8011eba:	4590      	cmp	r8, r2
 8011ebc:	d109      	bne.n	8011ed2 <__ieee754_pow+0x172>
 8011ebe:	2d00      	cmp	r5, #0
 8011ec0:	db07      	blt.n	8011ed2 <__ieee754_pow+0x172>
 8011ec2:	4650      	mov	r0, sl
 8011ec4:	4659      	mov	r1, fp
 8011ec6:	b011      	add	sp, #68	@ 0x44
 8011ec8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ecc:	f000 bd12 	b.w	80128f4 <__ieee754_sqrt>
 8011ed0:	2400      	movs	r4, #0
 8011ed2:	4650      	mov	r0, sl
 8011ed4:	4659      	mov	r1, fp
 8011ed6:	9302      	str	r3, [sp, #8]
 8011ed8:	f000 fc6a 	bl	80127b0 <fabs>
 8011edc:	9b02      	ldr	r3, [sp, #8]
 8011ede:	f1b9 0f00 	cmp.w	r9, #0
 8011ee2:	d127      	bne.n	8011f34 <__ieee754_pow+0x1d4>
 8011ee4:	4a3d      	ldr	r2, [pc, #244]	@ (8011fdc <__ieee754_pow+0x27c>)
 8011ee6:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8011eea:	4594      	cmp	ip, r2
 8011eec:	d000      	beq.n	8011ef0 <__ieee754_pow+0x190>
 8011eee:	bb0e      	cbnz	r6, 8011f34 <__ieee754_pow+0x1d4>
 8011ef0:	f1b8 0f00 	cmp.w	r8, #0
 8011ef4:	da05      	bge.n	8011f02 <__ieee754_pow+0x1a2>
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	460b      	mov	r3, r1
 8011efa:	2000      	movs	r0, #0
 8011efc:	4937      	ldr	r1, [pc, #220]	@ (8011fdc <__ieee754_pow+0x27c>)
 8011efe:	f7ee fc15 	bl	800072c <__aeabi_ddiv>
 8011f02:	2d00      	cmp	r5, #0
 8011f04:	f6bf af4a 	bge.w	8011d9c <__ieee754_pow+0x3c>
 8011f08:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8011f0c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8011f10:	4326      	orrs	r6, r4
 8011f12:	d108      	bne.n	8011f26 <__ieee754_pow+0x1c6>
 8011f14:	4602      	mov	r2, r0
 8011f16:	460b      	mov	r3, r1
 8011f18:	4610      	mov	r0, r2
 8011f1a:	4619      	mov	r1, r3
 8011f1c:	f7ee f924 	bl	8000168 <__aeabi_dsub>
 8011f20:	4602      	mov	r2, r0
 8011f22:	460b      	mov	r3, r1
 8011f24:	e795      	b.n	8011e52 <__ieee754_pow+0xf2>
 8011f26:	2c01      	cmp	r4, #1
 8011f28:	f47f af38 	bne.w	8011d9c <__ieee754_pow+0x3c>
 8011f2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011f30:	4619      	mov	r1, r3
 8011f32:	e733      	b.n	8011d9c <__ieee754_pow+0x3c>
 8011f34:	0fea      	lsrs	r2, r5, #31
 8011f36:	3a01      	subs	r2, #1
 8011f38:	ea52 0c04 	orrs.w	ip, r2, r4
 8011f3c:	d102      	bne.n	8011f44 <__ieee754_pow+0x1e4>
 8011f3e:	4652      	mov	r2, sl
 8011f40:	465b      	mov	r3, fp
 8011f42:	e7e9      	b.n	8011f18 <__ieee754_pow+0x1b8>
 8011f44:	f04f 0900 	mov.w	r9, #0
 8011f48:	3c01      	subs	r4, #1
 8011f4a:	4314      	orrs	r4, r2
 8011f4c:	bf14      	ite	ne
 8011f4e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8011fdc <__ieee754_pow+0x27c>
 8011f52:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8011fe8 <__ieee754_pow+0x288>
 8011f56:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8011f5a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8011f5e:	f240 8107 	bls.w	8012170 <__ieee754_pow+0x410>
 8011f62:	4b22      	ldr	r3, [pc, #136]	@ (8011fec <__ieee754_pow+0x28c>)
 8011f64:	429f      	cmp	r7, r3
 8011f66:	4b1e      	ldr	r3, [pc, #120]	@ (8011fe0 <__ieee754_pow+0x280>)
 8011f68:	d913      	bls.n	8011f92 <__ieee754_pow+0x232>
 8011f6a:	429e      	cmp	r6, r3
 8011f6c:	d808      	bhi.n	8011f80 <__ieee754_pow+0x220>
 8011f6e:	f1b8 0f00 	cmp.w	r8, #0
 8011f72:	da08      	bge.n	8011f86 <__ieee754_pow+0x226>
 8011f74:	2000      	movs	r0, #0
 8011f76:	b011      	add	sp, #68	@ 0x44
 8011f78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f7c:	f000 bcb4 	b.w	80128e8 <__math_oflow>
 8011f80:	f1b8 0f00 	cmp.w	r8, #0
 8011f84:	dcf6      	bgt.n	8011f74 <__ieee754_pow+0x214>
 8011f86:	2000      	movs	r0, #0
 8011f88:	b011      	add	sp, #68	@ 0x44
 8011f8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f8e:	f000 bca6 	b.w	80128de <__math_uflow>
 8011f92:	429e      	cmp	r6, r3
 8011f94:	d20c      	bcs.n	8011fb0 <__ieee754_pow+0x250>
 8011f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	f7ee fd0d 	bl	80009bc <__aeabi_dcmplt>
 8011fa2:	3800      	subs	r0, #0
 8011fa4:	bf18      	it	ne
 8011fa6:	2001      	movne	r0, #1
 8011fa8:	f1b8 0f00 	cmp.w	r8, #0
 8011fac:	daec      	bge.n	8011f88 <__ieee754_pow+0x228>
 8011fae:	e7e2      	b.n	8011f76 <__ieee754_pow+0x216>
 8011fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8011fdc <__ieee754_pow+0x27c>)
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	429e      	cmp	r6, r3
 8011fb6:	d91b      	bls.n	8011ff0 <__ieee754_pow+0x290>
 8011fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	f7ee fcfd 	bl	80009bc <__aeabi_dcmplt>
 8011fc2:	3800      	subs	r0, #0
 8011fc4:	bf18      	it	ne
 8011fc6:	2001      	movne	r0, #1
 8011fc8:	f1b8 0f00 	cmp.w	r8, #0
 8011fcc:	dcd3      	bgt.n	8011f76 <__ieee754_pow+0x216>
 8011fce:	e7db      	b.n	8011f88 <__ieee754_pow+0x228>
 8011fd0:	fff00000 	.word	0xfff00000
 8011fd4:	7ff00000 	.word	0x7ff00000
 8011fd8:	433fffff 	.word	0x433fffff
 8011fdc:	3ff00000 	.word	0x3ff00000
 8011fe0:	3fefffff 	.word	0x3fefffff
 8011fe4:	3fe00000 	.word	0x3fe00000
 8011fe8:	bff00000 	.word	0xbff00000
 8011fec:	43f00000 	.word	0x43f00000
 8011ff0:	4b5b      	ldr	r3, [pc, #364]	@ (8012160 <__ieee754_pow+0x400>)
 8011ff2:	f7ee f8b9 	bl	8000168 <__aeabi_dsub>
 8011ff6:	a352      	add	r3, pc, #328	@ (adr r3, 8012140 <__ieee754_pow+0x3e0>)
 8011ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ffc:	4604      	mov	r4, r0
 8011ffe:	460d      	mov	r5, r1
 8012000:	f7ee fa6a 	bl	80004d8 <__aeabi_dmul>
 8012004:	a350      	add	r3, pc, #320	@ (adr r3, 8012148 <__ieee754_pow+0x3e8>)
 8012006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801200a:	4606      	mov	r6, r0
 801200c:	460f      	mov	r7, r1
 801200e:	4620      	mov	r0, r4
 8012010:	4629      	mov	r1, r5
 8012012:	f7ee fa61 	bl	80004d8 <__aeabi_dmul>
 8012016:	2200      	movs	r2, #0
 8012018:	4682      	mov	sl, r0
 801201a:	468b      	mov	fp, r1
 801201c:	4620      	mov	r0, r4
 801201e:	4629      	mov	r1, r5
 8012020:	4b50      	ldr	r3, [pc, #320]	@ (8012164 <__ieee754_pow+0x404>)
 8012022:	f7ee fa59 	bl	80004d8 <__aeabi_dmul>
 8012026:	4602      	mov	r2, r0
 8012028:	460b      	mov	r3, r1
 801202a:	a149      	add	r1, pc, #292	@ (adr r1, 8012150 <__ieee754_pow+0x3f0>)
 801202c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012030:	f7ee f89a 	bl	8000168 <__aeabi_dsub>
 8012034:	4622      	mov	r2, r4
 8012036:	462b      	mov	r3, r5
 8012038:	f7ee fa4e 	bl	80004d8 <__aeabi_dmul>
 801203c:	4602      	mov	r2, r0
 801203e:	460b      	mov	r3, r1
 8012040:	2000      	movs	r0, #0
 8012042:	4949      	ldr	r1, [pc, #292]	@ (8012168 <__ieee754_pow+0x408>)
 8012044:	f7ee f890 	bl	8000168 <__aeabi_dsub>
 8012048:	4622      	mov	r2, r4
 801204a:	4680      	mov	r8, r0
 801204c:	4689      	mov	r9, r1
 801204e:	462b      	mov	r3, r5
 8012050:	4620      	mov	r0, r4
 8012052:	4629      	mov	r1, r5
 8012054:	f7ee fa40 	bl	80004d8 <__aeabi_dmul>
 8012058:	4602      	mov	r2, r0
 801205a:	460b      	mov	r3, r1
 801205c:	4640      	mov	r0, r8
 801205e:	4649      	mov	r1, r9
 8012060:	f7ee fa3a 	bl	80004d8 <__aeabi_dmul>
 8012064:	a33c      	add	r3, pc, #240	@ (adr r3, 8012158 <__ieee754_pow+0x3f8>)
 8012066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801206a:	f7ee fa35 	bl	80004d8 <__aeabi_dmul>
 801206e:	4602      	mov	r2, r0
 8012070:	460b      	mov	r3, r1
 8012072:	4650      	mov	r0, sl
 8012074:	4659      	mov	r1, fp
 8012076:	f7ee f877 	bl	8000168 <__aeabi_dsub>
 801207a:	2400      	movs	r4, #0
 801207c:	4602      	mov	r2, r0
 801207e:	460b      	mov	r3, r1
 8012080:	4680      	mov	r8, r0
 8012082:	4689      	mov	r9, r1
 8012084:	4630      	mov	r0, r6
 8012086:	4639      	mov	r1, r7
 8012088:	f7ee f870 	bl	800016c <__adddf3>
 801208c:	4632      	mov	r2, r6
 801208e:	463b      	mov	r3, r7
 8012090:	4620      	mov	r0, r4
 8012092:	460d      	mov	r5, r1
 8012094:	f7ee f868 	bl	8000168 <__aeabi_dsub>
 8012098:	4602      	mov	r2, r0
 801209a:	460b      	mov	r3, r1
 801209c:	4640      	mov	r0, r8
 801209e:	4649      	mov	r1, r9
 80120a0:	f7ee f862 	bl	8000168 <__aeabi_dsub>
 80120a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80120ac:	2300      	movs	r3, #0
 80120ae:	9304      	str	r3, [sp, #16]
 80120b0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80120b4:	4606      	mov	r6, r0
 80120b6:	460f      	mov	r7, r1
 80120b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80120bc:	4652      	mov	r2, sl
 80120be:	465b      	mov	r3, fp
 80120c0:	f7ee f852 	bl	8000168 <__aeabi_dsub>
 80120c4:	4622      	mov	r2, r4
 80120c6:	462b      	mov	r3, r5
 80120c8:	f7ee fa06 	bl	80004d8 <__aeabi_dmul>
 80120cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120d0:	4680      	mov	r8, r0
 80120d2:	4689      	mov	r9, r1
 80120d4:	4630      	mov	r0, r6
 80120d6:	4639      	mov	r1, r7
 80120d8:	f7ee f9fe 	bl	80004d8 <__aeabi_dmul>
 80120dc:	4602      	mov	r2, r0
 80120de:	460b      	mov	r3, r1
 80120e0:	4640      	mov	r0, r8
 80120e2:	4649      	mov	r1, r9
 80120e4:	f7ee f842 	bl	800016c <__adddf3>
 80120e8:	4652      	mov	r2, sl
 80120ea:	465b      	mov	r3, fp
 80120ec:	4606      	mov	r6, r0
 80120ee:	460f      	mov	r7, r1
 80120f0:	4620      	mov	r0, r4
 80120f2:	4629      	mov	r1, r5
 80120f4:	f7ee f9f0 	bl	80004d8 <__aeabi_dmul>
 80120f8:	460b      	mov	r3, r1
 80120fa:	4602      	mov	r2, r0
 80120fc:	4680      	mov	r8, r0
 80120fe:	4689      	mov	r9, r1
 8012100:	4630      	mov	r0, r6
 8012102:	4639      	mov	r1, r7
 8012104:	f7ee f832 	bl	800016c <__adddf3>
 8012108:	4b18      	ldr	r3, [pc, #96]	@ (801216c <__ieee754_pow+0x40c>)
 801210a:	4604      	mov	r4, r0
 801210c:	4299      	cmp	r1, r3
 801210e:	460d      	mov	r5, r1
 8012110:	468a      	mov	sl, r1
 8012112:	468b      	mov	fp, r1
 8012114:	f340 82e0 	ble.w	80126d8 <__ieee754_pow+0x978>
 8012118:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801211c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8012120:	4303      	orrs	r3, r0
 8012122:	f000 81df 	beq.w	80124e4 <__ieee754_pow+0x784>
 8012126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801212a:	2200      	movs	r2, #0
 801212c:	2300      	movs	r3, #0
 801212e:	f7ee fc45 	bl	80009bc <__aeabi_dcmplt>
 8012132:	3800      	subs	r0, #0
 8012134:	bf18      	it	ne
 8012136:	2001      	movne	r0, #1
 8012138:	e71d      	b.n	8011f76 <__ieee754_pow+0x216>
 801213a:	bf00      	nop
 801213c:	f3af 8000 	nop.w
 8012140:	60000000 	.word	0x60000000
 8012144:	3ff71547 	.word	0x3ff71547
 8012148:	f85ddf44 	.word	0xf85ddf44
 801214c:	3e54ae0b 	.word	0x3e54ae0b
 8012150:	55555555 	.word	0x55555555
 8012154:	3fd55555 	.word	0x3fd55555
 8012158:	652b82fe 	.word	0x652b82fe
 801215c:	3ff71547 	.word	0x3ff71547
 8012160:	3ff00000 	.word	0x3ff00000
 8012164:	3fd00000 	.word	0x3fd00000
 8012168:	3fe00000 	.word	0x3fe00000
 801216c:	408fffff 	.word	0x408fffff
 8012170:	4ad3      	ldr	r2, [pc, #844]	@ (80124c0 <__ieee754_pow+0x760>)
 8012172:	402a      	ands	r2, r5
 8012174:	2a00      	cmp	r2, #0
 8012176:	f040 817a 	bne.w	801246e <__ieee754_pow+0x70e>
 801217a:	4bd2      	ldr	r3, [pc, #840]	@ (80124c4 <__ieee754_pow+0x764>)
 801217c:	2200      	movs	r2, #0
 801217e:	f7ee f9ab 	bl	80004d8 <__aeabi_dmul>
 8012182:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8012186:	460b      	mov	r3, r1
 8012188:	151a      	asrs	r2, r3, #20
 801218a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801218e:	4422      	add	r2, r4
 8012190:	920a      	str	r2, [sp, #40]	@ 0x28
 8012192:	4acd      	ldr	r2, [pc, #820]	@ (80124c8 <__ieee754_pow+0x768>)
 8012194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012198:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 801219c:	4293      	cmp	r3, r2
 801219e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80121a2:	dd08      	ble.n	80121b6 <__ieee754_pow+0x456>
 80121a4:	4ac9      	ldr	r2, [pc, #804]	@ (80124cc <__ieee754_pow+0x76c>)
 80121a6:	4293      	cmp	r3, r2
 80121a8:	f340 8163 	ble.w	8012472 <__ieee754_pow+0x712>
 80121ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80121ae:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80121b2:	3301      	adds	r3, #1
 80121b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80121b6:	2600      	movs	r6, #0
 80121b8:	00f3      	lsls	r3, r6, #3
 80121ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80121bc:	4bc4      	ldr	r3, [pc, #784]	@ (80124d0 <__ieee754_pow+0x770>)
 80121be:	4629      	mov	r1, r5
 80121c0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80121c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80121c8:	461a      	mov	r2, r3
 80121ca:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80121ce:	4623      	mov	r3, r4
 80121d0:	4682      	mov	sl, r0
 80121d2:	f7ed ffc9 	bl	8000168 <__aeabi_dsub>
 80121d6:	4652      	mov	r2, sl
 80121d8:	462b      	mov	r3, r5
 80121da:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80121de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80121e2:	f7ed ffc3 	bl	800016c <__adddf3>
 80121e6:	4602      	mov	r2, r0
 80121e8:	460b      	mov	r3, r1
 80121ea:	2000      	movs	r0, #0
 80121ec:	49b9      	ldr	r1, [pc, #740]	@ (80124d4 <__ieee754_pow+0x774>)
 80121ee:	f7ee fa9d 	bl	800072c <__aeabi_ddiv>
 80121f2:	4602      	mov	r2, r0
 80121f4:	460b      	mov	r3, r1
 80121f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80121fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80121fe:	f7ee f96b 	bl	80004d8 <__aeabi_dmul>
 8012202:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012206:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 801220a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801220e:	2300      	movs	r3, #0
 8012210:	2200      	movs	r2, #0
 8012212:	46ab      	mov	fp, r5
 8012214:	106d      	asrs	r5, r5, #1
 8012216:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801221a:	9304      	str	r3, [sp, #16]
 801221c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8012220:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012224:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8012228:	4640      	mov	r0, r8
 801222a:	4649      	mov	r1, r9
 801222c:	4614      	mov	r4, r2
 801222e:	461d      	mov	r5, r3
 8012230:	f7ee f952 	bl	80004d8 <__aeabi_dmul>
 8012234:	4602      	mov	r2, r0
 8012236:	460b      	mov	r3, r1
 8012238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801223c:	f7ed ff94 	bl	8000168 <__aeabi_dsub>
 8012240:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012244:	4606      	mov	r6, r0
 8012246:	460f      	mov	r7, r1
 8012248:	4620      	mov	r0, r4
 801224a:	4629      	mov	r1, r5
 801224c:	f7ed ff8c 	bl	8000168 <__aeabi_dsub>
 8012250:	4602      	mov	r2, r0
 8012252:	460b      	mov	r3, r1
 8012254:	4650      	mov	r0, sl
 8012256:	4659      	mov	r1, fp
 8012258:	f7ed ff86 	bl	8000168 <__aeabi_dsub>
 801225c:	4642      	mov	r2, r8
 801225e:	464b      	mov	r3, r9
 8012260:	f7ee f93a 	bl	80004d8 <__aeabi_dmul>
 8012264:	4602      	mov	r2, r0
 8012266:	460b      	mov	r3, r1
 8012268:	4630      	mov	r0, r6
 801226a:	4639      	mov	r1, r7
 801226c:	f7ed ff7c 	bl	8000168 <__aeabi_dsub>
 8012270:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012274:	f7ee f930 	bl	80004d8 <__aeabi_dmul>
 8012278:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801227c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012280:	4610      	mov	r0, r2
 8012282:	4619      	mov	r1, r3
 8012284:	f7ee f928 	bl	80004d8 <__aeabi_dmul>
 8012288:	a37b      	add	r3, pc, #492	@ (adr r3, 8012478 <__ieee754_pow+0x718>)
 801228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228e:	4604      	mov	r4, r0
 8012290:	460d      	mov	r5, r1
 8012292:	f7ee f921 	bl	80004d8 <__aeabi_dmul>
 8012296:	a37a      	add	r3, pc, #488	@ (adr r3, 8012480 <__ieee754_pow+0x720>)
 8012298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801229c:	f7ed ff66 	bl	800016c <__adddf3>
 80122a0:	4622      	mov	r2, r4
 80122a2:	462b      	mov	r3, r5
 80122a4:	f7ee f918 	bl	80004d8 <__aeabi_dmul>
 80122a8:	a377      	add	r3, pc, #476	@ (adr r3, 8012488 <__ieee754_pow+0x728>)
 80122aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ae:	f7ed ff5d 	bl	800016c <__adddf3>
 80122b2:	4622      	mov	r2, r4
 80122b4:	462b      	mov	r3, r5
 80122b6:	f7ee f90f 	bl	80004d8 <__aeabi_dmul>
 80122ba:	a375      	add	r3, pc, #468	@ (adr r3, 8012490 <__ieee754_pow+0x730>)
 80122bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c0:	f7ed ff54 	bl	800016c <__adddf3>
 80122c4:	4622      	mov	r2, r4
 80122c6:	462b      	mov	r3, r5
 80122c8:	f7ee f906 	bl	80004d8 <__aeabi_dmul>
 80122cc:	a372      	add	r3, pc, #456	@ (adr r3, 8012498 <__ieee754_pow+0x738>)
 80122ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d2:	f7ed ff4b 	bl	800016c <__adddf3>
 80122d6:	4622      	mov	r2, r4
 80122d8:	462b      	mov	r3, r5
 80122da:	f7ee f8fd 	bl	80004d8 <__aeabi_dmul>
 80122de:	a370      	add	r3, pc, #448	@ (adr r3, 80124a0 <__ieee754_pow+0x740>)
 80122e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e4:	f7ed ff42 	bl	800016c <__adddf3>
 80122e8:	4622      	mov	r2, r4
 80122ea:	4606      	mov	r6, r0
 80122ec:	460f      	mov	r7, r1
 80122ee:	462b      	mov	r3, r5
 80122f0:	4620      	mov	r0, r4
 80122f2:	4629      	mov	r1, r5
 80122f4:	f7ee f8f0 	bl	80004d8 <__aeabi_dmul>
 80122f8:	4602      	mov	r2, r0
 80122fa:	460b      	mov	r3, r1
 80122fc:	4630      	mov	r0, r6
 80122fe:	4639      	mov	r1, r7
 8012300:	f7ee f8ea 	bl	80004d8 <__aeabi_dmul>
 8012304:	4604      	mov	r4, r0
 8012306:	460d      	mov	r5, r1
 8012308:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801230c:	4642      	mov	r2, r8
 801230e:	464b      	mov	r3, r9
 8012310:	f7ed ff2c 	bl	800016c <__adddf3>
 8012314:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012318:	f7ee f8de 	bl	80004d8 <__aeabi_dmul>
 801231c:	4622      	mov	r2, r4
 801231e:	462b      	mov	r3, r5
 8012320:	f7ed ff24 	bl	800016c <__adddf3>
 8012324:	4642      	mov	r2, r8
 8012326:	4682      	mov	sl, r0
 8012328:	468b      	mov	fp, r1
 801232a:	464b      	mov	r3, r9
 801232c:	4640      	mov	r0, r8
 801232e:	4649      	mov	r1, r9
 8012330:	f7ee f8d2 	bl	80004d8 <__aeabi_dmul>
 8012334:	2200      	movs	r2, #0
 8012336:	4b68      	ldr	r3, [pc, #416]	@ (80124d8 <__ieee754_pow+0x778>)
 8012338:	4606      	mov	r6, r0
 801233a:	460f      	mov	r7, r1
 801233c:	f7ed ff16 	bl	800016c <__adddf3>
 8012340:	4652      	mov	r2, sl
 8012342:	465b      	mov	r3, fp
 8012344:	f7ed ff12 	bl	800016c <__adddf3>
 8012348:	2400      	movs	r4, #0
 801234a:	460d      	mov	r5, r1
 801234c:	4622      	mov	r2, r4
 801234e:	460b      	mov	r3, r1
 8012350:	4640      	mov	r0, r8
 8012352:	4649      	mov	r1, r9
 8012354:	f7ee f8c0 	bl	80004d8 <__aeabi_dmul>
 8012358:	2200      	movs	r2, #0
 801235a:	4680      	mov	r8, r0
 801235c:	4689      	mov	r9, r1
 801235e:	4620      	mov	r0, r4
 8012360:	4629      	mov	r1, r5
 8012362:	4b5d      	ldr	r3, [pc, #372]	@ (80124d8 <__ieee754_pow+0x778>)
 8012364:	f7ed ff00 	bl	8000168 <__aeabi_dsub>
 8012368:	4632      	mov	r2, r6
 801236a:	463b      	mov	r3, r7
 801236c:	f7ed fefc 	bl	8000168 <__aeabi_dsub>
 8012370:	4602      	mov	r2, r0
 8012372:	460b      	mov	r3, r1
 8012374:	4650      	mov	r0, sl
 8012376:	4659      	mov	r1, fp
 8012378:	f7ed fef6 	bl	8000168 <__aeabi_dsub>
 801237c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012380:	f7ee f8aa 	bl	80004d8 <__aeabi_dmul>
 8012384:	4622      	mov	r2, r4
 8012386:	4606      	mov	r6, r0
 8012388:	460f      	mov	r7, r1
 801238a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801238e:	462b      	mov	r3, r5
 8012390:	f7ee f8a2 	bl	80004d8 <__aeabi_dmul>
 8012394:	4602      	mov	r2, r0
 8012396:	460b      	mov	r3, r1
 8012398:	4630      	mov	r0, r6
 801239a:	4639      	mov	r1, r7
 801239c:	f7ed fee6 	bl	800016c <__adddf3>
 80123a0:	2400      	movs	r4, #0
 80123a2:	4606      	mov	r6, r0
 80123a4:	460f      	mov	r7, r1
 80123a6:	4602      	mov	r2, r0
 80123a8:	460b      	mov	r3, r1
 80123aa:	4640      	mov	r0, r8
 80123ac:	4649      	mov	r1, r9
 80123ae:	f7ed fedd 	bl	800016c <__adddf3>
 80123b2:	a33d      	add	r3, pc, #244	@ (adr r3, 80124a8 <__ieee754_pow+0x748>)
 80123b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b8:	4620      	mov	r0, r4
 80123ba:	460d      	mov	r5, r1
 80123bc:	f7ee f88c 	bl	80004d8 <__aeabi_dmul>
 80123c0:	4642      	mov	r2, r8
 80123c2:	464b      	mov	r3, r9
 80123c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80123c8:	4620      	mov	r0, r4
 80123ca:	4629      	mov	r1, r5
 80123cc:	f7ed fecc 	bl	8000168 <__aeabi_dsub>
 80123d0:	4602      	mov	r2, r0
 80123d2:	460b      	mov	r3, r1
 80123d4:	4630      	mov	r0, r6
 80123d6:	4639      	mov	r1, r7
 80123d8:	f7ed fec6 	bl	8000168 <__aeabi_dsub>
 80123dc:	a334      	add	r3, pc, #208	@ (adr r3, 80124b0 <__ieee754_pow+0x750>)
 80123de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e2:	f7ee f879 	bl	80004d8 <__aeabi_dmul>
 80123e6:	a334      	add	r3, pc, #208	@ (adr r3, 80124b8 <__ieee754_pow+0x758>)
 80123e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ec:	4606      	mov	r6, r0
 80123ee:	460f      	mov	r7, r1
 80123f0:	4620      	mov	r0, r4
 80123f2:	4629      	mov	r1, r5
 80123f4:	f7ee f870 	bl	80004d8 <__aeabi_dmul>
 80123f8:	4602      	mov	r2, r0
 80123fa:	460b      	mov	r3, r1
 80123fc:	4630      	mov	r0, r6
 80123fe:	4639      	mov	r1, r7
 8012400:	f7ed feb4 	bl	800016c <__adddf3>
 8012404:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012406:	4b35      	ldr	r3, [pc, #212]	@ (80124dc <__ieee754_pow+0x77c>)
 8012408:	2400      	movs	r4, #0
 801240a:	4413      	add	r3, r2
 801240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012410:	f7ed feac 	bl	800016c <__adddf3>
 8012414:	4682      	mov	sl, r0
 8012416:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012418:	468b      	mov	fp, r1
 801241a:	f7ed fff3 	bl	8000404 <__aeabi_i2d>
 801241e:	4606      	mov	r6, r0
 8012420:	460f      	mov	r7, r1
 8012422:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012424:	4b2e      	ldr	r3, [pc, #184]	@ (80124e0 <__ieee754_pow+0x780>)
 8012426:	4413      	add	r3, r2
 8012428:	e9d3 8900 	ldrd	r8, r9, [r3]
 801242c:	4652      	mov	r2, sl
 801242e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012432:	465b      	mov	r3, fp
 8012434:	f7ed fe9a 	bl	800016c <__adddf3>
 8012438:	4642      	mov	r2, r8
 801243a:	464b      	mov	r3, r9
 801243c:	f7ed fe96 	bl	800016c <__adddf3>
 8012440:	4632      	mov	r2, r6
 8012442:	463b      	mov	r3, r7
 8012444:	f7ed fe92 	bl	800016c <__adddf3>
 8012448:	4632      	mov	r2, r6
 801244a:	463b      	mov	r3, r7
 801244c:	4620      	mov	r0, r4
 801244e:	460d      	mov	r5, r1
 8012450:	f7ed fe8a 	bl	8000168 <__aeabi_dsub>
 8012454:	4642      	mov	r2, r8
 8012456:	464b      	mov	r3, r9
 8012458:	f7ed fe86 	bl	8000168 <__aeabi_dsub>
 801245c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012460:	f7ed fe82 	bl	8000168 <__aeabi_dsub>
 8012464:	4602      	mov	r2, r0
 8012466:	460b      	mov	r3, r1
 8012468:	4650      	mov	r0, sl
 801246a:	4659      	mov	r1, fp
 801246c:	e618      	b.n	80120a0 <__ieee754_pow+0x340>
 801246e:	2400      	movs	r4, #0
 8012470:	e68a      	b.n	8012188 <__ieee754_pow+0x428>
 8012472:	2601      	movs	r6, #1
 8012474:	e6a0      	b.n	80121b8 <__ieee754_pow+0x458>
 8012476:	bf00      	nop
 8012478:	4a454eef 	.word	0x4a454eef
 801247c:	3fca7e28 	.word	0x3fca7e28
 8012480:	93c9db65 	.word	0x93c9db65
 8012484:	3fcd864a 	.word	0x3fcd864a
 8012488:	a91d4101 	.word	0xa91d4101
 801248c:	3fd17460 	.word	0x3fd17460
 8012490:	518f264d 	.word	0x518f264d
 8012494:	3fd55555 	.word	0x3fd55555
 8012498:	db6fabff 	.word	0xdb6fabff
 801249c:	3fdb6db6 	.word	0x3fdb6db6
 80124a0:	33333303 	.word	0x33333303
 80124a4:	3fe33333 	.word	0x3fe33333
 80124a8:	e0000000 	.word	0xe0000000
 80124ac:	3feec709 	.word	0x3feec709
 80124b0:	dc3a03fd 	.word	0xdc3a03fd
 80124b4:	3feec709 	.word	0x3feec709
 80124b8:	145b01f5 	.word	0x145b01f5
 80124bc:	be3e2fe0 	.word	0xbe3e2fe0
 80124c0:	7ff00000 	.word	0x7ff00000
 80124c4:	43400000 	.word	0x43400000
 80124c8:	0003988e 	.word	0x0003988e
 80124cc:	000bb679 	.word	0x000bb679
 80124d0:	08013058 	.word	0x08013058
 80124d4:	3ff00000 	.word	0x3ff00000
 80124d8:	40080000 	.word	0x40080000
 80124dc:	08013038 	.word	0x08013038
 80124e0:	08013048 	.word	0x08013048
 80124e4:	a39a      	add	r3, pc, #616	@ (adr r3, 8012750 <__ieee754_pow+0x9f0>)
 80124e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ea:	4630      	mov	r0, r6
 80124ec:	4639      	mov	r1, r7
 80124ee:	f7ed fe3d 	bl	800016c <__adddf3>
 80124f2:	4642      	mov	r2, r8
 80124f4:	e9cd 0100 	strd	r0, r1, [sp]
 80124f8:	464b      	mov	r3, r9
 80124fa:	4620      	mov	r0, r4
 80124fc:	4629      	mov	r1, r5
 80124fe:	f7ed fe33 	bl	8000168 <__aeabi_dsub>
 8012502:	4602      	mov	r2, r0
 8012504:	460b      	mov	r3, r1
 8012506:	e9dd 0100 	ldrd	r0, r1, [sp]
 801250a:	f7ee fa75 	bl	80009f8 <__aeabi_dcmpgt>
 801250e:	2800      	cmp	r0, #0
 8012510:	f47f ae09 	bne.w	8012126 <__ieee754_pow+0x3c6>
 8012514:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8012518:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801251c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8012520:	fa43 fa0a 	asr.w	sl, r3, sl
 8012524:	44da      	add	sl, fp
 8012526:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801252a:	489b      	ldr	r0, [pc, #620]	@ (8012798 <__ieee754_pow+0xa38>)
 801252c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8012530:	4108      	asrs	r0, r1
 8012532:	ea00 030a 	and.w	r3, r0, sl
 8012536:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801253a:	f1c1 0114 	rsb	r1, r1, #20
 801253e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8012542:	4640      	mov	r0, r8
 8012544:	fa4a fa01 	asr.w	sl, sl, r1
 8012548:	f1bb 0f00 	cmp.w	fp, #0
 801254c:	4649      	mov	r1, r9
 801254e:	f04f 0200 	mov.w	r2, #0
 8012552:	bfb8      	it	lt
 8012554:	f1ca 0a00 	rsblt	sl, sl, #0
 8012558:	f7ed fe06 	bl	8000168 <__aeabi_dsub>
 801255c:	4680      	mov	r8, r0
 801255e:	4689      	mov	r9, r1
 8012560:	2400      	movs	r4, #0
 8012562:	4632      	mov	r2, r6
 8012564:	463b      	mov	r3, r7
 8012566:	4640      	mov	r0, r8
 8012568:	4649      	mov	r1, r9
 801256a:	f7ed fdff 	bl	800016c <__adddf3>
 801256e:	a37a      	add	r3, pc, #488	@ (adr r3, 8012758 <__ieee754_pow+0x9f8>)
 8012570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012574:	4620      	mov	r0, r4
 8012576:	460d      	mov	r5, r1
 8012578:	f7ed ffae 	bl	80004d8 <__aeabi_dmul>
 801257c:	4642      	mov	r2, r8
 801257e:	464b      	mov	r3, r9
 8012580:	e9cd 0100 	strd	r0, r1, [sp]
 8012584:	4620      	mov	r0, r4
 8012586:	4629      	mov	r1, r5
 8012588:	f7ed fdee 	bl	8000168 <__aeabi_dsub>
 801258c:	4602      	mov	r2, r0
 801258e:	460b      	mov	r3, r1
 8012590:	4630      	mov	r0, r6
 8012592:	4639      	mov	r1, r7
 8012594:	f7ed fde8 	bl	8000168 <__aeabi_dsub>
 8012598:	a371      	add	r3, pc, #452	@ (adr r3, 8012760 <__ieee754_pow+0xa00>)
 801259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801259e:	f7ed ff9b 	bl	80004d8 <__aeabi_dmul>
 80125a2:	a371      	add	r3, pc, #452	@ (adr r3, 8012768 <__ieee754_pow+0xa08>)
 80125a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a8:	4680      	mov	r8, r0
 80125aa:	4689      	mov	r9, r1
 80125ac:	4620      	mov	r0, r4
 80125ae:	4629      	mov	r1, r5
 80125b0:	f7ed ff92 	bl	80004d8 <__aeabi_dmul>
 80125b4:	4602      	mov	r2, r0
 80125b6:	460b      	mov	r3, r1
 80125b8:	4640      	mov	r0, r8
 80125ba:	4649      	mov	r1, r9
 80125bc:	f7ed fdd6 	bl	800016c <__adddf3>
 80125c0:	4604      	mov	r4, r0
 80125c2:	460d      	mov	r5, r1
 80125c4:	4602      	mov	r2, r0
 80125c6:	460b      	mov	r3, r1
 80125c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125cc:	f7ed fdce 	bl	800016c <__adddf3>
 80125d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125d4:	4680      	mov	r8, r0
 80125d6:	4689      	mov	r9, r1
 80125d8:	f7ed fdc6 	bl	8000168 <__aeabi_dsub>
 80125dc:	4602      	mov	r2, r0
 80125de:	460b      	mov	r3, r1
 80125e0:	4620      	mov	r0, r4
 80125e2:	4629      	mov	r1, r5
 80125e4:	f7ed fdc0 	bl	8000168 <__aeabi_dsub>
 80125e8:	4642      	mov	r2, r8
 80125ea:	4606      	mov	r6, r0
 80125ec:	460f      	mov	r7, r1
 80125ee:	464b      	mov	r3, r9
 80125f0:	4640      	mov	r0, r8
 80125f2:	4649      	mov	r1, r9
 80125f4:	f7ed ff70 	bl	80004d8 <__aeabi_dmul>
 80125f8:	a35d      	add	r3, pc, #372	@ (adr r3, 8012770 <__ieee754_pow+0xa10>)
 80125fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125fe:	4604      	mov	r4, r0
 8012600:	460d      	mov	r5, r1
 8012602:	f7ed ff69 	bl	80004d8 <__aeabi_dmul>
 8012606:	a35c      	add	r3, pc, #368	@ (adr r3, 8012778 <__ieee754_pow+0xa18>)
 8012608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801260c:	f7ed fdac 	bl	8000168 <__aeabi_dsub>
 8012610:	4622      	mov	r2, r4
 8012612:	462b      	mov	r3, r5
 8012614:	f7ed ff60 	bl	80004d8 <__aeabi_dmul>
 8012618:	a359      	add	r3, pc, #356	@ (adr r3, 8012780 <__ieee754_pow+0xa20>)
 801261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801261e:	f7ed fda5 	bl	800016c <__adddf3>
 8012622:	4622      	mov	r2, r4
 8012624:	462b      	mov	r3, r5
 8012626:	f7ed ff57 	bl	80004d8 <__aeabi_dmul>
 801262a:	a357      	add	r3, pc, #348	@ (adr r3, 8012788 <__ieee754_pow+0xa28>)
 801262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012630:	f7ed fd9a 	bl	8000168 <__aeabi_dsub>
 8012634:	4622      	mov	r2, r4
 8012636:	462b      	mov	r3, r5
 8012638:	f7ed ff4e 	bl	80004d8 <__aeabi_dmul>
 801263c:	a354      	add	r3, pc, #336	@ (adr r3, 8012790 <__ieee754_pow+0xa30>)
 801263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012642:	f7ed fd93 	bl	800016c <__adddf3>
 8012646:	4622      	mov	r2, r4
 8012648:	462b      	mov	r3, r5
 801264a:	f7ed ff45 	bl	80004d8 <__aeabi_dmul>
 801264e:	4602      	mov	r2, r0
 8012650:	460b      	mov	r3, r1
 8012652:	4640      	mov	r0, r8
 8012654:	4649      	mov	r1, r9
 8012656:	f7ed fd87 	bl	8000168 <__aeabi_dsub>
 801265a:	4604      	mov	r4, r0
 801265c:	460d      	mov	r5, r1
 801265e:	4602      	mov	r2, r0
 8012660:	460b      	mov	r3, r1
 8012662:	4640      	mov	r0, r8
 8012664:	4649      	mov	r1, r9
 8012666:	f7ed ff37 	bl	80004d8 <__aeabi_dmul>
 801266a:	2200      	movs	r2, #0
 801266c:	e9cd 0100 	strd	r0, r1, [sp]
 8012670:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012674:	4620      	mov	r0, r4
 8012676:	4629      	mov	r1, r5
 8012678:	f7ed fd76 	bl	8000168 <__aeabi_dsub>
 801267c:	4602      	mov	r2, r0
 801267e:	460b      	mov	r3, r1
 8012680:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012684:	f7ee f852 	bl	800072c <__aeabi_ddiv>
 8012688:	4632      	mov	r2, r6
 801268a:	4604      	mov	r4, r0
 801268c:	460d      	mov	r5, r1
 801268e:	463b      	mov	r3, r7
 8012690:	4640      	mov	r0, r8
 8012692:	4649      	mov	r1, r9
 8012694:	f7ed ff20 	bl	80004d8 <__aeabi_dmul>
 8012698:	4632      	mov	r2, r6
 801269a:	463b      	mov	r3, r7
 801269c:	f7ed fd66 	bl	800016c <__adddf3>
 80126a0:	4602      	mov	r2, r0
 80126a2:	460b      	mov	r3, r1
 80126a4:	4620      	mov	r0, r4
 80126a6:	4629      	mov	r1, r5
 80126a8:	f7ed fd5e 	bl	8000168 <__aeabi_dsub>
 80126ac:	4642      	mov	r2, r8
 80126ae:	464b      	mov	r3, r9
 80126b0:	f7ed fd5a 	bl	8000168 <__aeabi_dsub>
 80126b4:	4602      	mov	r2, r0
 80126b6:	460b      	mov	r3, r1
 80126b8:	2000      	movs	r0, #0
 80126ba:	4938      	ldr	r1, [pc, #224]	@ (801279c <__ieee754_pow+0xa3c>)
 80126bc:	f7ed fd54 	bl	8000168 <__aeabi_dsub>
 80126c0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80126c4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80126c8:	da2e      	bge.n	8012728 <__ieee754_pow+0x9c8>
 80126ca:	4652      	mov	r2, sl
 80126cc:	f000 f874 	bl	80127b8 <scalbn>
 80126d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80126d4:	f7ff bbed 	b.w	8011eb2 <__ieee754_pow+0x152>
 80126d8:	4c31      	ldr	r4, [pc, #196]	@ (80127a0 <__ieee754_pow+0xa40>)
 80126da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80126de:	42a3      	cmp	r3, r4
 80126e0:	d91a      	bls.n	8012718 <__ieee754_pow+0x9b8>
 80126e2:	4b30      	ldr	r3, [pc, #192]	@ (80127a4 <__ieee754_pow+0xa44>)
 80126e4:	440b      	add	r3, r1
 80126e6:	4303      	orrs	r3, r0
 80126e8:	d009      	beq.n	80126fe <__ieee754_pow+0x99e>
 80126ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126ee:	2200      	movs	r2, #0
 80126f0:	2300      	movs	r3, #0
 80126f2:	f7ee f963 	bl	80009bc <__aeabi_dcmplt>
 80126f6:	3800      	subs	r0, #0
 80126f8:	bf18      	it	ne
 80126fa:	2001      	movne	r0, #1
 80126fc:	e444      	b.n	8011f88 <__ieee754_pow+0x228>
 80126fe:	4642      	mov	r2, r8
 8012700:	464b      	mov	r3, r9
 8012702:	f7ed fd31 	bl	8000168 <__aeabi_dsub>
 8012706:	4632      	mov	r2, r6
 8012708:	463b      	mov	r3, r7
 801270a:	f7ee f96b 	bl	80009e4 <__aeabi_dcmpge>
 801270e:	2800      	cmp	r0, #0
 8012710:	d1eb      	bne.n	80126ea <__ieee754_pow+0x98a>
 8012712:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80127a8 <__ieee754_pow+0xa48>
 8012716:	e6fd      	b.n	8012514 <__ieee754_pow+0x7b4>
 8012718:	469a      	mov	sl, r3
 801271a:	4b24      	ldr	r3, [pc, #144]	@ (80127ac <__ieee754_pow+0xa4c>)
 801271c:	459a      	cmp	sl, r3
 801271e:	f63f aef9 	bhi.w	8012514 <__ieee754_pow+0x7b4>
 8012722:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012726:	e71b      	b.n	8012560 <__ieee754_pow+0x800>
 8012728:	4621      	mov	r1, r4
 801272a:	e7d1      	b.n	80126d0 <__ieee754_pow+0x970>
 801272c:	2000      	movs	r0, #0
 801272e:	491b      	ldr	r1, [pc, #108]	@ (801279c <__ieee754_pow+0xa3c>)
 8012730:	f7ff bb34 	b.w	8011d9c <__ieee754_pow+0x3c>
 8012734:	2000      	movs	r0, #0
 8012736:	2100      	movs	r1, #0
 8012738:	f7ff bb30 	b.w	8011d9c <__ieee754_pow+0x3c>
 801273c:	4650      	mov	r0, sl
 801273e:	4659      	mov	r1, fp
 8012740:	f7ff bb2c 	b.w	8011d9c <__ieee754_pow+0x3c>
 8012744:	460c      	mov	r4, r1
 8012746:	f7ff bb79 	b.w	8011e3c <__ieee754_pow+0xdc>
 801274a:	2400      	movs	r4, #0
 801274c:	f7ff bb64 	b.w	8011e18 <__ieee754_pow+0xb8>
 8012750:	652b82fe 	.word	0x652b82fe
 8012754:	3c971547 	.word	0x3c971547
 8012758:	00000000 	.word	0x00000000
 801275c:	3fe62e43 	.word	0x3fe62e43
 8012760:	fefa39ef 	.word	0xfefa39ef
 8012764:	3fe62e42 	.word	0x3fe62e42
 8012768:	0ca86c39 	.word	0x0ca86c39
 801276c:	be205c61 	.word	0xbe205c61
 8012770:	72bea4d0 	.word	0x72bea4d0
 8012774:	3e663769 	.word	0x3e663769
 8012778:	c5d26bf1 	.word	0xc5d26bf1
 801277c:	3ebbbd41 	.word	0x3ebbbd41
 8012780:	af25de2c 	.word	0xaf25de2c
 8012784:	3f11566a 	.word	0x3f11566a
 8012788:	16bebd93 	.word	0x16bebd93
 801278c:	3f66c16c 	.word	0x3f66c16c
 8012790:	5555553e 	.word	0x5555553e
 8012794:	3fc55555 	.word	0x3fc55555
 8012798:	fff00000 	.word	0xfff00000
 801279c:	3ff00000 	.word	0x3ff00000
 80127a0:	4090cbff 	.word	0x4090cbff
 80127a4:	3f6f3400 	.word	0x3f6f3400
 80127a8:	4090cc00 	.word	0x4090cc00
 80127ac:	3fe00000 	.word	0x3fe00000

080127b0 <fabs>:
 80127b0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80127b4:	4619      	mov	r1, r3
 80127b6:	4770      	bx	lr

080127b8 <scalbn>:
 80127b8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80127bc:	4616      	mov	r6, r2
 80127be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80127c2:	4683      	mov	fp, r0
 80127c4:	468c      	mov	ip, r1
 80127c6:	460b      	mov	r3, r1
 80127c8:	b982      	cbnz	r2, 80127ec <scalbn+0x34>
 80127ca:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80127ce:	4303      	orrs	r3, r0
 80127d0:	d039      	beq.n	8012846 <scalbn+0x8e>
 80127d2:	4b2f      	ldr	r3, [pc, #188]	@ (8012890 <scalbn+0xd8>)
 80127d4:	2200      	movs	r2, #0
 80127d6:	f7ed fe7f 	bl	80004d8 <__aeabi_dmul>
 80127da:	4b2e      	ldr	r3, [pc, #184]	@ (8012894 <scalbn+0xdc>)
 80127dc:	4683      	mov	fp, r0
 80127de:	429e      	cmp	r6, r3
 80127e0:	468c      	mov	ip, r1
 80127e2:	da0d      	bge.n	8012800 <scalbn+0x48>
 80127e4:	a326      	add	r3, pc, #152	@ (adr r3, 8012880 <scalbn+0xc8>)
 80127e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ea:	e01b      	b.n	8012824 <scalbn+0x6c>
 80127ec:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80127f0:	42ba      	cmp	r2, r7
 80127f2:	d109      	bne.n	8012808 <scalbn+0x50>
 80127f4:	4602      	mov	r2, r0
 80127f6:	f7ed fcb9 	bl	800016c <__adddf3>
 80127fa:	4683      	mov	fp, r0
 80127fc:	468c      	mov	ip, r1
 80127fe:	e022      	b.n	8012846 <scalbn+0x8e>
 8012800:	460b      	mov	r3, r1
 8012802:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012806:	3a36      	subs	r2, #54	@ 0x36
 8012808:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801280c:	428e      	cmp	r6, r1
 801280e:	dd0c      	ble.n	801282a <scalbn+0x72>
 8012810:	a31d      	add	r3, pc, #116	@ (adr r3, 8012888 <scalbn+0xd0>)
 8012812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012816:	461c      	mov	r4, r3
 8012818:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 801281c:	f361 74df 	bfi	r4, r1, #31, #1
 8012820:	4621      	mov	r1, r4
 8012822:	481d      	ldr	r0, [pc, #116]	@ (8012898 <scalbn+0xe0>)
 8012824:	f7ed fe58 	bl	80004d8 <__aeabi_dmul>
 8012828:	e7e7      	b.n	80127fa <scalbn+0x42>
 801282a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801282e:	4432      	add	r2, r6
 8012830:	428a      	cmp	r2, r1
 8012832:	dced      	bgt.n	8012810 <scalbn+0x58>
 8012834:	2a00      	cmp	r2, #0
 8012836:	dd0a      	ble.n	801284e <scalbn+0x96>
 8012838:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801283c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012840:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012844:	46ac      	mov	ip, r5
 8012846:	4658      	mov	r0, fp
 8012848:	4661      	mov	r1, ip
 801284a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 801284e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8012852:	da09      	bge.n	8012868 <scalbn+0xb0>
 8012854:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8012858:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 801285c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8012860:	480e      	ldr	r0, [pc, #56]	@ (801289c <scalbn+0xe4>)
 8012862:	f041 011f 	orr.w	r1, r1, #31
 8012866:	e7bd      	b.n	80127e4 <scalbn+0x2c>
 8012868:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801286c:	3236      	adds	r2, #54	@ 0x36
 801286e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012872:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012876:	4658      	mov	r0, fp
 8012878:	4629      	mov	r1, r5
 801287a:	2200      	movs	r2, #0
 801287c:	4b08      	ldr	r3, [pc, #32]	@ (80128a0 <scalbn+0xe8>)
 801287e:	e7d1      	b.n	8012824 <scalbn+0x6c>
 8012880:	c2f8f359 	.word	0xc2f8f359
 8012884:	01a56e1f 	.word	0x01a56e1f
 8012888:	8800759c 	.word	0x8800759c
 801288c:	7e37e43c 	.word	0x7e37e43c
 8012890:	43500000 	.word	0x43500000
 8012894:	ffff3cb0 	.word	0xffff3cb0
 8012898:	8800759c 	.word	0x8800759c
 801289c:	c2f8f359 	.word	0xc2f8f359
 80128a0:	3c900000 	.word	0x3c900000

080128a4 <with_errno>:
 80128a4:	b570      	push	{r4, r5, r6, lr}
 80128a6:	4604      	mov	r4, r0
 80128a8:	460d      	mov	r5, r1
 80128aa:	4616      	mov	r6, r2
 80128ac:	f7fd fa30 	bl	800fd10 <__errno>
 80128b0:	4629      	mov	r1, r5
 80128b2:	6006      	str	r6, [r0, #0]
 80128b4:	4620      	mov	r0, r4
 80128b6:	bd70      	pop	{r4, r5, r6, pc}

080128b8 <xflow>:
 80128b8:	b513      	push	{r0, r1, r4, lr}
 80128ba:	4604      	mov	r4, r0
 80128bc:	4619      	mov	r1, r3
 80128be:	4610      	mov	r0, r2
 80128c0:	b10c      	cbz	r4, 80128c6 <xflow+0xe>
 80128c2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80128c6:	e9cd 2300 	strd	r2, r3, [sp]
 80128ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128ce:	f7ed fe03 	bl	80004d8 <__aeabi_dmul>
 80128d2:	2222      	movs	r2, #34	@ 0x22
 80128d4:	b002      	add	sp, #8
 80128d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128da:	f7ff bfe3 	b.w	80128a4 <with_errno>

080128de <__math_uflow>:
 80128de:	2200      	movs	r2, #0
 80128e0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80128e4:	f7ff bfe8 	b.w	80128b8 <xflow>

080128e8 <__math_oflow>:
 80128e8:	2200      	movs	r2, #0
 80128ea:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80128ee:	f7ff bfe3 	b.w	80128b8 <xflow>
	...

080128f4 <__ieee754_sqrt>:
 80128f4:	4a67      	ldr	r2, [pc, #412]	@ (8012a94 <__ieee754_sqrt+0x1a0>)
 80128f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128fa:	438a      	bics	r2, r1
 80128fc:	4606      	mov	r6, r0
 80128fe:	460f      	mov	r7, r1
 8012900:	460b      	mov	r3, r1
 8012902:	4604      	mov	r4, r0
 8012904:	d10e      	bne.n	8012924 <__ieee754_sqrt+0x30>
 8012906:	4602      	mov	r2, r0
 8012908:	f7ed fde6 	bl	80004d8 <__aeabi_dmul>
 801290c:	4602      	mov	r2, r0
 801290e:	460b      	mov	r3, r1
 8012910:	4630      	mov	r0, r6
 8012912:	4639      	mov	r1, r7
 8012914:	f7ed fc2a 	bl	800016c <__adddf3>
 8012918:	4606      	mov	r6, r0
 801291a:	460f      	mov	r7, r1
 801291c:	4630      	mov	r0, r6
 801291e:	4639      	mov	r1, r7
 8012920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012924:	2900      	cmp	r1, #0
 8012926:	dc0c      	bgt.n	8012942 <__ieee754_sqrt+0x4e>
 8012928:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 801292c:	4302      	orrs	r2, r0
 801292e:	d0f5      	beq.n	801291c <__ieee754_sqrt+0x28>
 8012930:	b189      	cbz	r1, 8012956 <__ieee754_sqrt+0x62>
 8012932:	4602      	mov	r2, r0
 8012934:	f7ed fc18 	bl	8000168 <__aeabi_dsub>
 8012938:	4602      	mov	r2, r0
 801293a:	460b      	mov	r3, r1
 801293c:	f7ed fef6 	bl	800072c <__aeabi_ddiv>
 8012940:	e7ea      	b.n	8012918 <__ieee754_sqrt+0x24>
 8012942:	150a      	asrs	r2, r1, #20
 8012944:	d115      	bne.n	8012972 <__ieee754_sqrt+0x7e>
 8012946:	2100      	movs	r1, #0
 8012948:	e009      	b.n	801295e <__ieee754_sqrt+0x6a>
 801294a:	0ae3      	lsrs	r3, r4, #11
 801294c:	3a15      	subs	r2, #21
 801294e:	0564      	lsls	r4, r4, #21
 8012950:	2b00      	cmp	r3, #0
 8012952:	d0fa      	beq.n	801294a <__ieee754_sqrt+0x56>
 8012954:	e7f7      	b.n	8012946 <__ieee754_sqrt+0x52>
 8012956:	460a      	mov	r2, r1
 8012958:	e7fa      	b.n	8012950 <__ieee754_sqrt+0x5c>
 801295a:	005b      	lsls	r3, r3, #1
 801295c:	3101      	adds	r1, #1
 801295e:	02d8      	lsls	r0, r3, #11
 8012960:	d5fb      	bpl.n	801295a <__ieee754_sqrt+0x66>
 8012962:	1e48      	subs	r0, r1, #1
 8012964:	1a12      	subs	r2, r2, r0
 8012966:	f1c1 0020 	rsb	r0, r1, #32
 801296a:	fa24 f000 	lsr.w	r0, r4, r0
 801296e:	4303      	orrs	r3, r0
 8012970:	408c      	lsls	r4, r1
 8012972:	2600      	movs	r6, #0
 8012974:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8012978:	2116      	movs	r1, #22
 801297a:	07d2      	lsls	r2, r2, #31
 801297c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8012980:	4632      	mov	r2, r6
 8012982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012986:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801298a:	bf5c      	itt	pl
 801298c:	005b      	lslpl	r3, r3, #1
 801298e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8012992:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012996:	bf58      	it	pl
 8012998:	0064      	lslpl	r4, r4, #1
 801299a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 801299e:	107f      	asrs	r7, r7, #1
 80129a0:	0064      	lsls	r4, r4, #1
 80129a2:	1815      	adds	r5, r2, r0
 80129a4:	429d      	cmp	r5, r3
 80129a6:	bfde      	ittt	le
 80129a8:	182a      	addle	r2, r5, r0
 80129aa:	1b5b      	suble	r3, r3, r5
 80129ac:	1836      	addle	r6, r6, r0
 80129ae:	0fe5      	lsrs	r5, r4, #31
 80129b0:	3901      	subs	r1, #1
 80129b2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80129b6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80129ba:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80129be:	d1f0      	bne.n	80129a2 <__ieee754_sqrt+0xae>
 80129c0:	460d      	mov	r5, r1
 80129c2:	f04f 0a20 	mov.w	sl, #32
 80129c6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80129ca:	429a      	cmp	r2, r3
 80129cc:	eb01 0c00 	add.w	ip, r1, r0
 80129d0:	db02      	blt.n	80129d8 <__ieee754_sqrt+0xe4>
 80129d2:	d113      	bne.n	80129fc <__ieee754_sqrt+0x108>
 80129d4:	45a4      	cmp	ip, r4
 80129d6:	d811      	bhi.n	80129fc <__ieee754_sqrt+0x108>
 80129d8:	f1bc 0f00 	cmp.w	ip, #0
 80129dc:	eb0c 0100 	add.w	r1, ip, r0
 80129e0:	da42      	bge.n	8012a68 <__ieee754_sqrt+0x174>
 80129e2:	2900      	cmp	r1, #0
 80129e4:	db40      	blt.n	8012a68 <__ieee754_sqrt+0x174>
 80129e6:	f102 0e01 	add.w	lr, r2, #1
 80129ea:	1a9b      	subs	r3, r3, r2
 80129ec:	4672      	mov	r2, lr
 80129ee:	45a4      	cmp	ip, r4
 80129f0:	bf88      	it	hi
 80129f2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80129f6:	eba4 040c 	sub.w	r4, r4, ip
 80129fa:	4405      	add	r5, r0
 80129fc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8012a00:	f1ba 0a01 	subs.w	sl, sl, #1
 8012a04:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8012a08:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8012a0c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8012a10:	d1db      	bne.n	80129ca <__ieee754_sqrt+0xd6>
 8012a12:	431c      	orrs	r4, r3
 8012a14:	d01a      	beq.n	8012a4c <__ieee754_sqrt+0x158>
 8012a16:	4c20      	ldr	r4, [pc, #128]	@ (8012a98 <__ieee754_sqrt+0x1a4>)
 8012a18:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8012a9c <__ieee754_sqrt+0x1a8>
 8012a1c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8012a20:	e9db 2300 	ldrd	r2, r3, [fp]
 8012a24:	f7ed fba0 	bl	8000168 <__aeabi_dsub>
 8012a28:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012a2c:	4602      	mov	r2, r0
 8012a2e:	460b      	mov	r3, r1
 8012a30:	4640      	mov	r0, r8
 8012a32:	4649      	mov	r1, r9
 8012a34:	f7ed ffcc 	bl	80009d0 <__aeabi_dcmple>
 8012a38:	b140      	cbz	r0, 8012a4c <__ieee754_sqrt+0x158>
 8012a3a:	e9d4 0100 	ldrd	r0, r1, [r4]
 8012a3e:	e9db 2300 	ldrd	r2, r3, [fp]
 8012a42:	f1b5 3fff 	cmp.w	r5, #4294967295
 8012a46:	d111      	bne.n	8012a6c <__ieee754_sqrt+0x178>
 8012a48:	4655      	mov	r5, sl
 8012a4a:	3601      	adds	r6, #1
 8012a4c:	1072      	asrs	r2, r6, #1
 8012a4e:	086b      	lsrs	r3, r5, #1
 8012a50:	07f1      	lsls	r1, r6, #31
 8012a52:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012a56:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012a5a:	bf48      	it	mi
 8012a5c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012a60:	4618      	mov	r0, r3
 8012a62:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8012a66:	e757      	b.n	8012918 <__ieee754_sqrt+0x24>
 8012a68:	4696      	mov	lr, r2
 8012a6a:	e7be      	b.n	80129ea <__ieee754_sqrt+0xf6>
 8012a6c:	f7ed fb7e 	bl	800016c <__adddf3>
 8012a70:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012a74:	4602      	mov	r2, r0
 8012a76:	460b      	mov	r3, r1
 8012a78:	4640      	mov	r0, r8
 8012a7a:	4649      	mov	r1, r9
 8012a7c:	f7ed ff9e 	bl	80009bc <__aeabi_dcmplt>
 8012a80:	b120      	cbz	r0, 8012a8c <__ieee754_sqrt+0x198>
 8012a82:	1ca8      	adds	r0, r5, #2
 8012a84:	bf08      	it	eq
 8012a86:	3601      	addeq	r6, #1
 8012a88:	3502      	adds	r5, #2
 8012a8a:	e7df      	b.n	8012a4c <__ieee754_sqrt+0x158>
 8012a8c:	1c6b      	adds	r3, r5, #1
 8012a8e:	f023 0501 	bic.w	r5, r3, #1
 8012a92:	e7db      	b.n	8012a4c <__ieee754_sqrt+0x158>
 8012a94:	7ff00000 	.word	0x7ff00000
 8012a98:	20000350 	.word	0x20000350
 8012a9c:	20000348 	.word	0x20000348

08012aa0 <_init>:
 8012aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aa2:	bf00      	nop
 8012aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012aa6:	bc08      	pop	{r3}
 8012aa8:	469e      	mov	lr, r3
 8012aaa:	4770      	bx	lr

08012aac <_fini>:
 8012aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aae:	bf00      	nop
 8012ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ab2:	bc08      	pop	{r3}
 8012ab4:	469e      	mov	lr, r3
 8012ab6:	4770      	bx	lr
