
lsd_fw_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000129d8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08012ae8  08012ae8  00013ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013098  08013098  00015358  2**0
                  CONTENTS
  4 .ARM          00000008  08013098  08013098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080130a0  080130a0  00015358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080130a0  080130a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080130a4  080130a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  080130a8  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002860  20000358  08013400  00015358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002bb8  08013400  00015bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00015358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021587  00000000  00000000  00015381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005915  00000000  00000000  00036908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c60  00000000  00000000  0003c220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015b7  00000000  00000000  0003de80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e92c  00000000  00000000  0003f437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000267cf  00000000  00000000  0005dd63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009894a  00000000  00000000  00084532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ce7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008884  00000000  00000000  0011cec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00125744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	08012ad0 	.word	0x08012ad0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	08012ad0 	.word	0x08012ad0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <aht20_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t aht20_init( I2C_HandleTypeDef *hi2c ){
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	if( hi2c != NULL ){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00d      	beq.n	800113a <aht20_init+0x2a>
		aht20_hi2c = hi2c;
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <aht20_init+0x38>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6013      	str	r3, [r2, #0]
		uint8_t init_cmd = AHT20_I2C_CMD_INIT;
 8001124:	23be      	movs	r3, #190	@ 0xbe
 8001126:	73fb      	strb	r3, [r7, #15]
		return aht20_hal_i2c_transmit( AHT20_I2C_ADDR_WRITE, &init_cmd, 1 );
 8001128:	f107 030f 	add.w	r3, r7, #15
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	2070      	movs	r0, #112	@ 0x70
 8001132:	f000 f901 	bl	8001338 <aht20_hal_i2c_transmit>
 8001136:	4603      	mov	r3, r0
 8001138:	e001      	b.n	800113e <aht20_init+0x2e>
	}
	return LSD_ERR_NULL_HANDLE;
 800113a:	f06f 0302 	mvn.w	r3, #2
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000374 	.word	0x20000374

0800114c <aht20_update>:
		return aht20_hal_i2c_transmit( AHT20_I2C_ADDR_WRITE, &rst_cmd, 1 );
	}
	return LSD_ERR_DEVICE_BUSY;
}

int8_t aht20_update( void ){
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
	int ret = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]

	uint8_t trig_cmd[3] = {
 8001156:	4a3f      	ldr	r2, [pc, #252]	@ (8001254 <aht20_update+0x108>)
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	4611      	mov	r1, r2
 8001160:	8019      	strh	r1, [r3, #0]
 8001162:	3302      	adds	r3, #2
 8001164:	0c12      	lsrs	r2, r2, #16
 8001166:	701a      	strb	r2, [r3, #0]
		AHT20_I2C_CMD_TRIG_MEASURE,
		AHT20_I2C_TRIG_MEAS_DATA0,
		AHT20_I2C_TRIG_MEAS_DATA1
	};

	ret = aht20_hal_i2c_transmit( AHT20_I2C_ADDR_WRITE, trig_cmd, 3 );
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2203      	movs	r2, #3
 800116e:	4619      	mov	r1, r3
 8001170:	2070      	movs	r0, #112	@ 0x70
 8001172:	f000 f8e1 	bl	8001338 <aht20_hal_i2c_transmit>
 8001176:	4603      	mov	r3, r0
 8001178:	613b      	str	r3, [r7, #16]

	// wait at least 75ms
	// todo: add non-blocking function
	lsd_delay_ms( 80 );
 800117a:	2050      	movs	r0, #80	@ 0x50
 800117c:	f000 fd16 	bl	8001bac <lsd_delay_ms>

	uint8_t retry_count = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_buf[7] = {0};
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	2100      	movs	r1, #0
 800118e:	460a      	mov	r2, r1
 8001190:	801a      	strh	r2, [r3, #0]
 8001192:	460a      	mov	r2, r1
 8001194:	709a      	strb	r2, [r3, #2]

	do{
		ret = aht20_hal_i2c_receive( AHT20_I2C_ADDR_READ, rx_buf, 7 );
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2207      	movs	r2, #7
 800119a:	4619      	mov	r1, r3
 800119c:	2071      	movs	r0, #113	@ 0x71
 800119e:	f000 f8e9 	bl	8001374 <aht20_hal_i2c_receive>
 80011a2:	4603      	mov	r3, r0
 80011a4:	613b      	str	r3, [r7, #16]
		if( ret != HAL_OK ){
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00e      	beq.n	80011ca <aht20_update+0x7e>
			aht20_data.state.byte = 0;
 80011ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001258 <aht20_update+0x10c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
			aht20_data.humidity.word = 0;
 80011b2:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <aht20_update+0x10c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	605a      	str	r2, [r3, #4]
			aht20_data.temperature.word = 0;
 80011b8:	4b27      	ldr	r3, [pc, #156]	@ (8001258 <aht20_update+0x10c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
			aht20_data.check_sum = 0;
 80011be:	4b26      	ldr	r3, [pc, #152]	@ (8001258 <aht20_update+0x10c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	731a      	strb	r2, [r3, #12]
	//		*data = aht20_data;
			return ret;
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	e040      	b.n	800124c <aht20_update+0x100>
		}

		if( ++retry_count > 10 ){
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	3301      	adds	r3, #1
 80011ce:	75fb      	strb	r3, [r7, #23]
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	2b0a      	cmp	r3, #10
 80011d4:	d902      	bls.n	80011dc <aht20_update+0x90>
			return LSD_ERR_TIMEOUT;
 80011d6:	f06f 0301 	mvn.w	r3, #1
 80011da:	e037      	b.n	800124c <aht20_update+0x100>
		}

		lsd_delay_ms( 2 );
 80011dc:	2002      	movs	r0, #2
 80011de:	f000 fce5 	bl	8001bac <lsd_delay_ms>
	} while( ( rx_buf[0] & 0x80 ) != AHT20_I2C_STATE_NOT_BUSY );
 80011e2:	793b      	ldrb	r3, [r7, #4]
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	dbd5      	blt.n	8001196 <aht20_update+0x4a>

	aht20_data.state.byte = rx_buf[0] & 0xFF;
 80011ea:	793a      	ldrb	r2, [r7, #4]
 80011ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <aht20_update+0x10c>)
 80011ee:	701a      	strb	r2, [r3, #0]

	aht20_data.humidity.bytes[0] = rx_buf[3] & 0xF0;
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f023 030f 	bic.w	r3, r3, #15
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <aht20_update+0x10c>)
 80011fa:	711a      	strb	r2, [r3, #4]
	aht20_data.humidity.bytes[1] = rx_buf[2];
 80011fc:	79ba      	ldrb	r2, [r7, #6]
 80011fe:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <aht20_update+0x10c>)
 8001200:	715a      	strb	r2, [r3, #5]
	aht20_data.humidity.bytes[2] = rx_buf[1];
 8001202:	797a      	ldrb	r2, [r7, #5]
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <aht20_update+0x10c>)
 8001206:	719a      	strb	r2, [r3, #6]
	aht20_data.humidity.word = ( aht20_data.humidity.word >> 4 ) & 0x0FFFFFFF;
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <aht20_update+0x10c>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	4a12      	ldr	r2, [pc, #72]	@ (8001258 <aht20_update+0x10c>)
 8001210:	6053      	str	r3, [r2, #4]

	aht20_data.temperature.bytes[0] = rx_buf[5];
 8001212:	7a7a      	ldrb	r2, [r7, #9]
 8001214:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <aht20_update+0x10c>)
 8001216:	721a      	strb	r2, [r3, #8]
	aht20_data.temperature.bytes[1] = rx_buf[4];
 8001218:	7a3a      	ldrb	r2, [r7, #8]
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <aht20_update+0x10c>)
 800121c:	725a      	strb	r2, [r3, #9]
	aht20_data.temperature.bytes[2] = rx_buf[3] & 0x0F;
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <aht20_update+0x10c>)
 8001228:	729a      	strb	r2, [r3, #10]

	aht20_data.check_sum = rx_buf[6];
 800122a:	7aba      	ldrb	r2, [r7, #10]
 800122c:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <aht20_update+0x10c>)
 800122e:	731a      	strb	r2, [r3, #12]

	if( aht20_data.check_sum != calculate_crc8( &rx_buf[0], 6 ) ){
 8001230:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <aht20_update+0x10c>)
 8001232:	7b1c      	ldrb	r4, [r3, #12]
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2106      	movs	r1, #6
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f8b9 	bl	80013b0 <calculate_crc8>
 800123e:	4603      	mov	r3, r0
 8001240:	429c      	cmp	r4, r3
 8001242:	d002      	beq.n	800124a <aht20_update+0xfe>
		return LSD_ERR_CRC_CHECK;
 8001244:	f06f 0305 	mvn.w	r3, #5
 8001248:	e000      	b.n	800124c <aht20_update+0x100>
	}

//	*data = aht20_data; // copy the contents of aht20_data to the variable pointed by data

	return LSD_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	371c      	adds	r7, #28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	08012ae8 	.word	0x08012ae8
 8001258:	20000378 	.word	0x20000378

0800125c <aht20_get_temperature_C>:

bool aht20_is_calibrated( void ){
	return aht20_data.state.bit.calibration ? true : false;
}

float aht20_get_temperature_C( void ){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
	float temp_raw = (float) aht20_data.temperature.word;
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <aht20_get_temperature_C+0x68>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fd14 	bl	8000c94 <__aeabi_ui2f>
 800126c:	4603      	mov	r3, r0
 800126e:	607b      	str	r3, [r7, #4]
	return (float) ( ( ( temp_raw / 1024.0 ) / 1024.0 ) * 200.0 ) - 50.0;
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff f8d9 	bl	8000428 <__aeabi_f2d>
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <aht20_get_temperature_C+0x6c>)
 800127c:	f7ff fa56 	bl	800072c <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <aht20_get_temperature_C+0x6c>)
 800128e:	f7ff fa4d 	bl	800072c <__aeabi_ddiv>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <aht20_get_temperature_C+0x70>)
 80012a0:	f7ff f91a 	bl	80004d8 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fbec 	bl	8000a88 <__aeabi_d2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4907      	ldr	r1, [pc, #28]	@ (80012d0 <aht20_get_temperature_C+0x74>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fc3b 	bl	8000b30 <__aeabi_fsub>
 80012ba:	4603      	mov	r3, r0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000378 	.word	0x20000378
 80012c8:	40900000 	.word	0x40900000
 80012cc:	40690000 	.word	0x40690000
 80012d0:	42480000 	.word	0x42480000

080012d4 <aht20_get_humidity_RH>:

float aht20_get_humidity_RH( void ){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	float rh_raw = (float) aht20_data.humidity.word;
 80012da:	4b14      	ldr	r3, [pc, #80]	@ (800132c <aht20_get_humidity_RH+0x58>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fcd8 	bl	8000c94 <__aeabi_ui2f>
 80012e4:	4603      	mov	r3, r0
 80012e6:	607b      	str	r3, [r7, #4]
	return (float) ( ( rh_raw / 1024.0 ) / 1024.0 ) * 100.0;
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff f89d 	bl	8000428 <__aeabi_f2d>
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <aht20_get_humidity_RH+0x5c>)
 80012f4:	f7ff fa1a 	bl	800072c <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <aht20_get_humidity_RH+0x5c>)
 8001306:	f7ff fa11 	bl	800072c <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fbb9 	bl	8000a88 <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	4906      	ldr	r1, [pc, #24]	@ (8001334 <aht20_get_humidity_RH+0x60>)
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fd12 	bl	8000d44 <__aeabi_fmul>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000378 	.word	0x20000378
 8001330:	40900000 	.word	0x40900000
 8001334:	42c80000 	.word	0x42c80000

08001338 <aht20_hal_i2c_transmit>:


/* ==========================================================================================================
 * Local Functions Implementation
 */
static int8_t aht20_hal_i2c_transmit( uint16_t dev_addr, uint8_t *p_buf, uint16_t buf_size ){
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af02      	add	r7, sp, #8
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	80fb      	strh	r3, [r7, #6]
 8001344:	4613      	mov	r3, r2
 8001346:	80bb      	strh	r3, [r7, #4]
	int8_t ret = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]
	LSD_I2C_IRQ_DEV_ID_DMA_TX = LSD_I2C_IRQ_DEV_ID_AHT20;
#elif defined( LSD_CONFIG_I2C_IT )
	ret = HAL_I2C_Master_Transmit_IT( aht20_hi2c, dev_addr, p_buf, buf_size );
	LSD_I2C_IRQ_DEV_ID_IT_TX = LSD_I2C_IRQ_DEV_ID_AHT20;
#else
	ret = HAL_I2C_Master_Transmit( aht20_hi2c, dev_addr, p_buf, buf_size, 1000 );
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <aht20_hal_i2c_transmit+0x38>)
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	88bb      	ldrh	r3, [r7, #4]
 8001352:	88f9      	ldrh	r1, [r7, #6]
 8001354:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001358:	9200      	str	r2, [sp, #0]
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	f003 fb54 	bl	8004a08 <HAL_I2C_Master_Transmit>
 8001360:	4603      	mov	r3, r0
 8001362:	73fb      	strb	r3, [r7, #15]
#endif /* LSD_CONFIG_I2C_DMA || LSD_CONFIG_I2C_IT */

	return ret;
 8001364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000374 	.word	0x20000374

08001374 <aht20_hal_i2c_receive>:

static int8_t aht20_hal_i2c_receive( uint16_t dev_addr, uint8_t *p_buf, uint16_t buf_size ){
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af02      	add	r7, sp, #8
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	80fb      	strh	r3, [r7, #6]
 8001380:	4613      	mov	r3, r2
 8001382:	80bb      	strh	r3, [r7, #4]
	int8_t ret = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]
	LSD_I2C_IRQ_DEV_ID_DMA_RX = LSD_I2C_IRQ_DEV_ID_AHT20;
#elif defined( LSD_CONFIG_I2C_IT )
	ret = HAL_I2C_Master_Receive_IT( aht20_hi2c, dev_addr, p_buf, buf_size );
	LSD_I2C_IRQ_DEV_ID_IT_RX = LSD_I2C_IRQ_DEV_ID_AHT20;
#else
	ret = HAL_I2C_Master_Receive( aht20_hi2c, dev_addr, p_buf, buf_size, 1000 );
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <aht20_hal_i2c_receive+0x38>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	88bb      	ldrh	r3, [r7, #4]
 800138e:	88f9      	ldrh	r1, [r7, #6]
 8001390:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001394:	9200      	str	r2, [sp, #0]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	f003 fc34 	bl	8004c04 <HAL_I2C_Master_Receive>
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]
#endif /* LSD_CONFIG_I2C_DMA || LSD_CONFIG_I2C_IT */

	return ret;
 80013a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000374 	.word	0x20000374

080013b0 <calculate_crc8>:

static uint8_t calculate_crc8( uint8_t *data, uint8_t length ){
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 80013bc:	23ff      	movs	r3, #255	@ 0xff
 80013be:	73fb      	strb	r3, [r7, #15]
    uint8_t polynomial = 0x31;
 80013c0:	2331      	movs	r3, #49	@ 0x31
 80013c2:	733b      	strb	r3, [r7, #12]

	for (uint8_t byte_idx=0; byte_idx<length; byte_idx++){
 80013c4:	2300      	movs	r3, #0
 80013c6:	73bb      	strb	r3, [r7, #14]
 80013c8:	e022      	b.n	8001410 <calculate_crc8+0x60>
		crc ^= data[byte_idx];
 80013ca:	7bbb      	ldrb	r3, [r7, #14]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	781a      	ldrb	r2, [r3, #0]
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	4053      	eors	r3, r2
 80013d6:	73fb      	strb	r3, [r7, #15]
		for (uint8_t bit_idx=8; bit_idx>0; --bit_idx){
 80013d8:	2308      	movs	r3, #8
 80013da:	737b      	strb	r3, [r7, #13]
 80013dc:	e012      	b.n	8001404 <calculate_crc8+0x54>
			if (crc & 0x80){
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da08      	bge.n	80013f8 <calculate_crc8+0x48>
				crc = ( crc << 1 ) ^ polynomial;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	b25a      	sxtb	r2, r3
 80013ec:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80013f0:	4053      	eors	r3, r2
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	e002      	b.n	80013fe <calculate_crc8+0x4e>
			}
			else{
				crc <<= 1;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
		for (uint8_t bit_idx=8; bit_idx>0; --bit_idx){
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	3b01      	subs	r3, #1
 8001402:	737b      	strb	r3, [r7, #13]
 8001404:	7b7b      	ldrb	r3, [r7, #13]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1e9      	bne.n	80013de <calculate_crc8+0x2e>
	for (uint8_t byte_idx=0; byte_idx<length; byte_idx++){
 800140a:	7bbb      	ldrb	r3, [r7, #14]
 800140c:	3301      	adds	r3, #1
 800140e:	73bb      	strb	r3, [r7, #14]
 8001410:	7bba      	ldrb	r2, [r7, #14]
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	429a      	cmp	r2, r3
 8001416:	d3d8      	bcc.n	80013ca <calculate_crc8+0x1a>
			}
		}
	}

    return crc;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <ajsr04m_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t ajsr04m_init( TIM_HandleTypeDef *htim ){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	if ( htim != NULL ){
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d01d      	beq.n	800146e <ajsr04m_init+0x4a>
		p_ajsr04m_htim = htim;
 8001432:	4a12      	ldr	r2, [pc, #72]	@ (800147c <ajsr04m_init+0x58>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6013      	str	r3, [r2, #0]

		ajsr04m_data.port = US_ECHO_GPIO_Port;
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <ajsr04m_init+0x5c>)
 800143a:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <ajsr04m_init+0x60>)
 800143c:	601a      	str	r2, [r3, #0]
		ajsr04m_data.pin_echo = US_ECHO_Pin;
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <ajsr04m_init+0x5c>)
 8001440:	2201      	movs	r2, #1
 8001442:	809a      	strh	r2, [r3, #4]
		ajsr04m_data.pin_trig = US_TRIG_Pin;
 8001444:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <ajsr04m_init+0x5c>)
 8001446:	2202      	movs	r2, #2
 8001448:	80da      	strh	r2, [r3, #6]
		ajsr04m_data.tof_ticks = 0;
 800144a:	4b0d      	ldr	r3, [pc, #52]	@ (8001480 <ajsr04m_init+0x5c>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
		ajsr04m_data.measuring = false;
 8001450:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <ajsr04m_init+0x5c>)
 8001452:	2200      	movs	r2, #0
 8001454:	731a      	strb	r2, [r3, #12]
		ajsr04m_data.tof = 0.0;
 8001456:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <ajsr04m_init+0x5c>)
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	611a      	str	r2, [r3, #16]

		return HAL_TIM_Base_Start( p_ajsr04m_htim );
 800145e:	4b07      	ldr	r3, [pc, #28]	@ (800147c <ajsr04m_init+0x58>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f007 fc26 	bl	8008cb4 <HAL_TIM_Base_Start>
 8001468:	4603      	mov	r3, r0
 800146a:	b25b      	sxtb	r3, r3
 800146c:	e001      	b.n	8001472 <ajsr04m_init+0x4e>
	}
	return LSD_ERR_NULL_HANDLE;
 800146e:	f06f 0302 	mvn.w	r3, #2
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000388 	.word	0x20000388
 8001480:	2000038c 	.word	0x2000038c
 8001484:	40010c00 	.word	0x40010c00

08001488 <ajsr04m_read_tof_exti>:
	ajsr04m_data.measuring = false;

	return LSD_OK;
}

int8_t ajsr04m_read_tof_exti( void ){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	ajsr04m_trigger_measurement();
 800148c:	f000 f85e 	bl	800154c <ajsr04m_trigger_measurement>
	return LSD_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <ajsr04m_get_tof_ms>:
//static volatile int tim_flag;
float ajsr04m_get_tof_ms( void ){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Stop( p_ajsr04m_htim );
//	__HAL_TIM_SET_COUNTER( p_ajsr04m_htim, 0 );

	if( ajsr04m_data.measuring == false ){
 800149c:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <ajsr04m_get_tof_ms+0x58>)
 800149e:	7b1b      	ldrb	r3, [r3, #12]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f083 0301 	eor.w	r3, r3, #1
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d019      	beq.n	80014e0 <ajsr04m_get_tof_ms+0x48>
//		int ret = tim_flag ;
		ajsr04m_data.tof = (float) ajsr04m_data.tof_ticks / 10000.0;		// translates to miliseconds
 80014ac:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <ajsr04m_get_tof_ms+0x58>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fbef 	bl	8000c94 <__aeabi_ui2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffb5 	bl	8000428 <__aeabi_f2d>
 80014be:	a30a      	add	r3, pc, #40	@ (adr r3, 80014e8 <ajsr04m_get_tof_ms+0x50>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f932 	bl	800072c <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff fada 	bl	8000a88 <__aeabi_d2f>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4a06      	ldr	r2, [pc, #24]	@ (80014f0 <ajsr04m_get_tof_ms+0x58>)
 80014d8:	6113      	str	r3, [r2, #16]
		return ajsr04m_data.tof;
 80014da:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <ajsr04m_get_tof_ms+0x58>)
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	e000      	b.n	80014e2 <ajsr04m_get_tof_ms+0x4a>
	}
	return LSD_ERR_DEVICE_BUSY;
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <ajsr04m_get_tof_ms+0x5c>)
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	00000000 	.word	0x00000000
 80014ec:	40c38800 	.word	0x40c38800
 80014f0:	2000038c 	.word	0x2000038c
 80014f4:	c0a00000 	.word	0xc0a00000

080014f8 <ajsr04m_callback_handler_echo_start>:

void ajsr04m_callback_handler_echo_start( void ){
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Start( p_ajsr04m_htim );
	__HAL_TIM_SET_COUNTER( p_ajsr04m_htim, 0 );
 80014fc:	4b07      	ldr	r3, [pc, #28]	@ (800151c <ajsr04m_callback_handler_echo_start+0x24>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	@ 0x24
//	__HAL_TIM_CLEAR_FLAG(p_ajsr04m_htim, TIM_FLAG_UPDATE);
	ajsr04m_data.tof_ticks = 0;
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <ajsr04m_callback_handler_echo_start+0x28>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
	ajsr04m_data.measuring = true;
 800150c:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <ajsr04m_callback_handler_echo_start+0x28>)
 800150e:	2201      	movs	r2, #1
 8001510:	731a      	strb	r2, [r3, #12]
	return;
 8001512:	bf00      	nop
}
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000388 	.word	0x20000388
 8001520:	2000038c 	.word	0x2000038c

08001524 <ajsr04m_callback_handler_echo_finish>:

void ajsr04m_callback_handler_echo_finish( void ){
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	ajsr04m_data.tof_ticks = __HAL_TIM_GET_COUNTER( p_ajsr04m_htim );
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <ajsr04m_callback_handler_echo_finish+0x20>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001530:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <ajsr04m_callback_handler_echo_finish+0x24>)
 8001532:	6093      	str	r3, [r2, #8]
	ajsr04m_data.measuring = false;
 8001534:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <ajsr04m_callback_handler_echo_finish+0x24>)
 8001536:	2200      	movs	r2, #0
 8001538:	731a      	strb	r2, [r3, #12]
//	tim_flag = __HAL_TIM_GET_FLAG(p_ajsr04m_htim, TIM_FLAG_UPDATE);
//	HAL_TIM_Base_Stop( p_ajsr04m_htim );
	return;
 800153a:	bf00      	nop
}
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000388 	.word	0x20000388
 8001548:	2000038c 	.word	0x2000038c

0800154c <ajsr04m_trigger_measurement>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static void ajsr04m_trigger_measurement( void ){
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( ajsr04m_data.port, ajsr04m_data.pin_trig, GPIO_PIN_SET );
 8001550:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <ajsr04m_trigger_measurement+0x30>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a09      	ldr	r2, [pc, #36]	@ (800157c <ajsr04m_trigger_measurement+0x30>)
 8001556:	88d1      	ldrh	r1, [r2, #6]
 8001558:	2201      	movs	r2, #1
 800155a:	4618      	mov	r0, r3
 800155c:	f003 f8df 	bl	800471e <HAL_GPIO_WritePin>

//	HAL_TIM_Base_Start( p_ajsr04m_htim );
//	__HAL_TIM_SET_COUNTER( p_ajsr04m_htim, 0 );
	lsd_delay_us( AJSR04M_TRIG_MIN_DELAY_US );
 8001560:	f240 404c 	movw	r0, #1100	@ 0x44c
 8001564:	f000 fafa 	bl	8001b5c <lsd_delay_us>

	HAL_GPIO_WritePin( ajsr04m_data.port, ajsr04m_data.pin_trig, GPIO_PIN_RESET );
 8001568:	4b04      	ldr	r3, [pc, #16]	@ (800157c <ajsr04m_trigger_measurement+0x30>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a03      	ldr	r2, [pc, #12]	@ (800157c <ajsr04m_trigger_measurement+0x30>)
 800156e:	88d1      	ldrh	r1, [r2, #6]
 8001570:	2200      	movs	r2, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f003 f8d3 	bl	800471e <HAL_GPIO_WritePin>
	return;
 8001578:	bf00      	nop
}
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000038c 	.word	0x2000038c

08001580 <le910r1br_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t le910r1br_init( UART_HandleTypeDef *huart, TIM_HandleTypeDef *htim ){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
	if( huart != NULL && htim != NULL ){
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d01f      	beq.n	80015d0 <le910r1br_init+0x50>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d01c      	beq.n	80015d0 <le910r1br_init+0x50>
		p_modem_huart  = huart;
 8001596:	4a11      	ldr	r2, [pc, #68]	@ (80015dc <le910r1br_init+0x5c>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6013      	str	r3, [r2, #0]
		p_modem_htim   = htim;
 800159c:	4a10      	ldr	r2, [pc, #64]	@ (80015e0 <le910r1br_init+0x60>)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6013      	str	r3, [r2, #0]

		modem_data.tim_channel  = TIM_CHANNEL_3;	// todo: select correct channel
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <le910r1br_init+0x64>)
 80015a4:	2208      	movs	r2, #8
 80015a6:	701a      	strb	r2, [r3, #0]
		modem_data.port_pwr		= uLTE_PWR_GPIO_Port;
 80015a8:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <le910r1br_init+0x64>)
 80015aa:	4a0f      	ldr	r2, [pc, #60]	@ (80015e8 <le910r1br_init+0x68>)
 80015ac:	605a      	str	r2, [r3, #4]
		modem_data.pin_pwr 		= uLTE_PWR_Pin;
 80015ae:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <le910r1br_init+0x64>)
 80015b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b4:	811a      	strh	r2, [r3, #8]
		modem_data.ready 		= false;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <le910r1br_init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	729a      	strb	r2, [r3, #10]

		HAL_GPIO_WritePin( modem_data.port_pwr, modem_data.pin_pwr, GPIO_PIN_RESET );
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <le910r1br_init+0x64>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <le910r1br_init+0x64>)
 80015c2:	8911      	ldrh	r1, [r2, #8]
 80015c4:	2200      	movs	r2, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 f8a9 	bl	800471e <HAL_GPIO_WritePin>

		return LSD_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	e001      	b.n	80015d4 <le910r1br_init+0x54>
	}
	return LSD_ERR_NULL_HANDLE;
 80015d0:	f06f 0302 	mvn.w	r3, #2
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200003a0 	.word	0x200003a0
 80015e0:	200003a4 	.word	0x200003a4
 80015e4:	200003a8 	.word	0x200003a8
 80015e8:	40010c00 	.word	0x40010c00

080015ec <le910r1br_power_off>:
*/

	return;
}

void le910r1br_power_off( void ){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( modem_data.port_pwr, modem_data.pin_pwr, GPIO_PIN_SET );
 80015f0:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <le910r1br_power_off+0x30>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4a09      	ldr	r2, [pc, #36]	@ (800161c <le910r1br_power_off+0x30>)
 80015f6:	8911      	ldrh	r1, [r2, #8]
 80015f8:	2201      	movs	r2, #1
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 f88f 	bl	800471e <HAL_GPIO_WritePin>
	HAL_Delay( LE910R1BR_TURN_OFF_PULSE_MS );
 8001600:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001604:	f002 fc1e 	bl	8003e44 <HAL_Delay>
	HAL_GPIO_WritePin( modem_data.port_pwr, modem_data.pin_pwr, GPIO_PIN_RESET );
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <le910r1br_power_off+0x30>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4a03      	ldr	r2, [pc, #12]	@ (800161c <le910r1br_power_off+0x30>)
 800160e:	8911      	ldrh	r1, [r2, #8]
 8001610:	2200      	movs	r2, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f003 f883 	bl	800471e <HAL_GPIO_WritePin>
	HAL_TIM_OC_Start_IT( p_modem_htim, modem_data.tim_channel );

	__HAL_TIM_SET_COMPARE( p_modem_htim, modem_data.tim_channel, \
		( __HAL_TIM_GET_COMPARE( p_modem_htim, modem_data.tim_channel ) + LE910R1BR_TURN_OFF_PULSE_MS ) );
*/
	return;
 8001618:	bf00      	nop
}
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200003a8 	.word	0x200003a8

08001620 <leds_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t leds_init( TIM_HandleTypeDef *htim ){
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	if( htim != NULL ){
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d04c      	beq.n	80016c8 <leds_init+0xa8>
		p_leds_htim = htim;
 800162e:	4a29      	ldr	r2, [pc, #164]	@ (80016d4 <leds_init+0xb4>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6013      	str	r3, [r2, #0]

		leds_data[LSD_LED_BLUE].channel = TIM_CHANNEL_1;
 8001634:	4b28      	ldr	r3, [pc, #160]	@ (80016d8 <leds_init+0xb8>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
		leds_data[LSD_LED_RED].channel = TIM_CHANNEL_2;
 800163a:	4b27      	ldr	r3, [pc, #156]	@ (80016d8 <leds_init+0xb8>)
 800163c:	2204      	movs	r2, #4
 800163e:	741a      	strb	r2, [r3, #16]

		leds_data[LSD_LED_BLUE].pin = LED_INFO1_Pin;
 8001640:	4b25      	ldr	r3, [pc, #148]	@ (80016d8 <leds_init+0xb8>)
 8001642:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001646:	811a      	strh	r2, [r3, #8]
		leds_data[LSD_LED_RED].pin = LED_INFO2_Pin;
 8001648:	4b23      	ldr	r3, [pc, #140]	@ (80016d8 <leds_init+0xb8>)
 800164a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800164e:	831a      	strh	r2, [r3, #24]

		leds_data[LSD_LED_BLUE].port = LED_INFO1_GPIO_Port;
 8001650:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <leds_init+0xb8>)
 8001652:	4a22      	ldr	r2, [pc, #136]	@ (80016dc <leds_init+0xbc>)
 8001654:	605a      	str	r2, [r3, #4]
		leds_data[LSD_LED_RED].port = LED_INFO2_GPIO_Port;
 8001656:	4b20      	ldr	r3, [pc, #128]	@ (80016d8 <leds_init+0xb8>)
 8001658:	4a20      	ldr	r2, [pc, #128]	@ (80016dc <leds_init+0xbc>)
 800165a:	615a      	str	r2, [r3, #20]

		leds_data[LSD_LED_BLUE].state = GPIO_PIN_SET;
 800165c:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <leds_init+0xb8>)
 800165e:	2201      	movs	r2, #1
 8001660:	729a      	strb	r2, [r3, #10]
		leds_data[LSD_LED_RED].state = GPIO_PIN_SET;
 8001662:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <leds_init+0xb8>)
 8001664:	2201      	movs	r2, #1
 8001666:	769a      	strb	r2, [r3, #26]

		leds_data[LSD_LED_BLUE].blink_half_period = 0;
 8001668:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <leds_init+0xb8>)
 800166a:	2200      	movs	r2, #0
 800166c:	819a      	strh	r2, [r3, #12]
		leds_data[LSD_LED_RED].blink_half_period = 0;
 800166e:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <leds_init+0xb8>)
 8001670:	2200      	movs	r2, #0
 8001672:	839a      	strh	r2, [r3, #28]

		leds_data[LSD_LED_BLUE].single_blink = false;
 8001674:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <leds_init+0xb8>)
 8001676:	2200      	movs	r2, #0
 8001678:	739a      	strb	r2, [r3, #14]
		leds_data[LSD_LED_RED].single_blink = false;
 800167a:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <leds_init+0xb8>)
 800167c:	2200      	movs	r2, #0
 800167e:	779a      	strb	r2, [r3, #30]

//		HAL_GPIO_WritePin( LED_INFO1_GPIO_Port, LED_INFO1_Pin, GPIO_PIN_RESET );
//		HAL_GPIO_WritePin( LED_INFO2_GPIO_Port, LED_INFO2_Pin, GPIO_PIN_RESET );

		int8_t ret = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]
		ret = HAL_TIM_Base_Start_IT( htim );
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f007 fb85 	bl	8008d94 <HAL_TIM_Base_Start_IT>
 800168a:	4603      	mov	r3, r0
 800168c:	73fb      	strb	r3, [r7, #15]
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	e013      	b.n	80016bc <leds_init+0x9c>
			ret += HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[i].channel );
 8001694:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <leds_init+0xb4>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	490f      	ldr	r1, [pc, #60]	@ (80016d8 <leds_init+0xb8>)
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	440b      	add	r3, r1
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	4619      	mov	r1, r3
 80016a4:	4610      	mov	r0, r2
 80016a6:	f007 fd0f 	bl	80090c8 <HAL_TIM_OC_Stop_IT>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	4413      	add	r3, r2
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	73fb      	strb	r3, [r7, #15]
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	3301      	adds	r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	dde8      	ble.n	8001694 <leds_init+0x74>
		}

		return ret;
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	e001      	b.n	80016cc <leds_init+0xac>
	}
	return LSD_ERR_NULL_HANDLE;
 80016c8:	f06f 0302 	mvn.w	r3, #2
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200003b4 	.word	0x200003b4
 80016d8:	200003b8 	.word	0x200003b8
 80016dc:	40011000 	.word	0x40011000

080016e0 <leds_turn_on>:

int8_t leds_turn_on( uint8_t led ){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
	int8_t ret = LSD_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	73fb      	strb	r3, [r7, #15]
	if( led < 0 || led > LSD_ALL_LEDS ){
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d902      	bls.n	80016fa <leds_turn_on+0x1a>
		return LSD_ERR_WRONG_PARAM;
 80016f4:	f06f 0303 	mvn.w	r3, #3
 80016f8:	e043      	b.n	8001782 <leds_turn_on+0xa2>
	}
	else if( led < LSD_ALL_LEDS ){
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d817      	bhi.n	8001730 <leds_turn_on+0x50>
		HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[led].channel );
 8001700:	4b22      	ldr	r3, [pc, #136]	@ (800178c <leds_turn_on+0xac>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	4922      	ldr	r1, [pc, #136]	@ (8001790 <leds_turn_on+0xb0>)
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	440b      	add	r3, r1
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f007 fcd9 	bl	80090c8 <HAL_TIM_OC_Stop_IT>
		leds_data[led].state = GPIO_PIN_SET;
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	4a1d      	ldr	r2, [pc, #116]	@ (8001790 <leds_turn_on+0xb0>)
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	4413      	add	r3, r2
 800171e:	330a      	adds	r3, #10
 8001720:	2201      	movs	r2, #1
 8001722:	701a      	strb	r2, [r3, #0]
		leds_write_value( led, GPIO_PIN_SET );
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	2101      	movs	r1, #1
 8001728:	4618      	mov	r0, r3
 800172a:	f000 f93d 	bl	80019a8 <leds_write_value>
 800172e:	e026      	b.n	800177e <leds_turn_on+0x9e>
	}
	else{
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	e020      	b.n	8001778 <leds_turn_on+0x98>
			ret += HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[i].channel );
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <leds_turn_on+0xac>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4915      	ldr	r1, [pc, #84]	@ (8001790 <leds_turn_on+0xb0>)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	440b      	add	r3, r1
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	4610      	mov	r0, r2
 8001748:	f007 fcbe 	bl	80090c8 <HAL_TIM_OC_Stop_IT>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	4413      	add	r3, r2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	73fb      	strb	r3, [r7, #15]
			leds_data[i].state = GPIO_PIN_SET;
 8001758:	4a0d      	ldr	r2, [pc, #52]	@ (8001790 <leds_turn_on+0xb0>)
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	4413      	add	r3, r2
 8001760:	330a      	adds	r3, #10
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
			leds_write_value( i, GPIO_PIN_SET );
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2101      	movs	r1, #1
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f91b 	bl	80019a8 <leds_write_value>
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3301      	adds	r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b01      	cmp	r3, #1
 800177c:	dddb      	ble.n	8001736 <leds_turn_on+0x56>
		}
	}
	return ret;
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200003b4 	.word	0x200003b4
 8001790:	200003b8 	.word	0x200003b8

08001794 <leds_turn_off>:

int8_t leds_turn_off( uint8_t led ){
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
	if( led < 0 || led > LSD_ALL_LEDS ){
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d902      	bls.n	80017aa <leds_turn_off+0x16>
		return LSD_ERR_WRONG_PARAM;
 80017a4:	f06f 0303 	mvn.w	r3, #3
 80017a8:	e03c      	b.n	8001824 <leds_turn_off+0x90>
	}
	else if( led < LSD_ALL_LEDS ){
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d817      	bhi.n	80017e0 <leds_turn_off+0x4c>
		HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[led].channel );
 80017b0:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <leds_turn_off+0x98>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	491e      	ldr	r1, [pc, #120]	@ (8001830 <leds_turn_off+0x9c>)
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	440b      	add	r3, r1
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	4619      	mov	r1, r3
 80017c0:	4610      	mov	r0, r2
 80017c2:	f007 fc81 	bl	80090c8 <HAL_TIM_OC_Stop_IT>
		leds_data[led].state = GPIO_PIN_RESET;
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	4a19      	ldr	r2, [pc, #100]	@ (8001830 <leds_turn_off+0x9c>)
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	4413      	add	r3, r2
 80017ce:	330a      	adds	r3, #10
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
		leds_write_value( led, GPIO_PIN_RESET );
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 f8e5 	bl	80019a8 <leds_write_value>
 80017de:	e020      	b.n	8001822 <leds_turn_off+0x8e>
	}
	else{
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	e01a      	b.n	800181c <leds_turn_off+0x88>
			HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[i].channel );
 80017e6:	4b11      	ldr	r3, [pc, #68]	@ (800182c <leds_turn_off+0x98>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4911      	ldr	r1, [pc, #68]	@ (8001830 <leds_turn_off+0x9c>)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	440b      	add	r3, r1
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	4610      	mov	r0, r2
 80017f8:	f007 fc66 	bl	80090c8 <HAL_TIM_OC_Stop_IT>
			leds_data[i].state = GPIO_PIN_RESET;
 80017fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001830 <leds_turn_off+0x9c>)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	4413      	add	r3, r2
 8001804:	330a      	adds	r3, #10
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
			leds_write_value( i, GPIO_PIN_RESET );
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f8c9 	bl	80019a8 <leds_write_value>
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3301      	adds	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b01      	cmp	r3, #1
 8001820:	dde1      	ble.n	80017e6 <leds_turn_off+0x52>
		}
	}
	return LSD_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200003b4 	.word	0x200003b4
 8001830:	200003b8 	.word	0x200003b8

08001834 <leds_blink_fast>:
		}
	}
	return LSD_OK;
}

int8_t leds_blink_fast( uint8_t led ){
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
	if( led < 0 || led > LSD_ALL_LEDS ){
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2b02      	cmp	r3, #2
 8001842:	d902      	bls.n	800184a <leds_blink_fast+0x16>
		return LSD_ERR_WRONG_PARAM;
 8001844:	f06f 0303 	mvn.w	r3, #3
 8001848:	e061      	b.n	800190e <leds_blink_fast+0xda>
	}
	else if( led < LSD_ALL_LEDS ){
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d829      	bhi.n	80018a4 <leds_blink_fast+0x70>
		leds_data[led].blink_half_period = LEDS_FAST_HALF_PERIOD_MS;
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4a31      	ldr	r2, [pc, #196]	@ (8001918 <leds_blink_fast+0xe4>)
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	4413      	add	r3, r2
 8001858:	330c      	adds	r3, #12
 800185a:	2264      	movs	r2, #100	@ 0x64
 800185c:	801a      	strh	r2, [r3, #0]
		leds_data[led].single_blink = false;
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	4a2d      	ldr	r2, [pc, #180]	@ (8001918 <leds_blink_fast+0xe4>)
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	4413      	add	r3, r2
 8001866:	330e      	adds	r3, #14
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
		leds_data[led].state = GPIO_PIN_RESET;
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	4a2a      	ldr	r2, [pc, #168]	@ (8001918 <leds_blink_fast+0xe4>)
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	4413      	add	r3, r2
 8001874:	330a      	adds	r3, #10
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
		leds_write_value( led, GPIO_PIN_RESET );
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f892 	bl	80019a8 <leds_write_value>
		HAL_TIM_OC_Start_IT( p_leds_htim, leds_data[led].channel );
 8001884:	4b25      	ldr	r3, [pc, #148]	@ (800191c <leds_blink_fast+0xe8>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	4923      	ldr	r1, [pc, #140]	@ (8001918 <leds_blink_fast+0xe4>)
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	440b      	add	r3, r1
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4619      	mov	r1, r3
 8001894:	4610      	mov	r0, r2
 8001896:	f007 fb27 	bl	8008ee8 <HAL_TIM_OC_Start_IT>
		leds_timer_set_compare_value( led );
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f8a1 	bl	80019e4 <leds_timer_set_compare_value>
 80018a2:	e033      	b.n	800190c <leds_blink_fast+0xd8>
	}
	else{
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e02d      	b.n	8001906 <leds_blink_fast+0xd2>
			leds_data[i].blink_half_period = LEDS_FAST_HALF_PERIOD_MS;
 80018aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001918 <leds_blink_fast+0xe4>)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	4413      	add	r3, r2
 80018b2:	330c      	adds	r3, #12
 80018b4:	2264      	movs	r2, #100	@ 0x64
 80018b6:	801a      	strh	r2, [r3, #0]
			leds_data[i].single_blink = false;
 80018b8:	4a17      	ldr	r2, [pc, #92]	@ (8001918 <leds_blink_fast+0xe4>)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4413      	add	r3, r2
 80018c0:	330e      	adds	r3, #14
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
			leds_data[i].state = GPIO_PIN_RESET;
 80018c6:	4a14      	ldr	r2, [pc, #80]	@ (8001918 <leds_blink_fast+0xe4>)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	4413      	add	r3, r2
 80018ce:	330a      	adds	r3, #10
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
			leds_write_value( i, GPIO_PIN_RESET );
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f864 	bl	80019a8 <leds_write_value>
			HAL_TIM_OC_Start_IT( p_leds_htim, leds_data[i].channel );
 80018e0:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <leds_blink_fast+0xe8>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	490c      	ldr	r1, [pc, #48]	@ (8001918 <leds_blink_fast+0xe4>)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	440b      	add	r3, r1
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f007 faf9 	bl	8008ee8 <HAL_TIM_OC_Start_IT>
			leds_timer_set_compare_value( i );
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f872 	bl	80019e4 <leds_timer_set_compare_value>
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3301      	adds	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b01      	cmp	r3, #1
 800190a:	ddce      	ble.n	80018aa <leds_blink_fast+0x76>
		}
	}
	return LSD_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200003b8 	.word	0x200003b8
 800191c:	200003b4 	.word	0x200003b4

08001920 <leds_callback_handler>:
		}
	}
	return LSD_OK;
}

void leds_callback_handler( uint8_t led ){
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
	leds_data[led].state = ! leds_data[led].state;
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	4a1c      	ldr	r2, [pc, #112]	@ (80019a0 <leds_callback_handler+0x80>)
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	4413      	add	r3, r2
 8001932:	330a      	adds	r3, #10
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf0c      	ite	eq
 800193a:	2301      	moveq	r3, #1
 800193c:	2300      	movne	r3, #0
 800193e:	b2da      	uxtb	r2, r3
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	4611      	mov	r1, r2
 8001944:	4a16      	ldr	r2, [pc, #88]	@ (80019a0 <leds_callback_handler+0x80>)
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4413      	add	r3, r2
 800194a:	330a      	adds	r3, #10
 800194c:	460a      	mov	r2, r1
 800194e:	701a      	strb	r2, [r3, #0]
	leds_write_value( led, leds_data[led].state );
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	4a13      	ldr	r2, [pc, #76]	@ (80019a0 <leds_callback_handler+0x80>)
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	4413      	add	r3, r2
 8001958:	330a      	adds	r3, #10
 800195a:	781a      	ldrb	r2, [r3, #0]
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f000 f821 	bl	80019a8 <leds_write_value>

	if( leds_data[led].single_blink == true ){
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <leds_callback_handler+0x80>)
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	4413      	add	r3, r2
 800196e:	330e      	adds	r3, #14
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <leds_callback_handler+0x6e>
		HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[led].channel );
 8001976:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <leds_callback_handler+0x84>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	4908      	ldr	r1, [pc, #32]	@ (80019a0 <leds_callback_handler+0x80>)
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	440b      	add	r3, r1
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	4610      	mov	r0, r2
 8001988:	f007 fb9e 	bl	80090c8 <HAL_TIM_OC_Stop_IT>
	}
	else{
		leds_timer_set_compare_value( led );
	}

	return;
 800198c:	e004      	b.n	8001998 <leds_callback_handler+0x78>
		leds_timer_set_compare_value( led );
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f000 f827 	bl	80019e4 <leds_timer_set_compare_value>
	return;
 8001996:	bf00      	nop
}
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200003b8 	.word	0x200003b8
 80019a4:	200003b4 	.word	0x200003b4

080019a8 <leds_write_value>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static inline void leds_write_value( uint8_t led, uint8_t value ){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	460a      	mov	r2, r1
 80019b2:	71fb      	strb	r3, [r7, #7]
 80019b4:	4613      	mov	r3, r2
 80019b6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin( leds_data[led].port, leds_data[led].pin, value );
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4a09      	ldr	r2, [pc, #36]	@ (80019e0 <leds_write_value+0x38>)
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4413      	add	r3, r2
 80019c0:	3304      	adds	r3, #4
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	4a06      	ldr	r2, [pc, #24]	@ (80019e0 <leds_write_value+0x38>)
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4413      	add	r3, r2
 80019cc:	3308      	adds	r3, #8
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	79ba      	ldrb	r2, [r7, #6]
 80019d2:	4619      	mov	r1, r3
 80019d4:	f002 fea3 	bl	800471e <HAL_GPIO_WritePin>
	return;
 80019d8:	bf00      	nop
}
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200003b8 	.word	0x200003b8

080019e4 <leds_timer_set_compare_value>:

static inline void leds_timer_set_compare_value( uint8_t led ){
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
	uint32_t current_count = __HAL_TIM_GET_COUNTER( p_leds_htim );
 80019ee:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <leds_timer_set_compare_value+0x8c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f6:	60fb      	str	r3, [r7, #12]
	uint32_t new_count = current_count + (uint32_t) leds_data[led].blink_half_period;
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001a74 <leds_timer_set_compare_value+0x90>)
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	4413      	add	r3, r2
 8001a00:	330c      	adds	r3, #12
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4413      	add	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE( p_leds_htim, leds_data[led].channel, new_count );
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4a19      	ldr	r2, [pc, #100]	@ (8001a74 <leds_timer_set_compare_value+0x90>)
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <leds_timer_set_compare_value+0x42>
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <leds_timer_set_compare_value+0x8c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	635a      	str	r2, [r3, #52]	@ 0x34
	return;
 8001a24:	e01f      	b.n	8001a66 <leds_timer_set_compare_value+0x82>
	__HAL_TIM_SET_COMPARE( p_leds_htim, leds_data[led].channel, new_count );
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	4a12      	ldr	r2, [pc, #72]	@ (8001a74 <leds_timer_set_compare_value+0x90>)
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d105      	bne.n	8001a40 <leds_timer_set_compare_value+0x5c>
 8001a34:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <leds_timer_set_compare_value+0x8c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	6393      	str	r3, [r2, #56]	@ 0x38
	return;
 8001a3e:	e012      	b.n	8001a66 <leds_timer_set_compare_value+0x82>
	__HAL_TIM_SET_COMPARE( p_leds_htim, leds_data[led].channel, new_count );
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	4a0c      	ldr	r2, [pc, #48]	@ (8001a74 <leds_timer_set_compare_value+0x90>)
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d105      	bne.n	8001a5a <leds_timer_set_compare_value+0x76>
 8001a4e:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <leds_timer_set_compare_value+0x8c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	63d3      	str	r3, [r2, #60]	@ 0x3c
	return;
 8001a58:	e005      	b.n	8001a66 <leds_timer_set_compare_value+0x82>
	__HAL_TIM_SET_COMPARE( p_leds_htim, leds_data[led].channel, new_count );
 8001a5a:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <leds_timer_set_compare_value+0x8c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	6413      	str	r3, [r2, #64]	@ 0x40
	return;
 8001a64:	bf00      	nop
}
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	200003b4 	.word	0x200003b4
 8001a74:	200003b8 	.word	0x200003b8

08001a78 <HAL_TIM_OC_DelayElapsedCallback>:
//void HAL_I2C_MasterTxCpltCallback ( I2C_HandleTypeDef *hi2c );
//void HAL_I2C_MasterRxCpltCallback ( I2C_HandleTypeDef *hi2c );
//void HAL_I2C_ErrorCallback ( I2C_HandleTypeDef *hi2c );


void HAL_TIM_OC_DelayElapsedCallback( TIM_HandleTypeDef *htim ){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    if( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 ){
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7f1b      	ldrb	r3, [r3, #28]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d103      	bne.n	8001a90 <HAL_TIM_OC_DelayElapsedCallback+0x18>
    	leds_callback_handler( LSD_LED_BLUE );
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff ff49 	bl	8001920 <leds_callback_handler>
    	leds_callback_handler( LSD_LED_RED );
    }
//    else if( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3 ){
//    	le910r1br_turn_on_callback_handle();
//    }
    return;
 8001a8e:	e007      	b.n	8001aa0 <HAL_TIM_OC_DelayElapsedCallback+0x28>
    else if( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 ){
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7f1b      	ldrb	r3, [r3, #28]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d103      	bne.n	8001aa0 <HAL_TIM_OC_DelayElapsedCallback+0x28>
    	leds_callback_handler( LSD_LED_RED );
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff ff41 	bl	8001920 <leds_callback_handler>
    return;
 8001a9e:	bf00      	nop
 8001aa0:	bf00      	nop
}
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin ){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == US_ECHO_Pin ){
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d10c      	bne.n	8001ad2 <HAL_GPIO_EXTI_Callback+0x2a>
		if( HAL_GPIO_ReadPin( US_ECHO_GPIO_Port, US_ECHO_Pin ) == GPIO_PIN_SET ){
 8001ab8:	2101      	movs	r1, #1
 8001aba:	4808      	ldr	r0, [pc, #32]	@ (8001adc <HAL_GPIO_EXTI_Callback+0x34>)
 8001abc:	f002 fe18 	bl	80046f0 <HAL_GPIO_ReadPin>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d102      	bne.n	8001acc <HAL_GPIO_EXTI_Callback+0x24>
			ajsr04m_callback_handler_echo_start();
 8001ac6:	f7ff fd17 	bl	80014f8 <ajsr04m_callback_handler_echo_start>
		}
		else{
			ajsr04m_callback_handler_echo_finish();
		}
	}
	return;
 8001aca:	e002      	b.n	8001ad2 <HAL_GPIO_EXTI_Callback+0x2a>
			ajsr04m_callback_handler_echo_finish();
 8001acc:	f7ff fd2a 	bl	8001524 <ajsr04m_callback_handler_echo_finish>
	return;
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
}
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40010c00 	.word	0x40010c00

08001ae0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart ) {
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 ){
//		le910r1br_rx_handler();
//		modem_rx_buffer.busy = false;
	}
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
	...

08001af4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart ) {
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 ){
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a05      	ldr	r2, [pc, #20]	@ (8001b18 <HAL_UART_TxCpltCallback+0x24>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d103      	bne.n	8001b0e <HAL_UART_TxCpltCallback+0x1a>
//		le910r1br_rx_handler();
		modem_tx_buffer.busy = false;
 8001b06:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <HAL_UART_TxCpltCallback+0x28>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	40013800 	.word	0x40013800
 8001b1c:	20001674 	.word	0x20001674

08001b20 <lsd_common_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t lsd_common_init( TIM_HandleTypeDef *htim, RTC_HandleTypeDef *hrtc ){
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
	if ( htim != NULL && hrtc != NULL ){
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00a      	beq.n	8001b46 <lsd_common_init+0x26>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <lsd_common_init+0x26>
		p_lsd_htim = htim;
 8001b36:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <lsd_common_init+0x34>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6013      	str	r3, [r2, #0]
		p_lsd_hrtc = hrtc;
 8001b3c:	4a06      	ldr	r2, [pc, #24]	@ (8001b58 <lsd_common_init+0x38>)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6013      	str	r3, [r2, #0]
//		lsd_common_data.channel = TIM_CHANNEL_3;
//		return HAL_TIM_Base_Start_IT( htim );
		return LSD_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e001      	b.n	8001b4a <lsd_common_init+0x2a>
	}
	return LSD_ERR_NULL_HANDLE;
 8001b46:	f06f 0302 	mvn.w	r3, #2
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	200003d8 	.word	0x200003d8
 8001b58:	200003dc 	.word	0x200003dc

08001b5c <lsd_delay_us>:

void lsd_delay_us( uint32_t time_us ){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER( p_lsd_htim, 0 );
 8001b64:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <lsd_delay_us+0x4c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	625a      	str	r2, [r3, #36]	@ 0x24
	int ret = HAL_TIM_Base_Start( p_lsd_htim );
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <lsd_delay_us+0x4c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f007 f89e 	bl	8008cb4 <HAL_TIM_Base_Start>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60fb      	str	r3, [r7, #12]
	if( ret != HAL_OK ){
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10d      	bne.n	8001b9e <lsd_delay_us+0x42>
		return;
	}
	while( __HAL_TIM_GET_COUNTER( p_lsd_htim ) < time_us );
 8001b82:	bf00      	nop
 8001b84:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <lsd_delay_us+0x4c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d8f8      	bhi.n	8001b84 <lsd_delay_us+0x28>
	HAL_TIM_Base_Stop( p_lsd_htim );
 8001b92:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <lsd_delay_us+0x4c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f007 f8d6 	bl	8008d48 <HAL_TIM_Base_Stop>
	return;
 8001b9c:	e000      	b.n	8001ba0 <lsd_delay_us+0x44>
		return;
 8001b9e:	bf00      	nop
}
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200003d8 	.word	0x200003d8

08001bac <lsd_delay_ms>:

void lsd_delay_ms( uint32_t time_ms ){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	for( int i=0; i<time_ms; i++ ){
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	e006      	b.n	8001bc8 <lsd_delay_ms+0x1c>
		lsd_delay_us( 1000 );
 8001bba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bbe:	f7ff ffcd 	bl	8001b5c <lsd_delay_us>
	for( int i=0; i<time_ms; i++ ){
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d8f4      	bhi.n	8001bba <lsd_delay_ms+0xe>
	}
	return;
 8001bd0:	bf00      	nop
}
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <lsd_get_rtc_timestamp>:
	}

    return;
}

void lsd_get_rtc_timestamp( LSD_TIMESTAMP_T *timestamp ){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetTime( p_lsd_hrtc, &sTime, RTC_FORMAT_BIN );
 8001be0:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <lsd_get_rtc_timestamp+0x90>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f107 010c 	add.w	r1, r7, #12
 8001be8:	2200      	movs	r2, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f006 fa5c 	bl	80080a8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate( p_lsd_hrtc, &sDate, RTC_FORMAT_BIN );
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <lsd_get_rtc_timestamp+0x90>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f107 0108 	add.w	r1, r7, #8
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f006 fbe2 	bl	80083c4 <HAL_RTC_GetDate>

	timestamp->year		= sDate.Year;
 8001c00:	7afa      	ldrb	r2, [r7, #11]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	701a      	strb	r2, [r3, #0]
	timestamp->month	= sDate.Month;
 8001c06:	7a7b      	ldrb	r3, [r7, #9]
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	b2d9      	uxtb	r1, r3
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	7853      	ldrb	r3, [r2, #1]
 8001c12:	f361 0303 	bfi	r3, r1, #0, #4
 8001c16:	7053      	strb	r3, [r2, #1]
	timestamp->day		= sDate.Date;
 8001c18:	7abb      	ldrb	r3, [r7, #10]
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	b2d9      	uxtb	r1, r3
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	7893      	ldrb	r3, [r2, #2]
 8001c24:	f361 0304 	bfi	r3, r1, #0, #5
 8001c28:	7093      	strb	r3, [r2, #2]
	timestamp->hour		= sTime.Hours;
 8001c2a:	7b3b      	ldrb	r3, [r7, #12]
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	b2d9      	uxtb	r1, r3
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	78d3      	ldrb	r3, [r2, #3]
 8001c36:	f361 0304 	bfi	r3, r1, #0, #5
 8001c3a:	70d3      	strb	r3, [r2, #3]
	timestamp->minute	= sTime.Minutes;
 8001c3c:	7b7b      	ldrb	r3, [r7, #13]
 8001c3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c42:	b2d9      	uxtb	r1, r3
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	7913      	ldrb	r3, [r2, #4]
 8001c48:	f361 0305 	bfi	r3, r1, #0, #6
 8001c4c:	7113      	strb	r3, [r2, #4]
	timestamp->second	= sTime.Seconds;
 8001c4e:	7bbb      	ldrb	r3, [r7, #14]
 8001c50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c54:	b2d9      	uxtb	r1, r3
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	7953      	ldrb	r3, [r2, #5]
 8001c5a:	f361 0305 	bfi	r3, r1, #0, #6
 8001c5e:	7153      	strb	r3, [r2, #5]

	return;
 8001c60:	bf00      	nop
}
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200003dc 	.word	0x200003dc

08001c6c <lsd_analyze_data>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

void lsd_analyze_data( LSD_LOG_DATA_T *p_log_data ){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	p_recent_log_data = p_log_data;
 8001c74:	4a05      	ldr	r2, [pc, #20]	@ (8001c8c <lsd_analyze_data+0x20>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]
	update_thresold_values();
 8001c7a:	f000 f809 	bl	8001c90 <update_thresold_values>
//	lsd_log_read_batch( -LSD_RECENT_LOG_SIZE, p_recent_log_data );
	categoryze_recent_data();
 8001c7e:	f000 f859 	bl	8001d34 <categoryze_recent_data>
	return;
 8001c82:	bf00      	nop
}
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000420 	.word	0x20000420

08001c90 <update_thresold_values>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static void update_thresold_values( void ){
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
	lsd_thres[LSD_THRES_CLIM_TEMP].very_low		= LSD_THRES_CLIM_TEMP_VL;
 8001c94:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <update_thresold_values+0x6c>)
 8001c96:	4a1a      	ldr	r2, [pc, #104]	@ (8001d00 <update_thresold_values+0x70>)
 8001c98:	601a      	str	r2, [r3, #0]
	lsd_thres[LSD_THRES_CLIM_TEMP].low			= LSD_THRES_CLIM_TEMP_L;
 8001c9a:	4b18      	ldr	r3, [pc, #96]	@ (8001cfc <update_thresold_values+0x6c>)
 8001c9c:	4a19      	ldr	r2, [pc, #100]	@ (8001d04 <update_thresold_values+0x74>)
 8001c9e:	605a      	str	r2, [r3, #4]
	lsd_thres[LSD_THRES_CLIM_TEMP].high			= LSD_THRES_CLIM_TEMP_H;
 8001ca0:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <update_thresold_values+0x6c>)
 8001ca2:	4a19      	ldr	r2, [pc, #100]	@ (8001d08 <update_thresold_values+0x78>)
 8001ca4:	609a      	str	r2, [r3, #8]
	lsd_thres[LSD_THRES_CLIM_TEMP].very_high	= LSD_THRES_CLIM_TEMP_VH;
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <update_thresold_values+0x6c>)
 8001ca8:	4a18      	ldr	r2, [pc, #96]	@ (8001d0c <update_thresold_values+0x7c>)
 8001caa:	60da      	str	r2, [r3, #12]

	lsd_thres[LSD_THRES_CLIM_HUMI].very_low		= LSD_THRES_CLIM_HUMI_VL;
 8001cac:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <update_thresold_values+0x6c>)
 8001cae:	4a18      	ldr	r2, [pc, #96]	@ (8001d10 <update_thresold_values+0x80>)
 8001cb0:	611a      	str	r2, [r3, #16]
	lsd_thres[LSD_THRES_CLIM_HUMI].low			= LSD_THRES_CLIM_HUMI_L;
 8001cb2:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <update_thresold_values+0x6c>)
 8001cb4:	4a14      	ldr	r2, [pc, #80]	@ (8001d08 <update_thresold_values+0x78>)
 8001cb6:	615a      	str	r2, [r3, #20]
	lsd_thres[LSD_THRES_CLIM_HUMI].high			= LSD_THRES_CLIM_HUMI_H;
 8001cb8:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <update_thresold_values+0x6c>)
 8001cba:	4a16      	ldr	r2, [pc, #88]	@ (8001d14 <update_thresold_values+0x84>)
 8001cbc:	619a      	str	r2, [r3, #24]
	lsd_thres[LSD_THRES_CLIM_HUMI].very_high	= LSD_THRES_CLIM_HUMI_VH;
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <update_thresold_values+0x6c>)
 8001cc0:	4a15      	ldr	r2, [pc, #84]	@ (8001d18 <update_thresold_values+0x88>)
 8001cc2:	61da      	str	r2, [r3, #28]

	lsd_thres[LSD_THRES_DIST_DIST].very_low		= LSD_THRES_DIST_DIST_VL;
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <update_thresold_values+0x6c>)
 8001cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001d00 <update_thresold_values+0x70>)
 8001cc8:	621a      	str	r2, [r3, #32]
	lsd_thres[LSD_THRES_DIST_DIST].low			= LSD_THRES_DIST_DIST_L;
 8001cca:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <update_thresold_values+0x6c>)
 8001ccc:	4a0e      	ldr	r2, [pc, #56]	@ (8001d08 <update_thresold_values+0x78>)
 8001cce:	625a      	str	r2, [r3, #36]	@ 0x24
	lsd_thres[LSD_THRES_DIST_DIST].high			= LSD_THRES_DIST_DIST_H;
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <update_thresold_values+0x6c>)
 8001cd2:	4a12      	ldr	r2, [pc, #72]	@ (8001d1c <update_thresold_values+0x8c>)
 8001cd4:	629a      	str	r2, [r3, #40]	@ 0x28
	lsd_thres[LSD_THRES_DIST_DIST].very_high	= LSD_THRES_DIST_DIST_VH;
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <update_thresold_values+0x6c>)
 8001cd8:	4a11      	ldr	r2, [pc, #68]	@ (8001d20 <update_thresold_values+0x90>)
 8001cda:	62da      	str	r2, [r3, #44]	@ 0x2c

	lsd_thres[LSD_THRES_DIST_SPEED].very_low	= LSD_THRES_DIST_SPEED_VL;
 8001cdc:	4b07      	ldr	r3, [pc, #28]	@ (8001cfc <update_thresold_values+0x6c>)
 8001cde:	4a11      	ldr	r2, [pc, #68]	@ (8001d24 <update_thresold_values+0x94>)
 8001ce0:	631a      	str	r2, [r3, #48]	@ 0x30
	lsd_thres[LSD_THRES_DIST_SPEED].low			= LSD_THRES_DIST_SPEED_L;
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <update_thresold_values+0x6c>)
 8001ce4:	4a10      	ldr	r2, [pc, #64]	@ (8001d28 <update_thresold_values+0x98>)
 8001ce6:	635a      	str	r2, [r3, #52]	@ 0x34
	lsd_thres[LSD_THRES_DIST_SPEED].high		= LSD_THRES_DIST_SPEED_H;
 8001ce8:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <update_thresold_values+0x6c>)
 8001cea:	4a10      	ldr	r2, [pc, #64]	@ (8001d2c <update_thresold_values+0x9c>)
 8001cec:	639a      	str	r2, [r3, #56]	@ 0x38
	lsd_thres[LSD_THRES_DIST_SPEED].very_high	= LSD_THRES_DIST_SPEED_VH;
 8001cee:	4b03      	ldr	r3, [pc, #12]	@ (8001cfc <update_thresold_values+0x6c>)
 8001cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d30 <update_thresold_values+0xa0>)
 8001cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
	return;
 8001cf4:	bf00      	nop
}
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	200003e0 	.word	0x200003e0
 8001d00:	41200000 	.word	0x41200000
 8001d04:	41700000 	.word	0x41700000
 8001d08:	41f00000 	.word	0x41f00000
 8001d0c:	420c0000 	.word	0x420c0000
 8001d10:	41a00000 	.word	0x41a00000
 8001d14:	42a00000 	.word	0x42a00000
 8001d18:	42b40000 	.word	0x42b40000
 8001d1c:	43480000 	.word	0x43480000
 8001d20:	43520000 	.word	0x43520000
 8001d24:	43a78000 	.word	0x43a78000
 8001d28:	43a90000 	.word	0x43a90000
 8001d2c:	43af0000 	.word	0x43af0000
 8001d30:	43b10000 	.word	0x43b10000

08001d34 <categoryze_recent_data>:

static void categoryze_recent_data( void ){
 8001d34:	b598      	push	{r3, r4, r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	p_recent_log_data->clim.temperature_category = \
		compare_threshold( p_recent_log_data->clim.temperature, &lsd_thres[LSD_THRES_CLIM_TEMP] );
 8001d38:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <categoryze_recent_data+0x60>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
	p_recent_log_data->clim.temperature_category = \
 8001d3e:	4a15      	ldr	r2, [pc, #84]	@ (8001d94 <categoryze_recent_data+0x60>)
 8001d40:	6814      	ldr	r4, [r2, #0]
		compare_threshold( p_recent_log_data->clim.temperature, &lsd_thres[LSD_THRES_CLIM_TEMP] );
 8001d42:	4915      	ldr	r1, [pc, #84]	@ (8001d98 <categoryze_recent_data+0x64>)
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 f82f 	bl	8001da8 <compare_threshold>
 8001d4a:	4603      	mov	r3, r0
	p_recent_log_data->clim.temperature_category = \
 8001d4c:	7223      	strb	r3, [r4, #8]

	p_recent_log_data->clim.humidity_category = \
		compare_threshold( p_recent_log_data->clim.humidity, &lsd_thres[LSD_THRES_CLIM_HUMI] );
 8001d4e:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <categoryze_recent_data+0x60>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
	p_recent_log_data->clim.humidity_category = \
 8001d54:	4a0f      	ldr	r2, [pc, #60]	@ (8001d94 <categoryze_recent_data+0x60>)
 8001d56:	6814      	ldr	r4, [r2, #0]
		compare_threshold( p_recent_log_data->clim.humidity, &lsd_thres[LSD_THRES_CLIM_HUMI] );
 8001d58:	4910      	ldr	r1, [pc, #64]	@ (8001d9c <categoryze_recent_data+0x68>)
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f824 	bl	8001da8 <compare_threshold>
 8001d60:	4603      	mov	r3, r0
	p_recent_log_data->clim.humidity_category = \
 8001d62:	7263      	strb	r3, [r4, #9]

	p_recent_log_data->dist.distance_category = \
		compare_threshold( p_recent_log_data->dist.distance, &lsd_thres[LSD_THRES_DIST_DIST] );
 8001d64:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <categoryze_recent_data+0x60>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
	p_recent_log_data->dist.distance_category = \
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <categoryze_recent_data+0x60>)
 8001d6c:	6814      	ldr	r4, [r2, #0]
		compare_threshold( p_recent_log_data->dist.distance, &lsd_thres[LSD_THRES_DIST_DIST] );
 8001d6e:	490c      	ldr	r1, [pc, #48]	@ (8001da0 <categoryze_recent_data+0x6c>)
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 f819 	bl	8001da8 <compare_threshold>
 8001d76:	4603      	mov	r3, r0
	p_recent_log_data->dist.distance_category = \
 8001d78:	7523      	strb	r3, [r4, #20]

	p_recent_log_data->dist.speed_of_sound_category = \
		compare_threshold( p_recent_log_data->dist.speed_of_sound, &lsd_thres[LSD_THRES_DIST_SPEED] );
 8001d7a:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <categoryze_recent_data+0x60>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	691b      	ldr	r3, [r3, #16]
	p_recent_log_data->dist.speed_of_sound_category = \
 8001d80:	4a04      	ldr	r2, [pc, #16]	@ (8001d94 <categoryze_recent_data+0x60>)
 8001d82:	6814      	ldr	r4, [r2, #0]
		compare_threshold( p_recent_log_data->dist.speed_of_sound, &lsd_thres[LSD_THRES_DIST_SPEED] );
 8001d84:	4907      	ldr	r1, [pc, #28]	@ (8001da4 <categoryze_recent_data+0x70>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f80e 	bl	8001da8 <compare_threshold>
 8001d8c:	4603      	mov	r3, r0
	p_recent_log_data->dist.speed_of_sound_category = \
 8001d8e:	7563      	strb	r3, [r4, #21]

	return;
 8001d90:	bf00      	nop
}
 8001d92:	bd98      	pop	{r3, r4, r7, pc}
 8001d94:	20000420 	.word	0x20000420
 8001d98:	200003e0 	.word	0x200003e0
 8001d9c:	200003f0 	.word	0x200003f0
 8001da0:	20000400 	.word	0x20000400
 8001da4:	20000410 	.word	0x20000410

08001da8 <compare_threshold>:

static uint8_t compare_threshold( float value, LSD_TRHES_T *thres ){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
	if( value <= thres->very_low ){
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4619      	mov	r1, r3
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff f96b 	bl	8001094 <__aeabi_fcmple>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <compare_threshold+0x20>
		return LSD_THRES_BELOW_VERY_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e021      	b.n	8001e0c <compare_threshold+0x64>
	}
	else if( value <= thres->low ){
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff f960 	bl	8001094 <__aeabi_fcmple>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <compare_threshold+0x36>
		return LSD_THRES_BELOW_LOW;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e016      	b.n	8001e0c <compare_threshold+0x64>
	}
	else if( value >= thres->very_high ){
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff f95f 	bl	80010a8 <__aeabi_fcmpge>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <compare_threshold+0x4c>
		return LSD_THRES_ABOVE_VERY_HIGH;
 8001df0:	2304      	movs	r3, #4
 8001df2:	e00b      	b.n	8001e0c <compare_threshold+0x64>
	}
	else if( value >= thres->high ){
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff f954 	bl	80010a8 <__aeabi_fcmpge>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <compare_threshold+0x62>
		return LSD_THRES_ABOVE_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e000      	b.n	8001e0c <compare_threshold+0x64>
	}
	else{
		return LSD_THRES_CENTER;
 8001e0a:	2302      	movs	r3, #2
	}
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <lsd_exit_stop_mode>:
#include "MyServicesInc/usb_transmission.h"
#include "MyServicesInc/device_sleep.h"

extern volatile uint32_t lsd_cycle_count;

uint8_t lsd_exit_stop_mode( lsd_sys_clk_cfg_t clk_cfg ){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	if( clk_cfg != NULL ){
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <lsd_exit_stop_mode+0x1a>
		clk_cfg();
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4798      	blx	r3

		lsd_usb_reinit();
 8001e26:	f000 ffdd 	bl	8002de4 <lsd_usb_reinit>

		return LSD_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e000      	b.n	8001e30 <lsd_exit_stop_mode+0x1c>
	}

	return LSD_ERR_NULL_HANDLE;
 8001e2e:	23fd      	movs	r3, #253	@ 0xfd
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <lsd_enter_stop_mode>:

void lsd_enter_stop_mode( void ){
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
	lsd_usb_deinit();
 8001e3e:	f000 ffdd 	bl	8002dfc <lsd_usb_deinit>

    __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <lsd_enter_stop_mode+0x34>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	4a09      	ldr	r2, [pc, #36]	@ (8001e6c <lsd_enter_stop_mode+0x34>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	61d3      	str	r3, [r2, #28]
 8001e4e:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <lsd_enter_stop_mode+0x34>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]

    HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f005 fa37 	bl	80072d0 <HAL_PWR_EnterSTOPMode>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000

08001e70 <lsd_measure_distance>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

void lsd_measure_distance( LSD_LOG_DATA_T *p_log ){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	p_log_data = p_log;
 8001e78:	4a06      	ldr	r2, [pc, #24]	@ (8001e94 <lsd_measure_distance+0x24>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6013      	str	r3, [r2, #0]

	read_climate_variables();
 8001e7e:	f000 f80b 	bl	8001e98 <read_climate_variables>
	calculate_speed_of_sound();
 8001e82:	f000 f81d 	bl	8001ec0 <calculate_speed_of_sound>
	calculate_distance();
 8001e86:	f000 f821 	bl	8001ecc <calculate_distance>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000424 	.word	0x20000424

08001e98 <read_climate_variables>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static void read_climate_variables( void ){
 8001e98:	b598      	push	{r3, r4, r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	if( aht20_update() != LSD_OK){
 8001e9c:	f7ff f956 	bl	800114c <aht20_update>
		// todo
	}

//	clim_data->pos_buf = ( clim_data->pos_buf+ 1 ) % LSD_CLIMATE_BUF_SIZE;
	p_log_data->clim.temperature = aht20_get_temperature_C();
 8001ea0:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <read_climate_variables+0x24>)
 8001ea2:	681c      	ldr	r4, [r3, #0]
 8001ea4:	f7ff f9da 	bl	800125c <aht20_get_temperature_C>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	6023      	str	r3, [r4, #0]
	p_log_data->clim.humidity = aht20_get_humidity_RH();
 8001eac:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <read_climate_variables+0x24>)
 8001eae:	681c      	ldr	r4, [r3, #0]
 8001eb0:	f7ff fa10 	bl	80012d4 <aht20_get_humidity_RH>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	6063      	str	r3, [r4, #4]

	return;
 8001eb8:	bf00      	nop
}
 8001eba:	bd98      	pop	{r3, r4, r7, pc}
 8001ebc:	20000424 	.word	0x20000424

08001ec0 <calculate_speed_of_sound>:

static void calculate_speed_of_sound( void ){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
#ifdef LSD_PERIPH_USED_AHT20
	calculate_speed_of_sound_Cramer_1993();
 8001ec4:	f000 f838 	bl	8001f38 <calculate_speed_of_sound_Cramer_1993>
#else
	interpolateSpeedOfSound( );
#endif /* LSD_PERIPH_USED_AHT20 */
	return;
 8001ec8:	bf00      	nop
}
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <calculate_distance>:

static void calculate_distance( void ){
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
	int8_t ret __attribute__( ( unused ) );

//	ret = ajsr04m_read_tof_blocking( LSD_STD_TIMEOUT_US );
	ret = ajsr04m_read_tof_exti();
 8001ed2:	f7ff fad9 	bl	8001488 <ajsr04m_read_tof_exti>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71bb      	strb	r3, [r7, #6]

	uint8_t try_count = 10;
 8001eda:	230a      	movs	r3, #10
 8001edc:	71fb      	strb	r3, [r7, #7]
	float tof = 0.0;
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	603b      	str	r3, [r7, #0]

	do{
		HAL_Delay( 25 );
 8001ee4:	2019      	movs	r0, #25
 8001ee6:	f001 ffad 	bl	8003e44 <HAL_Delay>
		tof = ajsr04m_get_tof_ms();
 8001eea:	f7ff fad5 	bl	8001498 <ajsr04m_get_tof_ms>
 8001eee:	6038      	str	r0, [r7, #0]
		try_count--;
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	71fb      	strb	r3, [r7, #7]
	}while( tof == LSD_ERR_DEVICE_BUSY && try_count >= 0 );
 8001ef6:	490e      	ldr	r1, [pc, #56]	@ (8001f30 <calculate_distance+0x64>)
 8001ef8:	6838      	ldr	r0, [r7, #0]
 8001efa:	f7ff f8b7 	bl	800106c <__aeabi_fcmpeq>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1ef      	bne.n	8001ee4 <calculate_distance+0x18>

	p_log_data->dist.distance = (float) p_log_data->dist.speed_of_sound * tof / 2.0;
 8001f04:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <calculate_distance+0x68>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	6839      	ldr	r1, [r7, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe ff19 	bl	8000d44 <__aeabi_fmul>
 8001f12:	4603      	mov	r3, r0
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <calculate_distance+0x68>)
 8001f18:	681c      	ldr	r4, [r3, #0]
 8001f1a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f1e:	4610      	mov	r0, r2
 8001f20:	f7fe ffc4 	bl	8000eac <__aeabi_fdiv>
 8001f24:	4603      	mov	r3, r0
 8001f26:	60e3      	str	r3, [r4, #12]

	return;
 8001f28:	bf00      	nop
}
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd90      	pop	{r4, r7, pc}
 8001f30:	c0a00000 	.word	0xc0a00000
 8001f34:	20000424 	.word	0x20000424

08001f38 <calculate_speed_of_sound_Cramer_1993>:

static void calculate_speed_of_sound_Cramer_1993( void ){
 8001f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f3c:	b090      	sub	sp, #64	@ 0x40
 8001f3e:	af00      	add	r7, sp, #0
	/*
	 * Calculation based on CRAMER, Owen (1993): "The variation of the specific heat ratio and the
	 * speed of sound in air with temperature, pressure, humidity, and CO2 concentration".
	 */
	float mTemp = p_log_data->clim.temperature;
 8001f40:	4bd3      	ldr	r3, [pc, #844]	@ (8002290 <calculate_speed_of_sound_Cramer_1993+0x358>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float mHumi = p_log_data->clim.humidity;
 8001f48:	4bd1      	ldr	r3, [pc, #836]	@ (8002290 <calculate_speed_of_sound_Cramer_1993+0x358>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
	float mPres = MEAN_LOCAL_PRESSURE;
 8001f50:	4bd0      	ldr	r3, [pc, #832]	@ (8002294 <calculate_speed_of_sound_Cramer_1993+0x35c>)
 8001f52:	637b      	str	r3, [r7, #52]	@ 0x34

	float mTemp_K = mTemp + 273.15;  // Convert to Kelvin
 8001f54:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f56:	f7fe fa67 	bl	8000428 <__aeabi_f2d>
 8001f5a:	a3a9      	add	r3, pc, #676	@ (adr r3, 8002200 <calculate_speed_of_sound_Cramer_1993+0x2c8>)
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	f7fe f904 	bl	800016c <__adddf3>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7fe fd8c 	bl	8000a88 <__aeabi_d2f>
 8001f70:	4603      	mov	r3, r0
 8001f72:	633b      	str	r3, [r7, #48]	@ 0x30
	float mTemp_2 = mTemp * mTemp;
 8001f74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f76:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f78:	f7fe fee4 	bl	8000d44 <__aeabi_fmul>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	mPres *= 1000.0;                     // Convert to Pa
 8001f80:	49c5      	ldr	r1, [pc, #788]	@ (8002298 <calculate_speed_of_sound_Cramer_1993+0x360>)
 8001f82:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f84:	f7fe fede 	bl	8000d44 <__aeabi_fmul>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	637b      	str	r3, [r7, #52]	@ 0x34

	float ENH = ( 3.14 * mPres * pow(10,-8) ) + 1.00062 + ( mTemp_2 * 5.600 * pow(10,-7) );
 8001f8c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f8e:	f7fe fa4b 	bl	8000428 <__aeabi_f2d>
 8001f92:	a39d      	add	r3, pc, #628	@ (adr r3, 8002208 <calculate_speed_of_sound_Cramer_1993+0x2d0>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	f7fe fa9e 	bl	80004d8 <__aeabi_dmul>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	a39a      	add	r3, pc, #616	@ (adr r3, 8002210 <calculate_speed_of_sound_Cramer_1993+0x2d8>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe fa95 	bl	80004d8 <__aeabi_dmul>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	a398      	add	r3, pc, #608	@ (adr r3, 8002218 <calculate_speed_of_sound_Cramer_1993+0x2e0>)
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe f8d6 	bl	800016c <__adddf3>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4614      	mov	r4, r2
 8001fc6:	461d      	mov	r5, r3
 8001fc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001fca:	f7fe fa2d 	bl	8000428 <__aeabi_f2d>
 8001fce:	a394      	add	r3, pc, #592	@ (adr r3, 8002220 <calculate_speed_of_sound_Cramer_1993+0x2e8>)
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	f7fe fa80 	bl	80004d8 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	a391      	add	r3, pc, #580	@ (adr r3, 8002228 <calculate_speed_of_sound_Cramer_1993+0x2f0>)
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	f7fe fa77 	bl	80004d8 <__aeabi_dmul>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4620      	mov	r0, r4
 8001ff0:	4629      	mov	r1, r5
 8001ff2:	f7fe f8bb 	bl	800016c <__adddf3>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f7fe fd43 	bl	8000a88 <__aeabi_d2f>
 8002002:	4603      	mov	r3, r0
 8002004:	62bb      	str	r3, [r7, #40]	@ 0x28

	float e = 2.71828182845904523536;
 8002006:	4ba5      	ldr	r3, [pc, #660]	@ (800229c <calculate_speed_of_sound_Cramer_1993+0x364>)
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
	float PSV1 = ( mTemp_K * mTemp_K * 1.2378847 * pow(10,-5) ) - ( 1.9121316 * mTemp_K / 100.0 );
 800200a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800200c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800200e:	f7fe fe99 	bl	8000d44 <__aeabi_fmul>
 8002012:	4603      	mov	r3, r0
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fa07 	bl	8000428 <__aeabi_f2d>
 800201a:	a385      	add	r3, pc, #532	@ (adr r3, 8002230 <calculate_speed_of_sound_Cramer_1993+0x2f8>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe fa5a 	bl	80004d8 <__aeabi_dmul>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	a382      	add	r3, pc, #520	@ (adr r3, 8002238 <calculate_speed_of_sound_Cramer_1993+0x300>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	f7fe fa51 	bl	80004d8 <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4614      	mov	r4, r2
 800203c:	461d      	mov	r5, r3
 800203e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002040:	f7fe f9f2 	bl	8000428 <__aeabi_f2d>
 8002044:	a37e      	add	r3, pc, #504	@ (adr r3, 8002240 <calculate_speed_of_sound_Cramer_1993+0x308>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe fa45 	bl	80004d8 <__aeabi_dmul>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	4b91      	ldr	r3, [pc, #580]	@ (80022a0 <calculate_speed_of_sound_Cramer_1993+0x368>)
 800205c:	f7fe fb66 	bl	800072c <__aeabi_ddiv>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4620      	mov	r0, r4
 8002066:	4629      	mov	r1, r5
 8002068:	f7fe f87e 	bl	8000168 <__aeabi_dsub>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4610      	mov	r0, r2
 8002072:	4619      	mov	r1, r3
 8002074:	f7fe fd08 	bl	8000a88 <__aeabi_d2f>
 8002078:	4603      	mov	r3, r0
 800207a:	623b      	str	r3, [r7, #32]
	float PSV2 = 33.93711047 - ( 6343.1645 / mTemp_K );
 800207c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800207e:	f7fe f9d3 	bl	8000428 <__aeabi_f2d>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	a170      	add	r1, pc, #448	@ (adr r1, 8002248 <calculate_speed_of_sound_Cramer_1993+0x310>)
 8002088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800208c:	f7fe fb4e 	bl	800072c <__aeabi_ddiv>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	a16e      	add	r1, pc, #440	@ (adr r1, 8002250 <calculate_speed_of_sound_Cramer_1993+0x318>)
 8002096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800209a:	f7fe f865 	bl	8000168 <__aeabi_dsub>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4610      	mov	r0, r2
 80020a4:	4619      	mov	r1, r3
 80020a6:	f7fe fcef 	bl	8000a88 <__aeabi_d2f>
 80020aa:	4603      	mov	r3, r0
 80020ac:	61fb      	str	r3, [r7, #28]
	float PSV = pow(e,PSV1) * pow(e,PSV2);
 80020ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020b0:	f7fe f9ba 	bl	8000428 <__aeabi_f2d>
 80020b4:	4604      	mov	r4, r0
 80020b6:	460d      	mov	r5, r1
 80020b8:	6a38      	ldr	r0, [r7, #32]
 80020ba:	f7fe f9b5 	bl	8000428 <__aeabi_f2d>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4620      	mov	r0, r4
 80020c4:	4629      	mov	r1, r5
 80020c6:	f00f fdf3 	bl	8011cb0 <pow>
 80020ca:	4604      	mov	r4, r0
 80020cc:	460d      	mov	r5, r1
 80020ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020d0:	f7fe f9aa 	bl	8000428 <__aeabi_f2d>
 80020d4:	4680      	mov	r8, r0
 80020d6:	4689      	mov	r9, r1
 80020d8:	69f8      	ldr	r0, [r7, #28]
 80020da:	f7fe f9a5 	bl	8000428 <__aeabi_f2d>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4640      	mov	r0, r8
 80020e4:	4649      	mov	r1, r9
 80020e6:	f00f fde3 	bl	8011cb0 <pow>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4620      	mov	r0, r4
 80020f0:	4629      	mov	r1, r5
 80020f2:	f7fe f9f1 	bl	80004d8 <__aeabi_dmul>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	f7fe fcc3 	bl	8000a88 <__aeabi_d2f>
 8002102:	4603      	mov	r3, r0
 8002104:	61bb      	str	r3, [r7, #24]

	float Xw = ( mHumi * ENH * PSV / mPres ) / 100.0; 	// Mole fraction of water vapor
 8002106:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002108:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800210a:	f7fe fe1b 	bl	8000d44 <__aeabi_fmul>
 800210e:	4603      	mov	r3, r0
 8002110:	69b9      	ldr	r1, [r7, #24]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fe16 	bl	8000d44 <__aeabi_fmul>
 8002118:	4603      	mov	r3, r0
 800211a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fec5 	bl	8000eac <__aeabi_fdiv>
 8002122:	4603      	mov	r3, r0
 8002124:	495f      	ldr	r1, [pc, #380]	@ (80022a4 <calculate_speed_of_sound_Cramer_1993+0x36c>)
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fec0 	bl	8000eac <__aeabi_fdiv>
 800212c:	4603      	mov	r3, r0
 800212e:	617b      	str	r3, [r7, #20]
	float Xc = 0.000400;                           			// Mole fraction of carbon dioxide
 8002130:	4b5d      	ldr	r3, [pc, #372]	@ (80022a8 <calculate_speed_of_sound_Cramer_1993+0x370>)
 8002132:	613b      	str	r3, [r7, #16]

	float C1 = ( 0.603055 * mTemp ) + 331.5024 - ( mTemp_2 * 5.28 * pow(10,-4) ) + ( 0.1495874 * mTemp + 51.471935 - ( mTemp_2 * 7.82 * pow(10,-4) ) ) * Xw;
 8002134:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002136:	f7fe f977 	bl	8000428 <__aeabi_f2d>
 800213a:	a347      	add	r3, pc, #284	@ (adr r3, 8002258 <calculate_speed_of_sound_Cramer_1993+0x320>)
 800213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002140:	f7fe f9ca 	bl	80004d8 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	a344      	add	r3, pc, #272	@ (adr r3, 8002260 <calculate_speed_of_sound_Cramer_1993+0x328>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	f7fe f80b 	bl	800016c <__adddf3>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4614      	mov	r4, r2
 800215c:	461d      	mov	r5, r3
 800215e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002160:	f7fe f962 	bl	8000428 <__aeabi_f2d>
 8002164:	a340      	add	r3, pc, #256	@ (adr r3, 8002268 <calculate_speed_of_sound_Cramer_1993+0x330>)
 8002166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216a:	f7fe f9b5 	bl	80004d8 <__aeabi_dmul>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	a33e      	add	r3, pc, #248	@ (adr r3, 8002270 <calculate_speed_of_sound_Cramer_1993+0x338>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	f7fe f9ac 	bl	80004d8 <__aeabi_dmul>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4620      	mov	r0, r4
 8002186:	4629      	mov	r1, r5
 8002188:	f7fd ffee 	bl	8000168 <__aeabi_dsub>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4614      	mov	r4, r2
 8002192:	461d      	mov	r5, r3
 8002194:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002196:	f7fe f947 	bl	8000428 <__aeabi_f2d>
 800219a:	a337      	add	r3, pc, #220	@ (adr r3, 8002278 <calculate_speed_of_sound_Cramer_1993+0x340>)
 800219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a0:	f7fe f99a 	bl	80004d8 <__aeabi_dmul>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	a334      	add	r3, pc, #208	@ (adr r3, 8002280 <calculate_speed_of_sound_Cramer_1993+0x348>)
 80021ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b2:	f7fd ffdb 	bl	800016c <__adddf3>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4690      	mov	r8, r2
 80021bc:	4699      	mov	r9, r3
 80021be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021c0:	f7fe f932 	bl	8000428 <__aeabi_f2d>
 80021c4:	a330      	add	r3, pc, #192	@ (adr r3, 8002288 <calculate_speed_of_sound_Cramer_1993+0x350>)
 80021c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ca:	f7fe f985 	bl	80004d8 <__aeabi_dmul>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	a326      	add	r3, pc, #152	@ (adr r3, 8002270 <calculate_speed_of_sound_Cramer_1993+0x338>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe f97c 	bl	80004d8 <__aeabi_dmul>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4640      	mov	r0, r8
 80021e6:	4649      	mov	r1, r9
 80021e8:	f7fd ffbe 	bl	8000168 <__aeabi_dsub>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4690      	mov	r8, r2
 80021f2:	4699      	mov	r9, r3
 80021f4:	6978      	ldr	r0, [r7, #20]
 80021f6:	f7fe f917 	bl	8000428 <__aeabi_f2d>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	e055      	b.n	80022ac <calculate_speed_of_sound_Cramer_1993+0x374>
 8002200:	66666666 	.word	0x66666666
 8002204:	40711266 	.word	0x40711266
 8002208:	51eb851f 	.word	0x51eb851f
 800220c:	40091eb8 	.word	0x40091eb8
 8002210:	e2308c3a 	.word	0xe2308c3a
 8002214:	3e45798e 	.word	0x3e45798e
 8002218:	1dfb938a 	.word	0x1dfb938a
 800221c:	3ff0028a 	.word	0x3ff0028a
 8002220:	66666666 	.word	0x66666666
 8002224:	40166666 	.word	0x40166666
 8002228:	9abcaf48 	.word	0x9abcaf48
 800222c:	3e7ad7f2 	.word	0x3e7ad7f2
 8002230:	2feb8016 	.word	0x2feb8016
 8002234:	3ff3ce60 	.word	0x3ff3ce60
 8002238:	88e368f1 	.word	0x88e368f1
 800223c:	3ee4f8b5 	.word	0x3ee4f8b5
 8002240:	4dfa5ed6 	.word	0x4dfa5ed6
 8002244:	3ffe9817 	.word	0x3ffe9817
 8002248:	1cac0831 	.word	0x1cac0831
 800224c:	40b8c72a 	.word	0x40b8c72a
 8002250:	3c62b1d1 	.word	0x3c62b1d1
 8002254:	4040f7f3 	.word	0x4040f7f3
 8002258:	ffd60e95 	.word	0xffd60e95
 800225c:	3fe34c39 	.word	0x3fe34c39
 8002260:	d495182b 	.word	0xd495182b
 8002264:	4074b809 	.word	0x4074b809
 8002268:	51eb851f 	.word	0x51eb851f
 800226c:	40151eb8 	.word	0x40151eb8
 8002270:	eb1c432d 	.word	0xeb1c432d
 8002274:	3f1a36e2 	.word	0x3f1a36e2
 8002278:	0f7263cb 	.word	0x0f7263cb
 800227c:	3fc325ae 	.word	0x3fc325ae
 8002280:	5db76b3c 	.word	0x5db76b3c
 8002284:	4049bc68 	.word	0x4049bc68
 8002288:	147ae148 	.word	0x147ae148
 800228c:	401f47ae 	.word	0x401f47ae
 8002290:	20000424 	.word	0x20000424
 8002294:	42cb8a3d 	.word	0x42cb8a3d
 8002298:	447a0000 	.word	0x447a0000
 800229c:	402df854 	.word	0x402df854
 80022a0:	40590000 	.word	0x40590000
 80022a4:	42c80000 	.word	0x42c80000
 80022a8:	39d1b717 	.word	0x39d1b717
 80022ac:	4640      	mov	r0, r8
 80022ae:	4649      	mov	r1, r9
 80022b0:	f7fe f912 	bl	80004d8 <__aeabi_dmul>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4620      	mov	r0, r4
 80022ba:	4629      	mov	r1, r5
 80022bc:	f7fd ff56 	bl	800016c <__adddf3>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	f7fe fbde 	bl	8000a88 <__aeabi_d2f>
 80022cc:	4603      	mov	r3, r0
 80022ce:	60fb      	str	r3, [r7, #12]
	float C2 = ( (-1.82 * pow(10,-7) ) + ( 3.73 * mTemp * pow(10,-8) ) - ( mTemp_2 * 2.93 * pow(10,-10) ) ) * mPres + ( -85.20931 - 0.228525 * mTemp + ( mTemp_2 * 5.91 * pow(10,-5) ) ) * Xc;
 80022d0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80022d2:	f7fe f8a9 	bl	8000428 <__aeabi_f2d>
 80022d6:	a38a      	add	r3, pc, #552	@ (adr r3, 8002500 <calculate_speed_of_sound_Cramer_1993+0x5c8>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	f7fe f8fc 	bl	80004d8 <__aeabi_dmul>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	a387      	add	r3, pc, #540	@ (adr r3, 8002508 <calculate_speed_of_sound_Cramer_1993+0x5d0>)
 80022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ee:	f7fe f8f3 	bl	80004d8 <__aeabi_dmul>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	a385      	add	r3, pc, #532	@ (adr r3, 8002510 <calculate_speed_of_sound_Cramer_1993+0x5d8>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fd ff32 	bl	8000168 <__aeabi_dsub>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4614      	mov	r4, r2
 800230a:	461d      	mov	r5, r3
 800230c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800230e:	f7fe f88b 	bl	8000428 <__aeabi_f2d>
 8002312:	a381      	add	r3, pc, #516	@ (adr r3, 8002518 <calculate_speed_of_sound_Cramer_1993+0x5e0>)
 8002314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002318:	f7fe f8de 	bl	80004d8 <__aeabi_dmul>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	a37e      	add	r3, pc, #504	@ (adr r3, 8002520 <calculate_speed_of_sound_Cramer_1993+0x5e8>)
 8002326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232a:	f7fe f8d5 	bl	80004d8 <__aeabi_dmul>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4620      	mov	r0, r4
 8002334:	4629      	mov	r1, r5
 8002336:	f7fd ff17 	bl	8000168 <__aeabi_dsub>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4614      	mov	r4, r2
 8002340:	461d      	mov	r5, r3
 8002342:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002344:	f7fe f870 	bl	8000428 <__aeabi_f2d>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fe f8c2 	bl	80004d8 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4614      	mov	r4, r2
 800235a:	461d      	mov	r5, r3
 800235c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800235e:	f7fe f863 	bl	8000428 <__aeabi_f2d>
 8002362:	a371      	add	r3, pc, #452	@ (adr r3, 8002528 <calculate_speed_of_sound_Cramer_1993+0x5f0>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	f7fe f8b6 	bl	80004d8 <__aeabi_dmul>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	a16f      	add	r1, pc, #444	@ (adr r1, 8002530 <calculate_speed_of_sound_Cramer_1993+0x5f8>)
 8002372:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002376:	f7fd fef7 	bl	8000168 <__aeabi_dsub>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4690      	mov	r8, r2
 8002380:	4699      	mov	r9, r3
 8002382:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002384:	f7fe f850 	bl	8000428 <__aeabi_f2d>
 8002388:	a36b      	add	r3, pc, #428	@ (adr r3, 8002538 <calculate_speed_of_sound_Cramer_1993+0x600>)
 800238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238e:	f7fe f8a3 	bl	80004d8 <__aeabi_dmul>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	a369      	add	r3, pc, #420	@ (adr r3, 8002540 <calculate_speed_of_sound_Cramer_1993+0x608>)
 800239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a0:	f7fe f89a 	bl	80004d8 <__aeabi_dmul>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4640      	mov	r0, r8
 80023aa:	4649      	mov	r1, r9
 80023ac:	f7fd fede 	bl	800016c <__adddf3>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4690      	mov	r8, r2
 80023b6:	4699      	mov	r9, r3
 80023b8:	6938      	ldr	r0, [r7, #16]
 80023ba:	f7fe f835 	bl	8000428 <__aeabi_f2d>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4640      	mov	r0, r8
 80023c4:	4649      	mov	r1, r9
 80023c6:	f7fe f887 	bl	80004d8 <__aeabi_dmul>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4620      	mov	r0, r4
 80023d0:	4629      	mov	r1, r5
 80023d2:	f7fd fecb 	bl	800016c <__adddf3>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f7fe fb53 	bl	8000a88 <__aeabi_d2f>
 80023e2:	4603      	mov	r3, r0
 80023e4:	60bb      	str	r3, [r7, #8]
	float C3 = Xw * Xw * 2.835149 - mPres * mPres * 2.15 * pow(10,-13) + Xc * Xc * 29.179762 + 4.86 * pow(10,-4) * Xw * mPres * Xc;
 80023e6:	6979      	ldr	r1, [r7, #20]
 80023e8:	6978      	ldr	r0, [r7, #20]
 80023ea:	f7fe fcab 	bl	8000d44 <__aeabi_fmul>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe f819 	bl	8000428 <__aeabi_f2d>
 80023f6:	a354      	add	r3, pc, #336	@ (adr r3, 8002548 <calculate_speed_of_sound_Cramer_1993+0x610>)
 80023f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fc:	f7fe f86c 	bl	80004d8 <__aeabi_dmul>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4614      	mov	r4, r2
 8002406:	461d      	mov	r5, r3
 8002408:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800240a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800240c:	f7fe fc9a 	bl	8000d44 <__aeabi_fmul>
 8002410:	4603      	mov	r3, r0
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f808 	bl	8000428 <__aeabi_f2d>
 8002418:	a34d      	add	r3, pc, #308	@ (adr r3, 8002550 <calculate_speed_of_sound_Cramer_1993+0x618>)
 800241a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241e:	f7fe f85b 	bl	80004d8 <__aeabi_dmul>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	a34b      	add	r3, pc, #300	@ (adr r3, 8002558 <calculate_speed_of_sound_Cramer_1993+0x620>)
 800242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002430:	f7fe f852 	bl	80004d8 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4620      	mov	r0, r4
 800243a:	4629      	mov	r1, r5
 800243c:	f7fd fe94 	bl	8000168 <__aeabi_dsub>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4614      	mov	r4, r2
 8002446:	461d      	mov	r5, r3
 8002448:	6939      	ldr	r1, [r7, #16]
 800244a:	6938      	ldr	r0, [r7, #16]
 800244c:	f7fe fc7a 	bl	8000d44 <__aeabi_fmul>
 8002450:	4603      	mov	r3, r0
 8002452:	4618      	mov	r0, r3
 8002454:	f7fd ffe8 	bl	8000428 <__aeabi_f2d>
 8002458:	a341      	add	r3, pc, #260	@ (adr r3, 8002560 <calculate_speed_of_sound_Cramer_1993+0x628>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f7fe f83b 	bl	80004d8 <__aeabi_dmul>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4620      	mov	r0, r4
 8002468:	4629      	mov	r1, r5
 800246a:	f7fd fe7f 	bl	800016c <__adddf3>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4614      	mov	r4, r2
 8002474:	461d      	mov	r5, r3
 8002476:	6978      	ldr	r0, [r7, #20]
 8002478:	f7fd ffd6 	bl	8000428 <__aeabi_f2d>
 800247c:	a33a      	add	r3, pc, #232	@ (adr r3, 8002568 <calculate_speed_of_sound_Cramer_1993+0x630>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	f7fe f829 	bl	80004d8 <__aeabi_dmul>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4690      	mov	r8, r2
 800248c:	4699      	mov	r9, r3
 800248e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002490:	f7fd ffca 	bl	8000428 <__aeabi_f2d>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4640      	mov	r0, r8
 800249a:	4649      	mov	r1, r9
 800249c:	f7fe f81c 	bl	80004d8 <__aeabi_dmul>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4690      	mov	r8, r2
 80024a6:	4699      	mov	r9, r3
 80024a8:	6938      	ldr	r0, [r7, #16]
 80024aa:	f7fd ffbd 	bl	8000428 <__aeabi_f2d>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4640      	mov	r0, r8
 80024b4:	4649      	mov	r1, r9
 80024b6:	f7fe f80f 	bl	80004d8 <__aeabi_dmul>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4620      	mov	r0, r4
 80024c0:	4629      	mov	r1, r5
 80024c2:	f7fd fe53 	bl	800016c <__adddf3>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	f7fe fadb 	bl	8000a88 <__aeabi_d2f>
 80024d2:	4603      	mov	r3, r0
 80024d4:	607b      	str	r3, [r7, #4]

	p_log_data->dist.speed_of_sound = C1 + C2 - C3;
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f7fe fb2b 	bl	8000b34 <__addsf3>
 80024de:	4603      	mov	r3, r0
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b23      	ldr	r3, [pc, #140]	@ (8002570 <calculate_speed_of_sound_Cramer_1993+0x638>)
 80024e4:	681c      	ldr	r4, [r3, #0]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4610      	mov	r0, r2
 80024ea:	f7fe fb21 	bl	8000b30 <__aeabi_fsub>
 80024ee:	4603      	mov	r3, r0
 80024f0:	6123      	str	r3, [r4, #16]

	return;
 80024f2:	bf00      	nop
}
 80024f4:	3740      	adds	r7, #64	@ 0x40
 80024f6:	46bd      	mov	sp, r7
 80024f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024fc:	f3af 8000 	nop.w
 8002500:	3d70a3d7 	.word	0x3d70a3d7
 8002504:	400dd70a 	.word	0x400dd70a
 8002508:	e2308c3a 	.word	0xe2308c3a
 800250c:	3e45798e 	.word	0x3e45798e
 8002510:	ee17391b 	.word	0xee17391b
 8002514:	3e886d78 	.word	0x3e886d78
 8002518:	d70a3d71 	.word	0xd70a3d71
 800251c:	400770a3 	.word	0x400770a3
 8002520:	d9d7bdbb 	.word	0xd9d7bdbb
 8002524:	3ddb7cdf 	.word	0x3ddb7cdf
 8002528:	a4a8c155 	.word	0xa4a8c155
 800252c:	3fcd404e 	.word	0x3fcd404e
 8002530:	55c52e73 	.word	0x55c52e73
 8002534:	c0554d65 	.word	0xc0554d65
 8002538:	0a3d70a4 	.word	0x0a3d70a4
 800253c:	4017a3d7 	.word	0x4017a3d7
 8002540:	88e368f1 	.word	0x88e368f1
 8002544:	3ee4f8b5 	.word	0x3ee4f8b5
 8002548:	99524bfd 	.word	0x99524bfd
 800254c:	4006ae62 	.word	0x4006ae62
 8002550:	33333333 	.word	0x33333333
 8002554:	40013333 	.word	0x40013333
 8002558:	68497682 	.word	0x68497682
 800255c:	3d3c25c2 	.word	0x3d3c25c2
 8002560:	e1e71045 	.word	0xe1e71045
 8002564:	403d2e04 	.word	0x403d2e04
 8002568:	1b1960fb 	.word	0x1b1960fb
 800256c:	3f3fd9ba 	.word	0x3f3fd9ba
 8002570:	20000424 	.word	0x20000424

08002574 <lsd_log_write>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

void lsd_log_write( LSD_LOG_DATA_T *p_log_data ){
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	lsd_get_rtc_timestamp( &log_timestamp );
 800257c:	480c      	ldr	r0, [pc, #48]	@ (80025b0 <lsd_log_write+0x3c>)
 800257e:	f7ff fb2b 	bl	8001bd8 <lsd_get_rtc_timestamp>

	uint8_t try_count = 10;
 8002582:	230a      	movs	r3, #10
 8002584:	73fb      	strb	r3, [r7, #15]
	do{
		write_log_values( p_log_data );
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f814 	bl	80025b4 <write_log_values>
		try_count--;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	3b01      	subs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
		HAL_Delay( 10 );
 8002592:	200a      	movs	r0, #10
 8002594:	f001 fc56 	bl	8003e44 <HAL_Delay>
	} while( log_values_check() != LSD_OK && try_count >= 0 );
 8002598:	f000 f99e 	bl	80028d8 <log_values_check>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f1      	bne.n	8002586 <lsd_log_write+0x12>

	update_pos_indexes();
 80025a2:	f000 f9cd 	bl	8002940 <update_pos_indexes>
	return;
 80025a6:	bf00      	nop
}
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000428 	.word	0x20000428

080025b4 <write_log_values>:
	log_mngr.was_transmitted 		= lsd_log_buffer[pos].was_transmitted;

	return;
}

static void write_log_values( LSD_LOG_DATA_T *p_log_data ){
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	// Update local log buffer:
	log_mngr.timestamp.year 		= log_timestamp.year;
 80025bc:	4bb2      	ldr	r3, [pc, #712]	@ (8002888 <write_log_values+0x2d4>)
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	4bb2      	ldr	r3, [pc, #712]	@ (800288c <write_log_values+0x2d8>)
 80025c2:	701a      	strb	r2, [r3, #0]
	log_mngr.timestamp.month 		= log_timestamp.month;
 80025c4:	4bb0      	ldr	r3, [pc, #704]	@ (8002888 <write_log_values+0x2d4>)
 80025c6:	785b      	ldrb	r3, [r3, #1]
 80025c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80025cc:	b2d9      	uxtb	r1, r3
 80025ce:	4aaf      	ldr	r2, [pc, #700]	@ (800288c <write_log_values+0x2d8>)
 80025d0:	7853      	ldrb	r3, [r2, #1]
 80025d2:	f361 0303 	bfi	r3, r1, #0, #4
 80025d6:	7053      	strb	r3, [r2, #1]
	log_mngr.timestamp.day 			= log_timestamp.day;
 80025d8:	4bab      	ldr	r3, [pc, #684]	@ (8002888 <write_log_values+0x2d4>)
 80025da:	789b      	ldrb	r3, [r3, #2]
 80025dc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80025e0:	b2d9      	uxtb	r1, r3
 80025e2:	4aaa      	ldr	r2, [pc, #680]	@ (800288c <write_log_values+0x2d8>)
 80025e4:	7893      	ldrb	r3, [r2, #2]
 80025e6:	f361 0304 	bfi	r3, r1, #0, #5
 80025ea:	7093      	strb	r3, [r2, #2]
	log_mngr.timestamp.hour 		= log_timestamp.hour;
 80025ec:	4ba6      	ldr	r3, [pc, #664]	@ (8002888 <write_log_values+0x2d4>)
 80025ee:	78db      	ldrb	r3, [r3, #3]
 80025f0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80025f4:	b2d9      	uxtb	r1, r3
 80025f6:	4aa5      	ldr	r2, [pc, #660]	@ (800288c <write_log_values+0x2d8>)
 80025f8:	78d3      	ldrb	r3, [r2, #3]
 80025fa:	f361 0304 	bfi	r3, r1, #0, #5
 80025fe:	70d3      	strb	r3, [r2, #3]
	log_mngr.timestamp.minute 		= log_timestamp.minute;
 8002600:	4ba1      	ldr	r3, [pc, #644]	@ (8002888 <write_log_values+0x2d4>)
 8002602:	791b      	ldrb	r3, [r3, #4]
 8002604:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002608:	b2d9      	uxtb	r1, r3
 800260a:	4aa0      	ldr	r2, [pc, #640]	@ (800288c <write_log_values+0x2d8>)
 800260c:	7913      	ldrb	r3, [r2, #4]
 800260e:	f361 0305 	bfi	r3, r1, #0, #6
 8002612:	7113      	strb	r3, [r2, #4]
	log_mngr.timestamp.second 		= log_timestamp.second;
 8002614:	4b9c      	ldr	r3, [pc, #624]	@ (8002888 <write_log_values+0x2d4>)
 8002616:	795b      	ldrb	r3, [r3, #5]
 8002618:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800261c:	b2d9      	uxtb	r1, r3
 800261e:	4a9b      	ldr	r2, [pc, #620]	@ (800288c <write_log_values+0x2d8>)
 8002620:	7953      	ldrb	r3, [r2, #5]
 8002622:	f361 0305 	bfi	r3, r1, #0, #6
 8002626:	7153      	strb	r3, [r2, #5]
	log_mngr.timestamp.reserved		= log_timestamp.reserved;
 8002628:	4b97      	ldr	r3, [pc, #604]	@ (8002888 <write_log_values+0x2d4>)
 800262a:	799b      	ldrb	r3, [r3, #6]
 800262c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002630:	b2d9      	uxtb	r1, r3
 8002632:	4a96      	ldr	r2, [pc, #600]	@ (800288c <write_log_values+0x2d8>)
 8002634:	7993      	ldrb	r3, [r2, #6]
 8002636:	f361 0303 	bfi	r3, r1, #0, #4
 800263a:	7193      	strb	r3, [r2, #6]
	log_mngr.temperature_centi_C	= (uint16_t) ( 100 * p_log_data->clim.temperature);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4993      	ldr	r1, [pc, #588]	@ (8002890 <write_log_values+0x2dc>)
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fb7e 	bl	8000d44 <__aeabi_fmul>
 8002648:	4603      	mov	r3, r0
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fd40 	bl	80010d0 <__aeabi_f2uiz>
 8002650:	4603      	mov	r3, r0
 8002652:	b29a      	uxth	r2, r3
 8002654:	4b8d      	ldr	r3, [pc, #564]	@ (800288c <write_log_values+0x2d8>)
 8002656:	811a      	strh	r2, [r3, #8]
	log_mngr.humidity_centi_RH		= (uint16_t) ( 100 * p_log_data->clim.humidity );
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	498c      	ldr	r1, [pc, #560]	@ (8002890 <write_log_values+0x2dc>)
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fb70 	bl	8000d44 <__aeabi_fmul>
 8002664:	4603      	mov	r3, r0
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fd32 	bl	80010d0 <__aeabi_f2uiz>
 800266c:	4603      	mov	r3, r0
 800266e:	b29a      	uxth	r2, r3
 8002670:	4b86      	ldr	r3, [pc, #536]	@ (800288c <write_log_values+0x2d8>)
 8002672:	815a      	strh	r2, [r3, #10]
	log_mngr.speed_of_sound_mps 	= (uint16_t) ( 100 * p_log_data->dist.speed_of_sound );
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	4985      	ldr	r1, [pc, #532]	@ (8002890 <write_log_values+0x2dc>)
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fb62 	bl	8000d44 <__aeabi_fmul>
 8002680:	4603      	mov	r3, r0
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fd24 	bl	80010d0 <__aeabi_f2uiz>
 8002688:	4603      	mov	r3, r0
 800268a:	b29a      	uxth	r2, r3
 800268c:	4b7f      	ldr	r3, [pc, #508]	@ (800288c <write_log_values+0x2d8>)
 800268e:	819a      	strh	r2, [r3, #12]
	log_mngr.distance_mm 			= (uint16_t) ( 10  * p_log_data->dist.distance );		// cm to mm
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	497f      	ldr	r1, [pc, #508]	@ (8002894 <write_log_values+0x2e0>)
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fb54 	bl	8000d44 <__aeabi_fmul>
 800269c:	4603      	mov	r3, r0
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fd16 	bl	80010d0 <__aeabi_f2uiz>
 80026a4:	4603      	mov	r3, r0
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	4b78      	ldr	r3, [pc, #480]	@ (800288c <write_log_values+0x2d8>)
 80026aa:	81da      	strh	r2, [r3, #14]
	log_mngr.found_errors 			= p_log_data->errors;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7e1a      	ldrb	r2, [r3, #24]
 80026b0:	4b76      	ldr	r3, [pc, #472]	@ (800288c <write_log_values+0x2d8>)
 80026b2:	741a      	strb	r2, [r3, #16]
	log_mngr.was_transmitted 		= p_log_data->transmitted;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	7e5a      	ldrb	r2, [r3, #25]
 80026b8:	4b74      	ldr	r3, [pc, #464]	@ (800288c <write_log_values+0x2d8>)
 80026ba:	745a      	strb	r2, [r3, #17]

	// Update global log buffer:
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.year 			= log_timestamp.year;
 80026bc:	4b76      	ldr	r3, [pc, #472]	@ (8002898 <write_log_values+0x2e4>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	4619      	mov	r1, r3
 80026c2:	4b71      	ldr	r3, [pc, #452]	@ (8002888 <write_log_values+0x2d4>)
 80026c4:	7818      	ldrb	r0, [r3, #0]
 80026c6:	4a75      	ldr	r2, [pc, #468]	@ (800289c <write_log_values+0x2e8>)
 80026c8:	460b      	mov	r3, r1
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	440b      	add	r3, r1
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	4602      	mov	r2, r0
 80026d4:	701a      	strb	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.month 		= log_timestamp.month;
 80026d6:	4b70      	ldr	r3, [pc, #448]	@ (8002898 <write_log_values+0x2e4>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002888 <write_log_values+0x2d4>)
 80026de:	785b      	ldrb	r3, [r3, #1]
 80026e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80026e4:	b2d9      	uxtb	r1, r3
 80026e6:	4a6d      	ldr	r2, [pc, #436]	@ (800289c <write_log_values+0x2e8>)
 80026e8:	4603      	mov	r3, r0
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4403      	add	r3, r0
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	441a      	add	r2, r3
 80026f2:	7853      	ldrb	r3, [r2, #1]
 80026f4:	f361 0303 	bfi	r3, r1, #0, #4
 80026f8:	7053      	strb	r3, [r2, #1]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.day 			= log_timestamp.day;
 80026fa:	4b67      	ldr	r3, [pc, #412]	@ (8002898 <write_log_values+0x2e4>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	4b61      	ldr	r3, [pc, #388]	@ (8002888 <write_log_values+0x2d4>)
 8002702:	789b      	ldrb	r3, [r3, #2]
 8002704:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002708:	b2d9      	uxtb	r1, r3
 800270a:	4a64      	ldr	r2, [pc, #400]	@ (800289c <write_log_values+0x2e8>)
 800270c:	4603      	mov	r3, r0
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4403      	add	r3, r0
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	441a      	add	r2, r3
 8002716:	7893      	ldrb	r3, [r2, #2]
 8002718:	f361 0304 	bfi	r3, r1, #0, #5
 800271c:	7093      	strb	r3, [r2, #2]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.hour 			= log_timestamp.hour;
 800271e:	4b5e      	ldr	r3, [pc, #376]	@ (8002898 <write_log_values+0x2e4>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	4b58      	ldr	r3, [pc, #352]	@ (8002888 <write_log_values+0x2d4>)
 8002726:	78db      	ldrb	r3, [r3, #3]
 8002728:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800272c:	b2d9      	uxtb	r1, r3
 800272e:	4a5b      	ldr	r2, [pc, #364]	@ (800289c <write_log_values+0x2e8>)
 8002730:	4603      	mov	r3, r0
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4403      	add	r3, r0
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	441a      	add	r2, r3
 800273a:	78d3      	ldrb	r3, [r2, #3]
 800273c:	f361 0304 	bfi	r3, r1, #0, #5
 8002740:	70d3      	strb	r3, [r2, #3]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.minute 		= log_timestamp.minute;
 8002742:	4b55      	ldr	r3, [pc, #340]	@ (8002898 <write_log_values+0x2e4>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	4b4f      	ldr	r3, [pc, #316]	@ (8002888 <write_log_values+0x2d4>)
 800274a:	791b      	ldrb	r3, [r3, #4]
 800274c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002750:	b2d9      	uxtb	r1, r3
 8002752:	4a52      	ldr	r2, [pc, #328]	@ (800289c <write_log_values+0x2e8>)
 8002754:	4603      	mov	r3, r0
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4403      	add	r3, r0
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	441a      	add	r2, r3
 800275e:	7913      	ldrb	r3, [r2, #4]
 8002760:	f361 0305 	bfi	r3, r1, #0, #6
 8002764:	7113      	strb	r3, [r2, #4]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.second 		= log_timestamp.second;
 8002766:	4b4c      	ldr	r3, [pc, #304]	@ (8002898 <write_log_values+0x2e4>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	4b46      	ldr	r3, [pc, #280]	@ (8002888 <write_log_values+0x2d4>)
 800276e:	795b      	ldrb	r3, [r3, #5]
 8002770:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002774:	b2d9      	uxtb	r1, r3
 8002776:	4a49      	ldr	r2, [pc, #292]	@ (800289c <write_log_values+0x2e8>)
 8002778:	4603      	mov	r3, r0
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4403      	add	r3, r0
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	441a      	add	r2, r3
 8002782:	7953      	ldrb	r3, [r2, #5]
 8002784:	f361 0305 	bfi	r3, r1, #0, #6
 8002788:	7153      	strb	r3, [r2, #5]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.reserved		= log_timestamp.reserved;
 800278a:	4b43      	ldr	r3, [pc, #268]	@ (8002898 <write_log_values+0x2e4>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	4b3d      	ldr	r3, [pc, #244]	@ (8002888 <write_log_values+0x2d4>)
 8002792:	799b      	ldrb	r3, [r3, #6]
 8002794:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002798:	b2d9      	uxtb	r1, r3
 800279a:	4a40      	ldr	r2, [pc, #256]	@ (800289c <write_log_values+0x2e8>)
 800279c:	4603      	mov	r3, r0
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4403      	add	r3, r0
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	441a      	add	r2, r3
 80027a6:	7993      	ldrb	r3, [r2, #6]
 80027a8:	f361 0303 	bfi	r3, r1, #0, #4
 80027ac:	7193      	strb	r3, [r2, #6]

	lsd_log_buffer[lsd_log_buffer_next_pos].temperature_centi_C = (uint16_t) ( 100 * p_log_data->clim.temperature);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4937      	ldr	r1, [pc, #220]	@ (8002890 <write_log_values+0x2dc>)
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fac5 	bl	8000d44 <__aeabi_fmul>
 80027ba:	4603      	mov	r3, r0
 80027bc:	461a      	mov	r2, r3
 80027be:	4b36      	ldr	r3, [pc, #216]	@ (8002898 <write_log_values+0x2e4>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461c      	mov	r4, r3
 80027c4:	4610      	mov	r0, r2
 80027c6:	f7fe fc83 	bl	80010d0 <__aeabi_f2uiz>
 80027ca:	4603      	mov	r3, r0
 80027cc:	b299      	uxth	r1, r3
 80027ce:	4a33      	ldr	r2, [pc, #204]	@ (800289c <write_log_values+0x2e8>)
 80027d0:	4623      	mov	r3, r4
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4423      	add	r3, r4
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	3308      	adds	r3, #8
 80027dc:	460a      	mov	r2, r1
 80027de:	801a      	strh	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].humidity_centi_RH 	= (uint16_t) ( 100 * p_log_data->clim.humidity );
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	492a      	ldr	r1, [pc, #168]	@ (8002890 <write_log_values+0x2dc>)
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe faac 	bl	8000d44 <__aeabi_fmul>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461a      	mov	r2, r3
 80027f0:	4b29      	ldr	r3, [pc, #164]	@ (8002898 <write_log_values+0x2e4>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	461c      	mov	r4, r3
 80027f6:	4610      	mov	r0, r2
 80027f8:	f7fe fc6a 	bl	80010d0 <__aeabi_f2uiz>
 80027fc:	4603      	mov	r3, r0
 80027fe:	b299      	uxth	r1, r3
 8002800:	4a26      	ldr	r2, [pc, #152]	@ (800289c <write_log_values+0x2e8>)
 8002802:	4623      	mov	r3, r4
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4423      	add	r3, r4
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	330a      	adds	r3, #10
 800280e:	460a      	mov	r2, r1
 8002810:	801a      	strh	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].speed_of_sound_mps 	= (uint16_t) ( 100 * p_log_data->dist.speed_of_sound );
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	491e      	ldr	r1, [pc, #120]	@ (8002890 <write_log_values+0x2dc>)
 8002818:	4618      	mov	r0, r3
 800281a:	f7fe fa93 	bl	8000d44 <__aeabi_fmul>
 800281e:	4603      	mov	r3, r0
 8002820:	461a      	mov	r2, r3
 8002822:	4b1d      	ldr	r3, [pc, #116]	@ (8002898 <write_log_values+0x2e4>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461c      	mov	r4, r3
 8002828:	4610      	mov	r0, r2
 800282a:	f7fe fc51 	bl	80010d0 <__aeabi_f2uiz>
 800282e:	4603      	mov	r3, r0
 8002830:	b299      	uxth	r1, r3
 8002832:	4a1a      	ldr	r2, [pc, #104]	@ (800289c <write_log_values+0x2e8>)
 8002834:	4623      	mov	r3, r4
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4423      	add	r3, r4
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	330c      	adds	r3, #12
 8002840:	460a      	mov	r2, r1
 8002842:	801a      	strh	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].distance_mm 		= (uint16_t) ( 10  * p_log_data->dist.distance );		// cm to mm
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4912      	ldr	r1, [pc, #72]	@ (8002894 <write_log_values+0x2e0>)
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fa7a 	bl	8000d44 <__aeabi_fmul>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <write_log_values+0x2e4>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461c      	mov	r4, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f7fe fc38 	bl	80010d0 <__aeabi_f2uiz>
 8002860:	4603      	mov	r3, r0
 8002862:	b299      	uxth	r1, r3
 8002864:	4a0d      	ldr	r2, [pc, #52]	@ (800289c <write_log_values+0x2e8>)
 8002866:	4623      	mov	r3, r4
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4423      	add	r3, r4
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	330e      	adds	r3, #14
 8002872:	460a      	mov	r2, r1
 8002874:	801a      	strh	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].found_errors 		= p_log_data->errors;
 8002876:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <write_log_values+0x2e4>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	4619      	mov	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7e18      	ldrb	r0, [r3, #24]
 8002880:	4a06      	ldr	r2, [pc, #24]	@ (800289c <write_log_values+0x2e8>)
 8002882:	460b      	mov	r3, r1
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	e00b      	b.n	80028a0 <write_log_values+0x2ec>
 8002888:	20000428 	.word	0x20000428
 800288c:	20000430 	.word	0x20000430
 8002890:	42c80000 	.word	0x42c80000
 8002894:	41200000 	.word	0x41200000
 8002898:	20001670 	.word	0x20001670
 800289c:	20000470 	.word	0x20000470
 80028a0:	440b      	add	r3, r1
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4413      	add	r3, r2
 80028a6:	3310      	adds	r3, #16
 80028a8:	4602      	mov	r2, r0
 80028aa:	701a      	strb	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].was_transmitted 	= p_log_data->transmitted;
 80028ac:	4b08      	ldr	r3, [pc, #32]	@ (80028d0 <write_log_values+0x31c>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	4619      	mov	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	7e58      	ldrb	r0, [r3, #25]
 80028b6:	4a07      	ldr	r2, [pc, #28]	@ (80028d4 <write_log_values+0x320>)
 80028b8:	460b      	mov	r3, r1
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	440b      	add	r3, r1
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	3311      	adds	r3, #17
 80028c4:	4602      	mov	r2, r0
 80028c6:	701a      	strb	r2, [r3, #0]

	/*
	 * TODO: save on flash memory
	 */

	return;
 80028c8:	bf00      	nop
}
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd90      	pop	{r4, r7, pc}
 80028d0:	20001670 	.word	0x20001670
 80028d4:	20000470 	.word	0x20000470

080028d8 <log_values_check>:

static int8_t log_values_check( void ){
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
	uint8_t *p_global = (uint8_t *) &lsd_log_buffer[lsd_log_buffer_next_pos];
 80028de:	4b15      	ldr	r3, [pc, #84]	@ (8002934 <log_values_check+0x5c>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	4613      	mov	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4413      	add	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4a12      	ldr	r2, [pc, #72]	@ (8002938 <log_values_check+0x60>)
 80028ee:	4413      	add	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
	uint8_t *p_local = (uint8_t *) &log_mngr;
 80028f2:	4b12      	ldr	r3, [pc, #72]	@ (800293c <log_values_check+0x64>)
 80028f4:	60bb      	str	r3, [r7, #8]

	for( uint8_t i=0; i<sizeof(LSD_LOG_BUFFER_T); i++ ){
 80028f6:	2300      	movs	r3, #0
 80028f8:	71fb      	strb	r3, [r7, #7]
 80028fa:	e011      	b.n	8002920 <log_values_check+0x48>
		if( *p_global != *p_local ){
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	781a      	ldrb	r2, [r3, #0]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d002      	beq.n	800290e <log_values_check+0x36>
			return LSD_ERR_CRC_CHECK;
 8002908:	f06f 0305 	mvn.w	r3, #5
 800290c:	e00c      	b.n	8002928 <log_values_check+0x50>
		}
		p_global++;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3301      	adds	r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
		p_local++;
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	3301      	adds	r3, #1
 8002918:	60bb      	str	r3, [r7, #8]
	for( uint8_t i=0; i<sizeof(LSD_LOG_BUFFER_T); i++ ){
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	3301      	adds	r3, #1
 800291e:	71fb      	strb	r3, [r7, #7]
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	2b11      	cmp	r3, #17
 8002924:	d9ea      	bls.n	80028fc <log_values_check+0x24>
	}

	return LSD_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20001670 	.word	0x20001670
 8002938:	20000470 	.word	0x20000470
 800293c:	20000430 	.word	0x20000430

08002940 <update_pos_indexes>:

static void update_pos_indexes( void ){
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
	lsd_log_buffer_next_pos = ( lsd_log_buffer_next_pos + 1 ) % LSD_LOG_BUFFER_SIZE;
 8002944:	4b10      	ldr	r3, [pc, #64]	@ (8002988 <update_pos_indexes+0x48>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	425a      	negs	r2, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	bf58      	it	pl
 8002952:	4253      	negpl	r3, r2
 8002954:	b2da      	uxtb	r2, r3
 8002956:	4b0c      	ldr	r3, [pc, #48]	@ (8002988 <update_pos_indexes+0x48>)
 8002958:	701a      	strb	r2, [r3, #0]

	if( lsd_log_buffer_next_pos == lsd_log_buffer_first_pos ){
 800295a:	4b0b      	ldr	r3, [pc, #44]	@ (8002988 <update_pos_indexes+0x48>)
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <update_pos_indexes+0x4c>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d10b      	bne.n	800297e <update_pos_indexes+0x3e>
		lsd_log_buffer_first_pos = ( lsd_log_buffer_first_pos + 1 ) % LSD_LOG_BUFFER_SIZE;
 8002966:	4b09      	ldr	r3, [pc, #36]	@ (800298c <update_pos_indexes+0x4c>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	3301      	adds	r3, #1
 800296c:	425a      	negs	r2, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	bf58      	it	pl
 8002974:	4253      	negpl	r3, r2
 8002976:	b2da      	uxtb	r2, r3
 8002978:	4b04      	ldr	r3, [pc, #16]	@ (800298c <update_pos_indexes+0x4c>)
 800297a:	701a      	strb	r2, [r3, #0]
	}

	return;
 800297c:	bf00      	nop
 800297e:	bf00      	nop
}
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20001670 	.word	0x20001670
 800298c:	20001671 	.word	0x20001671

08002990 <state_machine_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

void state_machine_init( LSD_MCU_PERIPH_HANDLES_T *hmcu, lsd_sys_clk_cfg_t clk_cfg ){
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
	hmcu_periph = hmcu;
 800299a:	4a38      	ldr	r2, [pc, #224]	@ (8002a7c <state_machine_init+0xec>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6013      	str	r3, [r2, #0]
	lsd_clk_cfg = clk_cfg;
 80029a0:	4a37      	ldr	r2, [pc, #220]	@ (8002a80 <state_machine_init+0xf0>)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin( SENSOR_PWR_GPIO_Port, SENSOR_PWR_Pin, LSD_SENSORS_OFF );  // turn sensors ON
 80029a6:	2201      	movs	r2, #1
 80029a8:	2110      	movs	r1, #16
 80029aa:	4836      	ldr	r0, [pc, #216]	@ (8002a84 <state_machine_init+0xf4>)
 80029ac:	f001 feb7 	bl	800471e <HAL_GPIO_WritePin>

	int8_t ret = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	73fb      	strb	r3, [r7, #15]

	ret += lsd_common_init( hmcu_periph->mcu_htim[LSD_TIM_COMMON], hmcu_periph->mcu_hrtc );
 80029b4:	4b31      	ldr	r3, [pc, #196]	@ (8002a7c <state_machine_init+0xec>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	4b30      	ldr	r3, [pc, #192]	@ (8002a7c <state_machine_init+0xec>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	4619      	mov	r1, r3
 80029c2:	4610      	mov	r0, r2
 80029c4:	f7ff f8ac 	bl	8001b20 <lsd_common_init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	4413      	add	r3, r2
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	73fb      	strb	r3, [r7, #15]
	ret += lsd_usb_init( ( uint32_t * ) hmcu_periph->mcu_huart[LSD_UART_FTDI] );
 80029d4:	4b29      	ldr	r3, [pc, #164]	@ (8002a7c <state_machine_init+0xec>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 f9c0 	bl	8002d60 <lsd_usb_init>
 80029e0:	4603      	mov	r3, r0
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	4413      	add	r3, r2
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	73fb      	strb	r3, [r7, #15]
	ret += leds_init( hmcu_periph->mcu_htim[LSD_TIM_GENERAL] );
 80029ec:	4b23      	ldr	r3, [pc, #140]	@ (8002a7c <state_machine_init+0xec>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fe14 	bl	8001620 <leds_init>
 80029f8:	4603      	mov	r3, r0
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	4413      	add	r3, r2
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	73fb      	strb	r3, [r7, #15]
	ret += aht20_init( hmcu_periph->mcu_hi2c );
 8002a04:	4b1d      	ldr	r3, [pc, #116]	@ (8002a7c <state_machine_init+0xec>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fb80 	bl	8001110 <aht20_init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	4413      	add	r3, r2
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	73fb      	strb	r3, [r7, #15]
	ret += ajsr04m_init( hmcu_periph->mcu_htim[LSD_TIM_SENSORS] );
 8002a1c:	4b17      	ldr	r3, [pc, #92]	@ (8002a7c <state_machine_init+0xec>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fcfe 	bl	8001424 <ajsr04m_init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	4413      	add	r3, r2
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	73fb      	strb	r3, [r7, #15]
	ret += le910r1br_init( hmcu_periph->mcu_huart[LSD_UART_MODEM], hmcu_periph->mcu_htim[LSD_TIM_GENERAL] );
 8002a34:	4b11      	ldr	r3, [pc, #68]	@ (8002a7c <state_machine_init+0xec>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	4b10      	ldr	r3, [pc, #64]	@ (8002a7c <state_machine_init+0xec>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4619      	mov	r1, r3
 8002a42:	4610      	mov	r0, r2
 8002a44:	f7fe fd9c 	bl	8001580 <le910r1br_init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	4413      	add	r3, r2
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	73fb      	strb	r3, [r7, #15]

	char *msg = "System Initialized\r\n";
 8002a54:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <state_machine_init+0xf8>)
 8002a56:	60bb      	str	r3, [r7, #8]
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002a58:	68b8      	ldr	r0, [r7, #8]
 8002a5a:	f7fd fb79 	bl	8000150 <strlen>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	4619      	mov	r1, r3
 8002a64:	68b8      	ldr	r0, [r7, #8]
 8002a66:	f000 f9d5 	bl	8002e14 <lsd_print_msg_usb>

	HAL_Delay( 1000 );
 8002a6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a6e:	f001 f9e9 	bl	8003e44 <HAL_Delay>

	return;
 8002a72:	bf00      	nop
}
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000444 	.word	0x20000444
 8002a80:	20000464 	.word	0x20000464
 8002a84:	40010c00 	.word	0x40010c00
 8002a88:	08012aec 	.word	0x08012aec

08002a8c <state_machine_run>:

void state_machine_run( void ){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
	switch( current_state ){
 8002a90:	4b15      	ldr	r3, [pc, #84]	@ (8002ae8 <state_machine_run+0x5c>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	d821      	bhi.n	8002adc <state_machine_run+0x50>
 8002a98:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa0 <state_machine_run+0x14>)
 8002a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9e:	bf00      	nop
 8002aa0:	08002ab9 	.word	0x08002ab9
 8002aa4:	08002abf 	.word	0x08002abf
 8002aa8:	08002ac5 	.word	0x08002ac5
 8002aac:	08002acb 	.word	0x08002acb
 8002ab0:	08002ad1 	.word	0x08002ad1
 8002ab4:	08002ad7 	.word	0x08002ad7
		case S0_WAKEUP:
			state_machine_run_s0_wakeup();
 8002ab8:	f000 f818 	bl	8002aec <state_machine_run_s0_wakeup>
			break;
 8002abc:	e012      	b.n	8002ae4 <state_machine_run+0x58>

		case S1_MEASURE:
			state_machine_run_s1_measure();
 8002abe:	f000 f879 	bl	8002bb4 <state_machine_run_s1_measure>
			break;
 8002ac2:	e00f      	b.n	8002ae4 <state_machine_run+0x58>

		case S2_ANALYZE:
			state_machine_run_s2_analyze();
 8002ac4:	f000 f8a4 	bl	8002c10 <state_machine_run_s2_analyze>
			break;
 8002ac8:	e00c      	b.n	8002ae4 <state_machine_run+0x58>

		case S3_TRANSMIT:
			state_machine_run_s3_transmit();
 8002aca:	f000 f8c9 	bl	8002c60 <state_machine_run_s3_transmit>
			break;
 8002ace:	e009      	b.n	8002ae4 <state_machine_run+0x58>

		case S4_SLEEP:
			state_machine_run_s4_sleep();
 8002ad0:	f000 f8ea 	bl	8002ca8 <state_machine_run_s4_sleep>
			break;
 8002ad4:	e006      	b.n	8002ae4 <state_machine_run+0x58>

		case S5_FAIL_SAFE:
			state_machine_run_s5_fail_safe();
 8002ad6:	f000 f91b 	bl	8002d10 <state_machine_run_s5_fail_safe>
			break;
 8002ada:	e003      	b.n	8002ae4 <state_machine_run+0x58>

		default:
			current_state = S5_FAIL_SAFE;
 8002adc:	4b02      	ldr	r3, [pc, #8]	@ (8002ae8 <state_machine_run+0x5c>)
 8002ade:	2205      	movs	r2, #5
 8002ae0:	701a      	strb	r2, [r3, #0]
			break;
 8002ae2:	bf00      	nop
	}
	return;
 8002ae4:	bf00      	nop
}
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000443 	.word	0x20000443

08002aec <state_machine_run_s0_wakeup>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static void state_machine_run_s0_wakeup( void ){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	@ 0x30
 8002af0:	af00      	add	r7, sp, #0
	if( lsd_cycle_count > 0 ){
 8002af2:	4b29      	ldr	r3, [pc, #164]	@ (8002b98 <state_machine_run_s0_wakeup+0xac>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d004      	beq.n	8002b04 <state_machine_run_s0_wakeup+0x18>
		lsd_exit_stop_mode( lsd_clk_cfg );
 8002afa:	4b28      	ldr	r3, [pc, #160]	@ (8002b9c <state_machine_run_s0_wakeup+0xb0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff f988 	bl	8001e14 <lsd_exit_stop_mode>
	}

	HAL_Delay( 1000 );
 8002b04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b08:	f001 f99c 	bl	8003e44 <HAL_Delay>
	lsd_cycle_count++;
 8002b0c:	4b22      	ldr	r3, [pc, #136]	@ (8002b98 <state_machine_run_s0_wakeup+0xac>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	4a21      	ldr	r2, [pc, #132]	@ (8002b98 <state_machine_run_s0_wakeup+0xac>)
 8002b14:	6013      	str	r3, [r2, #0]

	char msg_cyle[40] = { 0 };
 8002b16:	2300      	movs	r3, #0
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	f107 0308 	add.w	r3, r7, #8
 8002b1e:	2224      	movs	r2, #36	@ 0x24
 8002b20:	2100      	movs	r1, #0
 8002b22:	4618      	mov	r0, r3
 8002b24:	f00d f8a9 	bl	800fc7a <memset>
	snprintf( msg_cyle, 40, "\n********** Cycle %ld **********\n", lsd_cycle_count );
 8002b28:	4b1b      	ldr	r3, [pc, #108]	@ (8002b98 <state_machine_run_s0_wakeup+0xac>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	1d38      	adds	r0, r7, #4
 8002b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba0 <state_machine_run_s0_wakeup+0xb4>)
 8002b30:	2128      	movs	r1, #40	@ 0x28
 8002b32:	f00d f82b 	bl	800fb8c <sniprintf>
	lsd_print_msg_usb( msg_cyle, strlen( msg_cyle ) );
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fb09 	bl	8000150 <strlen>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 f964 	bl	8002e14 <lsd_print_msg_usb>

	char *msg = "S0 - Wakeup\n";
 8002b4c:	4b15      	ldr	r3, [pc, #84]	@ (8002ba4 <state_machine_run_s0_wakeup+0xb8>)
 8002b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002b50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b52:	f7fd fafd 	bl	8000150 <strlen>
 8002b56:	4603      	mov	r3, r0
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b5e:	f000 f959 	bl	8002e14 <lsd_print_msg_usb>

	leds_turn_on( LSD_LED_BLUE );
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fe fdbc 	bl	80016e0 <leds_turn_on>
//	le910r1br_power_on();
	HAL_GPIO_WritePin( SENSOR_PWR_GPIO_Port, SENSOR_PWR_Pin, LSD_SENSORS_ON );
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2110      	movs	r1, #16
 8002b6c:	480e      	ldr	r0, [pc, #56]	@ (8002ba8 <state_machine_run_s0_wakeup+0xbc>)
 8002b6e:	f001 fdd6 	bl	800471e <HAL_GPIO_WritePin>
	leds_turn_off( LSD_LED_BLUE );
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7fe fe0e 	bl	8001794 <leds_turn_off>

	HAL_Delay( 1000 );
 8002b78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b7c:	f001 f962 	bl	8003e44 <HAL_Delay>
	previous_state = current_state;
 8002b80:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <state_machine_run_s0_wakeup+0xc0>)
 8002b82:	781a      	ldrb	r2, [r3, #0]
 8002b84:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb0 <state_machine_run_s0_wakeup+0xc4>)
 8002b86:	701a      	strb	r2, [r3, #0]
	current_state = S1_MEASURE;
 8002b88:	4b08      	ldr	r3, [pc, #32]	@ (8002bac <state_machine_run_s0_wakeup+0xc0>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
	return;
 8002b8e:	bf00      	nop
}
 8002b90:	3730      	adds	r7, #48	@ 0x30
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000046c 	.word	0x2000046c
 8002b9c:	20000464 	.word	0x20000464
 8002ba0:	08012b04 	.word	0x08012b04
 8002ba4:	08012b28 	.word	0x08012b28
 8002ba8:	40010c00 	.word	0x40010c00
 8002bac:	20000443 	.word	0x20000443
 8002bb0:	20000442 	.word	0x20000442

08002bb4 <state_machine_run_s1_measure>:

static void state_machine_run_s1_measure( void ){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
	char *msg = "S1 - Measuring\n";
 8002bba:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <state_machine_run_s1_measure+0x4c>)
 8002bbc:	607b      	str	r3, [r7, #4]
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fd fac6 	bl	8000150 <strlen>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	4619      	mov	r1, r3
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f922 	bl	8002e14 <lsd_print_msg_usb>

	leds_turn_on( LSD_LED_RED );
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	f7fe fd85 	bl	80016e0 <leds_turn_on>
	lsd_measure_distance( &lsd_log_data );
 8002bd6:	480b      	ldr	r0, [pc, #44]	@ (8002c04 <state_machine_run_s1_measure+0x50>)
 8002bd8:	f7ff f94a 	bl	8001e70 <lsd_measure_distance>
	leds_turn_off( LSD_LED_RED );
 8002bdc:	2001      	movs	r0, #1
 8002bde:	f7fe fdd9 	bl	8001794 <leds_turn_off>

	previous_state = current_state;
 8002be2:	4b09      	ldr	r3, [pc, #36]	@ (8002c08 <state_machine_run_s1_measure+0x54>)
 8002be4:	781a      	ldrb	r2, [r3, #0]
 8002be6:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <state_machine_run_s1_measure+0x58>)
 8002be8:	701a      	strb	r2, [r3, #0]
	current_state = S2_ANALYZE;
 8002bea:	4b07      	ldr	r3, [pc, #28]	@ (8002c08 <state_machine_run_s1_measure+0x54>)
 8002bec:	2202      	movs	r2, #2
 8002bee:	701a      	strb	r2, [r3, #0]
	HAL_Delay( 1000 );
 8002bf0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bf4:	f001 f926 	bl	8003e44 <HAL_Delay>
	return;
 8002bf8:	bf00      	nop
}
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	08012b38 	.word	0x08012b38
 8002c04:	20000448 	.word	0x20000448
 8002c08:	20000443 	.word	0x20000443
 8002c0c:	20000442 	.word	0x20000442

08002c10 <state_machine_run_s2_analyze>:

static void state_machine_run_s2_analyze( void ){
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
	char *msg = "S2 - Analyzing data\n";
 8002c16:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <state_machine_run_s2_analyze+0x40>)
 8002c18:	607b      	str	r3, [r7, #4]
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fd fa98 	bl	8000150 <strlen>
 8002c20:	4603      	mov	r3, r0
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	4619      	mov	r1, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f8f4 	bl	8002e14 <lsd_print_msg_usb>

	lsd_analyze_data( &lsd_log_data );
 8002c2c:	4809      	ldr	r0, [pc, #36]	@ (8002c54 <state_machine_run_s2_analyze+0x44>)
 8002c2e:	f7ff f81d 	bl	8001c6c <lsd_analyze_data>
	lsd_log_write( &lsd_log_data );
 8002c32:	4808      	ldr	r0, [pc, #32]	@ (8002c54 <state_machine_run_s2_analyze+0x44>)
 8002c34:	f7ff fc9e 	bl	8002574 <lsd_log_write>
	 *  TODO: change next state depending on data, maybe skip a transmission or shorten sleep time.
	 *
	 *  lsd_change_sleep_time( hmcu_periph->mcu_hrtc, 0, 0, 5 );
	 */

	previous_state = current_state;
 8002c38:	4b07      	ldr	r3, [pc, #28]	@ (8002c58 <state_machine_run_s2_analyze+0x48>)
 8002c3a:	781a      	ldrb	r2, [r3, #0]
 8002c3c:	4b07      	ldr	r3, [pc, #28]	@ (8002c5c <state_machine_run_s2_analyze+0x4c>)
 8002c3e:	701a      	strb	r2, [r3, #0]
	current_state = S3_TRANSMIT;
 8002c40:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <state_machine_run_s2_analyze+0x48>)
 8002c42:	2203      	movs	r2, #3
 8002c44:	701a      	strb	r2, [r3, #0]
	return;
 8002c46:	bf00      	nop
}
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	08012b48 	.word	0x08012b48
 8002c54:	20000448 	.word	0x20000448
 8002c58:	20000443 	.word	0x20000443
 8002c5c:	20000442 	.word	0x20000442

08002c60 <state_machine_run_s3_transmit>:

static void state_machine_run_s3_transmit( void ){
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
	char *msg = "S3 - Transmitting\n";
 8002c66:	4b0c      	ldr	r3, [pc, #48]	@ (8002c98 <state_machine_run_s3_transmit+0x38>)
 8002c68:	607b      	str	r3, [r7, #4]
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fd fa70 	bl	8000150 <strlen>
 8002c70:	4603      	mov	r3, r0
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	4619      	mov	r1, r3
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f8cc 	bl	8002e14 <lsd_print_msg_usb>
//	HAL_Delay(500);
//
//	ret = le910r1br_check_cpin();
//	HAL_Delay(500);

	lsd_print_log_data_usb( &lsd_log_data );
 8002c7c:	4807      	ldr	r0, [pc, #28]	@ (8002c9c <state_machine_run_s3_transmit+0x3c>)
 8002c7e:	f000 f8e7 	bl	8002e50 <lsd_print_log_data_usb>

	previous_state = current_state;
 8002c82:	4b07      	ldr	r3, [pc, #28]	@ (8002ca0 <state_machine_run_s3_transmit+0x40>)
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <state_machine_run_s3_transmit+0x44>)
 8002c88:	701a      	strb	r2, [r3, #0]
	current_state = S4_SLEEP;
 8002c8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <state_machine_run_s3_transmit+0x40>)
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	701a      	strb	r2, [r3, #0]
	return;
 8002c90:	bf00      	nop
}
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	08012b60 	.word	0x08012b60
 8002c9c:	20000448 	.word	0x20000448
 8002ca0:	20000443 	.word	0x20000443
 8002ca4:	20000442 	.word	0x20000442

08002ca8 <state_machine_run_s4_sleep>:

static void state_machine_run_s4_sleep( void ){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
	char *msg = "S4 - Entering sleep\n";
 8002cae:	4b14      	ldr	r3, [pc, #80]	@ (8002d00 <state_machine_run_s4_sleep+0x58>)
 8002cb0:	607b      	str	r3, [r7, #4]
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fd fa4c 	bl	8000150 <strlen>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8a8 	bl	8002e14 <lsd_print_msg_usb>

	previous_state = current_state;
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d04 <state_machine_run_s4_sleep+0x5c>)
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d08 <state_machine_run_s4_sleep+0x60>)
 8002cca:	701a      	strb	r2, [r3, #0]
	current_state = S0_WAKEUP;
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8002d04 <state_machine_run_s4_sleep+0x5c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]

	leds_turn_on( LSD_LED_BLUE );
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f7fe fd04 	bl	80016e0 <leds_turn_on>
	le910r1br_power_off();
 8002cd8:	f7fe fc88 	bl	80015ec <le910r1br_power_off>
	HAL_GPIO_WritePin( SENSOR_PWR_GPIO_Port, SENSOR_PWR_Pin, LSD_SENSORS_OFF );
 8002cdc:	2201      	movs	r2, #1
 8002cde:	2110      	movs	r1, #16
 8002ce0:	480a      	ldr	r0, [pc, #40]	@ (8002d0c <state_machine_run_s4_sleep+0x64>)
 8002ce2:	f001 fd1c 	bl	800471e <HAL_GPIO_WritePin>
	leds_turn_off( LSD_LED_BLUE );
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fe fd54 	bl	8001794 <leds_turn_off>

	lsd_enter_stop_mode();
 8002cec:	f7ff f8a4 	bl	8001e38 <lsd_enter_stop_mode>
	HAL_Delay( 1000 );
 8002cf0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cf4:	f001 f8a6 	bl	8003e44 <HAL_Delay>
	return;
 8002cf8:	bf00      	nop
}
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	08012b74 	.word	0x08012b74
 8002d04:	20000443 	.word	0x20000443
 8002d08:	20000442 	.word	0x20000442
 8002d0c:	40010c00 	.word	0x40010c00

08002d10 <state_machine_run_s5_fail_safe>:

static void state_machine_run_s5_fail_safe( void ){
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
	char *msg = "S5 - Fail safe\n";
 8002d16:	4b0f      	ldr	r3, [pc, #60]	@ (8002d54 <state_machine_run_s5_fail_safe+0x44>)
 8002d18:	607b      	str	r3, [r7, #4]
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fd fa18 	bl	8000150 <strlen>
 8002d20:	4603      	mov	r3, r0
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	4619      	mov	r1, r3
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f874 	bl	8002e14 <lsd_print_msg_usb>

	if( previous_state != current_state ){  // first time entering S5 state
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <state_machine_run_s5_fail_safe+0x48>)
 8002d2e:	781a      	ldrb	r2, [r3, #0]
 8002d30:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <state_machine_run_s5_fail_safe+0x4c>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d002      	beq.n	8002d3e <state_machine_run_s5_fail_safe+0x2e>
		leds_blink_fast( LSD_LED_RED );
 8002d38:	2001      	movs	r0, #1
 8002d3a:	f7fe fd7b 	bl	8001834 <leds_blink_fast>

	/*
	 *	TODO: identify issue, print and try solving it
	 */

	previous_state = current_state;
 8002d3e:	4b07      	ldr	r3, [pc, #28]	@ (8002d5c <state_machine_run_s5_fail_safe+0x4c>)
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <state_machine_run_s5_fail_safe+0x48>)
 8002d44:	701a      	strb	r2, [r3, #0]
	current_state = S5_FAIL_SAFE;
 8002d46:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <state_machine_run_s5_fail_safe+0x4c>)
 8002d48:	2205      	movs	r2, #5
 8002d4a:	701a      	strb	r2, [r3, #0]
	return;
 8002d4c:	bf00      	nop
}
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	08012b8c 	.word	0x08012b8c
 8002d58:	20000442 	.word	0x20000442
 8002d5c:	20000443 	.word	0x20000443

08002d60 <lsd_usb_init>:
#include "usbd_cdc_if.h"
#endif /* LSD_PERIPH_USED_USB */

static UART_HandleTypeDef *p_lsd_huart;

int8_t lsd_usb_init( uint32_t *periph_handle ){
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
#if LSD_PERIPH_USED_USB == TRUE
	__HAL_RCC_USB_CLK_ENABLE();
	MX_USB_DEVICE_Init();
#else
	if( periph_handle == NULL ){
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d102      	bne.n	8002d74 <lsd_usb_init+0x14>
		return LSD_ERR_NULL_HANDLE;
 8002d6e:	f06f 0302 	mvn.w	r3, #2
 8002d72:	e02f      	b.n	8002dd4 <lsd_usb_init+0x74>
	}

	p_lsd_huart = ( UART_HandleTypeDef * ) periph_handle;
 8002d74:	4a19      	ldr	r2, [pc, #100]	@ (8002ddc <lsd_usb_init+0x7c>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6013      	str	r3, [r2, #0]

	p_lsd_huart->Instance = USART2;
 8002d7a:	4b18      	ldr	r3, [pc, #96]	@ (8002ddc <lsd_usb_init+0x7c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a18      	ldr	r2, [pc, #96]	@ (8002de0 <lsd_usb_init+0x80>)
 8002d80:	601a      	str	r2, [r3, #0]
	p_lsd_huart->Init.BaudRate = 115200;
 8002d82:	4b16      	ldr	r3, [pc, #88]	@ (8002ddc <lsd_usb_init+0x7c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d8a:	605a      	str	r2, [r3, #4]
	p_lsd_huart->Init.WordLength = UART_WORDLENGTH_8B;
 8002d8c:	4b13      	ldr	r3, [pc, #76]	@ (8002ddc <lsd_usb_init+0x7c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
	p_lsd_huart->Init.StopBits = UART_STOPBITS_1;
 8002d94:	4b11      	ldr	r3, [pc, #68]	@ (8002ddc <lsd_usb_init+0x7c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	60da      	str	r2, [r3, #12]
	p_lsd_huart->Init.Parity = UART_PARITY_NONE;
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ddc <lsd_usb_init+0x7c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2200      	movs	r2, #0
 8002da2:	611a      	str	r2, [r3, #16]
	p_lsd_huart->Init.Mode = UART_MODE_TX_RX;
 8002da4:	4b0d      	ldr	r3, [pc, #52]	@ (8002ddc <lsd_usb_init+0x7c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	220c      	movs	r2, #12
 8002daa:	615a      	str	r2, [r3, #20]
	p_lsd_huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <lsd_usb_init+0x7c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2200      	movs	r2, #0
 8002db2:	619a      	str	r2, [r3, #24]
	p_lsd_huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8002db4:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <lsd_usb_init+0x7c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2200      	movs	r2, #0
 8002dba:	61da      	str	r2, [r3, #28]

	if( HAL_UART_Init( p_lsd_huart ) != HAL_OK )
 8002dbc:	4b07      	ldr	r3, [pc, #28]	@ (8002ddc <lsd_usb_init+0x7c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f006 ff8b 	bl	8009cdc <HAL_UART_Init>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <lsd_usb_init+0x72>
	{
		return LSD_ERR_INIT_FAIL;
 8002dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd0:	e000      	b.n	8002dd4 <lsd_usb_init+0x74>
	}
#endif /* LSD_PERIPH_USED_USB */

	return LSD_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20000468 	.word	0x20000468
 8002de0:	40004400 	.word	0x40004400

08002de4 <lsd_usb_reinit>:

int8_t lsd_usb_reinit( void ){
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
#if LSD_PERIPH_USED_USB == TRUE
	return lsd_usb_init( NULL );
#else
	return lsd_usb_init( ( uint32_t * ) p_lsd_huart );
 8002de8:	4b03      	ldr	r3, [pc, #12]	@ (8002df8 <lsd_usb_reinit+0x14>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ffb7 	bl	8002d60 <lsd_usb_init>
 8002df2:	4603      	mov	r3, r0
#endif /* LSD_PERIPH_USED_USB */
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000468 	.word	0x20000468

08002dfc <lsd_usb_deinit>:

int8_t lsd_usb_deinit( void ){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
#if LSD_PERIPH_USED_USB == TRUE
	MX_USB_DEVICE_Deinit();
	__HAL_RCC_USB_CLK_DISABLE();
#else
	HAL_UART_DeInit( p_lsd_huart );
 8002e00:	4b03      	ldr	r3, [pc, #12]	@ (8002e10 <lsd_usb_deinit+0x14>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f006 ffb9 	bl	8009d7c <HAL_UART_DeInit>
#endif /* LSD_PERIPH_USED_USB */

	return LSD_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20000468 	.word	0x20000468

08002e14 <lsd_print_msg_usb>:

int8_t lsd_print_msg_usb( char *msg, uint16_t msg_len ){
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
	if( msg == NULL || msg_len <= 0 ){
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <lsd_print_msg_usb+0x18>
 8002e26:	887b      	ldrh	r3, [r7, #2]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <lsd_print_msg_usb+0x1e>
		return LSD_ERR_NULL_HANDLE;
 8002e2c:	f06f 0302 	mvn.w	r3, #2
 8002e30:	e008      	b.n	8002e44 <lsd_print_msg_usb+0x30>
	}

#if LSD_PERIPH_USED_USB == TRUE
	CDC_Transmit_FS( (uint8_t *) msg, msg_len );
#else
	HAL_UART_Transmit( p_lsd_huart, (const uint8_t *) msg, msg_len, 1000 );
 8002e32:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <lsd_print_msg_usb+0x38>)
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	887a      	ldrh	r2, [r7, #2]
 8002e38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	f006 ffcf 	bl	8009de0 <HAL_UART_Transmit>
#endif /* LSD_PERIPH_USED_USB */

	return LSD_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000468 	.word	0x20000468

08002e50 <lsd_print_log_data_usb>:

int8_t lsd_print_log_data_usb( LSD_LOG_DATA_T *p_log ){
 8002e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e54:	b0aa      	sub	sp, #168	@ 0xa8
 8002e56:	af08      	add	r7, sp, #32
 8002e58:	6078      	str	r0, [r7, #4]
	if( p_log == NULL ){
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d102      	bne.n	8002e66 <lsd_print_log_data_usb+0x16>
		return LSD_ERR_NULL_HANDLE;
 8002e60:	f06f 0302 	mvn.w	r3, #2
 8002e64:	e0f5      	b.n	8003052 <lsd_print_log_data_usb+0x202>
	}

	char msg[128];

	snprintf( msg, 128, "temperature = %.2f [*C]\tcategory : %d\n",
			p_log->clim.temperature, p_log->clim.temperature_category );
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
	snprintf( msg, 128, "temperature = %.2f [*C]\tcategory : %d\n",
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fadc 	bl	8000428 <__aeabi_f2d>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
			p_log->clim.temperature, p_log->clim.temperature_category );
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	7a09      	ldrb	r1, [r1, #8]
	snprintf( msg, 128, "temperature = %.2f [*C]\tcategory : %d\n",
 8002e78:	f107 0008 	add.w	r0, r7, #8
 8002e7c:	9102      	str	r1, [sp, #8]
 8002e7e:	e9cd 2300 	strd	r2, r3, [sp]
 8002e82:	4a76      	ldr	r2, [pc, #472]	@ (800305c <lsd_print_log_data_usb+0x20c>)
 8002e84:	2180      	movs	r1, #128	@ 0x80
 8002e86:	f00c fe81 	bl	800fb8c <sniprintf>
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002e8a:	f107 0308 	add.w	r3, r7, #8
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd f95e 	bl	8000150 <strlen>
 8002e94:	4603      	mov	r3, r0
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff ffb8 	bl	8002e14 <lsd_print_msg_usb>

	snprintf( msg, 128, "humidity = %.2f [RH]\tcategory : %d\n",
			p_log->clim.humidity, p_log->clim.humidity_category );
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
	snprintf( msg, 128, "humidity = %.2f [RH]\tcategory : %d\n",
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fabd 	bl	8000428 <__aeabi_f2d>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
			p_log->clim.humidity, p_log->clim.humidity_category );
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	7a49      	ldrb	r1, [r1, #9]
	snprintf( msg, 128, "humidity = %.2f [RH]\tcategory : %d\n",
 8002eb6:	f107 0008 	add.w	r0, r7, #8
 8002eba:	9102      	str	r1, [sp, #8]
 8002ebc:	e9cd 2300 	strd	r2, r3, [sp]
 8002ec0:	4a67      	ldr	r2, [pc, #412]	@ (8003060 <lsd_print_log_data_usb+0x210>)
 8002ec2:	2180      	movs	r1, #128	@ 0x80
 8002ec4:	f00c fe62 	bl	800fb8c <sniprintf>
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002ec8:	f107 0308 	add.w	r3, r7, #8
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd f93f 	bl	8000150 <strlen>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	f107 0308 	add.w	r3, r7, #8
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff99 	bl	8002e14 <lsd_print_msg_usb>

	snprintf( msg, 128, "distance = %.2f [m]\tcategory : %d\n",
			p_log->dist.distance, p_log->dist.distance_category );
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
	snprintf( msg, 128, "distance = %.2f [m]\tcategory : %d\n",
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fa9e 	bl	8000428 <__aeabi_f2d>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
			p_log->dist.distance, p_log->dist.distance_category );
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	7d09      	ldrb	r1, [r1, #20]
	snprintf( msg, 128, "distance = %.2f [m]\tcategory : %d\n",
 8002ef4:	f107 0008 	add.w	r0, r7, #8
 8002ef8:	9102      	str	r1, [sp, #8]
 8002efa:	e9cd 2300 	strd	r2, r3, [sp]
 8002efe:	4a59      	ldr	r2, [pc, #356]	@ (8003064 <lsd_print_log_data_usb+0x214>)
 8002f00:	2180      	movs	r1, #128	@ 0x80
 8002f02:	f00c fe43 	bl	800fb8c <sniprintf>
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002f06:	f107 0308 	add.w	r3, r7, #8
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd f920 	bl	8000150 <strlen>
 8002f10:	4603      	mov	r3, r0
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	f107 0308 	add.w	r3, r7, #8
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff ff7a 	bl	8002e14 <lsd_print_msg_usb>

	snprintf( msg, 128, "speed_of_sound = %.2f [m/s]\tcategory : %d\n",
			p_log->dist.speed_of_sound, p_log->dist.speed_of_sound_category );
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
	snprintf( msg, 128, "speed_of_sound = %.2f [m/s]\tcategory : %d\n",
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fa7f 	bl	8000428 <__aeabi_f2d>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
			p_log->dist.speed_of_sound, p_log->dist.speed_of_sound_category );
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	7d49      	ldrb	r1, [r1, #21]
	snprintf( msg, 128, "speed_of_sound = %.2f [m/s]\tcategory : %d\n",
 8002f32:	f107 0008 	add.w	r0, r7, #8
 8002f36:	9102      	str	r1, [sp, #8]
 8002f38:	e9cd 2300 	strd	r2, r3, [sp]
 8002f3c:	4a4a      	ldr	r2, [pc, #296]	@ (8003068 <lsd_print_log_data_usb+0x218>)
 8002f3e:	2180      	movs	r1, #128	@ 0x80
 8002f40:	f00c fe24 	bl	800fb8c <sniprintf>
	lsd_print_msg_usb( msg, strlen( msg ) );
 8002f44:	f107 0308 	add.w	r3, r7, #8
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd f901 	bl	8000150 <strlen>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	f107 0308 	add.w	r3, r7, #8
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff ff5b 	bl	8002e14 <lsd_print_msg_usb>

	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	7e1b      	ldrb	r3, [r3, #24]
 8002f62:	b25b      	sxtb	r3, r3
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	da02      	bge.n	8002f6e <lsd_print_log_data_usb+0x11e>
 8002f68:	f04f 0e31 	mov.w	lr, #49	@ 0x31
 8002f6c:	e001      	b.n	8002f72 <lsd_print_log_data_usb+0x122>
 8002f6e:	f04f 0e30 	mov.w	lr, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	7e1b      	ldrb	r3, [r3, #24]
 8002f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <lsd_print_log_data_usb+0x132>
 8002f7e:	2331      	movs	r3, #49	@ 0x31
 8002f80:	e000      	b.n	8002f84 <lsd_print_log_data_usb+0x134>
 8002f82:	2330      	movs	r3, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	7e12      	ldrb	r2, [r2, #24]
 8002f88:	f002 0220 	and.w	r2, r2, #32
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002f8c:	2a00      	cmp	r2, #0
 8002f8e:	d001      	beq.n	8002f94 <lsd_print_log_data_usb+0x144>
 8002f90:	2231      	movs	r2, #49	@ 0x31
 8002f92:	e000      	b.n	8002f96 <lsd_print_log_data_usb+0x146>
 8002f94:	2230      	movs	r2, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	7e09      	ldrb	r1, [r1, #24]
 8002f9a:	f001 0110 	and.w	r1, r1, #16
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002f9e:	2900      	cmp	r1, #0
 8002fa0:	d001      	beq.n	8002fa6 <lsd_print_log_data_usb+0x156>
 8002fa2:	2131      	movs	r1, #49	@ 0x31
 8002fa4:	e000      	b.n	8002fa8 <lsd_print_log_data_usb+0x158>
 8002fa6:	2130      	movs	r1, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	7e00      	ldrb	r0, [r0, #24]
 8002fac:	f000 0008 	and.w	r0, r0, #8
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002fb0:	2800      	cmp	r0, #0
 8002fb2:	d001      	beq.n	8002fb8 <lsd_print_log_data_usb+0x168>
 8002fb4:	2031      	movs	r0, #49	@ 0x31
 8002fb6:	e000      	b.n	8002fba <lsd_print_log_data_usb+0x16a>
 8002fb8:	2030      	movs	r0, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002fba:	687c      	ldr	r4, [r7, #4]
 8002fbc:	7e24      	ldrb	r4, [r4, #24]
 8002fbe:	f004 0404 	and.w	r4, r4, #4
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002fc2:	2c00      	cmp	r4, #0
 8002fc4:	d001      	beq.n	8002fca <lsd_print_log_data_usb+0x17a>
 8002fc6:	2431      	movs	r4, #49	@ 0x31
 8002fc8:	e000      	b.n	8002fcc <lsd_print_log_data_usb+0x17c>
 8002fca:	2430      	movs	r4, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002fcc:	687d      	ldr	r5, [r7, #4]
 8002fce:	7e2d      	ldrb	r5, [r5, #24]
 8002fd0:	f005 0502 	and.w	r5, r5, #2
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002fd4:	2d00      	cmp	r5, #0
 8002fd6:	d001      	beq.n	8002fdc <lsd_print_log_data_usb+0x18c>
 8002fd8:	2531      	movs	r5, #49	@ 0x31
 8002fda:	e000      	b.n	8002fde <lsd_print_log_data_usb+0x18e>
 8002fdc:	2530      	movs	r5, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002fde:	687e      	ldr	r6, [r7, #4]
 8002fe0:	7e36      	ldrb	r6, [r6, #24]
 8002fe2:	f006 0601 	and.w	r6, r6, #1
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002fe6:	2e00      	cmp	r6, #0
 8002fe8:	d001      	beq.n	8002fee <lsd_print_log_data_usb+0x19e>
 8002fea:	2631      	movs	r6, #49	@ 0x31
 8002fec:	e000      	b.n	8002ff0 <lsd_print_log_data_usb+0x1a0>
 8002fee:	2630      	movs	r6, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002ff0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8002ff4:	f89c c019 	ldrb.w	ip, [ip, #25]
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002ff8:	f1bc 0f00 	cmp.w	ip, #0
 8002ffc:	d004      	beq.n	8003008 <lsd_print_log_data_usb+0x1b8>
 8002ffe:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 800306c <lsd_print_log_data_usb+0x21c>
 8003002:	f8c7 c000 	str.w	ip, [r7]
 8003006:	e003      	b.n	8003010 <lsd_print_log_data_usb+0x1c0>
 8003008:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8003070 <lsd_print_log_data_usb+0x220>
 800300c:	f8c7 c000 	str.w	ip, [r7]
 8003010:	f107 0c08 	add.w	ip, r7, #8
 8003014:	f8d7 8000 	ldr.w	r8, [r7]
 8003018:	f8cd 801c 	str.w	r8, [sp, #28]
 800301c:	9606      	str	r6, [sp, #24]
 800301e:	9505      	str	r5, [sp, #20]
 8003020:	9404      	str	r4, [sp, #16]
 8003022:	9003      	str	r0, [sp, #12]
 8003024:	9102      	str	r1, [sp, #8]
 8003026:	9201      	str	r2, [sp, #4]
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	4673      	mov	r3, lr
 800302c:	4a11      	ldr	r2, [pc, #68]	@ (8003074 <lsd_print_log_data_usb+0x224>)
 800302e:	2180      	movs	r1, #128	@ 0x80
 8003030:	4660      	mov	r0, ip
 8003032:	f00c fdab 	bl	800fb8c <sniprintf>
	lsd_print_msg_usb( msg, strlen( msg ) );
 8003036:	f107 0308 	add.w	r3, r7, #8
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd f888 	bl	8000150 <strlen>
 8003040:	4603      	mov	r3, r0
 8003042:	b29a      	uxth	r2, r3
 8003044:	f107 0308 	add.w	r3, r7, #8
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fee2 	bl	8002e14 <lsd_print_msg_usb>

	return LSD_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3788      	adds	r7, #136	@ 0x88
 8003056:	46bd      	mov	sp, r7
 8003058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800305c:	08012b9c 	.word	0x08012b9c
 8003060:	08012bc4 	.word	0x08012bc4
 8003064:	08012be8 	.word	0x08012be8
 8003068:	08012c0c 	.word	0x08012c0c
 800306c:	08012c38 	.word	0x08012c38
 8003070:	08012c40 	.word	0x08012c40
 8003074:	08012c48 	.word	0x08012c48

08003078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800307c:	f000 fe80 	bl	8003d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003080:	f000 f840 	bl	8003104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003084:	f000 fa9e 	bl	80035c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8003088:	f000 f92e 	bl	80032e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800308c:	f000 f9aa 	bl	80033e4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8003090:	f000 f898 	bl	80031c4 <MX_I2C1_Init>
  MX_TIM4_Init();
 8003094:	f000 f9f4 	bl	8003480 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003098:	f000 fa40 	bl	800351c <MX_USART1_UART_Init>
  MX_RTC_Init();
 800309c:	f000 f8c0 	bl	8003220 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 80030a0:	f00b fb22 	bl	800e6e8 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 80030a4:	f000 fa64 	bl	8003570 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  hmcu_peripherals.mcu_hi2c = &hi2c1;
 80030a8:	4b0d      	ldr	r3, [pc, #52]	@ (80030e0 <main+0x68>)
 80030aa:	4a0e      	ldr	r2, [pc, #56]	@ (80030e4 <main+0x6c>)
 80030ac:	601a      	str	r2, [r3, #0]
  hmcu_peripherals.mcu_htim[LSD_TIM_GENERAL] = &htim2;
 80030ae:	4b0c      	ldr	r3, [pc, #48]	@ (80030e0 <main+0x68>)
 80030b0:	4a0d      	ldr	r2, [pc, #52]	@ (80030e8 <main+0x70>)
 80030b2:	605a      	str	r2, [r3, #4]
  hmcu_peripherals.mcu_htim[LSD_TIM_COMMON] = &htim3;
 80030b4:	4b0a      	ldr	r3, [pc, #40]	@ (80030e0 <main+0x68>)
 80030b6:	4a0d      	ldr	r2, [pc, #52]	@ (80030ec <main+0x74>)
 80030b8:	609a      	str	r2, [r3, #8]
  hmcu_peripherals.mcu_htim[LSD_TIM_SENSORS] = &htim4;
 80030ba:	4b09      	ldr	r3, [pc, #36]	@ (80030e0 <main+0x68>)
 80030bc:	4a0c      	ldr	r2, [pc, #48]	@ (80030f0 <main+0x78>)
 80030be:	60da      	str	r2, [r3, #12]
  hmcu_peripherals.mcu_huart[LSD_UART_MODEM] = &huart1;
 80030c0:	4b07      	ldr	r3, [pc, #28]	@ (80030e0 <main+0x68>)
 80030c2:	4a0c      	ldr	r2, [pc, #48]	@ (80030f4 <main+0x7c>)
 80030c4:	611a      	str	r2, [r3, #16]
  hmcu_peripherals.mcu_huart[LSD_UART_FTDI] = &huart2;
 80030c6:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <main+0x68>)
 80030c8:	4a0b      	ldr	r2, [pc, #44]	@ (80030f8 <main+0x80>)
 80030ca:	615a      	str	r2, [r3, #20]
  hmcu_peripherals.mcu_hrtc = &hrtc;
 80030cc:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <main+0x68>)
 80030ce:	4a0b      	ldr	r2, [pc, #44]	@ (80030fc <main+0x84>)
 80030d0:	619a      	str	r2, [r3, #24]

  state_machine_init( &hmcu_peripherals, &SystemClock_Config );
 80030d2:	490b      	ldr	r1, [pc, #44]	@ (8003100 <main+0x88>)
 80030d4:	4802      	ldr	r0, [pc, #8]	@ (80030e0 <main+0x68>)
 80030d6:	f7ff fc5b 	bl	8002990 <state_machine_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	state_machine_run();
 80030da:	f7ff fcd7 	bl	8002a8c <state_machine_run>
 80030de:	e7fc      	b.n	80030da <main+0x62>
 80030e0:	20001888 	.word	0x20001888
 80030e4:	200016b8 	.word	0x200016b8
 80030e8:	20001720 	.word	0x20001720
 80030ec:	20001768 	.word	0x20001768
 80030f0:	200017b0 	.word	0x200017b0
 80030f4:	200017f8 	.word	0x200017f8
 80030f8:	20001840 	.word	0x20001840
 80030fc:	2000170c 	.word	0x2000170c
 8003100:	08003105 	.word	0x08003105

08003104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b094      	sub	sp, #80	@ 0x50
 8003108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800310a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800310e:	2228      	movs	r2, #40	@ 0x28
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f00c fdb1 	bl	800fc7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003118:	f107 0314 	add.w	r3, r7, #20
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003128:	1d3b      	adds	r3, r7, #4
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	605a      	str	r2, [r3, #4]
 8003130:	609a      	str	r2, [r3, #8]
 8003132:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003134:	2309      	movs	r3, #9
 8003136:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003138:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800313c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800313e:	2300      	movs	r3, #0
 8003140:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003142:	2301      	movs	r3, #1
 8003144:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003146:	2301      	movs	r3, #1
 8003148:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800314a:	2302      	movs	r3, #2
 800314c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800314e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003152:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8003154:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003158:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800315a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800315e:	4618      	mov	r0, r3
 8003160:	f004 f900 	bl	8007364 <HAL_RCC_OscConfig>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800316a:	f000 fac3 	bl	80036f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800316e:	230f      	movs	r3, #15
 8003170:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003172:	2301      	movs	r3, #1
 8003174:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800317a:	2300      	movs	r3, #0
 800317c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800317e:	2300      	movs	r3, #0
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f004 fb6d 	bl	8007868 <HAL_RCC_ClockConfig>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003194:	f000 faae 	bl	80036f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8003198:	2311      	movs	r3, #17
 800319a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800319c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80031a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80031a6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031a8:	1d3b      	adds	r3, r7, #4
 80031aa:	4618      	mov	r0, r3
 80031ac:	f004 fcec 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80031b6:	f000 fa9d 	bl	80036f4 <Error_Handler>
  }
}
 80031ba:	bf00      	nop
 80031bc:	3750      	adds	r7, #80	@ 0x50
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031c8:	4b12      	ldr	r3, [pc, #72]	@ (8003214 <MX_I2C1_Init+0x50>)
 80031ca:	4a13      	ldr	r2, [pc, #76]	@ (8003218 <MX_I2C1_Init+0x54>)
 80031cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80031ce:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <MX_I2C1_Init+0x50>)
 80031d0:	4a12      	ldr	r2, [pc, #72]	@ (800321c <MX_I2C1_Init+0x58>)
 80031d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003214 <MX_I2C1_Init+0x50>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031da:	4b0e      	ldr	r3, [pc, #56]	@ (8003214 <MX_I2C1_Init+0x50>)
 80031dc:	2200      	movs	r2, #0
 80031de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003214 <MX_I2C1_Init+0x50>)
 80031e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003214 <MX_I2C1_Init+0x50>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80031ee:	4b09      	ldr	r3, [pc, #36]	@ (8003214 <MX_I2C1_Init+0x50>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031f4:	4b07      	ldr	r3, [pc, #28]	@ (8003214 <MX_I2C1_Init+0x50>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031fa:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <MX_I2C1_Init+0x50>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003200:	4804      	ldr	r0, [pc, #16]	@ (8003214 <MX_I2C1_Init+0x50>)
 8003202:	f001 fabd 	bl	8004780 <HAL_I2C_Init>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800320c:	f000 fa72 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003210:	bf00      	nop
 8003212:	bd80      	pop	{r7, pc}
 8003214:	200016b8 	.word	0x200016b8
 8003218:	40005400 	.word	0x40005400
 800321c:	000186a0 	.word	0x000186a0

08003220 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003226:	f107 030c 	add.w	r3, r7, #12
 800322a:	2100      	movs	r1, #0
 800322c:	460a      	mov	r2, r1
 800322e:	801a      	strh	r2, [r3, #0]
 8003230:	460a      	mov	r2, r1
 8003232:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8003234:	2300      	movs	r3, #0
 8003236:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8003238:	463b      	mov	r3, r7
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003240:	4b27      	ldr	r3, [pc, #156]	@ (80032e0 <MX_RTC_Init+0xc0>)
 8003242:	4a28      	ldr	r2, [pc, #160]	@ (80032e4 <MX_RTC_Init+0xc4>)
 8003244:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8003246:	4b26      	ldr	r3, [pc, #152]	@ (80032e0 <MX_RTC_Init+0xc0>)
 8003248:	f04f 32ff 	mov.w	r2, #4294967295
 800324c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800324e:	4b24      	ldr	r3, [pc, #144]	@ (80032e0 <MX_RTC_Init+0xc0>)
 8003250:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003254:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003256:	4822      	ldr	r0, [pc, #136]	@ (80032e0 <MX_RTC_Init+0xc0>)
 8003258:	f004 fe02 	bl	8007e60 <HAL_RTC_Init>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003262:	f000 fa47 	bl	80036f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003272:	f107 030c 	add.w	r3, r7, #12
 8003276:	2200      	movs	r2, #0
 8003278:	4619      	mov	r1, r3
 800327a:	4819      	ldr	r0, [pc, #100]	@ (80032e0 <MX_RTC_Init+0xc0>)
 800327c:	f004 fe7c 	bl	8007f78 <HAL_RTC_SetTime>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8003286:	f000 fa35 	bl	80036f4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800328a:	2301      	movs	r3, #1
 800328c:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800328e:	2301      	movs	r3, #1
 8003290:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 1;
 8003292:	2301      	movs	r3, #1
 8003294:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 800329a:	f107 0308 	add.w	r3, r7, #8
 800329e:	2200      	movs	r2, #0
 80032a0:	4619      	mov	r1, r3
 80032a2:	480f      	ldr	r0, [pc, #60]	@ (80032e0 <MX_RTC_Init+0xc0>)
 80032a4:	f004 ffd8 	bl	8008258 <HAL_RTC_SetDate>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80032ae:	f000 fa21 	bl	80036f4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 10;
 80032ba:	230a      	movs	r3, #10
 80032bc:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80032c2:	463b      	mov	r3, r7
 80032c4:	2200      	movs	r2, #0
 80032c6:	4619      	mov	r1, r3
 80032c8:	4805      	ldr	r0, [pc, #20]	@ (80032e0 <MX_RTC_Init+0xc0>)
 80032ca:	f005 f8cf 	bl	800846c <HAL_RTC_SetAlarm_IT>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80032d4:	f000 fa0e 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	2000170c 	.word	0x2000170c
 80032e4:	40002800 	.word	0x40002800

080032e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08e      	sub	sp, #56	@ 0x38
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032fc:	f107 0320 	add.w	r3, r7, #32
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	611a      	str	r2, [r3, #16]
 8003314:	615a      	str	r2, [r3, #20]
 8003316:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003318:	4b31      	ldr	r3, [pc, #196]	@ (80033e0 <MX_TIM2_Init+0xf8>)
 800331a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800331e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000 - 1;
 8003320:	4b2f      	ldr	r3, [pc, #188]	@ (80033e0 <MX_TIM2_Init+0xf8>)
 8003322:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8003326:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003328:	4b2d      	ldr	r3, [pc, #180]	@ (80033e0 <MX_TIM2_Init+0xf8>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800332e:	4b2c      	ldr	r3, [pc, #176]	@ (80033e0 <MX_TIM2_Init+0xf8>)
 8003330:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003334:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003336:	4b2a      	ldr	r3, [pc, #168]	@ (80033e0 <MX_TIM2_Init+0xf8>)
 8003338:	2200      	movs	r2, #0
 800333a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800333c:	4b28      	ldr	r3, [pc, #160]	@ (80033e0 <MX_TIM2_Init+0xf8>)
 800333e:	2200      	movs	r2, #0
 8003340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003342:	4827      	ldr	r0, [pc, #156]	@ (80033e0 <MX_TIM2_Init+0xf8>)
 8003344:	f005 fc67 	bl	8008c16 <HAL_TIM_Base_Init>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800334e:	f000 f9d1 	bl	80036f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003352:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003356:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003358:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800335c:	4619      	mov	r1, r3
 800335e:	4820      	ldr	r0, [pc, #128]	@ (80033e0 <MX_TIM2_Init+0xf8>)
 8003360:	f006 f8b0 	bl	80094c4 <HAL_TIM_ConfigClockSource>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800336a:	f000 f9c3 	bl	80036f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800336e:	481c      	ldr	r0, [pc, #112]	@ (80033e0 <MX_TIM2_Init+0xf8>)
 8003370:	f005 fd62 	bl	8008e38 <HAL_TIM_OC_Init>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800337a:	f000 f9bb 	bl	80036f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800337e:	2300      	movs	r3, #0
 8003380:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003386:	f107 0320 	add.w	r3, r7, #32
 800338a:	4619      	mov	r1, r3
 800338c:	4814      	ldr	r0, [pc, #80]	@ (80033e0 <MX_TIM2_Init+0xf8>)
 800338e:	f006 fc35 	bl	8009bfc <HAL_TIMEx_MasterConfigSynchronization>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003398:	f000 f9ac 	bl	80036f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800339c:	2300      	movs	r3, #0
 800339e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033ac:	1d3b      	adds	r3, r7, #4
 80033ae:	2200      	movs	r2, #0
 80033b0:	4619      	mov	r1, r3
 80033b2:	480b      	ldr	r0, [pc, #44]	@ (80033e0 <MX_TIM2_Init+0xf8>)
 80033b4:	f006 f82a 	bl	800940c <HAL_TIM_OC_ConfigChannel>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80033be:	f000 f999 	bl	80036f4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	2204      	movs	r2, #4
 80033c6:	4619      	mov	r1, r3
 80033c8:	4805      	ldr	r0, [pc, #20]	@ (80033e0 <MX_TIM2_Init+0xf8>)
 80033ca:	f006 f81f 	bl	800940c <HAL_TIM_OC_ConfigChannel>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80033d4:	f000 f98e 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033d8:	bf00      	nop
 80033da:	3738      	adds	r7, #56	@ 0x38
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20001720 	.word	0x20001720

080033e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ea:	f107 0308 	add.w	r3, r7, #8
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f8:	463b      	mov	r3, r7
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003400:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <MX_TIM3_Init+0x94>)
 8003402:	4a1e      	ldr	r2, [pc, #120]	@ (800347c <MX_TIM3_Init+0x98>)
 8003404:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 8003406:	4b1c      	ldr	r3, [pc, #112]	@ (8003478 <MX_TIM3_Init+0x94>)
 8003408:	220f      	movs	r2, #15
 800340a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800340c:	4b1a      	ldr	r3, [pc, #104]	@ (8003478 <MX_TIM3_Init+0x94>)
 800340e:	2200      	movs	r2, #0
 8003410:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003412:	4b19      	ldr	r3, [pc, #100]	@ (8003478 <MX_TIM3_Init+0x94>)
 8003414:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003418:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800341a:	4b17      	ldr	r3, [pc, #92]	@ (8003478 <MX_TIM3_Init+0x94>)
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003420:	4b15      	ldr	r3, [pc, #84]	@ (8003478 <MX_TIM3_Init+0x94>)
 8003422:	2200      	movs	r2, #0
 8003424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003426:	4814      	ldr	r0, [pc, #80]	@ (8003478 <MX_TIM3_Init+0x94>)
 8003428:	f005 fbf5 	bl	8008c16 <HAL_TIM_Base_Init>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003432:	f000 f95f 	bl	80036f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003436:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800343a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800343c:	f107 0308 	add.w	r3, r7, #8
 8003440:	4619      	mov	r1, r3
 8003442:	480d      	ldr	r0, [pc, #52]	@ (8003478 <MX_TIM3_Init+0x94>)
 8003444:	f006 f83e 	bl	80094c4 <HAL_TIM_ConfigClockSource>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800344e:	f000 f951 	bl	80036f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003456:	2300      	movs	r3, #0
 8003458:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800345a:	463b      	mov	r3, r7
 800345c:	4619      	mov	r1, r3
 800345e:	4806      	ldr	r0, [pc, #24]	@ (8003478 <MX_TIM3_Init+0x94>)
 8003460:	f006 fbcc 	bl	8009bfc <HAL_TIMEx_MasterConfigSynchronization>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800346a:	f000 f943 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800346e:	bf00      	nop
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20001768 	.word	0x20001768
 800347c:	40000400 	.word	0x40000400

08003480 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003486:	f107 0308 	add.w	r3, r7, #8
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	609a      	str	r2, [r3, #8]
 8003492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003494:	463b      	mov	r3, r7
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800349c:	4b1d      	ldr	r3, [pc, #116]	@ (8003514 <MX_TIM4_Init+0x94>)
 800349e:	4a1e      	ldr	r2, [pc, #120]	@ (8003518 <MX_TIM4_Init+0x98>)
 80034a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16 - 1;
 80034a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003514 <MX_TIM4_Init+0x94>)
 80034a4:	220f      	movs	r2, #15
 80034a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003514 <MX_TIM4_Init+0x94>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80034ae:	4b19      	ldr	r3, [pc, #100]	@ (8003514 <MX_TIM4_Init+0x94>)
 80034b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034b6:	4b17      	ldr	r3, [pc, #92]	@ (8003514 <MX_TIM4_Init+0x94>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034bc:	4b15      	ldr	r3, [pc, #84]	@ (8003514 <MX_TIM4_Init+0x94>)
 80034be:	2200      	movs	r2, #0
 80034c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80034c2:	4814      	ldr	r0, [pc, #80]	@ (8003514 <MX_TIM4_Init+0x94>)
 80034c4:	f005 fba7 	bl	8008c16 <HAL_TIM_Base_Init>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80034ce:	f000 f911 	bl	80036f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80034d8:	f107 0308 	add.w	r3, r7, #8
 80034dc:	4619      	mov	r1, r3
 80034de:	480d      	ldr	r0, [pc, #52]	@ (8003514 <MX_TIM4_Init+0x94>)
 80034e0:	f005 fff0 	bl	80094c4 <HAL_TIM_ConfigClockSource>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80034ea:	f000 f903 	bl	80036f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ee:	2300      	movs	r3, #0
 80034f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034f2:	2300      	movs	r3, #0
 80034f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034f6:	463b      	mov	r3, r7
 80034f8:	4619      	mov	r1, r3
 80034fa:	4806      	ldr	r0, [pc, #24]	@ (8003514 <MX_TIM4_Init+0x94>)
 80034fc:	f006 fb7e 	bl	8009bfc <HAL_TIMEx_MasterConfigSynchronization>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003506:	f000 f8f5 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800350a:	bf00      	nop
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	200017b0 	.word	0x200017b0
 8003518:	40000800 	.word	0x40000800

0800351c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003520:	4b11      	ldr	r3, [pc, #68]	@ (8003568 <MX_USART1_UART_Init+0x4c>)
 8003522:	4a12      	ldr	r2, [pc, #72]	@ (800356c <MX_USART1_UART_Init+0x50>)
 8003524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003526:	4b10      	ldr	r3, [pc, #64]	@ (8003568 <MX_USART1_UART_Init+0x4c>)
 8003528:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800352c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800352e:	4b0e      	ldr	r3, [pc, #56]	@ (8003568 <MX_USART1_UART_Init+0x4c>)
 8003530:	2200      	movs	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003534:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <MX_USART1_UART_Init+0x4c>)
 8003536:	2200      	movs	r2, #0
 8003538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800353a:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <MX_USART1_UART_Init+0x4c>)
 800353c:	2200      	movs	r2, #0
 800353e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003540:	4b09      	ldr	r3, [pc, #36]	@ (8003568 <MX_USART1_UART_Init+0x4c>)
 8003542:	220c      	movs	r2, #12
 8003544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003546:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <MX_USART1_UART_Init+0x4c>)
 8003548:	2200      	movs	r2, #0
 800354a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <MX_USART1_UART_Init+0x4c>)
 800354e:	2200      	movs	r2, #0
 8003550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003552:	4805      	ldr	r0, [pc, #20]	@ (8003568 <MX_USART1_UART_Init+0x4c>)
 8003554:	f006 fbc2 	bl	8009cdc <HAL_UART_Init>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800355e:	f000 f8c9 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	200017f8 	.word	0x200017f8
 800356c:	40013800 	.word	0x40013800

08003570 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003574:	4b11      	ldr	r3, [pc, #68]	@ (80035bc <MX_USART2_UART_Init+0x4c>)
 8003576:	4a12      	ldr	r2, [pc, #72]	@ (80035c0 <MX_USART2_UART_Init+0x50>)
 8003578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800357a:	4b10      	ldr	r3, [pc, #64]	@ (80035bc <MX_USART2_UART_Init+0x4c>)
 800357c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003582:	4b0e      	ldr	r3, [pc, #56]	@ (80035bc <MX_USART2_UART_Init+0x4c>)
 8003584:	2200      	movs	r2, #0
 8003586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003588:	4b0c      	ldr	r3, [pc, #48]	@ (80035bc <MX_USART2_UART_Init+0x4c>)
 800358a:	2200      	movs	r2, #0
 800358c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800358e:	4b0b      	ldr	r3, [pc, #44]	@ (80035bc <MX_USART2_UART_Init+0x4c>)
 8003590:	2200      	movs	r2, #0
 8003592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003594:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <MX_USART2_UART_Init+0x4c>)
 8003596:	220c      	movs	r2, #12
 8003598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800359a:	4b08      	ldr	r3, [pc, #32]	@ (80035bc <MX_USART2_UART_Init+0x4c>)
 800359c:	2200      	movs	r2, #0
 800359e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035a0:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <MX_USART2_UART_Init+0x4c>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035a6:	4805      	ldr	r0, [pc, #20]	@ (80035bc <MX_USART2_UART_Init+0x4c>)
 80035a8:	f006 fb98 	bl	8009cdc <HAL_UART_Init>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80035b2:	f000 f89f 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035b6:	bf00      	nop
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20001840 	.word	0x20001840
 80035c0:	40004400 	.word	0x40004400

080035c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ca:	f107 0310 	add.w	r3, r7, #16
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	609a      	str	r2, [r3, #8]
 80035d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d8:	4b42      	ldr	r3, [pc, #264]	@ (80036e4 <MX_GPIO_Init+0x120>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	4a41      	ldr	r2, [pc, #260]	@ (80036e4 <MX_GPIO_Init+0x120>)
 80035de:	f043 0310 	orr.w	r3, r3, #16
 80035e2:	6193      	str	r3, [r2, #24]
 80035e4:	4b3f      	ldr	r3, [pc, #252]	@ (80036e4 <MX_GPIO_Init+0x120>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035f0:	4b3c      	ldr	r3, [pc, #240]	@ (80036e4 <MX_GPIO_Init+0x120>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	4a3b      	ldr	r2, [pc, #236]	@ (80036e4 <MX_GPIO_Init+0x120>)
 80035f6:	f043 0320 	orr.w	r3, r3, #32
 80035fa:	6193      	str	r3, [r2, #24]
 80035fc:	4b39      	ldr	r3, [pc, #228]	@ (80036e4 <MX_GPIO_Init+0x120>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003608:	4b36      	ldr	r3, [pc, #216]	@ (80036e4 <MX_GPIO_Init+0x120>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	4a35      	ldr	r2, [pc, #212]	@ (80036e4 <MX_GPIO_Init+0x120>)
 800360e:	f043 0304 	orr.w	r3, r3, #4
 8003612:	6193      	str	r3, [r2, #24]
 8003614:	4b33      	ldr	r3, [pc, #204]	@ (80036e4 <MX_GPIO_Init+0x120>)
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003620:	4b30      	ldr	r3, [pc, #192]	@ (80036e4 <MX_GPIO_Init+0x120>)
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	4a2f      	ldr	r2, [pc, #188]	@ (80036e4 <MX_GPIO_Init+0x120>)
 8003626:	f043 0308 	orr.w	r3, r3, #8
 800362a:	6193      	str	r3, [r2, #24]
 800362c:	4b2d      	ldr	r3, [pc, #180]	@ (80036e4 <MX_GPIO_Init+0x120>)
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, US_TRIG_Pin|SENSOR_PWR_Pin, GPIO_PIN_RESET);
 8003638:	2200      	movs	r2, #0
 800363a:	2112      	movs	r1, #18
 800363c:	482a      	ldr	r0, [pc, #168]	@ (80036e8 <MX_GPIO_Init+0x124>)
 800363e:	f001 f86e 	bl	800471e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(uLTE_PWR_GPIO_Port, uLTE_PWR_Pin, GPIO_PIN_SET);
 8003642:	2201      	movs	r2, #1
 8003644:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003648:	4827      	ldr	r0, [pc, #156]	@ (80036e8 <MX_GPIO_Init+0x124>)
 800364a:	f001 f868 	bl	800471e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_INFO1_Pin|LED_INFO2_Pin, GPIO_PIN_RESET);
 800364e:	2200      	movs	r2, #0
 8003650:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003654:	4825      	ldr	r0, [pc, #148]	@ (80036ec <MX_GPIO_Init+0x128>)
 8003656:	f001 f862 	bl	800471e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : US_ECHO_Pin */
  GPIO_InitStruct.Pin = US_ECHO_Pin;
 800365a:	2301      	movs	r3, #1
 800365c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800365e:	4b24      	ldr	r3, [pc, #144]	@ (80036f0 <MX_GPIO_Init+0x12c>)
 8003660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(US_ECHO_GPIO_Port, &GPIO_InitStruct);
 8003666:	f107 0310 	add.w	r3, r7, #16
 800366a:	4619      	mov	r1, r3
 800366c:	481e      	ldr	r0, [pc, #120]	@ (80036e8 <MX_GPIO_Init+0x124>)
 800366e:	f000 fdff 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : US_TRIG_Pin SENSOR_PWR_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin|SENSOR_PWR_Pin;
 8003672:	2312      	movs	r3, #18
 8003674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003676:	2301      	movs	r3, #1
 8003678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367a:	2300      	movs	r3, #0
 800367c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367e:	2302      	movs	r3, #2
 8003680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003682:	f107 0310 	add.w	r3, r7, #16
 8003686:	4619      	mov	r1, r3
 8003688:	4817      	ldr	r0, [pc, #92]	@ (80036e8 <MX_GPIO_Init+0x124>)
 800368a:	f000 fdf1 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : uLTE_PWR_Pin */
  GPIO_InitStruct.Pin = uLTE_PWR_Pin;
 800368e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003694:	2301      	movs	r3, #1
 8003696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003698:	2301      	movs	r3, #1
 800369a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369c:	2302      	movs	r3, #2
 800369e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(uLTE_PWR_GPIO_Port, &GPIO_InitStruct);
 80036a0:	f107 0310 	add.w	r3, r7, #16
 80036a4:	4619      	mov	r1, r3
 80036a6:	4810      	ldr	r0, [pc, #64]	@ (80036e8 <MX_GPIO_Init+0x124>)
 80036a8:	f000 fde2 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INFO1_Pin LED_INFO2_Pin */
  GPIO_InitStruct.Pin = LED_INFO1_Pin|LED_INFO2_Pin;
 80036ac:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80036b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036b2:	2301      	movs	r3, #1
 80036b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ba:	2302      	movs	r3, #2
 80036bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036be:	f107 0310 	add.w	r3, r7, #16
 80036c2:	4619      	mov	r1, r3
 80036c4:	4809      	ldr	r0, [pc, #36]	@ (80036ec <MX_GPIO_Init+0x128>)
 80036c6:	f000 fdd3 	bl	8004270 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80036ca:	2200      	movs	r2, #0
 80036cc:	2100      	movs	r1, #0
 80036ce:	2006      	movs	r0, #6
 80036d0:	f000 fcd7 	bl	8004082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80036d4:	2006      	movs	r0, #6
 80036d6:	f000 fcf0 	bl	80040ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80036da:	bf00      	nop
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40010c00 	.word	0x40010c00
 80036ec:	40011000 	.word	0x40011000
 80036f0:	10310000 	.word	0x10310000

080036f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036f8:	b672      	cpsid	i
}
 80036fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036fc:	bf00      	nop
 80036fe:	e7fd      	b.n	80036fc <Error_Handler+0x8>

08003700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003706:	4b19      	ldr	r3, [pc, #100]	@ (800376c <HAL_MspInit+0x6c>)
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	4a18      	ldr	r2, [pc, #96]	@ (800376c <HAL_MspInit+0x6c>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6193      	str	r3, [r2, #24]
 8003712:	4b16      	ldr	r3, [pc, #88]	@ (800376c <HAL_MspInit+0x6c>)
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800371e:	4b13      	ldr	r3, [pc, #76]	@ (800376c <HAL_MspInit+0x6c>)
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4a12      	ldr	r2, [pc, #72]	@ (800376c <HAL_MspInit+0x6c>)
 8003724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003728:	61d3      	str	r3, [r2, #28]
 800372a:	4b10      	ldr	r3, [pc, #64]	@ (800376c <HAL_MspInit+0x6c>)
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8003736:	2200      	movs	r2, #0
 8003738:	2100      	movs	r1, #0
 800373a:	2001      	movs	r0, #1
 800373c:	f000 fca1 	bl	8004082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8003740:	2001      	movs	r0, #1
 8003742:	f000 fcba 	bl	80040ba <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003746:	4b0a      	ldr	r3, [pc, #40]	@ (8003770 <HAL_MspInit+0x70>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	4a04      	ldr	r2, [pc, #16]	@ (8003770 <HAL_MspInit+0x70>)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003762:	bf00      	nop
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000
 8003770:	40010000 	.word	0x40010000

08003774 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377c:	f107 0310 	add.w	r3, r7, #16
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a15      	ldr	r2, [pc, #84]	@ (80037e4 <HAL_I2C_MspInit+0x70>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d123      	bne.n	80037dc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003794:	4b14      	ldr	r3, [pc, #80]	@ (80037e8 <HAL_I2C_MspInit+0x74>)
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	4a13      	ldr	r2, [pc, #76]	@ (80037e8 <HAL_I2C_MspInit+0x74>)
 800379a:	f043 0308 	orr.w	r3, r3, #8
 800379e:	6193      	str	r3, [r2, #24]
 80037a0:	4b11      	ldr	r3, [pc, #68]	@ (80037e8 <HAL_I2C_MspInit+0x74>)
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037ac:	23c0      	movs	r3, #192	@ 0xc0
 80037ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037b0:	2312      	movs	r3, #18
 80037b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037b4:	2303      	movs	r3, #3
 80037b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b8:	f107 0310 	add.w	r3, r7, #16
 80037bc:	4619      	mov	r1, r3
 80037be:	480b      	ldr	r0, [pc, #44]	@ (80037ec <HAL_I2C_MspInit+0x78>)
 80037c0:	f000 fd56 	bl	8004270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037c4:	4b08      	ldr	r3, [pc, #32]	@ (80037e8 <HAL_I2C_MspInit+0x74>)
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	4a07      	ldr	r2, [pc, #28]	@ (80037e8 <HAL_I2C_MspInit+0x74>)
 80037ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80037ce:	61d3      	str	r3, [r2, #28]
 80037d0:	4b05      	ldr	r3, [pc, #20]	@ (80037e8 <HAL_I2C_MspInit+0x74>)
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80037dc:	bf00      	nop
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40005400 	.word	0x40005400
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40010c00 	.word	0x40010c00

080037f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a13      	ldr	r2, [pc, #76]	@ (800384c <HAL_RTC_MspInit+0x5c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d120      	bne.n	8003844 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003802:	f003 fd59 	bl	80072b8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003806:	4b12      	ldr	r3, [pc, #72]	@ (8003850 <HAL_RTC_MspInit+0x60>)
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	4a11      	ldr	r2, [pc, #68]	@ (8003850 <HAL_RTC_MspInit+0x60>)
 800380c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003810:	61d3      	str	r3, [r2, #28]
 8003812:	4b0f      	ldr	r3, [pc, #60]	@ (8003850 <HAL_RTC_MspInit+0x60>)
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800381e:	4b0d      	ldr	r3, [pc, #52]	@ (8003854 <HAL_RTC_MspInit+0x64>)
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003824:	2200      	movs	r2, #0
 8003826:	2100      	movs	r1, #0
 8003828:	2003      	movs	r0, #3
 800382a:	f000 fc2a 	bl	8004082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800382e:	2003      	movs	r0, #3
 8003830:	f000 fc43 	bl	80040ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003834:	2200      	movs	r2, #0
 8003836:	2100      	movs	r1, #0
 8003838:	2029      	movs	r0, #41	@ 0x29
 800383a:	f000 fc22 	bl	8004082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800383e:	2029      	movs	r0, #41	@ 0x29
 8003840:	f000 fc3b 	bl	80040ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40002800 	.word	0x40002800
 8003850:	40021000 	.word	0x40021000
 8003854:	4242043c 	.word	0x4242043c

08003858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003868:	d114      	bne.n	8003894 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800386a:	4b26      	ldr	r3, [pc, #152]	@ (8003904 <HAL_TIM_Base_MspInit+0xac>)
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	4a25      	ldr	r2, [pc, #148]	@ (8003904 <HAL_TIM_Base_MspInit+0xac>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	61d3      	str	r3, [r2, #28]
 8003876:	4b23      	ldr	r3, [pc, #140]	@ (8003904 <HAL_TIM_Base_MspInit+0xac>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003882:	2200      	movs	r2, #0
 8003884:	2100      	movs	r1, #0
 8003886:	201c      	movs	r0, #28
 8003888:	f000 fbfb 	bl	8004082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800388c:	201c      	movs	r0, #28
 800388e:	f000 fc14 	bl	80040ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003892:	e032      	b.n	80038fa <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1b      	ldr	r2, [pc, #108]	@ (8003908 <HAL_TIM_Base_MspInit+0xb0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d114      	bne.n	80038c8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800389e:	4b19      	ldr	r3, [pc, #100]	@ (8003904 <HAL_TIM_Base_MspInit+0xac>)
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	4a18      	ldr	r2, [pc, #96]	@ (8003904 <HAL_TIM_Base_MspInit+0xac>)
 80038a4:	f043 0302 	orr.w	r3, r3, #2
 80038a8:	61d3      	str	r3, [r2, #28]
 80038aa:	4b16      	ldr	r3, [pc, #88]	@ (8003904 <HAL_TIM_Base_MspInit+0xac>)
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80038b6:	2200      	movs	r2, #0
 80038b8:	2100      	movs	r1, #0
 80038ba:	201d      	movs	r0, #29
 80038bc:	f000 fbe1 	bl	8004082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80038c0:	201d      	movs	r0, #29
 80038c2:	f000 fbfa 	bl	80040ba <HAL_NVIC_EnableIRQ>
}
 80038c6:	e018      	b.n	80038fa <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a0f      	ldr	r2, [pc, #60]	@ (800390c <HAL_TIM_Base_MspInit+0xb4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d113      	bne.n	80038fa <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <HAL_TIM_Base_MspInit+0xac>)
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003904 <HAL_TIM_Base_MspInit+0xac>)
 80038d8:	f043 0304 	orr.w	r3, r3, #4
 80038dc:	61d3      	str	r3, [r2, #28]
 80038de:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <HAL_TIM_Base_MspInit+0xac>)
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80038ea:	2200      	movs	r2, #0
 80038ec:	2100      	movs	r1, #0
 80038ee:	201e      	movs	r0, #30
 80038f0:	f000 fbc7 	bl	8004082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80038f4:	201e      	movs	r0, #30
 80038f6:	f000 fbe0 	bl	80040ba <HAL_NVIC_EnableIRQ>
}
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800

08003910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	@ 0x28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003918:	f107 0318 	add.w	r3, r7, #24
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a3b      	ldr	r2, [pc, #236]	@ (8003a18 <HAL_UART_MspInit+0x108>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d132      	bne.n	8003996 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003930:	4b3a      	ldr	r3, [pc, #232]	@ (8003a1c <HAL_UART_MspInit+0x10c>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	4a39      	ldr	r2, [pc, #228]	@ (8003a1c <HAL_UART_MspInit+0x10c>)
 8003936:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800393a:	6193      	str	r3, [r2, #24]
 800393c:	4b37      	ldr	r3, [pc, #220]	@ (8003a1c <HAL_UART_MspInit+0x10c>)
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003948:	4b34      	ldr	r3, [pc, #208]	@ (8003a1c <HAL_UART_MspInit+0x10c>)
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	4a33      	ldr	r2, [pc, #204]	@ (8003a1c <HAL_UART_MspInit+0x10c>)
 800394e:	f043 0304 	orr.w	r3, r3, #4
 8003952:	6193      	str	r3, [r2, #24]
 8003954:	4b31      	ldr	r3, [pc, #196]	@ (8003a1c <HAL_UART_MspInit+0x10c>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003960:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003966:	2302      	movs	r3, #2
 8003968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800396a:	2303      	movs	r3, #3
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800396e:	f107 0318 	add.w	r3, r7, #24
 8003972:	4619      	mov	r1, r3
 8003974:	482a      	ldr	r0, [pc, #168]	@ (8003a20 <HAL_UART_MspInit+0x110>)
 8003976:	f000 fc7b 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800397a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800397e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003980:	2300      	movs	r3, #0
 8003982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003984:	2300      	movs	r3, #0
 8003986:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003988:	f107 0318 	add.w	r3, r7, #24
 800398c:	4619      	mov	r1, r3
 800398e:	4824      	ldr	r0, [pc, #144]	@ (8003a20 <HAL_UART_MspInit+0x110>)
 8003990:	f000 fc6e 	bl	8004270 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003994:	e03c      	b.n	8003a10 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a22      	ldr	r2, [pc, #136]	@ (8003a24 <HAL_UART_MspInit+0x114>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d137      	bne.n	8003a10 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039a0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a1c <HAL_UART_MspInit+0x10c>)
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a1c <HAL_UART_MspInit+0x10c>)
 80039a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039aa:	61d3      	str	r3, [r2, #28]
 80039ac:	4b1b      	ldr	r3, [pc, #108]	@ (8003a1c <HAL_UART_MspInit+0x10c>)
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b8:	4b18      	ldr	r3, [pc, #96]	@ (8003a1c <HAL_UART_MspInit+0x10c>)
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	4a17      	ldr	r2, [pc, #92]	@ (8003a1c <HAL_UART_MspInit+0x10c>)
 80039be:	f043 0304 	orr.w	r3, r3, #4
 80039c2:	6193      	str	r3, [r2, #24]
 80039c4:	4b15      	ldr	r3, [pc, #84]	@ (8003a1c <HAL_UART_MspInit+0x10c>)
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039d0:	2304      	movs	r3, #4
 80039d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d4:	2302      	movs	r3, #2
 80039d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039d8:	2303      	movs	r3, #3
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039dc:	f107 0318 	add.w	r3, r7, #24
 80039e0:	4619      	mov	r1, r3
 80039e2:	480f      	ldr	r0, [pc, #60]	@ (8003a20 <HAL_UART_MspInit+0x110>)
 80039e4:	f000 fc44 	bl	8004270 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039e8:	2308      	movs	r3, #8
 80039ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f4:	f107 0318 	add.w	r3, r7, #24
 80039f8:	4619      	mov	r1, r3
 80039fa:	4809      	ldr	r0, [pc, #36]	@ (8003a20 <HAL_UART_MspInit+0x110>)
 80039fc:	f000 fc38 	bl	8004270 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a00:	2200      	movs	r2, #0
 8003a02:	2100      	movs	r1, #0
 8003a04:	2026      	movs	r0, #38	@ 0x26
 8003a06:	f000 fb3c 	bl	8004082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a0a:	2026      	movs	r0, #38	@ 0x26
 8003a0c:	f000 fb55 	bl	80040ba <HAL_NVIC_EnableIRQ>
}
 8003a10:	bf00      	nop
 8003a12:	3728      	adds	r7, #40	@ 0x28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40013800 	.word	0x40013800
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40010800 	.word	0x40010800
 8003a24:	40004400 	.word	0x40004400

08003a28 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a12      	ldr	r2, [pc, #72]	@ (8003a80 <HAL_UART_MspDeInit+0x58>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d10b      	bne.n	8003a52 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003a3a:	4b12      	ldr	r3, [pc, #72]	@ (8003a84 <HAL_UART_MspDeInit+0x5c>)
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	4a11      	ldr	r2, [pc, #68]	@ (8003a84 <HAL_UART_MspDeInit+0x5c>)
 8003a40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a44:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003a46:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003a4a:	480f      	ldr	r0, [pc, #60]	@ (8003a88 <HAL_UART_MspDeInit+0x60>)
 8003a4c:	f000 fd94 	bl	8004578 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003a50:	e011      	b.n	8003a76 <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a0d      	ldr	r2, [pc, #52]	@ (8003a8c <HAL_UART_MspDeInit+0x64>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d10c      	bne.n	8003a76 <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003a5c:	4b09      	ldr	r3, [pc, #36]	@ (8003a84 <HAL_UART_MspDeInit+0x5c>)
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	4a08      	ldr	r2, [pc, #32]	@ (8003a84 <HAL_UART_MspDeInit+0x5c>)
 8003a62:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003a66:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003a68:	210c      	movs	r1, #12
 8003a6a:	4807      	ldr	r0, [pc, #28]	@ (8003a88 <HAL_UART_MspDeInit+0x60>)
 8003a6c:	f000 fd84 	bl	8004578 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003a70:	2026      	movs	r0, #38	@ 0x26
 8003a72:	f000 fb30 	bl	80040d6 <HAL_NVIC_DisableIRQ>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40013800 	.word	0x40013800
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40010800 	.word	0x40010800
 8003a8c:	40004400 	.word	0x40004400

08003a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a94:	bf00      	nop
 8003a96:	e7fd      	b.n	8003a94 <NMI_Handler+0x4>

08003a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a9c:	bf00      	nop
 8003a9e:	e7fd      	b.n	8003a9c <HardFault_Handler+0x4>

08003aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003aa4:	bf00      	nop
 8003aa6:	e7fd      	b.n	8003aa4 <MemManage_Handler+0x4>

08003aa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aac:	bf00      	nop
 8003aae:	e7fd      	b.n	8003aac <BusFault_Handler+0x4>

08003ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ab4:	bf00      	nop
 8003ab6:	e7fd      	b.n	8003ab4 <UsageFault_Handler+0x4>

08003ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr

08003ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ae0:	f000 f994 	bl	8003e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ae4:	bf00      	nop
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003aec:	f003 fc22 	bl	8007334 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8003af0:	bf00      	nop
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8003af8:	4802      	ldr	r0, [pc, #8]	@ (8003b04 <RTC_IRQHandler+0x10>)
 8003afa:	f005 f843 	bl	8008b84 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	2000170c 	.word	0x2000170c

08003b08 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(US_ECHO_Pin);
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	f000 fe1f 	bl	8004750 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003b1c:	4802      	ldr	r0, [pc, #8]	@ (8003b28 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8003b1e:	f001 ff7e 	bl	8005a1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20002574 	.word	0x20002574

08003b2c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003b30:	4802      	ldr	r0, [pc, #8]	@ (8003b3c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003b32:	f001 ff74 	bl	8005a1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20002574 	.word	0x20002574

08003b40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b44:	4802      	ldr	r0, [pc, #8]	@ (8003b50 <TIM2_IRQHandler+0x10>)
 8003b46:	f005 fb71 	bl	800922c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20001720 	.word	0x20001720

08003b54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b58:	4802      	ldr	r0, [pc, #8]	@ (8003b64 <TIM3_IRQHandler+0x10>)
 8003b5a:	f005 fb67 	bl	800922c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20001768 	.word	0x20001768

08003b68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b6c:	4802      	ldr	r0, [pc, #8]	@ (8003b78 <TIM4_IRQHandler+0x10>)
 8003b6e:	f005 fb5d 	bl	800922c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	200017b0 	.word	0x200017b0

08003b7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b80:	4802      	ldr	r0, [pc, #8]	@ (8003b8c <USART2_IRQHandler+0x10>)
 8003b82:	f006 f9b9 	bl	8009ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20001840 	.word	0x20001840

08003b90 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003b94:	4802      	ldr	r0, [pc, #8]	@ (8003ba0 <RTC_Alarm_IRQHandler+0x10>)
 8003b96:	f004 fd21 	bl	80085dc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	2000170c 	.word	0x2000170c

08003ba4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return 1;
 8003ba8:	2301      	movs	r3, #1
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr

08003bb2 <_kill>:

int _kill(int pid, int sig)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bbc:	f00c f8c0 	bl	800fd40 <__errno>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2216      	movs	r2, #22
 8003bc4:	601a      	str	r2, [r3, #0]
  return -1;
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <_exit>:

void _exit (int status)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bda:	f04f 31ff 	mov.w	r1, #4294967295
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff ffe7 	bl	8003bb2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003be4:	bf00      	nop
 8003be6:	e7fd      	b.n	8003be4 <_exit+0x12>

08003be8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	e00a      	b.n	8003c10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bfa:	f3af 8000 	nop.w
 8003bfe:	4601      	mov	r1, r0
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	60ba      	str	r2, [r7, #8]
 8003c06:	b2ca      	uxtb	r2, r1
 8003c08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	dbf0      	blt.n	8003bfa <_read+0x12>
  }

  return len;
 8003c18:	687b      	ldr	r3, [r7, #4]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b086      	sub	sp, #24
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	e009      	b.n	8003c48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	60ba      	str	r2, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	3301      	adds	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	dbf1      	blt.n	8003c34 <_write+0x12>
  }
  return len;
 8003c50:	687b      	ldr	r3, [r7, #4]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <_close>:

int _close(int file)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c80:	605a      	str	r2, [r3, #4]
  return 0;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr

08003c8e <_isatty>:

int _isatty(int file)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c96:	2301      	movs	r3, #1
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc80      	pop	{r7}
 8003ca0:	4770      	bx	lr

08003ca2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b085      	sub	sp, #20
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr
	...

08003cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cc4:	4a14      	ldr	r2, [pc, #80]	@ (8003d18 <_sbrk+0x5c>)
 8003cc6:	4b15      	ldr	r3, [pc, #84]	@ (8003d1c <_sbrk+0x60>)
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cd0:	4b13      	ldr	r3, [pc, #76]	@ (8003d20 <_sbrk+0x64>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d102      	bne.n	8003cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cd8:	4b11      	ldr	r3, [pc, #68]	@ (8003d20 <_sbrk+0x64>)
 8003cda:	4a12      	ldr	r2, [pc, #72]	@ (8003d24 <_sbrk+0x68>)
 8003cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cde:	4b10      	ldr	r3, [pc, #64]	@ (8003d20 <_sbrk+0x64>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d207      	bcs.n	8003cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cec:	f00c f828 	bl	800fd40 <__errno>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	220c      	movs	r2, #12
 8003cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfa:	e009      	b.n	8003d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cfc:	4b08      	ldr	r3, [pc, #32]	@ (8003d20 <_sbrk+0x64>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d02:	4b07      	ldr	r3, [pc, #28]	@ (8003d20 <_sbrk+0x64>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	4a05      	ldr	r2, [pc, #20]	@ (8003d20 <_sbrk+0x64>)
 8003d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20005000 	.word	0x20005000
 8003d1c:	00000400 	.word	0x00000400
 8003d20:	200018a4 	.word	0x200018a4
 8003d24:	20002bb8 	.word	0x20002bb8

08003d28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d34:	f7ff fff8 	bl	8003d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d38:	480b      	ldr	r0, [pc, #44]	@ (8003d68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003d3a:	490c      	ldr	r1, [pc, #48]	@ (8003d6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8003d70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d40:	e002      	b.n	8003d48 <LoopCopyDataInit>

08003d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d46:	3304      	adds	r3, #4

08003d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d4c:	d3f9      	bcc.n	8003d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d4e:	4a09      	ldr	r2, [pc, #36]	@ (8003d74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003d50:	4c09      	ldr	r4, [pc, #36]	@ (8003d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d54:	e001      	b.n	8003d5a <LoopFillZerobss>

08003d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d58:	3204      	adds	r2, #4

08003d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d5c:	d3fb      	bcc.n	8003d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d5e:	f00b fff5 	bl	800fd4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d62:	f7ff f989 	bl	8003078 <main>
  bx lr
 8003d66:	4770      	bx	lr
  ldr r0, =_sdata
 8003d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d6c:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8003d70:	080130a8 	.word	0x080130a8
  ldr r2, =_sbss
 8003d74:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8003d78:	20002bb8 	.word	0x20002bb8

08003d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d7c:	e7fe      	b.n	8003d7c <ADC1_2_IRQHandler>
	...

08003d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d84:	4b08      	ldr	r3, [pc, #32]	@ (8003da8 <HAL_Init+0x28>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a07      	ldr	r2, [pc, #28]	@ (8003da8 <HAL_Init+0x28>)
 8003d8a:	f043 0310 	orr.w	r3, r3, #16
 8003d8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d90:	2003      	movs	r0, #3
 8003d92:	f000 f96b 	bl	800406c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d96:	200f      	movs	r0, #15
 8003d98:	f000 f808 	bl	8003dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d9c:	f7ff fcb0 	bl	8003700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40022000 	.word	0x40022000

08003dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003db4:	4b12      	ldr	r3, [pc, #72]	@ (8003e00 <HAL_InitTick+0x54>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b12      	ldr	r3, [pc, #72]	@ (8003e04 <HAL_InitTick+0x58>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f991 	bl	80040f2 <HAL_SYSTICK_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00e      	b.n	8003df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b0f      	cmp	r3, #15
 8003dde:	d80a      	bhi.n	8003df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003de0:	2200      	movs	r2, #0
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295
 8003de8:	f000 f94b 	bl	8004082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dec:	4a06      	ldr	r2, [pc, #24]	@ (8003e08 <HAL_InitTick+0x5c>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e000      	b.n	8003df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20000000 	.word	0x20000000
 8003e04:	20000008 	.word	0x20000008
 8003e08:	20000004 	.word	0x20000004

08003e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e10:	4b05      	ldr	r3, [pc, #20]	@ (8003e28 <HAL_IncTick+0x1c>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <HAL_IncTick+0x20>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	4a03      	ldr	r2, [pc, #12]	@ (8003e2c <HAL_IncTick+0x20>)
 8003e1e:	6013      	str	r3, [r2, #0]
}
 8003e20:	bf00      	nop
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	20000008 	.word	0x20000008
 8003e2c:	200018a8 	.word	0x200018a8

08003e30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return uwTick;
 8003e34:	4b02      	ldr	r3, [pc, #8]	@ (8003e40 <HAL_GetTick+0x10>)
 8003e36:	681b      	ldr	r3, [r3, #0]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr
 8003e40:	200018a8 	.word	0x200018a8

08003e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e4c:	f7ff fff0 	bl	8003e30 <HAL_GetTick>
 8003e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d005      	beq.n	8003e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e88 <HAL_Delay+0x44>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e6a:	bf00      	nop
 8003e6c:	f7ff ffe0 	bl	8003e30 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d8f7      	bhi.n	8003e6c <HAL_Delay+0x28>
  {
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000008 	.word	0x20000008

08003e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ebe:	4a04      	ldr	r2, [pc, #16]	@ (8003ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	60d3      	str	r3, [r2, #12]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	e000ed00 	.word	0xe000ed00

08003ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed8:	4b04      	ldr	r3, [pc, #16]	@ (8003eec <__NVIC_GetPriorityGrouping+0x18>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	f003 0307 	and.w	r3, r3, #7
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	db0b      	blt.n	8003f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	f003 021f 	and.w	r2, r3, #31
 8003f08:	4906      	ldr	r1, [pc, #24]	@ (8003f24 <__NVIC_EnableIRQ+0x34>)
 8003f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2001      	movs	r0, #1
 8003f12:	fa00 f202 	lsl.w	r2, r0, r2
 8003f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	e000e100 	.word	0xe000e100

08003f28 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	db12      	blt.n	8003f60 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	f003 021f 	and.w	r2, r3, #31
 8003f40:	490a      	ldr	r1, [pc, #40]	@ (8003f6c <__NVIC_DisableIRQ+0x44>)
 8003f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2001      	movs	r0, #1
 8003f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f4e:	3320      	adds	r3, #32
 8003f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f54:	f3bf 8f4f 	dsb	sy
}
 8003f58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f5a:	f3bf 8f6f 	isb	sy
}
 8003f5e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	e000e100 	.word	0xe000e100

08003f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	6039      	str	r1, [r7, #0]
 8003f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	db0a      	blt.n	8003f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	490c      	ldr	r1, [pc, #48]	@ (8003fbc <__NVIC_SetPriority+0x4c>)
 8003f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8e:	0112      	lsls	r2, r2, #4
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	440b      	add	r3, r1
 8003f94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f98:	e00a      	b.n	8003fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	4908      	ldr	r1, [pc, #32]	@ (8003fc0 <__NVIC_SetPriority+0x50>)
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	3b04      	subs	r3, #4
 8003fa8:	0112      	lsls	r2, r2, #4
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	440b      	add	r3, r1
 8003fae:	761a      	strb	r2, [r3, #24]
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	e000e100 	.word	0xe000e100
 8003fc0:	e000ed00 	.word	0xe000ed00

08003fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b089      	sub	sp, #36	@ 0x24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f1c3 0307 	rsb	r3, r3, #7
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	bf28      	it	cs
 8003fe2:	2304      	movcs	r3, #4
 8003fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	2b06      	cmp	r3, #6
 8003fec:	d902      	bls.n	8003ff4 <NVIC_EncodePriority+0x30>
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3b03      	subs	r3, #3
 8003ff2:	e000      	b.n	8003ff6 <NVIC_EncodePriority+0x32>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43da      	mvns	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	401a      	ands	r2, r3
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800400c:	f04f 31ff 	mov.w	r1, #4294967295
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	fa01 f303 	lsl.w	r3, r1, r3
 8004016:	43d9      	mvns	r1, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800401c:	4313      	orrs	r3, r2
         );
}
 800401e:	4618      	mov	r0, r3
 8004020:	3724      	adds	r7, #36	@ 0x24
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3b01      	subs	r3, #1
 8004034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004038:	d301      	bcc.n	800403e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800403a:	2301      	movs	r3, #1
 800403c:	e00f      	b.n	800405e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800403e:	4a0a      	ldr	r2, [pc, #40]	@ (8004068 <SysTick_Config+0x40>)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3b01      	subs	r3, #1
 8004044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004046:	210f      	movs	r1, #15
 8004048:	f04f 30ff 	mov.w	r0, #4294967295
 800404c:	f7ff ff90 	bl	8003f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004050:	4b05      	ldr	r3, [pc, #20]	@ (8004068 <SysTick_Config+0x40>)
 8004052:	2200      	movs	r2, #0
 8004054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004056:	4b04      	ldr	r3, [pc, #16]	@ (8004068 <SysTick_Config+0x40>)
 8004058:	2207      	movs	r2, #7
 800405a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	e000e010 	.word	0xe000e010

0800406c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff ff09 	bl	8003e8c <__NVIC_SetPriorityGrouping>
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004082:	b580      	push	{r7, lr}
 8004084:	b086      	sub	sp, #24
 8004086:	af00      	add	r7, sp, #0
 8004088:	4603      	mov	r3, r0
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004094:	f7ff ff1e 	bl	8003ed4 <__NVIC_GetPriorityGrouping>
 8004098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	6978      	ldr	r0, [r7, #20]
 80040a0:	f7ff ff90 	bl	8003fc4 <NVIC_EncodePriority>
 80040a4:	4602      	mov	r2, r0
 80040a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff ff5f 	bl	8003f70 <__NVIC_SetPriority>
}
 80040b2:	bf00      	nop
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	4603      	mov	r3, r0
 80040c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff ff11 	bl	8003ef0 <__NVIC_EnableIRQ>
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
 80040dc:	4603      	mov	r3, r0
 80040de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80040e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff ff1f 	bl	8003f28 <__NVIC_DisableIRQ>
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff ff94 	bl	8004028 <SysTick_Config>
 8004100:	4603      	mov	r3, r0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d008      	beq.n	8004134 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2204      	movs	r2, #4
 8004126:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e020      	b.n	8004176 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 020e 	bic.w	r2, r2, #14
 8004142:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0201 	bic.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415c:	2101      	movs	r1, #1
 800415e:	fa01 f202 	lsl.w	r2, r1, r2
 8004162:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr

08004180 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d005      	beq.n	80041a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2204      	movs	r2, #4
 800419c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
 80041a2:	e051      	b.n	8004248 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 020e 	bic.w	r2, r2, #14
 80041b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a22      	ldr	r2, [pc, #136]	@ (8004254 <HAL_DMA_Abort_IT+0xd4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d029      	beq.n	8004222 <HAL_DMA_Abort_IT+0xa2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a21      	ldr	r2, [pc, #132]	@ (8004258 <HAL_DMA_Abort_IT+0xd8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d022      	beq.n	800421e <HAL_DMA_Abort_IT+0x9e>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1f      	ldr	r2, [pc, #124]	@ (800425c <HAL_DMA_Abort_IT+0xdc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01a      	beq.n	8004218 <HAL_DMA_Abort_IT+0x98>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004260 <HAL_DMA_Abort_IT+0xe0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d012      	beq.n	8004212 <HAL_DMA_Abort_IT+0x92>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004264 <HAL_DMA_Abort_IT+0xe4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00a      	beq.n	800420c <HAL_DMA_Abort_IT+0x8c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004268 <HAL_DMA_Abort_IT+0xe8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d102      	bne.n	8004206 <HAL_DMA_Abort_IT+0x86>
 8004200:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004204:	e00e      	b.n	8004224 <HAL_DMA_Abort_IT+0xa4>
 8004206:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800420a:	e00b      	b.n	8004224 <HAL_DMA_Abort_IT+0xa4>
 800420c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004210:	e008      	b.n	8004224 <HAL_DMA_Abort_IT+0xa4>
 8004212:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004216:	e005      	b.n	8004224 <HAL_DMA_Abort_IT+0xa4>
 8004218:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800421c:	e002      	b.n	8004224 <HAL_DMA_Abort_IT+0xa4>
 800421e:	2310      	movs	r3, #16
 8004220:	e000      	b.n	8004224 <HAL_DMA_Abort_IT+0xa4>
 8004222:	2301      	movs	r3, #1
 8004224:	4a11      	ldr	r2, [pc, #68]	@ (800426c <HAL_DMA_Abort_IT+0xec>)
 8004226:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	4798      	blx	r3
    } 
  }
  return status;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40020008 	.word	0x40020008
 8004258:	4002001c 	.word	0x4002001c
 800425c:	40020030 	.word	0x40020030
 8004260:	40020044 	.word	0x40020044
 8004264:	40020058 	.word	0x40020058
 8004268:	4002006c 	.word	0x4002006c
 800426c:	40020000 	.word	0x40020000

08004270 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004270:	b480      	push	{r7}
 8004272:	b08b      	sub	sp, #44	@ 0x2c
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800427a:	2300      	movs	r3, #0
 800427c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800427e:	2300      	movs	r3, #0
 8004280:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004282:	e169      	b.n	8004558 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004284:	2201      	movs	r2, #1
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	4013      	ands	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	429a      	cmp	r2, r3
 800429e:	f040 8158 	bne.w	8004552 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	4a9a      	ldr	r2, [pc, #616]	@ (8004510 <HAL_GPIO_Init+0x2a0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d05e      	beq.n	800436a <HAL_GPIO_Init+0xfa>
 80042ac:	4a98      	ldr	r2, [pc, #608]	@ (8004510 <HAL_GPIO_Init+0x2a0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d875      	bhi.n	800439e <HAL_GPIO_Init+0x12e>
 80042b2:	4a98      	ldr	r2, [pc, #608]	@ (8004514 <HAL_GPIO_Init+0x2a4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d058      	beq.n	800436a <HAL_GPIO_Init+0xfa>
 80042b8:	4a96      	ldr	r2, [pc, #600]	@ (8004514 <HAL_GPIO_Init+0x2a4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d86f      	bhi.n	800439e <HAL_GPIO_Init+0x12e>
 80042be:	4a96      	ldr	r2, [pc, #600]	@ (8004518 <HAL_GPIO_Init+0x2a8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d052      	beq.n	800436a <HAL_GPIO_Init+0xfa>
 80042c4:	4a94      	ldr	r2, [pc, #592]	@ (8004518 <HAL_GPIO_Init+0x2a8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d869      	bhi.n	800439e <HAL_GPIO_Init+0x12e>
 80042ca:	4a94      	ldr	r2, [pc, #592]	@ (800451c <HAL_GPIO_Init+0x2ac>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d04c      	beq.n	800436a <HAL_GPIO_Init+0xfa>
 80042d0:	4a92      	ldr	r2, [pc, #584]	@ (800451c <HAL_GPIO_Init+0x2ac>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d863      	bhi.n	800439e <HAL_GPIO_Init+0x12e>
 80042d6:	4a92      	ldr	r2, [pc, #584]	@ (8004520 <HAL_GPIO_Init+0x2b0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d046      	beq.n	800436a <HAL_GPIO_Init+0xfa>
 80042dc:	4a90      	ldr	r2, [pc, #576]	@ (8004520 <HAL_GPIO_Init+0x2b0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d85d      	bhi.n	800439e <HAL_GPIO_Init+0x12e>
 80042e2:	2b12      	cmp	r3, #18
 80042e4:	d82a      	bhi.n	800433c <HAL_GPIO_Init+0xcc>
 80042e6:	2b12      	cmp	r3, #18
 80042e8:	d859      	bhi.n	800439e <HAL_GPIO_Init+0x12e>
 80042ea:	a201      	add	r2, pc, #4	@ (adr r2, 80042f0 <HAL_GPIO_Init+0x80>)
 80042ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f0:	0800436b 	.word	0x0800436b
 80042f4:	08004345 	.word	0x08004345
 80042f8:	08004357 	.word	0x08004357
 80042fc:	08004399 	.word	0x08004399
 8004300:	0800439f 	.word	0x0800439f
 8004304:	0800439f 	.word	0x0800439f
 8004308:	0800439f 	.word	0x0800439f
 800430c:	0800439f 	.word	0x0800439f
 8004310:	0800439f 	.word	0x0800439f
 8004314:	0800439f 	.word	0x0800439f
 8004318:	0800439f 	.word	0x0800439f
 800431c:	0800439f 	.word	0x0800439f
 8004320:	0800439f 	.word	0x0800439f
 8004324:	0800439f 	.word	0x0800439f
 8004328:	0800439f 	.word	0x0800439f
 800432c:	0800439f 	.word	0x0800439f
 8004330:	0800439f 	.word	0x0800439f
 8004334:	0800434d 	.word	0x0800434d
 8004338:	08004361 	.word	0x08004361
 800433c:	4a79      	ldr	r2, [pc, #484]	@ (8004524 <HAL_GPIO_Init+0x2b4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004342:	e02c      	b.n	800439e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	623b      	str	r3, [r7, #32]
          break;
 800434a:	e029      	b.n	80043a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	3304      	adds	r3, #4
 8004352:	623b      	str	r3, [r7, #32]
          break;
 8004354:	e024      	b.n	80043a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	3308      	adds	r3, #8
 800435c:	623b      	str	r3, [r7, #32]
          break;
 800435e:	e01f      	b.n	80043a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	330c      	adds	r3, #12
 8004366:	623b      	str	r3, [r7, #32]
          break;
 8004368:	e01a      	b.n	80043a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d102      	bne.n	8004378 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004372:	2304      	movs	r3, #4
 8004374:	623b      	str	r3, [r7, #32]
          break;
 8004376:	e013      	b.n	80043a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d105      	bne.n	800438c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004380:	2308      	movs	r3, #8
 8004382:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	611a      	str	r2, [r3, #16]
          break;
 800438a:	e009      	b.n	80043a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800438c:	2308      	movs	r3, #8
 800438e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	615a      	str	r2, [r3, #20]
          break;
 8004396:	e003      	b.n	80043a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004398:	2300      	movs	r3, #0
 800439a:	623b      	str	r3, [r7, #32]
          break;
 800439c:	e000      	b.n	80043a0 <HAL_GPIO_Init+0x130>
          break;
 800439e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2bff      	cmp	r3, #255	@ 0xff
 80043a4:	d801      	bhi.n	80043aa <HAL_GPIO_Init+0x13a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	e001      	b.n	80043ae <HAL_GPIO_Init+0x13e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3304      	adds	r3, #4
 80043ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2bff      	cmp	r3, #255	@ 0xff
 80043b4:	d802      	bhi.n	80043bc <HAL_GPIO_Init+0x14c>
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	e002      	b.n	80043c2 <HAL_GPIO_Init+0x152>
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	3b08      	subs	r3, #8
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	210f      	movs	r1, #15
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	fa01 f303 	lsl.w	r3, r1, r3
 80043d0:	43db      	mvns	r3, r3
 80043d2:	401a      	ands	r2, r3
 80043d4:	6a39      	ldr	r1, [r7, #32]
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	fa01 f303 	lsl.w	r3, r1, r3
 80043dc:	431a      	orrs	r2, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 80b1 	beq.w	8004552 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80043f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004528 <HAL_GPIO_Init+0x2b8>)
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	4a4c      	ldr	r2, [pc, #304]	@ (8004528 <HAL_GPIO_Init+0x2b8>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	6193      	str	r3, [r2, #24]
 80043fc:	4b4a      	ldr	r3, [pc, #296]	@ (8004528 <HAL_GPIO_Init+0x2b8>)
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004408:	4a48      	ldr	r2, [pc, #288]	@ (800452c <HAL_GPIO_Init+0x2bc>)
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	089b      	lsrs	r3, r3, #2
 800440e:	3302      	adds	r3, #2
 8004410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004414:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	220f      	movs	r2, #15
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4013      	ands	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a40      	ldr	r2, [pc, #256]	@ (8004530 <HAL_GPIO_Init+0x2c0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d013      	beq.n	800445c <HAL_GPIO_Init+0x1ec>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a3f      	ldr	r2, [pc, #252]	@ (8004534 <HAL_GPIO_Init+0x2c4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00d      	beq.n	8004458 <HAL_GPIO_Init+0x1e8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a3e      	ldr	r2, [pc, #248]	@ (8004538 <HAL_GPIO_Init+0x2c8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d007      	beq.n	8004454 <HAL_GPIO_Init+0x1e4>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a3d      	ldr	r2, [pc, #244]	@ (800453c <HAL_GPIO_Init+0x2cc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d101      	bne.n	8004450 <HAL_GPIO_Init+0x1e0>
 800444c:	2303      	movs	r3, #3
 800444e:	e006      	b.n	800445e <HAL_GPIO_Init+0x1ee>
 8004450:	2304      	movs	r3, #4
 8004452:	e004      	b.n	800445e <HAL_GPIO_Init+0x1ee>
 8004454:	2302      	movs	r3, #2
 8004456:	e002      	b.n	800445e <HAL_GPIO_Init+0x1ee>
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <HAL_GPIO_Init+0x1ee>
 800445c:	2300      	movs	r3, #0
 800445e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004460:	f002 0203 	and.w	r2, r2, #3
 8004464:	0092      	lsls	r2, r2, #2
 8004466:	4093      	lsls	r3, r2
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800446e:	492f      	ldr	r1, [pc, #188]	@ (800452c <HAL_GPIO_Init+0x2bc>)
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	089b      	lsrs	r3, r3, #2
 8004474:	3302      	adds	r3, #2
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d006      	beq.n	8004496 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004488:	4b2d      	ldr	r3, [pc, #180]	@ (8004540 <HAL_GPIO_Init+0x2d0>)
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	492c      	ldr	r1, [pc, #176]	@ (8004540 <HAL_GPIO_Init+0x2d0>)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	4313      	orrs	r3, r2
 8004492:	608b      	str	r3, [r1, #8]
 8004494:	e006      	b.n	80044a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004496:	4b2a      	ldr	r3, [pc, #168]	@ (8004540 <HAL_GPIO_Init+0x2d0>)
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	43db      	mvns	r3, r3
 800449e:	4928      	ldr	r1, [pc, #160]	@ (8004540 <HAL_GPIO_Init+0x2d0>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d006      	beq.n	80044be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80044b0:	4b23      	ldr	r3, [pc, #140]	@ (8004540 <HAL_GPIO_Init+0x2d0>)
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	4922      	ldr	r1, [pc, #136]	@ (8004540 <HAL_GPIO_Init+0x2d0>)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60cb      	str	r3, [r1, #12]
 80044bc:	e006      	b.n	80044cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80044be:	4b20      	ldr	r3, [pc, #128]	@ (8004540 <HAL_GPIO_Init+0x2d0>)
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	491e      	ldr	r1, [pc, #120]	@ (8004540 <HAL_GPIO_Init+0x2d0>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d006      	beq.n	80044e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80044d8:	4b19      	ldr	r3, [pc, #100]	@ (8004540 <HAL_GPIO_Init+0x2d0>)
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	4918      	ldr	r1, [pc, #96]	@ (8004540 <HAL_GPIO_Init+0x2d0>)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	604b      	str	r3, [r1, #4]
 80044e4:	e006      	b.n	80044f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80044e6:	4b16      	ldr	r3, [pc, #88]	@ (8004540 <HAL_GPIO_Init+0x2d0>)
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	4914      	ldr	r1, [pc, #80]	@ (8004540 <HAL_GPIO_Init+0x2d0>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d021      	beq.n	8004544 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004500:	4b0f      	ldr	r3, [pc, #60]	@ (8004540 <HAL_GPIO_Init+0x2d0>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	490e      	ldr	r1, [pc, #56]	@ (8004540 <HAL_GPIO_Init+0x2d0>)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	4313      	orrs	r3, r2
 800450a:	600b      	str	r3, [r1, #0]
 800450c:	e021      	b.n	8004552 <HAL_GPIO_Init+0x2e2>
 800450e:	bf00      	nop
 8004510:	10320000 	.word	0x10320000
 8004514:	10310000 	.word	0x10310000
 8004518:	10220000 	.word	0x10220000
 800451c:	10210000 	.word	0x10210000
 8004520:	10120000 	.word	0x10120000
 8004524:	10110000 	.word	0x10110000
 8004528:	40021000 	.word	0x40021000
 800452c:	40010000 	.word	0x40010000
 8004530:	40010800 	.word	0x40010800
 8004534:	40010c00 	.word	0x40010c00
 8004538:	40011000 	.word	0x40011000
 800453c:	40011400 	.word	0x40011400
 8004540:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004544:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <HAL_GPIO_Init+0x304>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	43db      	mvns	r3, r3
 800454c:	4909      	ldr	r1, [pc, #36]	@ (8004574 <HAL_GPIO_Init+0x304>)
 800454e:	4013      	ands	r3, r2
 8004550:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	3301      	adds	r3, #1
 8004556:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455e:	fa22 f303 	lsr.w	r3, r2, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	f47f ae8e 	bne.w	8004284 <HAL_GPIO_Init+0x14>
  }
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	372c      	adds	r7, #44	@ 0x2c
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr
 8004574:	40010400 	.word	0x40010400

08004578 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004578:	b480      	push	{r7}
 800457a:	b089      	sub	sp, #36	@ 0x24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8004586:	e09a      	b.n	80046be <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004588:	2201      	movs	r2, #1
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 808d 	beq.w	80046b8 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800459e:	4a4e      	ldr	r2, [pc, #312]	@ (80046d8 <HAL_GPIO_DeInit+0x160>)
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	089b      	lsrs	r3, r3, #2
 80045a4:	3302      	adds	r3, #2
 80045a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045aa:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	220f      	movs	r2, #15
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4013      	ands	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a46      	ldr	r2, [pc, #280]	@ (80046dc <HAL_GPIO_DeInit+0x164>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d013      	beq.n	80045f0 <HAL_GPIO_DeInit+0x78>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a45      	ldr	r2, [pc, #276]	@ (80046e0 <HAL_GPIO_DeInit+0x168>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d00d      	beq.n	80045ec <HAL_GPIO_DeInit+0x74>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a44      	ldr	r2, [pc, #272]	@ (80046e4 <HAL_GPIO_DeInit+0x16c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d007      	beq.n	80045e8 <HAL_GPIO_DeInit+0x70>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a43      	ldr	r2, [pc, #268]	@ (80046e8 <HAL_GPIO_DeInit+0x170>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d101      	bne.n	80045e4 <HAL_GPIO_DeInit+0x6c>
 80045e0:	2303      	movs	r3, #3
 80045e2:	e006      	b.n	80045f2 <HAL_GPIO_DeInit+0x7a>
 80045e4:	2304      	movs	r3, #4
 80045e6:	e004      	b.n	80045f2 <HAL_GPIO_DeInit+0x7a>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e002      	b.n	80045f2 <HAL_GPIO_DeInit+0x7a>
 80045ec:	2301      	movs	r3, #1
 80045ee:	e000      	b.n	80045f2 <HAL_GPIO_DeInit+0x7a>
 80045f0:	2300      	movs	r3, #0
 80045f2:	69fa      	ldr	r2, [r7, #28]
 80045f4:	f002 0203 	and.w	r2, r2, #3
 80045f8:	0092      	lsls	r2, r2, #2
 80045fa:	4093      	lsls	r3, r2
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d132      	bne.n	8004668 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004602:	4b3a      	ldr	r3, [pc, #232]	@ (80046ec <HAL_GPIO_DeInit+0x174>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	43db      	mvns	r3, r3
 800460a:	4938      	ldr	r1, [pc, #224]	@ (80046ec <HAL_GPIO_DeInit+0x174>)
 800460c:	4013      	ands	r3, r2
 800460e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8004610:	4b36      	ldr	r3, [pc, #216]	@ (80046ec <HAL_GPIO_DeInit+0x174>)
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	43db      	mvns	r3, r3
 8004618:	4934      	ldr	r1, [pc, #208]	@ (80046ec <HAL_GPIO_DeInit+0x174>)
 800461a:	4013      	ands	r3, r2
 800461c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800461e:	4b33      	ldr	r3, [pc, #204]	@ (80046ec <HAL_GPIO_DeInit+0x174>)
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	43db      	mvns	r3, r3
 8004626:	4931      	ldr	r1, [pc, #196]	@ (80046ec <HAL_GPIO_DeInit+0x174>)
 8004628:	4013      	ands	r3, r2
 800462a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800462c:	4b2f      	ldr	r3, [pc, #188]	@ (80046ec <HAL_GPIO_DeInit+0x174>)
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	43db      	mvns	r3, r3
 8004634:	492d      	ldr	r1, [pc, #180]	@ (80046ec <HAL_GPIO_DeInit+0x174>)
 8004636:	4013      	ands	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	220f      	movs	r2, #15
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800464a:	4a23      	ldr	r2, [pc, #140]	@ (80046d8 <HAL_GPIO_DeInit+0x160>)
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	089b      	lsrs	r3, r3, #2
 8004650:	3302      	adds	r3, #2
 8004652:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	43da      	mvns	r2, r3
 800465a:	481f      	ldr	r0, [pc, #124]	@ (80046d8 <HAL_GPIO_DeInit+0x160>)
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	089b      	lsrs	r3, r3, #2
 8004660:	400a      	ands	r2, r1
 8004662:	3302      	adds	r3, #2
 8004664:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	2bff      	cmp	r3, #255	@ 0xff
 800466c:	d801      	bhi.n	8004672 <HAL_GPIO_DeInit+0xfa>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	e001      	b.n	8004676 <HAL_GPIO_DeInit+0xfe>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2bff      	cmp	r3, #255	@ 0xff
 800467c:	d802      	bhi.n	8004684 <HAL_GPIO_DeInit+0x10c>
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	e002      	b.n	800468a <HAL_GPIO_DeInit+0x112>
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	3b08      	subs	r3, #8
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	210f      	movs	r1, #15
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	fa01 f303 	lsl.w	r3, r1, r3
 8004698:	43db      	mvns	r3, r3
 800469a:	401a      	ands	r2, r3
 800469c:	2104      	movs	r1, #4
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	fa01 f303 	lsl.w	r3, r1, r3
 80046a4:	431a      	orrs	r2, r3
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	401a      	ands	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	3301      	adds	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	fa22 f303 	lsr.w	r3, r2, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f47f af5e 	bne.w	8004588 <HAL_GPIO_DeInit+0x10>
  }
}
 80046cc:	bf00      	nop
 80046ce:	bf00      	nop
 80046d0:	3724      	adds	r7, #36	@ 0x24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40010800 	.word	0x40010800
 80046e0:	40010c00 	.word	0x40010c00
 80046e4:	40011000 	.word	0x40011000
 80046e8:	40011400 	.word	0x40011400
 80046ec:	40010400 	.word	0x40010400

080046f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	887b      	ldrh	r3, [r7, #2]
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
 800470c:	e001      	b.n	8004712 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004712:	7bfb      	ldrb	r3, [r7, #15]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr

0800471e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	460b      	mov	r3, r1
 8004728:	807b      	strh	r3, [r7, #2]
 800472a:	4613      	mov	r3, r2
 800472c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800472e:	787b      	ldrb	r3, [r7, #1]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004734:	887a      	ldrh	r2, [r7, #2]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800473a:	e003      	b.n	8004744 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800473c:	887b      	ldrh	r3, [r7, #2]
 800473e:	041a      	lsls	r2, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	611a      	str	r2, [r3, #16]
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr
	...

08004750 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800475a:	4b08      	ldr	r3, [pc, #32]	@ (800477c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800475c:	695a      	ldr	r2, [r3, #20]
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	4013      	ands	r3, r2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d006      	beq.n	8004774 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004766:	4a05      	ldr	r2, [pc, #20]	@ (800477c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004768:	88fb      	ldrh	r3, [r7, #6]
 800476a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fd f99a 	bl	8001aa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004774:	bf00      	nop
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40010400 	.word	0x40010400

08004780 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e12b      	b.n	80049ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fe ffe4 	bl	8003774 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2224      	movs	r2, #36	@ 0x24
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0201 	bic.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047e4:	f003 f98a 	bl	8007afc <HAL_RCC_GetPCLK1Freq>
 80047e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	4a81      	ldr	r2, [pc, #516]	@ (80049f4 <HAL_I2C_Init+0x274>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d807      	bhi.n	8004804 <HAL_I2C_Init+0x84>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4a80      	ldr	r2, [pc, #512]	@ (80049f8 <HAL_I2C_Init+0x278>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	bf94      	ite	ls
 80047fc:	2301      	movls	r3, #1
 80047fe:	2300      	movhi	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	e006      	b.n	8004812 <HAL_I2C_Init+0x92>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4a7d      	ldr	r2, [pc, #500]	@ (80049fc <HAL_I2C_Init+0x27c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	bf94      	ite	ls
 800480c:	2301      	movls	r3, #1
 800480e:	2300      	movhi	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e0e7      	b.n	80049ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4a78      	ldr	r2, [pc, #480]	@ (8004a00 <HAL_I2C_Init+0x280>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	0c9b      	lsrs	r3, r3, #18
 8004824:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4a6a      	ldr	r2, [pc, #424]	@ (80049f4 <HAL_I2C_Init+0x274>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d802      	bhi.n	8004854 <HAL_I2C_Init+0xd4>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	3301      	adds	r3, #1
 8004852:	e009      	b.n	8004868 <HAL_I2C_Init+0xe8>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800485a:	fb02 f303 	mul.w	r3, r2, r3
 800485e:	4a69      	ldr	r2, [pc, #420]	@ (8004a04 <HAL_I2C_Init+0x284>)
 8004860:	fba2 2303 	umull	r2, r3, r2, r3
 8004864:	099b      	lsrs	r3, r3, #6
 8004866:	3301      	adds	r3, #1
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	430b      	orrs	r3, r1
 800486e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800487a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	495c      	ldr	r1, [pc, #368]	@ (80049f4 <HAL_I2C_Init+0x274>)
 8004884:	428b      	cmp	r3, r1
 8004886:	d819      	bhi.n	80048bc <HAL_I2C_Init+0x13c>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1e59      	subs	r1, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	fbb1 f3f3 	udiv	r3, r1, r3
 8004896:	1c59      	adds	r1, r3, #1
 8004898:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800489c:	400b      	ands	r3, r1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <HAL_I2C_Init+0x138>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1e59      	subs	r1, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80048b0:	3301      	adds	r3, #1
 80048b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b6:	e051      	b.n	800495c <HAL_I2C_Init+0x1dc>
 80048b8:	2304      	movs	r3, #4
 80048ba:	e04f      	b.n	800495c <HAL_I2C_Init+0x1dc>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d111      	bne.n	80048e8 <HAL_I2C_Init+0x168>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	1e58      	subs	r0, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6859      	ldr	r1, [r3, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	440b      	add	r3, r1
 80048d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048d6:	3301      	adds	r3, #1
 80048d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf0c      	ite	eq
 80048e0:	2301      	moveq	r3, #1
 80048e2:	2300      	movne	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	e012      	b.n	800490e <HAL_I2C_Init+0x18e>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	1e58      	subs	r0, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6859      	ldr	r1, [r3, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	0099      	lsls	r1, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80048fe:	3301      	adds	r3, #1
 8004900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf0c      	ite	eq
 8004908:	2301      	moveq	r3, #1
 800490a:	2300      	movne	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_I2C_Init+0x196>
 8004912:	2301      	movs	r3, #1
 8004914:	e022      	b.n	800495c <HAL_I2C_Init+0x1dc>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10e      	bne.n	800493c <HAL_I2C_Init+0x1bc>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1e58      	subs	r0, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6859      	ldr	r1, [r3, #4]
 8004926:	460b      	mov	r3, r1
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	440b      	add	r3, r1
 800492c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004930:	3301      	adds	r3, #1
 8004932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800493a:	e00f      	b.n	800495c <HAL_I2C_Init+0x1dc>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	1e58      	subs	r0, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6859      	ldr	r1, [r3, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	0099      	lsls	r1, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004952:	3301      	adds	r3, #1
 8004954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004958:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	6809      	ldr	r1, [r1, #0]
 8004960:	4313      	orrs	r3, r2
 8004962:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69da      	ldr	r2, [r3, #28]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800498a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6911      	ldr	r1, [r2, #16]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	68d2      	ldr	r2, [r2, #12]
 8004996:	4311      	orrs	r1, r2
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6812      	ldr	r2, [r2, #0]
 800499c:	430b      	orrs	r3, r1
 800499e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695a      	ldr	r2, [r3, #20]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	000186a0 	.word	0x000186a0
 80049f8:	001e847f 	.word	0x001e847f
 80049fc:	003d08ff 	.word	0x003d08ff
 8004a00:	431bde83 	.word	0x431bde83
 8004a04:	10624dd3 	.word	0x10624dd3

08004a08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	607a      	str	r2, [r7, #4]
 8004a12:	461a      	mov	r2, r3
 8004a14:	460b      	mov	r3, r1
 8004a16:	817b      	strh	r3, [r7, #10]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a1c:	f7ff fa08 	bl	8003e30 <HAL_GetTick>
 8004a20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b20      	cmp	r3, #32
 8004a2c:	f040 80e0 	bne.w	8004bf0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	2319      	movs	r3, #25
 8004a36:	2201      	movs	r2, #1
 8004a38:	4970      	ldr	r1, [pc, #448]	@ (8004bfc <HAL_I2C_Master_Transmit+0x1f4>)
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 fc9e 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a46:	2302      	movs	r3, #2
 8004a48:	e0d3      	b.n	8004bf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_I2C_Master_Transmit+0x50>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e0cc      	b.n	8004bf2 <HAL_I2C_Master_Transmit+0x1ea>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d007      	beq.n	8004a7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0201 	orr.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2221      	movs	r2, #33	@ 0x21
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2210      	movs	r2, #16
 8004a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	893a      	ldrh	r2, [r7, #8]
 8004aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4a50      	ldr	r2, [pc, #320]	@ (8004c00 <HAL_I2C_Master_Transmit+0x1f8>)
 8004abe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ac0:	8979      	ldrh	r1, [r7, #10]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	6a3a      	ldr	r2, [r7, #32]
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 fb08 	bl	80050dc <I2C_MasterRequestWrite>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e08d      	b.n	8004bf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004aec:	e066      	b.n	8004bbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	6a39      	ldr	r1, [r7, #32]
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fd5c 	bl	80055b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00d      	beq.n	8004b1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d107      	bne.n	8004b16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e06b      	b.n	8004bf2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	781a      	ldrb	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d11b      	bne.n	8004b90 <HAL_I2C_Master_Transmit+0x188>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d017      	beq.n	8004b90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	781a      	ldrb	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	6a39      	ldr	r1, [r7, #32]
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fd53 	bl	8005640 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00d      	beq.n	8004bbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d107      	bne.n	8004bb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e01a      	b.n	8004bf2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d194      	bne.n	8004aee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	e000      	b.n	8004bf2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004bf0:	2302      	movs	r3, #2
  }
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	00100002 	.word	0x00100002
 8004c00:	ffff0000 	.word	0xffff0000

08004c04 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08c      	sub	sp, #48	@ 0x30
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	607a      	str	r2, [r7, #4]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	460b      	mov	r3, r1
 8004c12:	817b      	strh	r3, [r7, #10]
 8004c14:	4613      	mov	r3, r2
 8004c16:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c1c:	f7ff f908 	bl	8003e30 <HAL_GetTick>
 8004c20:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	f040 824b 	bne.w	80050c6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	2319      	movs	r3, #25
 8004c36:	2201      	movs	r2, #1
 8004c38:	497f      	ldr	r1, [pc, #508]	@ (8004e38 <HAL_I2C_Master_Receive+0x234>)
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fb9e 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004c46:	2302      	movs	r3, #2
 8004c48:	e23e      	b.n	80050c8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_I2C_Master_Receive+0x54>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e237      	b.n	80050c8 <HAL_I2C_Master_Receive+0x4c4>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d007      	beq.n	8004c7e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0201 	orr.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2222      	movs	r2, #34	@ 0x22
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2210      	movs	r2, #16
 8004c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	893a      	ldrh	r2, [r7, #8]
 8004cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a5f      	ldr	r2, [pc, #380]	@ (8004e3c <HAL_I2C_Master_Receive+0x238>)
 8004cbe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004cc0:	8979      	ldrh	r1, [r7, #10]
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fa8a 	bl	80051e0 <I2C_MasterRequestRead>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e1f8      	b.n	80050c8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d113      	bne.n	8004d06 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61fb      	str	r3, [r7, #28]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	e1cc      	b.n	80050a0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d11e      	bne.n	8004d4c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d1e:	b672      	cpsid	i
}
 8004d20:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d48:	b662      	cpsie	i
}
 8004d4a:	e035      	b.n	8004db8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d11e      	bne.n	8004d92 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d64:	b672      	cpsid	i
}
 8004d66:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d8e:	b662      	cpsie	i
}
 8004d90:	e012      	b.n	8004db8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004da0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da2:	2300      	movs	r3, #0
 8004da4:	613b      	str	r3, [r7, #16]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004db8:	e172      	b.n	80050a0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	f200 811f 	bhi.w	8005002 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d123      	bne.n	8004e14 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 fc7d 	bl	80056d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e173      	b.n	80050c8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e12:	e145      	b.n	80050a0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d152      	bne.n	8004ec2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	2200      	movs	r2, #0
 8004e24:	4906      	ldr	r1, [pc, #24]	@ (8004e40 <HAL_I2C_Master_Receive+0x23c>)
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 faa8 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d008      	beq.n	8004e44 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e148      	b.n	80050c8 <HAL_I2C_Master_Receive+0x4c4>
 8004e36:	bf00      	nop
 8004e38:	00100002 	.word	0x00100002
 8004e3c:	ffff0000 	.word	0xffff0000
 8004e40:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004e44:	b672      	cpsid	i
}
 8004e46:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004e8a:	b662      	cpsie	i
}
 8004e8c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ec0:	e0ee      	b.n	80050a0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec8:	2200      	movs	r2, #0
 8004eca:	4981      	ldr	r1, [pc, #516]	@ (80050d0 <HAL_I2C_Master_Receive+0x4cc>)
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fa55 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0f5      	b.n	80050c8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004eec:	b672      	cpsid	i
}
 8004eee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f22:	4b6c      	ldr	r3, [pc, #432]	@ (80050d4 <HAL_I2C_Master_Receive+0x4d0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	08db      	lsrs	r3, r3, #3
 8004f28:	4a6b      	ldr	r2, [pc, #428]	@ (80050d8 <HAL_I2C_Master_Receive+0x4d4>)
 8004f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2e:	0a1a      	lsrs	r2, r3, #8
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	00da      	lsls	r2, r3, #3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d118      	bne.n	8004f7a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	f043 0220 	orr.w	r2, r3, #32
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004f6a:	b662      	cpsie	i
}
 8004f6c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e0a6      	b.n	80050c8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d1d9      	bne.n	8004f3c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004fca:	b662      	cpsie	i
}
 8004fcc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005000:	e04e      	b.n	80050a0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005004:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fb62 	bl	80056d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e058      	b.n	80050c8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b04      	cmp	r3, #4
 8005054:	d124      	bne.n	80050a0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800505a:	2b03      	cmp	r3, #3
 800505c:	d107      	bne.n	800506e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800506c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005096:	b29b      	uxth	r3, r3
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f47f ae88 	bne.w	8004dba <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	e000      	b.n	80050c8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80050c6:	2302      	movs	r3, #2
  }
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3728      	adds	r7, #40	@ 0x28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	00010004 	.word	0x00010004
 80050d4:	20000000 	.word	0x20000000
 80050d8:	14f8b589 	.word	0x14f8b589

080050dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	460b      	mov	r3, r1
 80050ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d006      	beq.n	8005106 <I2C_MasterRequestWrite+0x2a>
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d003      	beq.n	8005106 <I2C_MasterRequestWrite+0x2a>
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005104:	d108      	bne.n	8005118 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	e00b      	b.n	8005130 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511c:	2b12      	cmp	r3, #18
 800511e:	d107      	bne.n	8005130 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800512e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f91d 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00d      	beq.n	8005164 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005156:	d103      	bne.n	8005160 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800515e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e035      	b.n	80051d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800516c:	d108      	bne.n	8005180 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800516e:	897b      	ldrh	r3, [r7, #10]
 8005170:	b2db      	uxtb	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800517c:	611a      	str	r2, [r3, #16]
 800517e:	e01b      	b.n	80051b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005180:	897b      	ldrh	r3, [r7, #10]
 8005182:	11db      	asrs	r3, r3, #7
 8005184:	b2db      	uxtb	r3, r3
 8005186:	f003 0306 	and.w	r3, r3, #6
 800518a:	b2db      	uxtb	r3, r3
 800518c:	f063 030f 	orn	r3, r3, #15
 8005190:	b2da      	uxtb	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	490e      	ldr	r1, [pc, #56]	@ (80051d8 <I2C_MasterRequestWrite+0xfc>)
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f966 	bl	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e010      	b.n	80051d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051ae:	897b      	ldrh	r3, [r7, #10]
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4907      	ldr	r1, [pc, #28]	@ (80051dc <I2C_MasterRequestWrite+0x100>)
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f956 	bl	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	00010008 	.word	0x00010008
 80051dc:	00010002 	.word	0x00010002

080051e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	607a      	str	r2, [r7, #4]
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	460b      	mov	r3, r1
 80051ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005204:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b08      	cmp	r3, #8
 800520a:	d006      	beq.n	800521a <I2C_MasterRequestRead+0x3a>
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d003      	beq.n	800521a <I2C_MasterRequestRead+0x3a>
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005218:	d108      	bne.n	800522c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	e00b      	b.n	8005244 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005230:	2b11      	cmp	r3, #17
 8005232:	d107      	bne.n	8005244 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005242:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f893 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00d      	beq.n	8005278 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800526a:	d103      	bne.n	8005274 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005272:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e079      	b.n	800536c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005280:	d108      	bne.n	8005294 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005282:	897b      	ldrh	r3, [r7, #10]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	b2da      	uxtb	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	611a      	str	r2, [r3, #16]
 8005292:	e05f      	b.n	8005354 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005294:	897b      	ldrh	r3, [r7, #10]
 8005296:	11db      	asrs	r3, r3, #7
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f003 0306 	and.w	r3, r3, #6
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f063 030f 	orn	r3, r3, #15
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	4930      	ldr	r1, [pc, #192]	@ (8005374 <I2C_MasterRequestRead+0x194>)
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 f8dc 	bl	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e054      	b.n	800536c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052c2:	897b      	ldrh	r3, [r7, #10]
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	4929      	ldr	r1, [pc, #164]	@ (8005378 <I2C_MasterRequestRead+0x198>)
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f8cc 	bl	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e044      	b.n	800536c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e2:	2300      	movs	r3, #0
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005306:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f831 	bl	800537c <I2C_WaitOnFlagUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00d      	beq.n	800533c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800532a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800532e:	d103      	bne.n	8005338 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005336:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e017      	b.n	800536c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800533c:	897b      	ldrh	r3, [r7, #10]
 800533e:	11db      	asrs	r3, r3, #7
 8005340:	b2db      	uxtb	r3, r3
 8005342:	f003 0306 	and.w	r3, r3, #6
 8005346:	b2db      	uxtb	r3, r3
 8005348:	f063 030e 	orn	r3, r3, #14
 800534c:	b2da      	uxtb	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	4907      	ldr	r1, [pc, #28]	@ (8005378 <I2C_MasterRequestRead+0x198>)
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f888 	bl	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3718      	adds	r7, #24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	00010008 	.word	0x00010008
 8005378:	00010002 	.word	0x00010002

0800537c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800538c:	e048      	b.n	8005420 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d044      	beq.n	8005420 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005396:	f7fe fd4b 	bl	8003e30 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d302      	bcc.n	80053ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d139      	bne.n	8005420 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	0c1b      	lsrs	r3, r3, #16
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d10d      	bne.n	80053d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	43da      	mvns	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	4013      	ands	r3, r2
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	bf0c      	ite	eq
 80053c8:	2301      	moveq	r3, #1
 80053ca:	2300      	movne	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	e00c      	b.n	80053ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	43da      	mvns	r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4013      	ands	r3, r2
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	bf0c      	ite	eq
 80053e4:	2301      	moveq	r3, #1
 80053e6:	2300      	movne	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	461a      	mov	r2, r3
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d116      	bne.n	8005420 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540c:	f043 0220 	orr.w	r2, r3, #32
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e023      	b.n	8005468 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	0c1b      	lsrs	r3, r3, #16
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b01      	cmp	r3, #1
 8005428:	d10d      	bne.n	8005446 <I2C_WaitOnFlagUntilTimeout+0xca>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	43da      	mvns	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4013      	ands	r3, r2
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	bf0c      	ite	eq
 800543c:	2301      	moveq	r3, #1
 800543e:	2300      	movne	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	461a      	mov	r2, r3
 8005444:	e00c      	b.n	8005460 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	43da      	mvns	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	4013      	ands	r3, r2
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	bf0c      	ite	eq
 8005458:	2301      	moveq	r3, #1
 800545a:	2300      	movne	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	429a      	cmp	r2, r3
 8005464:	d093      	beq.n	800538e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800547e:	e071      	b.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800548a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800548e:	d123      	bne.n	80054d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800549e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c4:	f043 0204 	orr.w	r2, r3, #4
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e067      	b.n	80055a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054de:	d041      	beq.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e0:	f7fe fca6 	bl	8003e30 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d302      	bcc.n	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d136      	bne.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	0c1b      	lsrs	r3, r3, #16
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d10c      	bne.n	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	43da      	mvns	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4013      	ands	r3, r2
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	bf14      	ite	ne
 8005512:	2301      	movne	r3, #1
 8005514:	2300      	moveq	r3, #0
 8005516:	b2db      	uxtb	r3, r3
 8005518:	e00b      	b.n	8005532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	43da      	mvns	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4013      	ands	r3, r2
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	bf14      	ite	ne
 800552c:	2301      	movne	r3, #1
 800552e:	2300      	moveq	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d016      	beq.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005550:	f043 0220 	orr.w	r2, r3, #32
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e021      	b.n	80055a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	0c1b      	lsrs	r3, r3, #16
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b01      	cmp	r3, #1
 800556c:	d10c      	bne.n	8005588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	43da      	mvns	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4013      	ands	r3, r2
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	bf14      	ite	ne
 8005580:	2301      	movne	r3, #1
 8005582:	2300      	moveq	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	e00b      	b.n	80055a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	43da      	mvns	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4013      	ands	r3, r2
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	bf14      	ite	ne
 800559a:	2301      	movne	r3, #1
 800559c:	2300      	moveq	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f47f af6d 	bne.w	8005480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055bc:	e034      	b.n	8005628 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f8e3 	bl	800578a <I2C_IsAcknowledgeFailed>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e034      	b.n	8005638 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d028      	beq.n	8005628 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d6:	f7fe fc2b 	bl	8003e30 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d302      	bcc.n	80055ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d11d      	bne.n	8005628 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f6:	2b80      	cmp	r3, #128	@ 0x80
 80055f8:	d016      	beq.n	8005628 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e007      	b.n	8005638 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005632:	2b80      	cmp	r3, #128	@ 0x80
 8005634:	d1c3      	bne.n	80055be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800564c:	e034      	b.n	80056b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 f89b 	bl	800578a <I2C_IsAcknowledgeFailed>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e034      	b.n	80056c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005664:	d028      	beq.n	80056b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005666:	f7fe fbe3 	bl	8003e30 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	429a      	cmp	r2, r3
 8005674:	d302      	bcc.n	800567c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d11d      	bne.n	80056b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f003 0304 	and.w	r3, r3, #4
 8005686:	2b04      	cmp	r3, #4
 8005688:	d016      	beq.n	80056b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a4:	f043 0220 	orr.w	r2, r3, #32
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e007      	b.n	80056c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d1c3      	bne.n	800564e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056dc:	e049      	b.n	8005772 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	2b10      	cmp	r3, #16
 80056ea:	d119      	bne.n	8005720 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0210 	mvn.w	r2, #16
 80056f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e030      	b.n	8005782 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005720:	f7fe fb86 	bl	8003e30 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	429a      	cmp	r2, r3
 800572e:	d302      	bcc.n	8005736 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d11d      	bne.n	8005772 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005740:	2b40      	cmp	r3, #64	@ 0x40
 8005742:	d016      	beq.n	8005772 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575e:	f043 0220 	orr.w	r2, r3, #32
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e007      	b.n	8005782 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577c:	2b40      	cmp	r3, #64	@ 0x40
 800577e:	d1ae      	bne.n	80056de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800579c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057a0:	d11b      	bne.n	80057da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c6:	f043 0204 	orr.w	r2, r3, #4
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr

080057e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e0e8      	b.n	80059ca <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d106      	bne.n	8005812 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f009 f937 	bl	800ea80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2203      	movs	r2, #3
 8005816:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f005 f8b2 	bl	800a98e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	3304      	adds	r3, #4
 8005832:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005834:	f005 f888 	bl	800a948 <USB_CoreInit>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e0bf      	b.n	80059ca <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2100      	movs	r1, #0
 8005850:	4618      	mov	r0, r3
 8005852:	f005 f8b6 	bl	800a9c2 <USB_SetCurrentMode>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d005      	beq.n	8005868 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e0b0      	b.n	80059ca <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005868:	2300      	movs	r3, #0
 800586a:	73fb      	strb	r3, [r7, #15]
 800586c:	e03e      	b.n	80058ec <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800586e:	7bfa      	ldrb	r2, [r7, #15]
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	4613      	mov	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	440b      	add	r3, r1
 800587c:	3311      	adds	r3, #17
 800587e:	2201      	movs	r2, #1
 8005880:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005882:	7bfa      	ldrb	r2, [r7, #15]
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	4613      	mov	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	440b      	add	r3, r1
 8005890:	3310      	adds	r3, #16
 8005892:	7bfa      	ldrb	r2, [r7, #15]
 8005894:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005896:	7bfa      	ldrb	r2, [r7, #15]
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	440b      	add	r3, r1
 80058a4:	3313      	adds	r3, #19
 80058a6:	2200      	movs	r2, #0
 80058a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80058aa:	7bfa      	ldrb	r2, [r7, #15]
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	440b      	add	r3, r1
 80058b8:	3320      	adds	r3, #32
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80058be:	7bfa      	ldrb	r2, [r7, #15]
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	440b      	add	r3, r1
 80058cc:	3324      	adds	r3, #36	@ 0x24
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	4613      	mov	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	440b      	add	r3, r1
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
 80058e8:	3301      	adds	r3, #1
 80058ea:	73fb      	strb	r3, [r7, #15]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	791b      	ldrb	r3, [r3, #4]
 80058f0:	7bfa      	ldrb	r2, [r7, #15]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d3bb      	bcc.n	800586e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058f6:	2300      	movs	r3, #0
 80058f8:	73fb      	strb	r3, [r7, #15]
 80058fa:	e044      	b.n	8005986 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058fc:	7bfa      	ldrb	r2, [r7, #15]
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	440b      	add	r3, r1
 800590a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800590e:	2200      	movs	r2, #0
 8005910:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005912:	7bfa      	ldrb	r2, [r7, #15]
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	440b      	add	r3, r1
 8005920:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005924:	7bfa      	ldrb	r2, [r7, #15]
 8005926:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005928:	7bfa      	ldrb	r2, [r7, #15]
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	440b      	add	r3, r1
 8005936:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800593a:	2200      	movs	r2, #0
 800593c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800593e:	7bfa      	ldrb	r2, [r7, #15]
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	440b      	add	r3, r1
 800594c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005954:	7bfa      	ldrb	r2, [r7, #15]
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	440b      	add	r3, r1
 8005962:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800596a:	7bfa      	ldrb	r2, [r7, #15]
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	440b      	add	r3, r1
 8005978:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005980:	7bfb      	ldrb	r3, [r7, #15]
 8005982:	3301      	adds	r3, #1
 8005984:	73fb      	strb	r3, [r7, #15]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	791b      	ldrb	r3, [r3, #4]
 800598a:	7bfa      	ldrb	r2, [r7, #15]
 800598c:	429a      	cmp	r2, r3
 800598e:	d3b5      	bcc.n	80058fc <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6818      	ldr	r0, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3304      	adds	r3, #4
 8005998:	cb0e      	ldmia	r3, {r1, r2, r3}
 800599a:	f005 f81e 	bl	800a9da <USB_DevInit>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d005      	beq.n	80059b0 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e00c      	b.n	80059ca <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f007 fa9d 	bl	800cf02 <USB_DevDisconnect>

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <HAL_PCD_Start+0x16>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e016      	b.n	8005a16 <HAL_PCD_Start+0x44>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f004 ffb4 	bl	800a962 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80059fa:	2101      	movs	r1, #1
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f009 faba 	bl	800ef76 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f007 fa71 	bl	800ceee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b088      	sub	sp, #32
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f007 fa73 	bl	800cf16 <USB_ReadInterrupts>
 8005a30:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fb1a 	bl	8006076 <PCD_EP_ISR_Handler>

    return;
 8005a42:	e119      	b.n	8005c78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d013      	beq.n	8005a76 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a60:	b292      	uxth	r2, r2
 8005a62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f009 f88d 	bl	800eb86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f905 	bl	8005c7e <HAL_PCD_SetAddress>

    return;
 8005a74:	e100      	b.n	8005c78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00c      	beq.n	8005a9a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a92:	b292      	uxth	r2, r2
 8005a94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005a98:	e0ee      	b.n	8005c78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00c      	beq.n	8005abe <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ab6:	b292      	uxth	r2, r2
 8005ab8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005abc:	e0dc      	b.n	8005c78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d027      	beq.n	8005b18 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0204 	bic.w	r2, r2, #4
 8005ada:	b292      	uxth	r2, r2
 8005adc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0208 	bic.w	r2, r2, #8
 8005af2:	b292      	uxth	r2, r2
 8005af4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f009 f87d 	bl	800ebf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b10:	b292      	uxth	r2, r2
 8005b12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005b16:	e0af      	b.n	8005c78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 8083 	beq.w	8005c2a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8005b24:	2300      	movs	r3, #0
 8005b26:	77fb      	strb	r3, [r7, #31]
 8005b28:	e010      	b.n	8005b4c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	7ffb      	ldrb	r3, [r7, #31]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	441a      	add	r2, r3
 8005b36:	7ffb      	ldrb	r3, [r7, #31]
 8005b38:	8812      	ldrh	r2, [r2, #0]
 8005b3a:	b292      	uxth	r2, r2
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	3320      	adds	r3, #32
 8005b40:	443b      	add	r3, r7
 8005b42:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8005b46:	7ffb      	ldrb	r3, [r7, #31]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	77fb      	strb	r3, [r7, #31]
 8005b4c:	7ffb      	ldrb	r3, [r7, #31]
 8005b4e:	2b07      	cmp	r3, #7
 8005b50:	d9eb      	bls.n	8005b2a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f042 0201 	orr.w	r2, r2, #1
 8005b64:	b292      	uxth	r2, r2
 8005b66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0201 	bic.w	r2, r2, #1
 8005b7c:	b292      	uxth	r2, r2
 8005b7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005b82:	bf00      	nop
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0f6      	beq.n	8005b84 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ba8:	b292      	uxth	r2, r2
 8005baa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005bae:	2300      	movs	r3, #0
 8005bb0:	77fb      	strb	r3, [r7, #31]
 8005bb2:	e00f      	b.n	8005bd4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005bb4:	7ffb      	ldrb	r3, [r7, #31]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	4611      	mov	r1, r2
 8005bbc:	7ffa      	ldrb	r2, [r7, #31]
 8005bbe:	0092      	lsls	r2, r2, #2
 8005bc0:	440a      	add	r2, r1
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	3320      	adds	r3, #32
 8005bc6:	443b      	add	r3, r7
 8005bc8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005bcc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005bce:	7ffb      	ldrb	r3, [r7, #31]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	77fb      	strb	r3, [r7, #31]
 8005bd4:	7ffb      	ldrb	r3, [r7, #31]
 8005bd6:	2b07      	cmp	r3, #7
 8005bd8:	d9ec      	bls.n	8005bb4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0208 	orr.w	r2, r2, #8
 8005bec:	b292      	uxth	r2, r2
 8005bee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c04:	b292      	uxth	r2, r2
 8005c06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0204 	orr.w	r2, r2, #4
 8005c1c:	b292      	uxth	r2, r2
 8005c1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f008 ffce 	bl	800ebc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005c28:	e026      	b.n	8005c78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00f      	beq.n	8005c54 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005c46:	b292      	uxth	r2, r2
 8005c48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f008 ff8c 	bl	800eb6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005c52:	e011      	b.n	8005c78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00c      	beq.n	8005c78 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c70:	b292      	uxth	r2, r2
 8005c72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005c76:	bf00      	nop
  }
}
 8005c78:	3720      	adds	r7, #32
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b082      	sub	sp, #8
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	460b      	mov	r3, r1
 8005c88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_PCD_SetAddress+0x1a>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e012      	b.n	8005cbe <HAL_PCD_SetAddress+0x40>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	78fa      	ldrb	r2, [r7, #3]
 8005ca4:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	78fa      	ldrb	r2, [r7, #3]
 8005cac:	4611      	mov	r1, r2
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f007 f90a 	bl	800cec8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	4608      	mov	r0, r1
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	70fb      	strb	r3, [r7, #3]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	803b      	strh	r3, [r7, #0]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ce4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	da0e      	bge.n	8005d0a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	f003 0207 	and.w	r2, r3, #7
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	3310      	adds	r3, #16
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	4413      	add	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	705a      	strb	r2, [r3, #1]
 8005d08:	e00e      	b.n	8005d28 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d0a:	78fb      	ldrb	r3, [r7, #3]
 8005d0c:	f003 0207 	and.w	r2, r3, #7
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	4413      	add	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005d34:	883a      	ldrh	r2, [r7, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	78ba      	ldrb	r2, [r7, #2]
 8005d3e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d40:	78bb      	ldrb	r3, [r7, #2]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d102      	bne.n	8005d4c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_PCD_EP_Open+0x94>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e00e      	b.n	8005d78 <HAL_PCD_EP_Open+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f004 fe53 	bl	800aa14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005d76:	7afb      	ldrb	r3, [r7, #11]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	da0e      	bge.n	8005db2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	f003 0207 	and.w	r2, r3, #7
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	3310      	adds	r3, #16
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	4413      	add	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	705a      	strb	r2, [r3, #1]
 8005db0:	e00e      	b.n	8005dd0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	f003 0207 	and.w	r2, r3, #7
 8005db8:	4613      	mov	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d101      	bne.n	8005dea <HAL_PCD_EP_Close+0x6a>
 8005de6:	2302      	movs	r3, #2
 8005de8:	e00e      	b.n	8005e08 <HAL_PCD_EP_Close+0x88>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68f9      	ldr	r1, [r7, #12]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f005 f9cb 	bl	800b194 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	607a      	str	r2, [r7, #4]
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e20:	7afb      	ldrb	r3, [r7, #11]
 8005e22:	f003 0207 	and.w	r2, r3, #7
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4413      	add	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2200      	movs	r2, #0
 8005e48:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e50:	7afb      	ldrb	r3, [r7, #11]
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6979      	ldr	r1, [r7, #20]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f005 fb82 	bl	800b56c <USB_EPStartXfer>

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005e7e:	78fb      	ldrb	r3, [r7, #3]
 8005e80:	f003 0207 	and.w	r2, r3, #7
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	440b      	add	r3, r1
 8005e90:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005e94:	681b      	ldr	r3, [r3, #0]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bc80      	pop	{r7}
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	607a      	str	r2, [r7, #4]
 8005eaa:	603b      	str	r3, [r7, #0]
 8005eac:	460b      	mov	r3, r1
 8005eae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eb0:	7afb      	ldrb	r3, [r7, #11]
 8005eb2:	f003 0207 	and.w	r2, r3, #7
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	3310      	adds	r3, #16
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005eec:	7afb      	ldrb	r3, [r7, #11]
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6979      	ldr	r1, [r7, #20]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f005 fb34 	bl	800b56c <USB_EPStartXfer>

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	460b      	mov	r3, r1
 8005f18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	7912      	ldrb	r2, [r2, #4]
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d901      	bls.n	8005f2c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e04c      	b.n	8005fc6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	da0e      	bge.n	8005f52 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	f003 0207 	and.w	r2, r3, #7
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	3310      	adds	r3, #16
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	4413      	add	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	705a      	strb	r2, [r3, #1]
 8005f50:	e00c      	b.n	8005f6c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f52:	78fa      	ldrb	r2, [r7, #3]
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	4413      	add	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_PCD_EP_SetStall+0x7e>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e01c      	b.n	8005fc6 <HAL_PCD_EP_SetStall+0xb8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68f9      	ldr	r1, [r7, #12]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f006 fe97 	bl	800ccce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d108      	bne.n	8005fbc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	f006 ffbc 	bl	800cf34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005fda:	78fb      	ldrb	r3, [r7, #3]
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	7912      	ldrb	r2, [r2, #4]
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d901      	bls.n	8005fec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e040      	b.n	800606e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005fec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	da0e      	bge.n	8006012 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ff4:	78fb      	ldrb	r3, [r7, #3]
 8005ff6:	f003 0207 	and.w	r2, r3, #7
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	3310      	adds	r3, #16
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	4413      	add	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	705a      	strb	r2, [r3, #1]
 8006010:	e00e      	b.n	8006030 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	f003 0207 	and.w	r2, r3, #7
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	4413      	add	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	b2da      	uxtb	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_PCD_EP_ClrStall+0x82>
 800604c:	2302      	movs	r3, #2
 800604e:	e00e      	b.n	800606e <HAL_PCD_EP_ClrStall+0xa0>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68f9      	ldr	r1, [r7, #12]
 800605e:	4618      	mov	r0, r3
 8006060:	f006 fe85 	bl	800cd6e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b096      	sub	sp, #88	@ 0x58
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800607e:	e3bb      	b.n	80067f8 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006088:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800608c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f003 030f 	and.w	r3, r3, #15
 8006096:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800609a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f040 8175 	bne.w	800638e <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80060a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80060a8:	f003 0310 	and.w	r3, r3, #16
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d14e      	bne.n	800614e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80060bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c0:	81fb      	strh	r3, [r7, #14]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	89fb      	ldrh	r3, [r7, #14]
 80060c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3310      	adds	r3, #16
 80060d8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	4413      	add	r3, r2
 80060ee:	3302      	adds	r3, #2
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	6812      	ldr	r2, [r2, #0]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006104:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006108:	695a      	ldr	r2, [r3, #20]
 800610a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	441a      	add	r2, r3
 8006110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006112:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006114:	2100      	movs	r1, #0
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f008 fd0d 	bl	800eb36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	7b5b      	ldrb	r3, [r3, #13]
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 8368 	beq.w	80067f8 <PCD_EP_ISR_Handler+0x782>
 8006128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	2b00      	cmp	r3, #0
 800612e:	f040 8363 	bne.w	80067f8 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	7b5b      	ldrb	r3, [r3, #13]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800613c:	b2da      	uxtb	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	735a      	strb	r2, [r3, #13]
 800614c:	e354      	b.n	80067f8 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006154:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006160:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006168:	2b00      	cmp	r3, #0
 800616a:	d034      	beq.n	80061d6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006174:	b29b      	uxth	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	4413      	add	r3, r2
 8006180:	3306      	adds	r3, #6
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	6812      	ldr	r2, [r2, #0]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006196:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6818      	ldr	r0, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80061a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80061a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	f006 ff12 	bl	800cfd4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80061bc:	4013      	ands	r3, r2
 80061be:	823b      	strh	r3, [r7, #16]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	8a3a      	ldrh	r2, [r7, #16]
 80061c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80061ca:	b292      	uxth	r2, r2
 80061cc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f008 fc84 	bl	800eadc <HAL_PCD_SetupStageCallback>
 80061d4:	e310      	b.n	80067f8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80061d6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f280 830c 	bge.w	80067f8 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80061ec:	4013      	ands	r3, r2
 80061ee:	83fb      	strh	r3, [r7, #30]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	8bfa      	ldrh	r2, [r7, #30]
 80061f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80061fa:	b292      	uxth	r2, r2
 80061fc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006206:	b29b      	uxth	r3, r3
 8006208:	461a      	mov	r2, r3
 800620a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	4413      	add	r3, r2
 8006212:	3306      	adds	r3, #6
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6812      	ldr	r2, [r2, #0]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006228:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800622a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d019      	beq.n	8006266 <PCD_EP_ISR_Handler+0x1f0>
 8006232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d015      	beq.n	8006266 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006240:	6959      	ldr	r1, [r3, #20]
 8006242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006244:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006248:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800624a:	b29b      	uxth	r3, r3
 800624c:	f006 fec2 	bl	800cfd4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	441a      	add	r2, r3
 800625a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800625c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800625e:	2100      	movs	r1, #0
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f008 fc4d 	bl	800eb00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006270:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006278:	2b00      	cmp	r3, #0
 800627a:	f040 82bd 	bne.w	80067f8 <PCD_EP_ISR_Handler+0x782>
 800627e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006282:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006286:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800628a:	f000 82b5 	beq.w	80067f8 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	61bb      	str	r3, [r7, #24]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800629c:	b29b      	uxth	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	4413      	add	r3, r2
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80062c4:	d91d      	bls.n	8006302 <PCD_EP_ISR_Handler+0x28c>
 80062c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	095b      	lsrs	r3, r3, #5
 80062cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d102      	bne.n	80062e0 <PCD_EP_ISR_Handler+0x26a>
 80062da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062dc:	3b01      	subs	r3, #1
 80062de:	647b      	str	r3, [r7, #68]	@ 0x44
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	029b      	lsls	r3, r3, #10
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	4313      	orrs	r3, r2
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	801a      	strh	r2, [r3, #0]
 8006300:	e026      	b.n	8006350 <PCD_EP_ISR_Handler+0x2da>
 8006302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <PCD_EP_ISR_Handler+0x2aa>
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29b      	uxth	r3, r3
 8006310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006318:	b29a      	uxth	r2, r3
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	e017      	b.n	8006350 <PCD_EP_ISR_Handler+0x2da>
 8006320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	085b      	lsrs	r3, r3, #1
 8006326:	647b      	str	r3, [r7, #68]	@ 0x44
 8006328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <PCD_EP_ISR_Handler+0x2c4>
 8006334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006336:	3301      	adds	r3, #1
 8006338:	647b      	str	r3, [r7, #68]	@ 0x44
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	b29a      	uxth	r2, r3
 8006340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006342:	b29b      	uxth	r3, r3
 8006344:	029b      	lsls	r3, r3, #10
 8006346:	b29b      	uxth	r3, r3
 8006348:	4313      	orrs	r3, r2
 800634a:	b29a      	uxth	r2, r3
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800635c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006360:	827b      	strh	r3, [r7, #18]
 8006362:	8a7b      	ldrh	r3, [r7, #18]
 8006364:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006368:	827b      	strh	r3, [r7, #18]
 800636a:	8a7b      	ldrh	r3, [r7, #18]
 800636c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006370:	827b      	strh	r3, [r7, #18]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	8a7b      	ldrh	r3, [r7, #18]
 8006378:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800637c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006380:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006388:	b29b      	uxth	r3, r3
 800638a:	8013      	strh	r3, [r2, #0]
 800638c:	e234      	b.n	80067f8 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80063a2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f280 80fc 	bge.w	80065a4 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	b29a      	uxth	r2, r3
 80063be:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80063c2:	4013      	ands	r3, r2
 80063c4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80063da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80063de:	b292      	uxth	r2, r2
 80063e0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80063e2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80063e6:	4613      	mov	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	4413      	add	r3, r2
 80063f6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80063f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063fa:	7b1b      	ldrb	r3, [r3, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d125      	bne.n	800644c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006408:	b29b      	uxth	r3, r3
 800640a:	461a      	mov	r2, r3
 800640c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	4413      	add	r3, r2
 8006414:	3306      	adds	r3, #6
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6812      	ldr	r2, [r2, #0]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006422:	881b      	ldrh	r3, [r3, #0]
 8006424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006428:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800642c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 8092 	beq.w	800655a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800643c:	6959      	ldr	r1, [r3, #20]
 800643e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006440:	88da      	ldrh	r2, [r3, #6]
 8006442:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006446:	f006 fdc5 	bl	800cfd4 <USB_ReadPMA>
 800644a:	e086      	b.n	800655a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800644c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800644e:	78db      	ldrb	r3, [r3, #3]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d10a      	bne.n	800646a <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006454:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006458:	461a      	mov	r2, r3
 800645a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f9d9 	bl	8006814 <HAL_PCD_EP_DB_Receive>
 8006462:	4603      	mov	r3, r0
 8006464:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8006468:	e077      	b.n	800655a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006484:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	441a      	add	r2, r3
 8006496:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800649a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800649e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d024      	beq.n	8006512 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	4413      	add	r3, r2
 80064dc:	3302      	adds	r3, #2
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6812      	ldr	r2, [r2, #0]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064f0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80064f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d02e      	beq.n	800655a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6818      	ldr	r0, [r3, #0]
 8006500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006502:	6959      	ldr	r1, [r3, #20]
 8006504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006506:	891a      	ldrh	r2, [r3, #8]
 8006508:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800650c:	f006 fd62 	bl	800cfd4 <USB_ReadPMA>
 8006510:	e023      	b.n	800655a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800651a:	b29b      	uxth	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	4413      	add	r3, r2
 8006526:	3306      	adds	r3, #6
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6812      	ldr	r2, [r2, #0]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800653a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800653e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800654c:	6959      	ldr	r1, [r3, #20]
 800654e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006550:	895a      	ldrh	r2, [r3, #10]
 8006552:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006556:	f006 fd3d 	bl	800cfd4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800655a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800655c:	69da      	ldr	r2, [r3, #28]
 800655e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006562:	441a      	add	r2, r3
 8006564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006566:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800656a:	695a      	ldr	r2, [r3, #20]
 800656c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006570:	441a      	add	r2, r3
 8006572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006574:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d005      	beq.n	800658a <PCD_EP_ISR_Handler+0x514>
 800657e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8006582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	429a      	cmp	r2, r3
 8006588:	d206      	bcs.n	8006598 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800658a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f008 fab5 	bl	800eb00 <HAL_PCD_DataOutStageCallback>
 8006596:	e005      	b.n	80065a4 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800659e:	4618      	mov	r0, r3
 80065a0:	f004 ffe4 	bl	800b56c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80065a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80065a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 8123 	beq.w	80067f8 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80065b2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	3310      	adds	r3, #16
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	4413      	add	r3, r2
 80065c4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80065dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065e0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	461a      	mov	r2, r3
 80065ea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	441a      	add	r2, r3
 80065f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80065f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fe:	b29b      	uxth	r3, r3
 8006600:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006604:	78db      	ldrb	r3, [r3, #3]
 8006606:	2b01      	cmp	r3, #1
 8006608:	f040 80a2 	bne.w	8006750 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800660c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800660e:	2200      	movs	r2, #0
 8006610:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006614:	7b1b      	ldrb	r3, [r3, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 8093 	beq.w	8006742 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800661c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006624:	2b00      	cmp	r3, #0
 8006626:	d046      	beq.n	80066b6 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d126      	bne.n	800667e <PCD_EP_ISR_Handler+0x608>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	627b      	str	r3, [r7, #36]	@ 0x24
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800663e:	b29b      	uxth	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	4413      	add	r3, r2
 8006646:	627b      	str	r3, [r7, #36]	@ 0x24
 8006648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	011a      	lsls	r2, r3, #4
 800664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006650:	4413      	add	r3, r2
 8006652:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006656:	623b      	str	r3, [r7, #32]
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	b29b      	uxth	r3, r3
 800665e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006662:	b29a      	uxth	r2, r3
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	801a      	strh	r2, [r3, #0]
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b29b      	uxth	r3, r3
 800666e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006676:	b29a      	uxth	r2, r3
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	801a      	strh	r2, [r3, #0]
 800667c:	e061      	b.n	8006742 <PCD_EP_ISR_Handler+0x6cc>
 800667e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006680:	785b      	ldrb	r3, [r3, #1]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d15d      	bne.n	8006742 <PCD_EP_ISR_Handler+0x6cc>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006694:	b29b      	uxth	r3, r3
 8006696:	461a      	mov	r2, r3
 8006698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669a:	4413      	add	r3, r2
 800669c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800669e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	011a      	lsls	r2, r3, #4
 80066a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a6:	4413      	add	r3, r2
 80066a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b0:	2200      	movs	r2, #0
 80066b2:	801a      	strh	r2, [r3, #0]
 80066b4:	e045      	b.n	8006742 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066be:	785b      	ldrb	r3, [r3, #1]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d126      	bne.n	8006712 <PCD_EP_ISR_Handler+0x69c>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	461a      	mov	r2, r3
 80066d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d8:	4413      	add	r3, r2
 80066da:	637b      	str	r3, [r7, #52]	@ 0x34
 80066dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	011a      	lsls	r2, r3, #4
 80066e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e4:	4413      	add	r3, r2
 80066e6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80066ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	801a      	strh	r2, [r3, #0]
 80066fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	b29b      	uxth	r3, r3
 8006702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670a:	b29a      	uxth	r2, r3
 800670c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670e:	801a      	strh	r2, [r3, #0]
 8006710:	e017      	b.n	8006742 <PCD_EP_ISR_Handler+0x6cc>
 8006712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006714:	785b      	ldrb	r3, [r3, #1]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d113      	bne.n	8006742 <PCD_EP_ISR_Handler+0x6cc>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006722:	b29b      	uxth	r3, r3
 8006724:	461a      	mov	r2, r3
 8006726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006728:	4413      	add	r3, r2
 800672a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800672c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	011a      	lsls	r2, r3, #4
 8006732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006734:	4413      	add	r3, r2
 8006736:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800673a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800673c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673e:	2200      	movs	r2, #0
 8006740:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f008 f9f4 	bl	800eb36 <HAL_PCD_DataInStageCallback>
 800674e:	e053      	b.n	80067f8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006750:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006758:	2b00      	cmp	r3, #0
 800675a:	d146      	bne.n	80067ea <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006764:	b29b      	uxth	r3, r3
 8006766:	461a      	mov	r2, r3
 8006768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	4413      	add	r3, r2
 8006770:	3302      	adds	r3, #2
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006784:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8006788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800678a:	699a      	ldr	r2, [r3, #24]
 800678c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006790:	429a      	cmp	r2, r3
 8006792:	d907      	bls.n	80067a4 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8006794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800679c:	1ad2      	subs	r2, r2, r3
 800679e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067a0:	619a      	str	r2, [r3, #24]
 80067a2:	e002      	b.n	80067aa <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80067a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067a6:	2200      	movs	r2, #0
 80067a8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80067aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d106      	bne.n	80067c0 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80067b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f008 f9bc 	bl	800eb36 <HAL_PCD_DataInStageCallback>
 80067be:	e01b      	b.n	80067f8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80067c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067c2:	695a      	ldr	r2, [r3, #20]
 80067c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80067c8:	441a      	add	r2, r3
 80067ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067cc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80067ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067d0:	69da      	ldr	r2, [r3, #28]
 80067d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80067d6:	441a      	add	r2, r3
 80067d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067da:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067e2:	4618      	mov	r0, r3
 80067e4:	f004 fec2 	bl	800b56c <USB_EPStartXfer>
 80067e8:	e006      	b.n	80067f8 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80067ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80067ee:	461a      	mov	r2, r3
 80067f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f91b 	bl	8006a2e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006800:	b29b      	uxth	r3, r3
 8006802:	b21b      	sxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	f6ff ac3b 	blt.w	8006080 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3758      	adds	r7, #88	@ 0x58
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	4613      	mov	r3, r2
 8006820:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006822:	88fb      	ldrh	r3, [r7, #6]
 8006824:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d07e      	beq.n	800692a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006834:	b29b      	uxth	r3, r3
 8006836:	461a      	mov	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	00db      	lsls	r3, r3, #3
 800683e:	4413      	add	r3, r2
 8006840:	3302      	adds	r3, #2
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	6812      	ldr	r2, [r2, #0]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006854:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	699a      	ldr	r2, [r3, #24]
 800685a:	8b7b      	ldrh	r3, [r7, #26]
 800685c:	429a      	cmp	r2, r3
 800685e:	d306      	bcc.n	800686e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	699a      	ldr	r2, [r3, #24]
 8006864:	8b7b      	ldrh	r3, [r7, #26]
 8006866:	1ad2      	subs	r2, r2, r3
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	619a      	str	r2, [r3, #24]
 800686c:	e002      	b.n	8006874 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2200      	movs	r2, #0
 8006872:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d123      	bne.n	80068c4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006896:	833b      	strh	r3, [r7, #24]
 8006898:	8b3b      	ldrh	r3, [r7, #24]
 800689a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800689e:	833b      	strh	r3, [r7, #24]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	441a      	add	r2, r3
 80068ae:	8b3b      	ldrh	r3, [r7, #24]
 80068b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80068c4:	88fb      	ldrh	r3, [r7, #6]
 80068c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01f      	beq.n	800690e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068e8:	82fb      	strh	r3, [r7, #22]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	441a      	add	r2, r3
 80068f8:	8afb      	ldrh	r3, [r7, #22]
 80068fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006906:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800690a:	b29b      	uxth	r3, r3
 800690c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800690e:	8b7b      	ldrh	r3, [r7, #26]
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8087 	beq.w	8006a24 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6818      	ldr	r0, [r3, #0]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	6959      	ldr	r1, [r3, #20]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	891a      	ldrh	r2, [r3, #8]
 8006922:	8b7b      	ldrh	r3, [r7, #26]
 8006924:	f006 fb56 	bl	800cfd4 <USB_ReadPMA>
 8006928:	e07c      	b.n	8006a24 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006932:	b29b      	uxth	r3, r3
 8006934:	461a      	mov	r2, r3
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	4413      	add	r3, r2
 800693e:	3306      	adds	r3, #6
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	6812      	ldr	r2, [r2, #0]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800694c:	881b      	ldrh	r3, [r3, #0]
 800694e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006952:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	699a      	ldr	r2, [r3, #24]
 8006958:	8b7b      	ldrh	r3, [r7, #26]
 800695a:	429a      	cmp	r2, r3
 800695c:	d306      	bcc.n	800696c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	8b7b      	ldrh	r3, [r7, #26]
 8006964:	1ad2      	subs	r2, r2, r3
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	619a      	str	r2, [r3, #24]
 800696a:	e002      	b.n	8006972 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2200      	movs	r2, #0
 8006970:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d123      	bne.n	80069c2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006994:	83fb      	strh	r3, [r7, #30]
 8006996:	8bfb      	ldrh	r3, [r7, #30]
 8006998:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800699c:	83fb      	strh	r3, [r7, #30]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	441a      	add	r2, r3
 80069ac:	8bfb      	ldrh	r3, [r7, #30]
 80069ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069be:	b29b      	uxth	r3, r3
 80069c0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d11f      	bne.n	8006a0c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e6:	83bb      	strh	r3, [r7, #28]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	441a      	add	r2, r3
 80069f6:	8bbb      	ldrh	r3, [r7, #28]
 80069f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a04:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006a0c:	8b7b      	ldrh	r3, [r7, #26]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d008      	beq.n	8006a24 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6959      	ldr	r1, [r3, #20]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	895a      	ldrh	r2, [r3, #10]
 8006a1e:	8b7b      	ldrh	r3, [r7, #26]
 8006a20:	f006 fad8 	bl	800cfd4 <USB_ReadPMA>
    }
  }

  return count;
 8006a24:	8b7b      	ldrh	r3, [r7, #26]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3720      	adds	r7, #32
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b0a4      	sub	sp, #144	@ 0x90
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006a3c:	88fb      	ldrh	r3, [r7, #6]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 81dd 	beq.w	8006e02 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	461a      	mov	r2, r3
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	00db      	lsls	r3, r3, #3
 8006a5a:	4413      	add	r3, r2
 8006a5c:	3302      	adds	r3, #2
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	6812      	ldr	r2, [r2, #0]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a70:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	699a      	ldr	r2, [r3, #24]
 8006a78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d907      	bls.n	8006a90 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	699a      	ldr	r2, [r3, #24]
 8006a84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006a88:	1ad2      	subs	r2, r2, r3
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	619a      	str	r2, [r3, #24]
 8006a8e:	e002      	b.n	8006a96 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2200      	movs	r2, #0
 8006a94:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f040 80b9 	bne.w	8006c12 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	785b      	ldrb	r3, [r3, #1]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d126      	bne.n	8006af6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	461a      	mov	r2, r3
 8006aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006abc:	4413      	add	r3, r2
 8006abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	011a      	lsls	r2, r3, #4
 8006ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac8:	4413      	add	r3, r2
 8006aca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ace:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ade:	801a      	strh	r2, [r3, #0]
 8006ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af2:	801a      	strh	r2, [r3, #0]
 8006af4:	e01a      	b.n	8006b2c <HAL_PCD_EP_DB_Transmit+0xfe>
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	785b      	ldrb	r3, [r3, #1]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d116      	bne.n	8006b2c <HAL_PCD_EP_DB_Transmit+0xfe>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b12:	4413      	add	r3, r2
 8006b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	011a      	lsls	r2, r3, #4
 8006b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1e:	4413      	add	r3, r2
 8006b20:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b24:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	2200      	movs	r2, #0
 8006b2a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	785b      	ldrb	r3, [r3, #1]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d126      	bne.n	8006b88 <HAL_PCD_EP_DB_Transmit+0x15a>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	61fb      	str	r3, [r7, #28]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	4413      	add	r3, r2
 8006b50:	61fb      	str	r3, [r7, #28]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	011a      	lsls	r2, r3, #4
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b60:	61bb      	str	r3, [r7, #24]
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	801a      	strh	r2, [r3, #0]
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	801a      	strh	r2, [r3, #0]
 8006b86:	e017      	b.n	8006bb8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	785b      	ldrb	r3, [r3, #1]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d113      	bne.n	8006bb8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9e:	4413      	add	r3, r2
 8006ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	011a      	lsls	r2, r3, #4
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006baa:	4413      	add	r3, r2
 8006bac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006bb0:	623b      	str	r3, [r7, #32]
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f007 ffb9 	bl	800eb36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006bc4:	88fb      	ldrh	r3, [r7, #6]
 8006bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 82fc 	beq.w	80071c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bea:	82fb      	strh	r3, [r7, #22]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	441a      	add	r2, r3
 8006bfa:	8afb      	ldrh	r3, [r7, #22]
 8006bfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	8013      	strh	r3, [r2, #0]
 8006c10:	e2da      	b.n	80071c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006c12:	88fb      	ldrh	r3, [r7, #6]
 8006c14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d021      	beq.n	8006c60 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c36:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	441a      	add	r2, r3
 8006c48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	f040 82ae 	bne.w	80071c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	695a      	ldr	r2, [r3, #20]
 8006c70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006c74:	441a      	add	r2, r3
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	69da      	ldr	r2, [r3, #28]
 8006c7e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006c82:	441a      	add	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	6a1a      	ldr	r2, [r3, #32]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d30b      	bcc.n	8006cac <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	6a1a      	ldr	r2, [r3, #32]
 8006ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ca4:	1ad2      	subs	r2, r2, r3
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	621a      	str	r2, [r3, #32]
 8006caa:	e017      	b.n	8006cdc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d108      	bne.n	8006cc6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8006cb4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006cb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006cc4:	e00a      	b.n	8006cdc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	785b      	ldrb	r3, [r3, #1]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d165      	bne.n	8006db0 <HAL_PCD_EP_DB_Transmit+0x382>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf8:	4413      	add	r3, r2
 8006cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	011a      	lsls	r2, r3, #4
 8006d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d04:	4413      	add	r3, r2
 8006d06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d20:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d22:	d91d      	bls.n	8006d60 <HAL_PCD_EP_DB_Transmit+0x332>
 8006d24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d28:	095b      	lsrs	r3, r3, #5
 8006d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d102      	bne.n	8006d3e <HAL_PCD_EP_DB_Transmit+0x310>
 8006d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	029b      	lsls	r3, r3, #10
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5c:	801a      	strh	r2, [r3, #0]
 8006d5e:	e044      	b.n	8006dea <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <HAL_PCD_EP_DB_Transmit+0x350>
 8006d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	e035      	b.n	8006dea <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d82:	085b      	lsrs	r3, r3, #1
 8006d84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <HAL_PCD_EP_DB_Transmit+0x36a>
 8006d92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d94:	3301      	adds	r3, #1
 8006d96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	029b      	lsls	r3, r3, #10
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	4313      	orrs	r3, r2
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dac:	801a      	strh	r2, [r3, #0]
 8006dae:	e01c      	b.n	8006dea <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	785b      	ldrb	r3, [r3, #1]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d118      	bne.n	8006dea <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dcc:	4413      	add	r3, r2
 8006dce:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	011a      	lsls	r2, r3, #4
 8006dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd8:	4413      	add	r3, r2
 8006dda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006dde:	643b      	str	r3, [r7, #64]	@ 0x40
 8006de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006de8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6818      	ldr	r0, [r3, #0]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	6959      	ldr	r1, [r3, #20]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	891a      	ldrh	r2, [r3, #8]
 8006df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f006 f8a5 	bl	800cf4a <USB_WritePMA>
 8006e00:	e1e2      	b.n	80071c8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	4413      	add	r3, r2
 8006e16:	3306      	adds	r3, #6
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	6812      	ldr	r2, [r2, #0]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e2a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	699a      	ldr	r2, [r3, #24]
 8006e32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d307      	bcc.n	8006e4a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	699a      	ldr	r2, [r3, #24]
 8006e3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006e42:	1ad2      	subs	r2, r2, r3
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	619a      	str	r2, [r3, #24]
 8006e48:	e002      	b.n	8006e50 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f040 80c0 	bne.w	8006fda <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	785b      	ldrb	r3, [r3, #1]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d126      	bne.n	8006eb0 <HAL_PCD_EP_DB_Transmit+0x482>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	461a      	mov	r2, r3
 8006e74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e76:	4413      	add	r3, r2
 8006e78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	011a      	lsls	r2, r3, #4
 8006e80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e82:	4413      	add	r3, r2
 8006e84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e98:	801a      	strh	r2, [r3, #0]
 8006e9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006eac:	801a      	strh	r2, [r3, #0]
 8006eae:	e01a      	b.n	8006ee6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	785b      	ldrb	r3, [r3, #1]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d116      	bne.n	8006ee6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ecc:	4413      	add	r3, r2
 8006ece:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	011a      	lsls	r2, r3, #4
 8006ed6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ed8:	4413      	add	r3, r2
 8006eda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ede:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ee0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	677b      	str	r3, [r7, #116]	@ 0x74
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	785b      	ldrb	r3, [r3, #1]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d12b      	bne.n	8006f4c <HAL_PCD_EP_DB_Transmit+0x51e>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f08:	4413      	add	r3, r2
 8006f0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	011a      	lsls	r2, r3, #4
 8006f12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f14:	4413      	add	r3, r2
 8006f16:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f30:	801a      	strh	r2, [r3, #0]
 8006f32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f48:	801a      	strh	r2, [r3, #0]
 8006f4a:	e017      	b.n	8006f7c <HAL_PCD_EP_DB_Transmit+0x54e>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	785b      	ldrb	r3, [r3, #1]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d113      	bne.n	8006f7c <HAL_PCD_EP_DB_Transmit+0x54e>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f62:	4413      	add	r3, r2
 8006f64:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	011a      	lsls	r2, r3, #4
 8006f6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f6e:	4413      	add	r3, r2
 8006f70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f74:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f78:	2200      	movs	r2, #0
 8006f7a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	4619      	mov	r1, r3
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f007 fdd7 	bl	800eb36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006f88:	88fb      	ldrh	r3, [r7, #6]
 8006f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f040 811a 	bne.w	80071c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fae:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	441a      	add	r2, r3
 8006fc0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006fc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	8013      	strh	r3, [r2, #0]
 8006fd8:	e0f6      	b.n	80071c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006fda:	88fb      	ldrh	r3, [r7, #6]
 8006fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d121      	bne.n	8007028 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ffe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	441a      	add	r2, r3
 8007010:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007014:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007018:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800701c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007024:	b29b      	uxth	r3, r3
 8007026:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800702e:	2b01      	cmp	r3, #1
 8007030:	f040 80ca 	bne.w	80071c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	695a      	ldr	r2, [r3, #20]
 8007038:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800703c:	441a      	add	r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	69da      	ldr	r2, [r3, #28]
 8007046:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800704a:	441a      	add	r2, r3
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	6a1a      	ldr	r2, [r3, #32]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	429a      	cmp	r2, r3
 800705a:	d30b      	bcc.n	8007074 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	6a1a      	ldr	r2, [r3, #32]
 8007068:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800706c:	1ad2      	subs	r2, r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	621a      	str	r2, [r3, #32]
 8007072:	e017      	b.n	80070a4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d108      	bne.n	800708e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800707c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007080:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800708c:	e00a      	b.n	80070a4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2200      	movs	r2, #0
 800709a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	785b      	ldrb	r3, [r3, #1]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d165      	bne.n	800717e <HAL_PCD_EP_DB_Transmit+0x750>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	461a      	mov	r2, r3
 80070c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070c6:	4413      	add	r3, r2
 80070c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	011a      	lsls	r2, r3, #4
 80070d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070d2:	4413      	add	r3, r2
 80070d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070e8:	801a      	strh	r2, [r3, #0]
 80070ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80070f0:	d91d      	bls.n	800712e <HAL_PCD_EP_DB_Transmit+0x700>
 80070f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070f6:	095b      	lsrs	r3, r3, #5
 80070f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070fe:	f003 031f 	and.w	r3, r3, #31
 8007102:	2b00      	cmp	r3, #0
 8007104:	d102      	bne.n	800710c <HAL_PCD_EP_DB_Transmit+0x6de>
 8007106:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007108:	3b01      	subs	r3, #1
 800710a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800710c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	b29a      	uxth	r2, r3
 8007112:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007114:	b29b      	uxth	r3, r3
 8007116:	029b      	lsls	r3, r3, #10
 8007118:	b29b      	uxth	r3, r3
 800711a:	4313      	orrs	r3, r2
 800711c:	b29b      	uxth	r3, r3
 800711e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007126:	b29a      	uxth	r2, r3
 8007128:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800712a:	801a      	strh	r2, [r3, #0]
 800712c:	e041      	b.n	80071b2 <HAL_PCD_EP_DB_Transmit+0x784>
 800712e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10a      	bne.n	800714c <HAL_PCD_EP_DB_Transmit+0x71e>
 8007136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007144:	b29a      	uxth	r2, r3
 8007146:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	e032      	b.n	80071b2 <HAL_PCD_EP_DB_Transmit+0x784>
 800714c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007150:	085b      	lsrs	r3, r3, #1
 8007152:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007154:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <HAL_PCD_EP_DB_Transmit+0x738>
 8007160:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007162:	3301      	adds	r3, #1
 8007164:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007166:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	b29a      	uxth	r2, r3
 800716c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800716e:	b29b      	uxth	r3, r3
 8007170:	029b      	lsls	r3, r3, #10
 8007172:	b29b      	uxth	r3, r3
 8007174:	4313      	orrs	r3, r2
 8007176:	b29a      	uxth	r2, r3
 8007178:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800717a:	801a      	strh	r2, [r3, #0]
 800717c:	e019      	b.n	80071b2 <HAL_PCD_EP_DB_Transmit+0x784>
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	785b      	ldrb	r3, [r3, #1]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d115      	bne.n	80071b2 <HAL_PCD_EP_DB_Transmit+0x784>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800718e:	b29b      	uxth	r3, r3
 8007190:	461a      	mov	r2, r3
 8007192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007194:	4413      	add	r3, r2
 8007196:	657b      	str	r3, [r7, #84]	@ 0x54
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	011a      	lsls	r2, r3, #4
 800719e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071a0:	4413      	add	r3, r2
 80071a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80071a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80071a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071b0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	6959      	ldr	r1, [r3, #20]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	895a      	ldrh	r2, [r3, #10]
 80071be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	f005 fec1 	bl	800cf4a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071e2:	82bb      	strh	r3, [r7, #20]
 80071e4:	8abb      	ldrh	r3, [r7, #20]
 80071e6:	f083 0310 	eor.w	r3, r3, #16
 80071ea:	82bb      	strh	r3, [r7, #20]
 80071ec:	8abb      	ldrh	r3, [r7, #20]
 80071ee:	f083 0320 	eor.w	r3, r3, #32
 80071f2:	82bb      	strh	r3, [r7, #20]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	441a      	add	r2, r3
 8007202:	8abb      	ldrh	r3, [r7, #20]
 8007204:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007208:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800720c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007214:	b29b      	uxth	r3, r3
 8007216:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3790      	adds	r7, #144	@ 0x90
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007222:	b480      	push	{r7}
 8007224:	b087      	sub	sp, #28
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	607b      	str	r3, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	817b      	strh	r3, [r7, #10]
 8007230:	4613      	mov	r3, r2
 8007232:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007234:	897b      	ldrh	r3, [r7, #10]
 8007236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800723a:	b29b      	uxth	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00b      	beq.n	8007258 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007240:	897b      	ldrh	r3, [r7, #10]
 8007242:	f003 0207 	and.w	r2, r3, #7
 8007246:	4613      	mov	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	00db      	lsls	r3, r3, #3
 800724e:	3310      	adds	r3, #16
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4413      	add	r3, r2
 8007254:	617b      	str	r3, [r7, #20]
 8007256:	e009      	b.n	800726c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007258:	897a      	ldrh	r2, [r7, #10]
 800725a:	4613      	mov	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	4413      	add	r3, r2
 800726a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800726c:	893b      	ldrh	r3, [r7, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d107      	bne.n	8007282 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2200      	movs	r2, #0
 8007276:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	b29a      	uxth	r2, r3
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	80da      	strh	r2, [r3, #6]
 8007280:	e00b      	b.n	800729a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2201      	movs	r2, #1
 8007286:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	b29a      	uxth	r2, r3
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	0c1b      	lsrs	r3, r3, #16
 8007294:	b29a      	uxth	r2, r3
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	371c      	adds	r7, #28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bc80      	pop	{r7}
 80072a4:	4770      	bx	lr

080072a6 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 80072a6:	b480      	push	{r7}
 80072a8:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 80072aa:	bf20      	wfe
  __asm volatile( "nop" );
 80072ac:	bf00      	nop
}
 80072ae:	bf00      	nop
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bc80      	pop	{r7}
 80072b4:	4770      	bx	lr
	...

080072b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80072bc:	4b03      	ldr	r3, [pc, #12]	@ (80072cc <HAL_PWR_EnableBkUpAccess+0x14>)
 80072be:	2201      	movs	r2, #1
 80072c0:	601a      	str	r2, [r3, #0]
}
 80072c2:	bf00      	nop
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bc80      	pop	{r7}
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	420e0020 	.word	0x420e0020

080072d0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 80072dc:	4b13      	ldr	r3, [pc, #76]	@ (800732c <HAL_PWR_EnterSTOPMode+0x5c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a12      	ldr	r2, [pc, #72]	@ (800732c <HAL_PWR_EnterSTOPMode+0x5c>)
 80072e2:	f023 0302 	bic.w	r3, r3, #2
 80072e6:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 80072e8:	4b10      	ldr	r3, [pc, #64]	@ (800732c <HAL_PWR_EnterSTOPMode+0x5c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f023 0201 	bic.w	r2, r3, #1
 80072f0:	490e      	ldr	r1, [pc, #56]	@ (800732c <HAL_PWR_EnterSTOPMode+0x5c>)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80072f8:	4b0d      	ldr	r3, [pc, #52]	@ (8007330 <HAL_PWR_EnterSTOPMode+0x60>)
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	4a0c      	ldr	r2, [pc, #48]	@ (8007330 <HAL_PWR_EnterSTOPMode+0x60>)
 80072fe:	f043 0304 	orr.w	r3, r3, #4
 8007302:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8007304:	78fb      	ldrb	r3, [r7, #3]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d101      	bne.n	800730e <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800730a:	bf30      	wfi
 800730c:	e004      	b.n	8007318 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800730e:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 8007310:	f7ff ffc9 	bl	80072a6 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8007314:	f7ff ffc7 	bl	80072a6 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007318:	4b05      	ldr	r3, [pc, #20]	@ (8007330 <HAL_PWR_EnterSTOPMode+0x60>)
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	4a04      	ldr	r2, [pc, #16]	@ (8007330 <HAL_PWR_EnterSTOPMode+0x60>)
 800731e:	f023 0304 	bic.w	r3, r3, #4
 8007322:	6113      	str	r3, [r2, #16]
}
 8007324:	bf00      	nop
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	40007000 	.word	0x40007000
 8007330:	e000ed00 	.word	0xe000ed00

08007334 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8007338:	4b06      	ldr	r3, [pc, #24]	@ (8007354 <HAL_PWR_PVD_IRQHandler+0x20>)
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8007344:	f000 f808 	bl	8007358 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8007348:	4b02      	ldr	r3, [pc, #8]	@ (8007354 <HAL_PWR_PVD_IRQHandler+0x20>)
 800734a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800734e:	615a      	str	r2, [r3, #20]
  }
}
 8007350:	bf00      	nop
 8007352:	bd80      	pop	{r7, pc}
 8007354:	40010400 	.word	0x40010400

08007358 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800735c:	bf00      	nop
 800735e:	46bd      	mov	sp, r7
 8007360:	bc80      	pop	{r7}
 8007362:	4770      	bx	lr

08007364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e272      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 8087 	beq.w	8007492 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007384:	4b92      	ldr	r3, [pc, #584]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f003 030c 	and.w	r3, r3, #12
 800738c:	2b04      	cmp	r3, #4
 800738e:	d00c      	beq.n	80073aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007390:	4b8f      	ldr	r3, [pc, #572]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f003 030c 	and.w	r3, r3, #12
 8007398:	2b08      	cmp	r3, #8
 800739a:	d112      	bne.n	80073c2 <HAL_RCC_OscConfig+0x5e>
 800739c:	4b8c      	ldr	r3, [pc, #560]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a8:	d10b      	bne.n	80073c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073aa:	4b89      	ldr	r3, [pc, #548]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d06c      	beq.n	8007490 <HAL_RCC_OscConfig+0x12c>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d168      	bne.n	8007490 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e24c      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073ca:	d106      	bne.n	80073da <HAL_RCC_OscConfig+0x76>
 80073cc:	4b80      	ldr	r3, [pc, #512]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a7f      	ldr	r2, [pc, #508]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 80073d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	e02e      	b.n	8007438 <HAL_RCC_OscConfig+0xd4>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10c      	bne.n	80073fc <HAL_RCC_OscConfig+0x98>
 80073e2:	4b7b      	ldr	r3, [pc, #492]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a7a      	ldr	r2, [pc, #488]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 80073e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	4b78      	ldr	r3, [pc, #480]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a77      	ldr	r2, [pc, #476]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 80073f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	e01d      	b.n	8007438 <HAL_RCC_OscConfig+0xd4>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007404:	d10c      	bne.n	8007420 <HAL_RCC_OscConfig+0xbc>
 8007406:	4b72      	ldr	r3, [pc, #456]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a71      	ldr	r2, [pc, #452]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 800740c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	4b6f      	ldr	r3, [pc, #444]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a6e      	ldr	r2, [pc, #440]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 8007418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800741c:	6013      	str	r3, [r2, #0]
 800741e:	e00b      	b.n	8007438 <HAL_RCC_OscConfig+0xd4>
 8007420:	4b6b      	ldr	r3, [pc, #428]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a6a      	ldr	r2, [pc, #424]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 8007426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	4b68      	ldr	r3, [pc, #416]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a67      	ldr	r2, [pc, #412]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 8007432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007436:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d013      	beq.n	8007468 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007440:	f7fc fcf6 	bl	8003e30 <HAL_GetTick>
 8007444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007446:	e008      	b.n	800745a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007448:	f7fc fcf2 	bl	8003e30 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b64      	cmp	r3, #100	@ 0x64
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e200      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800745a:	4b5d      	ldr	r3, [pc, #372]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0f0      	beq.n	8007448 <HAL_RCC_OscConfig+0xe4>
 8007466:	e014      	b.n	8007492 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007468:	f7fc fce2 	bl	8003e30 <HAL_GetTick>
 800746c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800746e:	e008      	b.n	8007482 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007470:	f7fc fcde 	bl	8003e30 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	2b64      	cmp	r3, #100	@ 0x64
 800747c:	d901      	bls.n	8007482 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e1ec      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007482:	4b53      	ldr	r3, [pc, #332]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1f0      	bne.n	8007470 <HAL_RCC_OscConfig+0x10c>
 800748e:	e000      	b.n	8007492 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d063      	beq.n	8007566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800749e:	4b4c      	ldr	r3, [pc, #304]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f003 030c 	and.w	r3, r3, #12
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00b      	beq.n	80074c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80074aa:	4b49      	ldr	r3, [pc, #292]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f003 030c 	and.w	r3, r3, #12
 80074b2:	2b08      	cmp	r3, #8
 80074b4:	d11c      	bne.n	80074f0 <HAL_RCC_OscConfig+0x18c>
 80074b6:	4b46      	ldr	r3, [pc, #280]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d116      	bne.n	80074f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074c2:	4b43      	ldr	r3, [pc, #268]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d005      	beq.n	80074da <HAL_RCC_OscConfig+0x176>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d001      	beq.n	80074da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e1c0      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074da:	4b3d      	ldr	r3, [pc, #244]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	4939      	ldr	r1, [pc, #228]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074ee:	e03a      	b.n	8007566 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d020      	beq.n	800753a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074f8:	4b36      	ldr	r3, [pc, #216]	@ (80075d4 <HAL_RCC_OscConfig+0x270>)
 80074fa:	2201      	movs	r2, #1
 80074fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074fe:	f7fc fc97 	bl	8003e30 <HAL_GetTick>
 8007502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007504:	e008      	b.n	8007518 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007506:	f7fc fc93 	bl	8003e30 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	2b02      	cmp	r3, #2
 8007512:	d901      	bls.n	8007518 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e1a1      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007518:	4b2d      	ldr	r3, [pc, #180]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0f0      	beq.n	8007506 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007524:	4b2a      	ldr	r3, [pc, #168]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	4927      	ldr	r1, [pc, #156]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 8007534:	4313      	orrs	r3, r2
 8007536:	600b      	str	r3, [r1, #0]
 8007538:	e015      	b.n	8007566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800753a:	4b26      	ldr	r3, [pc, #152]	@ (80075d4 <HAL_RCC_OscConfig+0x270>)
 800753c:	2200      	movs	r2, #0
 800753e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007540:	f7fc fc76 	bl	8003e30 <HAL_GetTick>
 8007544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007546:	e008      	b.n	800755a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007548:	f7fc fc72 	bl	8003e30 <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	2b02      	cmp	r3, #2
 8007554:	d901      	bls.n	800755a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e180      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800755a:	4b1d      	ldr	r3, [pc, #116]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1f0      	bne.n	8007548 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d03a      	beq.n	80075e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d019      	beq.n	80075ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800757a:	4b17      	ldr	r3, [pc, #92]	@ (80075d8 <HAL_RCC_OscConfig+0x274>)
 800757c:	2201      	movs	r2, #1
 800757e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007580:	f7fc fc56 	bl	8003e30 <HAL_GetTick>
 8007584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007586:	e008      	b.n	800759a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007588:	f7fc fc52 	bl	8003e30 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b02      	cmp	r3, #2
 8007594:	d901      	bls.n	800759a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e160      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800759a:	4b0d      	ldr	r3, [pc, #52]	@ (80075d0 <HAL_RCC_OscConfig+0x26c>)
 800759c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0f0      	beq.n	8007588 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80075a6:	2001      	movs	r0, #1
 80075a8:	f000 fad0 	bl	8007b4c <RCC_Delay>
 80075ac:	e01c      	b.n	80075e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075ae:	4b0a      	ldr	r3, [pc, #40]	@ (80075d8 <HAL_RCC_OscConfig+0x274>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075b4:	f7fc fc3c 	bl	8003e30 <HAL_GetTick>
 80075b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075ba:	e00f      	b.n	80075dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075bc:	f7fc fc38 	bl	8003e30 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d908      	bls.n	80075dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e146      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>
 80075ce:	bf00      	nop
 80075d0:	40021000 	.word	0x40021000
 80075d4:	42420000 	.word	0x42420000
 80075d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075dc:	4b92      	ldr	r3, [pc, #584]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 80075de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e9      	bne.n	80075bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 80a6 	beq.w	8007742 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075f6:	2300      	movs	r3, #0
 80075f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075fa:	4b8b      	ldr	r3, [pc, #556]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10d      	bne.n	8007622 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007606:	4b88      	ldr	r3, [pc, #544]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	4a87      	ldr	r2, [pc, #540]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 800760c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007610:	61d3      	str	r3, [r2, #28]
 8007612:	4b85      	ldr	r3, [pc, #532]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800761a:	60bb      	str	r3, [r7, #8]
 800761c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800761e:	2301      	movs	r3, #1
 8007620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007622:	4b82      	ldr	r3, [pc, #520]	@ (800782c <HAL_RCC_OscConfig+0x4c8>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762a:	2b00      	cmp	r3, #0
 800762c:	d118      	bne.n	8007660 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800762e:	4b7f      	ldr	r3, [pc, #508]	@ (800782c <HAL_RCC_OscConfig+0x4c8>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a7e      	ldr	r2, [pc, #504]	@ (800782c <HAL_RCC_OscConfig+0x4c8>)
 8007634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800763a:	f7fc fbf9 	bl	8003e30 <HAL_GetTick>
 800763e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007640:	e008      	b.n	8007654 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007642:	f7fc fbf5 	bl	8003e30 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b64      	cmp	r3, #100	@ 0x64
 800764e:	d901      	bls.n	8007654 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e103      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007654:	4b75      	ldr	r3, [pc, #468]	@ (800782c <HAL_RCC_OscConfig+0x4c8>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800765c:	2b00      	cmp	r3, #0
 800765e:	d0f0      	beq.n	8007642 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d106      	bne.n	8007676 <HAL_RCC_OscConfig+0x312>
 8007668:	4b6f      	ldr	r3, [pc, #444]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	4a6e      	ldr	r2, [pc, #440]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 800766e:	f043 0301 	orr.w	r3, r3, #1
 8007672:	6213      	str	r3, [r2, #32]
 8007674:	e02d      	b.n	80076d2 <HAL_RCC_OscConfig+0x36e>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10c      	bne.n	8007698 <HAL_RCC_OscConfig+0x334>
 800767e:	4b6a      	ldr	r3, [pc, #424]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	4a69      	ldr	r2, [pc, #420]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 8007684:	f023 0301 	bic.w	r3, r3, #1
 8007688:	6213      	str	r3, [r2, #32]
 800768a:	4b67      	ldr	r3, [pc, #412]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	4a66      	ldr	r2, [pc, #408]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 8007690:	f023 0304 	bic.w	r3, r3, #4
 8007694:	6213      	str	r3, [r2, #32]
 8007696:	e01c      	b.n	80076d2 <HAL_RCC_OscConfig+0x36e>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	2b05      	cmp	r3, #5
 800769e:	d10c      	bne.n	80076ba <HAL_RCC_OscConfig+0x356>
 80076a0:	4b61      	ldr	r3, [pc, #388]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	4a60      	ldr	r2, [pc, #384]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 80076a6:	f043 0304 	orr.w	r3, r3, #4
 80076aa:	6213      	str	r3, [r2, #32]
 80076ac:	4b5e      	ldr	r3, [pc, #376]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	4a5d      	ldr	r2, [pc, #372]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 80076b2:	f043 0301 	orr.w	r3, r3, #1
 80076b6:	6213      	str	r3, [r2, #32]
 80076b8:	e00b      	b.n	80076d2 <HAL_RCC_OscConfig+0x36e>
 80076ba:	4b5b      	ldr	r3, [pc, #364]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	4a5a      	ldr	r2, [pc, #360]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 80076c0:	f023 0301 	bic.w	r3, r3, #1
 80076c4:	6213      	str	r3, [r2, #32]
 80076c6:	4b58      	ldr	r3, [pc, #352]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	4a57      	ldr	r2, [pc, #348]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 80076cc:	f023 0304 	bic.w	r3, r3, #4
 80076d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d015      	beq.n	8007706 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076da:	f7fc fba9 	bl	8003e30 <HAL_GetTick>
 80076de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076e0:	e00a      	b.n	80076f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076e2:	f7fc fba5 	bl	8003e30 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d901      	bls.n	80076f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e0b1      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076f8:	4b4b      	ldr	r3, [pc, #300]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 80076fa:	6a1b      	ldr	r3, [r3, #32]
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0ee      	beq.n	80076e2 <HAL_RCC_OscConfig+0x37e>
 8007704:	e014      	b.n	8007730 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007706:	f7fc fb93 	bl	8003e30 <HAL_GetTick>
 800770a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800770c:	e00a      	b.n	8007724 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800770e:	f7fc fb8f 	bl	8003e30 <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800771c:	4293      	cmp	r3, r2
 800771e:	d901      	bls.n	8007724 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e09b      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007724:	4b40      	ldr	r3, [pc, #256]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 8007726:	6a1b      	ldr	r3, [r3, #32]
 8007728:	f003 0302 	and.w	r3, r3, #2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1ee      	bne.n	800770e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d105      	bne.n	8007742 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007736:	4b3c      	ldr	r3, [pc, #240]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	4a3b      	ldr	r2, [pc, #236]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 800773c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007740:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 8087 	beq.w	800785a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800774c:	4b36      	ldr	r3, [pc, #216]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f003 030c 	and.w	r3, r3, #12
 8007754:	2b08      	cmp	r3, #8
 8007756:	d061      	beq.n	800781c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d146      	bne.n	80077ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007760:	4b33      	ldr	r3, [pc, #204]	@ (8007830 <HAL_RCC_OscConfig+0x4cc>)
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007766:	f7fc fb63 	bl	8003e30 <HAL_GetTick>
 800776a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800776c:	e008      	b.n	8007780 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800776e:	f7fc fb5f 	bl	8003e30 <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	2b02      	cmp	r3, #2
 800777a:	d901      	bls.n	8007780 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e06d      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007780:	4b29      	ldr	r3, [pc, #164]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1f0      	bne.n	800776e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007794:	d108      	bne.n	80077a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007796:	4b24      	ldr	r3, [pc, #144]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	4921      	ldr	r1, [pc, #132]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077a8:	4b1f      	ldr	r3, [pc, #124]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a19      	ldr	r1, [r3, #32]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b8:	430b      	orrs	r3, r1
 80077ba:	491b      	ldr	r1, [pc, #108]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007830 <HAL_RCC_OscConfig+0x4cc>)
 80077c2:	2201      	movs	r2, #1
 80077c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077c6:	f7fc fb33 	bl	8003e30 <HAL_GetTick>
 80077ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80077cc:	e008      	b.n	80077e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077ce:	f7fc fb2f 	bl	8003e30 <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d901      	bls.n	80077e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e03d      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80077e0:	4b11      	ldr	r3, [pc, #68]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d0f0      	beq.n	80077ce <HAL_RCC_OscConfig+0x46a>
 80077ec:	e035      	b.n	800785a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077ee:	4b10      	ldr	r3, [pc, #64]	@ (8007830 <HAL_RCC_OscConfig+0x4cc>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077f4:	f7fc fb1c 	bl	8003e30 <HAL_GetTick>
 80077f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80077fa:	e008      	b.n	800780e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077fc:	f7fc fb18 	bl	8003e30 <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	2b02      	cmp	r3, #2
 8007808:	d901      	bls.n	800780e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e026      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800780e:	4b06      	ldr	r3, [pc, #24]	@ (8007828 <HAL_RCC_OscConfig+0x4c4>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1f0      	bne.n	80077fc <HAL_RCC_OscConfig+0x498>
 800781a:	e01e      	b.n	800785a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d107      	bne.n	8007834 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e019      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>
 8007828:	40021000 	.word	0x40021000
 800782c:	40007000 	.word	0x40007000
 8007830:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007834:	4b0b      	ldr	r3, [pc, #44]	@ (8007864 <HAL_RCC_OscConfig+0x500>)
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a1b      	ldr	r3, [r3, #32]
 8007844:	429a      	cmp	r2, r3
 8007846:	d106      	bne.n	8007856 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007852:	429a      	cmp	r2, r3
 8007854:	d001      	beq.n	800785a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e000      	b.n	800785c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	40021000 	.word	0x40021000

08007868 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e0d0      	b.n	8007a1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800787c:	4b6a      	ldr	r3, [pc, #424]	@ (8007a28 <HAL_RCC_ClockConfig+0x1c0>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0307 	and.w	r3, r3, #7
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	429a      	cmp	r2, r3
 8007888:	d910      	bls.n	80078ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800788a:	4b67      	ldr	r3, [pc, #412]	@ (8007a28 <HAL_RCC_ClockConfig+0x1c0>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f023 0207 	bic.w	r2, r3, #7
 8007892:	4965      	ldr	r1, [pc, #404]	@ (8007a28 <HAL_RCC_ClockConfig+0x1c0>)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	4313      	orrs	r3, r2
 8007898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800789a:	4b63      	ldr	r3, [pc, #396]	@ (8007a28 <HAL_RCC_ClockConfig+0x1c0>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0307 	and.w	r3, r3, #7
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d001      	beq.n	80078ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e0b8      	b.n	8007a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d020      	beq.n	80078fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078c4:	4b59      	ldr	r3, [pc, #356]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	4a58      	ldr	r2, [pc, #352]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 80078ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80078ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0308 	and.w	r3, r3, #8
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078dc:	4b53      	ldr	r3, [pc, #332]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	4a52      	ldr	r2, [pc, #328]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 80078e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80078e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078e8:	4b50      	ldr	r3, [pc, #320]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	494d      	ldr	r1, [pc, #308]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d040      	beq.n	8007988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d107      	bne.n	800791e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800790e:	4b47      	ldr	r3, [pc, #284]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d115      	bne.n	8007946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e07f      	b.n	8007a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	2b02      	cmp	r3, #2
 8007924:	d107      	bne.n	8007936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007926:	4b41      	ldr	r3, [pc, #260]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d109      	bne.n	8007946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e073      	b.n	8007a1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007936:	4b3d      	ldr	r3, [pc, #244]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e06b      	b.n	8007a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007946:	4b39      	ldr	r3, [pc, #228]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f023 0203 	bic.w	r2, r3, #3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	4936      	ldr	r1, [pc, #216]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 8007954:	4313      	orrs	r3, r2
 8007956:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007958:	f7fc fa6a 	bl	8003e30 <HAL_GetTick>
 800795c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800795e:	e00a      	b.n	8007976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007960:	f7fc fa66 	bl	8003e30 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800796e:	4293      	cmp	r3, r2
 8007970:	d901      	bls.n	8007976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e053      	b.n	8007a1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007976:	4b2d      	ldr	r3, [pc, #180]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f003 020c 	and.w	r2, r3, #12
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	429a      	cmp	r2, r3
 8007986:	d1eb      	bne.n	8007960 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007988:	4b27      	ldr	r3, [pc, #156]	@ (8007a28 <HAL_RCC_ClockConfig+0x1c0>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d210      	bcs.n	80079b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007996:	4b24      	ldr	r3, [pc, #144]	@ (8007a28 <HAL_RCC_ClockConfig+0x1c0>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f023 0207 	bic.w	r2, r3, #7
 800799e:	4922      	ldr	r1, [pc, #136]	@ (8007a28 <HAL_RCC_ClockConfig+0x1c0>)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079a6:	4b20      	ldr	r3, [pc, #128]	@ (8007a28 <HAL_RCC_ClockConfig+0x1c0>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d001      	beq.n	80079b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e032      	b.n	8007a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d008      	beq.n	80079d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079c4:	4b19      	ldr	r3, [pc, #100]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	4916      	ldr	r1, [pc, #88]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0308 	and.w	r3, r3, #8
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d009      	beq.n	80079f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80079e2:	4b12      	ldr	r3, [pc, #72]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	490e      	ldr	r1, [pc, #56]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80079f6:	f000 f821 	bl	8007a3c <HAL_RCC_GetSysClockFreq>
 80079fa:	4602      	mov	r2, r0
 80079fc:	4b0b      	ldr	r3, [pc, #44]	@ (8007a2c <HAL_RCC_ClockConfig+0x1c4>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	091b      	lsrs	r3, r3, #4
 8007a02:	f003 030f 	and.w	r3, r3, #15
 8007a06:	490a      	ldr	r1, [pc, #40]	@ (8007a30 <HAL_RCC_ClockConfig+0x1c8>)
 8007a08:	5ccb      	ldrb	r3, [r1, r3]
 8007a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a0e:	4a09      	ldr	r2, [pc, #36]	@ (8007a34 <HAL_RCC_ClockConfig+0x1cc>)
 8007a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007a12:	4b09      	ldr	r3, [pc, #36]	@ (8007a38 <HAL_RCC_ClockConfig+0x1d0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fc f9c8 	bl	8003dac <HAL_InitTick>

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	40022000 	.word	0x40022000
 8007a2c:	40021000 	.word	0x40021000
 8007a30:	08012cbc 	.word	0x08012cbc
 8007a34:	20000000 	.word	0x20000000
 8007a38:	20000004 	.word	0x20000004

08007a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	2300      	movs	r3, #0
 8007a48:	60bb      	str	r3, [r7, #8]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	617b      	str	r3, [r7, #20]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007a56:	4b1e      	ldr	r3, [pc, #120]	@ (8007ad0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f003 030c 	and.w	r3, r3, #12
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d002      	beq.n	8007a6c <HAL_RCC_GetSysClockFreq+0x30>
 8007a66:	2b08      	cmp	r3, #8
 8007a68:	d003      	beq.n	8007a72 <HAL_RCC_GetSysClockFreq+0x36>
 8007a6a:	e027      	b.n	8007abc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007a6c:	4b19      	ldr	r3, [pc, #100]	@ (8007ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8007a6e:	613b      	str	r3, [r7, #16]
      break;
 8007a70:	e027      	b.n	8007ac2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	0c9b      	lsrs	r3, r3, #18
 8007a76:	f003 030f 	and.w	r3, r3, #15
 8007a7a:	4a17      	ldr	r2, [pc, #92]	@ (8007ad8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007a7c:	5cd3      	ldrb	r3, [r2, r3]
 8007a7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d010      	beq.n	8007aac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007a8a:	4b11      	ldr	r3, [pc, #68]	@ (8007ad0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	0c5b      	lsrs	r3, r3, #17
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	4a11      	ldr	r2, [pc, #68]	@ (8007adc <HAL_RCC_GetSysClockFreq+0xa0>)
 8007a96:	5cd3      	ldrb	r3, [r2, r3]
 8007a98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8007ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8007a9e:	fb03 f202 	mul.w	r2, r3, r2
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa8:	617b      	str	r3, [r7, #20]
 8007aaa:	e004      	b.n	8007ab6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a0c      	ldr	r2, [pc, #48]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007ab0:	fb02 f303 	mul.w	r3, r2, r3
 8007ab4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	613b      	str	r3, [r7, #16]
      break;
 8007aba:	e002      	b.n	8007ac2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007abc:	4b09      	ldr	r3, [pc, #36]	@ (8007ae4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8007abe:	613b      	str	r3, [r7, #16]
      break;
 8007ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ac2:	693b      	ldr	r3, [r7, #16]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	371c      	adds	r7, #28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bc80      	pop	{r7}
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	40021000 	.word	0x40021000
 8007ad4:	00f42400 	.word	0x00f42400
 8007ad8:	08012cd4 	.word	0x08012cd4
 8007adc:	08012ce4 	.word	0x08012ce4
 8007ae0:	003d0900 	.word	0x003d0900
 8007ae4:	007a1200 	.word	0x007a1200

08007ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007aec:	4b02      	ldr	r3, [pc, #8]	@ (8007af8 <HAL_RCC_GetHCLKFreq+0x10>)
 8007aee:	681b      	ldr	r3, [r3, #0]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bc80      	pop	{r7}
 8007af6:	4770      	bx	lr
 8007af8:	20000000 	.word	0x20000000

08007afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b00:	f7ff fff2 	bl	8007ae8 <HAL_RCC_GetHCLKFreq>
 8007b04:	4602      	mov	r2, r0
 8007b06:	4b05      	ldr	r3, [pc, #20]	@ (8007b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	0a1b      	lsrs	r3, r3, #8
 8007b0c:	f003 0307 	and.w	r3, r3, #7
 8007b10:	4903      	ldr	r1, [pc, #12]	@ (8007b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b12:	5ccb      	ldrb	r3, [r1, r3]
 8007b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	40021000 	.word	0x40021000
 8007b20:	08012ccc 	.word	0x08012ccc

08007b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b28:	f7ff ffde 	bl	8007ae8 <HAL_RCC_GetHCLKFreq>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	4b05      	ldr	r3, [pc, #20]	@ (8007b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	0adb      	lsrs	r3, r3, #11
 8007b34:	f003 0307 	and.w	r3, r3, #7
 8007b38:	4903      	ldr	r1, [pc, #12]	@ (8007b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b3a:	5ccb      	ldrb	r3, [r1, r3]
 8007b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	40021000 	.word	0x40021000
 8007b48:	08012ccc 	.word	0x08012ccc

08007b4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007b54:	4b0a      	ldr	r3, [pc, #40]	@ (8007b80 <RCC_Delay+0x34>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a0a      	ldr	r2, [pc, #40]	@ (8007b84 <RCC_Delay+0x38>)
 8007b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b5e:	0a5b      	lsrs	r3, r3, #9
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	fb02 f303 	mul.w	r3, r2, r3
 8007b66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007b68:	bf00      	nop
  }
  while (Delay --);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	1e5a      	subs	r2, r3, #1
 8007b6e:	60fa      	str	r2, [r7, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1f9      	bne.n	8007b68 <RCC_Delay+0x1c>
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bc80      	pop	{r7}
 8007b7e:	4770      	bx	lr
 8007b80:	20000000 	.word	0x20000000
 8007b84:	10624dd3 	.word	0x10624dd3

08007b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	613b      	str	r3, [r7, #16]
 8007b94:	2300      	movs	r3, #0
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d07d      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ba8:	4b4f      	ldr	r3, [pc, #316]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10d      	bne.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bb4:	4b4c      	ldr	r3, [pc, #304]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bbe:	61d3      	str	r3, [r2, #28]
 8007bc0:	4b49      	ldr	r3, [pc, #292]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bc8:	60bb      	str	r3, [r7, #8]
 8007bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bd0:	4b46      	ldr	r3, [pc, #280]	@ (8007cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d118      	bne.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bdc:	4b43      	ldr	r3, [pc, #268]	@ (8007cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a42      	ldr	r2, [pc, #264]	@ (8007cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007be8:	f7fc f922 	bl	8003e30 <HAL_GetTick>
 8007bec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bee:	e008      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bf0:	f7fc f91e 	bl	8003e30 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	2b64      	cmp	r3, #100	@ 0x64
 8007bfc:	d901      	bls.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e06d      	b.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c02:	4b3a      	ldr	r3, [pc, #232]	@ (8007cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0f0      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c0e:	4b36      	ldr	r3, [pc, #216]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d02e      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d027      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c36:	4b2e      	ldr	r3, [pc, #184]	@ (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007c38:	2201      	movs	r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c3c:	4b2c      	ldr	r3, [pc, #176]	@ (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007c42:	4a29      	ldr	r2, [pc, #164]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d014      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c52:	f7fc f8ed 	bl	8003e30 <HAL_GetTick>
 8007c56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c58:	e00a      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c5a:	f7fc f8e9 	bl	8003e30 <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d901      	bls.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e036      	b.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c70:	4b1d      	ldr	r3, [pc, #116]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0ee      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	4917      	ldr	r1, [pc, #92]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d105      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c94:	4b14      	ldr	r3, [pc, #80]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	4a13      	ldr	r2, [pc, #76]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0302 	and.w	r3, r3, #2
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d008      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007cac:	4b0e      	ldr	r3, [pc, #56]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	490b      	ldr	r1, [pc, #44]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0310 	and.w	r3, r3, #16
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d008      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cca:	4b07      	ldr	r3, [pc, #28]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	4904      	ldr	r1, [pc, #16]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	40021000 	.word	0x40021000
 8007cec:	40007000 	.word	0x40007000
 8007cf0:	42420440 	.word	0x42420440

08007cf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b088      	sub	sp, #32
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]
 8007d00:	2300      	movs	r3, #0
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	2300      	movs	r3, #0
 8007d06:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b10      	cmp	r3, #16
 8007d14:	d00a      	beq.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b10      	cmp	r3, #16
 8007d1a:	f200 8089 	bhi.w	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d045      	beq.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d074      	beq.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007d2a:	e081      	b.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 8007d2c:	4b45      	ldr	r3, [pc, #276]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007d32:	4b44      	ldr	r3, [pc, #272]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d07a      	beq.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	0c9b      	lsrs	r3, r3, #18
 8007d42:	f003 030f 	and.w	r3, r3, #15
 8007d46:	4a40      	ldr	r2, [pc, #256]	@ (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007d48:	5cd3      	ldrb	r3, [r2, r3]
 8007d4a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d015      	beq.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007d56:	4b3b      	ldr	r3, [pc, #236]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	0c5b      	lsrs	r3, r3, #17
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	4a3a      	ldr	r2, [pc, #232]	@ (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8007d62:	5cd3      	ldrb	r3, [r2, r3]
 8007d64:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00d      	beq.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007d70:	4a37      	ldr	r2, [pc, #220]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	fb02 f303 	mul.w	r3, r2, r3
 8007d7e:	61fb      	str	r3, [r7, #28]
 8007d80:	e004      	b.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	4a33      	ldr	r2, [pc, #204]	@ (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8007d86:	fb02 f303 	mul.w	r3, r2, r3
 8007d8a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d98:	d102      	bne.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	61bb      	str	r3, [r7, #24]
      break;
 8007d9e:	e049      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	005b      	lsls	r3, r3, #1
 8007da4:	4a2c      	ldr	r2, [pc, #176]	@ (8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8007da6:	fba2 2303 	umull	r2, r3, r2, r3
 8007daa:	085b      	lsrs	r3, r3, #1
 8007dac:	61bb      	str	r3, [r7, #24]
      break;
 8007dae:	e041      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 8007db0:	4b24      	ldr	r3, [pc, #144]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dc0:	d108      	bne.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8007dcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dd0:	61bb      	str	r3, [r7, #24]
 8007dd2:	e01e      	b.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dde:	d109      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007de0:	4b18      	ldr	r3, [pc, #96]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8007dec:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8007df0:	61bb      	str	r3, [r7, #24]
 8007df2:	e00e      	b.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dfe:	d11b      	bne.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8007e00:	4b10      	ldr	r3, [pc, #64]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d015      	beq.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 8007e0c:	4b13      	ldr	r3, [pc, #76]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007e0e:	61bb      	str	r3, [r7, #24]
      break;
 8007e10:	e012      	b.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8007e12:	e011      	b.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007e14:	f7ff fe86 	bl	8007b24 <HAL_RCC_GetPCLK2Freq>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	0b9b      	lsrs	r3, r3, #14
 8007e20:	f003 0303 	and.w	r3, r3, #3
 8007e24:	3301      	adds	r3, #1
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2c:	61bb      	str	r3, [r7, #24]
      break;
 8007e2e:	e004      	b.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8007e30:	bf00      	nop
 8007e32:	e002      	b.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8007e34:	bf00      	nop
 8007e36:	e000      	b.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8007e38:	bf00      	nop
    }
  }
  return (frequency);
 8007e3a:	69bb      	ldr	r3, [r7, #24]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3720      	adds	r7, #32
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	40021000 	.word	0x40021000
 8007e48:	08012ce8 	.word	0x08012ce8
 8007e4c:	08012cf8 	.word	0x08012cf8
 8007e50:	00f42400 	.word	0x00f42400
 8007e54:	003d0900 	.word	0x003d0900
 8007e58:	aaaaaaab 	.word	0xaaaaaaab
 8007e5c:	0001e848 	.word	0x0001e848

08007e60 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e07a      	b.n	8007f6c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	7c5b      	ldrb	r3, [r3, #17]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d105      	bne.n	8007e8c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7fb fcb2 	bl	80037f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2202      	movs	r2, #2
 8007e90:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fbd5 	bl	8008642 <HAL_RTC_WaitForSynchro>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d004      	beq.n	8007ea8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2204      	movs	r2, #4
 8007ea2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e061      	b.n	8007f6c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fc8e 	bl	80087ca <RTC_EnterInitMode>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d004      	beq.n	8007ebe <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2204      	movs	r2, #4
 8007eb8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e056      	b.n	8007f6c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0207 	bic.w	r2, r2, #7
 8007ecc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d005      	beq.n	8007ee2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8007ed6:	4b27      	ldr	r3, [pc, #156]	@ (8007f74 <HAL_RTC_Init+0x114>)
 8007ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eda:	4a26      	ldr	r2, [pc, #152]	@ (8007f74 <HAL_RTC_Init+0x114>)
 8007edc:	f023 0301 	bic.w	r3, r3, #1
 8007ee0:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007ee2:	4b24      	ldr	r3, [pc, #144]	@ (8007f74 <HAL_RTC_Init+0x114>)
 8007ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee6:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	4921      	ldr	r1, [pc, #132]	@ (8007f74 <HAL_RTC_Init+0x114>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efc:	d003      	beq.n	8007f06 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	e00e      	b.n	8007f24 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007f06:	2001      	movs	r0, #1
 8007f08:	f7ff fef4 	bl	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f0c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d104      	bne.n	8007f1e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2204      	movs	r2, #4
 8007f18:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e026      	b.n	8007f6c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	0c1a      	lsrs	r2, r3, #16
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f002 020f 	and.w	r2, r2, #15
 8007f30:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	b292      	uxth	r2, r2
 8007f3a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fc6c 	bl	800881a <RTC_ExitInitMode>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d004      	beq.n	8007f52 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2204      	movs	r2, #4
 8007f4c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e00c      	b.n	8007f6c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
  }
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	40006c00 	.word	0x40006c00

08007f78 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007f78:	b590      	push	{r4, r7, lr}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	617b      	str	r3, [r7, #20]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <HAL_RTC_SetTime+0x20>
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d101      	bne.n	8007f9c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e080      	b.n	800809e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	7c1b      	ldrb	r3, [r3, #16]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d101      	bne.n	8007fa8 <HAL_RTC_SetTime+0x30>
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e07a      	b.n	800809e <HAL_RTC_SetTime+0x126>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2201      	movs	r2, #1
 8007fac:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d113      	bne.n	8007fe2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007fc4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	785b      	ldrb	r3, [r3, #1]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	460b      	mov	r3, r1
 8007fd0:	011b      	lsls	r3, r3, #4
 8007fd2:	1a5b      	subs	r3, r3, r1
 8007fd4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007fd6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007fdc:	4413      	add	r3, r2
 8007fde:	617b      	str	r3, [r7, #20]
 8007fe0:	e01e      	b.n	8008020 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 fc5c 	bl	80088a4 <RTC_Bcd2ToByte>
 8007fec:	4603      	mov	r3, r0
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007ff4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	785b      	ldrb	r3, [r3, #1]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fc51 	bl	80088a4 <RTC_Bcd2ToByte>
 8008002:	4603      	mov	r3, r0
 8008004:	461a      	mov	r2, r3
 8008006:	4613      	mov	r3, r2
 8008008:	011b      	lsls	r3, r3, #4
 800800a:	1a9b      	subs	r3, r3, r2
 800800c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800800e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	789b      	ldrb	r3, [r3, #2]
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fc45 	bl	80088a4 <RTC_Bcd2ToByte>
 800801a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800801c:	4423      	add	r3, r4
 800801e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008020:	6979      	ldr	r1, [r7, #20]
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 fb6a 	bl	80086fc <RTC_WriteTimeCounter>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d007      	beq.n	800803e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2204      	movs	r2, #4
 8008032:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e02f      	b.n	800809e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0205 	bic.w	r2, r2, #5
 800804c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f000 fb7b 	bl	800874a <RTC_ReadAlarmCounter>
 8008054:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805c:	d018      	beq.n	8008090 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	429a      	cmp	r2, r3
 8008064:	d214      	bcs.n	8008090 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800806c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8008070:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008072:	6939      	ldr	r1, [r7, #16]
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 fb81 	bl	800877c <RTC_WriteAlarmCounter>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d007      	beq.n	8008090 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2204      	movs	r2, #4
 8008084:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e006      	b.n	800809e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2201      	movs	r2, #1
 8008094:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800809c:	2300      	movs	r3, #0
  }
}
 800809e:	4618      	mov	r0, r3
 80080a0:	371c      	adds	r7, #28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd90      	pop	{r4, r7, pc}
	...

080080a8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b088      	sub	sp, #32
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	61bb      	str	r3, [r7, #24]
 80080b8:	2300      	movs	r3, #0
 80080ba:	61fb      	str	r3, [r7, #28]
 80080bc:	2300      	movs	r3, #0
 80080be:	617b      	str	r3, [r7, #20]
 80080c0:	2300      	movs	r3, #0
 80080c2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <HAL_RTC_GetTime+0x28>
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e0b5      	b.n	8008240 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f003 0304 	and.w	r3, r3, #4
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e0ac      	b.n	8008240 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 fad8 	bl	800869c <RTC_ReadTimeCounter>
 80080ec:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	4a55      	ldr	r2, [pc, #340]	@ (8008248 <HAL_RTC_GetTime+0x1a0>)
 80080f2:	fba2 2303 	umull	r2, r3, r2, r3
 80080f6:	0adb      	lsrs	r3, r3, #11
 80080f8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	4b52      	ldr	r3, [pc, #328]	@ (8008248 <HAL_RTC_GetTime+0x1a0>)
 80080fe:	fba3 1302 	umull	r1, r3, r3, r2
 8008102:	0adb      	lsrs	r3, r3, #11
 8008104:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008108:	fb01 f303 	mul.w	r3, r1, r3
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	4a4f      	ldr	r2, [pc, #316]	@ (800824c <HAL_RTC_GetTime+0x1a4>)
 8008110:	fba2 2303 	umull	r2, r3, r2, r3
 8008114:	095b      	lsrs	r3, r3, #5
 8008116:	b2da      	uxtb	r2, r3
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	4a4a      	ldr	r2, [pc, #296]	@ (8008248 <HAL_RTC_GetTime+0x1a0>)
 8008120:	fba2 1203 	umull	r1, r2, r2, r3
 8008124:	0ad2      	lsrs	r2, r2, #11
 8008126:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800812a:	fb01 f202 	mul.w	r2, r1, r2
 800812e:	1a9a      	subs	r2, r3, r2
 8008130:	4b46      	ldr	r3, [pc, #280]	@ (800824c <HAL_RTC_GetTime+0x1a4>)
 8008132:	fba3 1302 	umull	r1, r3, r3, r2
 8008136:	0959      	lsrs	r1, r3, #5
 8008138:	460b      	mov	r3, r1
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	1a5b      	subs	r3, r3, r1
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	1ad1      	subs	r1, r2, r3
 8008142:	b2ca      	uxtb	r2, r1
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	2b17      	cmp	r3, #23
 800814c:	d955      	bls.n	80081fa <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	4a3f      	ldr	r2, [pc, #252]	@ (8008250 <HAL_RTC_GetTime+0x1a8>)
 8008152:	fba2 2303 	umull	r2, r3, r2, r3
 8008156:	091b      	lsrs	r3, r3, #4
 8008158:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800815a:	6939      	ldr	r1, [r7, #16]
 800815c:	4b3c      	ldr	r3, [pc, #240]	@ (8008250 <HAL_RTC_GetTime+0x1a8>)
 800815e:	fba3 2301 	umull	r2, r3, r3, r1
 8008162:	091a      	lsrs	r2, r3, #4
 8008164:	4613      	mov	r3, r2
 8008166:	005b      	lsls	r3, r3, #1
 8008168:	4413      	add	r3, r2
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	1aca      	subs	r2, r1, r3
 800816e:	b2d2      	uxtb	r2, r2
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 fae8 	bl	800874a <RTC_ReadAlarmCounter>
 800817a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008182:	d008      	beq.n	8008196 <HAL_RTC_GetTime+0xee>
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	429a      	cmp	r2, r3
 800818a:	d904      	bls.n	8008196 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800818c:	69fa      	ldr	r2, [r7, #28]
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	61fb      	str	r3, [r7, #28]
 8008194:	e002      	b.n	800819c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8008196:	f04f 33ff 	mov.w	r3, #4294967295
 800819a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	4a2d      	ldr	r2, [pc, #180]	@ (8008254 <HAL_RTC_GetTime+0x1ac>)
 80081a0:	fb02 f303 	mul.w	r3, r2, r3
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80081aa:	69b9      	ldr	r1, [r7, #24]
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f000 faa5 	bl	80086fc <RTC_WriteTimeCounter>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e041      	b.n	8008240 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c2:	d00c      	beq.n	80081de <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80081c4:	69fa      	ldr	r2, [r7, #28]
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	4413      	add	r3, r2
 80081ca:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80081cc:	69f9      	ldr	r1, [r7, #28]
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 fad4 	bl	800877c <RTC_WriteAlarmCounter>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e030      	b.n	8008240 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80081de:	69f9      	ldr	r1, [r7, #28]
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 facb 	bl	800877c <RTC_WriteAlarmCounter>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e027      	b.n	8008240 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80081f0:	6979      	ldr	r1, [r7, #20]
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 fb73 	bl	80088de <RTC_DateUpdate>
 80081f8:	e003      	b.n	8008202 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d01a      	beq.n	800823e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	4618      	mov	r0, r3
 800820e:	f000 fb2c 	bl	800886a <RTC_ByteToBcd2>
 8008212:	4603      	mov	r3, r0
 8008214:	461a      	mov	r2, r3
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	785b      	ldrb	r3, [r3, #1]
 800821e:	4618      	mov	r0, r3
 8008220:	f000 fb23 	bl	800886a <RTC_ByteToBcd2>
 8008224:	4603      	mov	r3, r0
 8008226:	461a      	mov	r2, r3
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	789b      	ldrb	r3, [r3, #2]
 8008230:	4618      	mov	r0, r3
 8008232:	f000 fb1a 	bl	800886a <RTC_ByteToBcd2>
 8008236:	4603      	mov	r3, r0
 8008238:	461a      	mov	r2, r3
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3720      	adds	r7, #32
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	91a2b3c5 	.word	0x91a2b3c5
 800824c:	88888889 	.word	0x88888889
 8008250:	aaaaaaab 	.word	0xaaaaaaab
 8008254:	00015180 	.word	0x00015180

08008258 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b088      	sub	sp, #32
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	61fb      	str	r3, [r7, #28]
 8008268:	2300      	movs	r3, #0
 800826a:	61bb      	str	r3, [r7, #24]
 800826c:	2300      	movs	r3, #0
 800826e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <HAL_RTC_SetDate+0x24>
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e097      	b.n	80083b0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	7c1b      	ldrb	r3, [r3, #16]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d101      	bne.n	800828c <HAL_RTC_SetDate+0x34>
 8008288:	2302      	movs	r3, #2
 800828a:	e091      	b.n	80083b0 <HAL_RTC_SetDate+0x158>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2201      	movs	r2, #1
 8008290:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2202      	movs	r2, #2
 8008296:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10c      	bne.n	80082b8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	78da      	ldrb	r2, [r3, #3]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	785a      	ldrb	r2, [r3, #1]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	789a      	ldrb	r2, [r3, #2]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	739a      	strb	r2, [r3, #14]
 80082b6:	e01a      	b.n	80082ee <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	78db      	ldrb	r3, [r3, #3]
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 faf1 	bl	80088a4 <RTC_Bcd2ToByte>
 80082c2:	4603      	mov	r3, r0
 80082c4:	461a      	mov	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	785b      	ldrb	r3, [r3, #1]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 fae8 	bl	80088a4 <RTC_Bcd2ToByte>
 80082d4:	4603      	mov	r3, r0
 80082d6:	461a      	mov	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	789b      	ldrb	r3, [r3, #2]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 fadf 	bl	80088a4 <RTC_Bcd2ToByte>
 80082e6:	4603      	mov	r3, r0
 80082e8:	461a      	mov	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	7bdb      	ldrb	r3, [r3, #15]
 80082f2:	4618      	mov	r0, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	7b59      	ldrb	r1, [r3, #13]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	7b9b      	ldrb	r3, [r3, #14]
 80082fc:	461a      	mov	r2, r3
 80082fe:	f000 fbc9 	bl	8008a94 <RTC_WeekDayNum>
 8008302:	4603      	mov	r3, r0
 8008304:	461a      	mov	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	7b1a      	ldrb	r2, [r3, #12]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 f9c2 	bl	800869c <RTC_ReadTimeCounter>
 8008318:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	4a26      	ldr	r2, [pc, #152]	@ (80083b8 <HAL_RTC_SetDate+0x160>)
 800831e:	fba2 2303 	umull	r2, r3, r2, r3
 8008322:	0adb      	lsrs	r3, r3, #11
 8008324:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2b18      	cmp	r3, #24
 800832a:	d93a      	bls.n	80083a2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	4a23      	ldr	r2, [pc, #140]	@ (80083bc <HAL_RTC_SetDate+0x164>)
 8008330:	fba2 2303 	umull	r2, r3, r2, r3
 8008334:	091b      	lsrs	r3, r3, #4
 8008336:	4a22      	ldr	r2, [pc, #136]	@ (80083c0 <HAL_RTC_SetDate+0x168>)
 8008338:	fb02 f303 	mul.w	r3, r2, r3
 800833c:	69fa      	ldr	r2, [r7, #28]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008342:	69f9      	ldr	r1, [r7, #28]
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f000 f9d9 	bl	80086fc <RTC_WriteTimeCounter>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2204      	movs	r2, #4
 8008354:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e027      	b.n	80083b0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f000 f9f2 	bl	800874a <RTC_ReadAlarmCounter>
 8008366:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836e:	d018      	beq.n	80083a2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	429a      	cmp	r2, r3
 8008376:	d214      	bcs.n	80083a2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800837e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8008382:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008384:	69b9      	ldr	r1, [r7, #24]
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 f9f8 	bl	800877c <RTC_WriteAlarmCounter>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d007      	beq.n	80083a2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2204      	movs	r2, #4
 8008396:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e006      	b.n	80083b0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2201      	movs	r2, #1
 80083a6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3720      	adds	r7, #32
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	91a2b3c5 	.word	0x91a2b3c5
 80083bc:	aaaaaaab 	.word	0xaaaaaaab
 80083c0:	00015180 	.word	0x00015180

080083c4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80083d0:	f107 0314 	add.w	r3, r7, #20
 80083d4:	2100      	movs	r1, #0
 80083d6:	460a      	mov	r2, r1
 80083d8:	801a      	strh	r2, [r3, #0]
 80083da:	460a      	mov	r2, r1
 80083dc:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d002      	beq.n	80083ea <HAL_RTC_GetDate+0x26>
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e03a      	b.n	8008464 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80083ee:	f107 0314 	add.w	r3, r7, #20
 80083f2:	2200      	movs	r2, #0
 80083f4:	4619      	mov	r1, r3
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f7ff fe56 	bl	80080a8 <HAL_RTC_GetTime>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e02e      	b.n	8008464 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	7b1a      	ldrb	r2, [r3, #12]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	7bda      	ldrb	r2, [r3, #15]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	7b5a      	ldrb	r2, [r3, #13]
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	7b9a      	ldrb	r2, [r3, #14]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d01a      	beq.n	8008462 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	78db      	ldrb	r3, [r3, #3]
 8008430:	4618      	mov	r0, r3
 8008432:	f000 fa1a 	bl	800886a <RTC_ByteToBcd2>
 8008436:	4603      	mov	r3, r0
 8008438:	461a      	mov	r2, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	785b      	ldrb	r3, [r3, #1]
 8008442:	4618      	mov	r0, r3
 8008444:	f000 fa11 	bl	800886a <RTC_ByteToBcd2>
 8008448:	4603      	mov	r3, r0
 800844a:	461a      	mov	r2, r3
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	789b      	ldrb	r3, [r3, #2]
 8008454:	4618      	mov	r0, r3
 8008456:	f000 fa08 	bl	800886a <RTC_ByteToBcd2>
 800845a:	4603      	mov	r3, r0
 800845c:	461a      	mov	r2, r3
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800846c:	b590      	push	{r4, r7, lr}
 800846e:	b089      	sub	sp, #36	@ 0x24
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8008478:	2300      	movs	r3, #0
 800847a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 800847c:	f107 0314 	add.w	r3, r7, #20
 8008480:	2100      	movs	r1, #0
 8008482:	460a      	mov	r2, r1
 8008484:	801a      	strh	r2, [r3, #0]
 8008486:	460a      	mov	r2, r1
 8008488:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <HAL_RTC_SetAlarm_IT+0x2a>
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d101      	bne.n	800849a <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e099      	b.n	80085ce <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	7c1b      	ldrb	r3, [r3, #16]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d101      	bne.n	80084a6 <HAL_RTC_SetAlarm_IT+0x3a>
 80084a2:	2302      	movs	r3, #2
 80084a4:	e093      	b.n	80085ce <HAL_RTC_SetAlarm_IT+0x162>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2201      	movs	r2, #1
 80084aa:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2202      	movs	r2, #2
 80084b0:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80084b2:	f107 0314 	add.w	r3, r7, #20
 80084b6:	2200      	movs	r2, #0
 80084b8:	4619      	mov	r1, r3
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f7ff fdf4 	bl	80080a8 <HAL_RTC_GetTime>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e081      	b.n	80085ce <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80084ca:	7d3b      	ldrb	r3, [r7, #20]
 80084cc:	461a      	mov	r2, r3
 80084ce:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80084d2:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80084d6:	7d7b      	ldrb	r3, [r7, #21]
 80084d8:	4619      	mov	r1, r3
 80084da:	460b      	mov	r3, r1
 80084dc:	011b      	lsls	r3, r3, #4
 80084de:	1a5b      	subs	r3, r3, r1
 80084e0:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80084e2:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80084e4:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80084e6:	4413      	add	r3, r2
 80084e8:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d113      	bne.n	8008518 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80084fa:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	785b      	ldrb	r3, [r3, #1]
 8008502:	4619      	mov	r1, r3
 8008504:	460b      	mov	r3, r1
 8008506:	011b      	lsls	r3, r3, #4
 8008508:	1a5b      	subs	r3, r3, r1
 800850a:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800850c:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8008512:	4413      	add	r3, r2
 8008514:	61fb      	str	r3, [r7, #28]
 8008516:	e01e      	b.n	8008556 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	4618      	mov	r0, r3
 800851e:	f000 f9c1 	bl	80088a4 <RTC_Bcd2ToByte>
 8008522:	4603      	mov	r3, r0
 8008524:	461a      	mov	r2, r3
 8008526:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800852a:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	785b      	ldrb	r3, [r3, #1]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f9b6 	bl	80088a4 <RTC_Bcd2ToByte>
 8008538:	4603      	mov	r3, r0
 800853a:	461a      	mov	r2, r3
 800853c:	4613      	mov	r3, r2
 800853e:	011b      	lsls	r3, r3, #4
 8008540:	1a9b      	subs	r3, r3, r2
 8008542:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8008544:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	789b      	ldrb	r3, [r3, #2]
 800854a:	4618      	mov	r0, r3
 800854c:	f000 f9aa 	bl	80088a4 <RTC_Bcd2ToByte>
 8008550:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8008552:	4423      	add	r3, r4
 8008554:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8008556:	69fa      	ldr	r2, [r7, #28]
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	429a      	cmp	r2, r3
 800855c:	d205      	bcs.n	800856a <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8008564:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8008568:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800856a:	69f9      	ldr	r1, [r7, #28]
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f000 f905 	bl	800877c <RTC_WriteAlarmCounter>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d007      	beq.n	8008588 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2204      	movs	r2, #4
 800857c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e022      	b.n	80085ce <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f022 0202 	bic.w	r2, r2, #2
 8008596:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f042 0202 	orr.w	r2, r2, #2
 80085a6:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80085a8:	4b0b      	ldr	r3, [pc, #44]	@ (80085d8 <HAL_RTC_SetAlarm_IT+0x16c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a0a      	ldr	r2, [pc, #40]	@ (80085d8 <HAL_RTC_SetAlarm_IT+0x16c>)
 80085ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085b2:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80085b4:	4b08      	ldr	r3, [pc, #32]	@ (80085d8 <HAL_RTC_SetAlarm_IT+0x16c>)
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	4a07      	ldr	r2, [pc, #28]	@ (80085d8 <HAL_RTC_SetAlarm_IT+0x16c>)
 80085ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085be:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2201      	movs	r2, #1
 80085c4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80085cc:	2300      	movs	r3, #0
  }
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3724      	adds	r7, #36	@ 0x24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd90      	pop	{r4, r7, pc}
 80085d6:	bf00      	nop
 80085d8:	40010400 	.word	0x40010400

080085dc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0302 	and.w	r3, r3, #2
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d011      	beq.n	8008616 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00a      	beq.n	8008616 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f815 	bl	8008630 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0202 	bic.w	r2, r2, #2
 8008614:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008616:	4b05      	ldr	r3, [pc, #20]	@ (800862c <HAL_RTC_AlarmIRQHandler+0x50>)
 8008618:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800861c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	745a      	strb	r2, [r3, #17]
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	40010400 	.word	0x40010400

08008630 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	bc80      	pop	{r7}
 8008640:	4770      	bx	lr

08008642 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800864a:	2300      	movs	r3, #0
 800864c:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d101      	bne.n	8008658 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e01d      	b.n	8008694 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f022 0208 	bic.w	r2, r2, #8
 8008666:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008668:	f7fb fbe2 	bl	8003e30 <HAL_GetTick>
 800866c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800866e:	e009      	b.n	8008684 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008670:	f7fb fbde 	bl	8003e30 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800867e:	d901      	bls.n	8008684 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e007      	b.n	8008694 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f003 0308 	and.w	r3, r3, #8
 800868e:	2b00      	cmp	r3, #0
 8008690:	d0ee      	beq.n	8008670 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800869c:	b480      	push	{r7}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	827b      	strh	r3, [r7, #18]
 80086a8:	2300      	movs	r3, #0
 80086aa:	823b      	strh	r3, [r7, #16]
 80086ac:	2300      	movs	r3, #0
 80086ae:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80086cc:	8a7a      	ldrh	r2, [r7, #18]
 80086ce:	8a3b      	ldrh	r3, [r7, #16]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d008      	beq.n	80086e6 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80086d4:	8a3b      	ldrh	r3, [r7, #16]
 80086d6:	041a      	lsls	r2, r3, #16
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	4313      	orrs	r3, r2
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	e004      	b.n	80086f0 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80086e6:	8a7b      	ldrh	r3, [r7, #18]
 80086e8:	041a      	lsls	r2, r3, #16
 80086ea:	89fb      	ldrh	r3, [r7, #14]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80086f0:	697b      	ldr	r3, [r7, #20]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bc80      	pop	{r7}
 80086fa:	4770      	bx	lr

080086fc <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f85d 	bl	80087ca <RTC_EnterInitMode>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d002      	beq.n	800871c <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	73fb      	strb	r3, [r7, #15]
 800871a:	e011      	b.n	8008740 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	0c12      	lsrs	r2, r2, #16
 8008724:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	b292      	uxth	r2, r2
 800872e:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f872 	bl	800881a <RTC_ExitInitMode>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d001      	beq.n	8008740 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008740:	7bfb      	ldrb	r3, [r7, #15]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800874a:	b480      	push	{r7}
 800874c:	b085      	sub	sp, #20
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8008752:	2300      	movs	r3, #0
 8008754:	81fb      	strh	r3, [r7, #14]
 8008756:	2300      	movs	r3, #0
 8008758:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008768:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800876a:	89fb      	ldrh	r3, [r7, #14]
 800876c:	041a      	lsls	r2, r3, #16
 800876e:	89bb      	ldrh	r3, [r7, #12]
 8008770:	4313      	orrs	r3, r2
}
 8008772:	4618      	mov	r0, r3
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	bc80      	pop	{r7}
 800877a:	4770      	bx	lr

0800877c <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f81d 	bl	80087ca <RTC_EnterInitMode>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d002      	beq.n	800879c <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	73fb      	strb	r3, [r7, #15]
 800879a:	e011      	b.n	80087c0 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	0c12      	lsrs	r2, r2, #16
 80087a4:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	b292      	uxth	r2, r2
 80087ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f832 	bl	800881a <RTC_ExitInitMode>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b084      	sub	sp, #16
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80087d6:	f7fb fb2b 	bl	8003e30 <HAL_GetTick>
 80087da:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80087dc:	e009      	b.n	80087f2 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80087de:	f7fb fb27 	bl	8003e30 <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80087ec:	d901      	bls.n	80087f2 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e00f      	b.n	8008812 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	f003 0320 	and.w	r3, r3, #32
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0ee      	beq.n	80087de <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f042 0210 	orr.w	r2, r2, #16
 800880e:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0210 	bic.w	r2, r2, #16
 8008834:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008836:	f7fb fafb 	bl	8003e30 <HAL_GetTick>
 800883a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800883c:	e009      	b.n	8008852 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800883e:	f7fb faf7 	bl	8003e30 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800884c:	d901      	bls.n	8008852 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e007      	b.n	8008862 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	f003 0320 	and.w	r3, r3, #32
 800885c:	2b00      	cmp	r3, #0
 800885e:	d0ee      	beq.n	800883e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800886a:	b480      	push	{r7}
 800886c:	b085      	sub	sp, #20
 800886e:	af00      	add	r7, sp, #0
 8008870:	4603      	mov	r3, r0
 8008872:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008874:	2300      	movs	r3, #0
 8008876:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8008878:	e005      	b.n	8008886 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3301      	adds	r3, #1
 800887e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008880:	79fb      	ldrb	r3, [r7, #7]
 8008882:	3b0a      	subs	r3, #10
 8008884:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8008886:	79fb      	ldrb	r3, [r7, #7]
 8008888:	2b09      	cmp	r3, #9
 800888a:	d8f6      	bhi.n	800887a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	b2db      	uxtb	r3, r3
 8008890:	011b      	lsls	r3, r3, #4
 8008892:	b2da      	uxtb	r2, r3
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	4313      	orrs	r3, r2
 8008898:	b2db      	uxtb	r3, r3
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	bc80      	pop	{r7}
 80088a2:	4770      	bx	lr

080088a4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	091b      	lsrs	r3, r3, #4
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	461a      	mov	r2, r3
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	f003 030f 	and.w	r3, r3, #15
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	4413      	add	r3, r2
 80088d2:	b2db      	uxtb	r3, r3
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	bc80      	pop	{r7}
 80088dc:	4770      	bx	lr

080088de <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b086      	sub	sp, #24
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
 80088e6:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	2300      	movs	r3, #0
 80088ee:	613b      	str	r3, [r7, #16]
 80088f0:	2300      	movs	r3, #0
 80088f2:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	7bdb      	ldrb	r3, [r3, #15]
 80088fc:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	7b5b      	ldrb	r3, [r3, #13]
 8008902:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	7b9b      	ldrb	r3, [r3, #14]
 8008908:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800890a:	2300      	movs	r3, #0
 800890c:	60bb      	str	r3, [r7, #8]
 800890e:	e06f      	b.n	80089f0 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d011      	beq.n	800893a <RTC_DateUpdate+0x5c>
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	2b03      	cmp	r3, #3
 800891a:	d00e      	beq.n	800893a <RTC_DateUpdate+0x5c>
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	2b05      	cmp	r3, #5
 8008920:	d00b      	beq.n	800893a <RTC_DateUpdate+0x5c>
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	2b07      	cmp	r3, #7
 8008926:	d008      	beq.n	800893a <RTC_DateUpdate+0x5c>
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	2b08      	cmp	r3, #8
 800892c:	d005      	beq.n	800893a <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	2b0a      	cmp	r3, #10
 8008932:	d002      	beq.n	800893a <RTC_DateUpdate+0x5c>
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	2b0c      	cmp	r3, #12
 8008938:	d117      	bne.n	800896a <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2b1e      	cmp	r3, #30
 800893e:	d803      	bhi.n	8008948 <RTC_DateUpdate+0x6a>
      {
        day++;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	3301      	adds	r3, #1
 8008944:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008946:	e050      	b.n	80089ea <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	2b0c      	cmp	r3, #12
 800894c:	d005      	beq.n	800895a <RTC_DateUpdate+0x7c>
        {
          month++;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	3301      	adds	r3, #1
 8008952:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008954:	2301      	movs	r3, #1
 8008956:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008958:	e047      	b.n	80089ea <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800895a:	2301      	movs	r3, #1
 800895c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800895e:	2301      	movs	r3, #1
 8008960:	60fb      	str	r3, [r7, #12]
          year++;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	3301      	adds	r3, #1
 8008966:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8008968:	e03f      	b.n	80089ea <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	2b04      	cmp	r3, #4
 800896e:	d008      	beq.n	8008982 <RTC_DateUpdate+0xa4>
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	2b06      	cmp	r3, #6
 8008974:	d005      	beq.n	8008982 <RTC_DateUpdate+0xa4>
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	2b09      	cmp	r3, #9
 800897a:	d002      	beq.n	8008982 <RTC_DateUpdate+0xa4>
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	2b0b      	cmp	r3, #11
 8008980:	d10c      	bne.n	800899c <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b1d      	cmp	r3, #29
 8008986:	d803      	bhi.n	8008990 <RTC_DateUpdate+0xb2>
      {
        day++;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3301      	adds	r3, #1
 800898c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800898e:	e02c      	b.n	80089ea <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	3301      	adds	r3, #1
 8008994:	613b      	str	r3, [r7, #16]
        day = 1U;
 8008996:	2301      	movs	r3, #1
 8008998:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800899a:	e026      	b.n	80089ea <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d123      	bne.n	80089ea <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b1b      	cmp	r3, #27
 80089a6:	d803      	bhi.n	80089b0 <RTC_DateUpdate+0xd2>
      {
        day++;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	3301      	adds	r3, #1
 80089ac:	60fb      	str	r3, [r7, #12]
 80089ae:	e01c      	b.n	80089ea <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b1c      	cmp	r3, #28
 80089b4:	d111      	bne.n	80089da <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 f838 	bl	8008a30 <RTC_IsLeapYear>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d003      	beq.n	80089ce <RTC_DateUpdate+0xf0>
        {
          day++;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3301      	adds	r3, #1
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	e00d      	b.n	80089ea <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	3301      	adds	r3, #1
 80089d2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80089d4:	2301      	movs	r3, #1
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	e007      	b.n	80089ea <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2b1d      	cmp	r3, #29
 80089de:	d104      	bne.n	80089ea <RTC_DateUpdate+0x10c>
      {
        month++;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	3301      	adds	r3, #1
 80089e4:	613b      	str	r3, [r7, #16]
        day = 1U;
 80089e6:	2301      	movs	r3, #1
 80089e8:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	3301      	adds	r3, #1
 80089ee:	60bb      	str	r3, [r7, #8]
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d38b      	bcc.n	8008910 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	b2da      	uxtb	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6978      	ldr	r0, [r7, #20]
 8008a1c:	f000 f83a 	bl	8008a94 <RTC_WeekDayNum>
 8008a20:	4603      	mov	r3, r0
 8008a22:	461a      	mov	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	731a      	strb	r2, [r3, #12]
}
 8008a28:	bf00      	nop
 8008a2a:	3718      	adds	r7, #24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4603      	mov	r3, r0
 8008a38:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8008a3a:	88fb      	ldrh	r3, [r7, #6]
 8008a3c:	f003 0303 	and.w	r3, r3, #3
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	e01d      	b.n	8008a86 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8008a4a:	88fb      	ldrh	r3, [r7, #6]
 8008a4c:	4a10      	ldr	r2, [pc, #64]	@ (8008a90 <RTC_IsLeapYear+0x60>)
 8008a4e:	fba2 1203 	umull	r1, r2, r2, r3
 8008a52:	0952      	lsrs	r2, r2, #5
 8008a54:	2164      	movs	r1, #100	@ 0x64
 8008a56:	fb01 f202 	mul.w	r2, r1, r2
 8008a5a:	1a9b      	subs	r3, r3, r2
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e00f      	b.n	8008a86 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8008a66:	88fb      	ldrh	r3, [r7, #6]
 8008a68:	4a09      	ldr	r2, [pc, #36]	@ (8008a90 <RTC_IsLeapYear+0x60>)
 8008a6a:	fba2 1203 	umull	r1, r2, r2, r3
 8008a6e:	09d2      	lsrs	r2, r2, #7
 8008a70:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8008a74:	fb01 f202 	mul.w	r2, r1, r2
 8008a78:	1a9b      	subs	r3, r3, r2
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d101      	bne.n	8008a84 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e000      	b.n	8008a86 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8008a84:	2300      	movs	r3, #0
  }
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bc80      	pop	{r7}
 8008a8e:	4770      	bx	lr
 8008a90:	51eb851f 	.word	0x51eb851f

08008a94 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	70fb      	strb	r3, [r7, #3]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60bb      	str	r3, [r7, #8]
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8008ab2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8008ab4:	78fb      	ldrb	r3, [r7, #3]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d82d      	bhi.n	8008b16 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8008aba:	78fa      	ldrb	r2, [r7, #3]
 8008abc:	4613      	mov	r3, r2
 8008abe:	005b      	lsls	r3, r3, #1
 8008ac0:	4413      	add	r3, r2
 8008ac2:	00db      	lsls	r3, r3, #3
 8008ac4:	1a9b      	subs	r3, r3, r2
 8008ac6:	4a2c      	ldr	r2, [pc, #176]	@ (8008b78 <RTC_WeekDayNum+0xe4>)
 8008ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8008acc:	085a      	lsrs	r2, r3, #1
 8008ace:	78bb      	ldrb	r3, [r7, #2]
 8008ad0:	441a      	add	r2, r3
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	441a      	add	r2, r3
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	089b      	lsrs	r3, r3, #2
 8008adc:	441a      	add	r2, r3
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	4926      	ldr	r1, [pc, #152]	@ (8008b7c <RTC_WeekDayNum+0xe8>)
 8008ae4:	fba1 1303 	umull	r1, r3, r1, r3
 8008ae8:	095b      	lsrs	r3, r3, #5
 8008aea:	1ad2      	subs	r2, r2, r3
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	4922      	ldr	r1, [pc, #136]	@ (8008b7c <RTC_WeekDayNum+0xe8>)
 8008af2:	fba1 1303 	umull	r1, r3, r1, r3
 8008af6:	09db      	lsrs	r3, r3, #7
 8008af8:	4413      	add	r3, r2
 8008afa:	1d1a      	adds	r2, r3, #4
 8008afc:	4b20      	ldr	r3, [pc, #128]	@ (8008b80 <RTC_WeekDayNum+0xec>)
 8008afe:	fba3 1302 	umull	r1, r3, r3, r2
 8008b02:	1ad1      	subs	r1, r2, r3
 8008b04:	0849      	lsrs	r1, r1, #1
 8008b06:	440b      	add	r3, r1
 8008b08:	0899      	lsrs	r1, r3, #2
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	00db      	lsls	r3, r3, #3
 8008b0e:	1a5b      	subs	r3, r3, r1
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	e029      	b.n	8008b6a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8008b16:	78fa      	ldrb	r2, [r7, #3]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	005b      	lsls	r3, r3, #1
 8008b1c:	4413      	add	r3, r2
 8008b1e:	00db      	lsls	r3, r3, #3
 8008b20:	1a9b      	subs	r3, r3, r2
 8008b22:	4a15      	ldr	r2, [pc, #84]	@ (8008b78 <RTC_WeekDayNum+0xe4>)
 8008b24:	fba2 2303 	umull	r2, r3, r2, r3
 8008b28:	085a      	lsrs	r2, r3, #1
 8008b2a:	78bb      	ldrb	r3, [r7, #2]
 8008b2c:	441a      	add	r2, r3
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	441a      	add	r2, r3
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	089b      	lsrs	r3, r3, #2
 8008b36:	441a      	add	r2, r3
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	4910      	ldr	r1, [pc, #64]	@ (8008b7c <RTC_WeekDayNum+0xe8>)
 8008b3c:	fba1 1303 	umull	r1, r3, r1, r3
 8008b40:	095b      	lsrs	r3, r3, #5
 8008b42:	1ad2      	subs	r2, r2, r3
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	490d      	ldr	r1, [pc, #52]	@ (8008b7c <RTC_WeekDayNum+0xe8>)
 8008b48:	fba1 1303 	umull	r1, r3, r1, r3
 8008b4c:	09db      	lsrs	r3, r3, #7
 8008b4e:	4413      	add	r3, r2
 8008b50:	1c9a      	adds	r2, r3, #2
 8008b52:	4b0b      	ldr	r3, [pc, #44]	@ (8008b80 <RTC_WeekDayNum+0xec>)
 8008b54:	fba3 1302 	umull	r1, r3, r3, r2
 8008b58:	1ad1      	subs	r1, r2, r3
 8008b5a:	0849      	lsrs	r1, r1, #1
 8008b5c:	440b      	add	r3, r1
 8008b5e:	0899      	lsrs	r1, r3, #2
 8008b60:	460b      	mov	r3, r1
 8008b62:	00db      	lsls	r3, r3, #3
 8008b64:	1a5b      	subs	r3, r3, r1
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	b2db      	uxtb	r3, r3
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bc80      	pop	{r7}
 8008b76:	4770      	bx	lr
 8008b78:	38e38e39 	.word	0x38e38e39
 8008b7c:	51eb851f 	.word	0x51eb851f
 8008b80:	24924925 	.word	0x24924925

08008b84 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d027      	beq.n	8008bea <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d020      	beq.n	8008bea <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f003 0304 	and.w	r3, r3, #4
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00b      	beq.n	8008bce <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f824 	bl	8008c04 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f06f 0204 	mvn.w	r2, #4
 8008bc4:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2204      	movs	r2, #4
 8008bca:	745a      	strb	r2, [r3, #17]
 8008bcc:	e005      	b.n	8008bda <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f80f 	bl	8008bf2 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f022 0201 	bic.w	r2, r2, #1
 8008be8:	605a      	str	r2, [r3, #4]
    }
  }
}
 8008bea:	bf00      	nop
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b083      	sub	sp, #12
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8008bfa:	bf00      	nop
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bc80      	pop	{r7}
 8008c02:	4770      	bx	lr

08008c04 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bc80      	pop	{r7}
 8008c14:	4770      	bx	lr

08008c16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b082      	sub	sp, #8
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d101      	bne.n	8008c28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e041      	b.n	8008cac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d106      	bne.n	8008c42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7fa fe0b 	bl	8003858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2202      	movs	r2, #2
 8008c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	3304      	adds	r3, #4
 8008c52:	4619      	mov	r1, r3
 8008c54:	4610      	mov	r0, r2
 8008c56:	f000 fd21 	bl	800969c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d001      	beq.n	8008ccc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e032      	b.n	8008d32 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a18      	ldr	r2, [pc, #96]	@ (8008d3c <HAL_TIM_Base_Start+0x88>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d00e      	beq.n	8008cfc <HAL_TIM_Base_Start+0x48>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ce6:	d009      	beq.n	8008cfc <HAL_TIM_Base_Start+0x48>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a14      	ldr	r2, [pc, #80]	@ (8008d40 <HAL_TIM_Base_Start+0x8c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d004      	beq.n	8008cfc <HAL_TIM_Base_Start+0x48>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a13      	ldr	r2, [pc, #76]	@ (8008d44 <HAL_TIM_Base_Start+0x90>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d111      	bne.n	8008d20 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f003 0307 	and.w	r3, r3, #7
 8008d06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2b06      	cmp	r3, #6
 8008d0c:	d010      	beq.n	8008d30 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f042 0201 	orr.w	r2, r2, #1
 8008d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d1e:	e007      	b.n	8008d30 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f042 0201 	orr.w	r2, r2, #1
 8008d2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bc80      	pop	{r7}
 8008d3a:	4770      	bx	lr
 8008d3c:	40012c00 	.word	0x40012c00
 8008d40:	40000400 	.word	0x40000400
 8008d44:	40000800 	.word	0x40000800

08008d48 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6a1a      	ldr	r2, [r3, #32]
 8008d56:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10f      	bne.n	8008d80 <HAL_TIM_Base_Stop+0x38>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6a1a      	ldr	r2, [r3, #32]
 8008d66:	f240 4344 	movw	r3, #1092	@ 0x444
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d107      	bne.n	8008d80 <HAL_TIM_Base_Stop+0x38>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f022 0201 	bic.w	r2, r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bc80      	pop	{r7}
 8008d92:	4770      	bx	lr

08008d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d001      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e03a      	b.n	8008e22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2202      	movs	r2, #2
 8008db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68da      	ldr	r2, [r3, #12]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f042 0201 	orr.w	r2, r2, #1
 8008dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a18      	ldr	r2, [pc, #96]	@ (8008e2c <HAL_TIM_Base_Start_IT+0x98>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d00e      	beq.n	8008dec <HAL_TIM_Base_Start_IT+0x58>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dd6:	d009      	beq.n	8008dec <HAL_TIM_Base_Start_IT+0x58>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a14      	ldr	r2, [pc, #80]	@ (8008e30 <HAL_TIM_Base_Start_IT+0x9c>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d004      	beq.n	8008dec <HAL_TIM_Base_Start_IT+0x58>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a13      	ldr	r2, [pc, #76]	@ (8008e34 <HAL_TIM_Base_Start_IT+0xa0>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d111      	bne.n	8008e10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f003 0307 	and.w	r3, r3, #7
 8008df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2b06      	cmp	r3, #6
 8008dfc:	d010      	beq.n	8008e20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f042 0201 	orr.w	r2, r2, #1
 8008e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e0e:	e007      	b.n	8008e20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f042 0201 	orr.w	r2, r2, #1
 8008e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bc80      	pop	{r7}
 8008e2a:	4770      	bx	lr
 8008e2c:	40012c00 	.word	0x40012c00
 8008e30:	40000400 	.word	0x40000400
 8008e34:	40000800 	.word	0x40000800

08008e38 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d101      	bne.n	8008e4a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e041      	b.n	8008ece <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d106      	bne.n	8008e64 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f839 	bl	8008ed6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2202      	movs	r2, #2
 8008e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3304      	adds	r3, #4
 8008e74:	4619      	mov	r1, r3
 8008e76:	4610      	mov	r0, r2
 8008e78:	f000 fc10 	bl	800969c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b083      	sub	sp, #12
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008ede:	bf00      	nop
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bc80      	pop	{r7}
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d109      	bne.n	8008f10 <HAL_TIM_OC_Start_IT+0x28>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	bf14      	ite	ne
 8008f08:	2301      	movne	r3, #1
 8008f0a:	2300      	moveq	r3, #0
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	e022      	b.n	8008f56 <HAL_TIM_OC_Start_IT+0x6e>
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2b04      	cmp	r3, #4
 8008f14:	d109      	bne.n	8008f2a <HAL_TIM_OC_Start_IT+0x42>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	bf14      	ite	ne
 8008f22:	2301      	movne	r3, #1
 8008f24:	2300      	moveq	r3, #0
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	e015      	b.n	8008f56 <HAL_TIM_OC_Start_IT+0x6e>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b08      	cmp	r3, #8
 8008f2e:	d109      	bne.n	8008f44 <HAL_TIM_OC_Start_IT+0x5c>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	bf14      	ite	ne
 8008f3c:	2301      	movne	r3, #1
 8008f3e:	2300      	moveq	r3, #0
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	e008      	b.n	8008f56 <HAL_TIM_OC_Start_IT+0x6e>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	bf14      	ite	ne
 8008f50:	2301      	movne	r3, #1
 8008f52:	2300      	moveq	r3, #0
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e0a9      	b.n	80090b2 <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d104      	bne.n	8008f6e <HAL_TIM_OC_Start_IT+0x86>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2202      	movs	r2, #2
 8008f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f6c:	e013      	b.n	8008f96 <HAL_TIM_OC_Start_IT+0xae>
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2b04      	cmp	r3, #4
 8008f72:	d104      	bne.n	8008f7e <HAL_TIM_OC_Start_IT+0x96>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f7c:	e00b      	b.n	8008f96 <HAL_TIM_OC_Start_IT+0xae>
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	2b08      	cmp	r3, #8
 8008f82:	d104      	bne.n	8008f8e <HAL_TIM_OC_Start_IT+0xa6>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f8c:	e003      	b.n	8008f96 <HAL_TIM_OC_Start_IT+0xae>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2202      	movs	r2, #2
 8008f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b0c      	cmp	r3, #12
 8008f9a:	d841      	bhi.n	8009020 <HAL_TIM_OC_Start_IT+0x138>
 8008f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa4 <HAL_TIM_OC_Start_IT+0xbc>)
 8008f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa2:	bf00      	nop
 8008fa4:	08008fd9 	.word	0x08008fd9
 8008fa8:	08009021 	.word	0x08009021
 8008fac:	08009021 	.word	0x08009021
 8008fb0:	08009021 	.word	0x08009021
 8008fb4:	08008feb 	.word	0x08008feb
 8008fb8:	08009021 	.word	0x08009021
 8008fbc:	08009021 	.word	0x08009021
 8008fc0:	08009021 	.word	0x08009021
 8008fc4:	08008ffd 	.word	0x08008ffd
 8008fc8:	08009021 	.word	0x08009021
 8008fcc:	08009021 	.word	0x08009021
 8008fd0:	08009021 	.word	0x08009021
 8008fd4:	0800900f 	.word	0x0800900f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68da      	ldr	r2, [r3, #12]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f042 0202 	orr.w	r2, r2, #2
 8008fe6:	60da      	str	r2, [r3, #12]
      break;
 8008fe8:	e01d      	b.n	8009026 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68da      	ldr	r2, [r3, #12]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f042 0204 	orr.w	r2, r2, #4
 8008ff8:	60da      	str	r2, [r3, #12]
      break;
 8008ffa:	e014      	b.n	8009026 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68da      	ldr	r2, [r3, #12]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f042 0208 	orr.w	r2, r2, #8
 800900a:	60da      	str	r2, [r3, #12]
      break;
 800900c:	e00b      	b.n	8009026 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68da      	ldr	r2, [r3, #12]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f042 0210 	orr.w	r2, r2, #16
 800901c:	60da      	str	r2, [r3, #12]
      break;
 800901e:	e002      	b.n	8009026 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	73fb      	strb	r3, [r7, #15]
      break;
 8009024:	bf00      	nop
  }

  if (status == HAL_OK)
 8009026:	7bfb      	ldrb	r3, [r7, #15]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d141      	bne.n	80090b0 <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2201      	movs	r2, #1
 8009032:	6839      	ldr	r1, [r7, #0]
 8009034:	4618      	mov	r0, r3
 8009036:	f000 fdbd 	bl	8009bb4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a1f      	ldr	r2, [pc, #124]	@ (80090bc <HAL_TIM_OC_Start_IT+0x1d4>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d107      	bne.n	8009054 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009052:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a18      	ldr	r2, [pc, #96]	@ (80090bc <HAL_TIM_OC_Start_IT+0x1d4>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d00e      	beq.n	800907c <HAL_TIM_OC_Start_IT+0x194>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009066:	d009      	beq.n	800907c <HAL_TIM_OC_Start_IT+0x194>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a14      	ldr	r2, [pc, #80]	@ (80090c0 <HAL_TIM_OC_Start_IT+0x1d8>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d004      	beq.n	800907c <HAL_TIM_OC_Start_IT+0x194>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a13      	ldr	r2, [pc, #76]	@ (80090c4 <HAL_TIM_OC_Start_IT+0x1dc>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d111      	bne.n	80090a0 <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	2b06      	cmp	r3, #6
 800908c:	d010      	beq.n	80090b0 <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0201 	orr.w	r2, r2, #1
 800909c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800909e:	e007      	b.n	80090b0 <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f042 0201 	orr.w	r2, r2, #1
 80090ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	40012c00 	.word	0x40012c00
 80090c0:	40000400 	.word	0x40000400
 80090c4:	40000800 	.word	0x40000800

080090c8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b0c      	cmp	r3, #12
 80090da:	d841      	bhi.n	8009160 <HAL_TIM_OC_Stop_IT+0x98>
 80090dc:	a201      	add	r2, pc, #4	@ (adr r2, 80090e4 <HAL_TIM_OC_Stop_IT+0x1c>)
 80090de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e2:	bf00      	nop
 80090e4:	08009119 	.word	0x08009119
 80090e8:	08009161 	.word	0x08009161
 80090ec:	08009161 	.word	0x08009161
 80090f0:	08009161 	.word	0x08009161
 80090f4:	0800912b 	.word	0x0800912b
 80090f8:	08009161 	.word	0x08009161
 80090fc:	08009161 	.word	0x08009161
 8009100:	08009161 	.word	0x08009161
 8009104:	0800913d 	.word	0x0800913d
 8009108:	08009161 	.word	0x08009161
 800910c:	08009161 	.word	0x08009161
 8009110:	08009161 	.word	0x08009161
 8009114:	0800914f 	.word	0x0800914f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68da      	ldr	r2, [r3, #12]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0202 	bic.w	r2, r2, #2
 8009126:	60da      	str	r2, [r3, #12]
      break;
 8009128:	e01d      	b.n	8009166 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68da      	ldr	r2, [r3, #12]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f022 0204 	bic.w	r2, r2, #4
 8009138:	60da      	str	r2, [r3, #12]
      break;
 800913a:	e014      	b.n	8009166 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68da      	ldr	r2, [r3, #12]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f022 0208 	bic.w	r2, r2, #8
 800914a:	60da      	str	r2, [r3, #12]
      break;
 800914c:	e00b      	b.n	8009166 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68da      	ldr	r2, [r3, #12]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 0210 	bic.w	r2, r2, #16
 800915c:	60da      	str	r2, [r3, #12]
      break;
 800915e:	e002      	b.n	8009166 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	73fb      	strb	r3, [r7, #15]
      break;
 8009164:	bf00      	nop
  }

  if (status == HAL_OK)
 8009166:	7bfb      	ldrb	r3, [r7, #15]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d157      	bne.n	800921c <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2200      	movs	r2, #0
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	4618      	mov	r0, r3
 8009176:	f000 fd1d 	bl	8009bb4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a2a      	ldr	r2, [pc, #168]	@ (8009228 <HAL_TIM_OC_Stop_IT+0x160>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d117      	bne.n	80091b4 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6a1a      	ldr	r2, [r3, #32]
 800918a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800918e:	4013      	ands	r3, r2
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10f      	bne.n	80091b4 <HAL_TIM_OC_Stop_IT+0xec>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6a1a      	ldr	r2, [r3, #32]
 800919a:	f240 4344 	movw	r3, #1092	@ 0x444
 800919e:	4013      	ands	r3, r2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d107      	bne.n	80091b4 <HAL_TIM_OC_Stop_IT+0xec>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80091b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6a1a      	ldr	r2, [r3, #32]
 80091ba:	f241 1311 	movw	r3, #4369	@ 0x1111
 80091be:	4013      	ands	r3, r2
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10f      	bne.n	80091e4 <HAL_TIM_OC_Stop_IT+0x11c>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6a1a      	ldr	r2, [r3, #32]
 80091ca:	f240 4344 	movw	r3, #1092	@ 0x444
 80091ce:	4013      	ands	r3, r2
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d107      	bne.n	80091e4 <HAL_TIM_OC_Stop_IT+0x11c>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f022 0201 	bic.w	r2, r2, #1
 80091e2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d104      	bne.n	80091f4 <HAL_TIM_OC_Stop_IT+0x12c>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80091f2:	e013      	b.n	800921c <HAL_TIM_OC_Stop_IT+0x154>
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2b04      	cmp	r3, #4
 80091f8:	d104      	bne.n	8009204 <HAL_TIM_OC_Stop_IT+0x13c>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009202:	e00b      	b.n	800921c <HAL_TIM_OC_Stop_IT+0x154>
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	2b08      	cmp	r3, #8
 8009208:	d104      	bne.n	8009214 <HAL_TIM_OC_Stop_IT+0x14c>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009212:	e003      	b.n	800921c <HAL_TIM_OC_Stop_IT+0x154>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800921c:	7bfb      	ldrb	r3, [r7, #15]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	40012c00 	.word	0x40012c00

0800922c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d020      	beq.n	8009290 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f003 0302 	and.w	r3, r3, #2
 8009254:	2b00      	cmp	r3, #0
 8009256:	d01b      	beq.n	8009290 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f06f 0202 	mvn.w	r2, #2
 8009260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	f003 0303 	and.w	r3, r3, #3
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f9f4 	bl	8009664 <HAL_TIM_IC_CaptureCallback>
 800927c:	e005      	b.n	800928a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7f8 fbfa 	bl	8001a78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f9f6 	bl	8009676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f003 0304 	and.w	r3, r3, #4
 8009296:	2b00      	cmp	r3, #0
 8009298:	d020      	beq.n	80092dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f003 0304 	and.w	r3, r3, #4
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d01b      	beq.n	80092dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f06f 0204 	mvn.w	r2, #4
 80092ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2202      	movs	r2, #2
 80092b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f9ce 	bl	8009664 <HAL_TIM_IC_CaptureCallback>
 80092c8:	e005      	b.n	80092d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7f8 fbd4 	bl	8001a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f9d0 	bl	8009676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	f003 0308 	and.w	r3, r3, #8
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d020      	beq.n	8009328 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f003 0308 	and.w	r3, r3, #8
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d01b      	beq.n	8009328 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f06f 0208 	mvn.w	r2, #8
 80092f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2204      	movs	r2, #4
 80092fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	69db      	ldr	r3, [r3, #28]
 8009306:	f003 0303 	and.w	r3, r3, #3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d003      	beq.n	8009316 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f9a8 	bl	8009664 <HAL_TIM_IC_CaptureCallback>
 8009314:	e005      	b.n	8009322 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7f8 fbae 	bl	8001a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f9aa 	bl	8009676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	f003 0310 	and.w	r3, r3, #16
 800932e:	2b00      	cmp	r3, #0
 8009330:	d020      	beq.n	8009374 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f003 0310 	and.w	r3, r3, #16
 8009338:	2b00      	cmp	r3, #0
 800933a:	d01b      	beq.n	8009374 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f06f 0210 	mvn.w	r2, #16
 8009344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2208      	movs	r2, #8
 800934a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009356:	2b00      	cmp	r3, #0
 8009358:	d003      	beq.n	8009362 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f982 	bl	8009664 <HAL_TIM_IC_CaptureCallback>
 8009360:	e005      	b.n	800936e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7f8 fb88 	bl	8001a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f984 	bl	8009676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00c      	beq.n	8009398 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f003 0301 	and.w	r3, r3, #1
 8009384:	2b00      	cmp	r3, #0
 8009386:	d007      	beq.n	8009398 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f06f 0201 	mvn.w	r2, #1
 8009390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f95d 	bl	8009652 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00c      	beq.n	80093bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d007      	beq.n	80093bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80093b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fc87 	bl	8009cca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00c      	beq.n	80093e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d007      	beq.n	80093e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80093d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f954 	bl	8009688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	f003 0320 	and.w	r3, r3, #32
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00c      	beq.n	8009404 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f003 0320 	and.w	r3, r3, #32
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d007      	beq.n	8009404 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f06f 0220 	mvn.w	r2, #32
 80093fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fc5a 	bl	8009cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009404:	bf00      	nop
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009422:	2b01      	cmp	r3, #1
 8009424:	d101      	bne.n	800942a <HAL_TIM_OC_ConfigChannel+0x1e>
 8009426:	2302      	movs	r3, #2
 8009428:	e048      	b.n	80094bc <HAL_TIM_OC_ConfigChannel+0xb0>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2b0c      	cmp	r3, #12
 8009436:	d839      	bhi.n	80094ac <HAL_TIM_OC_ConfigChannel+0xa0>
 8009438:	a201      	add	r2, pc, #4	@ (adr r2, 8009440 <HAL_TIM_OC_ConfigChannel+0x34>)
 800943a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943e:	bf00      	nop
 8009440:	08009475 	.word	0x08009475
 8009444:	080094ad 	.word	0x080094ad
 8009448:	080094ad 	.word	0x080094ad
 800944c:	080094ad 	.word	0x080094ad
 8009450:	08009483 	.word	0x08009483
 8009454:	080094ad 	.word	0x080094ad
 8009458:	080094ad 	.word	0x080094ad
 800945c:	080094ad 	.word	0x080094ad
 8009460:	08009491 	.word	0x08009491
 8009464:	080094ad 	.word	0x080094ad
 8009468:	080094ad 	.word	0x080094ad
 800946c:	080094ad 	.word	0x080094ad
 8009470:	0800949f 	.word	0x0800949f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68b9      	ldr	r1, [r7, #8]
 800947a:	4618      	mov	r0, r3
 800947c:	f000 f97c 	bl	8009778 <TIM_OC1_SetConfig>
      break;
 8009480:	e017      	b.n	80094b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68b9      	ldr	r1, [r7, #8]
 8009488:	4618      	mov	r0, r3
 800948a:	f000 f9db 	bl	8009844 <TIM_OC2_SetConfig>
      break;
 800948e:	e010      	b.n	80094b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68b9      	ldr	r1, [r7, #8]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 fa3e 	bl	8009918 <TIM_OC3_SetConfig>
      break;
 800949c:	e009      	b.n	80094b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68b9      	ldr	r1, [r7, #8]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 faa1 	bl	80099ec <TIM_OC4_SetConfig>
      break;
 80094aa:	e002      	b.n	80094b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	75fb      	strb	r3, [r7, #23]
      break;
 80094b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d101      	bne.n	80094e0 <HAL_TIM_ConfigClockSource+0x1c>
 80094dc:	2302      	movs	r3, #2
 80094de:	e0b4      	b.n	800964a <HAL_TIM_ConfigClockSource+0x186>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2202      	movs	r2, #2
 80094ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80094fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009506:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009518:	d03e      	beq.n	8009598 <HAL_TIM_ConfigClockSource+0xd4>
 800951a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800951e:	f200 8087 	bhi.w	8009630 <HAL_TIM_ConfigClockSource+0x16c>
 8009522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009526:	f000 8086 	beq.w	8009636 <HAL_TIM_ConfigClockSource+0x172>
 800952a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800952e:	d87f      	bhi.n	8009630 <HAL_TIM_ConfigClockSource+0x16c>
 8009530:	2b70      	cmp	r3, #112	@ 0x70
 8009532:	d01a      	beq.n	800956a <HAL_TIM_ConfigClockSource+0xa6>
 8009534:	2b70      	cmp	r3, #112	@ 0x70
 8009536:	d87b      	bhi.n	8009630 <HAL_TIM_ConfigClockSource+0x16c>
 8009538:	2b60      	cmp	r3, #96	@ 0x60
 800953a:	d050      	beq.n	80095de <HAL_TIM_ConfigClockSource+0x11a>
 800953c:	2b60      	cmp	r3, #96	@ 0x60
 800953e:	d877      	bhi.n	8009630 <HAL_TIM_ConfigClockSource+0x16c>
 8009540:	2b50      	cmp	r3, #80	@ 0x50
 8009542:	d03c      	beq.n	80095be <HAL_TIM_ConfigClockSource+0xfa>
 8009544:	2b50      	cmp	r3, #80	@ 0x50
 8009546:	d873      	bhi.n	8009630 <HAL_TIM_ConfigClockSource+0x16c>
 8009548:	2b40      	cmp	r3, #64	@ 0x40
 800954a:	d058      	beq.n	80095fe <HAL_TIM_ConfigClockSource+0x13a>
 800954c:	2b40      	cmp	r3, #64	@ 0x40
 800954e:	d86f      	bhi.n	8009630 <HAL_TIM_ConfigClockSource+0x16c>
 8009550:	2b30      	cmp	r3, #48	@ 0x30
 8009552:	d064      	beq.n	800961e <HAL_TIM_ConfigClockSource+0x15a>
 8009554:	2b30      	cmp	r3, #48	@ 0x30
 8009556:	d86b      	bhi.n	8009630 <HAL_TIM_ConfigClockSource+0x16c>
 8009558:	2b20      	cmp	r3, #32
 800955a:	d060      	beq.n	800961e <HAL_TIM_ConfigClockSource+0x15a>
 800955c:	2b20      	cmp	r3, #32
 800955e:	d867      	bhi.n	8009630 <HAL_TIM_ConfigClockSource+0x16c>
 8009560:	2b00      	cmp	r3, #0
 8009562:	d05c      	beq.n	800961e <HAL_TIM_ConfigClockSource+0x15a>
 8009564:	2b10      	cmp	r3, #16
 8009566:	d05a      	beq.n	800961e <HAL_TIM_ConfigClockSource+0x15a>
 8009568:	e062      	b.n	8009630 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800957a:	f000 fafc 	bl	8009b76 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800958c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	609a      	str	r2, [r3, #8]
      break;
 8009596:	e04f      	b.n	8009638 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80095a8:	f000 fae5 	bl	8009b76 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	689a      	ldr	r2, [r3, #8]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80095ba:	609a      	str	r2, [r3, #8]
      break;
 80095bc:	e03c      	b.n	8009638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095ca:	461a      	mov	r2, r3
 80095cc:	f000 fa5c 	bl	8009a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2150      	movs	r1, #80	@ 0x50
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 fab3 	bl	8009b42 <TIM_ITRx_SetConfig>
      break;
 80095dc:	e02c      	b.n	8009638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80095ea:	461a      	mov	r2, r3
 80095ec:	f000 fa7a 	bl	8009ae4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2160      	movs	r1, #96	@ 0x60
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 faa3 	bl	8009b42 <TIM_ITRx_SetConfig>
      break;
 80095fc:	e01c      	b.n	8009638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800960a:	461a      	mov	r2, r3
 800960c:	f000 fa3c 	bl	8009a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2140      	movs	r1, #64	@ 0x40
 8009616:	4618      	mov	r0, r3
 8009618:	f000 fa93 	bl	8009b42 <TIM_ITRx_SetConfig>
      break;
 800961c:	e00c      	b.n	8009638 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4619      	mov	r1, r3
 8009628:	4610      	mov	r0, r2
 800962a:	f000 fa8a 	bl	8009b42 <TIM_ITRx_SetConfig>
      break;
 800962e:	e003      	b.n	8009638 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	73fb      	strb	r3, [r7, #15]
      break;
 8009634:	e000      	b.n	8009638 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009636:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009648:	7bfb      	ldrb	r3, [r7, #15]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800965a:	bf00      	nop
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	bc80      	pop	{r7}
 8009662:	4770      	bx	lr

08009664 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	bc80      	pop	{r7}
 8009674:	4770      	bx	lr

08009676 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009676:	b480      	push	{r7}
 8009678:	b083      	sub	sp, #12
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800967e:	bf00      	nop
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	bc80      	pop	{r7}
 8009686:	4770      	bx	lr

08009688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	bc80      	pop	{r7}
 8009698:	4770      	bx	lr
	...

0800969c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a2f      	ldr	r2, [pc, #188]	@ (800976c <TIM_Base_SetConfig+0xd0>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d00b      	beq.n	80096cc <TIM_Base_SetConfig+0x30>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ba:	d007      	beq.n	80096cc <TIM_Base_SetConfig+0x30>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a2c      	ldr	r2, [pc, #176]	@ (8009770 <TIM_Base_SetConfig+0xd4>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d003      	beq.n	80096cc <TIM_Base_SetConfig+0x30>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a2b      	ldr	r2, [pc, #172]	@ (8009774 <TIM_Base_SetConfig+0xd8>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d108      	bne.n	80096de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	4313      	orrs	r3, r2
 80096dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a22      	ldr	r2, [pc, #136]	@ (800976c <TIM_Base_SetConfig+0xd0>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d00b      	beq.n	80096fe <TIM_Base_SetConfig+0x62>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ec:	d007      	beq.n	80096fe <TIM_Base_SetConfig+0x62>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a1f      	ldr	r2, [pc, #124]	@ (8009770 <TIM_Base_SetConfig+0xd4>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d003      	beq.n	80096fe <TIM_Base_SetConfig+0x62>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a1e      	ldr	r2, [pc, #120]	@ (8009774 <TIM_Base_SetConfig+0xd8>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d108      	bne.n	8009710 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	4313      	orrs	r3, r2
 800970e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	4313      	orrs	r3, r2
 800971c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	689a      	ldr	r2, [r3, #8]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a0d      	ldr	r2, [pc, #52]	@ (800976c <TIM_Base_SetConfig+0xd0>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d103      	bne.n	8009744 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	691a      	ldr	r2, [r3, #16]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	2b00      	cmp	r3, #0
 8009754:	d005      	beq.n	8009762 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	f023 0201 	bic.w	r2, r3, #1
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	611a      	str	r2, [r3, #16]
  }
}
 8009762:	bf00      	nop
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	bc80      	pop	{r7}
 800976a:	4770      	bx	lr
 800976c:	40012c00 	.word	0x40012c00
 8009770:	40000400 	.word	0x40000400
 8009774:	40000800 	.word	0x40000800

08009778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a1b      	ldr	r3, [r3, #32]
 800978c:	f023 0201 	bic.w	r2, r3, #1
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f023 0303 	bic.w	r3, r3, #3
 80097ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	f023 0302 	bic.w	r3, r3, #2
 80097c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a1c      	ldr	r2, [pc, #112]	@ (8009840 <TIM_OC1_SetConfig+0xc8>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d10c      	bne.n	80097ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f023 0308 	bic.w	r3, r3, #8
 80097da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	f023 0304 	bic.w	r3, r3, #4
 80097ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a13      	ldr	r2, [pc, #76]	@ (8009840 <TIM_OC1_SetConfig+0xc8>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d111      	bne.n	800981a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	4313      	orrs	r3, r2
 800980e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	4313      	orrs	r3, r2
 8009818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	685a      	ldr	r2, [r3, #4]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	621a      	str	r2, [r3, #32]
}
 8009834:	bf00      	nop
 8009836:	371c      	adds	r7, #28
 8009838:	46bd      	mov	sp, r7
 800983a:	bc80      	pop	{r7}
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	40012c00 	.word	0x40012c00

08009844 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a1b      	ldr	r3, [r3, #32]
 8009858:	f023 0210 	bic.w	r2, r3, #16
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800987a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	021b      	lsls	r3, r3, #8
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	4313      	orrs	r3, r2
 8009886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f023 0320 	bic.w	r3, r3, #32
 800988e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	011b      	lsls	r3, r3, #4
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	4313      	orrs	r3, r2
 800989a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a1d      	ldr	r2, [pc, #116]	@ (8009914 <TIM_OC2_SetConfig+0xd0>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d10d      	bne.n	80098c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	011b      	lsls	r3, r3, #4
 80098b2:	697a      	ldr	r2, [r7, #20]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a14      	ldr	r2, [pc, #80]	@ (8009914 <TIM_OC2_SetConfig+0xd0>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d113      	bne.n	80098f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80098ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80098d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	685a      	ldr	r2, [r3, #4]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	621a      	str	r2, [r3, #32]
}
 800990a:	bf00      	nop
 800990c:	371c      	adds	r7, #28
 800990e:	46bd      	mov	sp, r7
 8009910:	bc80      	pop	{r7}
 8009912:	4770      	bx	lr
 8009914:	40012c00 	.word	0x40012c00

08009918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009918:	b480      	push	{r7}
 800991a:	b087      	sub	sp, #28
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a1b      	ldr	r3, [r3, #32]
 800992c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f023 0303 	bic.w	r3, r3, #3
 800994e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	4313      	orrs	r3, r2
 8009958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	021b      	lsls	r3, r3, #8
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	4313      	orrs	r3, r2
 800996c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a1d      	ldr	r2, [pc, #116]	@ (80099e8 <TIM_OC3_SetConfig+0xd0>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d10d      	bne.n	8009992 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800997c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	021b      	lsls	r3, r3, #8
 8009984:	697a      	ldr	r2, [r7, #20]
 8009986:	4313      	orrs	r3, r2
 8009988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a14      	ldr	r2, [pc, #80]	@ (80099e8 <TIM_OC3_SetConfig+0xd0>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d113      	bne.n	80099c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80099a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	011b      	lsls	r3, r3, #4
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	011b      	lsls	r3, r3, #4
 80099bc:	693a      	ldr	r2, [r7, #16]
 80099be:	4313      	orrs	r3, r2
 80099c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	693a      	ldr	r2, [r7, #16]
 80099c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	685a      	ldr	r2, [r3, #4]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	621a      	str	r2, [r3, #32]
}
 80099dc:	bf00      	nop
 80099de:	371c      	adds	r7, #28
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bc80      	pop	{r7}
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop
 80099e8:	40012c00 	.word	0x40012c00

080099ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a1b      	ldr	r3, [r3, #32]
 8009a00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	69db      	ldr	r3, [r3, #28]
 8009a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	021b      	lsls	r3, r3, #8
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	031b      	lsls	r3, r3, #12
 8009a3e:	693a      	ldr	r2, [r7, #16]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a0f      	ldr	r2, [pc, #60]	@ (8009a84 <TIM_OC4_SetConfig+0x98>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d109      	bne.n	8009a60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	695b      	ldr	r3, [r3, #20]
 8009a58:	019b      	lsls	r3, r3, #6
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	621a      	str	r2, [r3, #32]
}
 8009a7a:	bf00      	nop
 8009a7c:	371c      	adds	r7, #28
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bc80      	pop	{r7}
 8009a82:	4770      	bx	lr
 8009a84:	40012c00 	.word	0x40012c00

08009a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6a1b      	ldr	r3, [r3, #32]
 8009a9e:	f023 0201 	bic.w	r2, r3, #1
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	011b      	lsls	r3, r3, #4
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f023 030a 	bic.w	r3, r3, #10
 8009ac4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	621a      	str	r2, [r3, #32]
}
 8009ada:	bf00      	nop
 8009adc:	371c      	adds	r7, #28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bc80      	pop	{r7}
 8009ae2:	4770      	bx	lr

08009ae4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6a1b      	ldr	r3, [r3, #32]
 8009af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6a1b      	ldr	r3, [r3, #32]
 8009afa:	f023 0210 	bic.w	r2, r3, #16
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	031b      	lsls	r3, r3, #12
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009b20:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	011b      	lsls	r3, r3, #4
 8009b26:	697a      	ldr	r2, [r7, #20]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	697a      	ldr	r2, [r7, #20]
 8009b36:	621a      	str	r2, [r3, #32]
}
 8009b38:	bf00      	nop
 8009b3a:	371c      	adds	r7, #28
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bc80      	pop	{r7}
 8009b40:	4770      	bx	lr

08009b42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b42:	b480      	push	{r7}
 8009b44:	b085      	sub	sp, #20
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	f043 0307 	orr.w	r3, r3, #7
 8009b64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	609a      	str	r2, [r3, #8]
}
 8009b6c:	bf00      	nop
 8009b6e:	3714      	adds	r7, #20
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bc80      	pop	{r7}
 8009b74:	4770      	bx	lr

08009b76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b76:	b480      	push	{r7}
 8009b78:	b087      	sub	sp, #28
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	60f8      	str	r0, [r7, #12]
 8009b7e:	60b9      	str	r1, [r7, #8]
 8009b80:	607a      	str	r2, [r7, #4]
 8009b82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	021a      	lsls	r2, r3, #8
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	431a      	orrs	r2, r3
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	609a      	str	r2, [r3, #8]
}
 8009baa:	bf00      	nop
 8009bac:	371c      	adds	r7, #28
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bc80      	pop	{r7}
 8009bb2:	4770      	bx	lr

08009bb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b087      	sub	sp, #28
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	f003 031f 	and.w	r3, r3, #31
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6a1a      	ldr	r2, [r3, #32]
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	43db      	mvns	r3, r3
 8009bd6:	401a      	ands	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6a1a      	ldr	r2, [r3, #32]
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	f003 031f 	and.w	r3, r3, #31
 8009be6:	6879      	ldr	r1, [r7, #4]
 8009be8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bec:	431a      	orrs	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	621a      	str	r2, [r3, #32]
}
 8009bf2:	bf00      	nop
 8009bf4:	371c      	adds	r7, #28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bc80      	pop	{r7}
 8009bfa:	4770      	bx	lr

08009bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d101      	bne.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c10:	2302      	movs	r3, #2
 8009c12:	e046      	b.n	8009ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2202      	movs	r2, #2
 8009c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a16      	ldr	r2, [pc, #88]	@ (8009cac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00e      	beq.n	8009c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c60:	d009      	beq.n	8009c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a12      	ldr	r2, [pc, #72]	@ (8009cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d004      	beq.n	8009c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a10      	ldr	r2, [pc, #64]	@ (8009cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d10c      	bne.n	8009c90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3714      	adds	r7, #20
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bc80      	pop	{r7}
 8009caa:	4770      	bx	lr
 8009cac:	40012c00 	.word	0x40012c00
 8009cb0:	40000400 	.word	0x40000400
 8009cb4:	40000800 	.word	0x40000800

08009cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bc80      	pop	{r7}
 8009cc8:	4770      	bx	lr

08009cca <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b083      	sub	sp, #12
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009cd2:	bf00      	nop
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bc80      	pop	{r7}
 8009cda:	4770      	bx	lr

08009cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e042      	b.n	8009d74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d106      	bne.n	8009d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f7f9 fe04 	bl	8003910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2224      	movs	r2, #36	@ 0x24
 8009d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68da      	ldr	r2, [r3, #12]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fd83 	bl	800a82c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	691a      	ldr	r2, [r3, #16]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	695a      	ldr	r2, [r3, #20]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68da      	ldr	r2, [r3, #12]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2220      	movs	r2, #32
 8009d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2220      	movs	r2, #32
 8009d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e024      	b.n	8009dd8 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2224      	movs	r2, #36	@ 0x24
 8009d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68da      	ldr	r2, [r3, #12]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009da4:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7f9 fe3e 	bl	8003a28 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b08a      	sub	sp, #40	@ 0x28
 8009de4:	af02      	add	r7, sp, #8
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	603b      	str	r3, [r7, #0]
 8009dec:	4613      	mov	r3, r2
 8009dee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009df0:	2300      	movs	r3, #0
 8009df2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b20      	cmp	r3, #32
 8009dfe:	d175      	bne.n	8009eec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d002      	beq.n	8009e0c <HAL_UART_Transmit+0x2c>
 8009e06:	88fb      	ldrh	r3, [r7, #6]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d101      	bne.n	8009e10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e06e      	b.n	8009eee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2221      	movs	r2, #33	@ 0x21
 8009e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e1e:	f7fa f807 	bl	8003e30 <HAL_GetTick>
 8009e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	88fa      	ldrh	r2, [r7, #6]
 8009e28:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	88fa      	ldrh	r2, [r7, #6]
 8009e2e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e38:	d108      	bne.n	8009e4c <HAL_UART_Transmit+0x6c>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d104      	bne.n	8009e4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009e42:	2300      	movs	r3, #0
 8009e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	61bb      	str	r3, [r7, #24]
 8009e4a:	e003      	b.n	8009e54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e50:	2300      	movs	r3, #0
 8009e52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009e54:	e02e      	b.n	8009eb4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	2180      	movs	r1, #128	@ 0x80
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f000 faef 	bl	800a444 <UART_WaitOnFlagUntilTimeout>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d005      	beq.n	8009e78 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2220      	movs	r2, #32
 8009e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009e74:	2303      	movs	r3, #3
 8009e76:	e03a      	b.n	8009eee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10b      	bne.n	8009e96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	881b      	ldrh	r3, [r3, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	3302      	adds	r3, #2
 8009e92:	61bb      	str	r3, [r7, #24]
 8009e94:	e007      	b.n	8009ea6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	781a      	ldrb	r2, [r3, #0]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	3b01      	subs	r3, #1
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1cb      	bne.n	8009e56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2140      	movs	r1, #64	@ 0x40
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f000 fabb 	bl	800a444 <UART_WaitOnFlagUntilTimeout>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d005      	beq.n	8009ee0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2220      	movs	r2, #32
 8009ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e006      	b.n	8009eee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2220      	movs	r2, #32
 8009ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	e000      	b.n	8009eee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009eec:	2302      	movs	r3, #2
  }
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3720      	adds	r7, #32
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b0ba      	sub	sp, #232	@ 0xe8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f2e:	f003 030f 	and.w	r3, r3, #15
 8009f32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10f      	bne.n	8009f5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f42:	f003 0320 	and.w	r3, r3, #32
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d009      	beq.n	8009f5e <HAL_UART_IRQHandler+0x66>
 8009f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f4e:	f003 0320 	and.w	r3, r3, #32
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d003      	beq.n	8009f5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 fbaa 	bl	800a6b0 <UART_Receive_IT>
      return;
 8009f5c:	e25b      	b.n	800a416 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009f5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f000 80de 	beq.w	800a124 <HAL_UART_IRQHandler+0x22c>
 8009f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f6c:	f003 0301 	and.w	r3, r3, #1
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d106      	bne.n	8009f82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f000 80d1 	beq.w	800a124 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00b      	beq.n	8009fa6 <HAL_UART_IRQHandler+0xae>
 8009f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d005      	beq.n	8009fa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f9e:	f043 0201 	orr.w	r2, r3, #1
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009faa:	f003 0304 	and.w	r3, r3, #4
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00b      	beq.n	8009fca <HAL_UART_IRQHandler+0xd2>
 8009fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fb6:	f003 0301 	and.w	r3, r3, #1
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d005      	beq.n	8009fca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fc2:	f043 0202 	orr.w	r2, r3, #2
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fce:	f003 0302 	and.w	r3, r3, #2
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00b      	beq.n	8009fee <HAL_UART_IRQHandler+0xf6>
 8009fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d005      	beq.n	8009fee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fe6:	f043 0204 	orr.w	r2, r3, #4
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ff2:	f003 0308 	and.w	r3, r3, #8
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d011      	beq.n	800a01e <HAL_UART_IRQHandler+0x126>
 8009ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ffe:	f003 0320 	and.w	r3, r3, #32
 800a002:	2b00      	cmp	r3, #0
 800a004:	d105      	bne.n	800a012 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d005      	beq.n	800a01e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a016:	f043 0208 	orr.w	r2, r3, #8
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a022:	2b00      	cmp	r3, #0
 800a024:	f000 81f2 	beq.w	800a40c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a02c:	f003 0320 	and.w	r3, r3, #32
 800a030:	2b00      	cmp	r3, #0
 800a032:	d008      	beq.n	800a046 <HAL_UART_IRQHandler+0x14e>
 800a034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a038:	f003 0320 	and.w	r3, r3, #32
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fb35 	bl	800a6b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a050:	2b00      	cmp	r3, #0
 800a052:	bf14      	ite	ne
 800a054:	2301      	movne	r3, #1
 800a056:	2300      	moveq	r3, #0
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a062:	f003 0308 	and.w	r3, r3, #8
 800a066:	2b00      	cmp	r3, #0
 800a068:	d103      	bne.n	800a072 <HAL_UART_IRQHandler+0x17a>
 800a06a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d04f      	beq.n	800a112 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fa3f 	bl	800a4f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a082:	2b00      	cmp	r3, #0
 800a084:	d041      	beq.n	800a10a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3314      	adds	r3, #20
 800a08c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a090:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a094:	e853 3f00 	ldrex	r3, [r3]
 800a098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a09c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a0a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	3314      	adds	r3, #20
 800a0ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a0b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a0b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a0be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a0c2:	e841 2300 	strex	r3, r2, [r1]
 800a0c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a0ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1d9      	bne.n	800a086 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d013      	beq.n	800a102 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0de:	4a7e      	ldr	r2, [pc, #504]	@ (800a2d8 <HAL_UART_IRQHandler+0x3e0>)
 800a0e0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fa f84a 	bl	8004180 <HAL_DMA_Abort_IT>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d016      	beq.n	800a120 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a100:	e00e      	b.n	800a120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f98a 	bl	800a41c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a108:	e00a      	b.n	800a120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f986 	bl	800a41c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a110:	e006      	b.n	800a120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f982 	bl	800a41c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a11e:	e175      	b.n	800a40c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a120:	bf00      	nop
    return;
 800a122:	e173      	b.n	800a40c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a128:	2b01      	cmp	r3, #1
 800a12a:	f040 814f 	bne.w	800a3cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a132:	f003 0310 	and.w	r3, r3, #16
 800a136:	2b00      	cmp	r3, #0
 800a138:	f000 8148 	beq.w	800a3cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a13c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a140:	f003 0310 	and.w	r3, r3, #16
 800a144:	2b00      	cmp	r3, #0
 800a146:	f000 8141 	beq.w	800a3cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a14a:	2300      	movs	r3, #0
 800a14c:	60bb      	str	r3, [r7, #8]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	60bb      	str	r3, [r7, #8]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	60bb      	str	r3, [r7, #8]
 800a15e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f000 80b6 	beq.w	800a2dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a17c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 8145 	beq.w	800a410 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a18a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a18e:	429a      	cmp	r2, r3
 800a190:	f080 813e 	bcs.w	800a410 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a19a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	2b20      	cmp	r3, #32
 800a1a4:	f000 8088 	beq.w	800a2b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	330c      	adds	r3, #12
 800a1ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a1b6:	e853 3f00 	ldrex	r3, [r3]
 800a1ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a1be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a1c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	330c      	adds	r3, #12
 800a1d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a1d4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a1d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a1e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a1e4:	e841 2300 	strex	r3, r2, [r1]
 800a1e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a1ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1d9      	bne.n	800a1a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	3314      	adds	r3, #20
 800a1fa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a1fe:	e853 3f00 	ldrex	r3, [r3]
 800a202:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a204:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a206:	f023 0301 	bic.w	r3, r3, #1
 800a20a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3314      	adds	r3, #20
 800a214:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a218:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a21c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a220:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a224:	e841 2300 	strex	r3, r2, [r1]
 800a228:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a22a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1e1      	bne.n	800a1f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	3314      	adds	r3, #20
 800a236:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a238:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a23a:	e853 3f00 	ldrex	r3, [r3]
 800a23e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a240:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a246:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3314      	adds	r3, #20
 800a250:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a254:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a256:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a258:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a25a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a25c:	e841 2300 	strex	r3, r2, [r1]
 800a260:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a262:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1e3      	bne.n	800a230 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2220      	movs	r2, #32
 800a26c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	330c      	adds	r3, #12
 800a27c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a280:	e853 3f00 	ldrex	r3, [r3]
 800a284:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a288:	f023 0310 	bic.w	r3, r3, #16
 800a28c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	330c      	adds	r3, #12
 800a296:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a29a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a29c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a2a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a2a2:	e841 2300 	strex	r3, r2, [r1]
 800a2a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a2a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1e3      	bne.n	800a276 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7f9 ff29 	bl	800410a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2202      	movs	r2, #2
 800a2bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	1ad3      	subs	r3, r2, r3
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f8ad 	bl	800a42e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a2d4:	e09c      	b.n	800a410 <HAL_UART_IRQHandler+0x518>
 800a2d6:	bf00      	nop
 800a2d8:	0800a5bb 	.word	0x0800a5bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 808e 	beq.w	800a414 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a2f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 8089 	beq.w	800a414 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	330c      	adds	r3, #12
 800a308:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a30c:	e853 3f00 	ldrex	r3, [r3]
 800a310:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a314:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a318:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	330c      	adds	r3, #12
 800a322:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a326:	647a      	str	r2, [r7, #68]	@ 0x44
 800a328:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a32c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a32e:	e841 2300 	strex	r3, r2, [r1]
 800a332:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1e3      	bne.n	800a302 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3314      	adds	r3, #20
 800a340:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a344:	e853 3f00 	ldrex	r3, [r3]
 800a348:	623b      	str	r3, [r7, #32]
   return(result);
 800a34a:	6a3b      	ldr	r3, [r7, #32]
 800a34c:	f023 0301 	bic.w	r3, r3, #1
 800a350:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	3314      	adds	r3, #20
 800a35a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a35e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a360:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a362:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a366:	e841 2300 	strex	r3, r2, [r1]
 800a36a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1e3      	bne.n	800a33a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2220      	movs	r2, #32
 800a376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	330c      	adds	r3, #12
 800a386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	e853 3f00 	ldrex	r3, [r3]
 800a38e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f023 0310 	bic.w	r3, r3, #16
 800a396:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	330c      	adds	r3, #12
 800a3a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a3a4:	61fa      	str	r2, [r7, #28]
 800a3a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a8:	69b9      	ldr	r1, [r7, #24]
 800a3aa:	69fa      	ldr	r2, [r7, #28]
 800a3ac:	e841 2300 	strex	r3, r2, [r1]
 800a3b0:	617b      	str	r3, [r7, #20]
   return(result);
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1e3      	bne.n	800a380 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a3be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f832 	bl	800a42e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a3ca:	e023      	b.n	800a414 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a3cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d009      	beq.n	800a3ec <HAL_UART_IRQHandler+0x4f4>
 800a3d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d003      	beq.n	800a3ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 f8fc 	bl	800a5e2 <UART_Transmit_IT>
    return;
 800a3ea:	e014      	b.n	800a416 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a3ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00e      	beq.n	800a416 <HAL_UART_IRQHandler+0x51e>
 800a3f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a400:	2b00      	cmp	r3, #0
 800a402:	d008      	beq.n	800a416 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f93b 	bl	800a680 <UART_EndTransmit_IT>
    return;
 800a40a:	e004      	b.n	800a416 <HAL_UART_IRQHandler+0x51e>
    return;
 800a40c:	bf00      	nop
 800a40e:	e002      	b.n	800a416 <HAL_UART_IRQHandler+0x51e>
      return;
 800a410:	bf00      	nop
 800a412:	e000      	b.n	800a416 <HAL_UART_IRQHandler+0x51e>
      return;
 800a414:	bf00      	nop
  }
}
 800a416:	37e8      	adds	r7, #232	@ 0xe8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	bc80      	pop	{r7}
 800a42c:	4770      	bx	lr

0800a42e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a42e:	b480      	push	{r7}
 800a430:	b083      	sub	sp, #12
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
 800a436:	460b      	mov	r3, r1
 800a438:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a43a:	bf00      	nop
 800a43c:	370c      	adds	r7, #12
 800a43e:	46bd      	mov	sp, r7
 800a440:	bc80      	pop	{r7}
 800a442:	4770      	bx	lr

0800a444 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	603b      	str	r3, [r7, #0]
 800a450:	4613      	mov	r3, r2
 800a452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a454:	e03b      	b.n	800a4ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a45c:	d037      	beq.n	800a4ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a45e:	f7f9 fce7 	bl	8003e30 <HAL_GetTick>
 800a462:	4602      	mov	r2, r0
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	6a3a      	ldr	r2, [r7, #32]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d302      	bcc.n	800a474 <UART_WaitOnFlagUntilTimeout+0x30>
 800a46e:	6a3b      	ldr	r3, [r7, #32]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d101      	bne.n	800a478 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a474:	2303      	movs	r3, #3
 800a476:	e03a      	b.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	f003 0304 	and.w	r3, r3, #4
 800a482:	2b00      	cmp	r3, #0
 800a484:	d023      	beq.n	800a4ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2b80      	cmp	r3, #128	@ 0x80
 800a48a:	d020      	beq.n	800a4ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2b40      	cmp	r3, #64	@ 0x40
 800a490:	d01d      	beq.n	800a4ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 0308 	and.w	r3, r3, #8
 800a49c:	2b08      	cmp	r3, #8
 800a49e:	d116      	bne.n	800a4ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	617b      	str	r3, [r7, #20]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	617b      	str	r3, [r7, #20]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	617b      	str	r3, [r7, #20]
 800a4b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 f81d 	bl	800a4f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2208      	movs	r2, #8
 800a4c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e00f      	b.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	bf0c      	ite	eq
 800a4de:	2301      	moveq	r3, #1
 800a4e0:	2300      	movne	r3, #0
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	79fb      	ldrb	r3, [r7, #7]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d0b4      	beq.n	800a456 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3718      	adds	r7, #24
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b095      	sub	sp, #84	@ 0x54
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	330c      	adds	r3, #12
 800a504:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a508:	e853 3f00 	ldrex	r3, [r3]
 800a50c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a510:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a514:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	330c      	adds	r3, #12
 800a51c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a51e:	643a      	str	r2, [r7, #64]	@ 0x40
 800a520:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a522:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a524:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a526:	e841 2300 	strex	r3, r2, [r1]
 800a52a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1e5      	bne.n	800a4fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	3314      	adds	r3, #20
 800a538:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53a:	6a3b      	ldr	r3, [r7, #32]
 800a53c:	e853 3f00 	ldrex	r3, [r3]
 800a540:	61fb      	str	r3, [r7, #28]
   return(result);
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	f023 0301 	bic.w	r3, r3, #1
 800a548:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3314      	adds	r3, #20
 800a550:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a552:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a554:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a556:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a558:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a55a:	e841 2300 	strex	r3, r2, [r1]
 800a55e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1e5      	bne.n	800a532 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d119      	bne.n	800a5a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	330c      	adds	r3, #12
 800a574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	e853 3f00 	ldrex	r3, [r3]
 800a57c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	f023 0310 	bic.w	r3, r3, #16
 800a584:	647b      	str	r3, [r7, #68]	@ 0x44
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	330c      	adds	r3, #12
 800a58c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a58e:	61ba      	str	r2, [r7, #24]
 800a590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a592:	6979      	ldr	r1, [r7, #20]
 800a594:	69ba      	ldr	r2, [r7, #24]
 800a596:	e841 2300 	strex	r3, r2, [r1]
 800a59a:	613b      	str	r3, [r7, #16]
   return(result);
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e5      	bne.n	800a56e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2220      	movs	r2, #32
 800a5a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a5b0:	bf00      	nop
 800a5b2:	3754      	adds	r7, #84	@ 0x54
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bc80      	pop	{r7}
 800a5b8:	4770      	bx	lr

0800a5ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f7ff ff21 	bl	800a41c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5da:	bf00      	nop
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b085      	sub	sp, #20
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b21      	cmp	r3, #33	@ 0x21
 800a5f4:	d13e      	bne.n	800a674 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5fe:	d114      	bne.n	800a62a <UART_Transmit_IT+0x48>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d110      	bne.n	800a62a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a1b      	ldr	r3, [r3, #32]
 800a60c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	881b      	ldrh	r3, [r3, #0]
 800a612:	461a      	mov	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a61c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	1c9a      	adds	r2, r3, #2
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	621a      	str	r2, [r3, #32]
 800a628:	e008      	b.n	800a63c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	1c59      	adds	r1, r3, #1
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	6211      	str	r1, [r2, #32]
 800a634:	781a      	ldrb	r2, [r3, #0]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a640:	b29b      	uxth	r3, r3
 800a642:	3b01      	subs	r3, #1
 800a644:	b29b      	uxth	r3, r3
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	4619      	mov	r1, r3
 800a64a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10f      	bne.n	800a670 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	68da      	ldr	r2, [r3, #12]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a65e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68da      	ldr	r2, [r3, #12]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a66e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a670:	2300      	movs	r3, #0
 800a672:	e000      	b.n	800a676 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a674:	2302      	movs	r3, #2
  }
}
 800a676:	4618      	mov	r0, r3
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bc80      	pop	{r7}
 800a67e:	4770      	bx	lr

0800a680 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68da      	ldr	r2, [r3, #12]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a696:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2220      	movs	r2, #32
 800a69c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f7f7 fa27 	bl	8001af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b08c      	sub	sp, #48	@ 0x30
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b22      	cmp	r3, #34	@ 0x22
 800a6c2:	f040 80ae 	bne.w	800a822 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6ce:	d117      	bne.n	800a700 <UART_Receive_IT+0x50>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d113      	bne.n	800a700 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6f8:	1c9a      	adds	r2, r3, #2
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	629a      	str	r2, [r3, #40]	@ 0x28
 800a6fe:	e026      	b.n	800a74e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a704:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a706:	2300      	movs	r3, #0
 800a708:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a712:	d007      	beq.n	800a724 <UART_Receive_IT+0x74>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10a      	bne.n	800a732 <UART_Receive_IT+0x82>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d106      	bne.n	800a732 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	b2da      	uxtb	r2, r3
 800a72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a72e:	701a      	strb	r2, [r3, #0]
 800a730:	e008      	b.n	800a744 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a742:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a748:	1c5a      	adds	r2, r3, #1
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a752:	b29b      	uxth	r3, r3
 800a754:	3b01      	subs	r3, #1
 800a756:	b29b      	uxth	r3, r3
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	4619      	mov	r1, r3
 800a75c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d15d      	bne.n	800a81e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68da      	ldr	r2, [r3, #12]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f022 0220 	bic.w	r2, r2, #32
 800a770:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	68da      	ldr	r2, [r3, #12]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a780:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	695a      	ldr	r2, [r3, #20]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f022 0201 	bic.w	r2, r2, #1
 800a790:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2220      	movs	r2, #32
 800a796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d135      	bne.n	800a814 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	330c      	adds	r3, #12
 800a7b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	e853 3f00 	ldrex	r3, [r3]
 800a7bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	f023 0310 	bic.w	r3, r3, #16
 800a7c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	330c      	adds	r3, #12
 800a7cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7ce:	623a      	str	r2, [r7, #32]
 800a7d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d2:	69f9      	ldr	r1, [r7, #28]
 800a7d4:	6a3a      	ldr	r2, [r7, #32]
 800a7d6:	e841 2300 	strex	r3, r2, [r1]
 800a7da:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1e5      	bne.n	800a7ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 0310 	and.w	r3, r3, #16
 800a7ec:	2b10      	cmp	r3, #16
 800a7ee:	d10a      	bne.n	800a806 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	60fb      	str	r3, [r7, #12]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	60fb      	str	r3, [r7, #12]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a80a:	4619      	mov	r1, r3
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f7ff fe0e 	bl	800a42e <HAL_UARTEx_RxEventCallback>
 800a812:	e002      	b.n	800a81a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7f7 f963 	bl	8001ae0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	e002      	b.n	800a824 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a81e:	2300      	movs	r3, #0
 800a820:	e000      	b.n	800a824 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a822:	2302      	movs	r3, #2
  }
}
 800a824:	4618      	mov	r0, r3
 800a826:	3730      	adds	r7, #48	@ 0x30
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	68da      	ldr	r2, [r3, #12]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	430a      	orrs	r2, r1
 800a848:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	689a      	ldr	r2, [r3, #8]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	431a      	orrs	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	695b      	ldr	r3, [r3, #20]
 800a858:	4313      	orrs	r3, r2
 800a85a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800a866:	f023 030c 	bic.w	r3, r3, #12
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	6812      	ldr	r2, [r2, #0]
 800a86e:	68b9      	ldr	r1, [r7, #8]
 800a870:	430b      	orrs	r3, r1
 800a872:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	699a      	ldr	r2, [r3, #24]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	430a      	orrs	r2, r1
 800a888:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a2c      	ldr	r2, [pc, #176]	@ (800a940 <UART_SetConfig+0x114>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d103      	bne.n	800a89c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a894:	f7fd f946 	bl	8007b24 <HAL_RCC_GetPCLK2Freq>
 800a898:	60f8      	str	r0, [r7, #12]
 800a89a:	e002      	b.n	800a8a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a89c:	f7fd f92e 	bl	8007afc <HAL_RCC_GetPCLK1Freq>
 800a8a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	4413      	add	r3, r2
 800a8aa:	009a      	lsls	r2, r3, #2
 800a8ac:	441a      	add	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8b8:	4a22      	ldr	r2, [pc, #136]	@ (800a944 <UART_SetConfig+0x118>)
 800a8ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a8be:	095b      	lsrs	r3, r3, #5
 800a8c0:	0119      	lsls	r1, r3, #4
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	009b      	lsls	r3, r3, #2
 800a8c8:	4413      	add	r3, r2
 800a8ca:	009a      	lsls	r2, r3, #2
 800a8cc:	441a      	add	r2, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a8d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a944 <UART_SetConfig+0x118>)
 800a8da:	fba3 0302 	umull	r0, r3, r3, r2
 800a8de:	095b      	lsrs	r3, r3, #5
 800a8e0:	2064      	movs	r0, #100	@ 0x64
 800a8e2:	fb00 f303 	mul.w	r3, r0, r3
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	011b      	lsls	r3, r3, #4
 800a8ea:	3332      	adds	r3, #50	@ 0x32
 800a8ec:	4a15      	ldr	r2, [pc, #84]	@ (800a944 <UART_SetConfig+0x118>)
 800a8ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a8f2:	095b      	lsrs	r3, r3, #5
 800a8f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a8f8:	4419      	add	r1, r3
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	4413      	add	r3, r2
 800a902:	009a      	lsls	r2, r3, #2
 800a904:	441a      	add	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a910:	4b0c      	ldr	r3, [pc, #48]	@ (800a944 <UART_SetConfig+0x118>)
 800a912:	fba3 0302 	umull	r0, r3, r3, r2
 800a916:	095b      	lsrs	r3, r3, #5
 800a918:	2064      	movs	r0, #100	@ 0x64
 800a91a:	fb00 f303 	mul.w	r3, r0, r3
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	011b      	lsls	r3, r3, #4
 800a922:	3332      	adds	r3, #50	@ 0x32
 800a924:	4a07      	ldr	r2, [pc, #28]	@ (800a944 <UART_SetConfig+0x118>)
 800a926:	fba2 2303 	umull	r2, r3, r2, r3
 800a92a:	095b      	lsrs	r3, r3, #5
 800a92c:	f003 020f 	and.w	r2, r3, #15
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	440a      	add	r2, r1
 800a936:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a938:	bf00      	nop
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	40013800 	.word	0x40013800
 800a944:	51eb851f 	.word	0x51eb851f

0800a948 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	4638      	mov	r0, r7
 800a952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3714      	adds	r7, #20
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bc80      	pop	{r7}
 800a960:	4770      	bx	lr

0800a962 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a962:	b480      	push	{r7}
 800a964:	b085      	sub	sp, #20
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a972:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800a976:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3714      	adds	r7, #20
 800a988:	46bd      	mov	sp, r7
 800a98a:	bc80      	pop	{r7}
 800a98c:	4770      	bx	lr

0800a98e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a98e:	b480      	push	{r7}
 800a990:	b085      	sub	sp, #20
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a996:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800a99a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	43db      	mvns	r3, r3
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	4013      	ands	r3, r2
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bc80      	pop	{r7}
 800a9c0:	4770      	bx	lr

0800a9c2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800a9c2:	b480      	push	{r7}
 800a9c4:	b083      	sub	sp, #12
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bc80      	pop	{r7}
 800a9d8:	4770      	bx	lr

0800a9da <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b085      	sub	sp, #20
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	60f8      	str	r0, [r7, #12]
 800a9e2:	4638      	mov	r0, r7
 800a9e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bc80      	pop	{r7}
 800aa12:	4770      	bx	lr

0800aa14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b09d      	sub	sp, #116	@ 0x74
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4413      	add	r3, r2
 800aa2e:	881b      	ldrh	r3, [r3, #0]
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800aa36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa3a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	78db      	ldrb	r3, [r3, #3]
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	d81f      	bhi.n	800aa86 <USB_ActivateEndpoint+0x72>
 800aa46:	a201      	add	r2, pc, #4	@ (adr r2, 800aa4c <USB_ActivateEndpoint+0x38>)
 800aa48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa4c:	0800aa5d 	.word	0x0800aa5d
 800aa50:	0800aa79 	.word	0x0800aa79
 800aa54:	0800aa8f 	.word	0x0800aa8f
 800aa58:	0800aa6b 	.word	0x0800aa6b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800aa5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800aa60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800aa64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800aa68:	e012      	b.n	800aa90 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800aa6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800aa6e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800aa72:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800aa76:	e00b      	b.n	800aa90 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800aa78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800aa7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800aa80:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800aa84:	e004      	b.n	800aa90 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800aa8c:	e000      	b.n	800aa90 <USB_ActivateEndpoint+0x7c>
      break;
 800aa8e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	441a      	add	r2, r3
 800aa9a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800aa9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aaa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aaa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aaaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4413      	add	r3, r2
 800aabc:	881b      	ldrh	r3, [r3, #0]
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	7812      	ldrb	r2, [r2, #0]
 800aace:	4313      	orrs	r3, r2
 800aad0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	441a      	add	r2, r3
 800aade:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800aae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aaea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aaee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	7b1b      	ldrb	r3, [r3, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f040 8178 	bne.w	800adf0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	785b      	ldrb	r3, [r3, #1]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 8084 	beq.w	800ac12 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	61bb      	str	r3, [r7, #24]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	461a      	mov	r2, r3
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	61bb      	str	r3, [r7, #24]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	011a      	lsls	r2, r3, #4
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	4413      	add	r3, r2
 800ab28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ab2c:	617b      	str	r3, [r7, #20]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	88db      	ldrh	r3, [r3, #6]
 800ab32:	085b      	lsrs	r3, r3, #1
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	b29a      	uxth	r2, r3
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4413      	add	r3, r2
 800ab48:	881b      	ldrh	r3, [r3, #0]
 800ab4a:	827b      	strh	r3, [r7, #18]
 800ab4c:	8a7b      	ldrh	r3, [r7, #18]
 800ab4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d01b      	beq.n	800ab8e <USB_ActivateEndpoint+0x17a>
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	4413      	add	r3, r2
 800ab60:	881b      	ldrh	r3, [r3, #0]
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab6c:	823b      	strh	r3, [r7, #16]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	441a      	add	r2, r3
 800ab78:	8a3b      	ldrh	r3, [r7, #16]
 800ab7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	78db      	ldrb	r3, [r3, #3]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d020      	beq.n	800abd8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4413      	add	r3, r2
 800aba0:	881b      	ldrh	r3, [r3, #0]
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abac:	81bb      	strh	r3, [r7, #12]
 800abae:	89bb      	ldrh	r3, [r7, #12]
 800abb0:	f083 0320 	eor.w	r3, r3, #32
 800abb4:	81bb      	strh	r3, [r7, #12]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	441a      	add	r2, r3
 800abc0:	89bb      	ldrh	r3, [r7, #12]
 800abc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	8013      	strh	r3, [r2, #0]
 800abd6:	e2d5      	b.n	800b184 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	881b      	ldrh	r3, [r3, #0]
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abee:	81fb      	strh	r3, [r7, #14]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	441a      	add	r2, r3
 800abfa:	89fb      	ldrh	r3, [r7, #14]
 800abfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	8013      	strh	r3, [r2, #0]
 800ac10:	e2b8      	b.n	800b184 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	461a      	mov	r2, r3
 800ac20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac22:	4413      	add	r3, r2
 800ac24:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	011a      	lsls	r2, r3, #4
 800ac2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2e:	4413      	add	r3, r2
 800ac30:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800ac34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	88db      	ldrh	r3, [r3, #6]
 800ac3a:	085b      	lsrs	r3, r3, #1
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	005b      	lsls	r3, r3, #1
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac44:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	461a      	mov	r2, r3
 800ac54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac56:	4413      	add	r3, r2
 800ac58:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	011a      	lsls	r2, r3, #4
 800ac60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac62:	4413      	add	r3, r2
 800ac64:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ac68:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6c:	881b      	ldrh	r3, [r3, #0]
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac74:	b29a      	uxth	r2, r3
 800ac76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac78:	801a      	strh	r2, [r3, #0]
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac80:	d91d      	bls.n	800acbe <USB_ActivateEndpoint+0x2aa>
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	095b      	lsrs	r3, r3, #5
 800ac88:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	691b      	ldr	r3, [r3, #16]
 800ac8e:	f003 031f 	and.w	r3, r3, #31
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d102      	bne.n	800ac9c <USB_ActivateEndpoint+0x288>
 800ac96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9e:	881b      	ldrh	r3, [r3, #0]
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	029b      	lsls	r3, r3, #10
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	4313      	orrs	r3, r2
 800acac:	b29b      	uxth	r3, r3
 800acae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acb6:	b29a      	uxth	r2, r3
 800acb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acba:	801a      	strh	r2, [r3, #0]
 800acbc:	e026      	b.n	800ad0c <USB_ActivateEndpoint+0x2f8>
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d10a      	bne.n	800acdc <USB_ActivateEndpoint+0x2c8>
 800acc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	b29b      	uxth	r3, r3
 800accc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd8:	801a      	strh	r2, [r3, #0]
 800acda:	e017      	b.n	800ad0c <USB_ActivateEndpoint+0x2f8>
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	691b      	ldr	r3, [r3, #16]
 800ace0:	085b      	lsrs	r3, r3, #1
 800ace2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	2b00      	cmp	r3, #0
 800acee:	d002      	beq.n	800acf6 <USB_ActivateEndpoint+0x2e2>
 800acf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800acf2:	3301      	adds	r3, #1
 800acf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf8:	881b      	ldrh	r3, [r3, #0]
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	029b      	lsls	r3, r3, #10
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	4313      	orrs	r3, r2
 800ad06:	b29a      	uxth	r2, r3
 800ad08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad0a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4413      	add	r3, r2
 800ad16:	881b      	ldrh	r3, [r3, #0]
 800ad18:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ad1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ad1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d01b      	beq.n	800ad5c <USB_ActivateEndpoint+0x348>
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	881b      	ldrh	r3, [r3, #0]
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad3a:	843b      	strh	r3, [r7, #32]
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	441a      	add	r2, r3
 800ad46:	8c3b      	ldrh	r3, [r7, #32]
 800ad48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ad54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d124      	bne.n	800adae <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	4413      	add	r3, r2
 800ad6e:	881b      	ldrh	r3, [r3, #0]
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad7a:	83bb      	strh	r3, [r7, #28]
 800ad7c:	8bbb      	ldrh	r3, [r7, #28]
 800ad7e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ad82:	83bb      	strh	r3, [r7, #28]
 800ad84:	8bbb      	ldrh	r3, [r7, #28]
 800ad86:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ad8a:	83bb      	strh	r3, [r7, #28]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	441a      	add	r2, r3
 800ad96:	8bbb      	ldrh	r3, [r7, #28]
 800ad98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ada0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ada4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	8013      	strh	r3, [r2, #0]
 800adac:	e1ea      	b.n	800b184 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4413      	add	r3, r2
 800adb8:	881b      	ldrh	r3, [r3, #0]
 800adba:	b29b      	uxth	r3, r3
 800adbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800adc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adc4:	83fb      	strh	r3, [r7, #30]
 800adc6:	8bfb      	ldrh	r3, [r7, #30]
 800adc8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800adcc:	83fb      	strh	r3, [r7, #30]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	441a      	add	r2, r3
 800add8:	8bfb      	ldrh	r3, [r7, #30]
 800adda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ade2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ade6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adea:	b29b      	uxth	r3, r3
 800adec:	8013      	strh	r3, [r2, #0]
 800adee:	e1c9      	b.n	800b184 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	78db      	ldrb	r3, [r3, #3]
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d11e      	bne.n	800ae36 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	881b      	ldrh	r3, [r3, #0]
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae0e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	441a      	add	r2, r3
 800ae1c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ae20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae28:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ae2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	8013      	strh	r3, [r2, #0]
 800ae34:	e01d      	b.n	800ae72 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4413      	add	r3, r2
 800ae40:	881b      	ldrh	r3, [r3, #0]
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ae48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae4c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	441a      	add	r2, r3
 800ae5a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800ae5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	461a      	mov	r2, r3
 800ae80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae82:	4413      	add	r3, r2
 800ae84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	011a      	lsls	r2, r3, #4
 800ae8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae8e:	4413      	add	r3, r2
 800ae90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae94:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	891b      	ldrh	r3, [r3, #8]
 800ae9a:	085b      	lsrs	r3, r3, #1
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	005b      	lsls	r3, r3, #1
 800aea0:	b29a      	uxth	r2, r3
 800aea2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aea4:	801a      	strh	r2, [r3, #0]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	657b      	str	r3, [r7, #84]	@ 0x54
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aeb6:	4413      	add	r3, r2
 800aeb8:	657b      	str	r3, [r7, #84]	@ 0x54
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	011a      	lsls	r2, r3, #4
 800aec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aec2:	4413      	add	r3, r2
 800aec4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800aec8:	653b      	str	r3, [r7, #80]	@ 0x50
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	895b      	ldrh	r3, [r3, #10]
 800aece:	085b      	lsrs	r3, r3, #1
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aed8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	785b      	ldrb	r3, [r3, #1]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f040 8093 	bne.w	800b00a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	881b      	ldrh	r3, [r3, #0]
 800aef0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800aef4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800aef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d01b      	beq.n	800af38 <USB_ActivateEndpoint+0x524>
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4413      	add	r3, r2
 800af0a:	881b      	ldrh	r3, [r3, #0]
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af16:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	441a      	add	r2, r3
 800af22:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800af24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800af30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af34:	b29b      	uxth	r3, r3
 800af36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	4413      	add	r3, r2
 800af42:	881b      	ldrh	r3, [r3, #0]
 800af44:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800af46:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800af48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d01b      	beq.n	800af88 <USB_ActivateEndpoint+0x574>
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	4413      	add	r3, r2
 800af5a:	881b      	ldrh	r3, [r3, #0]
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af66:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	441a      	add	r2, r3
 800af72:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800af74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af80:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800af84:	b29b      	uxth	r3, r3
 800af86:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	b29b      	uxth	r3, r3
 800af96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af9e:	873b      	strh	r3, [r7, #56]	@ 0x38
 800afa0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800afa2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800afa6:	873b      	strh	r3, [r7, #56]	@ 0x38
 800afa8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800afaa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800afae:	873b      	strh	r3, [r7, #56]	@ 0x38
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	441a      	add	r2, r3
 800afba:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800afbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afcc:	b29b      	uxth	r3, r3
 800afce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4413      	add	r3, r2
 800afda:	881b      	ldrh	r3, [r3, #0]
 800afdc:	b29b      	uxth	r3, r3
 800afde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afe6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	441a      	add	r2, r3
 800aff2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aff4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aff8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800affc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b004:	b29b      	uxth	r3, r3
 800b006:	8013      	strh	r3, [r2, #0]
 800b008:	e0bc      	b.n	800b184 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	4413      	add	r3, r2
 800b014:	881b      	ldrh	r3, [r3, #0]
 800b016:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800b01a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b01e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b022:	2b00      	cmp	r3, #0
 800b024:	d01d      	beq.n	800b062 <USB_ActivateEndpoint+0x64e>
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4413      	add	r3, r2
 800b030:	881b      	ldrh	r3, [r3, #0]
 800b032:	b29b      	uxth	r3, r3
 800b034:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b03c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	441a      	add	r2, r3
 800b04a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800b04e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b052:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b056:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b05a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b05e:	b29b      	uxth	r3, r3
 800b060:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	881b      	ldrh	r3, [r3, #0]
 800b06e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800b072:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d01d      	beq.n	800b0ba <USB_ActivateEndpoint+0x6a6>
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4413      	add	r3, r2
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b090:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b094:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	441a      	add	r2, r3
 800b0a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800b0a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	78db      	ldrb	r3, [r3, #3]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d024      	beq.n	800b10c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	4413      	add	r3, r2
 800b0cc:	881b      	ldrh	r3, [r3, #0]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0d8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800b0dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b0e0:	f083 0320 	eor.w	r3, r3, #32
 800b0e4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	441a      	add	r2, r3
 800b0f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b0f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b106:	b29b      	uxth	r3, r3
 800b108:	8013      	strh	r3, [r2, #0]
 800b10a:	e01d      	b.n	800b148 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	4413      	add	r3, r2
 800b116:	881b      	ldrh	r3, [r3, #0]
 800b118:	b29b      	uxth	r3, r3
 800b11a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b11e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b122:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	441a      	add	r2, r3
 800b130:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b134:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b138:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b13c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b144:	b29b      	uxth	r3, r3
 800b146:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	4413      	add	r3, r2
 800b152:	881b      	ldrh	r3, [r3, #0]
 800b154:	b29b      	uxth	r3, r3
 800b156:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b15a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b15e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	441a      	add	r2, r3
 800b16c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b170:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b174:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b178:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b17c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b180:	b29b      	uxth	r3, r3
 800b182:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b184:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3774      	adds	r7, #116	@ 0x74
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bc80      	pop	{r7}
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop

0800b194 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b194:	b480      	push	{r7}
 800b196:	b08d      	sub	sp, #52	@ 0x34
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	7b1b      	ldrb	r3, [r3, #12]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f040 808e 	bne.w	800b2c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	785b      	ldrb	r3, [r3, #1]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d044      	beq.n	800b23a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	4413      	add	r3, r2
 800b1ba:	881b      	ldrh	r3, [r3, #0]
 800b1bc:	81bb      	strh	r3, [r7, #12]
 800b1be:	89bb      	ldrh	r3, [r7, #12]
 800b1c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d01b      	beq.n	800b200 <USB_DeactivateEndpoint+0x6c>
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4413      	add	r3, r2
 800b1d2:	881b      	ldrh	r3, [r3, #0]
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1de:	817b      	strh	r3, [r7, #10]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	441a      	add	r2, r3
 800b1ea:	897b      	ldrh	r3, [r7, #10]
 800b1ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	881b      	ldrh	r3, [r3, #0]
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b216:	813b      	strh	r3, [r7, #8]
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	441a      	add	r2, r3
 800b222:	893b      	ldrh	r3, [r7, #8]
 800b224:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b228:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b22c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b234:	b29b      	uxth	r3, r3
 800b236:	8013      	strh	r3, [r2, #0]
 800b238:	e192      	b.n	800b560 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4413      	add	r3, r2
 800b244:	881b      	ldrh	r3, [r3, #0]
 800b246:	827b      	strh	r3, [r7, #18]
 800b248:	8a7b      	ldrh	r3, [r7, #18]
 800b24a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d01b      	beq.n	800b28a <USB_DeactivateEndpoint+0xf6>
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	4413      	add	r3, r2
 800b25c:	881b      	ldrh	r3, [r3, #0]
 800b25e:	b29b      	uxth	r3, r3
 800b260:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b268:	823b      	strh	r3, [r7, #16]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	441a      	add	r2, r3
 800b274:	8a3b      	ldrh	r3, [r7, #16]
 800b276:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b27a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b27e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b286:	b29b      	uxth	r3, r3
 800b288:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	4413      	add	r3, r2
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	b29b      	uxth	r3, r3
 800b298:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b29c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2a0:	81fb      	strh	r3, [r7, #14]
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	441a      	add	r2, r3
 800b2ac:	89fb      	ldrh	r3, [r7, #14]
 800b2ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	8013      	strh	r3, [r2, #0]
 800b2c2:	e14d      	b.n	800b560 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	785b      	ldrb	r3, [r3, #1]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f040 80a5 	bne.w	800b418 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	4413      	add	r3, r2
 800b2d8:	881b      	ldrh	r3, [r3, #0]
 800b2da:	843b      	strh	r3, [r7, #32]
 800b2dc:	8c3b      	ldrh	r3, [r7, #32]
 800b2de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d01b      	beq.n	800b31e <USB_DeactivateEndpoint+0x18a>
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	881b      	ldrh	r3, [r3, #0]
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2fc:	83fb      	strh	r3, [r7, #30]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	441a      	add	r2, r3
 800b308:	8bfb      	ldrh	r3, [r7, #30]
 800b30a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b30e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b312:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	4413      	add	r3, r2
 800b328:	881b      	ldrh	r3, [r3, #0]
 800b32a:	83bb      	strh	r3, [r7, #28]
 800b32c:	8bbb      	ldrh	r3, [r7, #28]
 800b32e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b332:	2b00      	cmp	r3, #0
 800b334:	d01b      	beq.n	800b36e <USB_DeactivateEndpoint+0x1da>
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	4413      	add	r3, r2
 800b340:	881b      	ldrh	r3, [r3, #0]
 800b342:	b29b      	uxth	r3, r3
 800b344:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b34c:	837b      	strh	r3, [r7, #26]
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	441a      	add	r2, r3
 800b358:	8b7b      	ldrh	r3, [r7, #26]
 800b35a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b35e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b366:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4413      	add	r3, r2
 800b378:	881b      	ldrh	r3, [r3, #0]
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b384:	833b      	strh	r3, [r7, #24]
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	441a      	add	r2, r3
 800b390:	8b3b      	ldrh	r3, [r7, #24]
 800b392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b396:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b39a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b39e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	4413      	add	r3, r2
 800b3b0:	881b      	ldrh	r3, [r3, #0]
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b3b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3bc:	82fb      	strh	r3, [r7, #22]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	441a      	add	r2, r3
 800b3c8:	8afb      	ldrh	r3, [r7, #22]
 800b3ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b3ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b3d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	4413      	add	r3, r2
 800b3e8:	881b      	ldrh	r3, [r3, #0]
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3f4:	82bb      	strh	r3, [r7, #20]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	441a      	add	r2, r3
 800b400:	8abb      	ldrh	r3, [r7, #20]
 800b402:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b406:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b40a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b40e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b412:	b29b      	uxth	r3, r3
 800b414:	8013      	strh	r3, [r2, #0]
 800b416:	e0a3      	b.n	800b560 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	4413      	add	r3, r2
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b426:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d01b      	beq.n	800b468 <USB_DeactivateEndpoint+0x2d4>
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	4413      	add	r3, r2
 800b43a:	881b      	ldrh	r3, [r3, #0]
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b446:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	441a      	add	r2, r3
 800b452:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b45c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b464:	b29b      	uxth	r3, r3
 800b466:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4413      	add	r3, r2
 800b472:	881b      	ldrh	r3, [r3, #0]
 800b474:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800b476:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d01b      	beq.n	800b4b8 <USB_DeactivateEndpoint+0x324>
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	4413      	add	r3, r2
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b496:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	441a      	add	r2, r3
 800b4a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b4a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4413      	add	r3, r2
 800b4c2:	881b      	ldrh	r3, [r3, #0]
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	441a      	add	r2, r3
 800b4da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b4dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b4e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	4413      	add	r3, r2
 800b4fa:	881b      	ldrh	r3, [r3, #0]
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b506:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	441a      	add	r2, r3
 800b512:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b514:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b518:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b51c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b524:	b29b      	uxth	r3, r3
 800b526:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	4413      	add	r3, r2
 800b532:	881b      	ldrh	r3, [r3, #0]
 800b534:	b29b      	uxth	r3, r3
 800b536:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b53a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b53e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	441a      	add	r2, r3
 800b54a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b54c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b550:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3734      	adds	r7, #52	@ 0x34
 800b566:	46bd      	mov	sp, r7
 800b568:	bc80      	pop	{r7}
 800b56a:	4770      	bx	lr

0800b56c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b0c2      	sub	sp, #264	@ 0x108
 800b570:	af00      	add	r7, sp, #0
 800b572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b576:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b57a:	6018      	str	r0, [r3, #0]
 800b57c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b584:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b58a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	785b      	ldrb	r3, [r3, #1]
 800b592:	2b01      	cmp	r3, #1
 800b594:	f040 86b7 	bne.w	800c306 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b59c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	699a      	ldr	r2, [r3, #24]
 800b5a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	691b      	ldr	r3, [r3, #16]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d908      	bls.n	800b5c6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b5b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b5c4:	e007      	b.n	800b5d6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b5c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b5d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	7b1b      	ldrb	r3, [r3, #12]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d13a      	bne.n	800b65c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b5e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6959      	ldr	r1, [r3, #20]
 800b5f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	88da      	ldrh	r2, [r3, #6]
 800b5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b602:	b29b      	uxth	r3, r3
 800b604:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b608:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b60c:	6800      	ldr	r0, [r0, #0]
 800b60e:	f001 fc9c 	bl	800cf4a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b616:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	613b      	str	r3, [r7, #16]
 800b61e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b622:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	461a      	mov	r2, r3
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	4413      	add	r3, r2
 800b634:	613b      	str	r3, [r7, #16]
 800b636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b63a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	011a      	lsls	r2, r3, #4
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	4413      	add	r3, r2
 800b648:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b64c:	60fb      	str	r3, [r7, #12]
 800b64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b652:	b29a      	uxth	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	801a      	strh	r2, [r3, #0]
 800b658:	f000 be1f 	b.w	800c29a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b65c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	78db      	ldrb	r3, [r3, #3]
 800b668:	2b02      	cmp	r3, #2
 800b66a:	f040 8462 	bne.w	800bf32 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b66e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	6a1a      	ldr	r2, [r3, #32]
 800b67a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b67e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	429a      	cmp	r2, r3
 800b688:	f240 83df 	bls.w	800be4a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b68c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b690:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b69a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	4413      	add	r3, r2
 800b6a6:	881b      	ldrh	r3, [r3, #0]
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6b2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b6b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	441a      	add	r2, r3
 800b6d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b6d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6dc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b6e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b6e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	6a1a      	ldr	r2, [r3, #32]
 800b6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6f8:	1ad2      	subs	r2, r2, r3
 800b6fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b70a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	4413      	add	r3, r2
 800b720:	881b      	ldrh	r3, [r3, #0]
 800b722:	b29b      	uxth	r3, r3
 800b724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f000 81c7 	beq.w	800babc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b72e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	633b      	str	r3, [r7, #48]	@ 0x30
 800b73a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b73e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	785b      	ldrb	r3, [r3, #1]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d177      	bne.n	800b83a <USB_EPStartXfer+0x2ce>
 800b74a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b74e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b75a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b764:	b29b      	uxth	r3, r3
 800b766:	461a      	mov	r2, r3
 800b768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b76a:	4413      	add	r3, r2
 800b76c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b76e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	011a      	lsls	r2, r3, #4
 800b77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b77e:	4413      	add	r3, r2
 800b780:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b784:	627b      	str	r3, [r7, #36]	@ 0x24
 800b786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b788:	881b      	ldrh	r3, [r3, #0]
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b790:	b29a      	uxth	r2, r3
 800b792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b794:	801a      	strh	r2, [r3, #0]
 800b796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b79a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b79c:	d921      	bls.n	800b7e2 <USB_EPStartXfer+0x276>
 800b79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7a2:	095b      	lsrs	r3, r3, #5
 800b7a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7ac:	f003 031f 	and.w	r3, r3, #31
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d104      	bne.n	800b7be <USB_EPStartXfer+0x252>
 800b7b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	029b      	lsls	r3, r3, #10
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7de:	801a      	strh	r2, [r3, #0]
 800b7e0:	e050      	b.n	800b884 <USB_EPStartXfer+0x318>
 800b7e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d10a      	bne.n	800b800 <USB_EPStartXfer+0x294>
 800b7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ec:	881b      	ldrh	r3, [r3, #0]
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fc:	801a      	strh	r2, [r3, #0]
 800b7fe:	e041      	b.n	800b884 <USB_EPStartXfer+0x318>
 800b800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b804:	085b      	lsrs	r3, r3, #1
 800b806:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b00      	cmp	r3, #0
 800b814:	d004      	beq.n	800b820 <USB_EPStartXfer+0x2b4>
 800b816:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b81a:	3301      	adds	r3, #1
 800b81c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b822:	881b      	ldrh	r3, [r3, #0]
 800b824:	b29a      	uxth	r2, r3
 800b826:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	029b      	lsls	r3, r3, #10
 800b82e:	b29b      	uxth	r3, r3
 800b830:	4313      	orrs	r3, r2
 800b832:	b29a      	uxth	r2, r3
 800b834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b836:	801a      	strh	r2, [r3, #0]
 800b838:	e024      	b.n	800b884 <USB_EPStartXfer+0x318>
 800b83a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b83e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	785b      	ldrb	r3, [r3, #1]
 800b846:	2b01      	cmp	r3, #1
 800b848:	d11c      	bne.n	800b884 <USB_EPStartXfer+0x318>
 800b84a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b84e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b858:	b29b      	uxth	r3, r3
 800b85a:	461a      	mov	r2, r3
 800b85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b85e:	4413      	add	r3, r2
 800b860:	633b      	str	r3, [r7, #48]	@ 0x30
 800b862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	011a      	lsls	r2, r3, #4
 800b870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b872:	4413      	add	r3, r2
 800b874:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b87e:	b29a      	uxth	r2, r3
 800b880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b882:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	895b      	ldrh	r3, [r3, #10]
 800b890:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	6959      	ldr	r1, [r3, #20]
 800b8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b8aa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b8ae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b8b2:	6800      	ldr	r0, [r0, #0]
 800b8b4:	f001 fb49 	bl	800cf4a <USB_WritePMA>
            ep->xfer_buff += len;
 800b8b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	695a      	ldr	r2, [r3, #20]
 800b8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8c8:	441a      	add	r2, r3
 800b8ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b8d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	6a1a      	ldr	r2, [r3, #32]
 800b8e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	691b      	ldr	r3, [r3, #16]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d90f      	bls.n	800b912 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b8f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	6a1a      	ldr	r2, [r3, #32]
 800b8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b902:	1ad2      	subs	r2, r2, r3
 800b904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	621a      	str	r2, [r3, #32]
 800b910:	e00e      	b.n	800b930 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	6a1b      	ldr	r3, [r3, #32]
 800b91e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2200      	movs	r2, #0
 800b92e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	785b      	ldrb	r3, [r3, #1]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d177      	bne.n	800ba30 <USB_EPStartXfer+0x4c4>
 800b940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b944:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	61bb      	str	r3, [r7, #24]
 800b94c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b950:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	461a      	mov	r2, r3
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	4413      	add	r3, r2
 800b962:	61bb      	str	r3, [r7, #24]
 800b964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	011a      	lsls	r2, r3, #4
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	4413      	add	r3, r2
 800b976:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b97a:	617b      	str	r3, [r7, #20]
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	881b      	ldrh	r3, [r3, #0]
 800b980:	b29b      	uxth	r3, r3
 800b982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b986:	b29a      	uxth	r2, r3
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	801a      	strh	r2, [r3, #0]
 800b98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b990:	2b3e      	cmp	r3, #62	@ 0x3e
 800b992:	d921      	bls.n	800b9d8 <USB_EPStartXfer+0x46c>
 800b994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b998:	095b      	lsrs	r3, r3, #5
 800b99a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b99e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9a2:	f003 031f 	and.w	r3, r3, #31
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d104      	bne.n	800b9b4 <USB_EPStartXfer+0x448>
 800b9aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9ae:	3b01      	subs	r3, #1
 800b9b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	881b      	ldrh	r3, [r3, #0]
 800b9b8:	b29a      	uxth	r2, r3
 800b9ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	029b      	lsls	r3, r3, #10
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	801a      	strh	r2, [r3, #0]
 800b9d6:	e056      	b.n	800ba86 <USB_EPStartXfer+0x51a>
 800b9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10a      	bne.n	800b9f6 <USB_EPStartXfer+0x48a>
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	881b      	ldrh	r3, [r3, #0]
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	801a      	strh	r2, [r3, #0]
 800b9f4:	e047      	b.n	800ba86 <USB_EPStartXfer+0x51a>
 800b9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9fa:	085b      	lsrs	r3, r3, #1
 800b9fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ba00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba04:	f003 0301 	and.w	r3, r3, #1
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d004      	beq.n	800ba16 <USB_EPStartXfer+0x4aa>
 800ba0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba10:	3301      	adds	r3, #1
 800ba12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	881b      	ldrh	r3, [r3, #0]
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	029b      	lsls	r3, r3, #10
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	4313      	orrs	r3, r2
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	801a      	strh	r2, [r3, #0]
 800ba2e:	e02a      	b.n	800ba86 <USB_EPStartXfer+0x51a>
 800ba30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	785b      	ldrb	r3, [r3, #1]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d122      	bne.n	800ba86 <USB_EPStartXfer+0x51a>
 800ba40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	623b      	str	r3, [r7, #32]
 800ba4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	6a3b      	ldr	r3, [r7, #32]
 800ba60:	4413      	add	r3, r2
 800ba62:	623b      	str	r3, [r7, #32]
 800ba64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	011a      	lsls	r2, r3, #4
 800ba72:	6a3b      	ldr	r3, [r7, #32]
 800ba74:	4413      	add	r3, r2
 800ba76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ba7a:	61fb      	str	r3, [r7, #28]
 800ba7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ba86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	891b      	ldrh	r3, [r3, #8]
 800ba92:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6959      	ldr	r1, [r3, #20]
 800baa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800baac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bab0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bab4:	6800      	ldr	r0, [r0, #0]
 800bab6:	f001 fa48 	bl	800cf4a <USB_WritePMA>
 800baba:	e3ee      	b.n	800c29a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800babc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	785b      	ldrb	r3, [r3, #1]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d177      	bne.n	800bbbc <USB_EPStartXfer+0x650>
 800bacc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bad0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800badc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	461a      	mov	r2, r3
 800baea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800baec:	4413      	add	r3, r2
 800baee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800baf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	011a      	lsls	r2, r3, #4
 800bafe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb00:	4413      	add	r3, r2
 800bb02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bb06:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb0a:	881b      	ldrh	r3, [r3, #0]
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb12:	b29a      	uxth	r2, r3
 800bb14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb16:	801a      	strh	r2, [r3, #0]
 800bb18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb1c:	2b3e      	cmp	r3, #62	@ 0x3e
 800bb1e:	d921      	bls.n	800bb64 <USB_EPStartXfer+0x5f8>
 800bb20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb24:	095b      	lsrs	r3, r3, #5
 800bb26:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bb2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb2e:	f003 031f 	and.w	r3, r3, #31
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d104      	bne.n	800bb40 <USB_EPStartXfer+0x5d4>
 800bb36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bb40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb42:	881b      	ldrh	r3, [r3, #0]
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	029b      	lsls	r3, r3, #10
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	4313      	orrs	r3, r2
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb5c:	b29a      	uxth	r2, r3
 800bb5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb60:	801a      	strh	r2, [r3, #0]
 800bb62:	e056      	b.n	800bc12 <USB_EPStartXfer+0x6a6>
 800bb64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d10a      	bne.n	800bb82 <USB_EPStartXfer+0x616>
 800bb6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb6e:	881b      	ldrh	r3, [r3, #0]
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb7e:	801a      	strh	r2, [r3, #0]
 800bb80:	e047      	b.n	800bc12 <USB_EPStartXfer+0x6a6>
 800bb82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb86:	085b      	lsrs	r3, r3, #1
 800bb88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d004      	beq.n	800bba2 <USB_EPStartXfer+0x636>
 800bb98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bba4:	881b      	ldrh	r3, [r3, #0]
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	029b      	lsls	r3, r3, #10
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	b29a      	uxth	r2, r3
 800bbb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbb8:	801a      	strh	r2, [r3, #0]
 800bbba:	e02a      	b.n	800bc12 <USB_EPStartXfer+0x6a6>
 800bbbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	785b      	ldrb	r3, [r3, #1]
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d122      	bne.n	800bc12 <USB_EPStartXfer+0x6a6>
 800bbcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	653b      	str	r3, [r7, #80]	@ 0x50
 800bbd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	461a      	mov	r2, r3
 800bbea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbec:	4413      	add	r3, r2
 800bbee:	653b      	str	r3, [r7, #80]	@ 0x50
 800bbf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	011a      	lsls	r2, r3, #4
 800bbfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc00:	4413      	add	r3, r2
 800bc02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bc06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bc12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	891b      	ldrh	r3, [r3, #8]
 800bc1e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	6959      	ldr	r1, [r3, #20]
 800bc2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bc38:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bc3c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bc40:	6800      	ldr	r0, [r0, #0]
 800bc42:	f001 f982 	bl	800cf4a <USB_WritePMA>
            ep->xfer_buff += len;
 800bc46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	695a      	ldr	r2, [r3, #20]
 800bc52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc56:	441a      	add	r2, r3
 800bc58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bc64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	6a1a      	ldr	r2, [r3, #32]
 800bc70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	691b      	ldr	r3, [r3, #16]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d90f      	bls.n	800bca0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800bc80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	6a1a      	ldr	r2, [r3, #32]
 800bc8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc90:	1ad2      	subs	r2, r2, r3
 800bc92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	621a      	str	r2, [r3, #32]
 800bc9e:	e00e      	b.n	800bcbe <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800bca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	6a1b      	ldr	r3, [r3, #32]
 800bcac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800bcb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bcbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	643b      	str	r3, [r7, #64]	@ 0x40
 800bcca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	785b      	ldrb	r3, [r3, #1]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d177      	bne.n	800bdca <USB_EPStartXfer+0x85e>
 800bcda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcfa:	4413      	add	r3, r2
 800bcfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bcfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	011a      	lsls	r2, r3, #4
 800bd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0e:	4413      	add	r3, r2
 800bd10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bd14:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd18:	881b      	ldrh	r3, [r3, #0]
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd20:	b29a      	uxth	r2, r3
 800bd22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd24:	801a      	strh	r2, [r3, #0]
 800bd26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd2a:	2b3e      	cmp	r3, #62	@ 0x3e
 800bd2c:	d921      	bls.n	800bd72 <USB_EPStartXfer+0x806>
 800bd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd32:	095b      	lsrs	r3, r3, #5
 800bd34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bd38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd3c:	f003 031f 	and.w	r3, r3, #31
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d104      	bne.n	800bd4e <USB_EPStartXfer+0x7e2>
 800bd44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bd4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd50:	881b      	ldrh	r3, [r3, #0]
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	029b      	lsls	r3, r3, #10
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd6a:	b29a      	uxth	r2, r3
 800bd6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd6e:	801a      	strh	r2, [r3, #0]
 800bd70:	e050      	b.n	800be14 <USB_EPStartXfer+0x8a8>
 800bd72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10a      	bne.n	800bd90 <USB_EPStartXfer+0x824>
 800bd7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd7c:	881b      	ldrh	r3, [r3, #0]
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd88:	b29a      	uxth	r2, r3
 800bd8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd8c:	801a      	strh	r2, [r3, #0]
 800bd8e:	e041      	b.n	800be14 <USB_EPStartXfer+0x8a8>
 800bd90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd94:	085b      	lsrs	r3, r3, #1
 800bd96:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bd9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd9e:	f003 0301 	and.w	r3, r3, #1
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d004      	beq.n	800bdb0 <USB_EPStartXfer+0x844>
 800bda6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bdaa:	3301      	adds	r3, #1
 800bdac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bdb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdb2:	881b      	ldrh	r3, [r3, #0]
 800bdb4:	b29a      	uxth	r2, r3
 800bdb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	029b      	lsls	r3, r3, #10
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	b29a      	uxth	r2, r3
 800bdc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdc6:	801a      	strh	r2, [r3, #0]
 800bdc8:	e024      	b.n	800be14 <USB_EPStartXfer+0x8a8>
 800bdca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	785b      	ldrb	r3, [r3, #1]
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d11c      	bne.n	800be14 <USB_EPStartXfer+0x8a8>
 800bdda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	461a      	mov	r2, r3
 800bdec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdee:	4413      	add	r3, r2
 800bdf0:	643b      	str	r3, [r7, #64]	@ 0x40
 800bdf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	011a      	lsls	r2, r3, #4
 800be00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be02:	4413      	add	r3, r2
 800be04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800be08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be0e:	b29a      	uxth	r2, r3
 800be10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800be14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	895b      	ldrh	r3, [r3, #10]
 800be20:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	6959      	ldr	r1, [r3, #20]
 800be30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be34:	b29b      	uxth	r3, r3
 800be36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800be3a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800be3e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800be42:	6800      	ldr	r0, [r0, #0]
 800be44:	f001 f881 	bl	800cf4a <USB_WritePMA>
 800be48:	e227      	b.n	800c29a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800be4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	6a1b      	ldr	r3, [r3, #32]
 800be56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800be5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	4413      	add	r3, r2
 800be74:	881b      	ldrh	r3, [r3, #0]
 800be76:	b29b      	uxth	r3, r3
 800be78:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800be7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be80:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800be84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	441a      	add	r2, r3
 800be9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800bea2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bea6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800beaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800beae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800beb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800beba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	461a      	mov	r2, r3
 800bed4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bed6:	4413      	add	r3, r2
 800bed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800beda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	011a      	lsls	r2, r3, #4
 800bee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800beea:	4413      	add	r3, r2
 800beec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bef0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bef6:	b29a      	uxth	r2, r3
 800bef8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800befa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800befc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	891b      	ldrh	r3, [r3, #8]
 800bf08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	6959      	ldr	r1, [r3, #20]
 800bf18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bf22:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bf26:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bf2a:	6800      	ldr	r0, [r0, #0]
 800bf2c:	f001 f80d 	bl	800cf4a <USB_WritePMA>
 800bf30:	e1b3      	b.n	800c29a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bf32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	6a1a      	ldr	r2, [r3, #32]
 800bf3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf42:	1ad2      	subs	r2, r2, r3
 800bf44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bf50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4413      	add	r3, r2
 800bf6a:	881b      	ldrh	r3, [r3, #0]
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	f000 80c6 	beq.w	800c104 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bf78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	673b      	str	r3, [r7, #112]	@ 0x70
 800bf84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	785b      	ldrb	r3, [r3, #1]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d177      	bne.n	800c084 <USB_EPStartXfer+0xb18>
 800bf94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bfa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bfb4:	4413      	add	r3, r2
 800bfb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bfb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	011a      	lsls	r2, r3, #4
 800bfc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bfc8:	4413      	add	r3, r2
 800bfca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bfce:	667b      	str	r3, [r7, #100]	@ 0x64
 800bfd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfd2:	881b      	ldrh	r3, [r3, #0]
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfda:	b29a      	uxth	r2, r3
 800bfdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfde:	801a      	strh	r2, [r3, #0]
 800bfe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfe4:	2b3e      	cmp	r3, #62	@ 0x3e
 800bfe6:	d921      	bls.n	800c02c <USB_EPStartXfer+0xac0>
 800bfe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfec:	095b      	lsrs	r3, r3, #5
 800bfee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bff6:	f003 031f 	and.w	r3, r3, #31
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d104      	bne.n	800c008 <USB_EPStartXfer+0xa9c>
 800bffe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c002:	3b01      	subs	r3, #1
 800c004:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c008:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c00a:	881b      	ldrh	r3, [r3, #0]
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c012:	b29b      	uxth	r3, r3
 800c014:	029b      	lsls	r3, r3, #10
 800c016:	b29b      	uxth	r3, r3
 800c018:	4313      	orrs	r3, r2
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c024:	b29a      	uxth	r2, r3
 800c026:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c028:	801a      	strh	r2, [r3, #0]
 800c02a:	e050      	b.n	800c0ce <USB_EPStartXfer+0xb62>
 800c02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10a      	bne.n	800c04a <USB_EPStartXfer+0xade>
 800c034:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c036:	881b      	ldrh	r3, [r3, #0]
 800c038:	b29b      	uxth	r3, r3
 800c03a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c03e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c042:	b29a      	uxth	r2, r3
 800c044:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c046:	801a      	strh	r2, [r3, #0]
 800c048:	e041      	b.n	800c0ce <USB_EPStartXfer+0xb62>
 800c04a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c04e:	085b      	lsrs	r3, r3, #1
 800c050:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c058:	f003 0301 	and.w	r3, r3, #1
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d004      	beq.n	800c06a <USB_EPStartXfer+0xafe>
 800c060:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c064:	3301      	adds	r3, #1
 800c066:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c06a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c06c:	881b      	ldrh	r3, [r3, #0]
 800c06e:	b29a      	uxth	r2, r3
 800c070:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c074:	b29b      	uxth	r3, r3
 800c076:	029b      	lsls	r3, r3, #10
 800c078:	b29b      	uxth	r3, r3
 800c07a:	4313      	orrs	r3, r2
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c080:	801a      	strh	r2, [r3, #0]
 800c082:	e024      	b.n	800c0ce <USB_EPStartXfer+0xb62>
 800c084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	785b      	ldrb	r3, [r3, #1]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d11c      	bne.n	800c0ce <USB_EPStartXfer+0xb62>
 800c094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c098:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0a8:	4413      	add	r3, r2
 800c0aa:	673b      	str	r3, [r7, #112]	@ 0x70
 800c0ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	011a      	lsls	r2, r3, #4
 800c0ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0bc:	4413      	add	r3, r2
 800c0be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c0c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c0ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	895b      	ldrh	r3, [r3, #10]
 800c0da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c0de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6959      	ldr	r1, [r3, #20]
 800c0ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c0f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c0f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c0fc:	6800      	ldr	r0, [r0, #0]
 800c0fe:	f000 ff24 	bl	800cf4a <USB_WritePMA>
 800c102:	e0ca      	b.n	800c29a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	785b      	ldrb	r3, [r3, #1]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d177      	bne.n	800c204 <USB_EPStartXfer+0xc98>
 800c114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c118:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c124:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c12e:	b29b      	uxth	r3, r3
 800c130:	461a      	mov	r2, r3
 800c132:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c134:	4413      	add	r3, r2
 800c136:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c13c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	011a      	lsls	r2, r3, #4
 800c146:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c148:	4413      	add	r3, r2
 800c14a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c14e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c150:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c152:	881b      	ldrh	r3, [r3, #0]
 800c154:	b29b      	uxth	r3, r3
 800c156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c15a:	b29a      	uxth	r2, r3
 800c15c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c15e:	801a      	strh	r2, [r3, #0]
 800c160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c164:	2b3e      	cmp	r3, #62	@ 0x3e
 800c166:	d921      	bls.n	800c1ac <USB_EPStartXfer+0xc40>
 800c168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c16c:	095b      	lsrs	r3, r3, #5
 800c16e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c176:	f003 031f 	and.w	r3, r3, #31
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d104      	bne.n	800c188 <USB_EPStartXfer+0xc1c>
 800c17e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c182:	3b01      	subs	r3, #1
 800c184:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c188:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c18a:	881b      	ldrh	r3, [r3, #0]
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c192:	b29b      	uxth	r3, r3
 800c194:	029b      	lsls	r3, r3, #10
 800c196:	b29b      	uxth	r3, r3
 800c198:	4313      	orrs	r3, r2
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1a4:	b29a      	uxth	r2, r3
 800c1a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1a8:	801a      	strh	r2, [r3, #0]
 800c1aa:	e05c      	b.n	800c266 <USB_EPStartXfer+0xcfa>
 800c1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10a      	bne.n	800c1ca <USB_EPStartXfer+0xc5e>
 800c1b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1b6:	881b      	ldrh	r3, [r3, #0]
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1c6:	801a      	strh	r2, [r3, #0]
 800c1c8:	e04d      	b.n	800c266 <USB_EPStartXfer+0xcfa>
 800c1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ce:	085b      	lsrs	r3, r3, #1
 800c1d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1d8:	f003 0301 	and.w	r3, r3, #1
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d004      	beq.n	800c1ea <USB_EPStartXfer+0xc7e>
 800c1e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c1ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1ec:	881b      	ldrh	r3, [r3, #0]
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	029b      	lsls	r3, r3, #10
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c200:	801a      	strh	r2, [r3, #0]
 800c202:	e030      	b.n	800c266 <USB_EPStartXfer+0xcfa>
 800c204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	785b      	ldrb	r3, [r3, #1]
 800c210:	2b01      	cmp	r3, #1
 800c212:	d128      	bne.n	800c266 <USB_EPStartXfer+0xcfa>
 800c214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c218:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c230:	b29b      	uxth	r3, r3
 800c232:	461a      	mov	r2, r3
 800c234:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c238:	4413      	add	r3, r2
 800c23a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c23e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	011a      	lsls	r2, r3, #4
 800c24c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c250:	4413      	add	r3, r2
 800c252:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c256:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c25e:	b29a      	uxth	r2, r3
 800c260:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c264:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c26a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	891b      	ldrh	r3, [r3, #8]
 800c272:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c27a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	6959      	ldr	r1, [r3, #20]
 800c282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c286:	b29b      	uxth	r3, r3
 800c288:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c28c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c290:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c294:	6800      	ldr	r0, [r0, #0]
 800c296:	f000 fe58 	bl	800cf4a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c29a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c29e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4413      	add	r3, r2
 800c2b4:	881b      	ldrh	r3, [r3, #0]
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2c0:	817b      	strh	r3, [r7, #10]
 800c2c2:	897b      	ldrh	r3, [r7, #10]
 800c2c4:	f083 0310 	eor.w	r3, r3, #16
 800c2c8:	817b      	strh	r3, [r7, #10]
 800c2ca:	897b      	ldrh	r3, [r7, #10]
 800c2cc:	f083 0320 	eor.w	r3, r3, #32
 800c2d0:	817b      	strh	r3, [r7, #10]
 800c2d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	441a      	add	r2, r3
 800c2ec:	897b      	ldrh	r3, [r7, #10]
 800c2ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	8013      	strh	r3, [r2, #0]
 800c302:	f000 bcde 	b.w	800ccc2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c30a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	7b1b      	ldrb	r3, [r3, #12]
 800c312:	2b00      	cmp	r3, #0
 800c314:	f040 80bb 	bne.w	800c48e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c31c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	699a      	ldr	r2, [r3, #24]
 800c324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	691b      	ldr	r3, [r3, #16]
 800c330:	429a      	cmp	r2, r3
 800c332:	d917      	bls.n	800c364 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800c344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	699a      	ldr	r2, [r3, #24]
 800c350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c354:	1ad2      	subs	r2, r2, r3
 800c356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c35a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	619a      	str	r2, [r3, #24]
 800c362:	e00e      	b.n	800c382 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	699b      	ldr	r3, [r3, #24]
 800c370:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800c374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2200      	movs	r2, #0
 800c380:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c386:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c3a6:	4413      	add	r3, r2
 800c3a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c3ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	011a      	lsls	r2, r3, #4
 800c3ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c3be:	4413      	add	r3, r2
 800c3c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c3c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c3c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c3cc:	881b      	ldrh	r3, [r3, #0]
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3d4:	b29a      	uxth	r2, r3
 800c3d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c3da:	801a      	strh	r2, [r3, #0]
 800c3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3e0:	2b3e      	cmp	r3, #62	@ 0x3e
 800c3e2:	d924      	bls.n	800c42e <USB_EPStartXfer+0xec2>
 800c3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3e8:	095b      	lsrs	r3, r3, #5
 800c3ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3f2:	f003 031f 	and.w	r3, r3, #31
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d104      	bne.n	800c404 <USB_EPStartXfer+0xe98>
 800c3fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c3fe:	3b01      	subs	r3, #1
 800c400:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c404:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c408:	881b      	ldrh	r3, [r3, #0]
 800c40a:	b29a      	uxth	r2, r3
 800c40c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c410:	b29b      	uxth	r3, r3
 800c412:	029b      	lsls	r3, r3, #10
 800c414:	b29b      	uxth	r3, r3
 800c416:	4313      	orrs	r3, r2
 800c418:	b29b      	uxth	r3, r3
 800c41a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c41e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c422:	b29a      	uxth	r2, r3
 800c424:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c428:	801a      	strh	r2, [r3, #0]
 800c42a:	f000 bc10 	b.w	800cc4e <USB_EPStartXfer+0x16e2>
 800c42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c432:	2b00      	cmp	r3, #0
 800c434:	d10c      	bne.n	800c450 <USB_EPStartXfer+0xee4>
 800c436:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c43a:	881b      	ldrh	r3, [r3, #0]
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c446:	b29a      	uxth	r2, r3
 800c448:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c44c:	801a      	strh	r2, [r3, #0]
 800c44e:	e3fe      	b.n	800cc4e <USB_EPStartXfer+0x16e2>
 800c450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c454:	085b      	lsrs	r3, r3, #1
 800c456:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c45e:	f003 0301 	and.w	r3, r3, #1
 800c462:	2b00      	cmp	r3, #0
 800c464:	d004      	beq.n	800c470 <USB_EPStartXfer+0xf04>
 800c466:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c46a:	3301      	adds	r3, #1
 800c46c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c474:	881b      	ldrh	r3, [r3, #0]
 800c476:	b29a      	uxth	r2, r3
 800c478:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	029b      	lsls	r3, r3, #10
 800c480:	b29b      	uxth	r3, r3
 800c482:	4313      	orrs	r3, r2
 800c484:	b29a      	uxth	r2, r3
 800c486:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c48a:	801a      	strh	r2, [r3, #0]
 800c48c:	e3df      	b.n	800cc4e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c48e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	78db      	ldrb	r3, [r3, #3]
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	f040 8218 	bne.w	800c8d0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c4a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	785b      	ldrb	r3, [r3, #1]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	f040 809d 	bne.w	800c5ec <USB_EPStartXfer+0x1080>
 800c4b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c4c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4d6:	4413      	add	r3, r2
 800c4d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c4dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	011a      	lsls	r2, r3, #4
 800c4ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4ee:	4413      	add	r3, r2
 800c4f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c4f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c4f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c4fc:	881b      	ldrh	r3, [r3, #0]
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c504:	b29a      	uxth	r2, r3
 800c506:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c50a:	801a      	strh	r2, [r3, #0]
 800c50c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	691b      	ldr	r3, [r3, #16]
 800c518:	2b3e      	cmp	r3, #62	@ 0x3e
 800c51a:	d92b      	bls.n	800c574 <USB_EPStartXfer+0x1008>
 800c51c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	691b      	ldr	r3, [r3, #16]
 800c528:	095b      	lsrs	r3, r3, #5
 800c52a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c52e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	691b      	ldr	r3, [r3, #16]
 800c53a:	f003 031f 	and.w	r3, r3, #31
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d104      	bne.n	800c54c <USB_EPStartXfer+0xfe0>
 800c542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c546:	3b01      	subs	r3, #1
 800c548:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c54c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c550:	881b      	ldrh	r3, [r3, #0]
 800c552:	b29a      	uxth	r2, r3
 800c554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c558:	b29b      	uxth	r3, r3
 800c55a:	029b      	lsls	r3, r3, #10
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	4313      	orrs	r3, r2
 800c560:	b29b      	uxth	r3, r3
 800c562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c570:	801a      	strh	r2, [r3, #0]
 800c572:	e070      	b.n	800c656 <USB_EPStartXfer+0x10ea>
 800c574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	691b      	ldr	r3, [r3, #16]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d10c      	bne.n	800c59e <USB_EPStartXfer+0x1032>
 800c584:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c588:	881b      	ldrh	r3, [r3, #0]
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c594:	b29a      	uxth	r2, r3
 800c596:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c59a:	801a      	strh	r2, [r3, #0]
 800c59c:	e05b      	b.n	800c656 <USB_EPStartXfer+0x10ea>
 800c59e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	085b      	lsrs	r3, r3, #1
 800c5ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c5b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	691b      	ldr	r3, [r3, #16]
 800c5bc:	f003 0301 	and.w	r3, r3, #1
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d004      	beq.n	800c5ce <USB_EPStartXfer+0x1062>
 800c5c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c5ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c5d2:	881b      	ldrh	r3, [r3, #0]
 800c5d4:	b29a      	uxth	r2, r3
 800c5d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	029b      	lsls	r3, r3, #10
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	b29a      	uxth	r2, r3
 800c5e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c5e8:	801a      	strh	r2, [r3, #0]
 800c5ea:	e034      	b.n	800c656 <USB_EPStartXfer+0x10ea>
 800c5ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	785b      	ldrb	r3, [r3, #1]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d12c      	bne.n	800c656 <USB_EPStartXfer+0x10ea>
 800c5fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c600:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c60a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c60e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c618:	b29b      	uxth	r3, r3
 800c61a:	461a      	mov	r2, r3
 800c61c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c620:	4413      	add	r3, r2
 800c622:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c62a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	011a      	lsls	r2, r3, #4
 800c634:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c638:	4413      	add	r3, r2
 800c63a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c63e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	691b      	ldr	r3, [r3, #16]
 800c64e:	b29a      	uxth	r2, r3
 800c650:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c654:	801a      	strh	r2, [r3, #0]
 800c656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c65a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	785b      	ldrb	r3, [r3, #1]
 800c670:	2b00      	cmp	r3, #0
 800c672:	f040 809d 	bne.w	800c7b0 <USB_EPStartXfer+0x1244>
 800c676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c67a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c692:	b29b      	uxth	r3, r3
 800c694:	461a      	mov	r2, r3
 800c696:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c69a:	4413      	add	r3, r2
 800c69c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c6a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	011a      	lsls	r2, r3, #4
 800c6ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c6b2:	4413      	add	r3, r2
 800c6b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c6b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c6bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c6c0:	881b      	ldrh	r3, [r3, #0]
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c6ce:	801a      	strh	r2, [r3, #0]
 800c6d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	2b3e      	cmp	r3, #62	@ 0x3e
 800c6de:	d92b      	bls.n	800c738 <USB_EPStartXfer+0x11cc>
 800c6e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	691b      	ldr	r3, [r3, #16]
 800c6ec:	095b      	lsrs	r3, r3, #5
 800c6ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c6f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	691b      	ldr	r3, [r3, #16]
 800c6fe:	f003 031f 	and.w	r3, r3, #31
 800c702:	2b00      	cmp	r3, #0
 800c704:	d104      	bne.n	800c710 <USB_EPStartXfer+0x11a4>
 800c706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c70a:	3b01      	subs	r3, #1
 800c70c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c710:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c714:	881b      	ldrh	r3, [r3, #0]
 800c716:	b29a      	uxth	r2, r3
 800c718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	029b      	lsls	r3, r3, #10
 800c720:	b29b      	uxth	r3, r3
 800c722:	4313      	orrs	r3, r2
 800c724:	b29b      	uxth	r3, r3
 800c726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c72a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c72e:	b29a      	uxth	r2, r3
 800c730:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c734:	801a      	strh	r2, [r3, #0]
 800c736:	e069      	b.n	800c80c <USB_EPStartXfer+0x12a0>
 800c738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c73c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	691b      	ldr	r3, [r3, #16]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10c      	bne.n	800c762 <USB_EPStartXfer+0x11f6>
 800c748:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c74c:	881b      	ldrh	r3, [r3, #0]
 800c74e:	b29b      	uxth	r3, r3
 800c750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c758:	b29a      	uxth	r2, r3
 800c75a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c75e:	801a      	strh	r2, [r3, #0]
 800c760:	e054      	b.n	800c80c <USB_EPStartXfer+0x12a0>
 800c762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	085b      	lsrs	r3, r3, #1
 800c770:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	691b      	ldr	r3, [r3, #16]
 800c780:	f003 0301 	and.w	r3, r3, #1
 800c784:	2b00      	cmp	r3, #0
 800c786:	d004      	beq.n	800c792 <USB_EPStartXfer+0x1226>
 800c788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c78c:	3301      	adds	r3, #1
 800c78e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c792:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c796:	881b      	ldrh	r3, [r3, #0]
 800c798:	b29a      	uxth	r2, r3
 800c79a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	029b      	lsls	r3, r3, #10
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	b29a      	uxth	r2, r3
 800c7a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c7ac:	801a      	strh	r2, [r3, #0]
 800c7ae:	e02d      	b.n	800c80c <USB_EPStartXfer+0x12a0>
 800c7b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	785b      	ldrb	r3, [r3, #1]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d125      	bne.n	800c80c <USB_EPStartXfer+0x12a0>
 800c7c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c7d6:	4413      	add	r3, r2
 800c7d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c7dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	011a      	lsls	r2, r3, #4
 800c7ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c7ee:	4413      	add	r3, r2
 800c7f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c7f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c7f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	691b      	ldr	r3, [r3, #16]
 800c804:	b29a      	uxth	r2, r3
 800c806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c80a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c80c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	69db      	ldr	r3, [r3, #28]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f000 8218 	beq.w	800cc4e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c81e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c82c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	4413      	add	r3, r2
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c83e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c846:	2b00      	cmp	r3, #0
 800c848:	d005      	beq.n	800c856 <USB_EPStartXfer+0x12ea>
 800c84a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c84e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10d      	bne.n	800c872 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c856:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c85a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f040 81f5 	bne.w	800cc4e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c864:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f040 81ee 	bne.w	800cc4e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	4413      	add	r3, r2
 800c88c:	881b      	ldrh	r3, [r3, #0]
 800c88e:	b29b      	uxth	r3, r3
 800c890:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c898:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c89c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	441a      	add	r2, r3
 800c8b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c8ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	8013      	strh	r3, [r2, #0]
 800c8ce:	e1be      	b.n	800cc4e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c8d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	78db      	ldrb	r3, [r3, #3]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	f040 81b4 	bne.w	800cc4a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c8e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	699a      	ldr	r2, [r3, #24]
 800c8ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d917      	bls.n	800c92e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c8fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800c90e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	699a      	ldr	r2, [r3, #24]
 800c91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c91e:	1ad2      	subs	r2, r2, r3
 800c920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	619a      	str	r2, [r3, #24]
 800c92c:	e00e      	b.n	800c94c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c92e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	699b      	ldr	r3, [r3, #24]
 800c93a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800c93e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2200      	movs	r2, #0
 800c94a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c94c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	785b      	ldrb	r3, [r3, #1]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f040 8085 	bne.w	800ca68 <USB_EPStartXfer+0x14fc>
 800c95e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c96c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c970:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	461a      	mov	r2, r3
 800c97e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c982:	4413      	add	r3, r2
 800c984:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c98c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	011a      	lsls	r2, r3, #4
 800c996:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c99a:	4413      	add	r3, r2
 800c99c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c9a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c9a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c9a8:	881b      	ldrh	r3, [r3, #0]
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c9b0:	b29a      	uxth	r2, r3
 800c9b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c9b6:	801a      	strh	r2, [r3, #0]
 800c9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9bc:	2b3e      	cmp	r3, #62	@ 0x3e
 800c9be:	d923      	bls.n	800ca08 <USB_EPStartXfer+0x149c>
 800c9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9c4:	095b      	lsrs	r3, r3, #5
 800c9c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9ce:	f003 031f 	and.w	r3, r3, #31
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d104      	bne.n	800c9e0 <USB_EPStartXfer+0x1474>
 800c9d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c9e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c9e4:	881b      	ldrh	r3, [r3, #0]
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	029b      	lsls	r3, r3, #10
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9fe:	b29a      	uxth	r2, r3
 800ca00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca04:	801a      	strh	r2, [r3, #0]
 800ca06:	e060      	b.n	800caca <USB_EPStartXfer+0x155e>
 800ca08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d10c      	bne.n	800ca2a <USB_EPStartXfer+0x14be>
 800ca10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca14:	881b      	ldrh	r3, [r3, #0]
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca26:	801a      	strh	r2, [r3, #0]
 800ca28:	e04f      	b.n	800caca <USB_EPStartXfer+0x155e>
 800ca2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca2e:	085b      	lsrs	r3, r3, #1
 800ca30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ca34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca38:	f003 0301 	and.w	r3, r3, #1
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d004      	beq.n	800ca4a <USB_EPStartXfer+0x14de>
 800ca40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca44:	3301      	adds	r3, #1
 800ca46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ca4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca4e:	881b      	ldrh	r3, [r3, #0]
 800ca50:	b29a      	uxth	r2, r3
 800ca52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	029b      	lsls	r3, r3, #10
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	b29a      	uxth	r2, r3
 800ca60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca64:	801a      	strh	r2, [r3, #0]
 800ca66:	e030      	b.n	800caca <USB_EPStartXfer+0x155e>
 800ca68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	785b      	ldrb	r3, [r3, #1]
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d128      	bne.n	800caca <USB_EPStartXfer+0x155e>
 800ca78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ca86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	461a      	mov	r2, r3
 800ca98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ca9c:	4413      	add	r3, r2
 800ca9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800caa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	011a      	lsls	r2, r3, #4
 800cab0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cab4:	4413      	add	r3, r2
 800cab6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800caba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cac2:	b29a      	uxth	r2, r3
 800cac4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800cac8:	801a      	strh	r2, [r3, #0]
 800caca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cace:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cadc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	785b      	ldrb	r3, [r3, #1]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	f040 8085 	bne.w	800cbf4 <USB_EPStartXfer+0x1688>
 800caea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800caf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cafc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	461a      	mov	r2, r3
 800cb0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800cb0e:	4413      	add	r3, r2
 800cb10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cb14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	011a      	lsls	r2, r3, #4
 800cb22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800cb26:	4413      	add	r3, r2
 800cb28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800cb2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cb30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb34:	881b      	ldrh	r3, [r3, #0]
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb42:	801a      	strh	r2, [r3, #0]
 800cb44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb48:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb4a:	d923      	bls.n	800cb94 <USB_EPStartXfer+0x1628>
 800cb4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb50:	095b      	lsrs	r3, r3, #5
 800cb52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cb56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb5a:	f003 031f 	and.w	r3, r3, #31
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d104      	bne.n	800cb6c <USB_EPStartXfer+0x1600>
 800cb62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cb66:	3b01      	subs	r3, #1
 800cb68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cb6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb70:	881b      	ldrh	r3, [r3, #0]
 800cb72:	b29a      	uxth	r2, r3
 800cb74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	029b      	lsls	r3, r3, #10
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb90:	801a      	strh	r2, [r3, #0]
 800cb92:	e05c      	b.n	800cc4e <USB_EPStartXfer+0x16e2>
 800cb94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10c      	bne.n	800cbb6 <USB_EPStartXfer+0x164a>
 800cb9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cba0:	881b      	ldrh	r3, [r3, #0]
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbac:	b29a      	uxth	r2, r3
 800cbae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cbb2:	801a      	strh	r2, [r3, #0]
 800cbb4:	e04b      	b.n	800cc4e <USB_EPStartXfer+0x16e2>
 800cbb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbba:	085b      	lsrs	r3, r3, #1
 800cbbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cbc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbc4:	f003 0301 	and.w	r3, r3, #1
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d004      	beq.n	800cbd6 <USB_EPStartXfer+0x166a>
 800cbcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cbd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cbda:	881b      	ldrh	r3, [r3, #0]
 800cbdc:	b29a      	uxth	r2, r3
 800cbde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	029b      	lsls	r3, r3, #10
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	b29a      	uxth	r2, r3
 800cbec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cbf0:	801a      	strh	r2, [r3, #0]
 800cbf2:	e02c      	b.n	800cc4e <USB_EPStartXfer+0x16e2>
 800cbf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	785b      	ldrb	r3, [r3, #1]
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d124      	bne.n	800cc4e <USB_EPStartXfer+0x16e2>
 800cc04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	461a      	mov	r2, r3
 800cc16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cc1a:	4413      	add	r3, r2
 800cc1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cc20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	011a      	lsls	r2, r3, #4
 800cc2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cc32:	4413      	add	r3, r2
 800cc34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800cc38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cc3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc40:	b29a      	uxth	r2, r3
 800cc42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cc46:	801a      	strh	r2, [r3, #0]
 800cc48:	e001      	b.n	800cc4e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e03a      	b.n	800ccc4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cc4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	881b      	ldrh	r3, [r3, #0]
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cc70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc74:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cc78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cc7c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cc80:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cc84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cc88:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cc8c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cc90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	441a      	add	r2, r3
 800ccaa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ccae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ccb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ccb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ccc2:	2300      	movs	r3, #0
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ccce:	b480      	push	{r7}
 800ccd0:	b085      	sub	sp, #20
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
 800ccd6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	785b      	ldrb	r3, [r3, #1]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d020      	beq.n	800cd22 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	4413      	add	r3, r2
 800ccea:	881b      	ldrh	r3, [r3, #0]
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ccf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccf6:	81bb      	strh	r3, [r7, #12]
 800ccf8:	89bb      	ldrh	r3, [r7, #12]
 800ccfa:	f083 0310 	eor.w	r3, r3, #16
 800ccfe:	81bb      	strh	r3, [r7, #12]
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	441a      	add	r2, r3
 800cd0a:	89bb      	ldrh	r3, [r7, #12]
 800cd0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	8013      	strh	r3, [r2, #0]
 800cd20:	e01f      	b.n	800cd62 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	4413      	add	r3, r2
 800cd2c:	881b      	ldrh	r3, [r3, #0]
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd38:	81fb      	strh	r3, [r7, #14]
 800cd3a:	89fb      	ldrh	r3, [r7, #14]
 800cd3c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cd40:	81fb      	strh	r3, [r7, #14]
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	441a      	add	r2, r3
 800cd4c:	89fb      	ldrh	r3, [r7, #14]
 800cd4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cd62:	2300      	movs	r3, #0
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3714      	adds	r7, #20
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bc80      	pop	{r7}
 800cd6c:	4770      	bx	lr

0800cd6e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cd6e:	b480      	push	{r7}
 800cd70:	b087      	sub	sp, #28
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
 800cd76:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	7b1b      	ldrb	r3, [r3, #12]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	f040 809d 	bne.w	800cebc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	785b      	ldrb	r3, [r3, #1]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d04c      	beq.n	800ce24 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	4413      	add	r3, r2
 800cd94:	881b      	ldrh	r3, [r3, #0]
 800cd96:	823b      	strh	r3, [r7, #16]
 800cd98:	8a3b      	ldrh	r3, [r7, #16]
 800cd9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d01b      	beq.n	800cdda <USB_EPClearStall+0x6c>
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	4413      	add	r3, r2
 800cdac:	881b      	ldrh	r3, [r3, #0]
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdb8:	81fb      	strh	r3, [r7, #14]
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	441a      	add	r2, r3
 800cdc4:	89fb      	ldrh	r3, [r7, #14]
 800cdc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdd2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	78db      	ldrb	r3, [r3, #3]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d06c      	beq.n	800cebc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	4413      	add	r3, r2
 800cdec:	881b      	ldrh	r3, [r3, #0]
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdf8:	81bb      	strh	r3, [r7, #12]
 800cdfa:	89bb      	ldrh	r3, [r7, #12]
 800cdfc:	f083 0320 	eor.w	r3, r3, #32
 800ce00:	81bb      	strh	r3, [r7, #12]
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	441a      	add	r2, r3
 800ce0c:	89bb      	ldrh	r3, [r7, #12]
 800ce0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	8013      	strh	r3, [r2, #0]
 800ce22:	e04b      	b.n	800cebc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	4413      	add	r3, r2
 800ce2e:	881b      	ldrh	r3, [r3, #0]
 800ce30:	82fb      	strh	r3, [r7, #22]
 800ce32:	8afb      	ldrh	r3, [r7, #22]
 800ce34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d01b      	beq.n	800ce74 <USB_EPClearStall+0x106>
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4413      	add	r3, r2
 800ce46:	881b      	ldrh	r3, [r3, #0]
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce52:	82bb      	strh	r3, [r7, #20]
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	441a      	add	r2, r3
 800ce5e:	8abb      	ldrh	r3, [r7, #20]
 800ce60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ce6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	4413      	add	r3, r2
 800ce7e:	881b      	ldrh	r3, [r3, #0]
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ce86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce8a:	827b      	strh	r3, [r7, #18]
 800ce8c:	8a7b      	ldrh	r3, [r7, #18]
 800ce8e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ce92:	827b      	strh	r3, [r7, #18]
 800ce94:	8a7b      	ldrh	r3, [r7, #18]
 800ce96:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ce9a:	827b      	strh	r3, [r7, #18]
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	441a      	add	r2, r3
 800cea6:	8a7b      	ldrh	r3, [r7, #18]
 800cea8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ceac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ceb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ceb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	371c      	adds	r7, #28
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bc80      	pop	{r7}
 800cec6:	4770      	bx	lr

0800cec8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	460b      	mov	r3, r1
 800ced2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ced4:	78fb      	ldrb	r3, [r7, #3]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d103      	bne.n	800cee2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2280      	movs	r2, #128	@ 0x80
 800cede:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800cee2:	2300      	movs	r3, #0
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bc80      	pop	{r7}
 800ceec:	4770      	bx	lr

0800ceee <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ceee:	b480      	push	{r7}
 800cef0:	b083      	sub	sp, #12
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800cef6:	2300      	movs	r3, #0
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	370c      	adds	r7, #12
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bc80      	pop	{r7}
 800cf00:	4770      	bx	lr

0800cf02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800cf02:	b480      	push	{r7}
 800cf04:	b083      	sub	sp, #12
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800cf0a:	2300      	movs	r3, #0
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bc80      	pop	{r7}
 800cf14:	4770      	bx	lr

0800cf16 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800cf16:	b480      	push	{r7}
 800cf18:	b085      	sub	sp, #20
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cf28:	68fb      	ldr	r3, [r7, #12]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3714      	adds	r7, #20
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bc80      	pop	{r7}
 800cf32:	4770      	bx	lr

0800cf34 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bc80      	pop	{r7}
 800cf48:	4770      	bx	lr

0800cf4a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cf4a:	b480      	push	{r7}
 800cf4c:	b08b      	sub	sp, #44	@ 0x2c
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	60f8      	str	r0, [r7, #12]
 800cf52:	60b9      	str	r1, [r7, #8]
 800cf54:	4611      	mov	r1, r2
 800cf56:	461a      	mov	r2, r3
 800cf58:	460b      	mov	r3, r1
 800cf5a:	80fb      	strh	r3, [r7, #6]
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cf60:	88bb      	ldrh	r3, [r7, #4]
 800cf62:	3301      	adds	r3, #1
 800cf64:	085b      	lsrs	r3, r3, #1
 800cf66:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cf70:	88fb      	ldrh	r3, [r7, #6]
 800cf72:	005a      	lsls	r2, r3, #1
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	4413      	add	r3, r2
 800cf78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cf7c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf82:	e01e      	b.n	800cfc2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800cf84:	69fb      	ldr	r3, [r7, #28]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	021b      	lsls	r3, r3, #8
 800cf92:	b21a      	sxth	r2, r3
 800cf94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	b21b      	sxth	r3, r3
 800cf9c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800cf9e:	6a3b      	ldr	r3, [r7, #32]
 800cfa0:	8a7a      	ldrh	r2, [r7, #18]
 800cfa2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cfa4:	6a3b      	ldr	r3, [r7, #32]
 800cfa6:	3302      	adds	r3, #2
 800cfa8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800cfaa:	6a3b      	ldr	r3, [r7, #32]
 800cfac:	3302      	adds	r3, #2
 800cfae:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800cfb6:	69fb      	ldr	r3, [r7, #28]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cfbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d1dd      	bne.n	800cf84 <USB_WritePMA+0x3a>
  }
}
 800cfc8:	bf00      	nop
 800cfca:	bf00      	nop
 800cfcc:	372c      	adds	r7, #44	@ 0x2c
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bc80      	pop	{r7}
 800cfd2:	4770      	bx	lr

0800cfd4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b08b      	sub	sp, #44	@ 0x2c
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	4611      	mov	r1, r2
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	80fb      	strh	r3, [r7, #6]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cfea:	88bb      	ldrh	r3, [r7, #4]
 800cfec:	085b      	lsrs	r3, r3, #1
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cffa:	88fb      	ldrh	r3, [r7, #6]
 800cffc:	005a      	lsls	r2, r3, #1
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	4413      	add	r3, r2
 800d002:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d006:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d00c:	e01b      	b.n	800d046 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d00e:	6a3b      	ldr	r3, [r7, #32]
 800d010:	881b      	ldrh	r3, [r3, #0]
 800d012:	b29b      	uxth	r3, r3
 800d014:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d016:	6a3b      	ldr	r3, [r7, #32]
 800d018:	3302      	adds	r3, #2
 800d01a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	b2da      	uxtb	r2, r3
 800d020:	69fb      	ldr	r3, [r7, #28]
 800d022:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	3301      	adds	r3, #1
 800d028:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	0a1b      	lsrs	r3, r3, #8
 800d02e:	b2da      	uxtb	r2, r3
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d034:	69fb      	ldr	r3, [r7, #28]
 800d036:	3301      	adds	r3, #1
 800d038:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800d03a:	6a3b      	ldr	r3, [r7, #32]
 800d03c:	3302      	adds	r3, #2
 800d03e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800d040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d042:	3b01      	subs	r3, #1
 800d044:	627b      	str	r3, [r7, #36]	@ 0x24
 800d046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1e0      	bne.n	800d00e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d04c:	88bb      	ldrh	r3, [r7, #4]
 800d04e:	f003 0301 	and.w	r3, r3, #1
 800d052:	b29b      	uxth	r3, r3
 800d054:	2b00      	cmp	r3, #0
 800d056:	d007      	beq.n	800d068 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800d058:	6a3b      	ldr	r3, [r7, #32]
 800d05a:	881b      	ldrh	r3, [r3, #0]
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	b2da      	uxtb	r2, r3
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	701a      	strb	r2, [r3, #0]
  }
}
 800d068:	bf00      	nop
 800d06a:	372c      	adds	r7, #44	@ 0x2c
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bc80      	pop	{r7}
 800d070:	4770      	bx	lr

0800d072 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d072:	b580      	push	{r7, lr}
 800d074:	b084      	sub	sp, #16
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
 800d07a:	460b      	mov	r3, r1
 800d07c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d07e:	2300      	movs	r3, #0
 800d080:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	7c1b      	ldrb	r3, [r3, #16]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d115      	bne.n	800d0b6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d08a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d08e:	2202      	movs	r2, #2
 800d090:	2181      	movs	r1, #129	@ 0x81
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f001 fe33 	bl	800ecfe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d09e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d0a2:	2202      	movs	r2, #2
 800d0a4:	2101      	movs	r1, #1
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f001 fe29 	bl	800ecfe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800d0b4:	e012      	b.n	800d0dc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d0b6:	2340      	movs	r3, #64	@ 0x40
 800d0b8:	2202      	movs	r2, #2
 800d0ba:	2181      	movs	r1, #129	@ 0x81
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f001 fe1e 	bl	800ecfe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d0c8:	2340      	movs	r3, #64	@ 0x40
 800d0ca:	2202      	movs	r2, #2
 800d0cc:	2101      	movs	r1, #1
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f001 fe15 	bl	800ecfe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d0dc:	2308      	movs	r3, #8
 800d0de:	2203      	movs	r2, #3
 800d0e0:	2182      	movs	r1, #130	@ 0x82
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f001 fe0b 	bl	800ecfe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d0ee:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d0f2:	f001 ff2b 	bl	800ef4c <USBD_static_malloc>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d104:	2b00      	cmp	r3, #0
 800d106:	d102      	bne.n	800d10e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800d108:	2301      	movs	r3, #1
 800d10a:	73fb      	strb	r3, [r7, #15]
 800d10c:	e026      	b.n	800d15c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d114:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	2200      	movs	r2, #0
 800d124:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	2200      	movs	r2, #0
 800d12c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	7c1b      	ldrb	r3, [r3, #16]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d109      	bne.n	800d14c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d13e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d142:	2101      	movs	r1, #1
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f001 feca 	bl	800eede <USBD_LL_PrepareReceive>
 800d14a:	e007      	b.n	800d15c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d152:	2340      	movs	r3, #64	@ 0x40
 800d154:	2101      	movs	r1, #1
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f001 fec1 	bl	800eede <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800d15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b084      	sub	sp, #16
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
 800d16e:	460b      	mov	r3, r1
 800d170:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d172:	2300      	movs	r3, #0
 800d174:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d176:	2181      	movs	r1, #129	@ 0x81
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f001 fde6 	bl	800ed4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d184:	2101      	movs	r1, #1
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f001 fddf 	bl	800ed4a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2200      	movs	r2, #0
 800d190:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d194:	2182      	movs	r1, #130	@ 0x82
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f001 fdd7 	bl	800ed4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00e      	beq.n	800d1ca <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f001 fed1 	bl	800ef64 <USBD_static_free>
    pdev->pClassData = NULL;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800d1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3710      	adds	r7, #16
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b086      	sub	sp, #24
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1e4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d039      	beq.n	800d272 <USBD_CDC_Setup+0x9e>
 800d1fe:	2b20      	cmp	r3, #32
 800d200:	d17f      	bne.n	800d302 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	88db      	ldrh	r3, [r3, #6]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d029      	beq.n	800d25e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	b25b      	sxtb	r3, r3
 800d210:	2b00      	cmp	r3, #0
 800d212:	da11      	bge.n	800d238 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d21a:	689b      	ldr	r3, [r3, #8]
 800d21c:	683a      	ldr	r2, [r7, #0]
 800d21e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800d220:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d222:	683a      	ldr	r2, [r7, #0]
 800d224:	88d2      	ldrh	r2, [r2, #6]
 800d226:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d228:	6939      	ldr	r1, [r7, #16]
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	88db      	ldrh	r3, [r3, #6]
 800d22e:	461a      	mov	r2, r3
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f001 f9d5 	bl	800e5e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800d236:	e06b      	b.n	800d310 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	785a      	ldrb	r2, [r3, #1]
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	88db      	ldrh	r3, [r3, #6]
 800d246:	b2da      	uxtb	r2, r3
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d24e:	6939      	ldr	r1, [r7, #16]
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	88db      	ldrh	r3, [r3, #6]
 800d254:	461a      	mov	r2, r3
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f001 f9f0 	bl	800e63c <USBD_CtlPrepareRx>
      break;
 800d25c:	e058      	b.n	800d310 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	683a      	ldr	r2, [r7, #0]
 800d268:	7850      	ldrb	r0, [r2, #1]
 800d26a:	2200      	movs	r2, #0
 800d26c:	6839      	ldr	r1, [r7, #0]
 800d26e:	4798      	blx	r3
      break;
 800d270:	e04e      	b.n	800d310 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	785b      	ldrb	r3, [r3, #1]
 800d276:	2b0b      	cmp	r3, #11
 800d278:	d02e      	beq.n	800d2d8 <USBD_CDC_Setup+0x104>
 800d27a:	2b0b      	cmp	r3, #11
 800d27c:	dc38      	bgt.n	800d2f0 <USBD_CDC_Setup+0x11c>
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d002      	beq.n	800d288 <USBD_CDC_Setup+0xb4>
 800d282:	2b0a      	cmp	r3, #10
 800d284:	d014      	beq.n	800d2b0 <USBD_CDC_Setup+0xdc>
 800d286:	e033      	b.n	800d2f0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d28e:	2b03      	cmp	r3, #3
 800d290:	d107      	bne.n	800d2a2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800d292:	f107 030c 	add.w	r3, r7, #12
 800d296:	2202      	movs	r2, #2
 800d298:	4619      	mov	r1, r3
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f001 f9a0 	bl	800e5e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2a0:	e02e      	b.n	800d300 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800d2a2:	6839      	ldr	r1, [r7, #0]
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f001 f931 	bl	800e50c <USBD_CtlError>
            ret = USBD_FAIL;
 800d2aa:	2302      	movs	r3, #2
 800d2ac:	75fb      	strb	r3, [r7, #23]
          break;
 800d2ae:	e027      	b.n	800d300 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2b6:	2b03      	cmp	r3, #3
 800d2b8:	d107      	bne.n	800d2ca <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800d2ba:	f107 030f 	add.w	r3, r7, #15
 800d2be:	2201      	movs	r2, #1
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f001 f98c 	bl	800e5e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2c8:	e01a      	b.n	800d300 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800d2ca:	6839      	ldr	r1, [r7, #0]
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f001 f91d 	bl	800e50c <USBD_CtlError>
            ret = USBD_FAIL;
 800d2d2:	2302      	movs	r3, #2
 800d2d4:	75fb      	strb	r3, [r7, #23]
          break;
 800d2d6:	e013      	b.n	800d300 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2de:	2b03      	cmp	r3, #3
 800d2e0:	d00d      	beq.n	800d2fe <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800d2e2:	6839      	ldr	r1, [r7, #0]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f001 f911 	bl	800e50c <USBD_CtlError>
            ret = USBD_FAIL;
 800d2ea:	2302      	movs	r3, #2
 800d2ec:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d2ee:	e006      	b.n	800d2fe <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800d2f0:	6839      	ldr	r1, [r7, #0]
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f001 f90a 	bl	800e50c <USBD_CtlError>
          ret = USBD_FAIL;
 800d2f8:	2302      	movs	r3, #2
 800d2fa:	75fb      	strb	r3, [r7, #23]
          break;
 800d2fc:	e000      	b.n	800d300 <USBD_CDC_Setup+0x12c>
          break;
 800d2fe:	bf00      	nop
      }
      break;
 800d300:	e006      	b.n	800d310 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d302:	6839      	ldr	r1, [r7, #0]
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f001 f901 	bl	800e50c <USBD_CtlError>
      ret = USBD_FAIL;
 800d30a:	2302      	movs	r3, #2
 800d30c:	75fb      	strb	r3, [r7, #23]
      break;
 800d30e:	bf00      	nop
  }

  return ret;
 800d310:	7dfb      	ldrb	r3, [r7, #23]
}
 800d312:	4618      	mov	r0, r3
 800d314:	3718      	adds	r7, #24
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}

0800d31a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d31a:	b580      	push	{r7, lr}
 800d31c:	b084      	sub	sp, #16
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
 800d322:	460b      	mov	r3, r1
 800d324:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d32c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d334:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d03a      	beq.n	800d3b6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d340:	78fa      	ldrb	r2, [r7, #3]
 800d342:	6879      	ldr	r1, [r7, #4]
 800d344:	4613      	mov	r3, r2
 800d346:	009b      	lsls	r3, r3, #2
 800d348:	4413      	add	r3, r2
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	440b      	add	r3, r1
 800d34e:	331c      	adds	r3, #28
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d029      	beq.n	800d3aa <USBD_CDC_DataIn+0x90>
 800d356:	78fa      	ldrb	r2, [r7, #3]
 800d358:	6879      	ldr	r1, [r7, #4]
 800d35a:	4613      	mov	r3, r2
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	4413      	add	r3, r2
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	440b      	add	r3, r1
 800d364:	331c      	adds	r3, #28
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	78f9      	ldrb	r1, [r7, #3]
 800d36a:	68b8      	ldr	r0, [r7, #8]
 800d36c:	460b      	mov	r3, r1
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	440b      	add	r3, r1
 800d372:	00db      	lsls	r3, r3, #3
 800d374:	4403      	add	r3, r0
 800d376:	3320      	adds	r3, #32
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	fbb2 f1f3 	udiv	r1, r2, r3
 800d37e:	fb01 f303 	mul.w	r3, r1, r3
 800d382:	1ad3      	subs	r3, r2, r3
 800d384:	2b00      	cmp	r3, #0
 800d386:	d110      	bne.n	800d3aa <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d388:	78fa      	ldrb	r2, [r7, #3]
 800d38a:	6879      	ldr	r1, [r7, #4]
 800d38c:	4613      	mov	r3, r2
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	4413      	add	r3, r2
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	440b      	add	r3, r1
 800d396:	331c      	adds	r3, #28
 800d398:	2200      	movs	r2, #0
 800d39a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d39c:	78f9      	ldrb	r1, [r7, #3]
 800d39e:	2300      	movs	r3, #0
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f001 fd78 	bl	800ee98 <USBD_LL_Transmit>
 800d3a8:	e003      	b.n	800d3b2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	e000      	b.n	800d3b8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800d3b6:	2302      	movs	r3, #2
  }
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3d2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d3d4:	78fb      	ldrb	r3, [r7, #3]
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f001 fda3 	bl	800ef24 <USBD_LL_GetRxDataSize>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00d      	beq.n	800d40c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d3f6:	68db      	ldr	r3, [r3, #12]
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d3fe:	68fa      	ldr	r2, [r7, #12]
 800d400:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d404:	4611      	mov	r1, r2
 800d406:	4798      	blx	r3

    return USBD_OK;
 800d408:	2300      	movs	r3, #0
 800d40a:	e000      	b.n	800d40e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800d40c:	2302      	movs	r3, #2
  }
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b084      	sub	sp, #16
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d424:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d014      	beq.n	800d45a <USBD_CDC_EP0_RxReady+0x44>
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d436:	2bff      	cmp	r3, #255	@ 0xff
 800d438:	d00f      	beq.n	800d45a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	68fa      	ldr	r2, [r7, #12]
 800d444:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800d448:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d44a:	68fa      	ldr	r2, [r7, #12]
 800d44c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d450:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	22ff      	movs	r2, #255	@ 0xff
 800d456:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800d45a:	2300      	movs	r3, #0
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3710      	adds	r7, #16
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2243      	movs	r2, #67	@ 0x43
 800d470:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d472:	4b03      	ldr	r3, [pc, #12]	@ (800d480 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d474:	4618      	mov	r0, r3
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	bc80      	pop	{r7}
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop
 800d480:	20000094 	.word	0x20000094

0800d484 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2243      	movs	r2, #67	@ 0x43
 800d490:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d492:	4b03      	ldr	r3, [pc, #12]	@ (800d4a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d494:	4618      	mov	r0, r3
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	bc80      	pop	{r7}
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop
 800d4a0:	20000050 	.word	0x20000050

0800d4a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2243      	movs	r2, #67	@ 0x43
 800d4b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d4b2:	4b03      	ldr	r3, [pc, #12]	@ (800d4c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bc80      	pop	{r7}
 800d4bc:	4770      	bx	lr
 800d4be:	bf00      	nop
 800d4c0:	200000d8 	.word	0x200000d8

0800d4c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	220a      	movs	r2, #10
 800d4d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d4d2:	4b03      	ldr	r3, [pc, #12]	@ (800d4e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bc80      	pop	{r7}
 800d4dc:	4770      	bx	lr
 800d4de:	bf00      	nop
 800d4e0:	2000000c 	.word	0x2000000c

0800d4e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d4ee:	2302      	movs	r3, #2
 800d4f0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d005      	beq.n	800d504 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	683a      	ldr	r2, [r7, #0]
 800d4fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800d500:	2300      	movs	r3, #0
 800d502:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d504:	7bfb      	ldrb	r3, [r7, #15]
}
 800d506:	4618      	mov	r0, r3
 800d508:	3714      	adds	r7, #20
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bc80      	pop	{r7}
 800d50e:	4770      	bx	lr

0800d510 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800d510:	b480      	push	{r7}
 800d512:	b087      	sub	sp, #28
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	4613      	mov	r3, r2
 800d51c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d524:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	68ba      	ldr	r2, [r7, #8]
 800d52a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d52e:	88fa      	ldrh	r2, [r7, #6]
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800d536:	2300      	movs	r3, #0
}
 800d538:	4618      	mov	r0, r3
 800d53a:	371c      	adds	r7, #28
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bc80      	pop	{r7}
 800d540:	4770      	bx	lr

0800d542 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800d542:	b480      	push	{r7}
 800d544:	b085      	sub	sp, #20
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
 800d54a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d552:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800d55c:	2300      	movs	r3, #0
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3714      	adds	r7, #20
 800d562:	46bd      	mov	sp, r7
 800d564:	bc80      	pop	{r7}
 800d566:	4770      	bx	lr

0800d568 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b084      	sub	sp, #16
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d576:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d017      	beq.n	800d5b2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	7c1b      	ldrb	r3, [r3, #16]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d109      	bne.n	800d59e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d594:	2101      	movs	r1, #1
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f001 fca1 	bl	800eede <USBD_LL_PrepareReceive>
 800d59c:	e007      	b.n	800d5ae <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d5a4:	2340      	movs	r3, #64	@ 0x40
 800d5a6:	2101      	movs	r1, #1
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f001 fc98 	bl	800eede <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	e000      	b.n	800d5b4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d5b2:	2302      	movs	r3, #2
  }
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3710      	adds	r7, #16
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d101      	bne.n	800d5d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d5d0:	2302      	movs	r3, #2
 800d5d2:	e01a      	b.n	800d60a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d003      	beq.n	800d5e6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d003      	beq.n	800d5f4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	68ba      	ldr	r2, [r7, #8]
 800d5f0:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	79fa      	ldrb	r2, [r7, #7]
 800d600:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d602:	68f8      	ldr	r0, [r7, #12]
 800d604:	f001 fb06 	bl	800ec14 <USBD_LL_Init>

  return USBD_OK;
 800d608:	2300      	movs	r3, #0
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3710      	adds	r7, #16
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d612:	b480      	push	{r7}
 800d614:	b085      	sub	sp, #20
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
 800d61a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800d61c:	2300      	movs	r3, #0
 800d61e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d006      	beq.n	800d634 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	683a      	ldr	r2, [r7, #0]
 800d62a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800d62e:	2300      	movs	r3, #0
 800d630:	73fb      	strb	r3, [r7, #15]
 800d632:	e001      	b.n	800d638 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d634:	2302      	movs	r3, #2
 800d636:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d638:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3714      	adds	r7, #20
 800d63e:	46bd      	mov	sp, r7
 800d640:	bc80      	pop	{r7}
 800d642:	4770      	bx	lr

0800d644 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f001 fb3b 	bl	800ecc8 <USBD_LL_Start>

  return USBD_OK;
 800d652:	2300      	movs	r3, #0
}
 800d654:	4618      	mov	r0, r3
 800d656:	3708      	adds	r7, #8
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d664:	2300      	movs	r3, #0
}
 800d666:	4618      	mov	r0, r3
 800d668:	370c      	adds	r7, #12
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bc80      	pop	{r7}
 800d66e:	4770      	bx	lr

0800d670 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	460b      	mov	r3, r1
 800d67a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d67c:	2302      	movs	r3, #2
 800d67e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00c      	beq.n	800d6a4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	78fa      	ldrb	r2, [r7, #3]
 800d694:	4611      	mov	r1, r2
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	4798      	blx	r3
 800d69a:	4603      	mov	r3, r0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d101      	bne.n	800d6a4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3710      	adds	r7, #16
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b082      	sub	sp, #8
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	78fa      	ldrb	r2, [r7, #3]
 800d6c4:	4611      	mov	r1, r2
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	4798      	blx	r3

  return USBD_OK;
 800d6ca:	2300      	movs	r3, #0
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3708      	adds	r7, #8
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800d6e4:	6839      	ldr	r1, [r7, #0]
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f000 fed7 	bl	800e49a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800d708:	f003 031f 	and.w	r3, r3, #31
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	d016      	beq.n	800d73e <USBD_LL_SetupStage+0x6a>
 800d710:	2b02      	cmp	r3, #2
 800d712:	d81c      	bhi.n	800d74e <USBD_LL_SetupStage+0x7a>
 800d714:	2b00      	cmp	r3, #0
 800d716:	d002      	beq.n	800d71e <USBD_LL_SetupStage+0x4a>
 800d718:	2b01      	cmp	r3, #1
 800d71a:	d008      	beq.n	800d72e <USBD_LL_SetupStage+0x5a>
 800d71c:	e017      	b.n	800d74e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800d724:	4619      	mov	r1, r3
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 f9ca 	bl	800dac0 <USBD_StdDevReq>
      break;
 800d72c:	e01a      	b.n	800d764 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800d734:	4619      	mov	r1, r3
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 fa2c 	bl	800db94 <USBD_StdItfReq>
      break;
 800d73c:	e012      	b.n	800d764 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800d744:	4619      	mov	r1, r3
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f000 fa6c 	bl	800dc24 <USBD_StdEPReq>
      break;
 800d74c:	e00a      	b.n	800d764 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800d754:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	4619      	mov	r1, r3
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f001 fb13 	bl	800ed88 <USBD_LL_StallEP>
      break;
 800d762:	bf00      	nop
  }

  return USBD_OK;
 800d764:	2300      	movs	r3, #0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3708      	adds	r7, #8
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d76e:	b580      	push	{r7, lr}
 800d770:	b086      	sub	sp, #24
 800d772:	af00      	add	r7, sp, #0
 800d774:	60f8      	str	r0, [r7, #12]
 800d776:	460b      	mov	r3, r1
 800d778:	607a      	str	r2, [r7, #4]
 800d77a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d77c:	7afb      	ldrb	r3, [r7, #11]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d14b      	bne.n	800d81a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d788:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d790:	2b03      	cmp	r3, #3
 800d792:	d134      	bne.n	800d7fe <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	68da      	ldr	r2, [r3, #12]
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	691b      	ldr	r3, [r3, #16]
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d919      	bls.n	800d7d4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	68da      	ldr	r2, [r3, #12]
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	691b      	ldr	r3, [r3, #16]
 800d7a8:	1ad2      	subs	r2, r2, r3
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	68da      	ldr	r2, [r3, #12]
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d203      	bcs.n	800d7c2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800d7be:	b29b      	uxth	r3, r3
 800d7c0:	e002      	b.n	800d7c8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	6879      	ldr	r1, [r7, #4]
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	f000 ff53 	bl	800e678 <USBD_CtlContinueRx>
 800d7d2:	e038      	b.n	800d846 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7da:	691b      	ldr	r3, [r3, #16]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d00a      	beq.n	800d7f6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d7e6:	2b03      	cmp	r3, #3
 800d7e8:	d105      	bne.n	800d7f6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7f0:	691b      	ldr	r3, [r3, #16]
 800d7f2:	68f8      	ldr	r0, [r7, #12]
 800d7f4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d7f6:	68f8      	ldr	r0, [r7, #12]
 800d7f8:	f000 ff50 	bl	800e69c <USBD_CtlSendStatus>
 800d7fc:	e023      	b.n	800d846 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d804:	2b05      	cmp	r3, #5
 800d806:	d11e      	bne.n	800d846 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800d810:	2100      	movs	r1, #0
 800d812:	68f8      	ldr	r0, [r7, #12]
 800d814:	f001 fab8 	bl	800ed88 <USBD_LL_StallEP>
 800d818:	e015      	b.n	800d846 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d820:	699b      	ldr	r3, [r3, #24]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d00d      	beq.n	800d842 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d82c:	2b03      	cmp	r3, #3
 800d82e:	d108      	bne.n	800d842 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d836:	699b      	ldr	r3, [r3, #24]
 800d838:	7afa      	ldrb	r2, [r7, #11]
 800d83a:	4611      	mov	r1, r2
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	4798      	blx	r3
 800d840:	e001      	b.n	800d846 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d842:	2302      	movs	r3, #2
 800d844:	e000      	b.n	800d848 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d846:	2300      	movs	r3, #0
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3718      	adds	r7, #24
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b086      	sub	sp, #24
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	460b      	mov	r3, r1
 800d85a:	607a      	str	r2, [r7, #4]
 800d85c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d85e:	7afb      	ldrb	r3, [r7, #11]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d17f      	bne.n	800d964 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	3314      	adds	r3, #20
 800d868:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d870:	2b02      	cmp	r3, #2
 800d872:	d15c      	bne.n	800d92e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	68da      	ldr	r2, [r3, #12]
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	691b      	ldr	r3, [r3, #16]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d915      	bls.n	800d8ac <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	68da      	ldr	r2, [r3, #12]
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	691b      	ldr	r3, [r3, #16]
 800d888:	1ad2      	subs	r2, r2, r3
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	68db      	ldr	r3, [r3, #12]
 800d892:	b29b      	uxth	r3, r3
 800d894:	461a      	mov	r2, r3
 800d896:	6879      	ldr	r1, [r7, #4]
 800d898:	68f8      	ldr	r0, [r7, #12]
 800d89a:	f000 febd 	bl	800e618 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d89e:	2300      	movs	r3, #0
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	2100      	movs	r1, #0
 800d8a4:	68f8      	ldr	r0, [r7, #12]
 800d8a6:	f001 fb1a 	bl	800eede <USBD_LL_PrepareReceive>
 800d8aa:	e04e      	b.n	800d94a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	689b      	ldr	r3, [r3, #8]
 800d8b0:	697a      	ldr	r2, [r7, #20]
 800d8b2:	6912      	ldr	r2, [r2, #16]
 800d8b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8b8:	fb01 f202 	mul.w	r2, r1, r2
 800d8bc:	1a9b      	subs	r3, r3, r2
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d11c      	bne.n	800d8fc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	689a      	ldr	r2, [r3, #8]
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d316      	bcc.n	800d8fc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	689a      	ldr	r2, [r3, #8]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d20f      	bcs.n	800d8fc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d8dc:	2200      	movs	r2, #0
 800d8de:	2100      	movs	r1, #0
 800d8e0:	68f8      	ldr	r0, [r7, #12]
 800d8e2:	f000 fe99 	bl	800e618 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	68f8      	ldr	r0, [r7, #12]
 800d8f6:	f001 faf2 	bl	800eede <USBD_LL_PrepareReceive>
 800d8fa:	e026      	b.n	800d94a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d00a      	beq.n	800d91e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d90e:	2b03      	cmp	r3, #3
 800d910:	d105      	bne.n	800d91e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d918:	68db      	ldr	r3, [r3, #12]
 800d91a:	68f8      	ldr	r0, [r7, #12]
 800d91c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d91e:	2180      	movs	r1, #128	@ 0x80
 800d920:	68f8      	ldr	r0, [r7, #12]
 800d922:	f001 fa31 	bl	800ed88 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f000 fecb 	bl	800e6c2 <USBD_CtlReceiveStatus>
 800d92c:	e00d      	b.n	800d94a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d934:	2b04      	cmp	r3, #4
 800d936:	d004      	beq.n	800d942 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d103      	bne.n	800d94a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d942:	2180      	movs	r1, #128	@ 0x80
 800d944:	68f8      	ldr	r0, [r7, #12]
 800d946:	f001 fa1f 	bl	800ed88 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d950:	2b01      	cmp	r3, #1
 800d952:	d11d      	bne.n	800d990 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d954:	68f8      	ldr	r0, [r7, #12]
 800d956:	f7ff fe81 	bl	800d65c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2200      	movs	r2, #0
 800d95e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d962:	e015      	b.n	800d990 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d96a:	695b      	ldr	r3, [r3, #20]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00d      	beq.n	800d98c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d976:	2b03      	cmp	r3, #3
 800d978:	d108      	bne.n	800d98c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d980:	695b      	ldr	r3, [r3, #20]
 800d982:	7afa      	ldrb	r2, [r7, #11]
 800d984:	4611      	mov	r1, r2
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	4798      	blx	r3
 800d98a:	e001      	b.n	800d990 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d98c:	2302      	movs	r3, #2
 800d98e:	e000      	b.n	800d992 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d990:	2300      	movs	r3, #0
}
 800d992:	4618      	mov	r0, r3
 800d994:	3718      	adds	r7, #24
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}

0800d99a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d99a:	b580      	push	{r7, lr}
 800d99c:	b082      	sub	sp, #8
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d9a2:	2340      	movs	r3, #64	@ 0x40
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	2100      	movs	r1, #0
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f001 f9a8 	bl	800ecfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2240      	movs	r2, #64	@ 0x40
 800d9ba:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d9be:	2340      	movs	r3, #64	@ 0x40
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	2180      	movs	r1, #128	@ 0x80
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f001 f99a 	bl	800ecfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2240      	movs	r2, #64	@ 0x40
 800d9d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2201      	movs	r2, #1
 800d9da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d009      	beq.n	800da12 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	6852      	ldr	r2, [r2, #4]
 800da0a:	b2d2      	uxtb	r2, r2
 800da0c:	4611      	mov	r1, r2
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	4798      	blx	r3
  }

  return USBD_OK;
 800da12:	2300      	movs	r3, #0
}
 800da14:	4618      	mov	r0, r3
 800da16:	3708      	adds	r7, #8
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	460b      	mov	r3, r1
 800da26:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	78fa      	ldrb	r2, [r7, #3]
 800da2c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800da2e:	2300      	movs	r3, #0
}
 800da30:	4618      	mov	r0, r3
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	bc80      	pop	{r7}
 800da38:	4770      	bx	lr

0800da3a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800da3a:	b480      	push	{r7}
 800da3c:	b083      	sub	sp, #12
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2204      	movs	r2, #4
 800da52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800da56:	2300      	movs	r3, #0
}
 800da58:	4618      	mov	r0, r3
 800da5a:	370c      	adds	r7, #12
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bc80      	pop	{r7}
 800da60:	4770      	bx	lr

0800da62 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800da62:	b480      	push	{r7}
 800da64:	b083      	sub	sp, #12
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da70:	2b04      	cmp	r3, #4
 800da72:	d105      	bne.n	800da80 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800da80:	2300      	movs	r3, #0
}
 800da82:	4618      	mov	r0, r3
 800da84:	370c      	adds	r7, #12
 800da86:	46bd      	mov	sp, r7
 800da88:	bc80      	pop	{r7}
 800da8a:	4770      	bx	lr

0800da8c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da9a:	2b03      	cmp	r3, #3
 800da9c:	d10b      	bne.n	800dab6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800daa4:	69db      	ldr	r3, [r3, #28]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d005      	beq.n	800dab6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dab0:	69db      	ldr	r3, [r3, #28]
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dab6:	2300      	movs	r3, #0
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3708      	adds	r7, #8
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800daca:	2300      	movs	r3, #0
 800dacc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dad6:	2b40      	cmp	r3, #64	@ 0x40
 800dad8:	d005      	beq.n	800dae6 <USBD_StdDevReq+0x26>
 800dada:	2b40      	cmp	r3, #64	@ 0x40
 800dadc:	d84f      	bhi.n	800db7e <USBD_StdDevReq+0xbe>
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d009      	beq.n	800daf6 <USBD_StdDevReq+0x36>
 800dae2:	2b20      	cmp	r3, #32
 800dae4:	d14b      	bne.n	800db7e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	6839      	ldr	r1, [r7, #0]
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	4798      	blx	r3
      break;
 800daf4:	e048      	b.n	800db88 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	785b      	ldrb	r3, [r3, #1]
 800dafa:	2b09      	cmp	r3, #9
 800dafc:	d839      	bhi.n	800db72 <USBD_StdDevReq+0xb2>
 800dafe:	a201      	add	r2, pc, #4	@ (adr r2, 800db04 <USBD_StdDevReq+0x44>)
 800db00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db04:	0800db55 	.word	0x0800db55
 800db08:	0800db69 	.word	0x0800db69
 800db0c:	0800db73 	.word	0x0800db73
 800db10:	0800db5f 	.word	0x0800db5f
 800db14:	0800db73 	.word	0x0800db73
 800db18:	0800db37 	.word	0x0800db37
 800db1c:	0800db2d 	.word	0x0800db2d
 800db20:	0800db73 	.word	0x0800db73
 800db24:	0800db4b 	.word	0x0800db4b
 800db28:	0800db41 	.word	0x0800db41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800db2c:	6839      	ldr	r1, [r7, #0]
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 f9dc 	bl	800deec <USBD_GetDescriptor>
          break;
 800db34:	e022      	b.n	800db7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800db36:	6839      	ldr	r1, [r7, #0]
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 fb3f 	bl	800e1bc <USBD_SetAddress>
          break;
 800db3e:	e01d      	b.n	800db7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800db40:	6839      	ldr	r1, [r7, #0]
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 fb7e 	bl	800e244 <USBD_SetConfig>
          break;
 800db48:	e018      	b.n	800db7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800db4a:	6839      	ldr	r1, [r7, #0]
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f000 fc07 	bl	800e360 <USBD_GetConfig>
          break;
 800db52:	e013      	b.n	800db7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800db54:	6839      	ldr	r1, [r7, #0]
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 fc37 	bl	800e3ca <USBD_GetStatus>
          break;
 800db5c:	e00e      	b.n	800db7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800db5e:	6839      	ldr	r1, [r7, #0]
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f000 fc65 	bl	800e430 <USBD_SetFeature>
          break;
 800db66:	e009      	b.n	800db7c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800db68:	6839      	ldr	r1, [r7, #0]
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 fc74 	bl	800e458 <USBD_ClrFeature>
          break;
 800db70:	e004      	b.n	800db7c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800db72:	6839      	ldr	r1, [r7, #0]
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f000 fcc9 	bl	800e50c <USBD_CtlError>
          break;
 800db7a:	bf00      	nop
      }
      break;
 800db7c:	e004      	b.n	800db88 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800db7e:	6839      	ldr	r1, [r7, #0]
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f000 fcc3 	bl	800e50c <USBD_CtlError>
      break;
 800db86:	bf00      	nop
  }

  return ret;
 800db88:	7bfb      	ldrb	r3, [r7, #15]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop

0800db94 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db9e:	2300      	movs	r3, #0
 800dba0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dbaa:	2b40      	cmp	r3, #64	@ 0x40
 800dbac:	d005      	beq.n	800dbba <USBD_StdItfReq+0x26>
 800dbae:	2b40      	cmp	r3, #64	@ 0x40
 800dbb0:	d82e      	bhi.n	800dc10 <USBD_StdItfReq+0x7c>
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d001      	beq.n	800dbba <USBD_StdItfReq+0x26>
 800dbb6:	2b20      	cmp	r3, #32
 800dbb8:	d12a      	bne.n	800dc10 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	2b02      	cmp	r3, #2
 800dbc4:	d81d      	bhi.n	800dc02 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	889b      	ldrh	r3, [r3, #4]
 800dbca:	b2db      	uxtb	r3, r3
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d813      	bhi.n	800dbf8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	6839      	ldr	r1, [r7, #0]
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	4798      	blx	r3
 800dbde:	4603      	mov	r3, r0
 800dbe0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	88db      	ldrh	r3, [r3, #6]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d110      	bne.n	800dc0c <USBD_StdItfReq+0x78>
 800dbea:	7bfb      	ldrb	r3, [r7, #15]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d10d      	bne.n	800dc0c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 fd53 	bl	800e69c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dbf6:	e009      	b.n	800dc0c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800dbf8:	6839      	ldr	r1, [r7, #0]
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 fc86 	bl	800e50c <USBD_CtlError>
          break;
 800dc00:	e004      	b.n	800dc0c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800dc02:	6839      	ldr	r1, [r7, #0]
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f000 fc81 	bl	800e50c <USBD_CtlError>
          break;
 800dc0a:	e000      	b.n	800dc0e <USBD_StdItfReq+0x7a>
          break;
 800dc0c:	bf00      	nop
      }
      break;
 800dc0e:	e004      	b.n	800dc1a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800dc10:	6839      	ldr	r1, [r7, #0]
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 fc7a 	bl	800e50c <USBD_CtlError>
      break;
 800dc18:	bf00      	nop
  }

  return USBD_OK;
 800dc1a:	2300      	movs	r3, #0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	889b      	ldrh	r3, [r3, #4]
 800dc36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dc40:	2b40      	cmp	r3, #64	@ 0x40
 800dc42:	d007      	beq.n	800dc54 <USBD_StdEPReq+0x30>
 800dc44:	2b40      	cmp	r3, #64	@ 0x40
 800dc46:	f200 8146 	bhi.w	800ded6 <USBD_StdEPReq+0x2b2>
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d00a      	beq.n	800dc64 <USBD_StdEPReq+0x40>
 800dc4e:	2b20      	cmp	r3, #32
 800dc50:	f040 8141 	bne.w	800ded6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	6839      	ldr	r1, [r7, #0]
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	4798      	blx	r3
      break;
 800dc62:	e13d      	b.n	800dee0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dc6c:	2b20      	cmp	r3, #32
 800dc6e:	d10a      	bne.n	800dc86 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc76:	689b      	ldr	r3, [r3, #8]
 800dc78:	6839      	ldr	r1, [r7, #0]
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	4798      	blx	r3
 800dc7e:	4603      	mov	r3, r0
 800dc80:	73fb      	strb	r3, [r7, #15]

        return ret;
 800dc82:	7bfb      	ldrb	r3, [r7, #15]
 800dc84:	e12d      	b.n	800dee2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	785b      	ldrb	r3, [r3, #1]
 800dc8a:	2b03      	cmp	r3, #3
 800dc8c:	d007      	beq.n	800dc9e <USBD_StdEPReq+0x7a>
 800dc8e:	2b03      	cmp	r3, #3
 800dc90:	f300 811b 	bgt.w	800deca <USBD_StdEPReq+0x2a6>
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d072      	beq.n	800dd7e <USBD_StdEPReq+0x15a>
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d03a      	beq.n	800dd12 <USBD_StdEPReq+0xee>
 800dc9c:	e115      	b.n	800deca <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dca4:	2b02      	cmp	r3, #2
 800dca6:	d002      	beq.n	800dcae <USBD_StdEPReq+0x8a>
 800dca8:	2b03      	cmp	r3, #3
 800dcaa:	d015      	beq.n	800dcd8 <USBD_StdEPReq+0xb4>
 800dcac:	e02b      	b.n	800dd06 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dcae:	7bbb      	ldrb	r3, [r7, #14]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d00c      	beq.n	800dcce <USBD_StdEPReq+0xaa>
 800dcb4:	7bbb      	ldrb	r3, [r7, #14]
 800dcb6:	2b80      	cmp	r3, #128	@ 0x80
 800dcb8:	d009      	beq.n	800dcce <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800dcba:	7bbb      	ldrb	r3, [r7, #14]
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f001 f862 	bl	800ed88 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800dcc4:	2180      	movs	r1, #128	@ 0x80
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f001 f85e 	bl	800ed88 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dccc:	e020      	b.n	800dd10 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800dcce:	6839      	ldr	r1, [r7, #0]
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 fc1b 	bl	800e50c <USBD_CtlError>
              break;
 800dcd6:	e01b      	b.n	800dd10 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	885b      	ldrh	r3, [r3, #2]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d10e      	bne.n	800dcfe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800dce0:	7bbb      	ldrb	r3, [r7, #14]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d00b      	beq.n	800dcfe <USBD_StdEPReq+0xda>
 800dce6:	7bbb      	ldrb	r3, [r7, #14]
 800dce8:	2b80      	cmp	r3, #128	@ 0x80
 800dcea:	d008      	beq.n	800dcfe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	88db      	ldrh	r3, [r3, #6]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d104      	bne.n	800dcfe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800dcf4:	7bbb      	ldrb	r3, [r7, #14]
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f001 f845 	bl	800ed88 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 fccc 	bl	800e69c <USBD_CtlSendStatus>

              break;
 800dd04:	e004      	b.n	800dd10 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800dd06:	6839      	ldr	r1, [r7, #0]
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f000 fbff 	bl	800e50c <USBD_CtlError>
              break;
 800dd0e:	bf00      	nop
          }
          break;
 800dd10:	e0e0      	b.n	800ded4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd18:	2b02      	cmp	r3, #2
 800dd1a:	d002      	beq.n	800dd22 <USBD_StdEPReq+0xfe>
 800dd1c:	2b03      	cmp	r3, #3
 800dd1e:	d015      	beq.n	800dd4c <USBD_StdEPReq+0x128>
 800dd20:	e026      	b.n	800dd70 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd22:	7bbb      	ldrb	r3, [r7, #14]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d00c      	beq.n	800dd42 <USBD_StdEPReq+0x11e>
 800dd28:	7bbb      	ldrb	r3, [r7, #14]
 800dd2a:	2b80      	cmp	r3, #128	@ 0x80
 800dd2c:	d009      	beq.n	800dd42 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800dd2e:	7bbb      	ldrb	r3, [r7, #14]
 800dd30:	4619      	mov	r1, r3
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f001 f828 	bl	800ed88 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800dd38:	2180      	movs	r1, #128	@ 0x80
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f001 f824 	bl	800ed88 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dd40:	e01c      	b.n	800dd7c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800dd42:	6839      	ldr	r1, [r7, #0]
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f000 fbe1 	bl	800e50c <USBD_CtlError>
              break;
 800dd4a:	e017      	b.n	800dd7c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	885b      	ldrh	r3, [r3, #2]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d112      	bne.n	800dd7a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dd54:	7bbb      	ldrb	r3, [r7, #14]
 800dd56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d004      	beq.n	800dd68 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800dd5e:	7bbb      	ldrb	r3, [r7, #14]
 800dd60:	4619      	mov	r1, r3
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f001 f82f 	bl	800edc6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 fc97 	bl	800e69c <USBD_CtlSendStatus>
              }
              break;
 800dd6e:	e004      	b.n	800dd7a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800dd70:	6839      	ldr	r1, [r7, #0]
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 fbca 	bl	800e50c <USBD_CtlError>
              break;
 800dd78:	e000      	b.n	800dd7c <USBD_StdEPReq+0x158>
              break;
 800dd7a:	bf00      	nop
          }
          break;
 800dd7c:	e0aa      	b.n	800ded4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd84:	2b02      	cmp	r3, #2
 800dd86:	d002      	beq.n	800dd8e <USBD_StdEPReq+0x16a>
 800dd88:	2b03      	cmp	r3, #3
 800dd8a:	d032      	beq.n	800ddf2 <USBD_StdEPReq+0x1ce>
 800dd8c:	e097      	b.n	800debe <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd8e:	7bbb      	ldrb	r3, [r7, #14]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d007      	beq.n	800dda4 <USBD_StdEPReq+0x180>
 800dd94:	7bbb      	ldrb	r3, [r7, #14]
 800dd96:	2b80      	cmp	r3, #128	@ 0x80
 800dd98:	d004      	beq.n	800dda4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800dd9a:	6839      	ldr	r1, [r7, #0]
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f000 fbb5 	bl	800e50c <USBD_CtlError>
                break;
 800dda2:	e091      	b.n	800dec8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dda4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	da0b      	bge.n	800ddc4 <USBD_StdEPReq+0x1a0>
 800ddac:	7bbb      	ldrb	r3, [r7, #14]
 800ddae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ddb2:	4613      	mov	r3, r2
 800ddb4:	009b      	lsls	r3, r3, #2
 800ddb6:	4413      	add	r3, r2
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	3310      	adds	r3, #16
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	4413      	add	r3, r2
 800ddc0:	3304      	adds	r3, #4
 800ddc2:	e00b      	b.n	800dddc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ddc4:	7bbb      	ldrb	r3, [r7, #14]
 800ddc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddca:	4613      	mov	r3, r2
 800ddcc:	009b      	lsls	r3, r3, #2
 800ddce:	4413      	add	r3, r2
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ddd6:	687a      	ldr	r2, [r7, #4]
 800ddd8:	4413      	add	r3, r2
 800ddda:	3304      	adds	r3, #4
 800dddc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	2200      	movs	r2, #0
 800dde2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	2202      	movs	r2, #2
 800dde8:	4619      	mov	r1, r3
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 fbf8 	bl	800e5e0 <USBD_CtlSendData>
              break;
 800ddf0:	e06a      	b.n	800dec8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ddf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	da11      	bge.n	800de1e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ddfa:	7bbb      	ldrb	r3, [r7, #14]
 800ddfc:	f003 020f 	and.w	r2, r3, #15
 800de00:	6879      	ldr	r1, [r7, #4]
 800de02:	4613      	mov	r3, r2
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	4413      	add	r3, r2
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	440b      	add	r3, r1
 800de0c:	3318      	adds	r3, #24
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d117      	bne.n	800de44 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800de14:	6839      	ldr	r1, [r7, #0]
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 fb78 	bl	800e50c <USBD_CtlError>
                  break;
 800de1c:	e054      	b.n	800dec8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800de1e:	7bbb      	ldrb	r3, [r7, #14]
 800de20:	f003 020f 	and.w	r2, r3, #15
 800de24:	6879      	ldr	r1, [r7, #4]
 800de26:	4613      	mov	r3, r2
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	4413      	add	r3, r2
 800de2c:	009b      	lsls	r3, r3, #2
 800de2e:	440b      	add	r3, r1
 800de30:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d104      	bne.n	800de44 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800de3a:	6839      	ldr	r1, [r7, #0]
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 fb65 	bl	800e50c <USBD_CtlError>
                  break;
 800de42:	e041      	b.n	800dec8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	da0b      	bge.n	800de64 <USBD_StdEPReq+0x240>
 800de4c:	7bbb      	ldrb	r3, [r7, #14]
 800de4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de52:	4613      	mov	r3, r2
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	4413      	add	r3, r2
 800de58:	009b      	lsls	r3, r3, #2
 800de5a:	3310      	adds	r3, #16
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	4413      	add	r3, r2
 800de60:	3304      	adds	r3, #4
 800de62:	e00b      	b.n	800de7c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800de64:	7bbb      	ldrb	r3, [r7, #14]
 800de66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de6a:	4613      	mov	r3, r2
 800de6c:	009b      	lsls	r3, r3, #2
 800de6e:	4413      	add	r3, r2
 800de70:	009b      	lsls	r3, r3, #2
 800de72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	4413      	add	r3, r2
 800de7a:	3304      	adds	r3, #4
 800de7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800de7e:	7bbb      	ldrb	r3, [r7, #14]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d002      	beq.n	800de8a <USBD_StdEPReq+0x266>
 800de84:	7bbb      	ldrb	r3, [r7, #14]
 800de86:	2b80      	cmp	r3, #128	@ 0x80
 800de88:	d103      	bne.n	800de92 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	2200      	movs	r2, #0
 800de8e:	601a      	str	r2, [r3, #0]
 800de90:	e00e      	b.n	800deb0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800de92:	7bbb      	ldrb	r3, [r7, #14]
 800de94:	4619      	mov	r1, r3
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 ffb4 	bl	800ee04 <USBD_LL_IsStallEP>
 800de9c:	4603      	mov	r3, r0
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d003      	beq.n	800deaa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	2201      	movs	r2, #1
 800dea6:	601a      	str	r2, [r3, #0]
 800dea8:	e002      	b.n	800deb0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	2200      	movs	r2, #0
 800deae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	2202      	movs	r2, #2
 800deb4:	4619      	mov	r1, r3
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 fb92 	bl	800e5e0 <USBD_CtlSendData>
              break;
 800debc:	e004      	b.n	800dec8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800debe:	6839      	ldr	r1, [r7, #0]
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f000 fb23 	bl	800e50c <USBD_CtlError>
              break;
 800dec6:	bf00      	nop
          }
          break;
 800dec8:	e004      	b.n	800ded4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800deca:	6839      	ldr	r1, [r7, #0]
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 fb1d 	bl	800e50c <USBD_CtlError>
          break;
 800ded2:	bf00      	nop
      }
      break;
 800ded4:	e004      	b.n	800dee0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ded6:	6839      	ldr	r1, [r7, #0]
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f000 fb17 	bl	800e50c <USBD_CtlError>
      break;
 800dede:	bf00      	nop
  }

  return ret;
 800dee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3710      	adds	r7, #16
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
	...

0800deec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800def6:	2300      	movs	r3, #0
 800def8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800defa:	2300      	movs	r3, #0
 800defc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800defe:	2300      	movs	r3, #0
 800df00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	885b      	ldrh	r3, [r3, #2]
 800df06:	0a1b      	lsrs	r3, r3, #8
 800df08:	b29b      	uxth	r3, r3
 800df0a:	3b01      	subs	r3, #1
 800df0c:	2b06      	cmp	r3, #6
 800df0e:	f200 8128 	bhi.w	800e162 <USBD_GetDescriptor+0x276>
 800df12:	a201      	add	r2, pc, #4	@ (adr r2, 800df18 <USBD_GetDescriptor+0x2c>)
 800df14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df18:	0800df35 	.word	0x0800df35
 800df1c:	0800df4d 	.word	0x0800df4d
 800df20:	0800df8d 	.word	0x0800df8d
 800df24:	0800e163 	.word	0x0800e163
 800df28:	0800e163 	.word	0x0800e163
 800df2c:	0800e103 	.word	0x0800e103
 800df30:	0800e12f 	.word	0x0800e12f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	687a      	ldr	r2, [r7, #4]
 800df3e:	7c12      	ldrb	r2, [r2, #16]
 800df40:	f107 0108 	add.w	r1, r7, #8
 800df44:	4610      	mov	r0, r2
 800df46:	4798      	blx	r3
 800df48:	60f8      	str	r0, [r7, #12]
      break;
 800df4a:	e112      	b.n	800e172 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	7c1b      	ldrb	r3, [r3, #16]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d10d      	bne.n	800df70 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df5c:	f107 0208 	add.w	r2, r7, #8
 800df60:	4610      	mov	r0, r2
 800df62:	4798      	blx	r3
 800df64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	3301      	adds	r3, #1
 800df6a:	2202      	movs	r2, #2
 800df6c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800df6e:	e100      	b.n	800e172 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df78:	f107 0208 	add.w	r2, r7, #8
 800df7c:	4610      	mov	r0, r2
 800df7e:	4798      	blx	r3
 800df80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	3301      	adds	r3, #1
 800df86:	2202      	movs	r2, #2
 800df88:	701a      	strb	r2, [r3, #0]
      break;
 800df8a:	e0f2      	b.n	800e172 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	885b      	ldrh	r3, [r3, #2]
 800df90:	b2db      	uxtb	r3, r3
 800df92:	2b05      	cmp	r3, #5
 800df94:	f200 80ac 	bhi.w	800e0f0 <USBD_GetDescriptor+0x204>
 800df98:	a201      	add	r2, pc, #4	@ (adr r2, 800dfa0 <USBD_GetDescriptor+0xb4>)
 800df9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df9e:	bf00      	nop
 800dfa0:	0800dfb9 	.word	0x0800dfb9
 800dfa4:	0800dfed 	.word	0x0800dfed
 800dfa8:	0800e021 	.word	0x0800e021
 800dfac:	0800e055 	.word	0x0800e055
 800dfb0:	0800e089 	.word	0x0800e089
 800dfb4:	0800e0bd 	.word	0x0800e0bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d00b      	beq.n	800dfdc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	7c12      	ldrb	r2, [r2, #16]
 800dfd0:	f107 0108 	add.w	r1, r7, #8
 800dfd4:	4610      	mov	r0, r2
 800dfd6:	4798      	blx	r3
 800dfd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfda:	e091      	b.n	800e100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dfdc:	6839      	ldr	r1, [r7, #0]
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f000 fa94 	bl	800e50c <USBD_CtlError>
            err++;
 800dfe4:	7afb      	ldrb	r3, [r7, #11]
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	72fb      	strb	r3, [r7, #11]
          break;
 800dfea:	e089      	b.n	800e100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800dff2:	689b      	ldr	r3, [r3, #8]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d00b      	beq.n	800e010 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	7c12      	ldrb	r2, [r2, #16]
 800e004:	f107 0108 	add.w	r1, r7, #8
 800e008:	4610      	mov	r0, r2
 800e00a:	4798      	blx	r3
 800e00c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e00e:	e077      	b.n	800e100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e010:	6839      	ldr	r1, [r7, #0]
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f000 fa7a 	bl	800e50c <USBD_CtlError>
            err++;
 800e018:	7afb      	ldrb	r3, [r7, #11]
 800e01a:	3301      	adds	r3, #1
 800e01c:	72fb      	strb	r3, [r7, #11]
          break;
 800e01e:	e06f      	b.n	800e100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800e026:	68db      	ldr	r3, [r3, #12]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d00b      	beq.n	800e044 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	7c12      	ldrb	r2, [r2, #16]
 800e038:	f107 0108 	add.w	r1, r7, #8
 800e03c:	4610      	mov	r0, r2
 800e03e:	4798      	blx	r3
 800e040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e042:	e05d      	b.n	800e100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e044:	6839      	ldr	r1, [r7, #0]
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f000 fa60 	bl	800e50c <USBD_CtlError>
            err++;
 800e04c:	7afb      	ldrb	r3, [r7, #11]
 800e04e:	3301      	adds	r3, #1
 800e050:	72fb      	strb	r3, [r7, #11]
          break;
 800e052:	e055      	b.n	800e100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800e05a:	691b      	ldr	r3, [r3, #16]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d00b      	beq.n	800e078 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800e066:	691b      	ldr	r3, [r3, #16]
 800e068:	687a      	ldr	r2, [r7, #4]
 800e06a:	7c12      	ldrb	r2, [r2, #16]
 800e06c:	f107 0108 	add.w	r1, r7, #8
 800e070:	4610      	mov	r0, r2
 800e072:	4798      	blx	r3
 800e074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e076:	e043      	b.n	800e100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e078:	6839      	ldr	r1, [r7, #0]
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 fa46 	bl	800e50c <USBD_CtlError>
            err++;
 800e080:	7afb      	ldrb	r3, [r7, #11]
 800e082:	3301      	adds	r3, #1
 800e084:	72fb      	strb	r3, [r7, #11]
          break;
 800e086:	e03b      	b.n	800e100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800e08e:	695b      	ldr	r3, [r3, #20]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d00b      	beq.n	800e0ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800e09a:	695b      	ldr	r3, [r3, #20]
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	7c12      	ldrb	r2, [r2, #16]
 800e0a0:	f107 0108 	add.w	r1, r7, #8
 800e0a4:	4610      	mov	r0, r2
 800e0a6:	4798      	blx	r3
 800e0a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0aa:	e029      	b.n	800e100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e0ac:	6839      	ldr	r1, [r7, #0]
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 fa2c 	bl	800e50c <USBD_CtlError>
            err++;
 800e0b4:	7afb      	ldrb	r3, [r7, #11]
 800e0b6:	3301      	adds	r3, #1
 800e0b8:	72fb      	strb	r3, [r7, #11]
          break;
 800e0ba:	e021      	b.n	800e100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800e0c2:	699b      	ldr	r3, [r3, #24]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d00b      	beq.n	800e0e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800e0ce:	699b      	ldr	r3, [r3, #24]
 800e0d0:	687a      	ldr	r2, [r7, #4]
 800e0d2:	7c12      	ldrb	r2, [r2, #16]
 800e0d4:	f107 0108 	add.w	r1, r7, #8
 800e0d8:	4610      	mov	r0, r2
 800e0da:	4798      	blx	r3
 800e0dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0de:	e00f      	b.n	800e100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e0e0:	6839      	ldr	r1, [r7, #0]
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 fa12 	bl	800e50c <USBD_CtlError>
            err++;
 800e0e8:	7afb      	ldrb	r3, [r7, #11]
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	72fb      	strb	r3, [r7, #11]
          break;
 800e0ee:	e007      	b.n	800e100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800e0f0:	6839      	ldr	r1, [r7, #0]
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 fa0a 	bl	800e50c <USBD_CtlError>
          err++;
 800e0f8:	7afb      	ldrb	r3, [r7, #11]
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800e0fe:	e038      	b.n	800e172 <USBD_GetDescriptor+0x286>
 800e100:	e037      	b.n	800e172 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	7c1b      	ldrb	r3, [r3, #16]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d109      	bne.n	800e11e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e112:	f107 0208 	add.w	r2, r7, #8
 800e116:	4610      	mov	r0, r2
 800e118:	4798      	blx	r3
 800e11a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e11c:	e029      	b.n	800e172 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e11e:	6839      	ldr	r1, [r7, #0]
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f000 f9f3 	bl	800e50c <USBD_CtlError>
        err++;
 800e126:	7afb      	ldrb	r3, [r7, #11]
 800e128:	3301      	adds	r3, #1
 800e12a:	72fb      	strb	r3, [r7, #11]
      break;
 800e12c:	e021      	b.n	800e172 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	7c1b      	ldrb	r3, [r3, #16]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d10d      	bne.n	800e152 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e13c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e13e:	f107 0208 	add.w	r2, r7, #8
 800e142:	4610      	mov	r0, r2
 800e144:	4798      	blx	r3
 800e146:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	3301      	adds	r3, #1
 800e14c:	2207      	movs	r2, #7
 800e14e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e150:	e00f      	b.n	800e172 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e152:	6839      	ldr	r1, [r7, #0]
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 f9d9 	bl	800e50c <USBD_CtlError>
        err++;
 800e15a:	7afb      	ldrb	r3, [r7, #11]
 800e15c:	3301      	adds	r3, #1
 800e15e:	72fb      	strb	r3, [r7, #11]
      break;
 800e160:	e007      	b.n	800e172 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e162:	6839      	ldr	r1, [r7, #0]
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f000 f9d1 	bl	800e50c <USBD_CtlError>
      err++;
 800e16a:	7afb      	ldrb	r3, [r7, #11]
 800e16c:	3301      	adds	r3, #1
 800e16e:	72fb      	strb	r3, [r7, #11]
      break;
 800e170:	bf00      	nop
  }

  if (err != 0U)
 800e172:	7afb      	ldrb	r3, [r7, #11]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d11c      	bne.n	800e1b2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800e178:	893b      	ldrh	r3, [r7, #8]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d011      	beq.n	800e1a2 <USBD_GetDescriptor+0x2b6>
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	88db      	ldrh	r3, [r3, #6]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d00d      	beq.n	800e1a2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	88da      	ldrh	r2, [r3, #6]
 800e18a:	893b      	ldrh	r3, [r7, #8]
 800e18c:	4293      	cmp	r3, r2
 800e18e:	bf28      	it	cs
 800e190:	4613      	movcs	r3, r2
 800e192:	b29b      	uxth	r3, r3
 800e194:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e196:	893b      	ldrh	r3, [r7, #8]
 800e198:	461a      	mov	r2, r3
 800e19a:	68f9      	ldr	r1, [r7, #12]
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 fa1f 	bl	800e5e0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	88db      	ldrh	r3, [r3, #6]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d104      	bne.n	800e1b4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f000 fa76 	bl	800e69c <USBD_CtlSendStatus>
 800e1b0:	e000      	b.n	800e1b4 <USBD_GetDescriptor+0x2c8>
    return;
 800e1b2:	bf00      	nop
    }
  }
}
 800e1b4:	3710      	adds	r7, #16
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop

0800e1bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	889b      	ldrh	r3, [r3, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d130      	bne.n	800e230 <USBD_SetAddress+0x74>
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	88db      	ldrh	r3, [r3, #6]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d12c      	bne.n	800e230 <USBD_SetAddress+0x74>
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	885b      	ldrh	r3, [r3, #2]
 800e1da:	2b7f      	cmp	r3, #127	@ 0x7f
 800e1dc:	d828      	bhi.n	800e230 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	885b      	ldrh	r3, [r3, #2]
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1f0:	2b03      	cmp	r3, #3
 800e1f2:	d104      	bne.n	800e1fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800e1f4:	6839      	ldr	r1, [r7, #0]
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 f988 	bl	800e50c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1fc:	e01d      	b.n	800e23a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	7bfa      	ldrb	r2, [r7, #15]
 800e202:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e206:	7bfb      	ldrb	r3, [r7, #15]
 800e208:	4619      	mov	r1, r3
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 fe25 	bl	800ee5a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 fa43 	bl	800e69c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e216:	7bfb      	ldrb	r3, [r7, #15]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d004      	beq.n	800e226 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2202      	movs	r2, #2
 800e220:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e224:	e009      	b.n	800e23a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2201      	movs	r2, #1
 800e22a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e22e:	e004      	b.n	800e23a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e230:	6839      	ldr	r1, [r7, #0]
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 f96a 	bl	800e50c <USBD_CtlError>
  }
}
 800e238:	bf00      	nop
 800e23a:	bf00      	nop
 800e23c:	3710      	adds	r7, #16
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
	...

0800e244 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	885b      	ldrh	r3, [r3, #2]
 800e252:	b2da      	uxtb	r2, r3
 800e254:	4b41      	ldr	r3, [pc, #260]	@ (800e35c <USBD_SetConfig+0x118>)
 800e256:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e258:	4b40      	ldr	r3, [pc, #256]	@ (800e35c <USBD_SetConfig+0x118>)
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d904      	bls.n	800e26a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f000 f952 	bl	800e50c <USBD_CtlError>
 800e268:	e075      	b.n	800e356 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e270:	2b02      	cmp	r3, #2
 800e272:	d002      	beq.n	800e27a <USBD_SetConfig+0x36>
 800e274:	2b03      	cmp	r3, #3
 800e276:	d023      	beq.n	800e2c0 <USBD_SetConfig+0x7c>
 800e278:	e062      	b.n	800e340 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800e27a:	4b38      	ldr	r3, [pc, #224]	@ (800e35c <USBD_SetConfig+0x118>)
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d01a      	beq.n	800e2b8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800e282:	4b36      	ldr	r3, [pc, #216]	@ (800e35c <USBD_SetConfig+0x118>)
 800e284:	781b      	ldrb	r3, [r3, #0]
 800e286:	461a      	mov	r2, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2203      	movs	r2, #3
 800e290:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e294:	4b31      	ldr	r3, [pc, #196]	@ (800e35c <USBD_SetConfig+0x118>)
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	4619      	mov	r1, r3
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7ff f9e8 	bl	800d670 <USBD_SetClassConfig>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	2b02      	cmp	r3, #2
 800e2a4:	d104      	bne.n	800e2b0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800e2a6:	6839      	ldr	r1, [r7, #0]
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f000 f92f 	bl	800e50c <USBD_CtlError>
            return;
 800e2ae:	e052      	b.n	800e356 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f000 f9f3 	bl	800e69c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e2b6:	e04e      	b.n	800e356 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 f9ef 	bl	800e69c <USBD_CtlSendStatus>
        break;
 800e2be:	e04a      	b.n	800e356 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800e2c0:	4b26      	ldr	r3, [pc, #152]	@ (800e35c <USBD_SetConfig+0x118>)
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d112      	bne.n	800e2ee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2202      	movs	r2, #2
 800e2cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800e2d0:	4b22      	ldr	r3, [pc, #136]	@ (800e35c <USBD_SetConfig+0x118>)
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800e2da:	4b20      	ldr	r3, [pc, #128]	@ (800e35c <USBD_SetConfig+0x118>)
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	4619      	mov	r1, r3
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f7ff f9e4 	bl	800d6ae <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 f9d8 	bl	800e69c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e2ec:	e033      	b.n	800e356 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800e2ee:	4b1b      	ldr	r3, [pc, #108]	@ (800e35c <USBD_SetConfig+0x118>)
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d01d      	beq.n	800e338 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	b2db      	uxtb	r3, r3
 800e302:	4619      	mov	r1, r3
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f7ff f9d2 	bl	800d6ae <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800e30a:	4b14      	ldr	r3, [pc, #80]	@ (800e35c <USBD_SetConfig+0x118>)
 800e30c:	781b      	ldrb	r3, [r3, #0]
 800e30e:	461a      	mov	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e314:	4b11      	ldr	r3, [pc, #68]	@ (800e35c <USBD_SetConfig+0x118>)
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	4619      	mov	r1, r3
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7ff f9a8 	bl	800d670 <USBD_SetClassConfig>
 800e320:	4603      	mov	r3, r0
 800e322:	2b02      	cmp	r3, #2
 800e324:	d104      	bne.n	800e330 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800e326:	6839      	ldr	r1, [r7, #0]
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 f8ef 	bl	800e50c <USBD_CtlError>
            return;
 800e32e:	e012      	b.n	800e356 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 f9b3 	bl	800e69c <USBD_CtlSendStatus>
        break;
 800e336:	e00e      	b.n	800e356 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f000 f9af 	bl	800e69c <USBD_CtlSendStatus>
        break;
 800e33e:	e00a      	b.n	800e356 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800e340:	6839      	ldr	r1, [r7, #0]
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f000 f8e2 	bl	800e50c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800e348:	4b04      	ldr	r3, [pc, #16]	@ (800e35c <USBD_SetConfig+0x118>)
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	4619      	mov	r1, r3
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f7ff f9ad 	bl	800d6ae <USBD_ClrClassConfig>
        break;
 800e354:	bf00      	nop
    }
  }
}
 800e356:	3708      	adds	r7, #8
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	200018ac 	.word	0x200018ac

0800e360 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	88db      	ldrh	r3, [r3, #6]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d004      	beq.n	800e37c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e372:	6839      	ldr	r1, [r7, #0]
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 f8c9 	bl	800e50c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e37a:	e022      	b.n	800e3c2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e382:	2b02      	cmp	r3, #2
 800e384:	dc02      	bgt.n	800e38c <USBD_GetConfig+0x2c>
 800e386:	2b00      	cmp	r3, #0
 800e388:	dc03      	bgt.n	800e392 <USBD_GetConfig+0x32>
 800e38a:	e015      	b.n	800e3b8 <USBD_GetConfig+0x58>
 800e38c:	2b03      	cmp	r3, #3
 800e38e:	d00b      	beq.n	800e3a8 <USBD_GetConfig+0x48>
 800e390:	e012      	b.n	800e3b8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2200      	movs	r2, #0
 800e396:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	3308      	adds	r3, #8
 800e39c:	2201      	movs	r2, #1
 800e39e:	4619      	mov	r1, r3
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 f91d 	bl	800e5e0 <USBD_CtlSendData>
        break;
 800e3a6:	e00c      	b.n	800e3c2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	3304      	adds	r3, #4
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 f915 	bl	800e5e0 <USBD_CtlSendData>
        break;
 800e3b6:	e004      	b.n	800e3c2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800e3b8:	6839      	ldr	r1, [r7, #0]
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 f8a6 	bl	800e50c <USBD_CtlError>
        break;
 800e3c0:	bf00      	nop
}
 800e3c2:	bf00      	nop
 800e3c4:	3708      	adds	r7, #8
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3ca:	b580      	push	{r7, lr}
 800e3cc:	b082      	sub	sp, #8
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
 800e3d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e3da:	3b01      	subs	r3, #1
 800e3dc:	2b02      	cmp	r3, #2
 800e3de:	d81e      	bhi.n	800e41e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	88db      	ldrh	r3, [r3, #6]
 800e3e4:	2b02      	cmp	r3, #2
 800e3e6:	d004      	beq.n	800e3f2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f88e 	bl	800e50c <USBD_CtlError>
        break;
 800e3f0:	e01a      	b.n	800e428 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d005      	beq.n	800e40e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	68db      	ldr	r3, [r3, #12]
 800e406:	f043 0202 	orr.w	r2, r3, #2
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	330c      	adds	r3, #12
 800e412:	2202      	movs	r2, #2
 800e414:	4619      	mov	r1, r3
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 f8e2 	bl	800e5e0 <USBD_CtlSendData>
      break;
 800e41c:	e004      	b.n	800e428 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800e41e:	6839      	ldr	r1, [r7, #0]
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f000 f873 	bl	800e50c <USBD_CtlError>
      break;
 800e426:	bf00      	nop
  }
}
 800e428:	bf00      	nop
 800e42a:	3708      	adds	r7, #8
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	885b      	ldrh	r3, [r3, #2]
 800e43e:	2b01      	cmp	r3, #1
 800e440:	d106      	bne.n	800e450 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2201      	movs	r2, #1
 800e446:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 f926 	bl	800e69c <USBD_CtlSendStatus>
  }
}
 800e450:	bf00      	nop
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e468:	3b01      	subs	r3, #1
 800e46a:	2b02      	cmp	r3, #2
 800e46c:	d80b      	bhi.n	800e486 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	885b      	ldrh	r3, [r3, #2]
 800e472:	2b01      	cmp	r3, #1
 800e474:	d10c      	bne.n	800e490 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2200      	movs	r2, #0
 800e47a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 f90c 	bl	800e69c <USBD_CtlSendStatus>
      }
      break;
 800e484:	e004      	b.n	800e490 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800e486:	6839      	ldr	r1, [r7, #0]
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f000 f83f 	bl	800e50c <USBD_CtlError>
      break;
 800e48e:	e000      	b.n	800e492 <USBD_ClrFeature+0x3a>
      break;
 800e490:	bf00      	nop
  }
}
 800e492:	bf00      	nop
 800e494:	3708      	adds	r7, #8
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e49a:	b480      	push	{r7}
 800e49c:	b083      	sub	sp, #12
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
 800e4a2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	781a      	ldrb	r2, [r3, #0]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	785a      	ldrb	r2, [r3, #1]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	3302      	adds	r3, #2
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	3303      	adds	r3, #3
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	021b      	lsls	r3, r3, #8
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	4413      	add	r3, r2
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	3304      	adds	r3, #4
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	3305      	adds	r3, #5
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	021b      	lsls	r3, r3, #8
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	4413      	add	r3, r2
 800e4e2:	b29a      	uxth	r2, r3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	3306      	adds	r3, #6
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	3307      	adds	r3, #7
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	021b      	lsls	r3, r3, #8
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	4413      	add	r3, r2
 800e4fc:	b29a      	uxth	r2, r3
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	80da      	strh	r2, [r3, #6]

}
 800e502:	bf00      	nop
 800e504:	370c      	adds	r7, #12
 800e506:	46bd      	mov	sp, r7
 800e508:	bc80      	pop	{r7}
 800e50a:	4770      	bx	lr

0800e50c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800e516:	2180      	movs	r1, #128	@ 0x80
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 fc35 	bl	800ed88 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e51e:	2100      	movs	r1, #0
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f000 fc31 	bl	800ed88 <USBD_LL_StallEP>
}
 800e526:	bf00      	nop
 800e528:	3708      	adds	r7, #8
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}

0800e52e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e52e:	b580      	push	{r7, lr}
 800e530:	b086      	sub	sp, #24
 800e532:	af00      	add	r7, sp, #0
 800e534:	60f8      	str	r0, [r7, #12]
 800e536:	60b9      	str	r1, [r7, #8]
 800e538:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e53a:	2300      	movs	r3, #0
 800e53c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d032      	beq.n	800e5aa <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e544:	68f8      	ldr	r0, [r7, #12]
 800e546:	f000 f834 	bl	800e5b2 <USBD_GetLen>
 800e54a:	4603      	mov	r3, r0
 800e54c:	3301      	adds	r3, #1
 800e54e:	b29b      	uxth	r3, r3
 800e550:	005b      	lsls	r3, r3, #1
 800e552:	b29a      	uxth	r2, r3
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e558:	7dfb      	ldrb	r3, [r7, #23]
 800e55a:	1c5a      	adds	r2, r3, #1
 800e55c:	75fa      	strb	r2, [r7, #23]
 800e55e:	461a      	mov	r2, r3
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	4413      	add	r3, r2
 800e564:	687a      	ldr	r2, [r7, #4]
 800e566:	7812      	ldrb	r2, [r2, #0]
 800e568:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e56a:	7dfb      	ldrb	r3, [r7, #23]
 800e56c:	1c5a      	adds	r2, r3, #1
 800e56e:	75fa      	strb	r2, [r7, #23]
 800e570:	461a      	mov	r2, r3
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	4413      	add	r3, r2
 800e576:	2203      	movs	r2, #3
 800e578:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e57a:	e012      	b.n	800e5a2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	1c5a      	adds	r2, r3, #1
 800e580:	60fa      	str	r2, [r7, #12]
 800e582:	7dfa      	ldrb	r2, [r7, #23]
 800e584:	1c51      	adds	r1, r2, #1
 800e586:	75f9      	strb	r1, [r7, #23]
 800e588:	4611      	mov	r1, r2
 800e58a:	68ba      	ldr	r2, [r7, #8]
 800e58c:	440a      	add	r2, r1
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e592:	7dfb      	ldrb	r3, [r7, #23]
 800e594:	1c5a      	adds	r2, r3, #1
 800e596:	75fa      	strb	r2, [r7, #23]
 800e598:	461a      	mov	r2, r3
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	4413      	add	r3, r2
 800e59e:	2200      	movs	r2, #0
 800e5a0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1e8      	bne.n	800e57c <USBD_GetString+0x4e>
    }
  }
}
 800e5aa:	bf00      	nop
 800e5ac:	3718      	adds	r7, #24
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}

0800e5b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e5b2:	b480      	push	{r7}
 800e5b4:	b085      	sub	sp, #20
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800e5be:	e005      	b.n	800e5cc <USBD_GetLen+0x1a>
  {
    len++;
 800e5c0:	7bfb      	ldrb	r3, [r7, #15]
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	73fb      	strb	r3, [r7, #15]
    buf++;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d1f5      	bne.n	800e5c0 <USBD_GetLen+0xe>
  }

  return len;
 800e5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3714      	adds	r7, #20
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bc80      	pop	{r7}
 800e5de:	4770      	bx	lr

0800e5e0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b084      	sub	sp, #16
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	60f8      	str	r0, [r7, #12]
 800e5e8:	60b9      	str	r1, [r7, #8]
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2202      	movs	r2, #2
 800e5f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e5f6:	88fa      	ldrh	r2, [r7, #6]
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e5fc:	88fa      	ldrh	r2, [r7, #6]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e602:	88fb      	ldrh	r3, [r7, #6]
 800e604:	68ba      	ldr	r2, [r7, #8]
 800e606:	2100      	movs	r1, #0
 800e608:	68f8      	ldr	r0, [r7, #12]
 800e60a:	f000 fc45 	bl	800ee98 <USBD_LL_Transmit>

  return USBD_OK;
 800e60e:	2300      	movs	r3, #0
}
 800e610:	4618      	mov	r0, r3
 800e612:	3710      	adds	r7, #16
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	4613      	mov	r3, r2
 800e624:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e626:	88fb      	ldrh	r3, [r7, #6]
 800e628:	68ba      	ldr	r2, [r7, #8]
 800e62a:	2100      	movs	r1, #0
 800e62c:	68f8      	ldr	r0, [r7, #12]
 800e62e:	f000 fc33 	bl	800ee98 <USBD_LL_Transmit>

  return USBD_OK;
 800e632:	2300      	movs	r3, #0
}
 800e634:	4618      	mov	r0, r3
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	4613      	mov	r3, r2
 800e648:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2203      	movs	r2, #3
 800e64e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e652:	88fa      	ldrh	r2, [r7, #6]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800e65a:	88fa      	ldrh	r2, [r7, #6]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e662:	88fb      	ldrh	r3, [r7, #6]
 800e664:	68ba      	ldr	r2, [r7, #8]
 800e666:	2100      	movs	r1, #0
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f000 fc38 	bl	800eede <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e66e:	2300      	movs	r3, #0
}
 800e670:	4618      	mov	r0, r3
 800e672:	3710      	adds	r7, #16
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	60b9      	str	r1, [r7, #8]
 800e682:	4613      	mov	r3, r2
 800e684:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e686:	88fb      	ldrh	r3, [r7, #6]
 800e688:	68ba      	ldr	r2, [r7, #8]
 800e68a:	2100      	movs	r1, #0
 800e68c:	68f8      	ldr	r0, [r7, #12]
 800e68e:	f000 fc26 	bl	800eede <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e692:	2300      	movs	r3, #0
}
 800e694:	4618      	mov	r0, r3
 800e696:	3710      	adds	r7, #16
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2204      	movs	r2, #4
 800e6a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f000 fbf0 	bl	800ee98 <USBD_LL_Transmit>

  return USBD_OK;
 800e6b8:	2300      	movs	r3, #0
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b082      	sub	sp, #8
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2205      	movs	r2, #5
 800e6ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 fc00 	bl	800eede <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6de:	2300      	movs	r3, #0
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3708      	adds	r7, #8
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	4912      	ldr	r1, [pc, #72]	@ (800e738 <MX_USB_DEVICE_Init+0x50>)
 800e6f0:	4812      	ldr	r0, [pc, #72]	@ (800e73c <MX_USB_DEVICE_Init+0x54>)
 800e6f2:	f7fe ff63 	bl	800d5bc <USBD_Init>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d001      	beq.n	800e700 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e6fc:	f7f4 fffa 	bl	80036f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e700:	490f      	ldr	r1, [pc, #60]	@ (800e740 <MX_USB_DEVICE_Init+0x58>)
 800e702:	480e      	ldr	r0, [pc, #56]	@ (800e73c <MX_USB_DEVICE_Init+0x54>)
 800e704:	f7fe ff85 	bl	800d612 <USBD_RegisterClass>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d001      	beq.n	800e712 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e70e:	f7f4 fff1 	bl	80036f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e712:	490c      	ldr	r1, [pc, #48]	@ (800e744 <MX_USB_DEVICE_Init+0x5c>)
 800e714:	4809      	ldr	r0, [pc, #36]	@ (800e73c <MX_USB_DEVICE_Init+0x54>)
 800e716:	f7fe fee5 	bl	800d4e4 <USBD_CDC_RegisterInterface>
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d001      	beq.n	800e724 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e720:	f7f4 ffe8 	bl	80036f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e724:	4805      	ldr	r0, [pc, #20]	@ (800e73c <MX_USB_DEVICE_Init+0x54>)
 800e726:	f7fe ff8d 	bl	800d644 <USBD_Start>
 800e72a:	4603      	mov	r3, r0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d001      	beq.n	800e734 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e730:	f7f4 ffe0 	bl	80036f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e734:	bf00      	nop
 800e736:	bd80      	pop	{r7, pc}
 800e738:	2000012c 	.word	0x2000012c
 800e73c:	200018b0 	.word	0x200018b0
 800e740:	20000018 	.word	0x20000018
 800e744:	2000011c 	.word	0x2000011c

0800e748 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e74c:	2200      	movs	r2, #0
 800e74e:	4905      	ldr	r1, [pc, #20]	@ (800e764 <CDC_Init_FS+0x1c>)
 800e750:	4805      	ldr	r0, [pc, #20]	@ (800e768 <CDC_Init_FS+0x20>)
 800e752:	f7fe fedd 	bl	800d510 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e756:	4905      	ldr	r1, [pc, #20]	@ (800e76c <CDC_Init_FS+0x24>)
 800e758:	4803      	ldr	r0, [pc, #12]	@ (800e768 <CDC_Init_FS+0x20>)
 800e75a:	f7fe fef2 	bl	800d542 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e75e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e760:	4618      	mov	r0, r3
 800e762:	bd80      	pop	{r7, pc}
 800e764:	20001f74 	.word	0x20001f74
 800e768:	200018b0 	.word	0x200018b0
 800e76c:	20001b74 	.word	0x20001b74

0800e770 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e770:	b480      	push	{r7}
 800e772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e774:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e776:	4618      	mov	r0, r3
 800e778:	46bd      	mov	sp, r7
 800e77a:	bc80      	pop	{r7}
 800e77c:	4770      	bx	lr
	...

0800e780 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
 800e786:	4603      	mov	r3, r0
 800e788:	6039      	str	r1, [r7, #0]
 800e78a:	71fb      	strb	r3, [r7, #7]
 800e78c:	4613      	mov	r3, r2
 800e78e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e790:	79fb      	ldrb	r3, [r7, #7]
 800e792:	2b23      	cmp	r3, #35	@ 0x23
 800e794:	d84a      	bhi.n	800e82c <CDC_Control_FS+0xac>
 800e796:	a201      	add	r2, pc, #4	@ (adr r2, 800e79c <CDC_Control_FS+0x1c>)
 800e798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e79c:	0800e82d 	.word	0x0800e82d
 800e7a0:	0800e82d 	.word	0x0800e82d
 800e7a4:	0800e82d 	.word	0x0800e82d
 800e7a8:	0800e82d 	.word	0x0800e82d
 800e7ac:	0800e82d 	.word	0x0800e82d
 800e7b0:	0800e82d 	.word	0x0800e82d
 800e7b4:	0800e82d 	.word	0x0800e82d
 800e7b8:	0800e82d 	.word	0x0800e82d
 800e7bc:	0800e82d 	.word	0x0800e82d
 800e7c0:	0800e82d 	.word	0x0800e82d
 800e7c4:	0800e82d 	.word	0x0800e82d
 800e7c8:	0800e82d 	.word	0x0800e82d
 800e7cc:	0800e82d 	.word	0x0800e82d
 800e7d0:	0800e82d 	.word	0x0800e82d
 800e7d4:	0800e82d 	.word	0x0800e82d
 800e7d8:	0800e82d 	.word	0x0800e82d
 800e7dc:	0800e82d 	.word	0x0800e82d
 800e7e0:	0800e82d 	.word	0x0800e82d
 800e7e4:	0800e82d 	.word	0x0800e82d
 800e7e8:	0800e82d 	.word	0x0800e82d
 800e7ec:	0800e82d 	.word	0x0800e82d
 800e7f0:	0800e82d 	.word	0x0800e82d
 800e7f4:	0800e82d 	.word	0x0800e82d
 800e7f8:	0800e82d 	.word	0x0800e82d
 800e7fc:	0800e82d 	.word	0x0800e82d
 800e800:	0800e82d 	.word	0x0800e82d
 800e804:	0800e82d 	.word	0x0800e82d
 800e808:	0800e82d 	.word	0x0800e82d
 800e80c:	0800e82d 	.word	0x0800e82d
 800e810:	0800e82d 	.word	0x0800e82d
 800e814:	0800e82d 	.word	0x0800e82d
 800e818:	0800e82d 	.word	0x0800e82d
 800e81c:	0800e82d 	.word	0x0800e82d
 800e820:	0800e82d 	.word	0x0800e82d
 800e824:	0800e82d 	.word	0x0800e82d
 800e828:	0800e82d 	.word	0x0800e82d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e82c:	bf00      	nop
  }

  return (USBD_OK);
 800e82e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e830:	4618      	mov	r0, r3
 800e832:	370c      	adds	r7, #12
 800e834:	46bd      	mov	sp, r7
 800e836:	bc80      	pop	{r7}
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop

0800e83c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e846:	6879      	ldr	r1, [r7, #4]
 800e848:	4805      	ldr	r0, [pc, #20]	@ (800e860 <CDC_Receive_FS+0x24>)
 800e84a:	f7fe fe7a 	bl	800d542 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e84e:	4804      	ldr	r0, [pc, #16]	@ (800e860 <CDC_Receive_FS+0x24>)
 800e850:	f7fe fe8a 	bl	800d568 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e854:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e856:	4618      	mov	r0, r3
 800e858:	3708      	adds	r7, #8
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	200018b0 	.word	0x200018b0

0800e864 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e864:	b480      	push	{r7}
 800e866:	b083      	sub	sp, #12
 800e868:	af00      	add	r7, sp, #0
 800e86a:	4603      	mov	r3, r0
 800e86c:	6039      	str	r1, [r7, #0]
 800e86e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	2212      	movs	r2, #18
 800e874:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e876:	4b03      	ldr	r3, [pc, #12]	@ (800e884 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e878:	4618      	mov	r0, r3
 800e87a:	370c      	adds	r7, #12
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bc80      	pop	{r7}
 800e880:	4770      	bx	lr
 800e882:	bf00      	nop
 800e884:	20000148 	.word	0x20000148

0800e888 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	4603      	mov	r3, r0
 800e890:	6039      	str	r1, [r7, #0]
 800e892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	2204      	movs	r2, #4
 800e898:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e89a:	4b03      	ldr	r3, [pc, #12]	@ (800e8a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bc80      	pop	{r7}
 800e8a4:	4770      	bx	lr
 800e8a6:	bf00      	nop
 800e8a8:	2000015c 	.word	0x2000015c

0800e8ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	6039      	str	r1, [r7, #0]
 800e8b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e8b8:	79fb      	ldrb	r3, [r7, #7]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d105      	bne.n	800e8ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e8be:	683a      	ldr	r2, [r7, #0]
 800e8c0:	4907      	ldr	r1, [pc, #28]	@ (800e8e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e8c2:	4808      	ldr	r0, [pc, #32]	@ (800e8e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e8c4:	f7ff fe33 	bl	800e52e <USBD_GetString>
 800e8c8:	e004      	b.n	800e8d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e8ca:	683a      	ldr	r2, [r7, #0]
 800e8cc:	4904      	ldr	r1, [pc, #16]	@ (800e8e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e8ce:	4805      	ldr	r0, [pc, #20]	@ (800e8e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e8d0:	f7ff fe2d 	bl	800e52e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e8d4:	4b02      	ldr	r3, [pc, #8]	@ (800e8e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3708      	adds	r7, #8
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	20002374 	.word	0x20002374
 800e8e4:	08012c74 	.word	0x08012c74

0800e8e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	6039      	str	r1, [r7, #0]
 800e8f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e8f4:	683a      	ldr	r2, [r7, #0]
 800e8f6:	4904      	ldr	r1, [pc, #16]	@ (800e908 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e8f8:	4804      	ldr	r0, [pc, #16]	@ (800e90c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e8fa:	f7ff fe18 	bl	800e52e <USBD_GetString>
  return USBD_StrDesc;
 800e8fe:	4b02      	ldr	r3, [pc, #8]	@ (800e908 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e900:	4618      	mov	r0, r3
 800e902:	3708      	adds	r7, #8
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	20002374 	.word	0x20002374
 800e90c:	08012c8c 	.word	0x08012c8c

0800e910 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	4603      	mov	r3, r0
 800e918:	6039      	str	r1, [r7, #0]
 800e91a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	221a      	movs	r2, #26
 800e920:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e922:	f000 f843 	bl	800e9ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e926:	4b02      	ldr	r3, [pc, #8]	@ (800e930 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	20000160 	.word	0x20000160

0800e934 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	4603      	mov	r3, r0
 800e93c:	6039      	str	r1, [r7, #0]
 800e93e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e940:	79fb      	ldrb	r3, [r7, #7]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d105      	bne.n	800e952 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e946:	683a      	ldr	r2, [r7, #0]
 800e948:	4907      	ldr	r1, [pc, #28]	@ (800e968 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e94a:	4808      	ldr	r0, [pc, #32]	@ (800e96c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e94c:	f7ff fdef 	bl	800e52e <USBD_GetString>
 800e950:	e004      	b.n	800e95c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e952:	683a      	ldr	r2, [r7, #0]
 800e954:	4904      	ldr	r1, [pc, #16]	@ (800e968 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e956:	4805      	ldr	r0, [pc, #20]	@ (800e96c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e958:	f7ff fde9 	bl	800e52e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e95c:	4b02      	ldr	r3, [pc, #8]	@ (800e968 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3708      	adds	r7, #8
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	20002374 	.word	0x20002374
 800e96c:	08012ca0 	.word	0x08012ca0

0800e970 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af00      	add	r7, sp, #0
 800e976:	4603      	mov	r3, r0
 800e978:	6039      	str	r1, [r7, #0]
 800e97a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e97c:	79fb      	ldrb	r3, [r7, #7]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d105      	bne.n	800e98e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e982:	683a      	ldr	r2, [r7, #0]
 800e984:	4907      	ldr	r1, [pc, #28]	@ (800e9a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e986:	4808      	ldr	r0, [pc, #32]	@ (800e9a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e988:	f7ff fdd1 	bl	800e52e <USBD_GetString>
 800e98c:	e004      	b.n	800e998 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e98e:	683a      	ldr	r2, [r7, #0]
 800e990:	4904      	ldr	r1, [pc, #16]	@ (800e9a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e992:	4805      	ldr	r0, [pc, #20]	@ (800e9a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e994:	f7ff fdcb 	bl	800e52e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e998:	4b02      	ldr	r3, [pc, #8]	@ (800e9a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3708      	adds	r7, #8
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	20002374 	.word	0x20002374
 800e9a8:	08012cac 	.word	0x08012cac

0800e9ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b084      	sub	sp, #16
 800e9b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e9b2:	4b0f      	ldr	r3, [pc, #60]	@ (800e9f0 <Get_SerialNum+0x44>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e9b8:	4b0e      	ldr	r3, [pc, #56]	@ (800e9f4 <Get_SerialNum+0x48>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e9be:	4b0e      	ldr	r3, [pc, #56]	@ (800e9f8 <Get_SerialNum+0x4c>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	4413      	add	r3, r2
 800e9ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d009      	beq.n	800e9e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e9d2:	2208      	movs	r2, #8
 800e9d4:	4909      	ldr	r1, [pc, #36]	@ (800e9fc <Get_SerialNum+0x50>)
 800e9d6:	68f8      	ldr	r0, [r7, #12]
 800e9d8:	f000 f814 	bl	800ea04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e9dc:	2204      	movs	r2, #4
 800e9de:	4908      	ldr	r1, [pc, #32]	@ (800ea00 <Get_SerialNum+0x54>)
 800e9e0:	68b8      	ldr	r0, [r7, #8]
 800e9e2:	f000 f80f 	bl	800ea04 <IntToUnicode>
  }
}
 800e9e6:	bf00      	nop
 800e9e8:	3710      	adds	r7, #16
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	1ffff7e8 	.word	0x1ffff7e8
 800e9f4:	1ffff7ec 	.word	0x1ffff7ec
 800e9f8:	1ffff7f0 	.word	0x1ffff7f0
 800e9fc:	20000162 	.word	0x20000162
 800ea00:	20000172 	.word	0x20000172

0800ea04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ea04:	b480      	push	{r7}
 800ea06:	b087      	sub	sp, #28
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	4613      	mov	r3, r2
 800ea10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ea12:	2300      	movs	r3, #0
 800ea14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ea16:	2300      	movs	r3, #0
 800ea18:	75fb      	strb	r3, [r7, #23]
 800ea1a:	e027      	b.n	800ea6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	0f1b      	lsrs	r3, r3, #28
 800ea20:	2b09      	cmp	r3, #9
 800ea22:	d80b      	bhi.n	800ea3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	0f1b      	lsrs	r3, r3, #28
 800ea28:	b2da      	uxtb	r2, r3
 800ea2a:	7dfb      	ldrb	r3, [r7, #23]
 800ea2c:	005b      	lsls	r3, r3, #1
 800ea2e:	4619      	mov	r1, r3
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	440b      	add	r3, r1
 800ea34:	3230      	adds	r2, #48	@ 0x30
 800ea36:	b2d2      	uxtb	r2, r2
 800ea38:	701a      	strb	r2, [r3, #0]
 800ea3a:	e00a      	b.n	800ea52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	0f1b      	lsrs	r3, r3, #28
 800ea40:	b2da      	uxtb	r2, r3
 800ea42:	7dfb      	ldrb	r3, [r7, #23]
 800ea44:	005b      	lsls	r3, r3, #1
 800ea46:	4619      	mov	r1, r3
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	440b      	add	r3, r1
 800ea4c:	3237      	adds	r2, #55	@ 0x37
 800ea4e:	b2d2      	uxtb	r2, r2
 800ea50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	011b      	lsls	r3, r3, #4
 800ea56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ea58:	7dfb      	ldrb	r3, [r7, #23]
 800ea5a:	005b      	lsls	r3, r3, #1
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	68ba      	ldr	r2, [r7, #8]
 800ea60:	4413      	add	r3, r2
 800ea62:	2200      	movs	r2, #0
 800ea64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ea66:	7dfb      	ldrb	r3, [r7, #23]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	75fb      	strb	r3, [r7, #23]
 800ea6c:	7dfa      	ldrb	r2, [r7, #23]
 800ea6e:	79fb      	ldrb	r3, [r7, #7]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d3d3      	bcc.n	800ea1c <IntToUnicode+0x18>
  }
}
 800ea74:	bf00      	nop
 800ea76:	bf00      	nop
 800ea78:	371c      	adds	r7, #28
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bc80      	pop	{r7}
 800ea7e:	4770      	bx	lr

0800ea80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	4a11      	ldr	r2, [pc, #68]	@ (800ead4 <HAL_PCD_MspInit+0x54>)
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d11b      	bne.n	800eaca <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ea92:	4b11      	ldr	r3, [pc, #68]	@ (800ead8 <HAL_PCD_MspInit+0x58>)
 800ea94:	69db      	ldr	r3, [r3, #28]
 800ea96:	4a10      	ldr	r2, [pc, #64]	@ (800ead8 <HAL_PCD_MspInit+0x58>)
 800ea98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ea9c:	61d3      	str	r3, [r2, #28]
 800ea9e:	4b0e      	ldr	r3, [pc, #56]	@ (800ead8 <HAL_PCD_MspInit+0x58>)
 800eaa0:	69db      	ldr	r3, [r3, #28]
 800eaa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eaa6:	60fb      	str	r3, [r7, #12]
 800eaa8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800eaaa:	2200      	movs	r2, #0
 800eaac:	2100      	movs	r1, #0
 800eaae:	2013      	movs	r0, #19
 800eab0:	f7f5 fae7 	bl	8004082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800eab4:	2013      	movs	r0, #19
 800eab6:	f7f5 fb00 	bl	80040ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800eaba:	2200      	movs	r2, #0
 800eabc:	2100      	movs	r1, #0
 800eabe:	2014      	movs	r0, #20
 800eac0:	f7f5 fadf 	bl	8004082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800eac4:	2014      	movs	r0, #20
 800eac6:	f7f5 faf8 	bl	80040ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800eaca:	bf00      	nop
 800eacc:	3710      	adds	r7, #16
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	40005c00 	.word	0x40005c00
 800ead8:	40021000 	.word	0x40021000

0800eadc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	4610      	mov	r0, r2
 800eaf4:	f7fe fdee 	bl	800d6d4 <USBD_LL_SetupStage>
}
 800eaf8:	bf00      	nop
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b082      	sub	sp, #8
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	460b      	mov	r3, r1
 800eb0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800eb12:	78fa      	ldrb	r2, [r7, #3]
 800eb14:	6879      	ldr	r1, [r7, #4]
 800eb16:	4613      	mov	r3, r2
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	4413      	add	r3, r2
 800eb1c:	00db      	lsls	r3, r3, #3
 800eb1e:	440b      	add	r3, r1
 800eb20:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	78fb      	ldrb	r3, [r7, #3]
 800eb28:	4619      	mov	r1, r3
 800eb2a:	f7fe fe20 	bl	800d76e <USBD_LL_DataOutStage>
}
 800eb2e:	bf00      	nop
 800eb30:	3708      	adds	r7, #8
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}

0800eb36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b082      	sub	sp, #8
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
 800eb3e:	460b      	mov	r3, r1
 800eb40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800eb48:	78fa      	ldrb	r2, [r7, #3]
 800eb4a:	6879      	ldr	r1, [r7, #4]
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	009b      	lsls	r3, r3, #2
 800eb50:	4413      	add	r3, r2
 800eb52:	00db      	lsls	r3, r3, #3
 800eb54:	440b      	add	r3, r1
 800eb56:	3324      	adds	r3, #36	@ 0x24
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	78fb      	ldrb	r3, [r7, #3]
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	f7fe fe77 	bl	800d850 <USBD_LL_DataInStage>
}
 800eb62:	bf00      	nop
 800eb64:	3708      	adds	r7, #8
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}

0800eb6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb6a:	b580      	push	{r7, lr}
 800eb6c:	b082      	sub	sp, #8
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fe ff87 	bl	800da8c <USBD_LL_SOF>
}
 800eb7e:	bf00      	nop
 800eb80:	3708      	adds	r7, #8
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b084      	sub	sp, #16
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	799b      	ldrb	r3, [r3, #6]
 800eb96:	2b02      	cmp	r3, #2
 800eb98:	d001      	beq.n	800eb9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800eb9a:	f7f4 fdab 	bl	80036f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eba4:	7bfa      	ldrb	r2, [r7, #15]
 800eba6:	4611      	mov	r1, r2
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7fe ff37 	bl	800da1c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7fe fef0 	bl	800d99a <USBD_LL_Reset>
}
 800ebba:	bf00      	nop
 800ebbc:	3710      	adds	r7, #16
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
	...

0800ebc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7fe ff31 	bl	800da3a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	7a9b      	ldrb	r3, [r3, #10]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d005      	beq.n	800ebec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ebe0:	4b04      	ldr	r3, [pc, #16]	@ (800ebf4 <HAL_PCD_SuspendCallback+0x30>)
 800ebe2:	691b      	ldr	r3, [r3, #16]
 800ebe4:	4a03      	ldr	r2, [pc, #12]	@ (800ebf4 <HAL_PCD_SuspendCallback+0x30>)
 800ebe6:	f043 0306 	orr.w	r3, r3, #6
 800ebea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ebec:	bf00      	nop
 800ebee:	3708      	adds	r7, #8
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}
 800ebf4:	e000ed00 	.word	0xe000ed00

0800ebf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7fe ff2b 	bl	800da62 <USBD_LL_Resume>
}
 800ec0c:	bf00      	nop
 800ec0e:	3708      	adds	r7, #8
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ec1c:	4a28      	ldr	r2, [pc, #160]	@ (800ecc0 <USBD_LL_Init+0xac>)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	4a26      	ldr	r2, [pc, #152]	@ (800ecc0 <USBD_LL_Init+0xac>)
 800ec28:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ec2c:	4b24      	ldr	r3, [pc, #144]	@ (800ecc0 <USBD_LL_Init+0xac>)
 800ec2e:	4a25      	ldr	r2, [pc, #148]	@ (800ecc4 <USBD_LL_Init+0xb0>)
 800ec30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ec32:	4b23      	ldr	r3, [pc, #140]	@ (800ecc0 <USBD_LL_Init+0xac>)
 800ec34:	2208      	movs	r2, #8
 800ec36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ec38:	4b21      	ldr	r3, [pc, #132]	@ (800ecc0 <USBD_LL_Init+0xac>)
 800ec3a:	2202      	movs	r2, #2
 800ec3c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ec3e:	4b20      	ldr	r3, [pc, #128]	@ (800ecc0 <USBD_LL_Init+0xac>)
 800ec40:	2200      	movs	r2, #0
 800ec42:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ec44:	4b1e      	ldr	r3, [pc, #120]	@ (800ecc0 <USBD_LL_Init+0xac>)
 800ec46:	2200      	movs	r2, #0
 800ec48:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ec4a:	4b1d      	ldr	r3, [pc, #116]	@ (800ecc0 <USBD_LL_Init+0xac>)
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ec50:	481b      	ldr	r0, [pc, #108]	@ (800ecc0 <USBD_LL_Init+0xac>)
 800ec52:	f7f6 fdc8 	bl	80057e6 <HAL_PCD_Init>
 800ec56:	4603      	mov	r3, r0
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d001      	beq.n	800ec60 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ec5c:	f7f4 fd4a 	bl	80036f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ec66:	2318      	movs	r3, #24
 800ec68:	2200      	movs	r2, #0
 800ec6a:	2100      	movs	r1, #0
 800ec6c:	f7f8 fad9 	bl	8007222 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ec76:	2358      	movs	r3, #88	@ 0x58
 800ec78:	2200      	movs	r2, #0
 800ec7a:	2180      	movs	r1, #128	@ 0x80
 800ec7c:	f7f8 fad1 	bl	8007222 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ec86:	23c0      	movs	r3, #192	@ 0xc0
 800ec88:	2200      	movs	r2, #0
 800ec8a:	2181      	movs	r1, #129	@ 0x81
 800ec8c:	f7f8 fac9 	bl	8007222 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ec96:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	2101      	movs	r1, #1
 800ec9e:	f7f8 fac0 	bl	8007222 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800eca8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ecac:	2200      	movs	r2, #0
 800ecae:	2182      	movs	r1, #130	@ 0x82
 800ecb0:	f7f8 fab7 	bl	8007222 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ecb4:	2300      	movs	r3, #0
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3708      	adds	r7, #8
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	20002574 	.word	0x20002574
 800ecc4:	40005c00 	.word	0x40005c00

0800ecc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7f6 fe77 	bl	80059d2 <HAL_PCD_Start>
 800ece4:	4603      	mov	r3, r0
 800ece6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ece8:	7bfb      	ldrb	r3, [r7, #15]
 800ecea:	4618      	mov	r0, r3
 800ecec:	f000 f94e 	bl	800ef8c <USBD_Get_USB_Status>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}

0800ecfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ecfe:	b580      	push	{r7, lr}
 800ed00:	b084      	sub	sp, #16
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	4608      	mov	r0, r1
 800ed08:	4611      	mov	r1, r2
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	70fb      	strb	r3, [r7, #3]
 800ed10:	460b      	mov	r3, r1
 800ed12:	70bb      	strb	r3, [r7, #2]
 800ed14:	4613      	mov	r3, r2
 800ed16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ed26:	78bb      	ldrb	r3, [r7, #2]
 800ed28:	883a      	ldrh	r2, [r7, #0]
 800ed2a:	78f9      	ldrb	r1, [r7, #3]
 800ed2c:	f7f6 ffcb 	bl	8005cc6 <HAL_PCD_EP_Open>
 800ed30:	4603      	mov	r3, r0
 800ed32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed34:	7bfb      	ldrb	r3, [r7, #15]
 800ed36:	4618      	mov	r0, r3
 800ed38:	f000 f928 	bl	800ef8c <USBD_Get_USB_Status>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3710      	adds	r7, #16
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}

0800ed4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed4a:	b580      	push	{r7, lr}
 800ed4c:	b084      	sub	sp, #16
 800ed4e:	af00      	add	r7, sp, #0
 800ed50:	6078      	str	r0, [r7, #4]
 800ed52:	460b      	mov	r3, r1
 800ed54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed56:	2300      	movs	r3, #0
 800ed58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ed64:	78fa      	ldrb	r2, [r7, #3]
 800ed66:	4611      	mov	r1, r2
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7f7 f809 	bl	8005d80 <HAL_PCD_EP_Close>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed72:	7bfb      	ldrb	r3, [r7, #15]
 800ed74:	4618      	mov	r0, r3
 800ed76:	f000 f909 	bl	800ef8c <USBD_Get_USB_Status>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3710      	adds	r7, #16
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	460b      	mov	r3, r1
 800ed92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed94:	2300      	movs	r3, #0
 800ed96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eda2:	78fa      	ldrb	r2, [r7, #3]
 800eda4:	4611      	mov	r1, r2
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7f7 f8b1 	bl	8005f0e <HAL_PCD_EP_SetStall>
 800edac:	4603      	mov	r3, r0
 800edae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edb0:	7bfb      	ldrb	r3, [r7, #15]
 800edb2:	4618      	mov	r0, r3
 800edb4:	f000 f8ea 	bl	800ef8c <USBD_Get_USB_Status>
 800edb8:	4603      	mov	r3, r0
 800edba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3710      	adds	r7, #16
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b084      	sub	sp, #16
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
 800edce:	460b      	mov	r3, r1
 800edd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edd2:	2300      	movs	r3, #0
 800edd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edd6:	2300      	movs	r3, #0
 800edd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ede0:	78fa      	ldrb	r2, [r7, #3]
 800ede2:	4611      	mov	r1, r2
 800ede4:	4618      	mov	r0, r3
 800ede6:	f7f7 f8f2 	bl	8005fce <HAL_PCD_EP_ClrStall>
 800edea:	4603      	mov	r3, r0
 800edec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edee:	7bfb      	ldrb	r3, [r7, #15]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f000 f8cb 	bl	800ef8c <USBD_Get_USB_Status>
 800edf6:	4603      	mov	r3, r0
 800edf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edfa:	7bbb      	ldrb	r3, [r7, #14]
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3710      	adds	r7, #16
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}

0800ee04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b085      	sub	sp, #20
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	460b      	mov	r3, r1
 800ee0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ee16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ee18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	da0b      	bge.n	800ee38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ee20:	78fb      	ldrb	r3, [r7, #3]
 800ee22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee26:	68f9      	ldr	r1, [r7, #12]
 800ee28:	4613      	mov	r3, r2
 800ee2a:	009b      	lsls	r3, r3, #2
 800ee2c:	4413      	add	r3, r2
 800ee2e:	00db      	lsls	r3, r3, #3
 800ee30:	440b      	add	r3, r1
 800ee32:	3312      	adds	r3, #18
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	e00b      	b.n	800ee50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ee38:	78fb      	ldrb	r3, [r7, #3]
 800ee3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee3e:	68f9      	ldr	r1, [r7, #12]
 800ee40:	4613      	mov	r3, r2
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	4413      	add	r3, r2
 800ee46:	00db      	lsls	r3, r3, #3
 800ee48:	440b      	add	r3, r1
 800ee4a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ee4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3714      	adds	r7, #20
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bc80      	pop	{r7}
 800ee58:	4770      	bx	lr

0800ee5a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ee5a:	b580      	push	{r7, lr}
 800ee5c:	b084      	sub	sp, #16
 800ee5e:	af00      	add	r7, sp, #0
 800ee60:	6078      	str	r0, [r7, #4]
 800ee62:	460b      	mov	r3, r1
 800ee64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee66:	2300      	movs	r3, #0
 800ee68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ee74:	78fa      	ldrb	r2, [r7, #3]
 800ee76:	4611      	mov	r1, r2
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7f6 ff00 	bl	8005c7e <HAL_PCD_SetAddress>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee82:	7bfb      	ldrb	r3, [r7, #15]
 800ee84:	4618      	mov	r0, r3
 800ee86:	f000 f881 	bl	800ef8c <USBD_Get_USB_Status>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3710      	adds	r7, #16
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b086      	sub	sp, #24
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	607a      	str	r2, [r7, #4]
 800eea2:	461a      	mov	r2, r3
 800eea4:	460b      	mov	r3, r1
 800eea6:	72fb      	strb	r3, [r7, #11]
 800eea8:	4613      	mov	r3, r2
 800eeaa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eeac:	2300      	movs	r3, #0
 800eeae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800eeba:	893b      	ldrh	r3, [r7, #8]
 800eebc:	7af9      	ldrb	r1, [r7, #11]
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	f7f6 ffee 	bl	8005ea0 <HAL_PCD_EP_Transmit>
 800eec4:	4603      	mov	r3, r0
 800eec6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eec8:	7dfb      	ldrb	r3, [r7, #23]
 800eeca:	4618      	mov	r0, r3
 800eecc:	f000 f85e 	bl	800ef8c <USBD_Get_USB_Status>
 800eed0:	4603      	mov	r3, r0
 800eed2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eed4:	7dbb      	ldrb	r3, [r7, #22]
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3718      	adds	r7, #24
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}

0800eede <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800eede:	b580      	push	{r7, lr}
 800eee0:	b086      	sub	sp, #24
 800eee2:	af00      	add	r7, sp, #0
 800eee4:	60f8      	str	r0, [r7, #12]
 800eee6:	607a      	str	r2, [r7, #4]
 800eee8:	461a      	mov	r2, r3
 800eeea:	460b      	mov	r3, r1
 800eeec:	72fb      	strb	r3, [r7, #11]
 800eeee:	4613      	mov	r3, r2
 800eef0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eef2:	2300      	movs	r3, #0
 800eef4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eef6:	2300      	movs	r3, #0
 800eef8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ef00:	893b      	ldrh	r3, [r7, #8]
 800ef02:	7af9      	ldrb	r1, [r7, #11]
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	f7f6 ff83 	bl	8005e10 <HAL_PCD_EP_Receive>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef0e:	7dfb      	ldrb	r3, [r7, #23]
 800ef10:	4618      	mov	r0, r3
 800ef12:	f000 f83b 	bl	800ef8c <USBD_Get_USB_Status>
 800ef16:	4603      	mov	r3, r0
 800ef18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ef1a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3718      	adds	r7, #24
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	460b      	mov	r3, r1
 800ef2e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ef36:	78fa      	ldrb	r2, [r7, #3]
 800ef38:	4611      	mov	r1, r2
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7f6 ff99 	bl	8005e72 <HAL_PCD_EP_GetRxCount>
 800ef40:	4603      	mov	r3, r0
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3708      	adds	r7, #8
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
	...

0800ef4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b083      	sub	sp, #12
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ef54:	4b02      	ldr	r3, [pc, #8]	@ (800ef60 <USBD_static_malloc+0x14>)
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	370c      	adds	r7, #12
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bc80      	pop	{r7}
 800ef5e:	4770      	bx	lr
 800ef60:	2000284c 	.word	0x2000284c

0800ef64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]

}
 800ef6c:	bf00      	nop
 800ef6e:	370c      	adds	r7, #12
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bc80      	pop	{r7}
 800ef74:	4770      	bx	lr

0800ef76 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef76:	b480      	push	{r7}
 800ef78:	b083      	sub	sp, #12
 800ef7a:	af00      	add	r7, sp, #0
 800ef7c:	6078      	str	r0, [r7, #4]
 800ef7e:	460b      	mov	r3, r1
 800ef80:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ef82:	bf00      	nop
 800ef84:	370c      	adds	r7, #12
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bc80      	pop	{r7}
 800ef8a:	4770      	bx	lr

0800ef8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b085      	sub	sp, #20
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	4603      	mov	r3, r0
 800ef94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef96:	2300      	movs	r3, #0
 800ef98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ef9a:	79fb      	ldrb	r3, [r7, #7]
 800ef9c:	2b03      	cmp	r3, #3
 800ef9e:	d817      	bhi.n	800efd0 <USBD_Get_USB_Status+0x44>
 800efa0:	a201      	add	r2, pc, #4	@ (adr r2, 800efa8 <USBD_Get_USB_Status+0x1c>)
 800efa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa6:	bf00      	nop
 800efa8:	0800efb9 	.word	0x0800efb9
 800efac:	0800efbf 	.word	0x0800efbf
 800efb0:	0800efc5 	.word	0x0800efc5
 800efb4:	0800efcb 	.word	0x0800efcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800efb8:	2300      	movs	r3, #0
 800efba:	73fb      	strb	r3, [r7, #15]
    break;
 800efbc:	e00b      	b.n	800efd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800efbe:	2302      	movs	r3, #2
 800efc0:	73fb      	strb	r3, [r7, #15]
    break;
 800efc2:	e008      	b.n	800efd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800efc4:	2301      	movs	r3, #1
 800efc6:	73fb      	strb	r3, [r7, #15]
    break;
 800efc8:	e005      	b.n	800efd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800efca:	2302      	movs	r3, #2
 800efcc:	73fb      	strb	r3, [r7, #15]
    break;
 800efce:	e002      	b.n	800efd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800efd0:	2302      	movs	r3, #2
 800efd2:	73fb      	strb	r3, [r7, #15]
    break;
 800efd4:	bf00      	nop
  }
  return usb_status;
 800efd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3714      	adds	r7, #20
 800efdc:	46bd      	mov	sp, r7
 800efde:	bc80      	pop	{r7}
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop

0800efe4 <malloc>:
 800efe4:	4b02      	ldr	r3, [pc, #8]	@ (800eff0 <malloc+0xc>)
 800efe6:	4601      	mov	r1, r0
 800efe8:	6818      	ldr	r0, [r3, #0]
 800efea:	f000 b825 	b.w	800f038 <_malloc_r>
 800efee:	bf00      	nop
 800eff0:	20000188 	.word	0x20000188

0800eff4 <sbrk_aligned>:
 800eff4:	b570      	push	{r4, r5, r6, lr}
 800eff6:	4e0f      	ldr	r6, [pc, #60]	@ (800f034 <sbrk_aligned+0x40>)
 800eff8:	460c      	mov	r4, r1
 800effa:	6831      	ldr	r1, [r6, #0]
 800effc:	4605      	mov	r5, r0
 800effe:	b911      	cbnz	r1, 800f006 <sbrk_aligned+0x12>
 800f000:	f000 fe7c 	bl	800fcfc <_sbrk_r>
 800f004:	6030      	str	r0, [r6, #0]
 800f006:	4621      	mov	r1, r4
 800f008:	4628      	mov	r0, r5
 800f00a:	f000 fe77 	bl	800fcfc <_sbrk_r>
 800f00e:	1c43      	adds	r3, r0, #1
 800f010:	d103      	bne.n	800f01a <sbrk_aligned+0x26>
 800f012:	f04f 34ff 	mov.w	r4, #4294967295
 800f016:	4620      	mov	r0, r4
 800f018:	bd70      	pop	{r4, r5, r6, pc}
 800f01a:	1cc4      	adds	r4, r0, #3
 800f01c:	f024 0403 	bic.w	r4, r4, #3
 800f020:	42a0      	cmp	r0, r4
 800f022:	d0f8      	beq.n	800f016 <sbrk_aligned+0x22>
 800f024:	1a21      	subs	r1, r4, r0
 800f026:	4628      	mov	r0, r5
 800f028:	f000 fe68 	bl	800fcfc <_sbrk_r>
 800f02c:	3001      	adds	r0, #1
 800f02e:	d1f2      	bne.n	800f016 <sbrk_aligned+0x22>
 800f030:	e7ef      	b.n	800f012 <sbrk_aligned+0x1e>
 800f032:	bf00      	nop
 800f034:	20002a6c 	.word	0x20002a6c

0800f038 <_malloc_r>:
 800f038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f03c:	1ccd      	adds	r5, r1, #3
 800f03e:	f025 0503 	bic.w	r5, r5, #3
 800f042:	3508      	adds	r5, #8
 800f044:	2d0c      	cmp	r5, #12
 800f046:	bf38      	it	cc
 800f048:	250c      	movcc	r5, #12
 800f04a:	2d00      	cmp	r5, #0
 800f04c:	4606      	mov	r6, r0
 800f04e:	db01      	blt.n	800f054 <_malloc_r+0x1c>
 800f050:	42a9      	cmp	r1, r5
 800f052:	d904      	bls.n	800f05e <_malloc_r+0x26>
 800f054:	230c      	movs	r3, #12
 800f056:	6033      	str	r3, [r6, #0]
 800f058:	2000      	movs	r0, #0
 800f05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f05e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f134 <_malloc_r+0xfc>
 800f062:	f000 f869 	bl	800f138 <__malloc_lock>
 800f066:	f8d8 3000 	ldr.w	r3, [r8]
 800f06a:	461c      	mov	r4, r3
 800f06c:	bb44      	cbnz	r4, 800f0c0 <_malloc_r+0x88>
 800f06e:	4629      	mov	r1, r5
 800f070:	4630      	mov	r0, r6
 800f072:	f7ff ffbf 	bl	800eff4 <sbrk_aligned>
 800f076:	1c43      	adds	r3, r0, #1
 800f078:	4604      	mov	r4, r0
 800f07a:	d158      	bne.n	800f12e <_malloc_r+0xf6>
 800f07c:	f8d8 4000 	ldr.w	r4, [r8]
 800f080:	4627      	mov	r7, r4
 800f082:	2f00      	cmp	r7, #0
 800f084:	d143      	bne.n	800f10e <_malloc_r+0xd6>
 800f086:	2c00      	cmp	r4, #0
 800f088:	d04b      	beq.n	800f122 <_malloc_r+0xea>
 800f08a:	6823      	ldr	r3, [r4, #0]
 800f08c:	4639      	mov	r1, r7
 800f08e:	4630      	mov	r0, r6
 800f090:	eb04 0903 	add.w	r9, r4, r3
 800f094:	f000 fe32 	bl	800fcfc <_sbrk_r>
 800f098:	4581      	cmp	r9, r0
 800f09a:	d142      	bne.n	800f122 <_malloc_r+0xea>
 800f09c:	6821      	ldr	r1, [r4, #0]
 800f09e:	4630      	mov	r0, r6
 800f0a0:	1a6d      	subs	r5, r5, r1
 800f0a2:	4629      	mov	r1, r5
 800f0a4:	f7ff ffa6 	bl	800eff4 <sbrk_aligned>
 800f0a8:	3001      	adds	r0, #1
 800f0aa:	d03a      	beq.n	800f122 <_malloc_r+0xea>
 800f0ac:	6823      	ldr	r3, [r4, #0]
 800f0ae:	442b      	add	r3, r5
 800f0b0:	6023      	str	r3, [r4, #0]
 800f0b2:	f8d8 3000 	ldr.w	r3, [r8]
 800f0b6:	685a      	ldr	r2, [r3, #4]
 800f0b8:	bb62      	cbnz	r2, 800f114 <_malloc_r+0xdc>
 800f0ba:	f8c8 7000 	str.w	r7, [r8]
 800f0be:	e00f      	b.n	800f0e0 <_malloc_r+0xa8>
 800f0c0:	6822      	ldr	r2, [r4, #0]
 800f0c2:	1b52      	subs	r2, r2, r5
 800f0c4:	d420      	bmi.n	800f108 <_malloc_r+0xd0>
 800f0c6:	2a0b      	cmp	r2, #11
 800f0c8:	d917      	bls.n	800f0fa <_malloc_r+0xc2>
 800f0ca:	1961      	adds	r1, r4, r5
 800f0cc:	42a3      	cmp	r3, r4
 800f0ce:	6025      	str	r5, [r4, #0]
 800f0d0:	bf18      	it	ne
 800f0d2:	6059      	strne	r1, [r3, #4]
 800f0d4:	6863      	ldr	r3, [r4, #4]
 800f0d6:	bf08      	it	eq
 800f0d8:	f8c8 1000 	streq.w	r1, [r8]
 800f0dc:	5162      	str	r2, [r4, r5]
 800f0de:	604b      	str	r3, [r1, #4]
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	f000 f82f 	bl	800f144 <__malloc_unlock>
 800f0e6:	f104 000b 	add.w	r0, r4, #11
 800f0ea:	1d23      	adds	r3, r4, #4
 800f0ec:	f020 0007 	bic.w	r0, r0, #7
 800f0f0:	1ac2      	subs	r2, r0, r3
 800f0f2:	bf1c      	itt	ne
 800f0f4:	1a1b      	subne	r3, r3, r0
 800f0f6:	50a3      	strne	r3, [r4, r2]
 800f0f8:	e7af      	b.n	800f05a <_malloc_r+0x22>
 800f0fa:	6862      	ldr	r2, [r4, #4]
 800f0fc:	42a3      	cmp	r3, r4
 800f0fe:	bf0c      	ite	eq
 800f100:	f8c8 2000 	streq.w	r2, [r8]
 800f104:	605a      	strne	r2, [r3, #4]
 800f106:	e7eb      	b.n	800f0e0 <_malloc_r+0xa8>
 800f108:	4623      	mov	r3, r4
 800f10a:	6864      	ldr	r4, [r4, #4]
 800f10c:	e7ae      	b.n	800f06c <_malloc_r+0x34>
 800f10e:	463c      	mov	r4, r7
 800f110:	687f      	ldr	r7, [r7, #4]
 800f112:	e7b6      	b.n	800f082 <_malloc_r+0x4a>
 800f114:	461a      	mov	r2, r3
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	42a3      	cmp	r3, r4
 800f11a:	d1fb      	bne.n	800f114 <_malloc_r+0xdc>
 800f11c:	2300      	movs	r3, #0
 800f11e:	6053      	str	r3, [r2, #4]
 800f120:	e7de      	b.n	800f0e0 <_malloc_r+0xa8>
 800f122:	230c      	movs	r3, #12
 800f124:	4630      	mov	r0, r6
 800f126:	6033      	str	r3, [r6, #0]
 800f128:	f000 f80c 	bl	800f144 <__malloc_unlock>
 800f12c:	e794      	b.n	800f058 <_malloc_r+0x20>
 800f12e:	6005      	str	r5, [r0, #0]
 800f130:	e7d6      	b.n	800f0e0 <_malloc_r+0xa8>
 800f132:	bf00      	nop
 800f134:	20002a70 	.word	0x20002a70

0800f138 <__malloc_lock>:
 800f138:	4801      	ldr	r0, [pc, #4]	@ (800f140 <__malloc_lock+0x8>)
 800f13a:	f000 be2c 	b.w	800fd96 <__retarget_lock_acquire_recursive>
 800f13e:	bf00      	nop
 800f140:	20002bb4 	.word	0x20002bb4

0800f144 <__malloc_unlock>:
 800f144:	4801      	ldr	r0, [pc, #4]	@ (800f14c <__malloc_unlock+0x8>)
 800f146:	f000 be27 	b.w	800fd98 <__retarget_lock_release_recursive>
 800f14a:	bf00      	nop
 800f14c:	20002bb4 	.word	0x20002bb4

0800f150 <__cvt>:
 800f150:	2b00      	cmp	r3, #0
 800f152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f156:	461d      	mov	r5, r3
 800f158:	bfbb      	ittet	lt
 800f15a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800f15e:	461d      	movlt	r5, r3
 800f160:	2300      	movge	r3, #0
 800f162:	232d      	movlt	r3, #45	@ 0x2d
 800f164:	b088      	sub	sp, #32
 800f166:	4614      	mov	r4, r2
 800f168:	bfb8      	it	lt
 800f16a:	4614      	movlt	r4, r2
 800f16c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f16e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800f170:	7013      	strb	r3, [r2, #0]
 800f172:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f174:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800f178:	f023 0820 	bic.w	r8, r3, #32
 800f17c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f180:	d005      	beq.n	800f18e <__cvt+0x3e>
 800f182:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f186:	d100      	bne.n	800f18a <__cvt+0x3a>
 800f188:	3601      	adds	r6, #1
 800f18a:	2302      	movs	r3, #2
 800f18c:	e000      	b.n	800f190 <__cvt+0x40>
 800f18e:	2303      	movs	r3, #3
 800f190:	aa07      	add	r2, sp, #28
 800f192:	9204      	str	r2, [sp, #16]
 800f194:	aa06      	add	r2, sp, #24
 800f196:	e9cd a202 	strd	sl, r2, [sp, #8]
 800f19a:	e9cd 3600 	strd	r3, r6, [sp]
 800f19e:	4622      	mov	r2, r4
 800f1a0:	462b      	mov	r3, r5
 800f1a2:	f000 fe91 	bl	800fec8 <_dtoa_r>
 800f1a6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f1aa:	4607      	mov	r7, r0
 800f1ac:	d119      	bne.n	800f1e2 <__cvt+0x92>
 800f1ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f1b0:	07db      	lsls	r3, r3, #31
 800f1b2:	d50e      	bpl.n	800f1d2 <__cvt+0x82>
 800f1b4:	eb00 0906 	add.w	r9, r0, r6
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	4620      	mov	r0, r4
 800f1be:	4629      	mov	r1, r5
 800f1c0:	f7f1 fbf2 	bl	80009a8 <__aeabi_dcmpeq>
 800f1c4:	b108      	cbz	r0, 800f1ca <__cvt+0x7a>
 800f1c6:	f8cd 901c 	str.w	r9, [sp, #28]
 800f1ca:	2230      	movs	r2, #48	@ 0x30
 800f1cc:	9b07      	ldr	r3, [sp, #28]
 800f1ce:	454b      	cmp	r3, r9
 800f1d0:	d31e      	bcc.n	800f210 <__cvt+0xc0>
 800f1d2:	4638      	mov	r0, r7
 800f1d4:	9b07      	ldr	r3, [sp, #28]
 800f1d6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f1d8:	1bdb      	subs	r3, r3, r7
 800f1da:	6013      	str	r3, [r2, #0]
 800f1dc:	b008      	add	sp, #32
 800f1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1e2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f1e6:	eb00 0906 	add.w	r9, r0, r6
 800f1ea:	d1e5      	bne.n	800f1b8 <__cvt+0x68>
 800f1ec:	7803      	ldrb	r3, [r0, #0]
 800f1ee:	2b30      	cmp	r3, #48	@ 0x30
 800f1f0:	d10a      	bne.n	800f208 <__cvt+0xb8>
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	4629      	mov	r1, r5
 800f1fa:	f7f1 fbd5 	bl	80009a8 <__aeabi_dcmpeq>
 800f1fe:	b918      	cbnz	r0, 800f208 <__cvt+0xb8>
 800f200:	f1c6 0601 	rsb	r6, r6, #1
 800f204:	f8ca 6000 	str.w	r6, [sl]
 800f208:	f8da 3000 	ldr.w	r3, [sl]
 800f20c:	4499      	add	r9, r3
 800f20e:	e7d3      	b.n	800f1b8 <__cvt+0x68>
 800f210:	1c59      	adds	r1, r3, #1
 800f212:	9107      	str	r1, [sp, #28]
 800f214:	701a      	strb	r2, [r3, #0]
 800f216:	e7d9      	b.n	800f1cc <__cvt+0x7c>

0800f218 <__exponent>:
 800f218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f21a:	2900      	cmp	r1, #0
 800f21c:	bfb6      	itet	lt
 800f21e:	232d      	movlt	r3, #45	@ 0x2d
 800f220:	232b      	movge	r3, #43	@ 0x2b
 800f222:	4249      	neglt	r1, r1
 800f224:	2909      	cmp	r1, #9
 800f226:	7002      	strb	r2, [r0, #0]
 800f228:	7043      	strb	r3, [r0, #1]
 800f22a:	dd29      	ble.n	800f280 <__exponent+0x68>
 800f22c:	f10d 0307 	add.w	r3, sp, #7
 800f230:	461d      	mov	r5, r3
 800f232:	270a      	movs	r7, #10
 800f234:	fbb1 f6f7 	udiv	r6, r1, r7
 800f238:	461a      	mov	r2, r3
 800f23a:	fb07 1416 	mls	r4, r7, r6, r1
 800f23e:	3430      	adds	r4, #48	@ 0x30
 800f240:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f244:	460c      	mov	r4, r1
 800f246:	2c63      	cmp	r4, #99	@ 0x63
 800f248:	4631      	mov	r1, r6
 800f24a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f24e:	dcf1      	bgt.n	800f234 <__exponent+0x1c>
 800f250:	3130      	adds	r1, #48	@ 0x30
 800f252:	1e94      	subs	r4, r2, #2
 800f254:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f258:	4623      	mov	r3, r4
 800f25a:	1c41      	adds	r1, r0, #1
 800f25c:	42ab      	cmp	r3, r5
 800f25e:	d30a      	bcc.n	800f276 <__exponent+0x5e>
 800f260:	f10d 0309 	add.w	r3, sp, #9
 800f264:	1a9b      	subs	r3, r3, r2
 800f266:	42ac      	cmp	r4, r5
 800f268:	bf88      	it	hi
 800f26a:	2300      	movhi	r3, #0
 800f26c:	3302      	adds	r3, #2
 800f26e:	4403      	add	r3, r0
 800f270:	1a18      	subs	r0, r3, r0
 800f272:	b003      	add	sp, #12
 800f274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f276:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f27a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f27e:	e7ed      	b.n	800f25c <__exponent+0x44>
 800f280:	2330      	movs	r3, #48	@ 0x30
 800f282:	3130      	adds	r1, #48	@ 0x30
 800f284:	7083      	strb	r3, [r0, #2]
 800f286:	70c1      	strb	r1, [r0, #3]
 800f288:	1d03      	adds	r3, r0, #4
 800f28a:	e7f1      	b.n	800f270 <__exponent+0x58>

0800f28c <_printf_float>:
 800f28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f290:	b091      	sub	sp, #68	@ 0x44
 800f292:	460c      	mov	r4, r1
 800f294:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800f298:	4616      	mov	r6, r2
 800f29a:	461f      	mov	r7, r3
 800f29c:	4605      	mov	r5, r0
 800f29e:	f000 fcf5 	bl	800fc8c <_localeconv_r>
 800f2a2:	6803      	ldr	r3, [r0, #0]
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	9308      	str	r3, [sp, #32]
 800f2a8:	f7f0 ff52 	bl	8000150 <strlen>
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	930e      	str	r3, [sp, #56]	@ 0x38
 800f2b0:	f8d8 3000 	ldr.w	r3, [r8]
 800f2b4:	9009      	str	r0, [sp, #36]	@ 0x24
 800f2b6:	3307      	adds	r3, #7
 800f2b8:	f023 0307 	bic.w	r3, r3, #7
 800f2bc:	f103 0208 	add.w	r2, r3, #8
 800f2c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f2c4:	f8d4 b000 	ldr.w	fp, [r4]
 800f2c8:	f8c8 2000 	str.w	r2, [r8]
 800f2cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f2d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f2d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2d6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f2da:	f04f 32ff 	mov.w	r2, #4294967295
 800f2de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f2e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f2e6:	4b9c      	ldr	r3, [pc, #624]	@ (800f558 <_printf_float+0x2cc>)
 800f2e8:	f7f1 fb90 	bl	8000a0c <__aeabi_dcmpun>
 800f2ec:	bb70      	cbnz	r0, 800f34c <_printf_float+0xc0>
 800f2ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f2f2:	f04f 32ff 	mov.w	r2, #4294967295
 800f2f6:	4b98      	ldr	r3, [pc, #608]	@ (800f558 <_printf_float+0x2cc>)
 800f2f8:	f7f1 fb6a 	bl	80009d0 <__aeabi_dcmple>
 800f2fc:	bb30      	cbnz	r0, 800f34c <_printf_float+0xc0>
 800f2fe:	2200      	movs	r2, #0
 800f300:	2300      	movs	r3, #0
 800f302:	4640      	mov	r0, r8
 800f304:	4649      	mov	r1, r9
 800f306:	f7f1 fb59 	bl	80009bc <__aeabi_dcmplt>
 800f30a:	b110      	cbz	r0, 800f312 <_printf_float+0x86>
 800f30c:	232d      	movs	r3, #45	@ 0x2d
 800f30e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f312:	4a92      	ldr	r2, [pc, #584]	@ (800f55c <_printf_float+0x2d0>)
 800f314:	4b92      	ldr	r3, [pc, #584]	@ (800f560 <_printf_float+0x2d4>)
 800f316:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f31a:	bf94      	ite	ls
 800f31c:	4690      	movls	r8, r2
 800f31e:	4698      	movhi	r8, r3
 800f320:	2303      	movs	r3, #3
 800f322:	f04f 0900 	mov.w	r9, #0
 800f326:	6123      	str	r3, [r4, #16]
 800f328:	f02b 0304 	bic.w	r3, fp, #4
 800f32c:	6023      	str	r3, [r4, #0]
 800f32e:	4633      	mov	r3, r6
 800f330:	4621      	mov	r1, r4
 800f332:	4628      	mov	r0, r5
 800f334:	9700      	str	r7, [sp, #0]
 800f336:	aa0f      	add	r2, sp, #60	@ 0x3c
 800f338:	f000 f9d4 	bl	800f6e4 <_printf_common>
 800f33c:	3001      	adds	r0, #1
 800f33e:	f040 8090 	bne.w	800f462 <_printf_float+0x1d6>
 800f342:	f04f 30ff 	mov.w	r0, #4294967295
 800f346:	b011      	add	sp, #68	@ 0x44
 800f348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f34c:	4642      	mov	r2, r8
 800f34e:	464b      	mov	r3, r9
 800f350:	4640      	mov	r0, r8
 800f352:	4649      	mov	r1, r9
 800f354:	f7f1 fb5a 	bl	8000a0c <__aeabi_dcmpun>
 800f358:	b148      	cbz	r0, 800f36e <_printf_float+0xe2>
 800f35a:	464b      	mov	r3, r9
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	bfb8      	it	lt
 800f360:	232d      	movlt	r3, #45	@ 0x2d
 800f362:	4a80      	ldr	r2, [pc, #512]	@ (800f564 <_printf_float+0x2d8>)
 800f364:	bfb8      	it	lt
 800f366:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f36a:	4b7f      	ldr	r3, [pc, #508]	@ (800f568 <_printf_float+0x2dc>)
 800f36c:	e7d3      	b.n	800f316 <_printf_float+0x8a>
 800f36e:	6863      	ldr	r3, [r4, #4]
 800f370:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800f374:	1c5a      	adds	r2, r3, #1
 800f376:	d13f      	bne.n	800f3f8 <_printf_float+0x16c>
 800f378:	2306      	movs	r3, #6
 800f37a:	6063      	str	r3, [r4, #4]
 800f37c:	2200      	movs	r2, #0
 800f37e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800f382:	6023      	str	r3, [r4, #0]
 800f384:	9206      	str	r2, [sp, #24]
 800f386:	aa0e      	add	r2, sp, #56	@ 0x38
 800f388:	e9cd a204 	strd	sl, r2, [sp, #16]
 800f38c:	aa0d      	add	r2, sp, #52	@ 0x34
 800f38e:	9203      	str	r2, [sp, #12]
 800f390:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800f394:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f398:	6863      	ldr	r3, [r4, #4]
 800f39a:	4642      	mov	r2, r8
 800f39c:	9300      	str	r3, [sp, #0]
 800f39e:	4628      	mov	r0, r5
 800f3a0:	464b      	mov	r3, r9
 800f3a2:	910a      	str	r1, [sp, #40]	@ 0x28
 800f3a4:	f7ff fed4 	bl	800f150 <__cvt>
 800f3a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f3aa:	4680      	mov	r8, r0
 800f3ac:	2947      	cmp	r1, #71	@ 0x47
 800f3ae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f3b0:	d128      	bne.n	800f404 <_printf_float+0x178>
 800f3b2:	1cc8      	adds	r0, r1, #3
 800f3b4:	db02      	blt.n	800f3bc <_printf_float+0x130>
 800f3b6:	6863      	ldr	r3, [r4, #4]
 800f3b8:	4299      	cmp	r1, r3
 800f3ba:	dd40      	ble.n	800f43e <_printf_float+0x1b2>
 800f3bc:	f1aa 0a02 	sub.w	sl, sl, #2
 800f3c0:	fa5f fa8a 	uxtb.w	sl, sl
 800f3c4:	4652      	mov	r2, sl
 800f3c6:	3901      	subs	r1, #1
 800f3c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f3cc:	910d      	str	r1, [sp, #52]	@ 0x34
 800f3ce:	f7ff ff23 	bl	800f218 <__exponent>
 800f3d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f3d4:	4681      	mov	r9, r0
 800f3d6:	1813      	adds	r3, r2, r0
 800f3d8:	2a01      	cmp	r2, #1
 800f3da:	6123      	str	r3, [r4, #16]
 800f3dc:	dc02      	bgt.n	800f3e4 <_printf_float+0x158>
 800f3de:	6822      	ldr	r2, [r4, #0]
 800f3e0:	07d2      	lsls	r2, r2, #31
 800f3e2:	d501      	bpl.n	800f3e8 <_printf_float+0x15c>
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	6123      	str	r3, [r4, #16]
 800f3e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d09e      	beq.n	800f32e <_printf_float+0xa2>
 800f3f0:	232d      	movs	r3, #45	@ 0x2d
 800f3f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3f6:	e79a      	b.n	800f32e <_printf_float+0xa2>
 800f3f8:	2947      	cmp	r1, #71	@ 0x47
 800f3fa:	d1bf      	bne.n	800f37c <_printf_float+0xf0>
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d1bd      	bne.n	800f37c <_printf_float+0xf0>
 800f400:	2301      	movs	r3, #1
 800f402:	e7ba      	b.n	800f37a <_printf_float+0xee>
 800f404:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f408:	d9dc      	bls.n	800f3c4 <_printf_float+0x138>
 800f40a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f40e:	d118      	bne.n	800f442 <_printf_float+0x1b6>
 800f410:	2900      	cmp	r1, #0
 800f412:	6863      	ldr	r3, [r4, #4]
 800f414:	dd0b      	ble.n	800f42e <_printf_float+0x1a2>
 800f416:	6121      	str	r1, [r4, #16]
 800f418:	b913      	cbnz	r3, 800f420 <_printf_float+0x194>
 800f41a:	6822      	ldr	r2, [r4, #0]
 800f41c:	07d0      	lsls	r0, r2, #31
 800f41e:	d502      	bpl.n	800f426 <_printf_float+0x19a>
 800f420:	3301      	adds	r3, #1
 800f422:	440b      	add	r3, r1
 800f424:	6123      	str	r3, [r4, #16]
 800f426:	f04f 0900 	mov.w	r9, #0
 800f42a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f42c:	e7dc      	b.n	800f3e8 <_printf_float+0x15c>
 800f42e:	b913      	cbnz	r3, 800f436 <_printf_float+0x1aa>
 800f430:	6822      	ldr	r2, [r4, #0]
 800f432:	07d2      	lsls	r2, r2, #31
 800f434:	d501      	bpl.n	800f43a <_printf_float+0x1ae>
 800f436:	3302      	adds	r3, #2
 800f438:	e7f4      	b.n	800f424 <_printf_float+0x198>
 800f43a:	2301      	movs	r3, #1
 800f43c:	e7f2      	b.n	800f424 <_printf_float+0x198>
 800f43e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f444:	4299      	cmp	r1, r3
 800f446:	db05      	blt.n	800f454 <_printf_float+0x1c8>
 800f448:	6823      	ldr	r3, [r4, #0]
 800f44a:	6121      	str	r1, [r4, #16]
 800f44c:	07d8      	lsls	r0, r3, #31
 800f44e:	d5ea      	bpl.n	800f426 <_printf_float+0x19a>
 800f450:	1c4b      	adds	r3, r1, #1
 800f452:	e7e7      	b.n	800f424 <_printf_float+0x198>
 800f454:	2900      	cmp	r1, #0
 800f456:	bfcc      	ite	gt
 800f458:	2201      	movgt	r2, #1
 800f45a:	f1c1 0202 	rsble	r2, r1, #2
 800f45e:	4413      	add	r3, r2
 800f460:	e7e0      	b.n	800f424 <_printf_float+0x198>
 800f462:	6823      	ldr	r3, [r4, #0]
 800f464:	055a      	lsls	r2, r3, #21
 800f466:	d407      	bmi.n	800f478 <_printf_float+0x1ec>
 800f468:	6923      	ldr	r3, [r4, #16]
 800f46a:	4642      	mov	r2, r8
 800f46c:	4631      	mov	r1, r6
 800f46e:	4628      	mov	r0, r5
 800f470:	47b8      	blx	r7
 800f472:	3001      	adds	r0, #1
 800f474:	d12b      	bne.n	800f4ce <_printf_float+0x242>
 800f476:	e764      	b.n	800f342 <_printf_float+0xb6>
 800f478:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f47c:	f240 80dc 	bls.w	800f638 <_printf_float+0x3ac>
 800f480:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f484:	2200      	movs	r2, #0
 800f486:	2300      	movs	r3, #0
 800f488:	f7f1 fa8e 	bl	80009a8 <__aeabi_dcmpeq>
 800f48c:	2800      	cmp	r0, #0
 800f48e:	d033      	beq.n	800f4f8 <_printf_float+0x26c>
 800f490:	2301      	movs	r3, #1
 800f492:	4631      	mov	r1, r6
 800f494:	4628      	mov	r0, r5
 800f496:	4a35      	ldr	r2, [pc, #212]	@ (800f56c <_printf_float+0x2e0>)
 800f498:	47b8      	blx	r7
 800f49a:	3001      	adds	r0, #1
 800f49c:	f43f af51 	beq.w	800f342 <_printf_float+0xb6>
 800f4a0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800f4a4:	4543      	cmp	r3, r8
 800f4a6:	db02      	blt.n	800f4ae <_printf_float+0x222>
 800f4a8:	6823      	ldr	r3, [r4, #0]
 800f4aa:	07d8      	lsls	r0, r3, #31
 800f4ac:	d50f      	bpl.n	800f4ce <_printf_float+0x242>
 800f4ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f4b2:	4631      	mov	r1, r6
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	47b8      	blx	r7
 800f4b8:	3001      	adds	r0, #1
 800f4ba:	f43f af42 	beq.w	800f342 <_printf_float+0xb6>
 800f4be:	f04f 0900 	mov.w	r9, #0
 800f4c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800f4c6:	f104 0a1a 	add.w	sl, r4, #26
 800f4ca:	45c8      	cmp	r8, r9
 800f4cc:	dc09      	bgt.n	800f4e2 <_printf_float+0x256>
 800f4ce:	6823      	ldr	r3, [r4, #0]
 800f4d0:	079b      	lsls	r3, r3, #30
 800f4d2:	f100 8102 	bmi.w	800f6da <_printf_float+0x44e>
 800f4d6:	68e0      	ldr	r0, [r4, #12]
 800f4d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4da:	4298      	cmp	r0, r3
 800f4dc:	bfb8      	it	lt
 800f4de:	4618      	movlt	r0, r3
 800f4e0:	e731      	b.n	800f346 <_printf_float+0xba>
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	4652      	mov	r2, sl
 800f4e6:	4631      	mov	r1, r6
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	47b8      	blx	r7
 800f4ec:	3001      	adds	r0, #1
 800f4ee:	f43f af28 	beq.w	800f342 <_printf_float+0xb6>
 800f4f2:	f109 0901 	add.w	r9, r9, #1
 800f4f6:	e7e8      	b.n	800f4ca <_printf_float+0x23e>
 800f4f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	dc38      	bgt.n	800f570 <_printf_float+0x2e4>
 800f4fe:	2301      	movs	r3, #1
 800f500:	4631      	mov	r1, r6
 800f502:	4628      	mov	r0, r5
 800f504:	4a19      	ldr	r2, [pc, #100]	@ (800f56c <_printf_float+0x2e0>)
 800f506:	47b8      	blx	r7
 800f508:	3001      	adds	r0, #1
 800f50a:	f43f af1a 	beq.w	800f342 <_printf_float+0xb6>
 800f50e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800f512:	ea59 0303 	orrs.w	r3, r9, r3
 800f516:	d102      	bne.n	800f51e <_printf_float+0x292>
 800f518:	6823      	ldr	r3, [r4, #0]
 800f51a:	07d9      	lsls	r1, r3, #31
 800f51c:	d5d7      	bpl.n	800f4ce <_printf_float+0x242>
 800f51e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f522:	4631      	mov	r1, r6
 800f524:	4628      	mov	r0, r5
 800f526:	47b8      	blx	r7
 800f528:	3001      	adds	r0, #1
 800f52a:	f43f af0a 	beq.w	800f342 <_printf_float+0xb6>
 800f52e:	f04f 0a00 	mov.w	sl, #0
 800f532:	f104 0b1a 	add.w	fp, r4, #26
 800f536:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f538:	425b      	negs	r3, r3
 800f53a:	4553      	cmp	r3, sl
 800f53c:	dc01      	bgt.n	800f542 <_printf_float+0x2b6>
 800f53e:	464b      	mov	r3, r9
 800f540:	e793      	b.n	800f46a <_printf_float+0x1de>
 800f542:	2301      	movs	r3, #1
 800f544:	465a      	mov	r2, fp
 800f546:	4631      	mov	r1, r6
 800f548:	4628      	mov	r0, r5
 800f54a:	47b8      	blx	r7
 800f54c:	3001      	adds	r0, #1
 800f54e:	f43f aef8 	beq.w	800f342 <_printf_float+0xb6>
 800f552:	f10a 0a01 	add.w	sl, sl, #1
 800f556:	e7ee      	b.n	800f536 <_printf_float+0x2aa>
 800f558:	7fefffff 	.word	0x7fefffff
 800f55c:	08012cfa 	.word	0x08012cfa
 800f560:	08012cfe 	.word	0x08012cfe
 800f564:	08012d02 	.word	0x08012d02
 800f568:	08012d06 	.word	0x08012d06
 800f56c:	08012d0a 	.word	0x08012d0a
 800f570:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f572:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800f576:	4553      	cmp	r3, sl
 800f578:	bfa8      	it	ge
 800f57a:	4653      	movge	r3, sl
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	4699      	mov	r9, r3
 800f580:	dc36      	bgt.n	800f5f0 <_printf_float+0x364>
 800f582:	f04f 0b00 	mov.w	fp, #0
 800f586:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f58a:	f104 021a 	add.w	r2, r4, #26
 800f58e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f590:	930a      	str	r3, [sp, #40]	@ 0x28
 800f592:	eba3 0309 	sub.w	r3, r3, r9
 800f596:	455b      	cmp	r3, fp
 800f598:	dc31      	bgt.n	800f5fe <_printf_float+0x372>
 800f59a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f59c:	459a      	cmp	sl, r3
 800f59e:	dc3a      	bgt.n	800f616 <_printf_float+0x38a>
 800f5a0:	6823      	ldr	r3, [r4, #0]
 800f5a2:	07da      	lsls	r2, r3, #31
 800f5a4:	d437      	bmi.n	800f616 <_printf_float+0x38a>
 800f5a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f5a8:	ebaa 0903 	sub.w	r9, sl, r3
 800f5ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5ae:	ebaa 0303 	sub.w	r3, sl, r3
 800f5b2:	4599      	cmp	r9, r3
 800f5b4:	bfa8      	it	ge
 800f5b6:	4699      	movge	r9, r3
 800f5b8:	f1b9 0f00 	cmp.w	r9, #0
 800f5bc:	dc33      	bgt.n	800f626 <_printf_float+0x39a>
 800f5be:	f04f 0800 	mov.w	r8, #0
 800f5c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f5c6:	f104 0b1a 	add.w	fp, r4, #26
 800f5ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f5cc:	ebaa 0303 	sub.w	r3, sl, r3
 800f5d0:	eba3 0309 	sub.w	r3, r3, r9
 800f5d4:	4543      	cmp	r3, r8
 800f5d6:	f77f af7a 	ble.w	800f4ce <_printf_float+0x242>
 800f5da:	2301      	movs	r3, #1
 800f5dc:	465a      	mov	r2, fp
 800f5de:	4631      	mov	r1, r6
 800f5e0:	4628      	mov	r0, r5
 800f5e2:	47b8      	blx	r7
 800f5e4:	3001      	adds	r0, #1
 800f5e6:	f43f aeac 	beq.w	800f342 <_printf_float+0xb6>
 800f5ea:	f108 0801 	add.w	r8, r8, #1
 800f5ee:	e7ec      	b.n	800f5ca <_printf_float+0x33e>
 800f5f0:	4642      	mov	r2, r8
 800f5f2:	4631      	mov	r1, r6
 800f5f4:	4628      	mov	r0, r5
 800f5f6:	47b8      	blx	r7
 800f5f8:	3001      	adds	r0, #1
 800f5fa:	d1c2      	bne.n	800f582 <_printf_float+0x2f6>
 800f5fc:	e6a1      	b.n	800f342 <_printf_float+0xb6>
 800f5fe:	2301      	movs	r3, #1
 800f600:	4631      	mov	r1, r6
 800f602:	4628      	mov	r0, r5
 800f604:	920a      	str	r2, [sp, #40]	@ 0x28
 800f606:	47b8      	blx	r7
 800f608:	3001      	adds	r0, #1
 800f60a:	f43f ae9a 	beq.w	800f342 <_printf_float+0xb6>
 800f60e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f610:	f10b 0b01 	add.w	fp, fp, #1
 800f614:	e7bb      	b.n	800f58e <_printf_float+0x302>
 800f616:	4631      	mov	r1, r6
 800f618:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f61c:	4628      	mov	r0, r5
 800f61e:	47b8      	blx	r7
 800f620:	3001      	adds	r0, #1
 800f622:	d1c0      	bne.n	800f5a6 <_printf_float+0x31a>
 800f624:	e68d      	b.n	800f342 <_printf_float+0xb6>
 800f626:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f628:	464b      	mov	r3, r9
 800f62a:	4631      	mov	r1, r6
 800f62c:	4628      	mov	r0, r5
 800f62e:	4442      	add	r2, r8
 800f630:	47b8      	blx	r7
 800f632:	3001      	adds	r0, #1
 800f634:	d1c3      	bne.n	800f5be <_printf_float+0x332>
 800f636:	e684      	b.n	800f342 <_printf_float+0xb6>
 800f638:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800f63c:	f1ba 0f01 	cmp.w	sl, #1
 800f640:	dc01      	bgt.n	800f646 <_printf_float+0x3ba>
 800f642:	07db      	lsls	r3, r3, #31
 800f644:	d536      	bpl.n	800f6b4 <_printf_float+0x428>
 800f646:	2301      	movs	r3, #1
 800f648:	4642      	mov	r2, r8
 800f64a:	4631      	mov	r1, r6
 800f64c:	4628      	mov	r0, r5
 800f64e:	47b8      	blx	r7
 800f650:	3001      	adds	r0, #1
 800f652:	f43f ae76 	beq.w	800f342 <_printf_float+0xb6>
 800f656:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f65a:	4631      	mov	r1, r6
 800f65c:	4628      	mov	r0, r5
 800f65e:	47b8      	blx	r7
 800f660:	3001      	adds	r0, #1
 800f662:	f43f ae6e 	beq.w	800f342 <_printf_float+0xb6>
 800f666:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f66a:	2200      	movs	r2, #0
 800f66c:	2300      	movs	r3, #0
 800f66e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f672:	f7f1 f999 	bl	80009a8 <__aeabi_dcmpeq>
 800f676:	b9c0      	cbnz	r0, 800f6aa <_printf_float+0x41e>
 800f678:	4653      	mov	r3, sl
 800f67a:	f108 0201 	add.w	r2, r8, #1
 800f67e:	4631      	mov	r1, r6
 800f680:	4628      	mov	r0, r5
 800f682:	47b8      	blx	r7
 800f684:	3001      	adds	r0, #1
 800f686:	d10c      	bne.n	800f6a2 <_printf_float+0x416>
 800f688:	e65b      	b.n	800f342 <_printf_float+0xb6>
 800f68a:	2301      	movs	r3, #1
 800f68c:	465a      	mov	r2, fp
 800f68e:	4631      	mov	r1, r6
 800f690:	4628      	mov	r0, r5
 800f692:	47b8      	blx	r7
 800f694:	3001      	adds	r0, #1
 800f696:	f43f ae54 	beq.w	800f342 <_printf_float+0xb6>
 800f69a:	f108 0801 	add.w	r8, r8, #1
 800f69e:	45d0      	cmp	r8, sl
 800f6a0:	dbf3      	blt.n	800f68a <_printf_float+0x3fe>
 800f6a2:	464b      	mov	r3, r9
 800f6a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f6a8:	e6e0      	b.n	800f46c <_printf_float+0x1e0>
 800f6aa:	f04f 0800 	mov.w	r8, #0
 800f6ae:	f104 0b1a 	add.w	fp, r4, #26
 800f6b2:	e7f4      	b.n	800f69e <_printf_float+0x412>
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	4642      	mov	r2, r8
 800f6b8:	e7e1      	b.n	800f67e <_printf_float+0x3f2>
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	464a      	mov	r2, r9
 800f6be:	4631      	mov	r1, r6
 800f6c0:	4628      	mov	r0, r5
 800f6c2:	47b8      	blx	r7
 800f6c4:	3001      	adds	r0, #1
 800f6c6:	f43f ae3c 	beq.w	800f342 <_printf_float+0xb6>
 800f6ca:	f108 0801 	add.w	r8, r8, #1
 800f6ce:	68e3      	ldr	r3, [r4, #12]
 800f6d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f6d2:	1a5b      	subs	r3, r3, r1
 800f6d4:	4543      	cmp	r3, r8
 800f6d6:	dcf0      	bgt.n	800f6ba <_printf_float+0x42e>
 800f6d8:	e6fd      	b.n	800f4d6 <_printf_float+0x24a>
 800f6da:	f04f 0800 	mov.w	r8, #0
 800f6de:	f104 0919 	add.w	r9, r4, #25
 800f6e2:	e7f4      	b.n	800f6ce <_printf_float+0x442>

0800f6e4 <_printf_common>:
 800f6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6e8:	4616      	mov	r6, r2
 800f6ea:	4698      	mov	r8, r3
 800f6ec:	688a      	ldr	r2, [r1, #8]
 800f6ee:	690b      	ldr	r3, [r1, #16]
 800f6f0:	4607      	mov	r7, r0
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	bfb8      	it	lt
 800f6f6:	4613      	movlt	r3, r2
 800f6f8:	6033      	str	r3, [r6, #0]
 800f6fa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f6fe:	460c      	mov	r4, r1
 800f700:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f704:	b10a      	cbz	r2, 800f70a <_printf_common+0x26>
 800f706:	3301      	adds	r3, #1
 800f708:	6033      	str	r3, [r6, #0]
 800f70a:	6823      	ldr	r3, [r4, #0]
 800f70c:	0699      	lsls	r1, r3, #26
 800f70e:	bf42      	ittt	mi
 800f710:	6833      	ldrmi	r3, [r6, #0]
 800f712:	3302      	addmi	r3, #2
 800f714:	6033      	strmi	r3, [r6, #0]
 800f716:	6825      	ldr	r5, [r4, #0]
 800f718:	f015 0506 	ands.w	r5, r5, #6
 800f71c:	d106      	bne.n	800f72c <_printf_common+0x48>
 800f71e:	f104 0a19 	add.w	sl, r4, #25
 800f722:	68e3      	ldr	r3, [r4, #12]
 800f724:	6832      	ldr	r2, [r6, #0]
 800f726:	1a9b      	subs	r3, r3, r2
 800f728:	42ab      	cmp	r3, r5
 800f72a:	dc2b      	bgt.n	800f784 <_printf_common+0xa0>
 800f72c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f730:	6822      	ldr	r2, [r4, #0]
 800f732:	3b00      	subs	r3, #0
 800f734:	bf18      	it	ne
 800f736:	2301      	movne	r3, #1
 800f738:	0692      	lsls	r2, r2, #26
 800f73a:	d430      	bmi.n	800f79e <_printf_common+0xba>
 800f73c:	4641      	mov	r1, r8
 800f73e:	4638      	mov	r0, r7
 800f740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f744:	47c8      	blx	r9
 800f746:	3001      	adds	r0, #1
 800f748:	d023      	beq.n	800f792 <_printf_common+0xae>
 800f74a:	6823      	ldr	r3, [r4, #0]
 800f74c:	6922      	ldr	r2, [r4, #16]
 800f74e:	f003 0306 	and.w	r3, r3, #6
 800f752:	2b04      	cmp	r3, #4
 800f754:	bf14      	ite	ne
 800f756:	2500      	movne	r5, #0
 800f758:	6833      	ldreq	r3, [r6, #0]
 800f75a:	f04f 0600 	mov.w	r6, #0
 800f75e:	bf08      	it	eq
 800f760:	68e5      	ldreq	r5, [r4, #12]
 800f762:	f104 041a 	add.w	r4, r4, #26
 800f766:	bf08      	it	eq
 800f768:	1aed      	subeq	r5, r5, r3
 800f76a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f76e:	bf08      	it	eq
 800f770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f774:	4293      	cmp	r3, r2
 800f776:	bfc4      	itt	gt
 800f778:	1a9b      	subgt	r3, r3, r2
 800f77a:	18ed      	addgt	r5, r5, r3
 800f77c:	42b5      	cmp	r5, r6
 800f77e:	d11a      	bne.n	800f7b6 <_printf_common+0xd2>
 800f780:	2000      	movs	r0, #0
 800f782:	e008      	b.n	800f796 <_printf_common+0xb2>
 800f784:	2301      	movs	r3, #1
 800f786:	4652      	mov	r2, sl
 800f788:	4641      	mov	r1, r8
 800f78a:	4638      	mov	r0, r7
 800f78c:	47c8      	blx	r9
 800f78e:	3001      	adds	r0, #1
 800f790:	d103      	bne.n	800f79a <_printf_common+0xb6>
 800f792:	f04f 30ff 	mov.w	r0, #4294967295
 800f796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f79a:	3501      	adds	r5, #1
 800f79c:	e7c1      	b.n	800f722 <_printf_common+0x3e>
 800f79e:	2030      	movs	r0, #48	@ 0x30
 800f7a0:	18e1      	adds	r1, r4, r3
 800f7a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f7a6:	1c5a      	adds	r2, r3, #1
 800f7a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f7ac:	4422      	add	r2, r4
 800f7ae:	3302      	adds	r3, #2
 800f7b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f7b4:	e7c2      	b.n	800f73c <_printf_common+0x58>
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	4622      	mov	r2, r4
 800f7ba:	4641      	mov	r1, r8
 800f7bc:	4638      	mov	r0, r7
 800f7be:	47c8      	blx	r9
 800f7c0:	3001      	adds	r0, #1
 800f7c2:	d0e6      	beq.n	800f792 <_printf_common+0xae>
 800f7c4:	3601      	adds	r6, #1
 800f7c6:	e7d9      	b.n	800f77c <_printf_common+0x98>

0800f7c8 <_printf_i>:
 800f7c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7cc:	7e0f      	ldrb	r7, [r1, #24]
 800f7ce:	4691      	mov	r9, r2
 800f7d0:	2f78      	cmp	r7, #120	@ 0x78
 800f7d2:	4680      	mov	r8, r0
 800f7d4:	460c      	mov	r4, r1
 800f7d6:	469a      	mov	sl, r3
 800f7d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f7da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f7de:	d807      	bhi.n	800f7f0 <_printf_i+0x28>
 800f7e0:	2f62      	cmp	r7, #98	@ 0x62
 800f7e2:	d80a      	bhi.n	800f7fa <_printf_i+0x32>
 800f7e4:	2f00      	cmp	r7, #0
 800f7e6:	f000 80d3 	beq.w	800f990 <_printf_i+0x1c8>
 800f7ea:	2f58      	cmp	r7, #88	@ 0x58
 800f7ec:	f000 80ba 	beq.w	800f964 <_printf_i+0x19c>
 800f7f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f7f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f7f8:	e03a      	b.n	800f870 <_printf_i+0xa8>
 800f7fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f7fe:	2b15      	cmp	r3, #21
 800f800:	d8f6      	bhi.n	800f7f0 <_printf_i+0x28>
 800f802:	a101      	add	r1, pc, #4	@ (adr r1, 800f808 <_printf_i+0x40>)
 800f804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f808:	0800f861 	.word	0x0800f861
 800f80c:	0800f875 	.word	0x0800f875
 800f810:	0800f7f1 	.word	0x0800f7f1
 800f814:	0800f7f1 	.word	0x0800f7f1
 800f818:	0800f7f1 	.word	0x0800f7f1
 800f81c:	0800f7f1 	.word	0x0800f7f1
 800f820:	0800f875 	.word	0x0800f875
 800f824:	0800f7f1 	.word	0x0800f7f1
 800f828:	0800f7f1 	.word	0x0800f7f1
 800f82c:	0800f7f1 	.word	0x0800f7f1
 800f830:	0800f7f1 	.word	0x0800f7f1
 800f834:	0800f977 	.word	0x0800f977
 800f838:	0800f89f 	.word	0x0800f89f
 800f83c:	0800f931 	.word	0x0800f931
 800f840:	0800f7f1 	.word	0x0800f7f1
 800f844:	0800f7f1 	.word	0x0800f7f1
 800f848:	0800f999 	.word	0x0800f999
 800f84c:	0800f7f1 	.word	0x0800f7f1
 800f850:	0800f89f 	.word	0x0800f89f
 800f854:	0800f7f1 	.word	0x0800f7f1
 800f858:	0800f7f1 	.word	0x0800f7f1
 800f85c:	0800f939 	.word	0x0800f939
 800f860:	6833      	ldr	r3, [r6, #0]
 800f862:	1d1a      	adds	r2, r3, #4
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	6032      	str	r2, [r6, #0]
 800f868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f86c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f870:	2301      	movs	r3, #1
 800f872:	e09e      	b.n	800f9b2 <_printf_i+0x1ea>
 800f874:	6833      	ldr	r3, [r6, #0]
 800f876:	6820      	ldr	r0, [r4, #0]
 800f878:	1d19      	adds	r1, r3, #4
 800f87a:	6031      	str	r1, [r6, #0]
 800f87c:	0606      	lsls	r6, r0, #24
 800f87e:	d501      	bpl.n	800f884 <_printf_i+0xbc>
 800f880:	681d      	ldr	r5, [r3, #0]
 800f882:	e003      	b.n	800f88c <_printf_i+0xc4>
 800f884:	0645      	lsls	r5, r0, #25
 800f886:	d5fb      	bpl.n	800f880 <_printf_i+0xb8>
 800f888:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f88c:	2d00      	cmp	r5, #0
 800f88e:	da03      	bge.n	800f898 <_printf_i+0xd0>
 800f890:	232d      	movs	r3, #45	@ 0x2d
 800f892:	426d      	negs	r5, r5
 800f894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f898:	230a      	movs	r3, #10
 800f89a:	4859      	ldr	r0, [pc, #356]	@ (800fa00 <_printf_i+0x238>)
 800f89c:	e011      	b.n	800f8c2 <_printf_i+0xfa>
 800f89e:	6821      	ldr	r1, [r4, #0]
 800f8a0:	6833      	ldr	r3, [r6, #0]
 800f8a2:	0608      	lsls	r0, r1, #24
 800f8a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f8a8:	d402      	bmi.n	800f8b0 <_printf_i+0xe8>
 800f8aa:	0649      	lsls	r1, r1, #25
 800f8ac:	bf48      	it	mi
 800f8ae:	b2ad      	uxthmi	r5, r5
 800f8b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f8b2:	6033      	str	r3, [r6, #0]
 800f8b4:	bf14      	ite	ne
 800f8b6:	230a      	movne	r3, #10
 800f8b8:	2308      	moveq	r3, #8
 800f8ba:	4851      	ldr	r0, [pc, #324]	@ (800fa00 <_printf_i+0x238>)
 800f8bc:	2100      	movs	r1, #0
 800f8be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f8c2:	6866      	ldr	r6, [r4, #4]
 800f8c4:	2e00      	cmp	r6, #0
 800f8c6:	bfa8      	it	ge
 800f8c8:	6821      	ldrge	r1, [r4, #0]
 800f8ca:	60a6      	str	r6, [r4, #8]
 800f8cc:	bfa4      	itt	ge
 800f8ce:	f021 0104 	bicge.w	r1, r1, #4
 800f8d2:	6021      	strge	r1, [r4, #0]
 800f8d4:	b90d      	cbnz	r5, 800f8da <_printf_i+0x112>
 800f8d6:	2e00      	cmp	r6, #0
 800f8d8:	d04b      	beq.n	800f972 <_printf_i+0x1aa>
 800f8da:	4616      	mov	r6, r2
 800f8dc:	fbb5 f1f3 	udiv	r1, r5, r3
 800f8e0:	fb03 5711 	mls	r7, r3, r1, r5
 800f8e4:	5dc7      	ldrb	r7, [r0, r7]
 800f8e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f8ea:	462f      	mov	r7, r5
 800f8ec:	42bb      	cmp	r3, r7
 800f8ee:	460d      	mov	r5, r1
 800f8f0:	d9f4      	bls.n	800f8dc <_printf_i+0x114>
 800f8f2:	2b08      	cmp	r3, #8
 800f8f4:	d10b      	bne.n	800f90e <_printf_i+0x146>
 800f8f6:	6823      	ldr	r3, [r4, #0]
 800f8f8:	07df      	lsls	r7, r3, #31
 800f8fa:	d508      	bpl.n	800f90e <_printf_i+0x146>
 800f8fc:	6923      	ldr	r3, [r4, #16]
 800f8fe:	6861      	ldr	r1, [r4, #4]
 800f900:	4299      	cmp	r1, r3
 800f902:	bfde      	ittt	le
 800f904:	2330      	movle	r3, #48	@ 0x30
 800f906:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f90a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f90e:	1b92      	subs	r2, r2, r6
 800f910:	6122      	str	r2, [r4, #16]
 800f912:	464b      	mov	r3, r9
 800f914:	4621      	mov	r1, r4
 800f916:	4640      	mov	r0, r8
 800f918:	f8cd a000 	str.w	sl, [sp]
 800f91c:	aa03      	add	r2, sp, #12
 800f91e:	f7ff fee1 	bl	800f6e4 <_printf_common>
 800f922:	3001      	adds	r0, #1
 800f924:	d14a      	bne.n	800f9bc <_printf_i+0x1f4>
 800f926:	f04f 30ff 	mov.w	r0, #4294967295
 800f92a:	b004      	add	sp, #16
 800f92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f930:	6823      	ldr	r3, [r4, #0]
 800f932:	f043 0320 	orr.w	r3, r3, #32
 800f936:	6023      	str	r3, [r4, #0]
 800f938:	2778      	movs	r7, #120	@ 0x78
 800f93a:	4832      	ldr	r0, [pc, #200]	@ (800fa04 <_printf_i+0x23c>)
 800f93c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f940:	6823      	ldr	r3, [r4, #0]
 800f942:	6831      	ldr	r1, [r6, #0]
 800f944:	061f      	lsls	r7, r3, #24
 800f946:	f851 5b04 	ldr.w	r5, [r1], #4
 800f94a:	d402      	bmi.n	800f952 <_printf_i+0x18a>
 800f94c:	065f      	lsls	r7, r3, #25
 800f94e:	bf48      	it	mi
 800f950:	b2ad      	uxthmi	r5, r5
 800f952:	6031      	str	r1, [r6, #0]
 800f954:	07d9      	lsls	r1, r3, #31
 800f956:	bf44      	itt	mi
 800f958:	f043 0320 	orrmi.w	r3, r3, #32
 800f95c:	6023      	strmi	r3, [r4, #0]
 800f95e:	b11d      	cbz	r5, 800f968 <_printf_i+0x1a0>
 800f960:	2310      	movs	r3, #16
 800f962:	e7ab      	b.n	800f8bc <_printf_i+0xf4>
 800f964:	4826      	ldr	r0, [pc, #152]	@ (800fa00 <_printf_i+0x238>)
 800f966:	e7e9      	b.n	800f93c <_printf_i+0x174>
 800f968:	6823      	ldr	r3, [r4, #0]
 800f96a:	f023 0320 	bic.w	r3, r3, #32
 800f96e:	6023      	str	r3, [r4, #0]
 800f970:	e7f6      	b.n	800f960 <_printf_i+0x198>
 800f972:	4616      	mov	r6, r2
 800f974:	e7bd      	b.n	800f8f2 <_printf_i+0x12a>
 800f976:	6833      	ldr	r3, [r6, #0]
 800f978:	6825      	ldr	r5, [r4, #0]
 800f97a:	1d18      	adds	r0, r3, #4
 800f97c:	6961      	ldr	r1, [r4, #20]
 800f97e:	6030      	str	r0, [r6, #0]
 800f980:	062e      	lsls	r6, r5, #24
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	d501      	bpl.n	800f98a <_printf_i+0x1c2>
 800f986:	6019      	str	r1, [r3, #0]
 800f988:	e002      	b.n	800f990 <_printf_i+0x1c8>
 800f98a:	0668      	lsls	r0, r5, #25
 800f98c:	d5fb      	bpl.n	800f986 <_printf_i+0x1be>
 800f98e:	8019      	strh	r1, [r3, #0]
 800f990:	2300      	movs	r3, #0
 800f992:	4616      	mov	r6, r2
 800f994:	6123      	str	r3, [r4, #16]
 800f996:	e7bc      	b.n	800f912 <_printf_i+0x14a>
 800f998:	6833      	ldr	r3, [r6, #0]
 800f99a:	2100      	movs	r1, #0
 800f99c:	1d1a      	adds	r2, r3, #4
 800f99e:	6032      	str	r2, [r6, #0]
 800f9a0:	681e      	ldr	r6, [r3, #0]
 800f9a2:	6862      	ldr	r2, [r4, #4]
 800f9a4:	4630      	mov	r0, r6
 800f9a6:	f000 f9f8 	bl	800fd9a <memchr>
 800f9aa:	b108      	cbz	r0, 800f9b0 <_printf_i+0x1e8>
 800f9ac:	1b80      	subs	r0, r0, r6
 800f9ae:	6060      	str	r0, [r4, #4]
 800f9b0:	6863      	ldr	r3, [r4, #4]
 800f9b2:	6123      	str	r3, [r4, #16]
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f9ba:	e7aa      	b.n	800f912 <_printf_i+0x14a>
 800f9bc:	4632      	mov	r2, r6
 800f9be:	4649      	mov	r1, r9
 800f9c0:	4640      	mov	r0, r8
 800f9c2:	6923      	ldr	r3, [r4, #16]
 800f9c4:	47d0      	blx	sl
 800f9c6:	3001      	adds	r0, #1
 800f9c8:	d0ad      	beq.n	800f926 <_printf_i+0x15e>
 800f9ca:	6823      	ldr	r3, [r4, #0]
 800f9cc:	079b      	lsls	r3, r3, #30
 800f9ce:	d413      	bmi.n	800f9f8 <_printf_i+0x230>
 800f9d0:	68e0      	ldr	r0, [r4, #12]
 800f9d2:	9b03      	ldr	r3, [sp, #12]
 800f9d4:	4298      	cmp	r0, r3
 800f9d6:	bfb8      	it	lt
 800f9d8:	4618      	movlt	r0, r3
 800f9da:	e7a6      	b.n	800f92a <_printf_i+0x162>
 800f9dc:	2301      	movs	r3, #1
 800f9de:	4632      	mov	r2, r6
 800f9e0:	4649      	mov	r1, r9
 800f9e2:	4640      	mov	r0, r8
 800f9e4:	47d0      	blx	sl
 800f9e6:	3001      	adds	r0, #1
 800f9e8:	d09d      	beq.n	800f926 <_printf_i+0x15e>
 800f9ea:	3501      	adds	r5, #1
 800f9ec:	68e3      	ldr	r3, [r4, #12]
 800f9ee:	9903      	ldr	r1, [sp, #12]
 800f9f0:	1a5b      	subs	r3, r3, r1
 800f9f2:	42ab      	cmp	r3, r5
 800f9f4:	dcf2      	bgt.n	800f9dc <_printf_i+0x214>
 800f9f6:	e7eb      	b.n	800f9d0 <_printf_i+0x208>
 800f9f8:	2500      	movs	r5, #0
 800f9fa:	f104 0619 	add.w	r6, r4, #25
 800f9fe:	e7f5      	b.n	800f9ec <_printf_i+0x224>
 800fa00:	08012d0c 	.word	0x08012d0c
 800fa04:	08012d1d 	.word	0x08012d1d

0800fa08 <std>:
 800fa08:	2300      	movs	r3, #0
 800fa0a:	b510      	push	{r4, lr}
 800fa0c:	4604      	mov	r4, r0
 800fa0e:	e9c0 3300 	strd	r3, r3, [r0]
 800fa12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa16:	6083      	str	r3, [r0, #8]
 800fa18:	8181      	strh	r1, [r0, #12]
 800fa1a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fa1c:	81c2      	strh	r2, [r0, #14]
 800fa1e:	6183      	str	r3, [r0, #24]
 800fa20:	4619      	mov	r1, r3
 800fa22:	2208      	movs	r2, #8
 800fa24:	305c      	adds	r0, #92	@ 0x5c
 800fa26:	f000 f928 	bl	800fc7a <memset>
 800fa2a:	4b0d      	ldr	r3, [pc, #52]	@ (800fa60 <std+0x58>)
 800fa2c:	6224      	str	r4, [r4, #32]
 800fa2e:	6263      	str	r3, [r4, #36]	@ 0x24
 800fa30:	4b0c      	ldr	r3, [pc, #48]	@ (800fa64 <std+0x5c>)
 800fa32:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fa34:	4b0c      	ldr	r3, [pc, #48]	@ (800fa68 <std+0x60>)
 800fa36:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fa38:	4b0c      	ldr	r3, [pc, #48]	@ (800fa6c <std+0x64>)
 800fa3a:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa3c:	4b0c      	ldr	r3, [pc, #48]	@ (800fa70 <std+0x68>)
 800fa3e:	429c      	cmp	r4, r3
 800fa40:	d006      	beq.n	800fa50 <std+0x48>
 800fa42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fa46:	4294      	cmp	r4, r2
 800fa48:	d002      	beq.n	800fa50 <std+0x48>
 800fa4a:	33d0      	adds	r3, #208	@ 0xd0
 800fa4c:	429c      	cmp	r4, r3
 800fa4e:	d105      	bne.n	800fa5c <std+0x54>
 800fa50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fa54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa58:	f000 b99c 	b.w	800fd94 <__retarget_lock_init_recursive>
 800fa5c:	bd10      	pop	{r4, pc}
 800fa5e:	bf00      	nop
 800fa60:	0800fbf5 	.word	0x0800fbf5
 800fa64:	0800fc17 	.word	0x0800fc17
 800fa68:	0800fc4f 	.word	0x0800fc4f
 800fa6c:	0800fc73 	.word	0x0800fc73
 800fa70:	20002a74 	.word	0x20002a74

0800fa74 <stdio_exit_handler>:
 800fa74:	4a02      	ldr	r2, [pc, #8]	@ (800fa80 <stdio_exit_handler+0xc>)
 800fa76:	4903      	ldr	r1, [pc, #12]	@ (800fa84 <stdio_exit_handler+0x10>)
 800fa78:	4803      	ldr	r0, [pc, #12]	@ (800fa88 <stdio_exit_handler+0x14>)
 800fa7a:	f000 b869 	b.w	800fb50 <_fwalk_sglue>
 800fa7e:	bf00      	nop
 800fa80:	2000017c 	.word	0x2000017c
 800fa84:	08011599 	.word	0x08011599
 800fa88:	2000018c 	.word	0x2000018c

0800fa8c <cleanup_stdio>:
 800fa8c:	6841      	ldr	r1, [r0, #4]
 800fa8e:	4b0c      	ldr	r3, [pc, #48]	@ (800fac0 <cleanup_stdio+0x34>)
 800fa90:	b510      	push	{r4, lr}
 800fa92:	4299      	cmp	r1, r3
 800fa94:	4604      	mov	r4, r0
 800fa96:	d001      	beq.n	800fa9c <cleanup_stdio+0x10>
 800fa98:	f001 fd7e 	bl	8011598 <_fflush_r>
 800fa9c:	68a1      	ldr	r1, [r4, #8]
 800fa9e:	4b09      	ldr	r3, [pc, #36]	@ (800fac4 <cleanup_stdio+0x38>)
 800faa0:	4299      	cmp	r1, r3
 800faa2:	d002      	beq.n	800faaa <cleanup_stdio+0x1e>
 800faa4:	4620      	mov	r0, r4
 800faa6:	f001 fd77 	bl	8011598 <_fflush_r>
 800faaa:	68e1      	ldr	r1, [r4, #12]
 800faac:	4b06      	ldr	r3, [pc, #24]	@ (800fac8 <cleanup_stdio+0x3c>)
 800faae:	4299      	cmp	r1, r3
 800fab0:	d004      	beq.n	800fabc <cleanup_stdio+0x30>
 800fab2:	4620      	mov	r0, r4
 800fab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fab8:	f001 bd6e 	b.w	8011598 <_fflush_r>
 800fabc:	bd10      	pop	{r4, pc}
 800fabe:	bf00      	nop
 800fac0:	20002a74 	.word	0x20002a74
 800fac4:	20002adc 	.word	0x20002adc
 800fac8:	20002b44 	.word	0x20002b44

0800facc <global_stdio_init.part.0>:
 800facc:	b510      	push	{r4, lr}
 800face:	4b0b      	ldr	r3, [pc, #44]	@ (800fafc <global_stdio_init.part.0+0x30>)
 800fad0:	4c0b      	ldr	r4, [pc, #44]	@ (800fb00 <global_stdio_init.part.0+0x34>)
 800fad2:	4a0c      	ldr	r2, [pc, #48]	@ (800fb04 <global_stdio_init.part.0+0x38>)
 800fad4:	4620      	mov	r0, r4
 800fad6:	601a      	str	r2, [r3, #0]
 800fad8:	2104      	movs	r1, #4
 800fada:	2200      	movs	r2, #0
 800fadc:	f7ff ff94 	bl	800fa08 <std>
 800fae0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fae4:	2201      	movs	r2, #1
 800fae6:	2109      	movs	r1, #9
 800fae8:	f7ff ff8e 	bl	800fa08 <std>
 800faec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800faf0:	2202      	movs	r2, #2
 800faf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800faf6:	2112      	movs	r1, #18
 800faf8:	f7ff bf86 	b.w	800fa08 <std>
 800fafc:	20002bac 	.word	0x20002bac
 800fb00:	20002a74 	.word	0x20002a74
 800fb04:	0800fa75 	.word	0x0800fa75

0800fb08 <__sfp_lock_acquire>:
 800fb08:	4801      	ldr	r0, [pc, #4]	@ (800fb10 <__sfp_lock_acquire+0x8>)
 800fb0a:	f000 b944 	b.w	800fd96 <__retarget_lock_acquire_recursive>
 800fb0e:	bf00      	nop
 800fb10:	20002bb5 	.word	0x20002bb5

0800fb14 <__sfp_lock_release>:
 800fb14:	4801      	ldr	r0, [pc, #4]	@ (800fb1c <__sfp_lock_release+0x8>)
 800fb16:	f000 b93f 	b.w	800fd98 <__retarget_lock_release_recursive>
 800fb1a:	bf00      	nop
 800fb1c:	20002bb5 	.word	0x20002bb5

0800fb20 <__sinit>:
 800fb20:	b510      	push	{r4, lr}
 800fb22:	4604      	mov	r4, r0
 800fb24:	f7ff fff0 	bl	800fb08 <__sfp_lock_acquire>
 800fb28:	6a23      	ldr	r3, [r4, #32]
 800fb2a:	b11b      	cbz	r3, 800fb34 <__sinit+0x14>
 800fb2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb30:	f7ff bff0 	b.w	800fb14 <__sfp_lock_release>
 800fb34:	4b04      	ldr	r3, [pc, #16]	@ (800fb48 <__sinit+0x28>)
 800fb36:	6223      	str	r3, [r4, #32]
 800fb38:	4b04      	ldr	r3, [pc, #16]	@ (800fb4c <__sinit+0x2c>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d1f5      	bne.n	800fb2c <__sinit+0xc>
 800fb40:	f7ff ffc4 	bl	800facc <global_stdio_init.part.0>
 800fb44:	e7f2      	b.n	800fb2c <__sinit+0xc>
 800fb46:	bf00      	nop
 800fb48:	0800fa8d 	.word	0x0800fa8d
 800fb4c:	20002bac 	.word	0x20002bac

0800fb50 <_fwalk_sglue>:
 800fb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb54:	4607      	mov	r7, r0
 800fb56:	4688      	mov	r8, r1
 800fb58:	4614      	mov	r4, r2
 800fb5a:	2600      	movs	r6, #0
 800fb5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb60:	f1b9 0901 	subs.w	r9, r9, #1
 800fb64:	d505      	bpl.n	800fb72 <_fwalk_sglue+0x22>
 800fb66:	6824      	ldr	r4, [r4, #0]
 800fb68:	2c00      	cmp	r4, #0
 800fb6a:	d1f7      	bne.n	800fb5c <_fwalk_sglue+0xc>
 800fb6c:	4630      	mov	r0, r6
 800fb6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb72:	89ab      	ldrh	r3, [r5, #12]
 800fb74:	2b01      	cmp	r3, #1
 800fb76:	d907      	bls.n	800fb88 <_fwalk_sglue+0x38>
 800fb78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	d003      	beq.n	800fb88 <_fwalk_sglue+0x38>
 800fb80:	4629      	mov	r1, r5
 800fb82:	4638      	mov	r0, r7
 800fb84:	47c0      	blx	r8
 800fb86:	4306      	orrs	r6, r0
 800fb88:	3568      	adds	r5, #104	@ 0x68
 800fb8a:	e7e9      	b.n	800fb60 <_fwalk_sglue+0x10>

0800fb8c <sniprintf>:
 800fb8c:	b40c      	push	{r2, r3}
 800fb8e:	b530      	push	{r4, r5, lr}
 800fb90:	4b17      	ldr	r3, [pc, #92]	@ (800fbf0 <sniprintf+0x64>)
 800fb92:	1e0c      	subs	r4, r1, #0
 800fb94:	681d      	ldr	r5, [r3, #0]
 800fb96:	b09d      	sub	sp, #116	@ 0x74
 800fb98:	da08      	bge.n	800fbac <sniprintf+0x20>
 800fb9a:	238b      	movs	r3, #139	@ 0x8b
 800fb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800fba0:	602b      	str	r3, [r5, #0]
 800fba2:	b01d      	add	sp, #116	@ 0x74
 800fba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fba8:	b002      	add	sp, #8
 800fbaa:	4770      	bx	lr
 800fbac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fbb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fbb4:	bf0c      	ite	eq
 800fbb6:	4623      	moveq	r3, r4
 800fbb8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fbbc:	9304      	str	r3, [sp, #16]
 800fbbe:	9307      	str	r3, [sp, #28]
 800fbc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fbc4:	9002      	str	r0, [sp, #8]
 800fbc6:	9006      	str	r0, [sp, #24]
 800fbc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fbcc:	4628      	mov	r0, r5
 800fbce:	ab21      	add	r3, sp, #132	@ 0x84
 800fbd0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fbd2:	a902      	add	r1, sp, #8
 800fbd4:	9301      	str	r3, [sp, #4]
 800fbd6:	f001 fb63 	bl	80112a0 <_svfiprintf_r>
 800fbda:	1c43      	adds	r3, r0, #1
 800fbdc:	bfbc      	itt	lt
 800fbde:	238b      	movlt	r3, #139	@ 0x8b
 800fbe0:	602b      	strlt	r3, [r5, #0]
 800fbe2:	2c00      	cmp	r4, #0
 800fbe4:	d0dd      	beq.n	800fba2 <sniprintf+0x16>
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	9b02      	ldr	r3, [sp, #8]
 800fbea:	701a      	strb	r2, [r3, #0]
 800fbec:	e7d9      	b.n	800fba2 <sniprintf+0x16>
 800fbee:	bf00      	nop
 800fbf0:	20000188 	.word	0x20000188

0800fbf4 <__sread>:
 800fbf4:	b510      	push	{r4, lr}
 800fbf6:	460c      	mov	r4, r1
 800fbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbfc:	f000 f86c 	bl	800fcd8 <_read_r>
 800fc00:	2800      	cmp	r0, #0
 800fc02:	bfab      	itete	ge
 800fc04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fc06:	89a3      	ldrhlt	r3, [r4, #12]
 800fc08:	181b      	addge	r3, r3, r0
 800fc0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fc0e:	bfac      	ite	ge
 800fc10:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fc12:	81a3      	strhlt	r3, [r4, #12]
 800fc14:	bd10      	pop	{r4, pc}

0800fc16 <__swrite>:
 800fc16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc1a:	461f      	mov	r7, r3
 800fc1c:	898b      	ldrh	r3, [r1, #12]
 800fc1e:	4605      	mov	r5, r0
 800fc20:	05db      	lsls	r3, r3, #23
 800fc22:	460c      	mov	r4, r1
 800fc24:	4616      	mov	r6, r2
 800fc26:	d505      	bpl.n	800fc34 <__swrite+0x1e>
 800fc28:	2302      	movs	r3, #2
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc30:	f000 f840 	bl	800fcb4 <_lseek_r>
 800fc34:	89a3      	ldrh	r3, [r4, #12]
 800fc36:	4632      	mov	r2, r6
 800fc38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fc3c:	81a3      	strh	r3, [r4, #12]
 800fc3e:	4628      	mov	r0, r5
 800fc40:	463b      	mov	r3, r7
 800fc42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc4a:	f000 b867 	b.w	800fd1c <_write_r>

0800fc4e <__sseek>:
 800fc4e:	b510      	push	{r4, lr}
 800fc50:	460c      	mov	r4, r1
 800fc52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc56:	f000 f82d 	bl	800fcb4 <_lseek_r>
 800fc5a:	1c43      	adds	r3, r0, #1
 800fc5c:	89a3      	ldrh	r3, [r4, #12]
 800fc5e:	bf15      	itete	ne
 800fc60:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fc62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fc66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fc6a:	81a3      	strheq	r3, [r4, #12]
 800fc6c:	bf18      	it	ne
 800fc6e:	81a3      	strhne	r3, [r4, #12]
 800fc70:	bd10      	pop	{r4, pc}

0800fc72 <__sclose>:
 800fc72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc76:	f000 b80d 	b.w	800fc94 <_close_r>

0800fc7a <memset>:
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	4402      	add	r2, r0
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d100      	bne.n	800fc84 <memset+0xa>
 800fc82:	4770      	bx	lr
 800fc84:	f803 1b01 	strb.w	r1, [r3], #1
 800fc88:	e7f9      	b.n	800fc7e <memset+0x4>
	...

0800fc8c <_localeconv_r>:
 800fc8c:	4800      	ldr	r0, [pc, #0]	@ (800fc90 <_localeconv_r+0x4>)
 800fc8e:	4770      	bx	lr
 800fc90:	200002c8 	.word	0x200002c8

0800fc94 <_close_r>:
 800fc94:	b538      	push	{r3, r4, r5, lr}
 800fc96:	2300      	movs	r3, #0
 800fc98:	4d05      	ldr	r5, [pc, #20]	@ (800fcb0 <_close_r+0x1c>)
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	4608      	mov	r0, r1
 800fc9e:	602b      	str	r3, [r5, #0]
 800fca0:	f7f3 ffdb 	bl	8003c5a <_close>
 800fca4:	1c43      	adds	r3, r0, #1
 800fca6:	d102      	bne.n	800fcae <_close_r+0x1a>
 800fca8:	682b      	ldr	r3, [r5, #0]
 800fcaa:	b103      	cbz	r3, 800fcae <_close_r+0x1a>
 800fcac:	6023      	str	r3, [r4, #0]
 800fcae:	bd38      	pop	{r3, r4, r5, pc}
 800fcb0:	20002bb0 	.word	0x20002bb0

0800fcb4 <_lseek_r>:
 800fcb4:	b538      	push	{r3, r4, r5, lr}
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	4608      	mov	r0, r1
 800fcba:	4611      	mov	r1, r2
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	4d05      	ldr	r5, [pc, #20]	@ (800fcd4 <_lseek_r+0x20>)
 800fcc0:	602a      	str	r2, [r5, #0]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	f7f3 ffed 	bl	8003ca2 <_lseek>
 800fcc8:	1c43      	adds	r3, r0, #1
 800fcca:	d102      	bne.n	800fcd2 <_lseek_r+0x1e>
 800fccc:	682b      	ldr	r3, [r5, #0]
 800fcce:	b103      	cbz	r3, 800fcd2 <_lseek_r+0x1e>
 800fcd0:	6023      	str	r3, [r4, #0]
 800fcd2:	bd38      	pop	{r3, r4, r5, pc}
 800fcd4:	20002bb0 	.word	0x20002bb0

0800fcd8 <_read_r>:
 800fcd8:	b538      	push	{r3, r4, r5, lr}
 800fcda:	4604      	mov	r4, r0
 800fcdc:	4608      	mov	r0, r1
 800fcde:	4611      	mov	r1, r2
 800fce0:	2200      	movs	r2, #0
 800fce2:	4d05      	ldr	r5, [pc, #20]	@ (800fcf8 <_read_r+0x20>)
 800fce4:	602a      	str	r2, [r5, #0]
 800fce6:	461a      	mov	r2, r3
 800fce8:	f7f3 ff7e 	bl	8003be8 <_read>
 800fcec:	1c43      	adds	r3, r0, #1
 800fcee:	d102      	bne.n	800fcf6 <_read_r+0x1e>
 800fcf0:	682b      	ldr	r3, [r5, #0]
 800fcf2:	b103      	cbz	r3, 800fcf6 <_read_r+0x1e>
 800fcf4:	6023      	str	r3, [r4, #0]
 800fcf6:	bd38      	pop	{r3, r4, r5, pc}
 800fcf8:	20002bb0 	.word	0x20002bb0

0800fcfc <_sbrk_r>:
 800fcfc:	b538      	push	{r3, r4, r5, lr}
 800fcfe:	2300      	movs	r3, #0
 800fd00:	4d05      	ldr	r5, [pc, #20]	@ (800fd18 <_sbrk_r+0x1c>)
 800fd02:	4604      	mov	r4, r0
 800fd04:	4608      	mov	r0, r1
 800fd06:	602b      	str	r3, [r5, #0]
 800fd08:	f7f3 ffd8 	bl	8003cbc <_sbrk>
 800fd0c:	1c43      	adds	r3, r0, #1
 800fd0e:	d102      	bne.n	800fd16 <_sbrk_r+0x1a>
 800fd10:	682b      	ldr	r3, [r5, #0]
 800fd12:	b103      	cbz	r3, 800fd16 <_sbrk_r+0x1a>
 800fd14:	6023      	str	r3, [r4, #0]
 800fd16:	bd38      	pop	{r3, r4, r5, pc}
 800fd18:	20002bb0 	.word	0x20002bb0

0800fd1c <_write_r>:
 800fd1c:	b538      	push	{r3, r4, r5, lr}
 800fd1e:	4604      	mov	r4, r0
 800fd20:	4608      	mov	r0, r1
 800fd22:	4611      	mov	r1, r2
 800fd24:	2200      	movs	r2, #0
 800fd26:	4d05      	ldr	r5, [pc, #20]	@ (800fd3c <_write_r+0x20>)
 800fd28:	602a      	str	r2, [r5, #0]
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	f7f3 ff79 	bl	8003c22 <_write>
 800fd30:	1c43      	adds	r3, r0, #1
 800fd32:	d102      	bne.n	800fd3a <_write_r+0x1e>
 800fd34:	682b      	ldr	r3, [r5, #0]
 800fd36:	b103      	cbz	r3, 800fd3a <_write_r+0x1e>
 800fd38:	6023      	str	r3, [r4, #0]
 800fd3a:	bd38      	pop	{r3, r4, r5, pc}
 800fd3c:	20002bb0 	.word	0x20002bb0

0800fd40 <__errno>:
 800fd40:	4b01      	ldr	r3, [pc, #4]	@ (800fd48 <__errno+0x8>)
 800fd42:	6818      	ldr	r0, [r3, #0]
 800fd44:	4770      	bx	lr
 800fd46:	bf00      	nop
 800fd48:	20000188 	.word	0x20000188

0800fd4c <__libc_init_array>:
 800fd4c:	b570      	push	{r4, r5, r6, lr}
 800fd4e:	2600      	movs	r6, #0
 800fd50:	4d0c      	ldr	r5, [pc, #48]	@ (800fd84 <__libc_init_array+0x38>)
 800fd52:	4c0d      	ldr	r4, [pc, #52]	@ (800fd88 <__libc_init_array+0x3c>)
 800fd54:	1b64      	subs	r4, r4, r5
 800fd56:	10a4      	asrs	r4, r4, #2
 800fd58:	42a6      	cmp	r6, r4
 800fd5a:	d109      	bne.n	800fd70 <__libc_init_array+0x24>
 800fd5c:	f002 feb8 	bl	8012ad0 <_init>
 800fd60:	2600      	movs	r6, #0
 800fd62:	4d0a      	ldr	r5, [pc, #40]	@ (800fd8c <__libc_init_array+0x40>)
 800fd64:	4c0a      	ldr	r4, [pc, #40]	@ (800fd90 <__libc_init_array+0x44>)
 800fd66:	1b64      	subs	r4, r4, r5
 800fd68:	10a4      	asrs	r4, r4, #2
 800fd6a:	42a6      	cmp	r6, r4
 800fd6c:	d105      	bne.n	800fd7a <__libc_init_array+0x2e>
 800fd6e:	bd70      	pop	{r4, r5, r6, pc}
 800fd70:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd74:	4798      	blx	r3
 800fd76:	3601      	adds	r6, #1
 800fd78:	e7ee      	b.n	800fd58 <__libc_init_array+0xc>
 800fd7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd7e:	4798      	blx	r3
 800fd80:	3601      	adds	r6, #1
 800fd82:	e7f2      	b.n	800fd6a <__libc_init_array+0x1e>
 800fd84:	080130a0 	.word	0x080130a0
 800fd88:	080130a0 	.word	0x080130a0
 800fd8c:	080130a0 	.word	0x080130a0
 800fd90:	080130a4 	.word	0x080130a4

0800fd94 <__retarget_lock_init_recursive>:
 800fd94:	4770      	bx	lr

0800fd96 <__retarget_lock_acquire_recursive>:
 800fd96:	4770      	bx	lr

0800fd98 <__retarget_lock_release_recursive>:
 800fd98:	4770      	bx	lr

0800fd9a <memchr>:
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	b510      	push	{r4, lr}
 800fd9e:	b2c9      	uxtb	r1, r1
 800fda0:	4402      	add	r2, r0
 800fda2:	4293      	cmp	r3, r2
 800fda4:	4618      	mov	r0, r3
 800fda6:	d101      	bne.n	800fdac <memchr+0x12>
 800fda8:	2000      	movs	r0, #0
 800fdaa:	e003      	b.n	800fdb4 <memchr+0x1a>
 800fdac:	7804      	ldrb	r4, [r0, #0]
 800fdae:	3301      	adds	r3, #1
 800fdb0:	428c      	cmp	r4, r1
 800fdb2:	d1f6      	bne.n	800fda2 <memchr+0x8>
 800fdb4:	bd10      	pop	{r4, pc}

0800fdb6 <quorem>:
 800fdb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdba:	6903      	ldr	r3, [r0, #16]
 800fdbc:	690c      	ldr	r4, [r1, #16]
 800fdbe:	4607      	mov	r7, r0
 800fdc0:	42a3      	cmp	r3, r4
 800fdc2:	db7e      	blt.n	800fec2 <quorem+0x10c>
 800fdc4:	3c01      	subs	r4, #1
 800fdc6:	00a3      	lsls	r3, r4, #2
 800fdc8:	f100 0514 	add.w	r5, r0, #20
 800fdcc:	f101 0814 	add.w	r8, r1, #20
 800fdd0:	9300      	str	r3, [sp, #0]
 800fdd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdd6:	9301      	str	r3, [sp, #4]
 800fdd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fddc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fde0:	3301      	adds	r3, #1
 800fde2:	429a      	cmp	r2, r3
 800fde4:	fbb2 f6f3 	udiv	r6, r2, r3
 800fde8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fdec:	d32e      	bcc.n	800fe4c <quorem+0x96>
 800fdee:	f04f 0a00 	mov.w	sl, #0
 800fdf2:	46c4      	mov	ip, r8
 800fdf4:	46ae      	mov	lr, r5
 800fdf6:	46d3      	mov	fp, sl
 800fdf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fdfc:	b298      	uxth	r0, r3
 800fdfe:	fb06 a000 	mla	r0, r6, r0, sl
 800fe02:	0c1b      	lsrs	r3, r3, #16
 800fe04:	0c02      	lsrs	r2, r0, #16
 800fe06:	fb06 2303 	mla	r3, r6, r3, r2
 800fe0a:	f8de 2000 	ldr.w	r2, [lr]
 800fe0e:	b280      	uxth	r0, r0
 800fe10:	b292      	uxth	r2, r2
 800fe12:	1a12      	subs	r2, r2, r0
 800fe14:	445a      	add	r2, fp
 800fe16:	f8de 0000 	ldr.w	r0, [lr]
 800fe1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fe24:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fe28:	b292      	uxth	r2, r2
 800fe2a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fe2e:	45e1      	cmp	r9, ip
 800fe30:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fe34:	f84e 2b04 	str.w	r2, [lr], #4
 800fe38:	d2de      	bcs.n	800fdf8 <quorem+0x42>
 800fe3a:	9b00      	ldr	r3, [sp, #0]
 800fe3c:	58eb      	ldr	r3, [r5, r3]
 800fe3e:	b92b      	cbnz	r3, 800fe4c <quorem+0x96>
 800fe40:	9b01      	ldr	r3, [sp, #4]
 800fe42:	3b04      	subs	r3, #4
 800fe44:	429d      	cmp	r5, r3
 800fe46:	461a      	mov	r2, r3
 800fe48:	d32f      	bcc.n	800feaa <quorem+0xf4>
 800fe4a:	613c      	str	r4, [r7, #16]
 800fe4c:	4638      	mov	r0, r7
 800fe4e:	f001 f8c3 	bl	8010fd8 <__mcmp>
 800fe52:	2800      	cmp	r0, #0
 800fe54:	db25      	blt.n	800fea2 <quorem+0xec>
 800fe56:	4629      	mov	r1, r5
 800fe58:	2000      	movs	r0, #0
 800fe5a:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe5e:	f8d1 c000 	ldr.w	ip, [r1]
 800fe62:	fa1f fe82 	uxth.w	lr, r2
 800fe66:	fa1f f38c 	uxth.w	r3, ip
 800fe6a:	eba3 030e 	sub.w	r3, r3, lr
 800fe6e:	4403      	add	r3, r0
 800fe70:	0c12      	lsrs	r2, r2, #16
 800fe72:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fe76:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fe7a:	b29b      	uxth	r3, r3
 800fe7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe80:	45c1      	cmp	r9, r8
 800fe82:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fe86:	f841 3b04 	str.w	r3, [r1], #4
 800fe8a:	d2e6      	bcs.n	800fe5a <quorem+0xa4>
 800fe8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe94:	b922      	cbnz	r2, 800fea0 <quorem+0xea>
 800fe96:	3b04      	subs	r3, #4
 800fe98:	429d      	cmp	r5, r3
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	d30b      	bcc.n	800feb6 <quorem+0x100>
 800fe9e:	613c      	str	r4, [r7, #16]
 800fea0:	3601      	adds	r6, #1
 800fea2:	4630      	mov	r0, r6
 800fea4:	b003      	add	sp, #12
 800fea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feaa:	6812      	ldr	r2, [r2, #0]
 800feac:	3b04      	subs	r3, #4
 800feae:	2a00      	cmp	r2, #0
 800feb0:	d1cb      	bne.n	800fe4a <quorem+0x94>
 800feb2:	3c01      	subs	r4, #1
 800feb4:	e7c6      	b.n	800fe44 <quorem+0x8e>
 800feb6:	6812      	ldr	r2, [r2, #0]
 800feb8:	3b04      	subs	r3, #4
 800feba:	2a00      	cmp	r2, #0
 800febc:	d1ef      	bne.n	800fe9e <quorem+0xe8>
 800febe:	3c01      	subs	r4, #1
 800fec0:	e7ea      	b.n	800fe98 <quorem+0xe2>
 800fec2:	2000      	movs	r0, #0
 800fec4:	e7ee      	b.n	800fea4 <quorem+0xee>
	...

0800fec8 <_dtoa_r>:
 800fec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fecc:	4614      	mov	r4, r2
 800fece:	461d      	mov	r5, r3
 800fed0:	69c7      	ldr	r7, [r0, #28]
 800fed2:	b097      	sub	sp, #92	@ 0x5c
 800fed4:	4683      	mov	fp, r0
 800fed6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800feda:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800fedc:	b97f      	cbnz	r7, 800fefe <_dtoa_r+0x36>
 800fede:	2010      	movs	r0, #16
 800fee0:	f7ff f880 	bl	800efe4 <malloc>
 800fee4:	4602      	mov	r2, r0
 800fee6:	f8cb 001c 	str.w	r0, [fp, #28]
 800feea:	b920      	cbnz	r0, 800fef6 <_dtoa_r+0x2e>
 800feec:	21ef      	movs	r1, #239	@ 0xef
 800feee:	4ba8      	ldr	r3, [pc, #672]	@ (8010190 <_dtoa_r+0x2c8>)
 800fef0:	48a8      	ldr	r0, [pc, #672]	@ (8010194 <_dtoa_r+0x2cc>)
 800fef2:	f001 fba1 	bl	8011638 <__assert_func>
 800fef6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fefa:	6007      	str	r7, [r0, #0]
 800fefc:	60c7      	str	r7, [r0, #12]
 800fefe:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ff02:	6819      	ldr	r1, [r3, #0]
 800ff04:	b159      	cbz	r1, 800ff1e <_dtoa_r+0x56>
 800ff06:	685a      	ldr	r2, [r3, #4]
 800ff08:	2301      	movs	r3, #1
 800ff0a:	4093      	lsls	r3, r2
 800ff0c:	604a      	str	r2, [r1, #4]
 800ff0e:	608b      	str	r3, [r1, #8]
 800ff10:	4658      	mov	r0, fp
 800ff12:	f000 fe29 	bl	8010b68 <_Bfree>
 800ff16:	2200      	movs	r2, #0
 800ff18:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ff1c:	601a      	str	r2, [r3, #0]
 800ff1e:	1e2b      	subs	r3, r5, #0
 800ff20:	bfaf      	iteee	ge
 800ff22:	2300      	movge	r3, #0
 800ff24:	2201      	movlt	r2, #1
 800ff26:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ff2a:	9303      	strlt	r3, [sp, #12]
 800ff2c:	bfa8      	it	ge
 800ff2e:	6033      	strge	r3, [r6, #0]
 800ff30:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ff34:	4b98      	ldr	r3, [pc, #608]	@ (8010198 <_dtoa_r+0x2d0>)
 800ff36:	bfb8      	it	lt
 800ff38:	6032      	strlt	r2, [r6, #0]
 800ff3a:	ea33 0308 	bics.w	r3, r3, r8
 800ff3e:	d112      	bne.n	800ff66 <_dtoa_r+0x9e>
 800ff40:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ff44:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ff46:	6013      	str	r3, [r2, #0]
 800ff48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ff4c:	4323      	orrs	r3, r4
 800ff4e:	f000 8550 	beq.w	80109f2 <_dtoa_r+0xb2a>
 800ff52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ff54:	f8df a244 	ldr.w	sl, [pc, #580]	@ 801019c <_dtoa_r+0x2d4>
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	f000 8552 	beq.w	8010a02 <_dtoa_r+0xb3a>
 800ff5e:	f10a 0303 	add.w	r3, sl, #3
 800ff62:	f000 bd4c 	b.w	80109fe <_dtoa_r+0xb36>
 800ff66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff6a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ff6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff72:	2200      	movs	r2, #0
 800ff74:	2300      	movs	r3, #0
 800ff76:	f7f0 fd17 	bl	80009a8 <__aeabi_dcmpeq>
 800ff7a:	4607      	mov	r7, r0
 800ff7c:	b158      	cbz	r0, 800ff96 <_dtoa_r+0xce>
 800ff7e:	2301      	movs	r3, #1
 800ff80:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ff82:	6013      	str	r3, [r2, #0]
 800ff84:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ff86:	b113      	cbz	r3, 800ff8e <_dtoa_r+0xc6>
 800ff88:	4b85      	ldr	r3, [pc, #532]	@ (80101a0 <_dtoa_r+0x2d8>)
 800ff8a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ff8c:	6013      	str	r3, [r2, #0]
 800ff8e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80101a4 <_dtoa_r+0x2dc>
 800ff92:	f000 bd36 	b.w	8010a02 <_dtoa_r+0xb3a>
 800ff96:	ab14      	add	r3, sp, #80	@ 0x50
 800ff98:	9301      	str	r3, [sp, #4]
 800ff9a:	ab15      	add	r3, sp, #84	@ 0x54
 800ff9c:	9300      	str	r3, [sp, #0]
 800ff9e:	4658      	mov	r0, fp
 800ffa0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ffa4:	f001 f8c8 	bl	8011138 <__d2b>
 800ffa8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800ffac:	4681      	mov	r9, r0
 800ffae:	2e00      	cmp	r6, #0
 800ffb0:	d077      	beq.n	80100a2 <_dtoa_r+0x1da>
 800ffb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ffb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ffb8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ffbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffc0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ffc4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ffc8:	9712      	str	r7, [sp, #72]	@ 0x48
 800ffca:	4619      	mov	r1, r3
 800ffcc:	2200      	movs	r2, #0
 800ffce:	4b76      	ldr	r3, [pc, #472]	@ (80101a8 <_dtoa_r+0x2e0>)
 800ffd0:	f7f0 f8ca 	bl	8000168 <__aeabi_dsub>
 800ffd4:	a368      	add	r3, pc, #416	@ (adr r3, 8010178 <_dtoa_r+0x2b0>)
 800ffd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffda:	f7f0 fa7d 	bl	80004d8 <__aeabi_dmul>
 800ffde:	a368      	add	r3, pc, #416	@ (adr r3, 8010180 <_dtoa_r+0x2b8>)
 800ffe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe4:	f7f0 f8c2 	bl	800016c <__adddf3>
 800ffe8:	4604      	mov	r4, r0
 800ffea:	4630      	mov	r0, r6
 800ffec:	460d      	mov	r5, r1
 800ffee:	f7f0 fa09 	bl	8000404 <__aeabi_i2d>
 800fff2:	a365      	add	r3, pc, #404	@ (adr r3, 8010188 <_dtoa_r+0x2c0>)
 800fff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff8:	f7f0 fa6e 	bl	80004d8 <__aeabi_dmul>
 800fffc:	4602      	mov	r2, r0
 800fffe:	460b      	mov	r3, r1
 8010000:	4620      	mov	r0, r4
 8010002:	4629      	mov	r1, r5
 8010004:	f7f0 f8b2 	bl	800016c <__adddf3>
 8010008:	4604      	mov	r4, r0
 801000a:	460d      	mov	r5, r1
 801000c:	f7f0 fd14 	bl	8000a38 <__aeabi_d2iz>
 8010010:	2200      	movs	r2, #0
 8010012:	4607      	mov	r7, r0
 8010014:	2300      	movs	r3, #0
 8010016:	4620      	mov	r0, r4
 8010018:	4629      	mov	r1, r5
 801001a:	f7f0 fccf 	bl	80009bc <__aeabi_dcmplt>
 801001e:	b140      	cbz	r0, 8010032 <_dtoa_r+0x16a>
 8010020:	4638      	mov	r0, r7
 8010022:	f7f0 f9ef 	bl	8000404 <__aeabi_i2d>
 8010026:	4622      	mov	r2, r4
 8010028:	462b      	mov	r3, r5
 801002a:	f7f0 fcbd 	bl	80009a8 <__aeabi_dcmpeq>
 801002e:	b900      	cbnz	r0, 8010032 <_dtoa_r+0x16a>
 8010030:	3f01      	subs	r7, #1
 8010032:	2f16      	cmp	r7, #22
 8010034:	d853      	bhi.n	80100de <_dtoa_r+0x216>
 8010036:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801003a:	4b5c      	ldr	r3, [pc, #368]	@ (80101ac <_dtoa_r+0x2e4>)
 801003c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010044:	f7f0 fcba 	bl	80009bc <__aeabi_dcmplt>
 8010048:	2800      	cmp	r0, #0
 801004a:	d04a      	beq.n	80100e2 <_dtoa_r+0x21a>
 801004c:	2300      	movs	r3, #0
 801004e:	3f01      	subs	r7, #1
 8010050:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010052:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010054:	1b9b      	subs	r3, r3, r6
 8010056:	1e5a      	subs	r2, r3, #1
 8010058:	bf46      	itte	mi
 801005a:	f1c3 0801 	rsbmi	r8, r3, #1
 801005e:	2300      	movmi	r3, #0
 8010060:	f04f 0800 	movpl.w	r8, #0
 8010064:	9209      	str	r2, [sp, #36]	@ 0x24
 8010066:	bf48      	it	mi
 8010068:	9309      	strmi	r3, [sp, #36]	@ 0x24
 801006a:	2f00      	cmp	r7, #0
 801006c:	db3b      	blt.n	80100e6 <_dtoa_r+0x21e>
 801006e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010070:	970e      	str	r7, [sp, #56]	@ 0x38
 8010072:	443b      	add	r3, r7
 8010074:	9309      	str	r3, [sp, #36]	@ 0x24
 8010076:	2300      	movs	r3, #0
 8010078:	930a      	str	r3, [sp, #40]	@ 0x28
 801007a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801007c:	2b09      	cmp	r3, #9
 801007e:	d866      	bhi.n	801014e <_dtoa_r+0x286>
 8010080:	2b05      	cmp	r3, #5
 8010082:	bfc4      	itt	gt
 8010084:	3b04      	subgt	r3, #4
 8010086:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8010088:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801008a:	bfc8      	it	gt
 801008c:	2400      	movgt	r4, #0
 801008e:	f1a3 0302 	sub.w	r3, r3, #2
 8010092:	bfd8      	it	le
 8010094:	2401      	movle	r4, #1
 8010096:	2b03      	cmp	r3, #3
 8010098:	d864      	bhi.n	8010164 <_dtoa_r+0x29c>
 801009a:	e8df f003 	tbb	[pc, r3]
 801009e:	382b      	.short	0x382b
 80100a0:	5636      	.short	0x5636
 80100a2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80100a6:	441e      	add	r6, r3
 80100a8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80100ac:	2b20      	cmp	r3, #32
 80100ae:	bfc1      	itttt	gt
 80100b0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80100b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80100b8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80100bc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80100c0:	bfd6      	itet	le
 80100c2:	f1c3 0320 	rsble	r3, r3, #32
 80100c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80100ca:	fa04 f003 	lslle.w	r0, r4, r3
 80100ce:	f7f0 f989 	bl	80003e4 <__aeabi_ui2d>
 80100d2:	2201      	movs	r2, #1
 80100d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80100d8:	3e01      	subs	r6, #1
 80100da:	9212      	str	r2, [sp, #72]	@ 0x48
 80100dc:	e775      	b.n	800ffca <_dtoa_r+0x102>
 80100de:	2301      	movs	r3, #1
 80100e0:	e7b6      	b.n	8010050 <_dtoa_r+0x188>
 80100e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80100e4:	e7b5      	b.n	8010052 <_dtoa_r+0x18a>
 80100e6:	427b      	negs	r3, r7
 80100e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80100ea:	2300      	movs	r3, #0
 80100ec:	eba8 0807 	sub.w	r8, r8, r7
 80100f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80100f2:	e7c2      	b.n	801007a <_dtoa_r+0x1b2>
 80100f4:	2300      	movs	r3, #0
 80100f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80100f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	dc35      	bgt.n	801016a <_dtoa_r+0x2a2>
 80100fe:	2301      	movs	r3, #1
 8010100:	461a      	mov	r2, r3
 8010102:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8010106:	9221      	str	r2, [sp, #132]	@ 0x84
 8010108:	e00b      	b.n	8010122 <_dtoa_r+0x25a>
 801010a:	2301      	movs	r3, #1
 801010c:	e7f3      	b.n	80100f6 <_dtoa_r+0x22e>
 801010e:	2300      	movs	r3, #0
 8010110:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010112:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010114:	18fb      	adds	r3, r7, r3
 8010116:	9308      	str	r3, [sp, #32]
 8010118:	3301      	adds	r3, #1
 801011a:	2b01      	cmp	r3, #1
 801011c:	9307      	str	r3, [sp, #28]
 801011e:	bfb8      	it	lt
 8010120:	2301      	movlt	r3, #1
 8010122:	2100      	movs	r1, #0
 8010124:	2204      	movs	r2, #4
 8010126:	f8db 001c 	ldr.w	r0, [fp, #28]
 801012a:	f102 0514 	add.w	r5, r2, #20
 801012e:	429d      	cmp	r5, r3
 8010130:	d91f      	bls.n	8010172 <_dtoa_r+0x2aa>
 8010132:	6041      	str	r1, [r0, #4]
 8010134:	4658      	mov	r0, fp
 8010136:	f000 fcd7 	bl	8010ae8 <_Balloc>
 801013a:	4682      	mov	sl, r0
 801013c:	2800      	cmp	r0, #0
 801013e:	d139      	bne.n	80101b4 <_dtoa_r+0x2ec>
 8010140:	4602      	mov	r2, r0
 8010142:	f240 11af 	movw	r1, #431	@ 0x1af
 8010146:	4b1a      	ldr	r3, [pc, #104]	@ (80101b0 <_dtoa_r+0x2e8>)
 8010148:	e6d2      	b.n	800fef0 <_dtoa_r+0x28>
 801014a:	2301      	movs	r3, #1
 801014c:	e7e0      	b.n	8010110 <_dtoa_r+0x248>
 801014e:	2401      	movs	r4, #1
 8010150:	2300      	movs	r3, #0
 8010152:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010154:	9320      	str	r3, [sp, #128]	@ 0x80
 8010156:	f04f 33ff 	mov.w	r3, #4294967295
 801015a:	2200      	movs	r2, #0
 801015c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8010160:	2312      	movs	r3, #18
 8010162:	e7d0      	b.n	8010106 <_dtoa_r+0x23e>
 8010164:	2301      	movs	r3, #1
 8010166:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010168:	e7f5      	b.n	8010156 <_dtoa_r+0x28e>
 801016a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801016c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8010170:	e7d7      	b.n	8010122 <_dtoa_r+0x25a>
 8010172:	3101      	adds	r1, #1
 8010174:	0052      	lsls	r2, r2, #1
 8010176:	e7d8      	b.n	801012a <_dtoa_r+0x262>
 8010178:	636f4361 	.word	0x636f4361
 801017c:	3fd287a7 	.word	0x3fd287a7
 8010180:	8b60c8b3 	.word	0x8b60c8b3
 8010184:	3fc68a28 	.word	0x3fc68a28
 8010188:	509f79fb 	.word	0x509f79fb
 801018c:	3fd34413 	.word	0x3fd34413
 8010190:	08012d3b 	.word	0x08012d3b
 8010194:	08012d52 	.word	0x08012d52
 8010198:	7ff00000 	.word	0x7ff00000
 801019c:	08012d37 	.word	0x08012d37
 80101a0:	08012d0b 	.word	0x08012d0b
 80101a4:	08012d0a 	.word	0x08012d0a
 80101a8:	3ff80000 	.word	0x3ff80000
 80101ac:	08012e48 	.word	0x08012e48
 80101b0:	08012daa 	.word	0x08012daa
 80101b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80101b8:	6018      	str	r0, [r3, #0]
 80101ba:	9b07      	ldr	r3, [sp, #28]
 80101bc:	2b0e      	cmp	r3, #14
 80101be:	f200 80a4 	bhi.w	801030a <_dtoa_r+0x442>
 80101c2:	2c00      	cmp	r4, #0
 80101c4:	f000 80a1 	beq.w	801030a <_dtoa_r+0x442>
 80101c8:	2f00      	cmp	r7, #0
 80101ca:	dd33      	ble.n	8010234 <_dtoa_r+0x36c>
 80101cc:	4b86      	ldr	r3, [pc, #536]	@ (80103e8 <_dtoa_r+0x520>)
 80101ce:	f007 020f 	and.w	r2, r7, #15
 80101d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101d6:	05f8      	lsls	r0, r7, #23
 80101d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80101dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80101e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80101e4:	d516      	bpl.n	8010214 <_dtoa_r+0x34c>
 80101e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80101ea:	4b80      	ldr	r3, [pc, #512]	@ (80103ec <_dtoa_r+0x524>)
 80101ec:	2603      	movs	r6, #3
 80101ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80101f2:	f7f0 fa9b 	bl	800072c <__aeabi_ddiv>
 80101f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101fa:	f004 040f 	and.w	r4, r4, #15
 80101fe:	4d7b      	ldr	r5, [pc, #492]	@ (80103ec <_dtoa_r+0x524>)
 8010200:	b954      	cbnz	r4, 8010218 <_dtoa_r+0x350>
 8010202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801020a:	f7f0 fa8f 	bl	800072c <__aeabi_ddiv>
 801020e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010212:	e028      	b.n	8010266 <_dtoa_r+0x39e>
 8010214:	2602      	movs	r6, #2
 8010216:	e7f2      	b.n	80101fe <_dtoa_r+0x336>
 8010218:	07e1      	lsls	r1, r4, #31
 801021a:	d508      	bpl.n	801022e <_dtoa_r+0x366>
 801021c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010220:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010224:	f7f0 f958 	bl	80004d8 <__aeabi_dmul>
 8010228:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801022c:	3601      	adds	r6, #1
 801022e:	1064      	asrs	r4, r4, #1
 8010230:	3508      	adds	r5, #8
 8010232:	e7e5      	b.n	8010200 <_dtoa_r+0x338>
 8010234:	f000 80d2 	beq.w	80103dc <_dtoa_r+0x514>
 8010238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801023c:	427c      	negs	r4, r7
 801023e:	4b6a      	ldr	r3, [pc, #424]	@ (80103e8 <_dtoa_r+0x520>)
 8010240:	f004 020f 	and.w	r2, r4, #15
 8010244:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	f7f0 f944 	bl	80004d8 <__aeabi_dmul>
 8010250:	2602      	movs	r6, #2
 8010252:	2300      	movs	r3, #0
 8010254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010258:	4d64      	ldr	r5, [pc, #400]	@ (80103ec <_dtoa_r+0x524>)
 801025a:	1124      	asrs	r4, r4, #4
 801025c:	2c00      	cmp	r4, #0
 801025e:	f040 80b2 	bne.w	80103c6 <_dtoa_r+0x4fe>
 8010262:	2b00      	cmp	r3, #0
 8010264:	d1d3      	bne.n	801020e <_dtoa_r+0x346>
 8010266:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801026a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801026c:	2b00      	cmp	r3, #0
 801026e:	f000 80b7 	beq.w	80103e0 <_dtoa_r+0x518>
 8010272:	2200      	movs	r2, #0
 8010274:	4620      	mov	r0, r4
 8010276:	4629      	mov	r1, r5
 8010278:	4b5d      	ldr	r3, [pc, #372]	@ (80103f0 <_dtoa_r+0x528>)
 801027a:	f7f0 fb9f 	bl	80009bc <__aeabi_dcmplt>
 801027e:	2800      	cmp	r0, #0
 8010280:	f000 80ae 	beq.w	80103e0 <_dtoa_r+0x518>
 8010284:	9b07      	ldr	r3, [sp, #28]
 8010286:	2b00      	cmp	r3, #0
 8010288:	f000 80aa 	beq.w	80103e0 <_dtoa_r+0x518>
 801028c:	9b08      	ldr	r3, [sp, #32]
 801028e:	2b00      	cmp	r3, #0
 8010290:	dd37      	ble.n	8010302 <_dtoa_r+0x43a>
 8010292:	1e7b      	subs	r3, r7, #1
 8010294:	4620      	mov	r0, r4
 8010296:	9304      	str	r3, [sp, #16]
 8010298:	2200      	movs	r2, #0
 801029a:	4629      	mov	r1, r5
 801029c:	4b55      	ldr	r3, [pc, #340]	@ (80103f4 <_dtoa_r+0x52c>)
 801029e:	f7f0 f91b 	bl	80004d8 <__aeabi_dmul>
 80102a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102a6:	9c08      	ldr	r4, [sp, #32]
 80102a8:	3601      	adds	r6, #1
 80102aa:	4630      	mov	r0, r6
 80102ac:	f7f0 f8aa 	bl	8000404 <__aeabi_i2d>
 80102b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102b4:	f7f0 f910 	bl	80004d8 <__aeabi_dmul>
 80102b8:	2200      	movs	r2, #0
 80102ba:	4b4f      	ldr	r3, [pc, #316]	@ (80103f8 <_dtoa_r+0x530>)
 80102bc:	f7ef ff56 	bl	800016c <__adddf3>
 80102c0:	4605      	mov	r5, r0
 80102c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80102c6:	2c00      	cmp	r4, #0
 80102c8:	f040 809a 	bne.w	8010400 <_dtoa_r+0x538>
 80102cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102d0:	2200      	movs	r2, #0
 80102d2:	4b4a      	ldr	r3, [pc, #296]	@ (80103fc <_dtoa_r+0x534>)
 80102d4:	f7ef ff48 	bl	8000168 <__aeabi_dsub>
 80102d8:	4602      	mov	r2, r0
 80102da:	460b      	mov	r3, r1
 80102dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80102e0:	462a      	mov	r2, r5
 80102e2:	4633      	mov	r3, r6
 80102e4:	f7f0 fb88 	bl	80009f8 <__aeabi_dcmpgt>
 80102e8:	2800      	cmp	r0, #0
 80102ea:	f040 828e 	bne.w	801080a <_dtoa_r+0x942>
 80102ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102f2:	462a      	mov	r2, r5
 80102f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80102f8:	f7f0 fb60 	bl	80009bc <__aeabi_dcmplt>
 80102fc:	2800      	cmp	r0, #0
 80102fe:	f040 8127 	bne.w	8010550 <_dtoa_r+0x688>
 8010302:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010306:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801030a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801030c:	2b00      	cmp	r3, #0
 801030e:	f2c0 8163 	blt.w	80105d8 <_dtoa_r+0x710>
 8010312:	2f0e      	cmp	r7, #14
 8010314:	f300 8160 	bgt.w	80105d8 <_dtoa_r+0x710>
 8010318:	4b33      	ldr	r3, [pc, #204]	@ (80103e8 <_dtoa_r+0x520>)
 801031a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801031e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010322:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010326:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010328:	2b00      	cmp	r3, #0
 801032a:	da03      	bge.n	8010334 <_dtoa_r+0x46c>
 801032c:	9b07      	ldr	r3, [sp, #28]
 801032e:	2b00      	cmp	r3, #0
 8010330:	f340 8100 	ble.w	8010534 <_dtoa_r+0x66c>
 8010334:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010338:	4656      	mov	r6, sl
 801033a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801033e:	4620      	mov	r0, r4
 8010340:	4629      	mov	r1, r5
 8010342:	f7f0 f9f3 	bl	800072c <__aeabi_ddiv>
 8010346:	f7f0 fb77 	bl	8000a38 <__aeabi_d2iz>
 801034a:	4680      	mov	r8, r0
 801034c:	f7f0 f85a 	bl	8000404 <__aeabi_i2d>
 8010350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010354:	f7f0 f8c0 	bl	80004d8 <__aeabi_dmul>
 8010358:	4602      	mov	r2, r0
 801035a:	460b      	mov	r3, r1
 801035c:	4620      	mov	r0, r4
 801035e:	4629      	mov	r1, r5
 8010360:	f7ef ff02 	bl	8000168 <__aeabi_dsub>
 8010364:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010368:	9d07      	ldr	r5, [sp, #28]
 801036a:	f806 4b01 	strb.w	r4, [r6], #1
 801036e:	eba6 040a 	sub.w	r4, r6, sl
 8010372:	42a5      	cmp	r5, r4
 8010374:	4602      	mov	r2, r0
 8010376:	460b      	mov	r3, r1
 8010378:	f040 8116 	bne.w	80105a8 <_dtoa_r+0x6e0>
 801037c:	f7ef fef6 	bl	800016c <__adddf3>
 8010380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010384:	4604      	mov	r4, r0
 8010386:	460d      	mov	r5, r1
 8010388:	f7f0 fb36 	bl	80009f8 <__aeabi_dcmpgt>
 801038c:	2800      	cmp	r0, #0
 801038e:	f040 80f8 	bne.w	8010582 <_dtoa_r+0x6ba>
 8010392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010396:	4620      	mov	r0, r4
 8010398:	4629      	mov	r1, r5
 801039a:	f7f0 fb05 	bl	80009a8 <__aeabi_dcmpeq>
 801039e:	b118      	cbz	r0, 80103a8 <_dtoa_r+0x4e0>
 80103a0:	f018 0f01 	tst.w	r8, #1
 80103a4:	f040 80ed 	bne.w	8010582 <_dtoa_r+0x6ba>
 80103a8:	4649      	mov	r1, r9
 80103aa:	4658      	mov	r0, fp
 80103ac:	f000 fbdc 	bl	8010b68 <_Bfree>
 80103b0:	2300      	movs	r3, #0
 80103b2:	7033      	strb	r3, [r6, #0]
 80103b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80103b6:	3701      	adds	r7, #1
 80103b8:	601f      	str	r7, [r3, #0]
 80103ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80103bc:	2b00      	cmp	r3, #0
 80103be:	f000 8320 	beq.w	8010a02 <_dtoa_r+0xb3a>
 80103c2:	601e      	str	r6, [r3, #0]
 80103c4:	e31d      	b.n	8010a02 <_dtoa_r+0xb3a>
 80103c6:	07e2      	lsls	r2, r4, #31
 80103c8:	d505      	bpl.n	80103d6 <_dtoa_r+0x50e>
 80103ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80103ce:	f7f0 f883 	bl	80004d8 <__aeabi_dmul>
 80103d2:	2301      	movs	r3, #1
 80103d4:	3601      	adds	r6, #1
 80103d6:	1064      	asrs	r4, r4, #1
 80103d8:	3508      	adds	r5, #8
 80103da:	e73f      	b.n	801025c <_dtoa_r+0x394>
 80103dc:	2602      	movs	r6, #2
 80103de:	e742      	b.n	8010266 <_dtoa_r+0x39e>
 80103e0:	9c07      	ldr	r4, [sp, #28]
 80103e2:	9704      	str	r7, [sp, #16]
 80103e4:	e761      	b.n	80102aa <_dtoa_r+0x3e2>
 80103e6:	bf00      	nop
 80103e8:	08012e48 	.word	0x08012e48
 80103ec:	08012e20 	.word	0x08012e20
 80103f0:	3ff00000 	.word	0x3ff00000
 80103f4:	40240000 	.word	0x40240000
 80103f8:	401c0000 	.word	0x401c0000
 80103fc:	40140000 	.word	0x40140000
 8010400:	4b70      	ldr	r3, [pc, #448]	@ (80105c4 <_dtoa_r+0x6fc>)
 8010402:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010404:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010408:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801040c:	4454      	add	r4, sl
 801040e:	2900      	cmp	r1, #0
 8010410:	d045      	beq.n	801049e <_dtoa_r+0x5d6>
 8010412:	2000      	movs	r0, #0
 8010414:	496c      	ldr	r1, [pc, #432]	@ (80105c8 <_dtoa_r+0x700>)
 8010416:	f7f0 f989 	bl	800072c <__aeabi_ddiv>
 801041a:	4633      	mov	r3, r6
 801041c:	462a      	mov	r2, r5
 801041e:	f7ef fea3 	bl	8000168 <__aeabi_dsub>
 8010422:	4656      	mov	r6, sl
 8010424:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801042c:	f7f0 fb04 	bl	8000a38 <__aeabi_d2iz>
 8010430:	4605      	mov	r5, r0
 8010432:	f7ef ffe7 	bl	8000404 <__aeabi_i2d>
 8010436:	4602      	mov	r2, r0
 8010438:	460b      	mov	r3, r1
 801043a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801043e:	f7ef fe93 	bl	8000168 <__aeabi_dsub>
 8010442:	4602      	mov	r2, r0
 8010444:	460b      	mov	r3, r1
 8010446:	3530      	adds	r5, #48	@ 0x30
 8010448:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801044c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010450:	f806 5b01 	strb.w	r5, [r6], #1
 8010454:	f7f0 fab2 	bl	80009bc <__aeabi_dcmplt>
 8010458:	2800      	cmp	r0, #0
 801045a:	d163      	bne.n	8010524 <_dtoa_r+0x65c>
 801045c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010460:	2000      	movs	r0, #0
 8010462:	495a      	ldr	r1, [pc, #360]	@ (80105cc <_dtoa_r+0x704>)
 8010464:	f7ef fe80 	bl	8000168 <__aeabi_dsub>
 8010468:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801046c:	f7f0 faa6 	bl	80009bc <__aeabi_dcmplt>
 8010470:	2800      	cmp	r0, #0
 8010472:	f040 8087 	bne.w	8010584 <_dtoa_r+0x6bc>
 8010476:	42a6      	cmp	r6, r4
 8010478:	f43f af43 	beq.w	8010302 <_dtoa_r+0x43a>
 801047c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010480:	2200      	movs	r2, #0
 8010482:	4b53      	ldr	r3, [pc, #332]	@ (80105d0 <_dtoa_r+0x708>)
 8010484:	f7f0 f828 	bl	80004d8 <__aeabi_dmul>
 8010488:	2200      	movs	r2, #0
 801048a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801048e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010492:	4b4f      	ldr	r3, [pc, #316]	@ (80105d0 <_dtoa_r+0x708>)
 8010494:	f7f0 f820 	bl	80004d8 <__aeabi_dmul>
 8010498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801049c:	e7c4      	b.n	8010428 <_dtoa_r+0x560>
 801049e:	4631      	mov	r1, r6
 80104a0:	4628      	mov	r0, r5
 80104a2:	f7f0 f819 	bl	80004d8 <__aeabi_dmul>
 80104a6:	4656      	mov	r6, sl
 80104a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80104ac:	9413      	str	r4, [sp, #76]	@ 0x4c
 80104ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104b2:	f7f0 fac1 	bl	8000a38 <__aeabi_d2iz>
 80104b6:	4605      	mov	r5, r0
 80104b8:	f7ef ffa4 	bl	8000404 <__aeabi_i2d>
 80104bc:	4602      	mov	r2, r0
 80104be:	460b      	mov	r3, r1
 80104c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104c4:	f7ef fe50 	bl	8000168 <__aeabi_dsub>
 80104c8:	4602      	mov	r2, r0
 80104ca:	460b      	mov	r3, r1
 80104cc:	3530      	adds	r5, #48	@ 0x30
 80104ce:	f806 5b01 	strb.w	r5, [r6], #1
 80104d2:	42a6      	cmp	r6, r4
 80104d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80104d8:	f04f 0200 	mov.w	r2, #0
 80104dc:	d124      	bne.n	8010528 <_dtoa_r+0x660>
 80104de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80104e2:	4b39      	ldr	r3, [pc, #228]	@ (80105c8 <_dtoa_r+0x700>)
 80104e4:	f7ef fe42 	bl	800016c <__adddf3>
 80104e8:	4602      	mov	r2, r0
 80104ea:	460b      	mov	r3, r1
 80104ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104f0:	f7f0 fa82 	bl	80009f8 <__aeabi_dcmpgt>
 80104f4:	2800      	cmp	r0, #0
 80104f6:	d145      	bne.n	8010584 <_dtoa_r+0x6bc>
 80104f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80104fc:	2000      	movs	r0, #0
 80104fe:	4932      	ldr	r1, [pc, #200]	@ (80105c8 <_dtoa_r+0x700>)
 8010500:	f7ef fe32 	bl	8000168 <__aeabi_dsub>
 8010504:	4602      	mov	r2, r0
 8010506:	460b      	mov	r3, r1
 8010508:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801050c:	f7f0 fa56 	bl	80009bc <__aeabi_dcmplt>
 8010510:	2800      	cmp	r0, #0
 8010512:	f43f aef6 	beq.w	8010302 <_dtoa_r+0x43a>
 8010516:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010518:	1e73      	subs	r3, r6, #1
 801051a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801051c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010520:	2b30      	cmp	r3, #48	@ 0x30
 8010522:	d0f8      	beq.n	8010516 <_dtoa_r+0x64e>
 8010524:	9f04      	ldr	r7, [sp, #16]
 8010526:	e73f      	b.n	80103a8 <_dtoa_r+0x4e0>
 8010528:	4b29      	ldr	r3, [pc, #164]	@ (80105d0 <_dtoa_r+0x708>)
 801052a:	f7ef ffd5 	bl	80004d8 <__aeabi_dmul>
 801052e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010532:	e7bc      	b.n	80104ae <_dtoa_r+0x5e6>
 8010534:	d10c      	bne.n	8010550 <_dtoa_r+0x688>
 8010536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801053a:	2200      	movs	r2, #0
 801053c:	4b25      	ldr	r3, [pc, #148]	@ (80105d4 <_dtoa_r+0x70c>)
 801053e:	f7ef ffcb 	bl	80004d8 <__aeabi_dmul>
 8010542:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010546:	f7f0 fa4d 	bl	80009e4 <__aeabi_dcmpge>
 801054a:	2800      	cmp	r0, #0
 801054c:	f000 815b 	beq.w	8010806 <_dtoa_r+0x93e>
 8010550:	2400      	movs	r4, #0
 8010552:	4625      	mov	r5, r4
 8010554:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010556:	4656      	mov	r6, sl
 8010558:	43db      	mvns	r3, r3
 801055a:	9304      	str	r3, [sp, #16]
 801055c:	2700      	movs	r7, #0
 801055e:	4621      	mov	r1, r4
 8010560:	4658      	mov	r0, fp
 8010562:	f000 fb01 	bl	8010b68 <_Bfree>
 8010566:	2d00      	cmp	r5, #0
 8010568:	d0dc      	beq.n	8010524 <_dtoa_r+0x65c>
 801056a:	b12f      	cbz	r7, 8010578 <_dtoa_r+0x6b0>
 801056c:	42af      	cmp	r7, r5
 801056e:	d003      	beq.n	8010578 <_dtoa_r+0x6b0>
 8010570:	4639      	mov	r1, r7
 8010572:	4658      	mov	r0, fp
 8010574:	f000 faf8 	bl	8010b68 <_Bfree>
 8010578:	4629      	mov	r1, r5
 801057a:	4658      	mov	r0, fp
 801057c:	f000 faf4 	bl	8010b68 <_Bfree>
 8010580:	e7d0      	b.n	8010524 <_dtoa_r+0x65c>
 8010582:	9704      	str	r7, [sp, #16]
 8010584:	4633      	mov	r3, r6
 8010586:	461e      	mov	r6, r3
 8010588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801058c:	2a39      	cmp	r2, #57	@ 0x39
 801058e:	d107      	bne.n	80105a0 <_dtoa_r+0x6d8>
 8010590:	459a      	cmp	sl, r3
 8010592:	d1f8      	bne.n	8010586 <_dtoa_r+0x6be>
 8010594:	9a04      	ldr	r2, [sp, #16]
 8010596:	3201      	adds	r2, #1
 8010598:	9204      	str	r2, [sp, #16]
 801059a:	2230      	movs	r2, #48	@ 0x30
 801059c:	f88a 2000 	strb.w	r2, [sl]
 80105a0:	781a      	ldrb	r2, [r3, #0]
 80105a2:	3201      	adds	r2, #1
 80105a4:	701a      	strb	r2, [r3, #0]
 80105a6:	e7bd      	b.n	8010524 <_dtoa_r+0x65c>
 80105a8:	2200      	movs	r2, #0
 80105aa:	4b09      	ldr	r3, [pc, #36]	@ (80105d0 <_dtoa_r+0x708>)
 80105ac:	f7ef ff94 	bl	80004d8 <__aeabi_dmul>
 80105b0:	2200      	movs	r2, #0
 80105b2:	2300      	movs	r3, #0
 80105b4:	4604      	mov	r4, r0
 80105b6:	460d      	mov	r5, r1
 80105b8:	f7f0 f9f6 	bl	80009a8 <__aeabi_dcmpeq>
 80105bc:	2800      	cmp	r0, #0
 80105be:	f43f aebc 	beq.w	801033a <_dtoa_r+0x472>
 80105c2:	e6f1      	b.n	80103a8 <_dtoa_r+0x4e0>
 80105c4:	08012e48 	.word	0x08012e48
 80105c8:	3fe00000 	.word	0x3fe00000
 80105cc:	3ff00000 	.word	0x3ff00000
 80105d0:	40240000 	.word	0x40240000
 80105d4:	40140000 	.word	0x40140000
 80105d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80105da:	2a00      	cmp	r2, #0
 80105dc:	f000 80db 	beq.w	8010796 <_dtoa_r+0x8ce>
 80105e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80105e2:	2a01      	cmp	r2, #1
 80105e4:	f300 80bf 	bgt.w	8010766 <_dtoa_r+0x89e>
 80105e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80105ea:	2a00      	cmp	r2, #0
 80105ec:	f000 80b7 	beq.w	801075e <_dtoa_r+0x896>
 80105f0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80105f4:	4646      	mov	r6, r8
 80105f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80105f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105fa:	2101      	movs	r1, #1
 80105fc:	441a      	add	r2, r3
 80105fe:	4658      	mov	r0, fp
 8010600:	4498      	add	r8, r3
 8010602:	9209      	str	r2, [sp, #36]	@ 0x24
 8010604:	f000 fb64 	bl	8010cd0 <__i2b>
 8010608:	4605      	mov	r5, r0
 801060a:	b15e      	cbz	r6, 8010624 <_dtoa_r+0x75c>
 801060c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801060e:	2b00      	cmp	r3, #0
 8010610:	dd08      	ble.n	8010624 <_dtoa_r+0x75c>
 8010612:	42b3      	cmp	r3, r6
 8010614:	bfa8      	it	ge
 8010616:	4633      	movge	r3, r6
 8010618:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801061a:	eba8 0803 	sub.w	r8, r8, r3
 801061e:	1af6      	subs	r6, r6, r3
 8010620:	1ad3      	subs	r3, r2, r3
 8010622:	9309      	str	r3, [sp, #36]	@ 0x24
 8010624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010626:	b1f3      	cbz	r3, 8010666 <_dtoa_r+0x79e>
 8010628:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801062a:	2b00      	cmp	r3, #0
 801062c:	f000 80b7 	beq.w	801079e <_dtoa_r+0x8d6>
 8010630:	b18c      	cbz	r4, 8010656 <_dtoa_r+0x78e>
 8010632:	4629      	mov	r1, r5
 8010634:	4622      	mov	r2, r4
 8010636:	4658      	mov	r0, fp
 8010638:	f000 fc08 	bl	8010e4c <__pow5mult>
 801063c:	464a      	mov	r2, r9
 801063e:	4601      	mov	r1, r0
 8010640:	4605      	mov	r5, r0
 8010642:	4658      	mov	r0, fp
 8010644:	f000 fb5a 	bl	8010cfc <__multiply>
 8010648:	4649      	mov	r1, r9
 801064a:	9004      	str	r0, [sp, #16]
 801064c:	4658      	mov	r0, fp
 801064e:	f000 fa8b 	bl	8010b68 <_Bfree>
 8010652:	9b04      	ldr	r3, [sp, #16]
 8010654:	4699      	mov	r9, r3
 8010656:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010658:	1b1a      	subs	r2, r3, r4
 801065a:	d004      	beq.n	8010666 <_dtoa_r+0x79e>
 801065c:	4649      	mov	r1, r9
 801065e:	4658      	mov	r0, fp
 8010660:	f000 fbf4 	bl	8010e4c <__pow5mult>
 8010664:	4681      	mov	r9, r0
 8010666:	2101      	movs	r1, #1
 8010668:	4658      	mov	r0, fp
 801066a:	f000 fb31 	bl	8010cd0 <__i2b>
 801066e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010670:	4604      	mov	r4, r0
 8010672:	2b00      	cmp	r3, #0
 8010674:	f000 81c9 	beq.w	8010a0a <_dtoa_r+0xb42>
 8010678:	461a      	mov	r2, r3
 801067a:	4601      	mov	r1, r0
 801067c:	4658      	mov	r0, fp
 801067e:	f000 fbe5 	bl	8010e4c <__pow5mult>
 8010682:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010684:	4604      	mov	r4, r0
 8010686:	2b01      	cmp	r3, #1
 8010688:	f300 808f 	bgt.w	80107aa <_dtoa_r+0x8e2>
 801068c:	9b02      	ldr	r3, [sp, #8]
 801068e:	2b00      	cmp	r3, #0
 8010690:	f040 8087 	bne.w	80107a2 <_dtoa_r+0x8da>
 8010694:	9b03      	ldr	r3, [sp, #12]
 8010696:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801069a:	2b00      	cmp	r3, #0
 801069c:	f040 8083 	bne.w	80107a6 <_dtoa_r+0x8de>
 80106a0:	9b03      	ldr	r3, [sp, #12]
 80106a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80106a6:	0d1b      	lsrs	r3, r3, #20
 80106a8:	051b      	lsls	r3, r3, #20
 80106aa:	b12b      	cbz	r3, 80106b8 <_dtoa_r+0x7f0>
 80106ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106ae:	f108 0801 	add.w	r8, r8, #1
 80106b2:	3301      	adds	r3, #1
 80106b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80106b6:	2301      	movs	r3, #1
 80106b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80106ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f000 81aa 	beq.w	8010a16 <_dtoa_r+0xb4e>
 80106c2:	6923      	ldr	r3, [r4, #16]
 80106c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80106c8:	6918      	ldr	r0, [r3, #16]
 80106ca:	f000 fab5 	bl	8010c38 <__hi0bits>
 80106ce:	f1c0 0020 	rsb	r0, r0, #32
 80106d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106d4:	4418      	add	r0, r3
 80106d6:	f010 001f 	ands.w	r0, r0, #31
 80106da:	d071      	beq.n	80107c0 <_dtoa_r+0x8f8>
 80106dc:	f1c0 0320 	rsb	r3, r0, #32
 80106e0:	2b04      	cmp	r3, #4
 80106e2:	dd65      	ble.n	80107b0 <_dtoa_r+0x8e8>
 80106e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106e6:	f1c0 001c 	rsb	r0, r0, #28
 80106ea:	4403      	add	r3, r0
 80106ec:	4480      	add	r8, r0
 80106ee:	4406      	add	r6, r0
 80106f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80106f2:	f1b8 0f00 	cmp.w	r8, #0
 80106f6:	dd05      	ble.n	8010704 <_dtoa_r+0x83c>
 80106f8:	4649      	mov	r1, r9
 80106fa:	4642      	mov	r2, r8
 80106fc:	4658      	mov	r0, fp
 80106fe:	f000 fbff 	bl	8010f00 <__lshift>
 8010702:	4681      	mov	r9, r0
 8010704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010706:	2b00      	cmp	r3, #0
 8010708:	dd05      	ble.n	8010716 <_dtoa_r+0x84e>
 801070a:	4621      	mov	r1, r4
 801070c:	461a      	mov	r2, r3
 801070e:	4658      	mov	r0, fp
 8010710:	f000 fbf6 	bl	8010f00 <__lshift>
 8010714:	4604      	mov	r4, r0
 8010716:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010718:	2b00      	cmp	r3, #0
 801071a:	d053      	beq.n	80107c4 <_dtoa_r+0x8fc>
 801071c:	4621      	mov	r1, r4
 801071e:	4648      	mov	r0, r9
 8010720:	f000 fc5a 	bl	8010fd8 <__mcmp>
 8010724:	2800      	cmp	r0, #0
 8010726:	da4d      	bge.n	80107c4 <_dtoa_r+0x8fc>
 8010728:	1e7b      	subs	r3, r7, #1
 801072a:	4649      	mov	r1, r9
 801072c:	9304      	str	r3, [sp, #16]
 801072e:	220a      	movs	r2, #10
 8010730:	2300      	movs	r3, #0
 8010732:	4658      	mov	r0, fp
 8010734:	f000 fa3a 	bl	8010bac <__multadd>
 8010738:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801073a:	4681      	mov	r9, r0
 801073c:	2b00      	cmp	r3, #0
 801073e:	f000 816c 	beq.w	8010a1a <_dtoa_r+0xb52>
 8010742:	2300      	movs	r3, #0
 8010744:	4629      	mov	r1, r5
 8010746:	220a      	movs	r2, #10
 8010748:	4658      	mov	r0, fp
 801074a:	f000 fa2f 	bl	8010bac <__multadd>
 801074e:	9b08      	ldr	r3, [sp, #32]
 8010750:	4605      	mov	r5, r0
 8010752:	2b00      	cmp	r3, #0
 8010754:	dc61      	bgt.n	801081a <_dtoa_r+0x952>
 8010756:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010758:	2b02      	cmp	r3, #2
 801075a:	dc3b      	bgt.n	80107d4 <_dtoa_r+0x90c>
 801075c:	e05d      	b.n	801081a <_dtoa_r+0x952>
 801075e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010760:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010764:	e746      	b.n	80105f4 <_dtoa_r+0x72c>
 8010766:	9b07      	ldr	r3, [sp, #28]
 8010768:	1e5c      	subs	r4, r3, #1
 801076a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801076c:	42a3      	cmp	r3, r4
 801076e:	bfbf      	itttt	lt
 8010770:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010772:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8010774:	1ae3      	sublt	r3, r4, r3
 8010776:	18d2      	addlt	r2, r2, r3
 8010778:	bfa8      	it	ge
 801077a:	1b1c      	subge	r4, r3, r4
 801077c:	9b07      	ldr	r3, [sp, #28]
 801077e:	bfbe      	ittt	lt
 8010780:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010782:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8010784:	2400      	movlt	r4, #0
 8010786:	2b00      	cmp	r3, #0
 8010788:	bfb5      	itete	lt
 801078a:	eba8 0603 	sublt.w	r6, r8, r3
 801078e:	4646      	movge	r6, r8
 8010790:	2300      	movlt	r3, #0
 8010792:	9b07      	ldrge	r3, [sp, #28]
 8010794:	e730      	b.n	80105f8 <_dtoa_r+0x730>
 8010796:	4646      	mov	r6, r8
 8010798:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801079a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801079c:	e735      	b.n	801060a <_dtoa_r+0x742>
 801079e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80107a0:	e75c      	b.n	801065c <_dtoa_r+0x794>
 80107a2:	2300      	movs	r3, #0
 80107a4:	e788      	b.n	80106b8 <_dtoa_r+0x7f0>
 80107a6:	9b02      	ldr	r3, [sp, #8]
 80107a8:	e786      	b.n	80106b8 <_dtoa_r+0x7f0>
 80107aa:	2300      	movs	r3, #0
 80107ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80107ae:	e788      	b.n	80106c2 <_dtoa_r+0x7fa>
 80107b0:	d09f      	beq.n	80106f2 <_dtoa_r+0x82a>
 80107b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107b4:	331c      	adds	r3, #28
 80107b6:	441a      	add	r2, r3
 80107b8:	4498      	add	r8, r3
 80107ba:	441e      	add	r6, r3
 80107bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80107be:	e798      	b.n	80106f2 <_dtoa_r+0x82a>
 80107c0:	4603      	mov	r3, r0
 80107c2:	e7f6      	b.n	80107b2 <_dtoa_r+0x8ea>
 80107c4:	9b07      	ldr	r3, [sp, #28]
 80107c6:	9704      	str	r7, [sp, #16]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	dc20      	bgt.n	801080e <_dtoa_r+0x946>
 80107cc:	9308      	str	r3, [sp, #32]
 80107ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80107d0:	2b02      	cmp	r3, #2
 80107d2:	dd1e      	ble.n	8010812 <_dtoa_r+0x94a>
 80107d4:	9b08      	ldr	r3, [sp, #32]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	f47f aebc 	bne.w	8010554 <_dtoa_r+0x68c>
 80107dc:	4621      	mov	r1, r4
 80107de:	2205      	movs	r2, #5
 80107e0:	4658      	mov	r0, fp
 80107e2:	f000 f9e3 	bl	8010bac <__multadd>
 80107e6:	4601      	mov	r1, r0
 80107e8:	4604      	mov	r4, r0
 80107ea:	4648      	mov	r0, r9
 80107ec:	f000 fbf4 	bl	8010fd8 <__mcmp>
 80107f0:	2800      	cmp	r0, #0
 80107f2:	f77f aeaf 	ble.w	8010554 <_dtoa_r+0x68c>
 80107f6:	2331      	movs	r3, #49	@ 0x31
 80107f8:	4656      	mov	r6, sl
 80107fa:	f806 3b01 	strb.w	r3, [r6], #1
 80107fe:	9b04      	ldr	r3, [sp, #16]
 8010800:	3301      	adds	r3, #1
 8010802:	9304      	str	r3, [sp, #16]
 8010804:	e6aa      	b.n	801055c <_dtoa_r+0x694>
 8010806:	9c07      	ldr	r4, [sp, #28]
 8010808:	9704      	str	r7, [sp, #16]
 801080a:	4625      	mov	r5, r4
 801080c:	e7f3      	b.n	80107f6 <_dtoa_r+0x92e>
 801080e:	9b07      	ldr	r3, [sp, #28]
 8010810:	9308      	str	r3, [sp, #32]
 8010812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010814:	2b00      	cmp	r3, #0
 8010816:	f000 8104 	beq.w	8010a22 <_dtoa_r+0xb5a>
 801081a:	2e00      	cmp	r6, #0
 801081c:	dd05      	ble.n	801082a <_dtoa_r+0x962>
 801081e:	4629      	mov	r1, r5
 8010820:	4632      	mov	r2, r6
 8010822:	4658      	mov	r0, fp
 8010824:	f000 fb6c 	bl	8010f00 <__lshift>
 8010828:	4605      	mov	r5, r0
 801082a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801082c:	2b00      	cmp	r3, #0
 801082e:	d05a      	beq.n	80108e6 <_dtoa_r+0xa1e>
 8010830:	4658      	mov	r0, fp
 8010832:	6869      	ldr	r1, [r5, #4]
 8010834:	f000 f958 	bl	8010ae8 <_Balloc>
 8010838:	4606      	mov	r6, r0
 801083a:	b928      	cbnz	r0, 8010848 <_dtoa_r+0x980>
 801083c:	4602      	mov	r2, r0
 801083e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010842:	4b83      	ldr	r3, [pc, #524]	@ (8010a50 <_dtoa_r+0xb88>)
 8010844:	f7ff bb54 	b.w	800fef0 <_dtoa_r+0x28>
 8010848:	692a      	ldr	r2, [r5, #16]
 801084a:	f105 010c 	add.w	r1, r5, #12
 801084e:	3202      	adds	r2, #2
 8010850:	0092      	lsls	r2, r2, #2
 8010852:	300c      	adds	r0, #12
 8010854:	f000 fee2 	bl	801161c <memcpy>
 8010858:	2201      	movs	r2, #1
 801085a:	4631      	mov	r1, r6
 801085c:	4658      	mov	r0, fp
 801085e:	f000 fb4f 	bl	8010f00 <__lshift>
 8010862:	462f      	mov	r7, r5
 8010864:	4605      	mov	r5, r0
 8010866:	f10a 0301 	add.w	r3, sl, #1
 801086a:	9307      	str	r3, [sp, #28]
 801086c:	9b08      	ldr	r3, [sp, #32]
 801086e:	4453      	add	r3, sl
 8010870:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010872:	9b02      	ldr	r3, [sp, #8]
 8010874:	f003 0301 	and.w	r3, r3, #1
 8010878:	930a      	str	r3, [sp, #40]	@ 0x28
 801087a:	9b07      	ldr	r3, [sp, #28]
 801087c:	4621      	mov	r1, r4
 801087e:	3b01      	subs	r3, #1
 8010880:	4648      	mov	r0, r9
 8010882:	9302      	str	r3, [sp, #8]
 8010884:	f7ff fa97 	bl	800fdb6 <quorem>
 8010888:	4639      	mov	r1, r7
 801088a:	9008      	str	r0, [sp, #32]
 801088c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010890:	4648      	mov	r0, r9
 8010892:	f000 fba1 	bl	8010fd8 <__mcmp>
 8010896:	462a      	mov	r2, r5
 8010898:	9009      	str	r0, [sp, #36]	@ 0x24
 801089a:	4621      	mov	r1, r4
 801089c:	4658      	mov	r0, fp
 801089e:	f000 fbb7 	bl	8011010 <__mdiff>
 80108a2:	68c2      	ldr	r2, [r0, #12]
 80108a4:	4606      	mov	r6, r0
 80108a6:	bb02      	cbnz	r2, 80108ea <_dtoa_r+0xa22>
 80108a8:	4601      	mov	r1, r0
 80108aa:	4648      	mov	r0, r9
 80108ac:	f000 fb94 	bl	8010fd8 <__mcmp>
 80108b0:	4602      	mov	r2, r0
 80108b2:	4631      	mov	r1, r6
 80108b4:	4658      	mov	r0, fp
 80108b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80108b8:	f000 f956 	bl	8010b68 <_Bfree>
 80108bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80108be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80108c0:	9e07      	ldr	r6, [sp, #28]
 80108c2:	ea43 0102 	orr.w	r1, r3, r2
 80108c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108c8:	4319      	orrs	r1, r3
 80108ca:	d110      	bne.n	80108ee <_dtoa_r+0xa26>
 80108cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80108d0:	d029      	beq.n	8010926 <_dtoa_r+0xa5e>
 80108d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	dd02      	ble.n	80108de <_dtoa_r+0xa16>
 80108d8:	9b08      	ldr	r3, [sp, #32]
 80108da:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80108de:	9b02      	ldr	r3, [sp, #8]
 80108e0:	f883 8000 	strb.w	r8, [r3]
 80108e4:	e63b      	b.n	801055e <_dtoa_r+0x696>
 80108e6:	4628      	mov	r0, r5
 80108e8:	e7bb      	b.n	8010862 <_dtoa_r+0x99a>
 80108ea:	2201      	movs	r2, #1
 80108ec:	e7e1      	b.n	80108b2 <_dtoa_r+0x9ea>
 80108ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	db04      	blt.n	80108fe <_dtoa_r+0xa36>
 80108f4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80108f6:	430b      	orrs	r3, r1
 80108f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80108fa:	430b      	orrs	r3, r1
 80108fc:	d120      	bne.n	8010940 <_dtoa_r+0xa78>
 80108fe:	2a00      	cmp	r2, #0
 8010900:	dded      	ble.n	80108de <_dtoa_r+0xa16>
 8010902:	4649      	mov	r1, r9
 8010904:	2201      	movs	r2, #1
 8010906:	4658      	mov	r0, fp
 8010908:	f000 fafa 	bl	8010f00 <__lshift>
 801090c:	4621      	mov	r1, r4
 801090e:	4681      	mov	r9, r0
 8010910:	f000 fb62 	bl	8010fd8 <__mcmp>
 8010914:	2800      	cmp	r0, #0
 8010916:	dc03      	bgt.n	8010920 <_dtoa_r+0xa58>
 8010918:	d1e1      	bne.n	80108de <_dtoa_r+0xa16>
 801091a:	f018 0f01 	tst.w	r8, #1
 801091e:	d0de      	beq.n	80108de <_dtoa_r+0xa16>
 8010920:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010924:	d1d8      	bne.n	80108d8 <_dtoa_r+0xa10>
 8010926:	2339      	movs	r3, #57	@ 0x39
 8010928:	9a02      	ldr	r2, [sp, #8]
 801092a:	7013      	strb	r3, [r2, #0]
 801092c:	4633      	mov	r3, r6
 801092e:	461e      	mov	r6, r3
 8010930:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010934:	3b01      	subs	r3, #1
 8010936:	2a39      	cmp	r2, #57	@ 0x39
 8010938:	d052      	beq.n	80109e0 <_dtoa_r+0xb18>
 801093a:	3201      	adds	r2, #1
 801093c:	701a      	strb	r2, [r3, #0]
 801093e:	e60e      	b.n	801055e <_dtoa_r+0x696>
 8010940:	2a00      	cmp	r2, #0
 8010942:	dd07      	ble.n	8010954 <_dtoa_r+0xa8c>
 8010944:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010948:	d0ed      	beq.n	8010926 <_dtoa_r+0xa5e>
 801094a:	9a02      	ldr	r2, [sp, #8]
 801094c:	f108 0301 	add.w	r3, r8, #1
 8010950:	7013      	strb	r3, [r2, #0]
 8010952:	e604      	b.n	801055e <_dtoa_r+0x696>
 8010954:	9b07      	ldr	r3, [sp, #28]
 8010956:	9a07      	ldr	r2, [sp, #28]
 8010958:	f803 8c01 	strb.w	r8, [r3, #-1]
 801095c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801095e:	4293      	cmp	r3, r2
 8010960:	d028      	beq.n	80109b4 <_dtoa_r+0xaec>
 8010962:	4649      	mov	r1, r9
 8010964:	2300      	movs	r3, #0
 8010966:	220a      	movs	r2, #10
 8010968:	4658      	mov	r0, fp
 801096a:	f000 f91f 	bl	8010bac <__multadd>
 801096e:	42af      	cmp	r7, r5
 8010970:	4681      	mov	r9, r0
 8010972:	f04f 0300 	mov.w	r3, #0
 8010976:	f04f 020a 	mov.w	r2, #10
 801097a:	4639      	mov	r1, r7
 801097c:	4658      	mov	r0, fp
 801097e:	d107      	bne.n	8010990 <_dtoa_r+0xac8>
 8010980:	f000 f914 	bl	8010bac <__multadd>
 8010984:	4607      	mov	r7, r0
 8010986:	4605      	mov	r5, r0
 8010988:	9b07      	ldr	r3, [sp, #28]
 801098a:	3301      	adds	r3, #1
 801098c:	9307      	str	r3, [sp, #28]
 801098e:	e774      	b.n	801087a <_dtoa_r+0x9b2>
 8010990:	f000 f90c 	bl	8010bac <__multadd>
 8010994:	4629      	mov	r1, r5
 8010996:	4607      	mov	r7, r0
 8010998:	2300      	movs	r3, #0
 801099a:	220a      	movs	r2, #10
 801099c:	4658      	mov	r0, fp
 801099e:	f000 f905 	bl	8010bac <__multadd>
 80109a2:	4605      	mov	r5, r0
 80109a4:	e7f0      	b.n	8010988 <_dtoa_r+0xac0>
 80109a6:	9b08      	ldr	r3, [sp, #32]
 80109a8:	2700      	movs	r7, #0
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	bfcc      	ite	gt
 80109ae:	461e      	movgt	r6, r3
 80109b0:	2601      	movle	r6, #1
 80109b2:	4456      	add	r6, sl
 80109b4:	4649      	mov	r1, r9
 80109b6:	2201      	movs	r2, #1
 80109b8:	4658      	mov	r0, fp
 80109ba:	f000 faa1 	bl	8010f00 <__lshift>
 80109be:	4621      	mov	r1, r4
 80109c0:	4681      	mov	r9, r0
 80109c2:	f000 fb09 	bl	8010fd8 <__mcmp>
 80109c6:	2800      	cmp	r0, #0
 80109c8:	dcb0      	bgt.n	801092c <_dtoa_r+0xa64>
 80109ca:	d102      	bne.n	80109d2 <_dtoa_r+0xb0a>
 80109cc:	f018 0f01 	tst.w	r8, #1
 80109d0:	d1ac      	bne.n	801092c <_dtoa_r+0xa64>
 80109d2:	4633      	mov	r3, r6
 80109d4:	461e      	mov	r6, r3
 80109d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109da:	2a30      	cmp	r2, #48	@ 0x30
 80109dc:	d0fa      	beq.n	80109d4 <_dtoa_r+0xb0c>
 80109de:	e5be      	b.n	801055e <_dtoa_r+0x696>
 80109e0:	459a      	cmp	sl, r3
 80109e2:	d1a4      	bne.n	801092e <_dtoa_r+0xa66>
 80109e4:	9b04      	ldr	r3, [sp, #16]
 80109e6:	3301      	adds	r3, #1
 80109e8:	9304      	str	r3, [sp, #16]
 80109ea:	2331      	movs	r3, #49	@ 0x31
 80109ec:	f88a 3000 	strb.w	r3, [sl]
 80109f0:	e5b5      	b.n	801055e <_dtoa_r+0x696>
 80109f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80109f4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010a54 <_dtoa_r+0xb8c>
 80109f8:	b11b      	cbz	r3, 8010a02 <_dtoa_r+0xb3a>
 80109fa:	f10a 0308 	add.w	r3, sl, #8
 80109fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010a00:	6013      	str	r3, [r2, #0]
 8010a02:	4650      	mov	r0, sl
 8010a04:	b017      	add	sp, #92	@ 0x5c
 8010a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010a0c:	2b01      	cmp	r3, #1
 8010a0e:	f77f ae3d 	ble.w	801068c <_dtoa_r+0x7c4>
 8010a12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a14:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a16:	2001      	movs	r0, #1
 8010a18:	e65b      	b.n	80106d2 <_dtoa_r+0x80a>
 8010a1a:	9b08      	ldr	r3, [sp, #32]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	f77f aed6 	ble.w	80107ce <_dtoa_r+0x906>
 8010a22:	4656      	mov	r6, sl
 8010a24:	4621      	mov	r1, r4
 8010a26:	4648      	mov	r0, r9
 8010a28:	f7ff f9c5 	bl	800fdb6 <quorem>
 8010a2c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010a30:	9b08      	ldr	r3, [sp, #32]
 8010a32:	f806 8b01 	strb.w	r8, [r6], #1
 8010a36:	eba6 020a 	sub.w	r2, r6, sl
 8010a3a:	4293      	cmp	r3, r2
 8010a3c:	ddb3      	ble.n	80109a6 <_dtoa_r+0xade>
 8010a3e:	4649      	mov	r1, r9
 8010a40:	2300      	movs	r3, #0
 8010a42:	220a      	movs	r2, #10
 8010a44:	4658      	mov	r0, fp
 8010a46:	f000 f8b1 	bl	8010bac <__multadd>
 8010a4a:	4681      	mov	r9, r0
 8010a4c:	e7ea      	b.n	8010a24 <_dtoa_r+0xb5c>
 8010a4e:	bf00      	nop
 8010a50:	08012daa 	.word	0x08012daa
 8010a54:	08012d2e 	.word	0x08012d2e

08010a58 <_free_r>:
 8010a58:	b538      	push	{r3, r4, r5, lr}
 8010a5a:	4605      	mov	r5, r0
 8010a5c:	2900      	cmp	r1, #0
 8010a5e:	d040      	beq.n	8010ae2 <_free_r+0x8a>
 8010a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a64:	1f0c      	subs	r4, r1, #4
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	bfb8      	it	lt
 8010a6a:	18e4      	addlt	r4, r4, r3
 8010a6c:	f7fe fb64 	bl	800f138 <__malloc_lock>
 8010a70:	4a1c      	ldr	r2, [pc, #112]	@ (8010ae4 <_free_r+0x8c>)
 8010a72:	6813      	ldr	r3, [r2, #0]
 8010a74:	b933      	cbnz	r3, 8010a84 <_free_r+0x2c>
 8010a76:	6063      	str	r3, [r4, #4]
 8010a78:	6014      	str	r4, [r2, #0]
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a80:	f7fe bb60 	b.w	800f144 <__malloc_unlock>
 8010a84:	42a3      	cmp	r3, r4
 8010a86:	d908      	bls.n	8010a9a <_free_r+0x42>
 8010a88:	6820      	ldr	r0, [r4, #0]
 8010a8a:	1821      	adds	r1, r4, r0
 8010a8c:	428b      	cmp	r3, r1
 8010a8e:	bf01      	itttt	eq
 8010a90:	6819      	ldreq	r1, [r3, #0]
 8010a92:	685b      	ldreq	r3, [r3, #4]
 8010a94:	1809      	addeq	r1, r1, r0
 8010a96:	6021      	streq	r1, [r4, #0]
 8010a98:	e7ed      	b.n	8010a76 <_free_r+0x1e>
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	685b      	ldr	r3, [r3, #4]
 8010a9e:	b10b      	cbz	r3, 8010aa4 <_free_r+0x4c>
 8010aa0:	42a3      	cmp	r3, r4
 8010aa2:	d9fa      	bls.n	8010a9a <_free_r+0x42>
 8010aa4:	6811      	ldr	r1, [r2, #0]
 8010aa6:	1850      	adds	r0, r2, r1
 8010aa8:	42a0      	cmp	r0, r4
 8010aaa:	d10b      	bne.n	8010ac4 <_free_r+0x6c>
 8010aac:	6820      	ldr	r0, [r4, #0]
 8010aae:	4401      	add	r1, r0
 8010ab0:	1850      	adds	r0, r2, r1
 8010ab2:	4283      	cmp	r3, r0
 8010ab4:	6011      	str	r1, [r2, #0]
 8010ab6:	d1e0      	bne.n	8010a7a <_free_r+0x22>
 8010ab8:	6818      	ldr	r0, [r3, #0]
 8010aba:	685b      	ldr	r3, [r3, #4]
 8010abc:	4408      	add	r0, r1
 8010abe:	6010      	str	r0, [r2, #0]
 8010ac0:	6053      	str	r3, [r2, #4]
 8010ac2:	e7da      	b.n	8010a7a <_free_r+0x22>
 8010ac4:	d902      	bls.n	8010acc <_free_r+0x74>
 8010ac6:	230c      	movs	r3, #12
 8010ac8:	602b      	str	r3, [r5, #0]
 8010aca:	e7d6      	b.n	8010a7a <_free_r+0x22>
 8010acc:	6820      	ldr	r0, [r4, #0]
 8010ace:	1821      	adds	r1, r4, r0
 8010ad0:	428b      	cmp	r3, r1
 8010ad2:	bf01      	itttt	eq
 8010ad4:	6819      	ldreq	r1, [r3, #0]
 8010ad6:	685b      	ldreq	r3, [r3, #4]
 8010ad8:	1809      	addeq	r1, r1, r0
 8010ada:	6021      	streq	r1, [r4, #0]
 8010adc:	6063      	str	r3, [r4, #4]
 8010ade:	6054      	str	r4, [r2, #4]
 8010ae0:	e7cb      	b.n	8010a7a <_free_r+0x22>
 8010ae2:	bd38      	pop	{r3, r4, r5, pc}
 8010ae4:	20002a70 	.word	0x20002a70

08010ae8 <_Balloc>:
 8010ae8:	b570      	push	{r4, r5, r6, lr}
 8010aea:	69c6      	ldr	r6, [r0, #28]
 8010aec:	4604      	mov	r4, r0
 8010aee:	460d      	mov	r5, r1
 8010af0:	b976      	cbnz	r6, 8010b10 <_Balloc+0x28>
 8010af2:	2010      	movs	r0, #16
 8010af4:	f7fe fa76 	bl	800efe4 <malloc>
 8010af8:	4602      	mov	r2, r0
 8010afa:	61e0      	str	r0, [r4, #28]
 8010afc:	b920      	cbnz	r0, 8010b08 <_Balloc+0x20>
 8010afe:	216b      	movs	r1, #107	@ 0x6b
 8010b00:	4b17      	ldr	r3, [pc, #92]	@ (8010b60 <_Balloc+0x78>)
 8010b02:	4818      	ldr	r0, [pc, #96]	@ (8010b64 <_Balloc+0x7c>)
 8010b04:	f000 fd98 	bl	8011638 <__assert_func>
 8010b08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b0c:	6006      	str	r6, [r0, #0]
 8010b0e:	60c6      	str	r6, [r0, #12]
 8010b10:	69e6      	ldr	r6, [r4, #28]
 8010b12:	68f3      	ldr	r3, [r6, #12]
 8010b14:	b183      	cbz	r3, 8010b38 <_Balloc+0x50>
 8010b16:	69e3      	ldr	r3, [r4, #28]
 8010b18:	68db      	ldr	r3, [r3, #12]
 8010b1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010b1e:	b9b8      	cbnz	r0, 8010b50 <_Balloc+0x68>
 8010b20:	2101      	movs	r1, #1
 8010b22:	fa01 f605 	lsl.w	r6, r1, r5
 8010b26:	1d72      	adds	r2, r6, #5
 8010b28:	4620      	mov	r0, r4
 8010b2a:	0092      	lsls	r2, r2, #2
 8010b2c:	f000 fda2 	bl	8011674 <_calloc_r>
 8010b30:	b160      	cbz	r0, 8010b4c <_Balloc+0x64>
 8010b32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010b36:	e00e      	b.n	8010b56 <_Balloc+0x6e>
 8010b38:	2221      	movs	r2, #33	@ 0x21
 8010b3a:	2104      	movs	r1, #4
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	f000 fd99 	bl	8011674 <_calloc_r>
 8010b42:	69e3      	ldr	r3, [r4, #28]
 8010b44:	60f0      	str	r0, [r6, #12]
 8010b46:	68db      	ldr	r3, [r3, #12]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d1e4      	bne.n	8010b16 <_Balloc+0x2e>
 8010b4c:	2000      	movs	r0, #0
 8010b4e:	bd70      	pop	{r4, r5, r6, pc}
 8010b50:	6802      	ldr	r2, [r0, #0]
 8010b52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010b56:	2300      	movs	r3, #0
 8010b58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010b5c:	e7f7      	b.n	8010b4e <_Balloc+0x66>
 8010b5e:	bf00      	nop
 8010b60:	08012d3b 	.word	0x08012d3b
 8010b64:	08012dbb 	.word	0x08012dbb

08010b68 <_Bfree>:
 8010b68:	b570      	push	{r4, r5, r6, lr}
 8010b6a:	69c6      	ldr	r6, [r0, #28]
 8010b6c:	4605      	mov	r5, r0
 8010b6e:	460c      	mov	r4, r1
 8010b70:	b976      	cbnz	r6, 8010b90 <_Bfree+0x28>
 8010b72:	2010      	movs	r0, #16
 8010b74:	f7fe fa36 	bl	800efe4 <malloc>
 8010b78:	4602      	mov	r2, r0
 8010b7a:	61e8      	str	r0, [r5, #28]
 8010b7c:	b920      	cbnz	r0, 8010b88 <_Bfree+0x20>
 8010b7e:	218f      	movs	r1, #143	@ 0x8f
 8010b80:	4b08      	ldr	r3, [pc, #32]	@ (8010ba4 <_Bfree+0x3c>)
 8010b82:	4809      	ldr	r0, [pc, #36]	@ (8010ba8 <_Bfree+0x40>)
 8010b84:	f000 fd58 	bl	8011638 <__assert_func>
 8010b88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b8c:	6006      	str	r6, [r0, #0]
 8010b8e:	60c6      	str	r6, [r0, #12]
 8010b90:	b13c      	cbz	r4, 8010ba2 <_Bfree+0x3a>
 8010b92:	69eb      	ldr	r3, [r5, #28]
 8010b94:	6862      	ldr	r2, [r4, #4]
 8010b96:	68db      	ldr	r3, [r3, #12]
 8010b98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b9c:	6021      	str	r1, [r4, #0]
 8010b9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010ba2:	bd70      	pop	{r4, r5, r6, pc}
 8010ba4:	08012d3b 	.word	0x08012d3b
 8010ba8:	08012dbb 	.word	0x08012dbb

08010bac <__multadd>:
 8010bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bb0:	4607      	mov	r7, r0
 8010bb2:	460c      	mov	r4, r1
 8010bb4:	461e      	mov	r6, r3
 8010bb6:	2000      	movs	r0, #0
 8010bb8:	690d      	ldr	r5, [r1, #16]
 8010bba:	f101 0c14 	add.w	ip, r1, #20
 8010bbe:	f8dc 3000 	ldr.w	r3, [ip]
 8010bc2:	3001      	adds	r0, #1
 8010bc4:	b299      	uxth	r1, r3
 8010bc6:	fb02 6101 	mla	r1, r2, r1, r6
 8010bca:	0c1e      	lsrs	r6, r3, #16
 8010bcc:	0c0b      	lsrs	r3, r1, #16
 8010bce:	fb02 3306 	mla	r3, r2, r6, r3
 8010bd2:	b289      	uxth	r1, r1
 8010bd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010bd8:	4285      	cmp	r5, r0
 8010bda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010bde:	f84c 1b04 	str.w	r1, [ip], #4
 8010be2:	dcec      	bgt.n	8010bbe <__multadd+0x12>
 8010be4:	b30e      	cbz	r6, 8010c2a <__multadd+0x7e>
 8010be6:	68a3      	ldr	r3, [r4, #8]
 8010be8:	42ab      	cmp	r3, r5
 8010bea:	dc19      	bgt.n	8010c20 <__multadd+0x74>
 8010bec:	6861      	ldr	r1, [r4, #4]
 8010bee:	4638      	mov	r0, r7
 8010bf0:	3101      	adds	r1, #1
 8010bf2:	f7ff ff79 	bl	8010ae8 <_Balloc>
 8010bf6:	4680      	mov	r8, r0
 8010bf8:	b928      	cbnz	r0, 8010c06 <__multadd+0x5a>
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	21ba      	movs	r1, #186	@ 0xba
 8010bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8010c30 <__multadd+0x84>)
 8010c00:	480c      	ldr	r0, [pc, #48]	@ (8010c34 <__multadd+0x88>)
 8010c02:	f000 fd19 	bl	8011638 <__assert_func>
 8010c06:	6922      	ldr	r2, [r4, #16]
 8010c08:	f104 010c 	add.w	r1, r4, #12
 8010c0c:	3202      	adds	r2, #2
 8010c0e:	0092      	lsls	r2, r2, #2
 8010c10:	300c      	adds	r0, #12
 8010c12:	f000 fd03 	bl	801161c <memcpy>
 8010c16:	4621      	mov	r1, r4
 8010c18:	4638      	mov	r0, r7
 8010c1a:	f7ff ffa5 	bl	8010b68 <_Bfree>
 8010c1e:	4644      	mov	r4, r8
 8010c20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010c24:	3501      	adds	r5, #1
 8010c26:	615e      	str	r6, [r3, #20]
 8010c28:	6125      	str	r5, [r4, #16]
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c30:	08012daa 	.word	0x08012daa
 8010c34:	08012dbb 	.word	0x08012dbb

08010c38 <__hi0bits>:
 8010c38:	4603      	mov	r3, r0
 8010c3a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010c3e:	bf3a      	itte	cc
 8010c40:	0403      	lslcc	r3, r0, #16
 8010c42:	2010      	movcc	r0, #16
 8010c44:	2000      	movcs	r0, #0
 8010c46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010c4a:	bf3c      	itt	cc
 8010c4c:	021b      	lslcc	r3, r3, #8
 8010c4e:	3008      	addcc	r0, #8
 8010c50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010c54:	bf3c      	itt	cc
 8010c56:	011b      	lslcc	r3, r3, #4
 8010c58:	3004      	addcc	r0, #4
 8010c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c5e:	bf3c      	itt	cc
 8010c60:	009b      	lslcc	r3, r3, #2
 8010c62:	3002      	addcc	r0, #2
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	db05      	blt.n	8010c74 <__hi0bits+0x3c>
 8010c68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010c6c:	f100 0001 	add.w	r0, r0, #1
 8010c70:	bf08      	it	eq
 8010c72:	2020      	moveq	r0, #32
 8010c74:	4770      	bx	lr

08010c76 <__lo0bits>:
 8010c76:	6803      	ldr	r3, [r0, #0]
 8010c78:	4602      	mov	r2, r0
 8010c7a:	f013 0007 	ands.w	r0, r3, #7
 8010c7e:	d00b      	beq.n	8010c98 <__lo0bits+0x22>
 8010c80:	07d9      	lsls	r1, r3, #31
 8010c82:	d421      	bmi.n	8010cc8 <__lo0bits+0x52>
 8010c84:	0798      	lsls	r0, r3, #30
 8010c86:	bf49      	itett	mi
 8010c88:	085b      	lsrmi	r3, r3, #1
 8010c8a:	089b      	lsrpl	r3, r3, #2
 8010c8c:	2001      	movmi	r0, #1
 8010c8e:	6013      	strmi	r3, [r2, #0]
 8010c90:	bf5c      	itt	pl
 8010c92:	2002      	movpl	r0, #2
 8010c94:	6013      	strpl	r3, [r2, #0]
 8010c96:	4770      	bx	lr
 8010c98:	b299      	uxth	r1, r3
 8010c9a:	b909      	cbnz	r1, 8010ca0 <__lo0bits+0x2a>
 8010c9c:	2010      	movs	r0, #16
 8010c9e:	0c1b      	lsrs	r3, r3, #16
 8010ca0:	b2d9      	uxtb	r1, r3
 8010ca2:	b909      	cbnz	r1, 8010ca8 <__lo0bits+0x32>
 8010ca4:	3008      	adds	r0, #8
 8010ca6:	0a1b      	lsrs	r3, r3, #8
 8010ca8:	0719      	lsls	r1, r3, #28
 8010caa:	bf04      	itt	eq
 8010cac:	091b      	lsreq	r3, r3, #4
 8010cae:	3004      	addeq	r0, #4
 8010cb0:	0799      	lsls	r1, r3, #30
 8010cb2:	bf04      	itt	eq
 8010cb4:	089b      	lsreq	r3, r3, #2
 8010cb6:	3002      	addeq	r0, #2
 8010cb8:	07d9      	lsls	r1, r3, #31
 8010cba:	d403      	bmi.n	8010cc4 <__lo0bits+0x4e>
 8010cbc:	085b      	lsrs	r3, r3, #1
 8010cbe:	f100 0001 	add.w	r0, r0, #1
 8010cc2:	d003      	beq.n	8010ccc <__lo0bits+0x56>
 8010cc4:	6013      	str	r3, [r2, #0]
 8010cc6:	4770      	bx	lr
 8010cc8:	2000      	movs	r0, #0
 8010cca:	4770      	bx	lr
 8010ccc:	2020      	movs	r0, #32
 8010cce:	4770      	bx	lr

08010cd0 <__i2b>:
 8010cd0:	b510      	push	{r4, lr}
 8010cd2:	460c      	mov	r4, r1
 8010cd4:	2101      	movs	r1, #1
 8010cd6:	f7ff ff07 	bl	8010ae8 <_Balloc>
 8010cda:	4602      	mov	r2, r0
 8010cdc:	b928      	cbnz	r0, 8010cea <__i2b+0x1a>
 8010cde:	f240 1145 	movw	r1, #325	@ 0x145
 8010ce2:	4b04      	ldr	r3, [pc, #16]	@ (8010cf4 <__i2b+0x24>)
 8010ce4:	4804      	ldr	r0, [pc, #16]	@ (8010cf8 <__i2b+0x28>)
 8010ce6:	f000 fca7 	bl	8011638 <__assert_func>
 8010cea:	2301      	movs	r3, #1
 8010cec:	6144      	str	r4, [r0, #20]
 8010cee:	6103      	str	r3, [r0, #16]
 8010cf0:	bd10      	pop	{r4, pc}
 8010cf2:	bf00      	nop
 8010cf4:	08012daa 	.word	0x08012daa
 8010cf8:	08012dbb 	.word	0x08012dbb

08010cfc <__multiply>:
 8010cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d00:	4614      	mov	r4, r2
 8010d02:	690a      	ldr	r2, [r1, #16]
 8010d04:	6923      	ldr	r3, [r4, #16]
 8010d06:	460f      	mov	r7, r1
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	bfa2      	ittt	ge
 8010d0c:	4623      	movge	r3, r4
 8010d0e:	460c      	movge	r4, r1
 8010d10:	461f      	movge	r7, r3
 8010d12:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010d16:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010d1a:	68a3      	ldr	r3, [r4, #8]
 8010d1c:	6861      	ldr	r1, [r4, #4]
 8010d1e:	eb0a 0609 	add.w	r6, sl, r9
 8010d22:	42b3      	cmp	r3, r6
 8010d24:	b085      	sub	sp, #20
 8010d26:	bfb8      	it	lt
 8010d28:	3101      	addlt	r1, #1
 8010d2a:	f7ff fedd 	bl	8010ae8 <_Balloc>
 8010d2e:	b930      	cbnz	r0, 8010d3e <__multiply+0x42>
 8010d30:	4602      	mov	r2, r0
 8010d32:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010d36:	4b43      	ldr	r3, [pc, #268]	@ (8010e44 <__multiply+0x148>)
 8010d38:	4843      	ldr	r0, [pc, #268]	@ (8010e48 <__multiply+0x14c>)
 8010d3a:	f000 fc7d 	bl	8011638 <__assert_func>
 8010d3e:	f100 0514 	add.w	r5, r0, #20
 8010d42:	462b      	mov	r3, r5
 8010d44:	2200      	movs	r2, #0
 8010d46:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010d4a:	4543      	cmp	r3, r8
 8010d4c:	d321      	bcc.n	8010d92 <__multiply+0x96>
 8010d4e:	f107 0114 	add.w	r1, r7, #20
 8010d52:	f104 0214 	add.w	r2, r4, #20
 8010d56:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010d5a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010d5e:	9302      	str	r3, [sp, #8]
 8010d60:	1b13      	subs	r3, r2, r4
 8010d62:	3b15      	subs	r3, #21
 8010d64:	f023 0303 	bic.w	r3, r3, #3
 8010d68:	3304      	adds	r3, #4
 8010d6a:	f104 0715 	add.w	r7, r4, #21
 8010d6e:	42ba      	cmp	r2, r7
 8010d70:	bf38      	it	cc
 8010d72:	2304      	movcc	r3, #4
 8010d74:	9301      	str	r3, [sp, #4]
 8010d76:	9b02      	ldr	r3, [sp, #8]
 8010d78:	9103      	str	r1, [sp, #12]
 8010d7a:	428b      	cmp	r3, r1
 8010d7c:	d80c      	bhi.n	8010d98 <__multiply+0x9c>
 8010d7e:	2e00      	cmp	r6, #0
 8010d80:	dd03      	ble.n	8010d8a <__multiply+0x8e>
 8010d82:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d05a      	beq.n	8010e40 <__multiply+0x144>
 8010d8a:	6106      	str	r6, [r0, #16]
 8010d8c:	b005      	add	sp, #20
 8010d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d92:	f843 2b04 	str.w	r2, [r3], #4
 8010d96:	e7d8      	b.n	8010d4a <__multiply+0x4e>
 8010d98:	f8b1 a000 	ldrh.w	sl, [r1]
 8010d9c:	f1ba 0f00 	cmp.w	sl, #0
 8010da0:	d023      	beq.n	8010dea <__multiply+0xee>
 8010da2:	46a9      	mov	r9, r5
 8010da4:	f04f 0c00 	mov.w	ip, #0
 8010da8:	f104 0e14 	add.w	lr, r4, #20
 8010dac:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010db0:	f8d9 3000 	ldr.w	r3, [r9]
 8010db4:	fa1f fb87 	uxth.w	fp, r7
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	fb0a 330b 	mla	r3, sl, fp, r3
 8010dbe:	4463      	add	r3, ip
 8010dc0:	f8d9 c000 	ldr.w	ip, [r9]
 8010dc4:	0c3f      	lsrs	r7, r7, #16
 8010dc6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8010dca:	fb0a c707 	mla	r7, sl, r7, ip
 8010dce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010dd2:	b29b      	uxth	r3, r3
 8010dd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010dd8:	4572      	cmp	r2, lr
 8010dda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010dde:	f849 3b04 	str.w	r3, [r9], #4
 8010de2:	d8e3      	bhi.n	8010dac <__multiply+0xb0>
 8010de4:	9b01      	ldr	r3, [sp, #4]
 8010de6:	f845 c003 	str.w	ip, [r5, r3]
 8010dea:	9b03      	ldr	r3, [sp, #12]
 8010dec:	3104      	adds	r1, #4
 8010dee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010df2:	f1b9 0f00 	cmp.w	r9, #0
 8010df6:	d021      	beq.n	8010e3c <__multiply+0x140>
 8010df8:	46ae      	mov	lr, r5
 8010dfa:	f04f 0a00 	mov.w	sl, #0
 8010dfe:	682b      	ldr	r3, [r5, #0]
 8010e00:	f104 0c14 	add.w	ip, r4, #20
 8010e04:	f8bc b000 	ldrh.w	fp, [ip]
 8010e08:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	fb09 770b 	mla	r7, r9, fp, r7
 8010e12:	4457      	add	r7, sl
 8010e14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010e18:	f84e 3b04 	str.w	r3, [lr], #4
 8010e1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010e20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010e24:	f8be 3000 	ldrh.w	r3, [lr]
 8010e28:	4562      	cmp	r2, ip
 8010e2a:	fb09 330a 	mla	r3, r9, sl, r3
 8010e2e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010e32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010e36:	d8e5      	bhi.n	8010e04 <__multiply+0x108>
 8010e38:	9f01      	ldr	r7, [sp, #4]
 8010e3a:	51eb      	str	r3, [r5, r7]
 8010e3c:	3504      	adds	r5, #4
 8010e3e:	e79a      	b.n	8010d76 <__multiply+0x7a>
 8010e40:	3e01      	subs	r6, #1
 8010e42:	e79c      	b.n	8010d7e <__multiply+0x82>
 8010e44:	08012daa 	.word	0x08012daa
 8010e48:	08012dbb 	.word	0x08012dbb

08010e4c <__pow5mult>:
 8010e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e50:	4615      	mov	r5, r2
 8010e52:	f012 0203 	ands.w	r2, r2, #3
 8010e56:	4607      	mov	r7, r0
 8010e58:	460e      	mov	r6, r1
 8010e5a:	d007      	beq.n	8010e6c <__pow5mult+0x20>
 8010e5c:	4c25      	ldr	r4, [pc, #148]	@ (8010ef4 <__pow5mult+0xa8>)
 8010e5e:	3a01      	subs	r2, #1
 8010e60:	2300      	movs	r3, #0
 8010e62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e66:	f7ff fea1 	bl	8010bac <__multadd>
 8010e6a:	4606      	mov	r6, r0
 8010e6c:	10ad      	asrs	r5, r5, #2
 8010e6e:	d03d      	beq.n	8010eec <__pow5mult+0xa0>
 8010e70:	69fc      	ldr	r4, [r7, #28]
 8010e72:	b97c      	cbnz	r4, 8010e94 <__pow5mult+0x48>
 8010e74:	2010      	movs	r0, #16
 8010e76:	f7fe f8b5 	bl	800efe4 <malloc>
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	61f8      	str	r0, [r7, #28]
 8010e7e:	b928      	cbnz	r0, 8010e8c <__pow5mult+0x40>
 8010e80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010e84:	4b1c      	ldr	r3, [pc, #112]	@ (8010ef8 <__pow5mult+0xac>)
 8010e86:	481d      	ldr	r0, [pc, #116]	@ (8010efc <__pow5mult+0xb0>)
 8010e88:	f000 fbd6 	bl	8011638 <__assert_func>
 8010e8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e90:	6004      	str	r4, [r0, #0]
 8010e92:	60c4      	str	r4, [r0, #12]
 8010e94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010e98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e9c:	b94c      	cbnz	r4, 8010eb2 <__pow5mult+0x66>
 8010e9e:	f240 2171 	movw	r1, #625	@ 0x271
 8010ea2:	4638      	mov	r0, r7
 8010ea4:	f7ff ff14 	bl	8010cd0 <__i2b>
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	4604      	mov	r4, r0
 8010eac:	f8c8 0008 	str.w	r0, [r8, #8]
 8010eb0:	6003      	str	r3, [r0, #0]
 8010eb2:	f04f 0900 	mov.w	r9, #0
 8010eb6:	07eb      	lsls	r3, r5, #31
 8010eb8:	d50a      	bpl.n	8010ed0 <__pow5mult+0x84>
 8010eba:	4631      	mov	r1, r6
 8010ebc:	4622      	mov	r2, r4
 8010ebe:	4638      	mov	r0, r7
 8010ec0:	f7ff ff1c 	bl	8010cfc <__multiply>
 8010ec4:	4680      	mov	r8, r0
 8010ec6:	4631      	mov	r1, r6
 8010ec8:	4638      	mov	r0, r7
 8010eca:	f7ff fe4d 	bl	8010b68 <_Bfree>
 8010ece:	4646      	mov	r6, r8
 8010ed0:	106d      	asrs	r5, r5, #1
 8010ed2:	d00b      	beq.n	8010eec <__pow5mult+0xa0>
 8010ed4:	6820      	ldr	r0, [r4, #0]
 8010ed6:	b938      	cbnz	r0, 8010ee8 <__pow5mult+0x9c>
 8010ed8:	4622      	mov	r2, r4
 8010eda:	4621      	mov	r1, r4
 8010edc:	4638      	mov	r0, r7
 8010ede:	f7ff ff0d 	bl	8010cfc <__multiply>
 8010ee2:	6020      	str	r0, [r4, #0]
 8010ee4:	f8c0 9000 	str.w	r9, [r0]
 8010ee8:	4604      	mov	r4, r0
 8010eea:	e7e4      	b.n	8010eb6 <__pow5mult+0x6a>
 8010eec:	4630      	mov	r0, r6
 8010eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ef2:	bf00      	nop
 8010ef4:	08012e14 	.word	0x08012e14
 8010ef8:	08012d3b 	.word	0x08012d3b
 8010efc:	08012dbb 	.word	0x08012dbb

08010f00 <__lshift>:
 8010f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f04:	460c      	mov	r4, r1
 8010f06:	4607      	mov	r7, r0
 8010f08:	4691      	mov	r9, r2
 8010f0a:	6923      	ldr	r3, [r4, #16]
 8010f0c:	6849      	ldr	r1, [r1, #4]
 8010f0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010f12:	68a3      	ldr	r3, [r4, #8]
 8010f14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010f18:	f108 0601 	add.w	r6, r8, #1
 8010f1c:	42b3      	cmp	r3, r6
 8010f1e:	db0b      	blt.n	8010f38 <__lshift+0x38>
 8010f20:	4638      	mov	r0, r7
 8010f22:	f7ff fde1 	bl	8010ae8 <_Balloc>
 8010f26:	4605      	mov	r5, r0
 8010f28:	b948      	cbnz	r0, 8010f3e <__lshift+0x3e>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010f30:	4b27      	ldr	r3, [pc, #156]	@ (8010fd0 <__lshift+0xd0>)
 8010f32:	4828      	ldr	r0, [pc, #160]	@ (8010fd4 <__lshift+0xd4>)
 8010f34:	f000 fb80 	bl	8011638 <__assert_func>
 8010f38:	3101      	adds	r1, #1
 8010f3a:	005b      	lsls	r3, r3, #1
 8010f3c:	e7ee      	b.n	8010f1c <__lshift+0x1c>
 8010f3e:	2300      	movs	r3, #0
 8010f40:	f100 0114 	add.w	r1, r0, #20
 8010f44:	f100 0210 	add.w	r2, r0, #16
 8010f48:	4618      	mov	r0, r3
 8010f4a:	4553      	cmp	r3, sl
 8010f4c:	db33      	blt.n	8010fb6 <__lshift+0xb6>
 8010f4e:	6920      	ldr	r0, [r4, #16]
 8010f50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010f54:	f104 0314 	add.w	r3, r4, #20
 8010f58:	f019 091f 	ands.w	r9, r9, #31
 8010f5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010f60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010f64:	d02b      	beq.n	8010fbe <__lshift+0xbe>
 8010f66:	468a      	mov	sl, r1
 8010f68:	2200      	movs	r2, #0
 8010f6a:	f1c9 0e20 	rsb	lr, r9, #32
 8010f6e:	6818      	ldr	r0, [r3, #0]
 8010f70:	fa00 f009 	lsl.w	r0, r0, r9
 8010f74:	4310      	orrs	r0, r2
 8010f76:	f84a 0b04 	str.w	r0, [sl], #4
 8010f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f7e:	459c      	cmp	ip, r3
 8010f80:	fa22 f20e 	lsr.w	r2, r2, lr
 8010f84:	d8f3      	bhi.n	8010f6e <__lshift+0x6e>
 8010f86:	ebac 0304 	sub.w	r3, ip, r4
 8010f8a:	3b15      	subs	r3, #21
 8010f8c:	f023 0303 	bic.w	r3, r3, #3
 8010f90:	3304      	adds	r3, #4
 8010f92:	f104 0015 	add.w	r0, r4, #21
 8010f96:	4584      	cmp	ip, r0
 8010f98:	bf38      	it	cc
 8010f9a:	2304      	movcc	r3, #4
 8010f9c:	50ca      	str	r2, [r1, r3]
 8010f9e:	b10a      	cbz	r2, 8010fa4 <__lshift+0xa4>
 8010fa0:	f108 0602 	add.w	r6, r8, #2
 8010fa4:	3e01      	subs	r6, #1
 8010fa6:	4638      	mov	r0, r7
 8010fa8:	4621      	mov	r1, r4
 8010faa:	612e      	str	r6, [r5, #16]
 8010fac:	f7ff fddc 	bl	8010b68 <_Bfree>
 8010fb0:	4628      	mov	r0, r5
 8010fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8010fba:	3301      	adds	r3, #1
 8010fbc:	e7c5      	b.n	8010f4a <__lshift+0x4a>
 8010fbe:	3904      	subs	r1, #4
 8010fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fc4:	459c      	cmp	ip, r3
 8010fc6:	f841 2f04 	str.w	r2, [r1, #4]!
 8010fca:	d8f9      	bhi.n	8010fc0 <__lshift+0xc0>
 8010fcc:	e7ea      	b.n	8010fa4 <__lshift+0xa4>
 8010fce:	bf00      	nop
 8010fd0:	08012daa 	.word	0x08012daa
 8010fd4:	08012dbb 	.word	0x08012dbb

08010fd8 <__mcmp>:
 8010fd8:	4603      	mov	r3, r0
 8010fda:	690a      	ldr	r2, [r1, #16]
 8010fdc:	6900      	ldr	r0, [r0, #16]
 8010fde:	b530      	push	{r4, r5, lr}
 8010fe0:	1a80      	subs	r0, r0, r2
 8010fe2:	d10e      	bne.n	8011002 <__mcmp+0x2a>
 8010fe4:	3314      	adds	r3, #20
 8010fe6:	3114      	adds	r1, #20
 8010fe8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010fec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010ff0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010ff4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010ff8:	4295      	cmp	r5, r2
 8010ffa:	d003      	beq.n	8011004 <__mcmp+0x2c>
 8010ffc:	d205      	bcs.n	801100a <__mcmp+0x32>
 8010ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8011002:	bd30      	pop	{r4, r5, pc}
 8011004:	42a3      	cmp	r3, r4
 8011006:	d3f3      	bcc.n	8010ff0 <__mcmp+0x18>
 8011008:	e7fb      	b.n	8011002 <__mcmp+0x2a>
 801100a:	2001      	movs	r0, #1
 801100c:	e7f9      	b.n	8011002 <__mcmp+0x2a>
	...

08011010 <__mdiff>:
 8011010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011014:	4689      	mov	r9, r1
 8011016:	4606      	mov	r6, r0
 8011018:	4611      	mov	r1, r2
 801101a:	4648      	mov	r0, r9
 801101c:	4614      	mov	r4, r2
 801101e:	f7ff ffdb 	bl	8010fd8 <__mcmp>
 8011022:	1e05      	subs	r5, r0, #0
 8011024:	d112      	bne.n	801104c <__mdiff+0x3c>
 8011026:	4629      	mov	r1, r5
 8011028:	4630      	mov	r0, r6
 801102a:	f7ff fd5d 	bl	8010ae8 <_Balloc>
 801102e:	4602      	mov	r2, r0
 8011030:	b928      	cbnz	r0, 801103e <__mdiff+0x2e>
 8011032:	f240 2137 	movw	r1, #567	@ 0x237
 8011036:	4b3e      	ldr	r3, [pc, #248]	@ (8011130 <__mdiff+0x120>)
 8011038:	483e      	ldr	r0, [pc, #248]	@ (8011134 <__mdiff+0x124>)
 801103a:	f000 fafd 	bl	8011638 <__assert_func>
 801103e:	2301      	movs	r3, #1
 8011040:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011044:	4610      	mov	r0, r2
 8011046:	b003      	add	sp, #12
 8011048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801104c:	bfbc      	itt	lt
 801104e:	464b      	movlt	r3, r9
 8011050:	46a1      	movlt	r9, r4
 8011052:	4630      	mov	r0, r6
 8011054:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011058:	bfba      	itte	lt
 801105a:	461c      	movlt	r4, r3
 801105c:	2501      	movlt	r5, #1
 801105e:	2500      	movge	r5, #0
 8011060:	f7ff fd42 	bl	8010ae8 <_Balloc>
 8011064:	4602      	mov	r2, r0
 8011066:	b918      	cbnz	r0, 8011070 <__mdiff+0x60>
 8011068:	f240 2145 	movw	r1, #581	@ 0x245
 801106c:	4b30      	ldr	r3, [pc, #192]	@ (8011130 <__mdiff+0x120>)
 801106e:	e7e3      	b.n	8011038 <__mdiff+0x28>
 8011070:	f100 0b14 	add.w	fp, r0, #20
 8011074:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011078:	f109 0310 	add.w	r3, r9, #16
 801107c:	60c5      	str	r5, [r0, #12]
 801107e:	f04f 0c00 	mov.w	ip, #0
 8011082:	f109 0514 	add.w	r5, r9, #20
 8011086:	46d9      	mov	r9, fp
 8011088:	6926      	ldr	r6, [r4, #16]
 801108a:	f104 0e14 	add.w	lr, r4, #20
 801108e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011092:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011096:	9301      	str	r3, [sp, #4]
 8011098:	9b01      	ldr	r3, [sp, #4]
 801109a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801109e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80110a2:	b281      	uxth	r1, r0
 80110a4:	9301      	str	r3, [sp, #4]
 80110a6:	fa1f f38a 	uxth.w	r3, sl
 80110aa:	1a5b      	subs	r3, r3, r1
 80110ac:	0c00      	lsrs	r0, r0, #16
 80110ae:	4463      	add	r3, ip
 80110b0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80110b4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80110be:	4576      	cmp	r6, lr
 80110c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80110c4:	f849 3b04 	str.w	r3, [r9], #4
 80110c8:	d8e6      	bhi.n	8011098 <__mdiff+0x88>
 80110ca:	1b33      	subs	r3, r6, r4
 80110cc:	3b15      	subs	r3, #21
 80110ce:	f023 0303 	bic.w	r3, r3, #3
 80110d2:	3415      	adds	r4, #21
 80110d4:	3304      	adds	r3, #4
 80110d6:	42a6      	cmp	r6, r4
 80110d8:	bf38      	it	cc
 80110da:	2304      	movcc	r3, #4
 80110dc:	441d      	add	r5, r3
 80110de:	445b      	add	r3, fp
 80110e0:	461e      	mov	r6, r3
 80110e2:	462c      	mov	r4, r5
 80110e4:	4544      	cmp	r4, r8
 80110e6:	d30e      	bcc.n	8011106 <__mdiff+0xf6>
 80110e8:	f108 0103 	add.w	r1, r8, #3
 80110ec:	1b49      	subs	r1, r1, r5
 80110ee:	f021 0103 	bic.w	r1, r1, #3
 80110f2:	3d03      	subs	r5, #3
 80110f4:	45a8      	cmp	r8, r5
 80110f6:	bf38      	it	cc
 80110f8:	2100      	movcc	r1, #0
 80110fa:	440b      	add	r3, r1
 80110fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011100:	b199      	cbz	r1, 801112a <__mdiff+0x11a>
 8011102:	6117      	str	r7, [r2, #16]
 8011104:	e79e      	b.n	8011044 <__mdiff+0x34>
 8011106:	46e6      	mov	lr, ip
 8011108:	f854 1b04 	ldr.w	r1, [r4], #4
 801110c:	fa1f fc81 	uxth.w	ip, r1
 8011110:	44f4      	add	ip, lr
 8011112:	0c08      	lsrs	r0, r1, #16
 8011114:	4471      	add	r1, lr
 8011116:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801111a:	b289      	uxth	r1, r1
 801111c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011120:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011124:	f846 1b04 	str.w	r1, [r6], #4
 8011128:	e7dc      	b.n	80110e4 <__mdiff+0xd4>
 801112a:	3f01      	subs	r7, #1
 801112c:	e7e6      	b.n	80110fc <__mdiff+0xec>
 801112e:	bf00      	nop
 8011130:	08012daa 	.word	0x08012daa
 8011134:	08012dbb 	.word	0x08012dbb

08011138 <__d2b>:
 8011138:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 801113c:	2101      	movs	r1, #1
 801113e:	4690      	mov	r8, r2
 8011140:	4699      	mov	r9, r3
 8011142:	9e08      	ldr	r6, [sp, #32]
 8011144:	f7ff fcd0 	bl	8010ae8 <_Balloc>
 8011148:	4604      	mov	r4, r0
 801114a:	b930      	cbnz	r0, 801115a <__d2b+0x22>
 801114c:	4602      	mov	r2, r0
 801114e:	f240 310f 	movw	r1, #783	@ 0x30f
 8011152:	4b23      	ldr	r3, [pc, #140]	@ (80111e0 <__d2b+0xa8>)
 8011154:	4823      	ldr	r0, [pc, #140]	@ (80111e4 <__d2b+0xac>)
 8011156:	f000 fa6f 	bl	8011638 <__assert_func>
 801115a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801115e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011162:	b10d      	cbz	r5, 8011168 <__d2b+0x30>
 8011164:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011168:	9301      	str	r3, [sp, #4]
 801116a:	f1b8 0300 	subs.w	r3, r8, #0
 801116e:	d024      	beq.n	80111ba <__d2b+0x82>
 8011170:	4668      	mov	r0, sp
 8011172:	9300      	str	r3, [sp, #0]
 8011174:	f7ff fd7f 	bl	8010c76 <__lo0bits>
 8011178:	e9dd 1200 	ldrd	r1, r2, [sp]
 801117c:	b1d8      	cbz	r0, 80111b6 <__d2b+0x7e>
 801117e:	f1c0 0320 	rsb	r3, r0, #32
 8011182:	fa02 f303 	lsl.w	r3, r2, r3
 8011186:	430b      	orrs	r3, r1
 8011188:	40c2      	lsrs	r2, r0
 801118a:	6163      	str	r3, [r4, #20]
 801118c:	9201      	str	r2, [sp, #4]
 801118e:	9b01      	ldr	r3, [sp, #4]
 8011190:	2b00      	cmp	r3, #0
 8011192:	bf0c      	ite	eq
 8011194:	2201      	moveq	r2, #1
 8011196:	2202      	movne	r2, #2
 8011198:	61a3      	str	r3, [r4, #24]
 801119a:	6122      	str	r2, [r4, #16]
 801119c:	b1ad      	cbz	r5, 80111ca <__d2b+0x92>
 801119e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80111a2:	4405      	add	r5, r0
 80111a4:	6035      	str	r5, [r6, #0]
 80111a6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80111aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111ac:	6018      	str	r0, [r3, #0]
 80111ae:	4620      	mov	r0, r4
 80111b0:	b002      	add	sp, #8
 80111b2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80111b6:	6161      	str	r1, [r4, #20]
 80111b8:	e7e9      	b.n	801118e <__d2b+0x56>
 80111ba:	a801      	add	r0, sp, #4
 80111bc:	f7ff fd5b 	bl	8010c76 <__lo0bits>
 80111c0:	9b01      	ldr	r3, [sp, #4]
 80111c2:	2201      	movs	r2, #1
 80111c4:	6163      	str	r3, [r4, #20]
 80111c6:	3020      	adds	r0, #32
 80111c8:	e7e7      	b.n	801119a <__d2b+0x62>
 80111ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80111ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80111d2:	6030      	str	r0, [r6, #0]
 80111d4:	6918      	ldr	r0, [r3, #16]
 80111d6:	f7ff fd2f 	bl	8010c38 <__hi0bits>
 80111da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80111de:	e7e4      	b.n	80111aa <__d2b+0x72>
 80111e0:	08012daa 	.word	0x08012daa
 80111e4:	08012dbb 	.word	0x08012dbb

080111e8 <__ssputs_r>:
 80111e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111ec:	461f      	mov	r7, r3
 80111ee:	688e      	ldr	r6, [r1, #8]
 80111f0:	4682      	mov	sl, r0
 80111f2:	42be      	cmp	r6, r7
 80111f4:	460c      	mov	r4, r1
 80111f6:	4690      	mov	r8, r2
 80111f8:	680b      	ldr	r3, [r1, #0]
 80111fa:	d82d      	bhi.n	8011258 <__ssputs_r+0x70>
 80111fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011200:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011204:	d026      	beq.n	8011254 <__ssputs_r+0x6c>
 8011206:	6965      	ldr	r5, [r4, #20]
 8011208:	6909      	ldr	r1, [r1, #16]
 801120a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801120e:	eba3 0901 	sub.w	r9, r3, r1
 8011212:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011216:	1c7b      	adds	r3, r7, #1
 8011218:	444b      	add	r3, r9
 801121a:	106d      	asrs	r5, r5, #1
 801121c:	429d      	cmp	r5, r3
 801121e:	bf38      	it	cc
 8011220:	461d      	movcc	r5, r3
 8011222:	0553      	lsls	r3, r2, #21
 8011224:	d527      	bpl.n	8011276 <__ssputs_r+0x8e>
 8011226:	4629      	mov	r1, r5
 8011228:	f7fd ff06 	bl	800f038 <_malloc_r>
 801122c:	4606      	mov	r6, r0
 801122e:	b360      	cbz	r0, 801128a <__ssputs_r+0xa2>
 8011230:	464a      	mov	r2, r9
 8011232:	6921      	ldr	r1, [r4, #16]
 8011234:	f000 f9f2 	bl	801161c <memcpy>
 8011238:	89a3      	ldrh	r3, [r4, #12]
 801123a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801123e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011242:	81a3      	strh	r3, [r4, #12]
 8011244:	6126      	str	r6, [r4, #16]
 8011246:	444e      	add	r6, r9
 8011248:	6026      	str	r6, [r4, #0]
 801124a:	463e      	mov	r6, r7
 801124c:	6165      	str	r5, [r4, #20]
 801124e:	eba5 0509 	sub.w	r5, r5, r9
 8011252:	60a5      	str	r5, [r4, #8]
 8011254:	42be      	cmp	r6, r7
 8011256:	d900      	bls.n	801125a <__ssputs_r+0x72>
 8011258:	463e      	mov	r6, r7
 801125a:	4632      	mov	r2, r6
 801125c:	4641      	mov	r1, r8
 801125e:	6820      	ldr	r0, [r4, #0]
 8011260:	f000 f9c2 	bl	80115e8 <memmove>
 8011264:	2000      	movs	r0, #0
 8011266:	68a3      	ldr	r3, [r4, #8]
 8011268:	1b9b      	subs	r3, r3, r6
 801126a:	60a3      	str	r3, [r4, #8]
 801126c:	6823      	ldr	r3, [r4, #0]
 801126e:	4433      	add	r3, r6
 8011270:	6023      	str	r3, [r4, #0]
 8011272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011276:	462a      	mov	r2, r5
 8011278:	f000 fa22 	bl	80116c0 <_realloc_r>
 801127c:	4606      	mov	r6, r0
 801127e:	2800      	cmp	r0, #0
 8011280:	d1e0      	bne.n	8011244 <__ssputs_r+0x5c>
 8011282:	4650      	mov	r0, sl
 8011284:	6921      	ldr	r1, [r4, #16]
 8011286:	f7ff fbe7 	bl	8010a58 <_free_r>
 801128a:	230c      	movs	r3, #12
 801128c:	f8ca 3000 	str.w	r3, [sl]
 8011290:	89a3      	ldrh	r3, [r4, #12]
 8011292:	f04f 30ff 	mov.w	r0, #4294967295
 8011296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801129a:	81a3      	strh	r3, [r4, #12]
 801129c:	e7e9      	b.n	8011272 <__ssputs_r+0x8a>
	...

080112a0 <_svfiprintf_r>:
 80112a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a4:	4698      	mov	r8, r3
 80112a6:	898b      	ldrh	r3, [r1, #12]
 80112a8:	4607      	mov	r7, r0
 80112aa:	061b      	lsls	r3, r3, #24
 80112ac:	460d      	mov	r5, r1
 80112ae:	4614      	mov	r4, r2
 80112b0:	b09d      	sub	sp, #116	@ 0x74
 80112b2:	d510      	bpl.n	80112d6 <_svfiprintf_r+0x36>
 80112b4:	690b      	ldr	r3, [r1, #16]
 80112b6:	b973      	cbnz	r3, 80112d6 <_svfiprintf_r+0x36>
 80112b8:	2140      	movs	r1, #64	@ 0x40
 80112ba:	f7fd febd 	bl	800f038 <_malloc_r>
 80112be:	6028      	str	r0, [r5, #0]
 80112c0:	6128      	str	r0, [r5, #16]
 80112c2:	b930      	cbnz	r0, 80112d2 <_svfiprintf_r+0x32>
 80112c4:	230c      	movs	r3, #12
 80112c6:	603b      	str	r3, [r7, #0]
 80112c8:	f04f 30ff 	mov.w	r0, #4294967295
 80112cc:	b01d      	add	sp, #116	@ 0x74
 80112ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112d2:	2340      	movs	r3, #64	@ 0x40
 80112d4:	616b      	str	r3, [r5, #20]
 80112d6:	2300      	movs	r3, #0
 80112d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80112da:	2320      	movs	r3, #32
 80112dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80112e0:	2330      	movs	r3, #48	@ 0x30
 80112e2:	f04f 0901 	mov.w	r9, #1
 80112e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80112ea:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8011484 <_svfiprintf_r+0x1e4>
 80112ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80112f2:	4623      	mov	r3, r4
 80112f4:	469a      	mov	sl, r3
 80112f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112fa:	b10a      	cbz	r2, 8011300 <_svfiprintf_r+0x60>
 80112fc:	2a25      	cmp	r2, #37	@ 0x25
 80112fe:	d1f9      	bne.n	80112f4 <_svfiprintf_r+0x54>
 8011300:	ebba 0b04 	subs.w	fp, sl, r4
 8011304:	d00b      	beq.n	801131e <_svfiprintf_r+0x7e>
 8011306:	465b      	mov	r3, fp
 8011308:	4622      	mov	r2, r4
 801130a:	4629      	mov	r1, r5
 801130c:	4638      	mov	r0, r7
 801130e:	f7ff ff6b 	bl	80111e8 <__ssputs_r>
 8011312:	3001      	adds	r0, #1
 8011314:	f000 80a7 	beq.w	8011466 <_svfiprintf_r+0x1c6>
 8011318:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801131a:	445a      	add	r2, fp
 801131c:	9209      	str	r2, [sp, #36]	@ 0x24
 801131e:	f89a 3000 	ldrb.w	r3, [sl]
 8011322:	2b00      	cmp	r3, #0
 8011324:	f000 809f 	beq.w	8011466 <_svfiprintf_r+0x1c6>
 8011328:	2300      	movs	r3, #0
 801132a:	f04f 32ff 	mov.w	r2, #4294967295
 801132e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011332:	f10a 0a01 	add.w	sl, sl, #1
 8011336:	9304      	str	r3, [sp, #16]
 8011338:	9307      	str	r3, [sp, #28]
 801133a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801133e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011340:	4654      	mov	r4, sl
 8011342:	2205      	movs	r2, #5
 8011344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011348:	484e      	ldr	r0, [pc, #312]	@ (8011484 <_svfiprintf_r+0x1e4>)
 801134a:	f7fe fd26 	bl	800fd9a <memchr>
 801134e:	9a04      	ldr	r2, [sp, #16]
 8011350:	b9d8      	cbnz	r0, 801138a <_svfiprintf_r+0xea>
 8011352:	06d0      	lsls	r0, r2, #27
 8011354:	bf44      	itt	mi
 8011356:	2320      	movmi	r3, #32
 8011358:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801135c:	0711      	lsls	r1, r2, #28
 801135e:	bf44      	itt	mi
 8011360:	232b      	movmi	r3, #43	@ 0x2b
 8011362:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011366:	f89a 3000 	ldrb.w	r3, [sl]
 801136a:	2b2a      	cmp	r3, #42	@ 0x2a
 801136c:	d015      	beq.n	801139a <_svfiprintf_r+0xfa>
 801136e:	4654      	mov	r4, sl
 8011370:	2000      	movs	r0, #0
 8011372:	f04f 0c0a 	mov.w	ip, #10
 8011376:	9a07      	ldr	r2, [sp, #28]
 8011378:	4621      	mov	r1, r4
 801137a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801137e:	3b30      	subs	r3, #48	@ 0x30
 8011380:	2b09      	cmp	r3, #9
 8011382:	d94b      	bls.n	801141c <_svfiprintf_r+0x17c>
 8011384:	b1b0      	cbz	r0, 80113b4 <_svfiprintf_r+0x114>
 8011386:	9207      	str	r2, [sp, #28]
 8011388:	e014      	b.n	80113b4 <_svfiprintf_r+0x114>
 801138a:	eba0 0308 	sub.w	r3, r0, r8
 801138e:	fa09 f303 	lsl.w	r3, r9, r3
 8011392:	4313      	orrs	r3, r2
 8011394:	46a2      	mov	sl, r4
 8011396:	9304      	str	r3, [sp, #16]
 8011398:	e7d2      	b.n	8011340 <_svfiprintf_r+0xa0>
 801139a:	9b03      	ldr	r3, [sp, #12]
 801139c:	1d19      	adds	r1, r3, #4
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	9103      	str	r1, [sp, #12]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	bfbb      	ittet	lt
 80113a6:	425b      	neglt	r3, r3
 80113a8:	f042 0202 	orrlt.w	r2, r2, #2
 80113ac:	9307      	strge	r3, [sp, #28]
 80113ae:	9307      	strlt	r3, [sp, #28]
 80113b0:	bfb8      	it	lt
 80113b2:	9204      	strlt	r2, [sp, #16]
 80113b4:	7823      	ldrb	r3, [r4, #0]
 80113b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80113b8:	d10a      	bne.n	80113d0 <_svfiprintf_r+0x130>
 80113ba:	7863      	ldrb	r3, [r4, #1]
 80113bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80113be:	d132      	bne.n	8011426 <_svfiprintf_r+0x186>
 80113c0:	9b03      	ldr	r3, [sp, #12]
 80113c2:	3402      	adds	r4, #2
 80113c4:	1d1a      	adds	r2, r3, #4
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	9203      	str	r2, [sp, #12]
 80113ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80113ce:	9305      	str	r3, [sp, #20]
 80113d0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8011488 <_svfiprintf_r+0x1e8>
 80113d4:	2203      	movs	r2, #3
 80113d6:	4650      	mov	r0, sl
 80113d8:	7821      	ldrb	r1, [r4, #0]
 80113da:	f7fe fcde 	bl	800fd9a <memchr>
 80113de:	b138      	cbz	r0, 80113f0 <_svfiprintf_r+0x150>
 80113e0:	2240      	movs	r2, #64	@ 0x40
 80113e2:	9b04      	ldr	r3, [sp, #16]
 80113e4:	eba0 000a 	sub.w	r0, r0, sl
 80113e8:	4082      	lsls	r2, r0
 80113ea:	4313      	orrs	r3, r2
 80113ec:	3401      	adds	r4, #1
 80113ee:	9304      	str	r3, [sp, #16]
 80113f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113f4:	2206      	movs	r2, #6
 80113f6:	4825      	ldr	r0, [pc, #148]	@ (801148c <_svfiprintf_r+0x1ec>)
 80113f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80113fc:	f7fe fccd 	bl	800fd9a <memchr>
 8011400:	2800      	cmp	r0, #0
 8011402:	d036      	beq.n	8011472 <_svfiprintf_r+0x1d2>
 8011404:	4b22      	ldr	r3, [pc, #136]	@ (8011490 <_svfiprintf_r+0x1f0>)
 8011406:	bb1b      	cbnz	r3, 8011450 <_svfiprintf_r+0x1b0>
 8011408:	9b03      	ldr	r3, [sp, #12]
 801140a:	3307      	adds	r3, #7
 801140c:	f023 0307 	bic.w	r3, r3, #7
 8011410:	3308      	adds	r3, #8
 8011412:	9303      	str	r3, [sp, #12]
 8011414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011416:	4433      	add	r3, r6
 8011418:	9309      	str	r3, [sp, #36]	@ 0x24
 801141a:	e76a      	b.n	80112f2 <_svfiprintf_r+0x52>
 801141c:	460c      	mov	r4, r1
 801141e:	2001      	movs	r0, #1
 8011420:	fb0c 3202 	mla	r2, ip, r2, r3
 8011424:	e7a8      	b.n	8011378 <_svfiprintf_r+0xd8>
 8011426:	2300      	movs	r3, #0
 8011428:	f04f 0c0a 	mov.w	ip, #10
 801142c:	4619      	mov	r1, r3
 801142e:	3401      	adds	r4, #1
 8011430:	9305      	str	r3, [sp, #20]
 8011432:	4620      	mov	r0, r4
 8011434:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011438:	3a30      	subs	r2, #48	@ 0x30
 801143a:	2a09      	cmp	r2, #9
 801143c:	d903      	bls.n	8011446 <_svfiprintf_r+0x1a6>
 801143e:	2b00      	cmp	r3, #0
 8011440:	d0c6      	beq.n	80113d0 <_svfiprintf_r+0x130>
 8011442:	9105      	str	r1, [sp, #20]
 8011444:	e7c4      	b.n	80113d0 <_svfiprintf_r+0x130>
 8011446:	4604      	mov	r4, r0
 8011448:	2301      	movs	r3, #1
 801144a:	fb0c 2101 	mla	r1, ip, r1, r2
 801144e:	e7f0      	b.n	8011432 <_svfiprintf_r+0x192>
 8011450:	ab03      	add	r3, sp, #12
 8011452:	9300      	str	r3, [sp, #0]
 8011454:	462a      	mov	r2, r5
 8011456:	4638      	mov	r0, r7
 8011458:	4b0e      	ldr	r3, [pc, #56]	@ (8011494 <_svfiprintf_r+0x1f4>)
 801145a:	a904      	add	r1, sp, #16
 801145c:	f7fd ff16 	bl	800f28c <_printf_float>
 8011460:	1c42      	adds	r2, r0, #1
 8011462:	4606      	mov	r6, r0
 8011464:	d1d6      	bne.n	8011414 <_svfiprintf_r+0x174>
 8011466:	89ab      	ldrh	r3, [r5, #12]
 8011468:	065b      	lsls	r3, r3, #25
 801146a:	f53f af2d 	bmi.w	80112c8 <_svfiprintf_r+0x28>
 801146e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011470:	e72c      	b.n	80112cc <_svfiprintf_r+0x2c>
 8011472:	ab03      	add	r3, sp, #12
 8011474:	9300      	str	r3, [sp, #0]
 8011476:	462a      	mov	r2, r5
 8011478:	4638      	mov	r0, r7
 801147a:	4b06      	ldr	r3, [pc, #24]	@ (8011494 <_svfiprintf_r+0x1f4>)
 801147c:	a904      	add	r1, sp, #16
 801147e:	f7fe f9a3 	bl	800f7c8 <_printf_i>
 8011482:	e7ed      	b.n	8011460 <_svfiprintf_r+0x1c0>
 8011484:	08012f10 	.word	0x08012f10
 8011488:	08012f16 	.word	0x08012f16
 801148c:	08012f1a 	.word	0x08012f1a
 8011490:	0800f28d 	.word	0x0800f28d
 8011494:	080111e9 	.word	0x080111e9

08011498 <__sflush_r>:
 8011498:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801149e:	0716      	lsls	r6, r2, #28
 80114a0:	4605      	mov	r5, r0
 80114a2:	460c      	mov	r4, r1
 80114a4:	d454      	bmi.n	8011550 <__sflush_r+0xb8>
 80114a6:	684b      	ldr	r3, [r1, #4]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	dc02      	bgt.n	80114b2 <__sflush_r+0x1a>
 80114ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	dd48      	ble.n	8011544 <__sflush_r+0xac>
 80114b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114b4:	2e00      	cmp	r6, #0
 80114b6:	d045      	beq.n	8011544 <__sflush_r+0xac>
 80114b8:	2300      	movs	r3, #0
 80114ba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80114be:	682f      	ldr	r7, [r5, #0]
 80114c0:	6a21      	ldr	r1, [r4, #32]
 80114c2:	602b      	str	r3, [r5, #0]
 80114c4:	d030      	beq.n	8011528 <__sflush_r+0x90>
 80114c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80114c8:	89a3      	ldrh	r3, [r4, #12]
 80114ca:	0759      	lsls	r1, r3, #29
 80114cc:	d505      	bpl.n	80114da <__sflush_r+0x42>
 80114ce:	6863      	ldr	r3, [r4, #4]
 80114d0:	1ad2      	subs	r2, r2, r3
 80114d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80114d4:	b10b      	cbz	r3, 80114da <__sflush_r+0x42>
 80114d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80114d8:	1ad2      	subs	r2, r2, r3
 80114da:	2300      	movs	r3, #0
 80114dc:	4628      	mov	r0, r5
 80114de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114e0:	6a21      	ldr	r1, [r4, #32]
 80114e2:	47b0      	blx	r6
 80114e4:	1c43      	adds	r3, r0, #1
 80114e6:	89a3      	ldrh	r3, [r4, #12]
 80114e8:	d106      	bne.n	80114f8 <__sflush_r+0x60>
 80114ea:	6829      	ldr	r1, [r5, #0]
 80114ec:	291d      	cmp	r1, #29
 80114ee:	d82b      	bhi.n	8011548 <__sflush_r+0xb0>
 80114f0:	4a28      	ldr	r2, [pc, #160]	@ (8011594 <__sflush_r+0xfc>)
 80114f2:	410a      	asrs	r2, r1
 80114f4:	07d6      	lsls	r6, r2, #31
 80114f6:	d427      	bmi.n	8011548 <__sflush_r+0xb0>
 80114f8:	2200      	movs	r2, #0
 80114fa:	6062      	str	r2, [r4, #4]
 80114fc:	6922      	ldr	r2, [r4, #16]
 80114fe:	04d9      	lsls	r1, r3, #19
 8011500:	6022      	str	r2, [r4, #0]
 8011502:	d504      	bpl.n	801150e <__sflush_r+0x76>
 8011504:	1c42      	adds	r2, r0, #1
 8011506:	d101      	bne.n	801150c <__sflush_r+0x74>
 8011508:	682b      	ldr	r3, [r5, #0]
 801150a:	b903      	cbnz	r3, 801150e <__sflush_r+0x76>
 801150c:	6560      	str	r0, [r4, #84]	@ 0x54
 801150e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011510:	602f      	str	r7, [r5, #0]
 8011512:	b1b9      	cbz	r1, 8011544 <__sflush_r+0xac>
 8011514:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011518:	4299      	cmp	r1, r3
 801151a:	d002      	beq.n	8011522 <__sflush_r+0x8a>
 801151c:	4628      	mov	r0, r5
 801151e:	f7ff fa9b 	bl	8010a58 <_free_r>
 8011522:	2300      	movs	r3, #0
 8011524:	6363      	str	r3, [r4, #52]	@ 0x34
 8011526:	e00d      	b.n	8011544 <__sflush_r+0xac>
 8011528:	2301      	movs	r3, #1
 801152a:	4628      	mov	r0, r5
 801152c:	47b0      	blx	r6
 801152e:	4602      	mov	r2, r0
 8011530:	1c50      	adds	r0, r2, #1
 8011532:	d1c9      	bne.n	80114c8 <__sflush_r+0x30>
 8011534:	682b      	ldr	r3, [r5, #0]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d0c6      	beq.n	80114c8 <__sflush_r+0x30>
 801153a:	2b1d      	cmp	r3, #29
 801153c:	d001      	beq.n	8011542 <__sflush_r+0xaa>
 801153e:	2b16      	cmp	r3, #22
 8011540:	d11d      	bne.n	801157e <__sflush_r+0xe6>
 8011542:	602f      	str	r7, [r5, #0]
 8011544:	2000      	movs	r0, #0
 8011546:	e021      	b.n	801158c <__sflush_r+0xf4>
 8011548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801154c:	b21b      	sxth	r3, r3
 801154e:	e01a      	b.n	8011586 <__sflush_r+0xee>
 8011550:	690f      	ldr	r7, [r1, #16]
 8011552:	2f00      	cmp	r7, #0
 8011554:	d0f6      	beq.n	8011544 <__sflush_r+0xac>
 8011556:	0793      	lsls	r3, r2, #30
 8011558:	bf18      	it	ne
 801155a:	2300      	movne	r3, #0
 801155c:	680e      	ldr	r6, [r1, #0]
 801155e:	bf08      	it	eq
 8011560:	694b      	ldreq	r3, [r1, #20]
 8011562:	1bf6      	subs	r6, r6, r7
 8011564:	600f      	str	r7, [r1, #0]
 8011566:	608b      	str	r3, [r1, #8]
 8011568:	2e00      	cmp	r6, #0
 801156a:	ddeb      	ble.n	8011544 <__sflush_r+0xac>
 801156c:	4633      	mov	r3, r6
 801156e:	463a      	mov	r2, r7
 8011570:	4628      	mov	r0, r5
 8011572:	6a21      	ldr	r1, [r4, #32]
 8011574:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8011578:	47e0      	blx	ip
 801157a:	2800      	cmp	r0, #0
 801157c:	dc07      	bgt.n	801158e <__sflush_r+0xf6>
 801157e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011586:	f04f 30ff 	mov.w	r0, #4294967295
 801158a:	81a3      	strh	r3, [r4, #12]
 801158c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801158e:	4407      	add	r7, r0
 8011590:	1a36      	subs	r6, r6, r0
 8011592:	e7e9      	b.n	8011568 <__sflush_r+0xd0>
 8011594:	dfbffffe 	.word	0xdfbffffe

08011598 <_fflush_r>:
 8011598:	b538      	push	{r3, r4, r5, lr}
 801159a:	690b      	ldr	r3, [r1, #16]
 801159c:	4605      	mov	r5, r0
 801159e:	460c      	mov	r4, r1
 80115a0:	b913      	cbnz	r3, 80115a8 <_fflush_r+0x10>
 80115a2:	2500      	movs	r5, #0
 80115a4:	4628      	mov	r0, r5
 80115a6:	bd38      	pop	{r3, r4, r5, pc}
 80115a8:	b118      	cbz	r0, 80115b2 <_fflush_r+0x1a>
 80115aa:	6a03      	ldr	r3, [r0, #32]
 80115ac:	b90b      	cbnz	r3, 80115b2 <_fflush_r+0x1a>
 80115ae:	f7fe fab7 	bl	800fb20 <__sinit>
 80115b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d0f3      	beq.n	80115a2 <_fflush_r+0xa>
 80115ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80115bc:	07d0      	lsls	r0, r2, #31
 80115be:	d404      	bmi.n	80115ca <_fflush_r+0x32>
 80115c0:	0599      	lsls	r1, r3, #22
 80115c2:	d402      	bmi.n	80115ca <_fflush_r+0x32>
 80115c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115c6:	f7fe fbe6 	bl	800fd96 <__retarget_lock_acquire_recursive>
 80115ca:	4628      	mov	r0, r5
 80115cc:	4621      	mov	r1, r4
 80115ce:	f7ff ff63 	bl	8011498 <__sflush_r>
 80115d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80115d4:	4605      	mov	r5, r0
 80115d6:	07da      	lsls	r2, r3, #31
 80115d8:	d4e4      	bmi.n	80115a4 <_fflush_r+0xc>
 80115da:	89a3      	ldrh	r3, [r4, #12]
 80115dc:	059b      	lsls	r3, r3, #22
 80115de:	d4e1      	bmi.n	80115a4 <_fflush_r+0xc>
 80115e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115e2:	f7fe fbd9 	bl	800fd98 <__retarget_lock_release_recursive>
 80115e6:	e7dd      	b.n	80115a4 <_fflush_r+0xc>

080115e8 <memmove>:
 80115e8:	4288      	cmp	r0, r1
 80115ea:	b510      	push	{r4, lr}
 80115ec:	eb01 0402 	add.w	r4, r1, r2
 80115f0:	d902      	bls.n	80115f8 <memmove+0x10>
 80115f2:	4284      	cmp	r4, r0
 80115f4:	4623      	mov	r3, r4
 80115f6:	d807      	bhi.n	8011608 <memmove+0x20>
 80115f8:	1e43      	subs	r3, r0, #1
 80115fa:	42a1      	cmp	r1, r4
 80115fc:	d008      	beq.n	8011610 <memmove+0x28>
 80115fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011602:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011606:	e7f8      	b.n	80115fa <memmove+0x12>
 8011608:	4601      	mov	r1, r0
 801160a:	4402      	add	r2, r0
 801160c:	428a      	cmp	r2, r1
 801160e:	d100      	bne.n	8011612 <memmove+0x2a>
 8011610:	bd10      	pop	{r4, pc}
 8011612:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011616:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801161a:	e7f7      	b.n	801160c <memmove+0x24>

0801161c <memcpy>:
 801161c:	440a      	add	r2, r1
 801161e:	4291      	cmp	r1, r2
 8011620:	f100 33ff 	add.w	r3, r0, #4294967295
 8011624:	d100      	bne.n	8011628 <memcpy+0xc>
 8011626:	4770      	bx	lr
 8011628:	b510      	push	{r4, lr}
 801162a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801162e:	4291      	cmp	r1, r2
 8011630:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011634:	d1f9      	bne.n	801162a <memcpy+0xe>
 8011636:	bd10      	pop	{r4, pc}

08011638 <__assert_func>:
 8011638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801163a:	4614      	mov	r4, r2
 801163c:	461a      	mov	r2, r3
 801163e:	4b09      	ldr	r3, [pc, #36]	@ (8011664 <__assert_func+0x2c>)
 8011640:	4605      	mov	r5, r0
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	68d8      	ldr	r0, [r3, #12]
 8011646:	b954      	cbnz	r4, 801165e <__assert_func+0x26>
 8011648:	4b07      	ldr	r3, [pc, #28]	@ (8011668 <__assert_func+0x30>)
 801164a:	461c      	mov	r4, r3
 801164c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011650:	9100      	str	r1, [sp, #0]
 8011652:	462b      	mov	r3, r5
 8011654:	4905      	ldr	r1, [pc, #20]	@ (801166c <__assert_func+0x34>)
 8011656:	f000 f86f 	bl	8011738 <fiprintf>
 801165a:	f000 f87f 	bl	801175c <abort>
 801165e:	4b04      	ldr	r3, [pc, #16]	@ (8011670 <__assert_func+0x38>)
 8011660:	e7f4      	b.n	801164c <__assert_func+0x14>
 8011662:	bf00      	nop
 8011664:	20000188 	.word	0x20000188
 8011668:	08012f66 	.word	0x08012f66
 801166c:	08012f38 	.word	0x08012f38
 8011670:	08012f2b 	.word	0x08012f2b

08011674 <_calloc_r>:
 8011674:	b570      	push	{r4, r5, r6, lr}
 8011676:	fba1 5402 	umull	r5, r4, r1, r2
 801167a:	b93c      	cbnz	r4, 801168c <_calloc_r+0x18>
 801167c:	4629      	mov	r1, r5
 801167e:	f7fd fcdb 	bl	800f038 <_malloc_r>
 8011682:	4606      	mov	r6, r0
 8011684:	b928      	cbnz	r0, 8011692 <_calloc_r+0x1e>
 8011686:	2600      	movs	r6, #0
 8011688:	4630      	mov	r0, r6
 801168a:	bd70      	pop	{r4, r5, r6, pc}
 801168c:	220c      	movs	r2, #12
 801168e:	6002      	str	r2, [r0, #0]
 8011690:	e7f9      	b.n	8011686 <_calloc_r+0x12>
 8011692:	462a      	mov	r2, r5
 8011694:	4621      	mov	r1, r4
 8011696:	f7fe faf0 	bl	800fc7a <memset>
 801169a:	e7f5      	b.n	8011688 <_calloc_r+0x14>

0801169c <__ascii_mbtowc>:
 801169c:	b082      	sub	sp, #8
 801169e:	b901      	cbnz	r1, 80116a2 <__ascii_mbtowc+0x6>
 80116a0:	a901      	add	r1, sp, #4
 80116a2:	b142      	cbz	r2, 80116b6 <__ascii_mbtowc+0x1a>
 80116a4:	b14b      	cbz	r3, 80116ba <__ascii_mbtowc+0x1e>
 80116a6:	7813      	ldrb	r3, [r2, #0]
 80116a8:	600b      	str	r3, [r1, #0]
 80116aa:	7812      	ldrb	r2, [r2, #0]
 80116ac:	1e10      	subs	r0, r2, #0
 80116ae:	bf18      	it	ne
 80116b0:	2001      	movne	r0, #1
 80116b2:	b002      	add	sp, #8
 80116b4:	4770      	bx	lr
 80116b6:	4610      	mov	r0, r2
 80116b8:	e7fb      	b.n	80116b2 <__ascii_mbtowc+0x16>
 80116ba:	f06f 0001 	mvn.w	r0, #1
 80116be:	e7f8      	b.n	80116b2 <__ascii_mbtowc+0x16>

080116c0 <_realloc_r>:
 80116c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116c4:	4680      	mov	r8, r0
 80116c6:	4615      	mov	r5, r2
 80116c8:	460c      	mov	r4, r1
 80116ca:	b921      	cbnz	r1, 80116d6 <_realloc_r+0x16>
 80116cc:	4611      	mov	r1, r2
 80116ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116d2:	f7fd bcb1 	b.w	800f038 <_malloc_r>
 80116d6:	b92a      	cbnz	r2, 80116e4 <_realloc_r+0x24>
 80116d8:	f7ff f9be 	bl	8010a58 <_free_r>
 80116dc:	2400      	movs	r4, #0
 80116de:	4620      	mov	r0, r4
 80116e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116e4:	f000 f841 	bl	801176a <_malloc_usable_size_r>
 80116e8:	4285      	cmp	r5, r0
 80116ea:	4606      	mov	r6, r0
 80116ec:	d802      	bhi.n	80116f4 <_realloc_r+0x34>
 80116ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80116f2:	d8f4      	bhi.n	80116de <_realloc_r+0x1e>
 80116f4:	4629      	mov	r1, r5
 80116f6:	4640      	mov	r0, r8
 80116f8:	f7fd fc9e 	bl	800f038 <_malloc_r>
 80116fc:	4607      	mov	r7, r0
 80116fe:	2800      	cmp	r0, #0
 8011700:	d0ec      	beq.n	80116dc <_realloc_r+0x1c>
 8011702:	42b5      	cmp	r5, r6
 8011704:	462a      	mov	r2, r5
 8011706:	4621      	mov	r1, r4
 8011708:	bf28      	it	cs
 801170a:	4632      	movcs	r2, r6
 801170c:	f7ff ff86 	bl	801161c <memcpy>
 8011710:	4621      	mov	r1, r4
 8011712:	4640      	mov	r0, r8
 8011714:	f7ff f9a0 	bl	8010a58 <_free_r>
 8011718:	463c      	mov	r4, r7
 801171a:	e7e0      	b.n	80116de <_realloc_r+0x1e>

0801171c <__ascii_wctomb>:
 801171c:	4603      	mov	r3, r0
 801171e:	4608      	mov	r0, r1
 8011720:	b141      	cbz	r1, 8011734 <__ascii_wctomb+0x18>
 8011722:	2aff      	cmp	r2, #255	@ 0xff
 8011724:	d904      	bls.n	8011730 <__ascii_wctomb+0x14>
 8011726:	228a      	movs	r2, #138	@ 0x8a
 8011728:	f04f 30ff 	mov.w	r0, #4294967295
 801172c:	601a      	str	r2, [r3, #0]
 801172e:	4770      	bx	lr
 8011730:	2001      	movs	r0, #1
 8011732:	700a      	strb	r2, [r1, #0]
 8011734:	4770      	bx	lr
	...

08011738 <fiprintf>:
 8011738:	b40e      	push	{r1, r2, r3}
 801173a:	b503      	push	{r0, r1, lr}
 801173c:	4601      	mov	r1, r0
 801173e:	ab03      	add	r3, sp, #12
 8011740:	4805      	ldr	r0, [pc, #20]	@ (8011758 <fiprintf+0x20>)
 8011742:	f853 2b04 	ldr.w	r2, [r3], #4
 8011746:	6800      	ldr	r0, [r0, #0]
 8011748:	9301      	str	r3, [sp, #4]
 801174a:	f000 f83d 	bl	80117c8 <_vfiprintf_r>
 801174e:	b002      	add	sp, #8
 8011750:	f85d eb04 	ldr.w	lr, [sp], #4
 8011754:	b003      	add	sp, #12
 8011756:	4770      	bx	lr
 8011758:	20000188 	.word	0x20000188

0801175c <abort>:
 801175c:	2006      	movs	r0, #6
 801175e:	b508      	push	{r3, lr}
 8011760:	f000 fa06 	bl	8011b70 <raise>
 8011764:	2001      	movs	r0, #1
 8011766:	f7f2 fa34 	bl	8003bd2 <_exit>

0801176a <_malloc_usable_size_r>:
 801176a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801176e:	1f18      	subs	r0, r3, #4
 8011770:	2b00      	cmp	r3, #0
 8011772:	bfbc      	itt	lt
 8011774:	580b      	ldrlt	r3, [r1, r0]
 8011776:	18c0      	addlt	r0, r0, r3
 8011778:	4770      	bx	lr

0801177a <__sfputc_r>:
 801177a:	6893      	ldr	r3, [r2, #8]
 801177c:	b410      	push	{r4}
 801177e:	3b01      	subs	r3, #1
 8011780:	2b00      	cmp	r3, #0
 8011782:	6093      	str	r3, [r2, #8]
 8011784:	da07      	bge.n	8011796 <__sfputc_r+0x1c>
 8011786:	6994      	ldr	r4, [r2, #24]
 8011788:	42a3      	cmp	r3, r4
 801178a:	db01      	blt.n	8011790 <__sfputc_r+0x16>
 801178c:	290a      	cmp	r1, #10
 801178e:	d102      	bne.n	8011796 <__sfputc_r+0x1c>
 8011790:	bc10      	pop	{r4}
 8011792:	f000 b931 	b.w	80119f8 <__swbuf_r>
 8011796:	6813      	ldr	r3, [r2, #0]
 8011798:	1c58      	adds	r0, r3, #1
 801179a:	6010      	str	r0, [r2, #0]
 801179c:	7019      	strb	r1, [r3, #0]
 801179e:	4608      	mov	r0, r1
 80117a0:	bc10      	pop	{r4}
 80117a2:	4770      	bx	lr

080117a4 <__sfputs_r>:
 80117a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117a6:	4606      	mov	r6, r0
 80117a8:	460f      	mov	r7, r1
 80117aa:	4614      	mov	r4, r2
 80117ac:	18d5      	adds	r5, r2, r3
 80117ae:	42ac      	cmp	r4, r5
 80117b0:	d101      	bne.n	80117b6 <__sfputs_r+0x12>
 80117b2:	2000      	movs	r0, #0
 80117b4:	e007      	b.n	80117c6 <__sfputs_r+0x22>
 80117b6:	463a      	mov	r2, r7
 80117b8:	4630      	mov	r0, r6
 80117ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117be:	f7ff ffdc 	bl	801177a <__sfputc_r>
 80117c2:	1c43      	adds	r3, r0, #1
 80117c4:	d1f3      	bne.n	80117ae <__sfputs_r+0xa>
 80117c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080117c8 <_vfiprintf_r>:
 80117c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117cc:	460d      	mov	r5, r1
 80117ce:	4614      	mov	r4, r2
 80117d0:	4698      	mov	r8, r3
 80117d2:	4606      	mov	r6, r0
 80117d4:	b09d      	sub	sp, #116	@ 0x74
 80117d6:	b118      	cbz	r0, 80117e0 <_vfiprintf_r+0x18>
 80117d8:	6a03      	ldr	r3, [r0, #32]
 80117da:	b90b      	cbnz	r3, 80117e0 <_vfiprintf_r+0x18>
 80117dc:	f7fe f9a0 	bl	800fb20 <__sinit>
 80117e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80117e2:	07d9      	lsls	r1, r3, #31
 80117e4:	d405      	bmi.n	80117f2 <_vfiprintf_r+0x2a>
 80117e6:	89ab      	ldrh	r3, [r5, #12]
 80117e8:	059a      	lsls	r2, r3, #22
 80117ea:	d402      	bmi.n	80117f2 <_vfiprintf_r+0x2a>
 80117ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117ee:	f7fe fad2 	bl	800fd96 <__retarget_lock_acquire_recursive>
 80117f2:	89ab      	ldrh	r3, [r5, #12]
 80117f4:	071b      	lsls	r3, r3, #28
 80117f6:	d501      	bpl.n	80117fc <_vfiprintf_r+0x34>
 80117f8:	692b      	ldr	r3, [r5, #16]
 80117fa:	b99b      	cbnz	r3, 8011824 <_vfiprintf_r+0x5c>
 80117fc:	4629      	mov	r1, r5
 80117fe:	4630      	mov	r0, r6
 8011800:	f000 f938 	bl	8011a74 <__swsetup_r>
 8011804:	b170      	cbz	r0, 8011824 <_vfiprintf_r+0x5c>
 8011806:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011808:	07dc      	lsls	r4, r3, #31
 801180a:	d504      	bpl.n	8011816 <_vfiprintf_r+0x4e>
 801180c:	f04f 30ff 	mov.w	r0, #4294967295
 8011810:	b01d      	add	sp, #116	@ 0x74
 8011812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011816:	89ab      	ldrh	r3, [r5, #12]
 8011818:	0598      	lsls	r0, r3, #22
 801181a:	d4f7      	bmi.n	801180c <_vfiprintf_r+0x44>
 801181c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801181e:	f7fe fabb 	bl	800fd98 <__retarget_lock_release_recursive>
 8011822:	e7f3      	b.n	801180c <_vfiprintf_r+0x44>
 8011824:	2300      	movs	r3, #0
 8011826:	9309      	str	r3, [sp, #36]	@ 0x24
 8011828:	2320      	movs	r3, #32
 801182a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801182e:	2330      	movs	r3, #48	@ 0x30
 8011830:	f04f 0901 	mov.w	r9, #1
 8011834:	f8cd 800c 	str.w	r8, [sp, #12]
 8011838:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80119e4 <_vfiprintf_r+0x21c>
 801183c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011840:	4623      	mov	r3, r4
 8011842:	469a      	mov	sl, r3
 8011844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011848:	b10a      	cbz	r2, 801184e <_vfiprintf_r+0x86>
 801184a:	2a25      	cmp	r2, #37	@ 0x25
 801184c:	d1f9      	bne.n	8011842 <_vfiprintf_r+0x7a>
 801184e:	ebba 0b04 	subs.w	fp, sl, r4
 8011852:	d00b      	beq.n	801186c <_vfiprintf_r+0xa4>
 8011854:	465b      	mov	r3, fp
 8011856:	4622      	mov	r2, r4
 8011858:	4629      	mov	r1, r5
 801185a:	4630      	mov	r0, r6
 801185c:	f7ff ffa2 	bl	80117a4 <__sfputs_r>
 8011860:	3001      	adds	r0, #1
 8011862:	f000 80a7 	beq.w	80119b4 <_vfiprintf_r+0x1ec>
 8011866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011868:	445a      	add	r2, fp
 801186a:	9209      	str	r2, [sp, #36]	@ 0x24
 801186c:	f89a 3000 	ldrb.w	r3, [sl]
 8011870:	2b00      	cmp	r3, #0
 8011872:	f000 809f 	beq.w	80119b4 <_vfiprintf_r+0x1ec>
 8011876:	2300      	movs	r3, #0
 8011878:	f04f 32ff 	mov.w	r2, #4294967295
 801187c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011880:	f10a 0a01 	add.w	sl, sl, #1
 8011884:	9304      	str	r3, [sp, #16]
 8011886:	9307      	str	r3, [sp, #28]
 8011888:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801188c:	931a      	str	r3, [sp, #104]	@ 0x68
 801188e:	4654      	mov	r4, sl
 8011890:	2205      	movs	r2, #5
 8011892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011896:	4853      	ldr	r0, [pc, #332]	@ (80119e4 <_vfiprintf_r+0x21c>)
 8011898:	f7fe fa7f 	bl	800fd9a <memchr>
 801189c:	9a04      	ldr	r2, [sp, #16]
 801189e:	b9d8      	cbnz	r0, 80118d8 <_vfiprintf_r+0x110>
 80118a0:	06d1      	lsls	r1, r2, #27
 80118a2:	bf44      	itt	mi
 80118a4:	2320      	movmi	r3, #32
 80118a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118aa:	0713      	lsls	r3, r2, #28
 80118ac:	bf44      	itt	mi
 80118ae:	232b      	movmi	r3, #43	@ 0x2b
 80118b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118b4:	f89a 3000 	ldrb.w	r3, [sl]
 80118b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80118ba:	d015      	beq.n	80118e8 <_vfiprintf_r+0x120>
 80118bc:	4654      	mov	r4, sl
 80118be:	2000      	movs	r0, #0
 80118c0:	f04f 0c0a 	mov.w	ip, #10
 80118c4:	9a07      	ldr	r2, [sp, #28]
 80118c6:	4621      	mov	r1, r4
 80118c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118cc:	3b30      	subs	r3, #48	@ 0x30
 80118ce:	2b09      	cmp	r3, #9
 80118d0:	d94b      	bls.n	801196a <_vfiprintf_r+0x1a2>
 80118d2:	b1b0      	cbz	r0, 8011902 <_vfiprintf_r+0x13a>
 80118d4:	9207      	str	r2, [sp, #28]
 80118d6:	e014      	b.n	8011902 <_vfiprintf_r+0x13a>
 80118d8:	eba0 0308 	sub.w	r3, r0, r8
 80118dc:	fa09 f303 	lsl.w	r3, r9, r3
 80118e0:	4313      	orrs	r3, r2
 80118e2:	46a2      	mov	sl, r4
 80118e4:	9304      	str	r3, [sp, #16]
 80118e6:	e7d2      	b.n	801188e <_vfiprintf_r+0xc6>
 80118e8:	9b03      	ldr	r3, [sp, #12]
 80118ea:	1d19      	adds	r1, r3, #4
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	9103      	str	r1, [sp, #12]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	bfbb      	ittet	lt
 80118f4:	425b      	neglt	r3, r3
 80118f6:	f042 0202 	orrlt.w	r2, r2, #2
 80118fa:	9307      	strge	r3, [sp, #28]
 80118fc:	9307      	strlt	r3, [sp, #28]
 80118fe:	bfb8      	it	lt
 8011900:	9204      	strlt	r2, [sp, #16]
 8011902:	7823      	ldrb	r3, [r4, #0]
 8011904:	2b2e      	cmp	r3, #46	@ 0x2e
 8011906:	d10a      	bne.n	801191e <_vfiprintf_r+0x156>
 8011908:	7863      	ldrb	r3, [r4, #1]
 801190a:	2b2a      	cmp	r3, #42	@ 0x2a
 801190c:	d132      	bne.n	8011974 <_vfiprintf_r+0x1ac>
 801190e:	9b03      	ldr	r3, [sp, #12]
 8011910:	3402      	adds	r4, #2
 8011912:	1d1a      	adds	r2, r3, #4
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	9203      	str	r2, [sp, #12]
 8011918:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801191c:	9305      	str	r3, [sp, #20]
 801191e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80119e8 <_vfiprintf_r+0x220>
 8011922:	2203      	movs	r2, #3
 8011924:	4650      	mov	r0, sl
 8011926:	7821      	ldrb	r1, [r4, #0]
 8011928:	f7fe fa37 	bl	800fd9a <memchr>
 801192c:	b138      	cbz	r0, 801193e <_vfiprintf_r+0x176>
 801192e:	2240      	movs	r2, #64	@ 0x40
 8011930:	9b04      	ldr	r3, [sp, #16]
 8011932:	eba0 000a 	sub.w	r0, r0, sl
 8011936:	4082      	lsls	r2, r0
 8011938:	4313      	orrs	r3, r2
 801193a:	3401      	adds	r4, #1
 801193c:	9304      	str	r3, [sp, #16]
 801193e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011942:	2206      	movs	r2, #6
 8011944:	4829      	ldr	r0, [pc, #164]	@ (80119ec <_vfiprintf_r+0x224>)
 8011946:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801194a:	f7fe fa26 	bl	800fd9a <memchr>
 801194e:	2800      	cmp	r0, #0
 8011950:	d03f      	beq.n	80119d2 <_vfiprintf_r+0x20a>
 8011952:	4b27      	ldr	r3, [pc, #156]	@ (80119f0 <_vfiprintf_r+0x228>)
 8011954:	bb1b      	cbnz	r3, 801199e <_vfiprintf_r+0x1d6>
 8011956:	9b03      	ldr	r3, [sp, #12]
 8011958:	3307      	adds	r3, #7
 801195a:	f023 0307 	bic.w	r3, r3, #7
 801195e:	3308      	adds	r3, #8
 8011960:	9303      	str	r3, [sp, #12]
 8011962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011964:	443b      	add	r3, r7
 8011966:	9309      	str	r3, [sp, #36]	@ 0x24
 8011968:	e76a      	b.n	8011840 <_vfiprintf_r+0x78>
 801196a:	460c      	mov	r4, r1
 801196c:	2001      	movs	r0, #1
 801196e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011972:	e7a8      	b.n	80118c6 <_vfiprintf_r+0xfe>
 8011974:	2300      	movs	r3, #0
 8011976:	f04f 0c0a 	mov.w	ip, #10
 801197a:	4619      	mov	r1, r3
 801197c:	3401      	adds	r4, #1
 801197e:	9305      	str	r3, [sp, #20]
 8011980:	4620      	mov	r0, r4
 8011982:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011986:	3a30      	subs	r2, #48	@ 0x30
 8011988:	2a09      	cmp	r2, #9
 801198a:	d903      	bls.n	8011994 <_vfiprintf_r+0x1cc>
 801198c:	2b00      	cmp	r3, #0
 801198e:	d0c6      	beq.n	801191e <_vfiprintf_r+0x156>
 8011990:	9105      	str	r1, [sp, #20]
 8011992:	e7c4      	b.n	801191e <_vfiprintf_r+0x156>
 8011994:	4604      	mov	r4, r0
 8011996:	2301      	movs	r3, #1
 8011998:	fb0c 2101 	mla	r1, ip, r1, r2
 801199c:	e7f0      	b.n	8011980 <_vfiprintf_r+0x1b8>
 801199e:	ab03      	add	r3, sp, #12
 80119a0:	9300      	str	r3, [sp, #0]
 80119a2:	462a      	mov	r2, r5
 80119a4:	4630      	mov	r0, r6
 80119a6:	4b13      	ldr	r3, [pc, #76]	@ (80119f4 <_vfiprintf_r+0x22c>)
 80119a8:	a904      	add	r1, sp, #16
 80119aa:	f7fd fc6f 	bl	800f28c <_printf_float>
 80119ae:	4607      	mov	r7, r0
 80119b0:	1c78      	adds	r0, r7, #1
 80119b2:	d1d6      	bne.n	8011962 <_vfiprintf_r+0x19a>
 80119b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80119b6:	07d9      	lsls	r1, r3, #31
 80119b8:	d405      	bmi.n	80119c6 <_vfiprintf_r+0x1fe>
 80119ba:	89ab      	ldrh	r3, [r5, #12]
 80119bc:	059a      	lsls	r2, r3, #22
 80119be:	d402      	bmi.n	80119c6 <_vfiprintf_r+0x1fe>
 80119c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80119c2:	f7fe f9e9 	bl	800fd98 <__retarget_lock_release_recursive>
 80119c6:	89ab      	ldrh	r3, [r5, #12]
 80119c8:	065b      	lsls	r3, r3, #25
 80119ca:	f53f af1f 	bmi.w	801180c <_vfiprintf_r+0x44>
 80119ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80119d0:	e71e      	b.n	8011810 <_vfiprintf_r+0x48>
 80119d2:	ab03      	add	r3, sp, #12
 80119d4:	9300      	str	r3, [sp, #0]
 80119d6:	462a      	mov	r2, r5
 80119d8:	4630      	mov	r0, r6
 80119da:	4b06      	ldr	r3, [pc, #24]	@ (80119f4 <_vfiprintf_r+0x22c>)
 80119dc:	a904      	add	r1, sp, #16
 80119de:	f7fd fef3 	bl	800f7c8 <_printf_i>
 80119e2:	e7e4      	b.n	80119ae <_vfiprintf_r+0x1e6>
 80119e4:	08012f10 	.word	0x08012f10
 80119e8:	08012f16 	.word	0x08012f16
 80119ec:	08012f1a 	.word	0x08012f1a
 80119f0:	0800f28d 	.word	0x0800f28d
 80119f4:	080117a5 	.word	0x080117a5

080119f8 <__swbuf_r>:
 80119f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119fa:	460e      	mov	r6, r1
 80119fc:	4614      	mov	r4, r2
 80119fe:	4605      	mov	r5, r0
 8011a00:	b118      	cbz	r0, 8011a0a <__swbuf_r+0x12>
 8011a02:	6a03      	ldr	r3, [r0, #32]
 8011a04:	b90b      	cbnz	r3, 8011a0a <__swbuf_r+0x12>
 8011a06:	f7fe f88b 	bl	800fb20 <__sinit>
 8011a0a:	69a3      	ldr	r3, [r4, #24]
 8011a0c:	60a3      	str	r3, [r4, #8]
 8011a0e:	89a3      	ldrh	r3, [r4, #12]
 8011a10:	071a      	lsls	r2, r3, #28
 8011a12:	d501      	bpl.n	8011a18 <__swbuf_r+0x20>
 8011a14:	6923      	ldr	r3, [r4, #16]
 8011a16:	b943      	cbnz	r3, 8011a2a <__swbuf_r+0x32>
 8011a18:	4621      	mov	r1, r4
 8011a1a:	4628      	mov	r0, r5
 8011a1c:	f000 f82a 	bl	8011a74 <__swsetup_r>
 8011a20:	b118      	cbz	r0, 8011a2a <__swbuf_r+0x32>
 8011a22:	f04f 37ff 	mov.w	r7, #4294967295
 8011a26:	4638      	mov	r0, r7
 8011a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a2a:	6823      	ldr	r3, [r4, #0]
 8011a2c:	6922      	ldr	r2, [r4, #16]
 8011a2e:	b2f6      	uxtb	r6, r6
 8011a30:	1a98      	subs	r0, r3, r2
 8011a32:	6963      	ldr	r3, [r4, #20]
 8011a34:	4637      	mov	r7, r6
 8011a36:	4283      	cmp	r3, r0
 8011a38:	dc05      	bgt.n	8011a46 <__swbuf_r+0x4e>
 8011a3a:	4621      	mov	r1, r4
 8011a3c:	4628      	mov	r0, r5
 8011a3e:	f7ff fdab 	bl	8011598 <_fflush_r>
 8011a42:	2800      	cmp	r0, #0
 8011a44:	d1ed      	bne.n	8011a22 <__swbuf_r+0x2a>
 8011a46:	68a3      	ldr	r3, [r4, #8]
 8011a48:	3b01      	subs	r3, #1
 8011a4a:	60a3      	str	r3, [r4, #8]
 8011a4c:	6823      	ldr	r3, [r4, #0]
 8011a4e:	1c5a      	adds	r2, r3, #1
 8011a50:	6022      	str	r2, [r4, #0]
 8011a52:	701e      	strb	r6, [r3, #0]
 8011a54:	6962      	ldr	r2, [r4, #20]
 8011a56:	1c43      	adds	r3, r0, #1
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d004      	beq.n	8011a66 <__swbuf_r+0x6e>
 8011a5c:	89a3      	ldrh	r3, [r4, #12]
 8011a5e:	07db      	lsls	r3, r3, #31
 8011a60:	d5e1      	bpl.n	8011a26 <__swbuf_r+0x2e>
 8011a62:	2e0a      	cmp	r6, #10
 8011a64:	d1df      	bne.n	8011a26 <__swbuf_r+0x2e>
 8011a66:	4621      	mov	r1, r4
 8011a68:	4628      	mov	r0, r5
 8011a6a:	f7ff fd95 	bl	8011598 <_fflush_r>
 8011a6e:	2800      	cmp	r0, #0
 8011a70:	d0d9      	beq.n	8011a26 <__swbuf_r+0x2e>
 8011a72:	e7d6      	b.n	8011a22 <__swbuf_r+0x2a>

08011a74 <__swsetup_r>:
 8011a74:	b538      	push	{r3, r4, r5, lr}
 8011a76:	4b29      	ldr	r3, [pc, #164]	@ (8011b1c <__swsetup_r+0xa8>)
 8011a78:	4605      	mov	r5, r0
 8011a7a:	6818      	ldr	r0, [r3, #0]
 8011a7c:	460c      	mov	r4, r1
 8011a7e:	b118      	cbz	r0, 8011a88 <__swsetup_r+0x14>
 8011a80:	6a03      	ldr	r3, [r0, #32]
 8011a82:	b90b      	cbnz	r3, 8011a88 <__swsetup_r+0x14>
 8011a84:	f7fe f84c 	bl	800fb20 <__sinit>
 8011a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a8c:	0719      	lsls	r1, r3, #28
 8011a8e:	d422      	bmi.n	8011ad6 <__swsetup_r+0x62>
 8011a90:	06da      	lsls	r2, r3, #27
 8011a92:	d407      	bmi.n	8011aa4 <__swsetup_r+0x30>
 8011a94:	2209      	movs	r2, #9
 8011a96:	602a      	str	r2, [r5, #0]
 8011a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011aa0:	81a3      	strh	r3, [r4, #12]
 8011aa2:	e033      	b.n	8011b0c <__swsetup_r+0x98>
 8011aa4:	0758      	lsls	r0, r3, #29
 8011aa6:	d512      	bpl.n	8011ace <__swsetup_r+0x5a>
 8011aa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011aaa:	b141      	cbz	r1, 8011abe <__swsetup_r+0x4a>
 8011aac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ab0:	4299      	cmp	r1, r3
 8011ab2:	d002      	beq.n	8011aba <__swsetup_r+0x46>
 8011ab4:	4628      	mov	r0, r5
 8011ab6:	f7fe ffcf 	bl	8010a58 <_free_r>
 8011aba:	2300      	movs	r3, #0
 8011abc:	6363      	str	r3, [r4, #52]	@ 0x34
 8011abe:	89a3      	ldrh	r3, [r4, #12]
 8011ac0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011ac4:	81a3      	strh	r3, [r4, #12]
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	6063      	str	r3, [r4, #4]
 8011aca:	6923      	ldr	r3, [r4, #16]
 8011acc:	6023      	str	r3, [r4, #0]
 8011ace:	89a3      	ldrh	r3, [r4, #12]
 8011ad0:	f043 0308 	orr.w	r3, r3, #8
 8011ad4:	81a3      	strh	r3, [r4, #12]
 8011ad6:	6923      	ldr	r3, [r4, #16]
 8011ad8:	b94b      	cbnz	r3, 8011aee <__swsetup_r+0x7a>
 8011ada:	89a3      	ldrh	r3, [r4, #12]
 8011adc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ae4:	d003      	beq.n	8011aee <__swsetup_r+0x7a>
 8011ae6:	4621      	mov	r1, r4
 8011ae8:	4628      	mov	r0, r5
 8011aea:	f000 f882 	bl	8011bf2 <__smakebuf_r>
 8011aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011af2:	f013 0201 	ands.w	r2, r3, #1
 8011af6:	d00a      	beq.n	8011b0e <__swsetup_r+0x9a>
 8011af8:	2200      	movs	r2, #0
 8011afa:	60a2      	str	r2, [r4, #8]
 8011afc:	6962      	ldr	r2, [r4, #20]
 8011afe:	4252      	negs	r2, r2
 8011b00:	61a2      	str	r2, [r4, #24]
 8011b02:	6922      	ldr	r2, [r4, #16]
 8011b04:	b942      	cbnz	r2, 8011b18 <__swsetup_r+0xa4>
 8011b06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011b0a:	d1c5      	bne.n	8011a98 <__swsetup_r+0x24>
 8011b0c:	bd38      	pop	{r3, r4, r5, pc}
 8011b0e:	0799      	lsls	r1, r3, #30
 8011b10:	bf58      	it	pl
 8011b12:	6962      	ldrpl	r2, [r4, #20]
 8011b14:	60a2      	str	r2, [r4, #8]
 8011b16:	e7f4      	b.n	8011b02 <__swsetup_r+0x8e>
 8011b18:	2000      	movs	r0, #0
 8011b1a:	e7f7      	b.n	8011b0c <__swsetup_r+0x98>
 8011b1c:	20000188 	.word	0x20000188

08011b20 <_raise_r>:
 8011b20:	291f      	cmp	r1, #31
 8011b22:	b538      	push	{r3, r4, r5, lr}
 8011b24:	4605      	mov	r5, r0
 8011b26:	460c      	mov	r4, r1
 8011b28:	d904      	bls.n	8011b34 <_raise_r+0x14>
 8011b2a:	2316      	movs	r3, #22
 8011b2c:	6003      	str	r3, [r0, #0]
 8011b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8011b32:	bd38      	pop	{r3, r4, r5, pc}
 8011b34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011b36:	b112      	cbz	r2, 8011b3e <_raise_r+0x1e>
 8011b38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011b3c:	b94b      	cbnz	r3, 8011b52 <_raise_r+0x32>
 8011b3e:	4628      	mov	r0, r5
 8011b40:	f000 f830 	bl	8011ba4 <_getpid_r>
 8011b44:	4622      	mov	r2, r4
 8011b46:	4601      	mov	r1, r0
 8011b48:	4628      	mov	r0, r5
 8011b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b4e:	f000 b817 	b.w	8011b80 <_kill_r>
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	d00a      	beq.n	8011b6c <_raise_r+0x4c>
 8011b56:	1c59      	adds	r1, r3, #1
 8011b58:	d103      	bne.n	8011b62 <_raise_r+0x42>
 8011b5a:	2316      	movs	r3, #22
 8011b5c:	6003      	str	r3, [r0, #0]
 8011b5e:	2001      	movs	r0, #1
 8011b60:	e7e7      	b.n	8011b32 <_raise_r+0x12>
 8011b62:	2100      	movs	r1, #0
 8011b64:	4620      	mov	r0, r4
 8011b66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011b6a:	4798      	blx	r3
 8011b6c:	2000      	movs	r0, #0
 8011b6e:	e7e0      	b.n	8011b32 <_raise_r+0x12>

08011b70 <raise>:
 8011b70:	4b02      	ldr	r3, [pc, #8]	@ (8011b7c <raise+0xc>)
 8011b72:	4601      	mov	r1, r0
 8011b74:	6818      	ldr	r0, [r3, #0]
 8011b76:	f7ff bfd3 	b.w	8011b20 <_raise_r>
 8011b7a:	bf00      	nop
 8011b7c:	20000188 	.word	0x20000188

08011b80 <_kill_r>:
 8011b80:	b538      	push	{r3, r4, r5, lr}
 8011b82:	2300      	movs	r3, #0
 8011b84:	4d06      	ldr	r5, [pc, #24]	@ (8011ba0 <_kill_r+0x20>)
 8011b86:	4604      	mov	r4, r0
 8011b88:	4608      	mov	r0, r1
 8011b8a:	4611      	mov	r1, r2
 8011b8c:	602b      	str	r3, [r5, #0]
 8011b8e:	f7f2 f810 	bl	8003bb2 <_kill>
 8011b92:	1c43      	adds	r3, r0, #1
 8011b94:	d102      	bne.n	8011b9c <_kill_r+0x1c>
 8011b96:	682b      	ldr	r3, [r5, #0]
 8011b98:	b103      	cbz	r3, 8011b9c <_kill_r+0x1c>
 8011b9a:	6023      	str	r3, [r4, #0]
 8011b9c:	bd38      	pop	{r3, r4, r5, pc}
 8011b9e:	bf00      	nop
 8011ba0:	20002bb0 	.word	0x20002bb0

08011ba4 <_getpid_r>:
 8011ba4:	f7f1 bffe 	b.w	8003ba4 <_getpid>

08011ba8 <__swhatbuf_r>:
 8011ba8:	b570      	push	{r4, r5, r6, lr}
 8011baa:	460c      	mov	r4, r1
 8011bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bb0:	4615      	mov	r5, r2
 8011bb2:	2900      	cmp	r1, #0
 8011bb4:	461e      	mov	r6, r3
 8011bb6:	b096      	sub	sp, #88	@ 0x58
 8011bb8:	da0c      	bge.n	8011bd4 <__swhatbuf_r+0x2c>
 8011bba:	89a3      	ldrh	r3, [r4, #12]
 8011bbc:	2100      	movs	r1, #0
 8011bbe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011bc2:	bf14      	ite	ne
 8011bc4:	2340      	movne	r3, #64	@ 0x40
 8011bc6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011bca:	2000      	movs	r0, #0
 8011bcc:	6031      	str	r1, [r6, #0]
 8011bce:	602b      	str	r3, [r5, #0]
 8011bd0:	b016      	add	sp, #88	@ 0x58
 8011bd2:	bd70      	pop	{r4, r5, r6, pc}
 8011bd4:	466a      	mov	r2, sp
 8011bd6:	f000 f849 	bl	8011c6c <_fstat_r>
 8011bda:	2800      	cmp	r0, #0
 8011bdc:	dbed      	blt.n	8011bba <__swhatbuf_r+0x12>
 8011bde:	9901      	ldr	r1, [sp, #4]
 8011be0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011be4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011be8:	4259      	negs	r1, r3
 8011bea:	4159      	adcs	r1, r3
 8011bec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011bf0:	e7eb      	b.n	8011bca <__swhatbuf_r+0x22>

08011bf2 <__smakebuf_r>:
 8011bf2:	898b      	ldrh	r3, [r1, #12]
 8011bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011bf6:	079d      	lsls	r5, r3, #30
 8011bf8:	4606      	mov	r6, r0
 8011bfa:	460c      	mov	r4, r1
 8011bfc:	d507      	bpl.n	8011c0e <__smakebuf_r+0x1c>
 8011bfe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011c02:	6023      	str	r3, [r4, #0]
 8011c04:	6123      	str	r3, [r4, #16]
 8011c06:	2301      	movs	r3, #1
 8011c08:	6163      	str	r3, [r4, #20]
 8011c0a:	b003      	add	sp, #12
 8011c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c0e:	466a      	mov	r2, sp
 8011c10:	ab01      	add	r3, sp, #4
 8011c12:	f7ff ffc9 	bl	8011ba8 <__swhatbuf_r>
 8011c16:	9f00      	ldr	r7, [sp, #0]
 8011c18:	4605      	mov	r5, r0
 8011c1a:	4639      	mov	r1, r7
 8011c1c:	4630      	mov	r0, r6
 8011c1e:	f7fd fa0b 	bl	800f038 <_malloc_r>
 8011c22:	b948      	cbnz	r0, 8011c38 <__smakebuf_r+0x46>
 8011c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c28:	059a      	lsls	r2, r3, #22
 8011c2a:	d4ee      	bmi.n	8011c0a <__smakebuf_r+0x18>
 8011c2c:	f023 0303 	bic.w	r3, r3, #3
 8011c30:	f043 0302 	orr.w	r3, r3, #2
 8011c34:	81a3      	strh	r3, [r4, #12]
 8011c36:	e7e2      	b.n	8011bfe <__smakebuf_r+0xc>
 8011c38:	89a3      	ldrh	r3, [r4, #12]
 8011c3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c42:	81a3      	strh	r3, [r4, #12]
 8011c44:	9b01      	ldr	r3, [sp, #4]
 8011c46:	6020      	str	r0, [r4, #0]
 8011c48:	b15b      	cbz	r3, 8011c62 <__smakebuf_r+0x70>
 8011c4a:	4630      	mov	r0, r6
 8011c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c50:	f000 f81e 	bl	8011c90 <_isatty_r>
 8011c54:	b128      	cbz	r0, 8011c62 <__smakebuf_r+0x70>
 8011c56:	89a3      	ldrh	r3, [r4, #12]
 8011c58:	f023 0303 	bic.w	r3, r3, #3
 8011c5c:	f043 0301 	orr.w	r3, r3, #1
 8011c60:	81a3      	strh	r3, [r4, #12]
 8011c62:	89a3      	ldrh	r3, [r4, #12]
 8011c64:	431d      	orrs	r5, r3
 8011c66:	81a5      	strh	r5, [r4, #12]
 8011c68:	e7cf      	b.n	8011c0a <__smakebuf_r+0x18>
	...

08011c6c <_fstat_r>:
 8011c6c:	b538      	push	{r3, r4, r5, lr}
 8011c6e:	2300      	movs	r3, #0
 8011c70:	4d06      	ldr	r5, [pc, #24]	@ (8011c8c <_fstat_r+0x20>)
 8011c72:	4604      	mov	r4, r0
 8011c74:	4608      	mov	r0, r1
 8011c76:	4611      	mov	r1, r2
 8011c78:	602b      	str	r3, [r5, #0]
 8011c7a:	f7f1 fff9 	bl	8003c70 <_fstat>
 8011c7e:	1c43      	adds	r3, r0, #1
 8011c80:	d102      	bne.n	8011c88 <_fstat_r+0x1c>
 8011c82:	682b      	ldr	r3, [r5, #0]
 8011c84:	b103      	cbz	r3, 8011c88 <_fstat_r+0x1c>
 8011c86:	6023      	str	r3, [r4, #0]
 8011c88:	bd38      	pop	{r3, r4, r5, pc}
 8011c8a:	bf00      	nop
 8011c8c:	20002bb0 	.word	0x20002bb0

08011c90 <_isatty_r>:
 8011c90:	b538      	push	{r3, r4, r5, lr}
 8011c92:	2300      	movs	r3, #0
 8011c94:	4d05      	ldr	r5, [pc, #20]	@ (8011cac <_isatty_r+0x1c>)
 8011c96:	4604      	mov	r4, r0
 8011c98:	4608      	mov	r0, r1
 8011c9a:	602b      	str	r3, [r5, #0]
 8011c9c:	f7f1 fff7 	bl	8003c8e <_isatty>
 8011ca0:	1c43      	adds	r3, r0, #1
 8011ca2:	d102      	bne.n	8011caa <_isatty_r+0x1a>
 8011ca4:	682b      	ldr	r3, [r5, #0]
 8011ca6:	b103      	cbz	r3, 8011caa <_isatty_r+0x1a>
 8011ca8:	6023      	str	r3, [r4, #0]
 8011caa:	bd38      	pop	{r3, r4, r5, pc}
 8011cac:	20002bb0 	.word	0x20002bb0

08011cb0 <pow>:
 8011cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cb4:	4614      	mov	r4, r2
 8011cb6:	461d      	mov	r5, r3
 8011cb8:	4680      	mov	r8, r0
 8011cba:	4689      	mov	r9, r1
 8011cbc:	f000 f868 	bl	8011d90 <__ieee754_pow>
 8011cc0:	4622      	mov	r2, r4
 8011cc2:	4606      	mov	r6, r0
 8011cc4:	460f      	mov	r7, r1
 8011cc6:	462b      	mov	r3, r5
 8011cc8:	4620      	mov	r0, r4
 8011cca:	4629      	mov	r1, r5
 8011ccc:	f7ee fe9e 	bl	8000a0c <__aeabi_dcmpun>
 8011cd0:	bbc8      	cbnz	r0, 8011d46 <pow+0x96>
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	4640      	mov	r0, r8
 8011cd8:	4649      	mov	r1, r9
 8011cda:	f7ee fe65 	bl	80009a8 <__aeabi_dcmpeq>
 8011cde:	b1b8      	cbz	r0, 8011d10 <pow+0x60>
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	4629      	mov	r1, r5
 8011ce8:	f7ee fe5e 	bl	80009a8 <__aeabi_dcmpeq>
 8011cec:	2800      	cmp	r0, #0
 8011cee:	d141      	bne.n	8011d74 <pow+0xc4>
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	4629      	mov	r1, r5
 8011cf4:	f000 f844 	bl	8011d80 <finite>
 8011cf8:	b328      	cbz	r0, 8011d46 <pow+0x96>
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	4620      	mov	r0, r4
 8011d00:	4629      	mov	r1, r5
 8011d02:	f7ee fe5b 	bl	80009bc <__aeabi_dcmplt>
 8011d06:	b1f0      	cbz	r0, 8011d46 <pow+0x96>
 8011d08:	f7fe f81a 	bl	800fd40 <__errno>
 8011d0c:	2322      	movs	r3, #34	@ 0x22
 8011d0e:	e019      	b.n	8011d44 <pow+0x94>
 8011d10:	4630      	mov	r0, r6
 8011d12:	4639      	mov	r1, r7
 8011d14:	f000 f834 	bl	8011d80 <finite>
 8011d18:	b9c8      	cbnz	r0, 8011d4e <pow+0x9e>
 8011d1a:	4640      	mov	r0, r8
 8011d1c:	4649      	mov	r1, r9
 8011d1e:	f000 f82f 	bl	8011d80 <finite>
 8011d22:	b1a0      	cbz	r0, 8011d4e <pow+0x9e>
 8011d24:	4620      	mov	r0, r4
 8011d26:	4629      	mov	r1, r5
 8011d28:	f000 f82a 	bl	8011d80 <finite>
 8011d2c:	b178      	cbz	r0, 8011d4e <pow+0x9e>
 8011d2e:	4632      	mov	r2, r6
 8011d30:	463b      	mov	r3, r7
 8011d32:	4630      	mov	r0, r6
 8011d34:	4639      	mov	r1, r7
 8011d36:	f7ee fe69 	bl	8000a0c <__aeabi_dcmpun>
 8011d3a:	2800      	cmp	r0, #0
 8011d3c:	d0e4      	beq.n	8011d08 <pow+0x58>
 8011d3e:	f7fd ffff 	bl	800fd40 <__errno>
 8011d42:	2321      	movs	r3, #33	@ 0x21
 8011d44:	6003      	str	r3, [r0, #0]
 8011d46:	4630      	mov	r0, r6
 8011d48:	4639      	mov	r1, r7
 8011d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d4e:	2200      	movs	r2, #0
 8011d50:	2300      	movs	r3, #0
 8011d52:	4630      	mov	r0, r6
 8011d54:	4639      	mov	r1, r7
 8011d56:	f7ee fe27 	bl	80009a8 <__aeabi_dcmpeq>
 8011d5a:	2800      	cmp	r0, #0
 8011d5c:	d0f3      	beq.n	8011d46 <pow+0x96>
 8011d5e:	4640      	mov	r0, r8
 8011d60:	4649      	mov	r1, r9
 8011d62:	f000 f80d 	bl	8011d80 <finite>
 8011d66:	2800      	cmp	r0, #0
 8011d68:	d0ed      	beq.n	8011d46 <pow+0x96>
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	4629      	mov	r1, r5
 8011d6e:	f000 f807 	bl	8011d80 <finite>
 8011d72:	e7c8      	b.n	8011d06 <pow+0x56>
 8011d74:	2600      	movs	r6, #0
 8011d76:	4f01      	ldr	r7, [pc, #4]	@ (8011d7c <pow+0xcc>)
 8011d78:	e7e5      	b.n	8011d46 <pow+0x96>
 8011d7a:	bf00      	nop
 8011d7c:	3ff00000 	.word	0x3ff00000

08011d80 <finite>:
 8011d80:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8011d84:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8011d88:	0fc0      	lsrs	r0, r0, #31
 8011d8a:	4770      	bx	lr
 8011d8c:	0000      	movs	r0, r0
	...

08011d90 <__ieee754_pow>:
 8011d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d94:	b091      	sub	sp, #68	@ 0x44
 8011d96:	e9cd 2300 	strd	r2, r3, [sp]
 8011d9a:	468b      	mov	fp, r1
 8011d9c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8011da0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8011da4:	4682      	mov	sl, r0
 8011da6:	ea57 0001 	orrs.w	r0, r7, r1
 8011daa:	d112      	bne.n	8011dd2 <__ieee754_pow+0x42>
 8011dac:	4653      	mov	r3, sl
 8011dae:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8011db2:	18db      	adds	r3, r3, r3
 8011db4:	4152      	adcs	r2, r2
 8011db6:	4298      	cmp	r0, r3
 8011db8:	4b91      	ldr	r3, [pc, #580]	@ (8012000 <__ieee754_pow+0x270>)
 8011dba:	4193      	sbcs	r3, r2
 8011dbc:	f080 84ce 	bcs.w	801275c <__ieee754_pow+0x9cc>
 8011dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011dc4:	4650      	mov	r0, sl
 8011dc6:	4659      	mov	r1, fp
 8011dc8:	f7ee f9d0 	bl	800016c <__adddf3>
 8011dcc:	b011      	add	sp, #68	@ 0x44
 8011dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dd2:	4b8c      	ldr	r3, [pc, #560]	@ (8012004 <__ieee754_pow+0x274>)
 8011dd4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8011dd8:	429e      	cmp	r6, r3
 8011dda:	465d      	mov	r5, fp
 8011ddc:	46d1      	mov	r9, sl
 8011dde:	d807      	bhi.n	8011df0 <__ieee754_pow+0x60>
 8011de0:	d102      	bne.n	8011de8 <__ieee754_pow+0x58>
 8011de2:	f1ba 0f00 	cmp.w	sl, #0
 8011de6:	d1eb      	bne.n	8011dc0 <__ieee754_pow+0x30>
 8011de8:	429f      	cmp	r7, r3
 8011dea:	d801      	bhi.n	8011df0 <__ieee754_pow+0x60>
 8011dec:	d10f      	bne.n	8011e0e <__ieee754_pow+0x7e>
 8011dee:	b171      	cbz	r1, 8011e0e <__ieee754_pow+0x7e>
 8011df0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8011df4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8011df8:	ea55 0509 	orrs.w	r5, r5, r9
 8011dfc:	d1e0      	bne.n	8011dc0 <__ieee754_pow+0x30>
 8011dfe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011e02:	18db      	adds	r3, r3, r3
 8011e04:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8011e08:	4152      	adcs	r2, r2
 8011e0a:	429d      	cmp	r5, r3
 8011e0c:	e7d4      	b.n	8011db8 <__ieee754_pow+0x28>
 8011e0e:	2d00      	cmp	r5, #0
 8011e10:	4633      	mov	r3, r6
 8011e12:	da39      	bge.n	8011e88 <__ieee754_pow+0xf8>
 8011e14:	4a7c      	ldr	r2, [pc, #496]	@ (8012008 <__ieee754_pow+0x278>)
 8011e16:	4297      	cmp	r7, r2
 8011e18:	d84e      	bhi.n	8011eb8 <__ieee754_pow+0x128>
 8011e1a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8011e1e:	4297      	cmp	r7, r2
 8011e20:	f240 84ab 	bls.w	801277a <__ieee754_pow+0x9ea>
 8011e24:	153a      	asrs	r2, r7, #20
 8011e26:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8011e2a:	2a14      	cmp	r2, #20
 8011e2c:	dd0f      	ble.n	8011e4e <__ieee754_pow+0xbe>
 8011e2e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8011e32:	fa21 f402 	lsr.w	r4, r1, r2
 8011e36:	fa04 f202 	lsl.w	r2, r4, r2
 8011e3a:	428a      	cmp	r2, r1
 8011e3c:	f040 849d 	bne.w	801277a <__ieee754_pow+0x9ea>
 8011e40:	f004 0401 	and.w	r4, r4, #1
 8011e44:	f1c4 0402 	rsb	r4, r4, #2
 8011e48:	2900      	cmp	r1, #0
 8011e4a:	d15a      	bne.n	8011f02 <__ieee754_pow+0x172>
 8011e4c:	e00e      	b.n	8011e6c <__ieee754_pow+0xdc>
 8011e4e:	2900      	cmp	r1, #0
 8011e50:	d156      	bne.n	8011f00 <__ieee754_pow+0x170>
 8011e52:	f1c2 0214 	rsb	r2, r2, #20
 8011e56:	fa47 f402 	asr.w	r4, r7, r2
 8011e5a:	fa04 f202 	lsl.w	r2, r4, r2
 8011e5e:	42ba      	cmp	r2, r7
 8011e60:	f040 8488 	bne.w	8012774 <__ieee754_pow+0x9e4>
 8011e64:	f004 0401 	and.w	r4, r4, #1
 8011e68:	f1c4 0402 	rsb	r4, r4, #2
 8011e6c:	4a67      	ldr	r2, [pc, #412]	@ (801200c <__ieee754_pow+0x27c>)
 8011e6e:	4297      	cmp	r7, r2
 8011e70:	d130      	bne.n	8011ed4 <__ieee754_pow+0x144>
 8011e72:	f1b8 0f00 	cmp.w	r8, #0
 8011e76:	f280 8479 	bge.w	801276c <__ieee754_pow+0x9dc>
 8011e7a:	4652      	mov	r2, sl
 8011e7c:	465b      	mov	r3, fp
 8011e7e:	2000      	movs	r0, #0
 8011e80:	4962      	ldr	r1, [pc, #392]	@ (801200c <__ieee754_pow+0x27c>)
 8011e82:	f7ee fc53 	bl	800072c <__aeabi_ddiv>
 8011e86:	e7a1      	b.n	8011dcc <__ieee754_pow+0x3c>
 8011e88:	2400      	movs	r4, #0
 8011e8a:	2900      	cmp	r1, #0
 8011e8c:	d139      	bne.n	8011f02 <__ieee754_pow+0x172>
 8011e8e:	4a5d      	ldr	r2, [pc, #372]	@ (8012004 <__ieee754_pow+0x274>)
 8011e90:	4297      	cmp	r7, r2
 8011e92:	d1eb      	bne.n	8011e6c <__ieee754_pow+0xdc>
 8011e94:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8011e98:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8011e9c:	ea53 0309 	orrs.w	r3, r3, r9
 8011ea0:	f000 845c 	beq.w	801275c <__ieee754_pow+0x9cc>
 8011ea4:	4b5a      	ldr	r3, [pc, #360]	@ (8012010 <__ieee754_pow+0x280>)
 8011ea6:	429e      	cmp	r6, r3
 8011ea8:	d908      	bls.n	8011ebc <__ieee754_pow+0x12c>
 8011eaa:	f1b8 0f00 	cmp.w	r8, #0
 8011eae:	f2c0 8459 	blt.w	8012764 <__ieee754_pow+0x9d4>
 8011eb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011eb6:	e789      	b.n	8011dcc <__ieee754_pow+0x3c>
 8011eb8:	2402      	movs	r4, #2
 8011eba:	e7e6      	b.n	8011e8a <__ieee754_pow+0xfa>
 8011ebc:	f1b8 0f00 	cmp.w	r8, #0
 8011ec0:	f04f 0000 	mov.w	r0, #0
 8011ec4:	f04f 0100 	mov.w	r1, #0
 8011ec8:	da80      	bge.n	8011dcc <__ieee754_pow+0x3c>
 8011eca:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011ece:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011ed2:	e77b      	b.n	8011dcc <__ieee754_pow+0x3c>
 8011ed4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8011ed8:	d106      	bne.n	8011ee8 <__ieee754_pow+0x158>
 8011eda:	4652      	mov	r2, sl
 8011edc:	465b      	mov	r3, fp
 8011ede:	4650      	mov	r0, sl
 8011ee0:	4659      	mov	r1, fp
 8011ee2:	f7ee faf9 	bl	80004d8 <__aeabi_dmul>
 8011ee6:	e771      	b.n	8011dcc <__ieee754_pow+0x3c>
 8011ee8:	4a4a      	ldr	r2, [pc, #296]	@ (8012014 <__ieee754_pow+0x284>)
 8011eea:	4590      	cmp	r8, r2
 8011eec:	d109      	bne.n	8011f02 <__ieee754_pow+0x172>
 8011eee:	2d00      	cmp	r5, #0
 8011ef0:	db07      	blt.n	8011f02 <__ieee754_pow+0x172>
 8011ef2:	4650      	mov	r0, sl
 8011ef4:	4659      	mov	r1, fp
 8011ef6:	b011      	add	sp, #68	@ 0x44
 8011ef8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011efc:	f000 bd12 	b.w	8012924 <__ieee754_sqrt>
 8011f00:	2400      	movs	r4, #0
 8011f02:	4650      	mov	r0, sl
 8011f04:	4659      	mov	r1, fp
 8011f06:	9302      	str	r3, [sp, #8]
 8011f08:	f000 fc6a 	bl	80127e0 <fabs>
 8011f0c:	9b02      	ldr	r3, [sp, #8]
 8011f0e:	f1b9 0f00 	cmp.w	r9, #0
 8011f12:	d127      	bne.n	8011f64 <__ieee754_pow+0x1d4>
 8011f14:	4a3d      	ldr	r2, [pc, #244]	@ (801200c <__ieee754_pow+0x27c>)
 8011f16:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8011f1a:	4594      	cmp	ip, r2
 8011f1c:	d000      	beq.n	8011f20 <__ieee754_pow+0x190>
 8011f1e:	bb0e      	cbnz	r6, 8011f64 <__ieee754_pow+0x1d4>
 8011f20:	f1b8 0f00 	cmp.w	r8, #0
 8011f24:	da05      	bge.n	8011f32 <__ieee754_pow+0x1a2>
 8011f26:	4602      	mov	r2, r0
 8011f28:	460b      	mov	r3, r1
 8011f2a:	2000      	movs	r0, #0
 8011f2c:	4937      	ldr	r1, [pc, #220]	@ (801200c <__ieee754_pow+0x27c>)
 8011f2e:	f7ee fbfd 	bl	800072c <__aeabi_ddiv>
 8011f32:	2d00      	cmp	r5, #0
 8011f34:	f6bf af4a 	bge.w	8011dcc <__ieee754_pow+0x3c>
 8011f38:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8011f3c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8011f40:	4326      	orrs	r6, r4
 8011f42:	d108      	bne.n	8011f56 <__ieee754_pow+0x1c6>
 8011f44:	4602      	mov	r2, r0
 8011f46:	460b      	mov	r3, r1
 8011f48:	4610      	mov	r0, r2
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	f7ee f90c 	bl	8000168 <__aeabi_dsub>
 8011f50:	4602      	mov	r2, r0
 8011f52:	460b      	mov	r3, r1
 8011f54:	e795      	b.n	8011e82 <__ieee754_pow+0xf2>
 8011f56:	2c01      	cmp	r4, #1
 8011f58:	f47f af38 	bne.w	8011dcc <__ieee754_pow+0x3c>
 8011f5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011f60:	4619      	mov	r1, r3
 8011f62:	e733      	b.n	8011dcc <__ieee754_pow+0x3c>
 8011f64:	0fea      	lsrs	r2, r5, #31
 8011f66:	3a01      	subs	r2, #1
 8011f68:	ea52 0c04 	orrs.w	ip, r2, r4
 8011f6c:	d102      	bne.n	8011f74 <__ieee754_pow+0x1e4>
 8011f6e:	4652      	mov	r2, sl
 8011f70:	465b      	mov	r3, fp
 8011f72:	e7e9      	b.n	8011f48 <__ieee754_pow+0x1b8>
 8011f74:	f04f 0900 	mov.w	r9, #0
 8011f78:	3c01      	subs	r4, #1
 8011f7a:	4314      	orrs	r4, r2
 8011f7c:	bf14      	ite	ne
 8011f7e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 801200c <__ieee754_pow+0x27c>
 8011f82:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8012018 <__ieee754_pow+0x288>
 8011f86:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8011f8a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8011f8e:	f240 8107 	bls.w	80121a0 <__ieee754_pow+0x410>
 8011f92:	4b22      	ldr	r3, [pc, #136]	@ (801201c <__ieee754_pow+0x28c>)
 8011f94:	429f      	cmp	r7, r3
 8011f96:	4b1e      	ldr	r3, [pc, #120]	@ (8012010 <__ieee754_pow+0x280>)
 8011f98:	d913      	bls.n	8011fc2 <__ieee754_pow+0x232>
 8011f9a:	429e      	cmp	r6, r3
 8011f9c:	d808      	bhi.n	8011fb0 <__ieee754_pow+0x220>
 8011f9e:	f1b8 0f00 	cmp.w	r8, #0
 8011fa2:	da08      	bge.n	8011fb6 <__ieee754_pow+0x226>
 8011fa4:	2000      	movs	r0, #0
 8011fa6:	b011      	add	sp, #68	@ 0x44
 8011fa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fac:	f000 bcb4 	b.w	8012918 <__math_oflow>
 8011fb0:	f1b8 0f00 	cmp.w	r8, #0
 8011fb4:	dcf6      	bgt.n	8011fa4 <__ieee754_pow+0x214>
 8011fb6:	2000      	movs	r0, #0
 8011fb8:	b011      	add	sp, #68	@ 0x44
 8011fba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fbe:	f000 bca6 	b.w	801290e <__math_uflow>
 8011fc2:	429e      	cmp	r6, r3
 8011fc4:	d20c      	bcs.n	8011fe0 <__ieee754_pow+0x250>
 8011fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	2300      	movs	r3, #0
 8011fce:	f7ee fcf5 	bl	80009bc <__aeabi_dcmplt>
 8011fd2:	3800      	subs	r0, #0
 8011fd4:	bf18      	it	ne
 8011fd6:	2001      	movne	r0, #1
 8011fd8:	f1b8 0f00 	cmp.w	r8, #0
 8011fdc:	daec      	bge.n	8011fb8 <__ieee754_pow+0x228>
 8011fde:	e7e2      	b.n	8011fa6 <__ieee754_pow+0x216>
 8011fe0:	4b0a      	ldr	r3, [pc, #40]	@ (801200c <__ieee754_pow+0x27c>)
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	429e      	cmp	r6, r3
 8011fe6:	d91b      	bls.n	8012020 <__ieee754_pow+0x290>
 8011fe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fec:	2300      	movs	r3, #0
 8011fee:	f7ee fce5 	bl	80009bc <__aeabi_dcmplt>
 8011ff2:	3800      	subs	r0, #0
 8011ff4:	bf18      	it	ne
 8011ff6:	2001      	movne	r0, #1
 8011ff8:	f1b8 0f00 	cmp.w	r8, #0
 8011ffc:	dcd3      	bgt.n	8011fa6 <__ieee754_pow+0x216>
 8011ffe:	e7db      	b.n	8011fb8 <__ieee754_pow+0x228>
 8012000:	fff00000 	.word	0xfff00000
 8012004:	7ff00000 	.word	0x7ff00000
 8012008:	433fffff 	.word	0x433fffff
 801200c:	3ff00000 	.word	0x3ff00000
 8012010:	3fefffff 	.word	0x3fefffff
 8012014:	3fe00000 	.word	0x3fe00000
 8012018:	bff00000 	.word	0xbff00000
 801201c:	43f00000 	.word	0x43f00000
 8012020:	4b5b      	ldr	r3, [pc, #364]	@ (8012190 <__ieee754_pow+0x400>)
 8012022:	f7ee f8a1 	bl	8000168 <__aeabi_dsub>
 8012026:	a352      	add	r3, pc, #328	@ (adr r3, 8012170 <__ieee754_pow+0x3e0>)
 8012028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202c:	4604      	mov	r4, r0
 801202e:	460d      	mov	r5, r1
 8012030:	f7ee fa52 	bl	80004d8 <__aeabi_dmul>
 8012034:	a350      	add	r3, pc, #320	@ (adr r3, 8012178 <__ieee754_pow+0x3e8>)
 8012036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801203a:	4606      	mov	r6, r0
 801203c:	460f      	mov	r7, r1
 801203e:	4620      	mov	r0, r4
 8012040:	4629      	mov	r1, r5
 8012042:	f7ee fa49 	bl	80004d8 <__aeabi_dmul>
 8012046:	2200      	movs	r2, #0
 8012048:	4682      	mov	sl, r0
 801204a:	468b      	mov	fp, r1
 801204c:	4620      	mov	r0, r4
 801204e:	4629      	mov	r1, r5
 8012050:	4b50      	ldr	r3, [pc, #320]	@ (8012194 <__ieee754_pow+0x404>)
 8012052:	f7ee fa41 	bl	80004d8 <__aeabi_dmul>
 8012056:	4602      	mov	r2, r0
 8012058:	460b      	mov	r3, r1
 801205a:	a149      	add	r1, pc, #292	@ (adr r1, 8012180 <__ieee754_pow+0x3f0>)
 801205c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012060:	f7ee f882 	bl	8000168 <__aeabi_dsub>
 8012064:	4622      	mov	r2, r4
 8012066:	462b      	mov	r3, r5
 8012068:	f7ee fa36 	bl	80004d8 <__aeabi_dmul>
 801206c:	4602      	mov	r2, r0
 801206e:	460b      	mov	r3, r1
 8012070:	2000      	movs	r0, #0
 8012072:	4949      	ldr	r1, [pc, #292]	@ (8012198 <__ieee754_pow+0x408>)
 8012074:	f7ee f878 	bl	8000168 <__aeabi_dsub>
 8012078:	4622      	mov	r2, r4
 801207a:	4680      	mov	r8, r0
 801207c:	4689      	mov	r9, r1
 801207e:	462b      	mov	r3, r5
 8012080:	4620      	mov	r0, r4
 8012082:	4629      	mov	r1, r5
 8012084:	f7ee fa28 	bl	80004d8 <__aeabi_dmul>
 8012088:	4602      	mov	r2, r0
 801208a:	460b      	mov	r3, r1
 801208c:	4640      	mov	r0, r8
 801208e:	4649      	mov	r1, r9
 8012090:	f7ee fa22 	bl	80004d8 <__aeabi_dmul>
 8012094:	a33c      	add	r3, pc, #240	@ (adr r3, 8012188 <__ieee754_pow+0x3f8>)
 8012096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209a:	f7ee fa1d 	bl	80004d8 <__aeabi_dmul>
 801209e:	4602      	mov	r2, r0
 80120a0:	460b      	mov	r3, r1
 80120a2:	4650      	mov	r0, sl
 80120a4:	4659      	mov	r1, fp
 80120a6:	f7ee f85f 	bl	8000168 <__aeabi_dsub>
 80120aa:	2400      	movs	r4, #0
 80120ac:	4602      	mov	r2, r0
 80120ae:	460b      	mov	r3, r1
 80120b0:	4680      	mov	r8, r0
 80120b2:	4689      	mov	r9, r1
 80120b4:	4630      	mov	r0, r6
 80120b6:	4639      	mov	r1, r7
 80120b8:	f7ee f858 	bl	800016c <__adddf3>
 80120bc:	4632      	mov	r2, r6
 80120be:	463b      	mov	r3, r7
 80120c0:	4620      	mov	r0, r4
 80120c2:	460d      	mov	r5, r1
 80120c4:	f7ee f850 	bl	8000168 <__aeabi_dsub>
 80120c8:	4602      	mov	r2, r0
 80120ca:	460b      	mov	r3, r1
 80120cc:	4640      	mov	r0, r8
 80120ce:	4649      	mov	r1, r9
 80120d0:	f7ee f84a 	bl	8000168 <__aeabi_dsub>
 80120d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80120dc:	2300      	movs	r3, #0
 80120de:	9304      	str	r3, [sp, #16]
 80120e0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80120e4:	4606      	mov	r6, r0
 80120e6:	460f      	mov	r7, r1
 80120e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80120ec:	4652      	mov	r2, sl
 80120ee:	465b      	mov	r3, fp
 80120f0:	f7ee f83a 	bl	8000168 <__aeabi_dsub>
 80120f4:	4622      	mov	r2, r4
 80120f6:	462b      	mov	r3, r5
 80120f8:	f7ee f9ee 	bl	80004d8 <__aeabi_dmul>
 80120fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012100:	4680      	mov	r8, r0
 8012102:	4689      	mov	r9, r1
 8012104:	4630      	mov	r0, r6
 8012106:	4639      	mov	r1, r7
 8012108:	f7ee f9e6 	bl	80004d8 <__aeabi_dmul>
 801210c:	4602      	mov	r2, r0
 801210e:	460b      	mov	r3, r1
 8012110:	4640      	mov	r0, r8
 8012112:	4649      	mov	r1, r9
 8012114:	f7ee f82a 	bl	800016c <__adddf3>
 8012118:	4652      	mov	r2, sl
 801211a:	465b      	mov	r3, fp
 801211c:	4606      	mov	r6, r0
 801211e:	460f      	mov	r7, r1
 8012120:	4620      	mov	r0, r4
 8012122:	4629      	mov	r1, r5
 8012124:	f7ee f9d8 	bl	80004d8 <__aeabi_dmul>
 8012128:	460b      	mov	r3, r1
 801212a:	4602      	mov	r2, r0
 801212c:	4680      	mov	r8, r0
 801212e:	4689      	mov	r9, r1
 8012130:	4630      	mov	r0, r6
 8012132:	4639      	mov	r1, r7
 8012134:	f7ee f81a 	bl	800016c <__adddf3>
 8012138:	4b18      	ldr	r3, [pc, #96]	@ (801219c <__ieee754_pow+0x40c>)
 801213a:	4604      	mov	r4, r0
 801213c:	4299      	cmp	r1, r3
 801213e:	460d      	mov	r5, r1
 8012140:	468a      	mov	sl, r1
 8012142:	468b      	mov	fp, r1
 8012144:	f340 82e0 	ble.w	8012708 <__ieee754_pow+0x978>
 8012148:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801214c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8012150:	4303      	orrs	r3, r0
 8012152:	f000 81df 	beq.w	8012514 <__ieee754_pow+0x784>
 8012156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801215a:	2200      	movs	r2, #0
 801215c:	2300      	movs	r3, #0
 801215e:	f7ee fc2d 	bl	80009bc <__aeabi_dcmplt>
 8012162:	3800      	subs	r0, #0
 8012164:	bf18      	it	ne
 8012166:	2001      	movne	r0, #1
 8012168:	e71d      	b.n	8011fa6 <__ieee754_pow+0x216>
 801216a:	bf00      	nop
 801216c:	f3af 8000 	nop.w
 8012170:	60000000 	.word	0x60000000
 8012174:	3ff71547 	.word	0x3ff71547
 8012178:	f85ddf44 	.word	0xf85ddf44
 801217c:	3e54ae0b 	.word	0x3e54ae0b
 8012180:	55555555 	.word	0x55555555
 8012184:	3fd55555 	.word	0x3fd55555
 8012188:	652b82fe 	.word	0x652b82fe
 801218c:	3ff71547 	.word	0x3ff71547
 8012190:	3ff00000 	.word	0x3ff00000
 8012194:	3fd00000 	.word	0x3fd00000
 8012198:	3fe00000 	.word	0x3fe00000
 801219c:	408fffff 	.word	0x408fffff
 80121a0:	4ad3      	ldr	r2, [pc, #844]	@ (80124f0 <__ieee754_pow+0x760>)
 80121a2:	402a      	ands	r2, r5
 80121a4:	2a00      	cmp	r2, #0
 80121a6:	f040 817a 	bne.w	801249e <__ieee754_pow+0x70e>
 80121aa:	4bd2      	ldr	r3, [pc, #840]	@ (80124f4 <__ieee754_pow+0x764>)
 80121ac:	2200      	movs	r2, #0
 80121ae:	f7ee f993 	bl	80004d8 <__aeabi_dmul>
 80121b2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80121b6:	460b      	mov	r3, r1
 80121b8:	151a      	asrs	r2, r3, #20
 80121ba:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80121be:	4422      	add	r2, r4
 80121c0:	920a      	str	r2, [sp, #40]	@ 0x28
 80121c2:	4acd      	ldr	r2, [pc, #820]	@ (80124f8 <__ieee754_pow+0x768>)
 80121c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80121c8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80121cc:	4293      	cmp	r3, r2
 80121ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80121d2:	dd08      	ble.n	80121e6 <__ieee754_pow+0x456>
 80121d4:	4ac9      	ldr	r2, [pc, #804]	@ (80124fc <__ieee754_pow+0x76c>)
 80121d6:	4293      	cmp	r3, r2
 80121d8:	f340 8163 	ble.w	80124a2 <__ieee754_pow+0x712>
 80121dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80121de:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80121e2:	3301      	adds	r3, #1
 80121e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80121e6:	2600      	movs	r6, #0
 80121e8:	00f3      	lsls	r3, r6, #3
 80121ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80121ec:	4bc4      	ldr	r3, [pc, #784]	@ (8012500 <__ieee754_pow+0x770>)
 80121ee:	4629      	mov	r1, r5
 80121f0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80121f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80121f8:	461a      	mov	r2, r3
 80121fa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80121fe:	4623      	mov	r3, r4
 8012200:	4682      	mov	sl, r0
 8012202:	f7ed ffb1 	bl	8000168 <__aeabi_dsub>
 8012206:	4652      	mov	r2, sl
 8012208:	462b      	mov	r3, r5
 801220a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801220e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012212:	f7ed ffab 	bl	800016c <__adddf3>
 8012216:	4602      	mov	r2, r0
 8012218:	460b      	mov	r3, r1
 801221a:	2000      	movs	r0, #0
 801221c:	49b9      	ldr	r1, [pc, #740]	@ (8012504 <__ieee754_pow+0x774>)
 801221e:	f7ee fa85 	bl	800072c <__aeabi_ddiv>
 8012222:	4602      	mov	r2, r0
 8012224:	460b      	mov	r3, r1
 8012226:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801222a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801222e:	f7ee f953 	bl	80004d8 <__aeabi_dmul>
 8012232:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012236:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 801223a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801223e:	2300      	movs	r3, #0
 8012240:	2200      	movs	r2, #0
 8012242:	46ab      	mov	fp, r5
 8012244:	106d      	asrs	r5, r5, #1
 8012246:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801224a:	9304      	str	r3, [sp, #16]
 801224c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8012250:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012254:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8012258:	4640      	mov	r0, r8
 801225a:	4649      	mov	r1, r9
 801225c:	4614      	mov	r4, r2
 801225e:	461d      	mov	r5, r3
 8012260:	f7ee f93a 	bl	80004d8 <__aeabi_dmul>
 8012264:	4602      	mov	r2, r0
 8012266:	460b      	mov	r3, r1
 8012268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801226c:	f7ed ff7c 	bl	8000168 <__aeabi_dsub>
 8012270:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012274:	4606      	mov	r6, r0
 8012276:	460f      	mov	r7, r1
 8012278:	4620      	mov	r0, r4
 801227a:	4629      	mov	r1, r5
 801227c:	f7ed ff74 	bl	8000168 <__aeabi_dsub>
 8012280:	4602      	mov	r2, r0
 8012282:	460b      	mov	r3, r1
 8012284:	4650      	mov	r0, sl
 8012286:	4659      	mov	r1, fp
 8012288:	f7ed ff6e 	bl	8000168 <__aeabi_dsub>
 801228c:	4642      	mov	r2, r8
 801228e:	464b      	mov	r3, r9
 8012290:	f7ee f922 	bl	80004d8 <__aeabi_dmul>
 8012294:	4602      	mov	r2, r0
 8012296:	460b      	mov	r3, r1
 8012298:	4630      	mov	r0, r6
 801229a:	4639      	mov	r1, r7
 801229c:	f7ed ff64 	bl	8000168 <__aeabi_dsub>
 80122a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80122a4:	f7ee f918 	bl	80004d8 <__aeabi_dmul>
 80122a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80122ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80122b0:	4610      	mov	r0, r2
 80122b2:	4619      	mov	r1, r3
 80122b4:	f7ee f910 	bl	80004d8 <__aeabi_dmul>
 80122b8:	a37b      	add	r3, pc, #492	@ (adr r3, 80124a8 <__ieee754_pow+0x718>)
 80122ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122be:	4604      	mov	r4, r0
 80122c0:	460d      	mov	r5, r1
 80122c2:	f7ee f909 	bl	80004d8 <__aeabi_dmul>
 80122c6:	a37a      	add	r3, pc, #488	@ (adr r3, 80124b0 <__ieee754_pow+0x720>)
 80122c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122cc:	f7ed ff4e 	bl	800016c <__adddf3>
 80122d0:	4622      	mov	r2, r4
 80122d2:	462b      	mov	r3, r5
 80122d4:	f7ee f900 	bl	80004d8 <__aeabi_dmul>
 80122d8:	a377      	add	r3, pc, #476	@ (adr r3, 80124b8 <__ieee754_pow+0x728>)
 80122da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122de:	f7ed ff45 	bl	800016c <__adddf3>
 80122e2:	4622      	mov	r2, r4
 80122e4:	462b      	mov	r3, r5
 80122e6:	f7ee f8f7 	bl	80004d8 <__aeabi_dmul>
 80122ea:	a375      	add	r3, pc, #468	@ (adr r3, 80124c0 <__ieee754_pow+0x730>)
 80122ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f0:	f7ed ff3c 	bl	800016c <__adddf3>
 80122f4:	4622      	mov	r2, r4
 80122f6:	462b      	mov	r3, r5
 80122f8:	f7ee f8ee 	bl	80004d8 <__aeabi_dmul>
 80122fc:	a372      	add	r3, pc, #456	@ (adr r3, 80124c8 <__ieee754_pow+0x738>)
 80122fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012302:	f7ed ff33 	bl	800016c <__adddf3>
 8012306:	4622      	mov	r2, r4
 8012308:	462b      	mov	r3, r5
 801230a:	f7ee f8e5 	bl	80004d8 <__aeabi_dmul>
 801230e:	a370      	add	r3, pc, #448	@ (adr r3, 80124d0 <__ieee754_pow+0x740>)
 8012310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012314:	f7ed ff2a 	bl	800016c <__adddf3>
 8012318:	4622      	mov	r2, r4
 801231a:	4606      	mov	r6, r0
 801231c:	460f      	mov	r7, r1
 801231e:	462b      	mov	r3, r5
 8012320:	4620      	mov	r0, r4
 8012322:	4629      	mov	r1, r5
 8012324:	f7ee f8d8 	bl	80004d8 <__aeabi_dmul>
 8012328:	4602      	mov	r2, r0
 801232a:	460b      	mov	r3, r1
 801232c:	4630      	mov	r0, r6
 801232e:	4639      	mov	r1, r7
 8012330:	f7ee f8d2 	bl	80004d8 <__aeabi_dmul>
 8012334:	4604      	mov	r4, r0
 8012336:	460d      	mov	r5, r1
 8012338:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801233c:	4642      	mov	r2, r8
 801233e:	464b      	mov	r3, r9
 8012340:	f7ed ff14 	bl	800016c <__adddf3>
 8012344:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012348:	f7ee f8c6 	bl	80004d8 <__aeabi_dmul>
 801234c:	4622      	mov	r2, r4
 801234e:	462b      	mov	r3, r5
 8012350:	f7ed ff0c 	bl	800016c <__adddf3>
 8012354:	4642      	mov	r2, r8
 8012356:	4682      	mov	sl, r0
 8012358:	468b      	mov	fp, r1
 801235a:	464b      	mov	r3, r9
 801235c:	4640      	mov	r0, r8
 801235e:	4649      	mov	r1, r9
 8012360:	f7ee f8ba 	bl	80004d8 <__aeabi_dmul>
 8012364:	2200      	movs	r2, #0
 8012366:	4b68      	ldr	r3, [pc, #416]	@ (8012508 <__ieee754_pow+0x778>)
 8012368:	4606      	mov	r6, r0
 801236a:	460f      	mov	r7, r1
 801236c:	f7ed fefe 	bl	800016c <__adddf3>
 8012370:	4652      	mov	r2, sl
 8012372:	465b      	mov	r3, fp
 8012374:	f7ed fefa 	bl	800016c <__adddf3>
 8012378:	2400      	movs	r4, #0
 801237a:	460d      	mov	r5, r1
 801237c:	4622      	mov	r2, r4
 801237e:	460b      	mov	r3, r1
 8012380:	4640      	mov	r0, r8
 8012382:	4649      	mov	r1, r9
 8012384:	f7ee f8a8 	bl	80004d8 <__aeabi_dmul>
 8012388:	2200      	movs	r2, #0
 801238a:	4680      	mov	r8, r0
 801238c:	4689      	mov	r9, r1
 801238e:	4620      	mov	r0, r4
 8012390:	4629      	mov	r1, r5
 8012392:	4b5d      	ldr	r3, [pc, #372]	@ (8012508 <__ieee754_pow+0x778>)
 8012394:	f7ed fee8 	bl	8000168 <__aeabi_dsub>
 8012398:	4632      	mov	r2, r6
 801239a:	463b      	mov	r3, r7
 801239c:	f7ed fee4 	bl	8000168 <__aeabi_dsub>
 80123a0:	4602      	mov	r2, r0
 80123a2:	460b      	mov	r3, r1
 80123a4:	4650      	mov	r0, sl
 80123a6:	4659      	mov	r1, fp
 80123a8:	f7ed fede 	bl	8000168 <__aeabi_dsub>
 80123ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80123b0:	f7ee f892 	bl	80004d8 <__aeabi_dmul>
 80123b4:	4622      	mov	r2, r4
 80123b6:	4606      	mov	r6, r0
 80123b8:	460f      	mov	r7, r1
 80123ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80123be:	462b      	mov	r3, r5
 80123c0:	f7ee f88a 	bl	80004d8 <__aeabi_dmul>
 80123c4:	4602      	mov	r2, r0
 80123c6:	460b      	mov	r3, r1
 80123c8:	4630      	mov	r0, r6
 80123ca:	4639      	mov	r1, r7
 80123cc:	f7ed fece 	bl	800016c <__adddf3>
 80123d0:	2400      	movs	r4, #0
 80123d2:	4606      	mov	r6, r0
 80123d4:	460f      	mov	r7, r1
 80123d6:	4602      	mov	r2, r0
 80123d8:	460b      	mov	r3, r1
 80123da:	4640      	mov	r0, r8
 80123dc:	4649      	mov	r1, r9
 80123de:	f7ed fec5 	bl	800016c <__adddf3>
 80123e2:	a33d      	add	r3, pc, #244	@ (adr r3, 80124d8 <__ieee754_pow+0x748>)
 80123e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e8:	4620      	mov	r0, r4
 80123ea:	460d      	mov	r5, r1
 80123ec:	f7ee f874 	bl	80004d8 <__aeabi_dmul>
 80123f0:	4642      	mov	r2, r8
 80123f2:	464b      	mov	r3, r9
 80123f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80123f8:	4620      	mov	r0, r4
 80123fa:	4629      	mov	r1, r5
 80123fc:	f7ed feb4 	bl	8000168 <__aeabi_dsub>
 8012400:	4602      	mov	r2, r0
 8012402:	460b      	mov	r3, r1
 8012404:	4630      	mov	r0, r6
 8012406:	4639      	mov	r1, r7
 8012408:	f7ed feae 	bl	8000168 <__aeabi_dsub>
 801240c:	a334      	add	r3, pc, #208	@ (adr r3, 80124e0 <__ieee754_pow+0x750>)
 801240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012412:	f7ee f861 	bl	80004d8 <__aeabi_dmul>
 8012416:	a334      	add	r3, pc, #208	@ (adr r3, 80124e8 <__ieee754_pow+0x758>)
 8012418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801241c:	4606      	mov	r6, r0
 801241e:	460f      	mov	r7, r1
 8012420:	4620      	mov	r0, r4
 8012422:	4629      	mov	r1, r5
 8012424:	f7ee f858 	bl	80004d8 <__aeabi_dmul>
 8012428:	4602      	mov	r2, r0
 801242a:	460b      	mov	r3, r1
 801242c:	4630      	mov	r0, r6
 801242e:	4639      	mov	r1, r7
 8012430:	f7ed fe9c 	bl	800016c <__adddf3>
 8012434:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012436:	4b35      	ldr	r3, [pc, #212]	@ (801250c <__ieee754_pow+0x77c>)
 8012438:	2400      	movs	r4, #0
 801243a:	4413      	add	r3, r2
 801243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012440:	f7ed fe94 	bl	800016c <__adddf3>
 8012444:	4682      	mov	sl, r0
 8012446:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012448:	468b      	mov	fp, r1
 801244a:	f7ed ffdb 	bl	8000404 <__aeabi_i2d>
 801244e:	4606      	mov	r6, r0
 8012450:	460f      	mov	r7, r1
 8012452:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012454:	4b2e      	ldr	r3, [pc, #184]	@ (8012510 <__ieee754_pow+0x780>)
 8012456:	4413      	add	r3, r2
 8012458:	e9d3 8900 	ldrd	r8, r9, [r3]
 801245c:	4652      	mov	r2, sl
 801245e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012462:	465b      	mov	r3, fp
 8012464:	f7ed fe82 	bl	800016c <__adddf3>
 8012468:	4642      	mov	r2, r8
 801246a:	464b      	mov	r3, r9
 801246c:	f7ed fe7e 	bl	800016c <__adddf3>
 8012470:	4632      	mov	r2, r6
 8012472:	463b      	mov	r3, r7
 8012474:	f7ed fe7a 	bl	800016c <__adddf3>
 8012478:	4632      	mov	r2, r6
 801247a:	463b      	mov	r3, r7
 801247c:	4620      	mov	r0, r4
 801247e:	460d      	mov	r5, r1
 8012480:	f7ed fe72 	bl	8000168 <__aeabi_dsub>
 8012484:	4642      	mov	r2, r8
 8012486:	464b      	mov	r3, r9
 8012488:	f7ed fe6e 	bl	8000168 <__aeabi_dsub>
 801248c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012490:	f7ed fe6a 	bl	8000168 <__aeabi_dsub>
 8012494:	4602      	mov	r2, r0
 8012496:	460b      	mov	r3, r1
 8012498:	4650      	mov	r0, sl
 801249a:	4659      	mov	r1, fp
 801249c:	e618      	b.n	80120d0 <__ieee754_pow+0x340>
 801249e:	2400      	movs	r4, #0
 80124a0:	e68a      	b.n	80121b8 <__ieee754_pow+0x428>
 80124a2:	2601      	movs	r6, #1
 80124a4:	e6a0      	b.n	80121e8 <__ieee754_pow+0x458>
 80124a6:	bf00      	nop
 80124a8:	4a454eef 	.word	0x4a454eef
 80124ac:	3fca7e28 	.word	0x3fca7e28
 80124b0:	93c9db65 	.word	0x93c9db65
 80124b4:	3fcd864a 	.word	0x3fcd864a
 80124b8:	a91d4101 	.word	0xa91d4101
 80124bc:	3fd17460 	.word	0x3fd17460
 80124c0:	518f264d 	.word	0x518f264d
 80124c4:	3fd55555 	.word	0x3fd55555
 80124c8:	db6fabff 	.word	0xdb6fabff
 80124cc:	3fdb6db6 	.word	0x3fdb6db6
 80124d0:	33333303 	.word	0x33333303
 80124d4:	3fe33333 	.word	0x3fe33333
 80124d8:	e0000000 	.word	0xe0000000
 80124dc:	3feec709 	.word	0x3feec709
 80124e0:	dc3a03fd 	.word	0xdc3a03fd
 80124e4:	3feec709 	.word	0x3feec709
 80124e8:	145b01f5 	.word	0x145b01f5
 80124ec:	be3e2fe0 	.word	0xbe3e2fe0
 80124f0:	7ff00000 	.word	0x7ff00000
 80124f4:	43400000 	.word	0x43400000
 80124f8:	0003988e 	.word	0x0003988e
 80124fc:	000bb679 	.word	0x000bb679
 8012500:	08013088 	.word	0x08013088
 8012504:	3ff00000 	.word	0x3ff00000
 8012508:	40080000 	.word	0x40080000
 801250c:	08013068 	.word	0x08013068
 8012510:	08013078 	.word	0x08013078
 8012514:	a39a      	add	r3, pc, #616	@ (adr r3, 8012780 <__ieee754_pow+0x9f0>)
 8012516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801251a:	4630      	mov	r0, r6
 801251c:	4639      	mov	r1, r7
 801251e:	f7ed fe25 	bl	800016c <__adddf3>
 8012522:	4642      	mov	r2, r8
 8012524:	e9cd 0100 	strd	r0, r1, [sp]
 8012528:	464b      	mov	r3, r9
 801252a:	4620      	mov	r0, r4
 801252c:	4629      	mov	r1, r5
 801252e:	f7ed fe1b 	bl	8000168 <__aeabi_dsub>
 8012532:	4602      	mov	r2, r0
 8012534:	460b      	mov	r3, r1
 8012536:	e9dd 0100 	ldrd	r0, r1, [sp]
 801253a:	f7ee fa5d 	bl	80009f8 <__aeabi_dcmpgt>
 801253e:	2800      	cmp	r0, #0
 8012540:	f47f ae09 	bne.w	8012156 <__ieee754_pow+0x3c6>
 8012544:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8012548:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801254c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8012550:	fa43 fa0a 	asr.w	sl, r3, sl
 8012554:	44da      	add	sl, fp
 8012556:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801255a:	489b      	ldr	r0, [pc, #620]	@ (80127c8 <__ieee754_pow+0xa38>)
 801255c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8012560:	4108      	asrs	r0, r1
 8012562:	ea00 030a 	and.w	r3, r0, sl
 8012566:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801256a:	f1c1 0114 	rsb	r1, r1, #20
 801256e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8012572:	4640      	mov	r0, r8
 8012574:	fa4a fa01 	asr.w	sl, sl, r1
 8012578:	f1bb 0f00 	cmp.w	fp, #0
 801257c:	4649      	mov	r1, r9
 801257e:	f04f 0200 	mov.w	r2, #0
 8012582:	bfb8      	it	lt
 8012584:	f1ca 0a00 	rsblt	sl, sl, #0
 8012588:	f7ed fdee 	bl	8000168 <__aeabi_dsub>
 801258c:	4680      	mov	r8, r0
 801258e:	4689      	mov	r9, r1
 8012590:	2400      	movs	r4, #0
 8012592:	4632      	mov	r2, r6
 8012594:	463b      	mov	r3, r7
 8012596:	4640      	mov	r0, r8
 8012598:	4649      	mov	r1, r9
 801259a:	f7ed fde7 	bl	800016c <__adddf3>
 801259e:	a37a      	add	r3, pc, #488	@ (adr r3, 8012788 <__ieee754_pow+0x9f8>)
 80125a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a4:	4620      	mov	r0, r4
 80125a6:	460d      	mov	r5, r1
 80125a8:	f7ed ff96 	bl	80004d8 <__aeabi_dmul>
 80125ac:	4642      	mov	r2, r8
 80125ae:	464b      	mov	r3, r9
 80125b0:	e9cd 0100 	strd	r0, r1, [sp]
 80125b4:	4620      	mov	r0, r4
 80125b6:	4629      	mov	r1, r5
 80125b8:	f7ed fdd6 	bl	8000168 <__aeabi_dsub>
 80125bc:	4602      	mov	r2, r0
 80125be:	460b      	mov	r3, r1
 80125c0:	4630      	mov	r0, r6
 80125c2:	4639      	mov	r1, r7
 80125c4:	f7ed fdd0 	bl	8000168 <__aeabi_dsub>
 80125c8:	a371      	add	r3, pc, #452	@ (adr r3, 8012790 <__ieee754_pow+0xa00>)
 80125ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ce:	f7ed ff83 	bl	80004d8 <__aeabi_dmul>
 80125d2:	a371      	add	r3, pc, #452	@ (adr r3, 8012798 <__ieee754_pow+0xa08>)
 80125d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d8:	4680      	mov	r8, r0
 80125da:	4689      	mov	r9, r1
 80125dc:	4620      	mov	r0, r4
 80125de:	4629      	mov	r1, r5
 80125e0:	f7ed ff7a 	bl	80004d8 <__aeabi_dmul>
 80125e4:	4602      	mov	r2, r0
 80125e6:	460b      	mov	r3, r1
 80125e8:	4640      	mov	r0, r8
 80125ea:	4649      	mov	r1, r9
 80125ec:	f7ed fdbe 	bl	800016c <__adddf3>
 80125f0:	4604      	mov	r4, r0
 80125f2:	460d      	mov	r5, r1
 80125f4:	4602      	mov	r2, r0
 80125f6:	460b      	mov	r3, r1
 80125f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125fc:	f7ed fdb6 	bl	800016c <__adddf3>
 8012600:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012604:	4680      	mov	r8, r0
 8012606:	4689      	mov	r9, r1
 8012608:	f7ed fdae 	bl	8000168 <__aeabi_dsub>
 801260c:	4602      	mov	r2, r0
 801260e:	460b      	mov	r3, r1
 8012610:	4620      	mov	r0, r4
 8012612:	4629      	mov	r1, r5
 8012614:	f7ed fda8 	bl	8000168 <__aeabi_dsub>
 8012618:	4642      	mov	r2, r8
 801261a:	4606      	mov	r6, r0
 801261c:	460f      	mov	r7, r1
 801261e:	464b      	mov	r3, r9
 8012620:	4640      	mov	r0, r8
 8012622:	4649      	mov	r1, r9
 8012624:	f7ed ff58 	bl	80004d8 <__aeabi_dmul>
 8012628:	a35d      	add	r3, pc, #372	@ (adr r3, 80127a0 <__ieee754_pow+0xa10>)
 801262a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801262e:	4604      	mov	r4, r0
 8012630:	460d      	mov	r5, r1
 8012632:	f7ed ff51 	bl	80004d8 <__aeabi_dmul>
 8012636:	a35c      	add	r3, pc, #368	@ (adr r3, 80127a8 <__ieee754_pow+0xa18>)
 8012638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801263c:	f7ed fd94 	bl	8000168 <__aeabi_dsub>
 8012640:	4622      	mov	r2, r4
 8012642:	462b      	mov	r3, r5
 8012644:	f7ed ff48 	bl	80004d8 <__aeabi_dmul>
 8012648:	a359      	add	r3, pc, #356	@ (adr r3, 80127b0 <__ieee754_pow+0xa20>)
 801264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264e:	f7ed fd8d 	bl	800016c <__adddf3>
 8012652:	4622      	mov	r2, r4
 8012654:	462b      	mov	r3, r5
 8012656:	f7ed ff3f 	bl	80004d8 <__aeabi_dmul>
 801265a:	a357      	add	r3, pc, #348	@ (adr r3, 80127b8 <__ieee754_pow+0xa28>)
 801265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012660:	f7ed fd82 	bl	8000168 <__aeabi_dsub>
 8012664:	4622      	mov	r2, r4
 8012666:	462b      	mov	r3, r5
 8012668:	f7ed ff36 	bl	80004d8 <__aeabi_dmul>
 801266c:	a354      	add	r3, pc, #336	@ (adr r3, 80127c0 <__ieee754_pow+0xa30>)
 801266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012672:	f7ed fd7b 	bl	800016c <__adddf3>
 8012676:	4622      	mov	r2, r4
 8012678:	462b      	mov	r3, r5
 801267a:	f7ed ff2d 	bl	80004d8 <__aeabi_dmul>
 801267e:	4602      	mov	r2, r0
 8012680:	460b      	mov	r3, r1
 8012682:	4640      	mov	r0, r8
 8012684:	4649      	mov	r1, r9
 8012686:	f7ed fd6f 	bl	8000168 <__aeabi_dsub>
 801268a:	4604      	mov	r4, r0
 801268c:	460d      	mov	r5, r1
 801268e:	4602      	mov	r2, r0
 8012690:	460b      	mov	r3, r1
 8012692:	4640      	mov	r0, r8
 8012694:	4649      	mov	r1, r9
 8012696:	f7ed ff1f 	bl	80004d8 <__aeabi_dmul>
 801269a:	2200      	movs	r2, #0
 801269c:	e9cd 0100 	strd	r0, r1, [sp]
 80126a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80126a4:	4620      	mov	r0, r4
 80126a6:	4629      	mov	r1, r5
 80126a8:	f7ed fd5e 	bl	8000168 <__aeabi_dsub>
 80126ac:	4602      	mov	r2, r0
 80126ae:	460b      	mov	r3, r1
 80126b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126b4:	f7ee f83a 	bl	800072c <__aeabi_ddiv>
 80126b8:	4632      	mov	r2, r6
 80126ba:	4604      	mov	r4, r0
 80126bc:	460d      	mov	r5, r1
 80126be:	463b      	mov	r3, r7
 80126c0:	4640      	mov	r0, r8
 80126c2:	4649      	mov	r1, r9
 80126c4:	f7ed ff08 	bl	80004d8 <__aeabi_dmul>
 80126c8:	4632      	mov	r2, r6
 80126ca:	463b      	mov	r3, r7
 80126cc:	f7ed fd4e 	bl	800016c <__adddf3>
 80126d0:	4602      	mov	r2, r0
 80126d2:	460b      	mov	r3, r1
 80126d4:	4620      	mov	r0, r4
 80126d6:	4629      	mov	r1, r5
 80126d8:	f7ed fd46 	bl	8000168 <__aeabi_dsub>
 80126dc:	4642      	mov	r2, r8
 80126de:	464b      	mov	r3, r9
 80126e0:	f7ed fd42 	bl	8000168 <__aeabi_dsub>
 80126e4:	4602      	mov	r2, r0
 80126e6:	460b      	mov	r3, r1
 80126e8:	2000      	movs	r0, #0
 80126ea:	4938      	ldr	r1, [pc, #224]	@ (80127cc <__ieee754_pow+0xa3c>)
 80126ec:	f7ed fd3c 	bl	8000168 <__aeabi_dsub>
 80126f0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80126f4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80126f8:	da2e      	bge.n	8012758 <__ieee754_pow+0x9c8>
 80126fa:	4652      	mov	r2, sl
 80126fc:	f000 f874 	bl	80127e8 <scalbn>
 8012700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012704:	f7ff bbed 	b.w	8011ee2 <__ieee754_pow+0x152>
 8012708:	4c31      	ldr	r4, [pc, #196]	@ (80127d0 <__ieee754_pow+0xa40>)
 801270a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801270e:	42a3      	cmp	r3, r4
 8012710:	d91a      	bls.n	8012748 <__ieee754_pow+0x9b8>
 8012712:	4b30      	ldr	r3, [pc, #192]	@ (80127d4 <__ieee754_pow+0xa44>)
 8012714:	440b      	add	r3, r1
 8012716:	4303      	orrs	r3, r0
 8012718:	d009      	beq.n	801272e <__ieee754_pow+0x99e>
 801271a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801271e:	2200      	movs	r2, #0
 8012720:	2300      	movs	r3, #0
 8012722:	f7ee f94b 	bl	80009bc <__aeabi_dcmplt>
 8012726:	3800      	subs	r0, #0
 8012728:	bf18      	it	ne
 801272a:	2001      	movne	r0, #1
 801272c:	e444      	b.n	8011fb8 <__ieee754_pow+0x228>
 801272e:	4642      	mov	r2, r8
 8012730:	464b      	mov	r3, r9
 8012732:	f7ed fd19 	bl	8000168 <__aeabi_dsub>
 8012736:	4632      	mov	r2, r6
 8012738:	463b      	mov	r3, r7
 801273a:	f7ee f953 	bl	80009e4 <__aeabi_dcmpge>
 801273e:	2800      	cmp	r0, #0
 8012740:	d1eb      	bne.n	801271a <__ieee754_pow+0x98a>
 8012742:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80127d8 <__ieee754_pow+0xa48>
 8012746:	e6fd      	b.n	8012544 <__ieee754_pow+0x7b4>
 8012748:	469a      	mov	sl, r3
 801274a:	4b24      	ldr	r3, [pc, #144]	@ (80127dc <__ieee754_pow+0xa4c>)
 801274c:	459a      	cmp	sl, r3
 801274e:	f63f aef9 	bhi.w	8012544 <__ieee754_pow+0x7b4>
 8012752:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012756:	e71b      	b.n	8012590 <__ieee754_pow+0x800>
 8012758:	4621      	mov	r1, r4
 801275a:	e7d1      	b.n	8012700 <__ieee754_pow+0x970>
 801275c:	2000      	movs	r0, #0
 801275e:	491b      	ldr	r1, [pc, #108]	@ (80127cc <__ieee754_pow+0xa3c>)
 8012760:	f7ff bb34 	b.w	8011dcc <__ieee754_pow+0x3c>
 8012764:	2000      	movs	r0, #0
 8012766:	2100      	movs	r1, #0
 8012768:	f7ff bb30 	b.w	8011dcc <__ieee754_pow+0x3c>
 801276c:	4650      	mov	r0, sl
 801276e:	4659      	mov	r1, fp
 8012770:	f7ff bb2c 	b.w	8011dcc <__ieee754_pow+0x3c>
 8012774:	460c      	mov	r4, r1
 8012776:	f7ff bb79 	b.w	8011e6c <__ieee754_pow+0xdc>
 801277a:	2400      	movs	r4, #0
 801277c:	f7ff bb64 	b.w	8011e48 <__ieee754_pow+0xb8>
 8012780:	652b82fe 	.word	0x652b82fe
 8012784:	3c971547 	.word	0x3c971547
 8012788:	00000000 	.word	0x00000000
 801278c:	3fe62e43 	.word	0x3fe62e43
 8012790:	fefa39ef 	.word	0xfefa39ef
 8012794:	3fe62e42 	.word	0x3fe62e42
 8012798:	0ca86c39 	.word	0x0ca86c39
 801279c:	be205c61 	.word	0xbe205c61
 80127a0:	72bea4d0 	.word	0x72bea4d0
 80127a4:	3e663769 	.word	0x3e663769
 80127a8:	c5d26bf1 	.word	0xc5d26bf1
 80127ac:	3ebbbd41 	.word	0x3ebbbd41
 80127b0:	af25de2c 	.word	0xaf25de2c
 80127b4:	3f11566a 	.word	0x3f11566a
 80127b8:	16bebd93 	.word	0x16bebd93
 80127bc:	3f66c16c 	.word	0x3f66c16c
 80127c0:	5555553e 	.word	0x5555553e
 80127c4:	3fc55555 	.word	0x3fc55555
 80127c8:	fff00000 	.word	0xfff00000
 80127cc:	3ff00000 	.word	0x3ff00000
 80127d0:	4090cbff 	.word	0x4090cbff
 80127d4:	3f6f3400 	.word	0x3f6f3400
 80127d8:	4090cc00 	.word	0x4090cc00
 80127dc:	3fe00000 	.word	0x3fe00000

080127e0 <fabs>:
 80127e0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80127e4:	4619      	mov	r1, r3
 80127e6:	4770      	bx	lr

080127e8 <scalbn>:
 80127e8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80127ec:	4616      	mov	r6, r2
 80127ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80127f2:	4683      	mov	fp, r0
 80127f4:	468c      	mov	ip, r1
 80127f6:	460b      	mov	r3, r1
 80127f8:	b982      	cbnz	r2, 801281c <scalbn+0x34>
 80127fa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80127fe:	4303      	orrs	r3, r0
 8012800:	d039      	beq.n	8012876 <scalbn+0x8e>
 8012802:	4b2f      	ldr	r3, [pc, #188]	@ (80128c0 <scalbn+0xd8>)
 8012804:	2200      	movs	r2, #0
 8012806:	f7ed fe67 	bl	80004d8 <__aeabi_dmul>
 801280a:	4b2e      	ldr	r3, [pc, #184]	@ (80128c4 <scalbn+0xdc>)
 801280c:	4683      	mov	fp, r0
 801280e:	429e      	cmp	r6, r3
 8012810:	468c      	mov	ip, r1
 8012812:	da0d      	bge.n	8012830 <scalbn+0x48>
 8012814:	a326      	add	r3, pc, #152	@ (adr r3, 80128b0 <scalbn+0xc8>)
 8012816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801281a:	e01b      	b.n	8012854 <scalbn+0x6c>
 801281c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8012820:	42ba      	cmp	r2, r7
 8012822:	d109      	bne.n	8012838 <scalbn+0x50>
 8012824:	4602      	mov	r2, r0
 8012826:	f7ed fca1 	bl	800016c <__adddf3>
 801282a:	4683      	mov	fp, r0
 801282c:	468c      	mov	ip, r1
 801282e:	e022      	b.n	8012876 <scalbn+0x8e>
 8012830:	460b      	mov	r3, r1
 8012832:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012836:	3a36      	subs	r2, #54	@ 0x36
 8012838:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801283c:	428e      	cmp	r6, r1
 801283e:	dd0c      	ble.n	801285a <scalbn+0x72>
 8012840:	a31d      	add	r3, pc, #116	@ (adr r3, 80128b8 <scalbn+0xd0>)
 8012842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012846:	461c      	mov	r4, r3
 8012848:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 801284c:	f361 74df 	bfi	r4, r1, #31, #1
 8012850:	4621      	mov	r1, r4
 8012852:	481d      	ldr	r0, [pc, #116]	@ (80128c8 <scalbn+0xe0>)
 8012854:	f7ed fe40 	bl	80004d8 <__aeabi_dmul>
 8012858:	e7e7      	b.n	801282a <scalbn+0x42>
 801285a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801285e:	4432      	add	r2, r6
 8012860:	428a      	cmp	r2, r1
 8012862:	dced      	bgt.n	8012840 <scalbn+0x58>
 8012864:	2a00      	cmp	r2, #0
 8012866:	dd0a      	ble.n	801287e <scalbn+0x96>
 8012868:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801286c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012870:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012874:	46ac      	mov	ip, r5
 8012876:	4658      	mov	r0, fp
 8012878:	4661      	mov	r1, ip
 801287a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 801287e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8012882:	da09      	bge.n	8012898 <scalbn+0xb0>
 8012884:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8012888:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 801288c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8012890:	480e      	ldr	r0, [pc, #56]	@ (80128cc <scalbn+0xe4>)
 8012892:	f041 011f 	orr.w	r1, r1, #31
 8012896:	e7bd      	b.n	8012814 <scalbn+0x2c>
 8012898:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801289c:	3236      	adds	r2, #54	@ 0x36
 801289e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80128a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80128a6:	4658      	mov	r0, fp
 80128a8:	4629      	mov	r1, r5
 80128aa:	2200      	movs	r2, #0
 80128ac:	4b08      	ldr	r3, [pc, #32]	@ (80128d0 <scalbn+0xe8>)
 80128ae:	e7d1      	b.n	8012854 <scalbn+0x6c>
 80128b0:	c2f8f359 	.word	0xc2f8f359
 80128b4:	01a56e1f 	.word	0x01a56e1f
 80128b8:	8800759c 	.word	0x8800759c
 80128bc:	7e37e43c 	.word	0x7e37e43c
 80128c0:	43500000 	.word	0x43500000
 80128c4:	ffff3cb0 	.word	0xffff3cb0
 80128c8:	8800759c 	.word	0x8800759c
 80128cc:	c2f8f359 	.word	0xc2f8f359
 80128d0:	3c900000 	.word	0x3c900000

080128d4 <with_errno>:
 80128d4:	b570      	push	{r4, r5, r6, lr}
 80128d6:	4604      	mov	r4, r0
 80128d8:	460d      	mov	r5, r1
 80128da:	4616      	mov	r6, r2
 80128dc:	f7fd fa30 	bl	800fd40 <__errno>
 80128e0:	4629      	mov	r1, r5
 80128e2:	6006      	str	r6, [r0, #0]
 80128e4:	4620      	mov	r0, r4
 80128e6:	bd70      	pop	{r4, r5, r6, pc}

080128e8 <xflow>:
 80128e8:	b513      	push	{r0, r1, r4, lr}
 80128ea:	4604      	mov	r4, r0
 80128ec:	4619      	mov	r1, r3
 80128ee:	4610      	mov	r0, r2
 80128f0:	b10c      	cbz	r4, 80128f6 <xflow+0xe>
 80128f2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80128f6:	e9cd 2300 	strd	r2, r3, [sp]
 80128fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128fe:	f7ed fdeb 	bl	80004d8 <__aeabi_dmul>
 8012902:	2222      	movs	r2, #34	@ 0x22
 8012904:	b002      	add	sp, #8
 8012906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801290a:	f7ff bfe3 	b.w	80128d4 <with_errno>

0801290e <__math_uflow>:
 801290e:	2200      	movs	r2, #0
 8012910:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8012914:	f7ff bfe8 	b.w	80128e8 <xflow>

08012918 <__math_oflow>:
 8012918:	2200      	movs	r2, #0
 801291a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 801291e:	f7ff bfe3 	b.w	80128e8 <xflow>
	...

08012924 <__ieee754_sqrt>:
 8012924:	4a67      	ldr	r2, [pc, #412]	@ (8012ac4 <__ieee754_sqrt+0x1a0>)
 8012926:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801292a:	438a      	bics	r2, r1
 801292c:	4606      	mov	r6, r0
 801292e:	460f      	mov	r7, r1
 8012930:	460b      	mov	r3, r1
 8012932:	4604      	mov	r4, r0
 8012934:	d10e      	bne.n	8012954 <__ieee754_sqrt+0x30>
 8012936:	4602      	mov	r2, r0
 8012938:	f7ed fdce 	bl	80004d8 <__aeabi_dmul>
 801293c:	4602      	mov	r2, r0
 801293e:	460b      	mov	r3, r1
 8012940:	4630      	mov	r0, r6
 8012942:	4639      	mov	r1, r7
 8012944:	f7ed fc12 	bl	800016c <__adddf3>
 8012948:	4606      	mov	r6, r0
 801294a:	460f      	mov	r7, r1
 801294c:	4630      	mov	r0, r6
 801294e:	4639      	mov	r1, r7
 8012950:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012954:	2900      	cmp	r1, #0
 8012956:	dc0c      	bgt.n	8012972 <__ieee754_sqrt+0x4e>
 8012958:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 801295c:	4302      	orrs	r2, r0
 801295e:	d0f5      	beq.n	801294c <__ieee754_sqrt+0x28>
 8012960:	b189      	cbz	r1, 8012986 <__ieee754_sqrt+0x62>
 8012962:	4602      	mov	r2, r0
 8012964:	f7ed fc00 	bl	8000168 <__aeabi_dsub>
 8012968:	4602      	mov	r2, r0
 801296a:	460b      	mov	r3, r1
 801296c:	f7ed fede 	bl	800072c <__aeabi_ddiv>
 8012970:	e7ea      	b.n	8012948 <__ieee754_sqrt+0x24>
 8012972:	150a      	asrs	r2, r1, #20
 8012974:	d115      	bne.n	80129a2 <__ieee754_sqrt+0x7e>
 8012976:	2100      	movs	r1, #0
 8012978:	e009      	b.n	801298e <__ieee754_sqrt+0x6a>
 801297a:	0ae3      	lsrs	r3, r4, #11
 801297c:	3a15      	subs	r2, #21
 801297e:	0564      	lsls	r4, r4, #21
 8012980:	2b00      	cmp	r3, #0
 8012982:	d0fa      	beq.n	801297a <__ieee754_sqrt+0x56>
 8012984:	e7f7      	b.n	8012976 <__ieee754_sqrt+0x52>
 8012986:	460a      	mov	r2, r1
 8012988:	e7fa      	b.n	8012980 <__ieee754_sqrt+0x5c>
 801298a:	005b      	lsls	r3, r3, #1
 801298c:	3101      	adds	r1, #1
 801298e:	02d8      	lsls	r0, r3, #11
 8012990:	d5fb      	bpl.n	801298a <__ieee754_sqrt+0x66>
 8012992:	1e48      	subs	r0, r1, #1
 8012994:	1a12      	subs	r2, r2, r0
 8012996:	f1c1 0020 	rsb	r0, r1, #32
 801299a:	fa24 f000 	lsr.w	r0, r4, r0
 801299e:	4303      	orrs	r3, r0
 80129a0:	408c      	lsls	r4, r1
 80129a2:	2600      	movs	r6, #0
 80129a4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80129a8:	2116      	movs	r1, #22
 80129aa:	07d2      	lsls	r2, r2, #31
 80129ac:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80129b0:	4632      	mov	r2, r6
 80129b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80129b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80129ba:	bf5c      	itt	pl
 80129bc:	005b      	lslpl	r3, r3, #1
 80129be:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80129c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80129c6:	bf58      	it	pl
 80129c8:	0064      	lslpl	r4, r4, #1
 80129ca:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80129ce:	107f      	asrs	r7, r7, #1
 80129d0:	0064      	lsls	r4, r4, #1
 80129d2:	1815      	adds	r5, r2, r0
 80129d4:	429d      	cmp	r5, r3
 80129d6:	bfde      	ittt	le
 80129d8:	182a      	addle	r2, r5, r0
 80129da:	1b5b      	suble	r3, r3, r5
 80129dc:	1836      	addle	r6, r6, r0
 80129de:	0fe5      	lsrs	r5, r4, #31
 80129e0:	3901      	subs	r1, #1
 80129e2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80129e6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80129ea:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80129ee:	d1f0      	bne.n	80129d2 <__ieee754_sqrt+0xae>
 80129f0:	460d      	mov	r5, r1
 80129f2:	f04f 0a20 	mov.w	sl, #32
 80129f6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80129fa:	429a      	cmp	r2, r3
 80129fc:	eb01 0c00 	add.w	ip, r1, r0
 8012a00:	db02      	blt.n	8012a08 <__ieee754_sqrt+0xe4>
 8012a02:	d113      	bne.n	8012a2c <__ieee754_sqrt+0x108>
 8012a04:	45a4      	cmp	ip, r4
 8012a06:	d811      	bhi.n	8012a2c <__ieee754_sqrt+0x108>
 8012a08:	f1bc 0f00 	cmp.w	ip, #0
 8012a0c:	eb0c 0100 	add.w	r1, ip, r0
 8012a10:	da42      	bge.n	8012a98 <__ieee754_sqrt+0x174>
 8012a12:	2900      	cmp	r1, #0
 8012a14:	db40      	blt.n	8012a98 <__ieee754_sqrt+0x174>
 8012a16:	f102 0e01 	add.w	lr, r2, #1
 8012a1a:	1a9b      	subs	r3, r3, r2
 8012a1c:	4672      	mov	r2, lr
 8012a1e:	45a4      	cmp	ip, r4
 8012a20:	bf88      	it	hi
 8012a22:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012a26:	eba4 040c 	sub.w	r4, r4, ip
 8012a2a:	4405      	add	r5, r0
 8012a2c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8012a30:	f1ba 0a01 	subs.w	sl, sl, #1
 8012a34:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8012a38:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8012a3c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8012a40:	d1db      	bne.n	80129fa <__ieee754_sqrt+0xd6>
 8012a42:	431c      	orrs	r4, r3
 8012a44:	d01a      	beq.n	8012a7c <__ieee754_sqrt+0x158>
 8012a46:	4c20      	ldr	r4, [pc, #128]	@ (8012ac8 <__ieee754_sqrt+0x1a4>)
 8012a48:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8012acc <__ieee754_sqrt+0x1a8>
 8012a4c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8012a50:	e9db 2300 	ldrd	r2, r3, [fp]
 8012a54:	f7ed fb88 	bl	8000168 <__aeabi_dsub>
 8012a58:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012a5c:	4602      	mov	r2, r0
 8012a5e:	460b      	mov	r3, r1
 8012a60:	4640      	mov	r0, r8
 8012a62:	4649      	mov	r1, r9
 8012a64:	f7ed ffb4 	bl	80009d0 <__aeabi_dcmple>
 8012a68:	b140      	cbz	r0, 8012a7c <__ieee754_sqrt+0x158>
 8012a6a:	e9d4 0100 	ldrd	r0, r1, [r4]
 8012a6e:	e9db 2300 	ldrd	r2, r3, [fp]
 8012a72:	f1b5 3fff 	cmp.w	r5, #4294967295
 8012a76:	d111      	bne.n	8012a9c <__ieee754_sqrt+0x178>
 8012a78:	4655      	mov	r5, sl
 8012a7a:	3601      	adds	r6, #1
 8012a7c:	1072      	asrs	r2, r6, #1
 8012a7e:	086b      	lsrs	r3, r5, #1
 8012a80:	07f1      	lsls	r1, r6, #31
 8012a82:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012a86:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012a8a:	bf48      	it	mi
 8012a8c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012a90:	4618      	mov	r0, r3
 8012a92:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8012a96:	e757      	b.n	8012948 <__ieee754_sqrt+0x24>
 8012a98:	4696      	mov	lr, r2
 8012a9a:	e7be      	b.n	8012a1a <__ieee754_sqrt+0xf6>
 8012a9c:	f7ed fb66 	bl	800016c <__adddf3>
 8012aa0:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012aa4:	4602      	mov	r2, r0
 8012aa6:	460b      	mov	r3, r1
 8012aa8:	4640      	mov	r0, r8
 8012aaa:	4649      	mov	r1, r9
 8012aac:	f7ed ff86 	bl	80009bc <__aeabi_dcmplt>
 8012ab0:	b120      	cbz	r0, 8012abc <__ieee754_sqrt+0x198>
 8012ab2:	1ca8      	adds	r0, r5, #2
 8012ab4:	bf08      	it	eq
 8012ab6:	3601      	addeq	r6, #1
 8012ab8:	3502      	adds	r5, #2
 8012aba:	e7df      	b.n	8012a7c <__ieee754_sqrt+0x158>
 8012abc:	1c6b      	adds	r3, r5, #1
 8012abe:	f023 0501 	bic.w	r5, r3, #1
 8012ac2:	e7db      	b.n	8012a7c <__ieee754_sqrt+0x158>
 8012ac4:	7ff00000 	.word	0x7ff00000
 8012ac8:	20000350 	.word	0x20000350
 8012acc:	20000348 	.word	0x20000348

08012ad0 <_init>:
 8012ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ad2:	bf00      	nop
 8012ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ad6:	bc08      	pop	{r3}
 8012ad8:	469e      	mov	lr, r3
 8012ada:	4770      	bx	lr

08012adc <_fini>:
 8012adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ade:	bf00      	nop
 8012ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ae2:	bc08      	pop	{r3}
 8012ae4:	469e      	mov	lr, r3
 8012ae6:	4770      	bx	lr
