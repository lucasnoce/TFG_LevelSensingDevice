
lsd_fw_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7f8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800a908  0800a908  0000b908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad80  0800ad80  0000c1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad80  0800ad80  0000bd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad88  0800ad88  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad88  0800ad88  0000bd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad8c  0800ad8c  0000bd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800ad90  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000169c  200001dc  0800af6c  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001878  0800af6c  0000c878  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c52  00000000  00000000  0000c205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eeb  00000000  00000000  00023e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  00027d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b2  00000000  00000000  000292d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4b1  00000000  00000000  0002a38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bbc6  00000000  00000000  0004583b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000937f9  00000000  00000000  00061401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4bfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006964  00000000  00000000  000f4c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000fb5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a8f0 	.word	0x0800a8f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800a8f0 	.word	0x0800a8f0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <aht20_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t aht20_init( I2C_HandleTypeDef *hi2c ){
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	if( hi2c != NULL ){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00d      	beq.n	800113a <aht20_init+0x2a>
		aht20_hi2c = hi2c;
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <aht20_init+0x38>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6013      	str	r3, [r2, #0]
		uint8_t init_cmd = AHT20_I2C_CMD_INIT;
 8001124:	23be      	movs	r3, #190	@ 0xbe
 8001126:	73fb      	strb	r3, [r7, #15]
		return aht20_hal_i2c_transmit( AHT20_I2C_ADDR_WRITE, &init_cmd, 1 );
 8001128:	f107 030f 	add.w	r3, r7, #15
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	2070      	movs	r0, #112	@ 0x70
 8001132:	f000 f901 	bl	8001338 <aht20_hal_i2c_transmit>
 8001136:	4603      	mov	r3, r0
 8001138:	e001      	b.n	800113e <aht20_init+0x2e>
	}
	return LSD_ERR_NULL_HANDLE;
 800113a:	f06f 0301 	mvn.w	r3, #1
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200001f8 	.word	0x200001f8

0800114c <aht20_update>:
		return aht20_hal_i2c_transmit( AHT20_I2C_ADDR_WRITE, &rst_cmd, 1 );
	}
	return LSD_ERR_DEVICE_BUSY;
}

int8_t aht20_update( void ){
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
	int ret = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]

	uint8_t trig_cmd[3] = {
 8001156:	4a3f      	ldr	r2, [pc, #252]	@ (8001254 <aht20_update+0x108>)
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	4611      	mov	r1, r2
 8001160:	8019      	strh	r1, [r3, #0]
 8001162:	3302      	adds	r3, #2
 8001164:	0c12      	lsrs	r2, r2, #16
 8001166:	701a      	strb	r2, [r3, #0]
		AHT20_I2C_CMD_TRIG_MEASURE,
		AHT20_I2C_TRIG_MEAS_DATA0,
		AHT20_I2C_TRIG_MEAS_DATA1
	};

	ret = aht20_hal_i2c_transmit( AHT20_I2C_ADDR_WRITE, trig_cmd, 3 );
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2203      	movs	r2, #3
 800116e:	4619      	mov	r1, r3
 8001170:	2070      	movs	r0, #112	@ 0x70
 8001172:	f000 f8e1 	bl	8001338 <aht20_hal_i2c_transmit>
 8001176:	4603      	mov	r3, r0
 8001178:	613b      	str	r3, [r7, #16]

	// wait at least 75ms
	// todo: add non-blocking function
	lsd_delay_ms( 80 );
 800117a:	2050      	movs	r0, #80	@ 0x50
 800117c:	f000 fe58 	bl	8001e30 <lsd_delay_ms>

	uint8_t retry_count = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_buf[7] = {0};
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	2100      	movs	r1, #0
 800118e:	460a      	mov	r2, r1
 8001190:	801a      	strh	r2, [r3, #0]
 8001192:	460a      	mov	r2, r1
 8001194:	709a      	strb	r2, [r3, #2]

	do{
		ret = aht20_hal_i2c_receive( AHT20_I2C_ADDR_READ, rx_buf, 7 );
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2207      	movs	r2, #7
 800119a:	4619      	mov	r1, r3
 800119c:	2071      	movs	r0, #113	@ 0x71
 800119e:	f000 f8e9 	bl	8001374 <aht20_hal_i2c_receive>
 80011a2:	4603      	mov	r3, r0
 80011a4:	613b      	str	r3, [r7, #16]
		if( ret != HAL_OK ){
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00e      	beq.n	80011ca <aht20_update+0x7e>
			aht20_data.state.byte = 0;
 80011ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001258 <aht20_update+0x10c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
			aht20_data.humidity.word = 0;
 80011b2:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <aht20_update+0x10c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	605a      	str	r2, [r3, #4]
			aht20_data.temperature.word = 0;
 80011b8:	4b27      	ldr	r3, [pc, #156]	@ (8001258 <aht20_update+0x10c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
			aht20_data.check_sum = 0;
 80011be:	4b26      	ldr	r3, [pc, #152]	@ (8001258 <aht20_update+0x10c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	731a      	strb	r2, [r3, #12]
	//		*data = aht20_data;
			return ret;
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	e040      	b.n	800124c <aht20_update+0x100>
		}

		if( ++retry_count > 10 ){
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	3301      	adds	r3, #1
 80011ce:	75fb      	strb	r3, [r7, #23]
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	2b0a      	cmp	r3, #10
 80011d4:	d902      	bls.n	80011dc <aht20_update+0x90>
			return LSD_ERR_TIMEOUT;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	e037      	b.n	800124c <aht20_update+0x100>
		}

		lsd_delay_ms( 2 );
 80011dc:	2002      	movs	r0, #2
 80011de:	f000 fe27 	bl	8001e30 <lsd_delay_ms>
	} while( ( rx_buf[0] & 0x80 ) != AHT20_I2C_STATE_NOT_BUSY );
 80011e2:	793b      	ldrb	r3, [r7, #4]
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	dbd5      	blt.n	8001196 <aht20_update+0x4a>

	aht20_data.state.byte = rx_buf[0] & 0xFF;
 80011ea:	793a      	ldrb	r2, [r7, #4]
 80011ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <aht20_update+0x10c>)
 80011ee:	701a      	strb	r2, [r3, #0]

	aht20_data.humidity.bytes[0] = rx_buf[3] & 0xF0;
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f023 030f 	bic.w	r3, r3, #15
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <aht20_update+0x10c>)
 80011fa:	711a      	strb	r2, [r3, #4]
	aht20_data.humidity.bytes[1] = rx_buf[2];
 80011fc:	79ba      	ldrb	r2, [r7, #6]
 80011fe:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <aht20_update+0x10c>)
 8001200:	715a      	strb	r2, [r3, #5]
	aht20_data.humidity.bytes[2] = rx_buf[1];
 8001202:	797a      	ldrb	r2, [r7, #5]
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <aht20_update+0x10c>)
 8001206:	719a      	strb	r2, [r3, #6]
	aht20_data.humidity.word = ( aht20_data.humidity.word >> 4 ) & 0x0FFFFFFF;
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <aht20_update+0x10c>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	4a12      	ldr	r2, [pc, #72]	@ (8001258 <aht20_update+0x10c>)
 8001210:	6053      	str	r3, [r2, #4]

	aht20_data.temperature.bytes[0] = rx_buf[5];
 8001212:	7a7a      	ldrb	r2, [r7, #9]
 8001214:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <aht20_update+0x10c>)
 8001216:	721a      	strb	r2, [r3, #8]
	aht20_data.temperature.bytes[1] = rx_buf[4];
 8001218:	7a3a      	ldrb	r2, [r7, #8]
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <aht20_update+0x10c>)
 800121c:	725a      	strb	r2, [r3, #9]
	aht20_data.temperature.bytes[2] = rx_buf[3] & 0x0F;
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <aht20_update+0x10c>)
 8001228:	729a      	strb	r2, [r3, #10]

	aht20_data.check_sum = rx_buf[6];
 800122a:	7aba      	ldrb	r2, [r7, #10]
 800122c:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <aht20_update+0x10c>)
 800122e:	731a      	strb	r2, [r3, #12]

	if( aht20_data.check_sum != calculate_crc8( &rx_buf[0], 6 ) ){
 8001230:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <aht20_update+0x10c>)
 8001232:	7b1c      	ldrb	r4, [r3, #12]
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2106      	movs	r1, #6
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f8b9 	bl	80013b0 <calculate_crc8>
 800123e:	4603      	mov	r3, r0
 8001240:	429c      	cmp	r4, r3
 8001242:	d002      	beq.n	800124a <aht20_update+0xfe>
		return LSD_ERR_CRC_CHECK;
 8001244:	f06f 0304 	mvn.w	r3, #4
 8001248:	e000      	b.n	800124c <aht20_update+0x100>
	}

//	*data = aht20_data; // copy the contents of aht20_data to the variable pointed by data

	return LSD_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	371c      	adds	r7, #28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	0800a908 	.word	0x0800a908
 8001258:	200001fc 	.word	0x200001fc

0800125c <aht20_get_temperature_C>:

bool aht20_is_calibrated( void ){
	return aht20_data.state.bit.calibration ? true : false;
}

float aht20_get_temperature_C( void ){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
	float temp_raw = (float) aht20_data.temperature.word;
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <aht20_get_temperature_C+0x68>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fd14 	bl	8000c94 <__aeabi_ui2f>
 800126c:	4603      	mov	r3, r0
 800126e:	607b      	str	r3, [r7, #4]
	return (float) ( ( ( temp_raw / 1024.0 ) / 1024.0 ) * 200.0 ) - 50.0;
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff f8d9 	bl	8000428 <__aeabi_f2d>
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <aht20_get_temperature_C+0x6c>)
 800127c:	f7ff fa56 	bl	800072c <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <aht20_get_temperature_C+0x6c>)
 800128e:	f7ff fa4d 	bl	800072c <__aeabi_ddiv>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <aht20_get_temperature_C+0x70>)
 80012a0:	f7ff f91a 	bl	80004d8 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fbec 	bl	8000a88 <__aeabi_d2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4907      	ldr	r1, [pc, #28]	@ (80012d0 <aht20_get_temperature_C+0x74>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fc3b 	bl	8000b30 <__aeabi_fsub>
 80012ba:	4603      	mov	r3, r0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200001fc 	.word	0x200001fc
 80012c8:	40900000 	.word	0x40900000
 80012cc:	40690000 	.word	0x40690000
 80012d0:	42480000 	.word	0x42480000

080012d4 <aht20_get_humidity_RH>:

float aht20_get_humidity_RH( void ){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	float rh_raw = (float) aht20_data.humidity.word;
 80012da:	4b14      	ldr	r3, [pc, #80]	@ (800132c <aht20_get_humidity_RH+0x58>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fcd8 	bl	8000c94 <__aeabi_ui2f>
 80012e4:	4603      	mov	r3, r0
 80012e6:	607b      	str	r3, [r7, #4]
	return (float) ( ( rh_raw / 1024.0 ) / 1024.0 ) * 100.0;
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff f89d 	bl	8000428 <__aeabi_f2d>
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <aht20_get_humidity_RH+0x5c>)
 80012f4:	f7ff fa1a 	bl	800072c <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <aht20_get_humidity_RH+0x5c>)
 8001306:	f7ff fa11 	bl	800072c <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fbb9 	bl	8000a88 <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	4906      	ldr	r1, [pc, #24]	@ (8001334 <aht20_get_humidity_RH+0x60>)
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fd12 	bl	8000d44 <__aeabi_fmul>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200001fc 	.word	0x200001fc
 8001330:	40900000 	.word	0x40900000
 8001334:	42c80000 	.word	0x42c80000

08001338 <aht20_hal_i2c_transmit>:


/* ==========================================================================================================
 * Local Functions Implementation
 */
static int8_t aht20_hal_i2c_transmit( uint16_t dev_addr, uint8_t *p_buf, uint16_t buf_size ){
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af02      	add	r7, sp, #8
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	80fb      	strh	r3, [r7, #6]
 8001344:	4613      	mov	r3, r2
 8001346:	80bb      	strh	r3, [r7, #4]
	int8_t ret = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]
	LSD_I2C_IRQ_DEV_ID_DMA_TX = LSD_I2C_IRQ_DEV_ID_AHT20;
#elif defined( LSD_CONFIG_I2C_IT )
	ret = HAL_I2C_Master_Transmit_IT( aht20_hi2c, dev_addr, p_buf, buf_size );
	LSD_I2C_IRQ_DEV_ID_IT_TX = LSD_I2C_IRQ_DEV_ID_AHT20;
#else
	ret = HAL_I2C_Master_Transmit( aht20_hi2c, dev_addr, p_buf, buf_size, 1000 );
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <aht20_hal_i2c_transmit+0x38>)
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	88bb      	ldrh	r3, [r7, #4]
 8001352:	88f9      	ldrh	r1, [r7, #6]
 8001354:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001358:	9200      	str	r2, [sp, #0]
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	f002 fcfe 	bl	8003d5c <HAL_I2C_Master_Transmit>
 8001360:	4603      	mov	r3, r0
 8001362:	73fb      	strb	r3, [r7, #15]
#endif /* LSD_CONFIG_I2C_DMA || LSD_CONFIG_I2C_IT */

	return ret;
 8001364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200001f8 	.word	0x200001f8

08001374 <aht20_hal_i2c_receive>:

static int8_t aht20_hal_i2c_receive( uint16_t dev_addr, uint8_t *p_buf, uint16_t buf_size ){
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af02      	add	r7, sp, #8
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	80fb      	strh	r3, [r7, #6]
 8001380:	4613      	mov	r3, r2
 8001382:	80bb      	strh	r3, [r7, #4]
	int8_t ret = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]
	LSD_I2C_IRQ_DEV_ID_DMA_RX = LSD_I2C_IRQ_DEV_ID_AHT20;
#elif defined( LSD_CONFIG_I2C_IT )
	ret = HAL_I2C_Master_Receive_IT( aht20_hi2c, dev_addr, p_buf, buf_size );
	LSD_I2C_IRQ_DEV_ID_IT_RX = LSD_I2C_IRQ_DEV_ID_AHT20;
#else
	ret = HAL_I2C_Master_Receive( aht20_hi2c, dev_addr, p_buf, buf_size, 1000 );
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <aht20_hal_i2c_receive+0x38>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	88bb      	ldrh	r3, [r7, #4]
 800138e:	88f9      	ldrh	r1, [r7, #6]
 8001390:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001394:	9200      	str	r2, [sp, #0]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	f002 fdde 	bl	8003f58 <HAL_I2C_Master_Receive>
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]
#endif /* LSD_CONFIG_I2C_DMA || LSD_CONFIG_I2C_IT */

	return ret;
 80013a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200001f8 	.word	0x200001f8

080013b0 <calculate_crc8>:

static uint8_t calculate_crc8( uint8_t *data, uint8_t length ){
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 80013bc:	23ff      	movs	r3, #255	@ 0xff
 80013be:	73fb      	strb	r3, [r7, #15]
    uint8_t polynomial = 0x31;
 80013c0:	2331      	movs	r3, #49	@ 0x31
 80013c2:	733b      	strb	r3, [r7, #12]

	for (uint8_t byte_idx=0; byte_idx<length; byte_idx++){
 80013c4:	2300      	movs	r3, #0
 80013c6:	73bb      	strb	r3, [r7, #14]
 80013c8:	e022      	b.n	8001410 <calculate_crc8+0x60>
		crc ^= data[byte_idx];
 80013ca:	7bbb      	ldrb	r3, [r7, #14]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	781a      	ldrb	r2, [r3, #0]
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	4053      	eors	r3, r2
 80013d6:	73fb      	strb	r3, [r7, #15]
		for (uint8_t bit_idx=8; bit_idx>0; --bit_idx){
 80013d8:	2308      	movs	r3, #8
 80013da:	737b      	strb	r3, [r7, #13]
 80013dc:	e012      	b.n	8001404 <calculate_crc8+0x54>
			if (crc & 0x80){
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da08      	bge.n	80013f8 <calculate_crc8+0x48>
				crc = ( crc << 1 ) ^ polynomial;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	b25a      	sxtb	r2, r3
 80013ec:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80013f0:	4053      	eors	r3, r2
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	e002      	b.n	80013fe <calculate_crc8+0x4e>
			}
			else{
				crc <<= 1;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
		for (uint8_t bit_idx=8; bit_idx>0; --bit_idx){
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	3b01      	subs	r3, #1
 8001402:	737b      	strb	r3, [r7, #13]
 8001404:	7b7b      	ldrb	r3, [r7, #13]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1e9      	bne.n	80013de <calculate_crc8+0x2e>
	for (uint8_t byte_idx=0; byte_idx<length; byte_idx++){
 800140a:	7bbb      	ldrb	r3, [r7, #14]
 800140c:	3301      	adds	r3, #1
 800140e:	73bb      	strb	r3, [r7, #14]
 8001410:	7bba      	ldrb	r2, [r7, #14]
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	429a      	cmp	r2, r3
 8001416:	d3d8      	bcc.n	80013ca <calculate_crc8+0x1a>
			}
		}
	}

    return crc;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <ajsr04m_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t ajsr04m_init( TIM_HandleTypeDef *htim ){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	if ( htim != NULL ){
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d01d      	beq.n	800146e <ajsr04m_init+0x4a>
		p_ajsr04m_htim = htim;
 8001432:	4a12      	ldr	r2, [pc, #72]	@ (800147c <ajsr04m_init+0x58>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6013      	str	r3, [r2, #0]

		ajsr04m_data.port = US_ECHO_GPIO_Port;
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <ajsr04m_init+0x5c>)
 800143a:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <ajsr04m_init+0x60>)
 800143c:	601a      	str	r2, [r3, #0]
		ajsr04m_data.pin_echo = US_ECHO_Pin;
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <ajsr04m_init+0x5c>)
 8001440:	2201      	movs	r2, #1
 8001442:	809a      	strh	r2, [r3, #4]
		ajsr04m_data.pin_trig = US_TRIG_Pin;
 8001444:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <ajsr04m_init+0x5c>)
 8001446:	2202      	movs	r2, #2
 8001448:	80da      	strh	r2, [r3, #6]
		ajsr04m_data.tof_ticks = 0;
 800144a:	4b0d      	ldr	r3, [pc, #52]	@ (8001480 <ajsr04m_init+0x5c>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
		ajsr04m_data.measuring = false;
 8001450:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <ajsr04m_init+0x5c>)
 8001452:	2200      	movs	r2, #0
 8001454:	731a      	strb	r2, [r3, #12]
		ajsr04m_data.tof = 0.0;
 8001456:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <ajsr04m_init+0x5c>)
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	611a      	str	r2, [r3, #16]

		return HAL_TIM_Base_Start( p_ajsr04m_htim );
 800145e:	4b07      	ldr	r3, [pc, #28]	@ (800147c <ajsr04m_init+0x58>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f005 f81e 	bl	80064a4 <HAL_TIM_Base_Start>
 8001468:	4603      	mov	r3, r0
 800146a:	b25b      	sxtb	r3, r3
 800146c:	e001      	b.n	8001472 <ajsr04m_init+0x4e>
	}
	return LSD_ERR_NULL_HANDLE;
 800146e:	f06f 0301 	mvn.w	r3, #1
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000020c 	.word	0x2000020c
 8001480:	20000210 	.word	0x20000210
 8001484:	40010c00 	.word	0x40010c00

08001488 <ajsr04m_callback_handler_echo_start>:
		return ajsr04m_data.tof;
	}
	return LSD_ERR_DEVICE_BUSY;
}

void ajsr04m_callback_handler_echo_start( void ){
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Start( p_ajsr04m_htim );
	__HAL_TIM_SET_COUNTER( p_ajsr04m_htim, 0 );
 800148c:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <ajsr04m_callback_handler_echo_start+0x24>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	@ 0x24
//	__HAL_TIM_CLEAR_FLAG(p_ajsr04m_htim, TIM_FLAG_UPDATE);
	ajsr04m_data.tof_ticks = 0;
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <ajsr04m_callback_handler_echo_start+0x28>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
	ajsr04m_data.measuring = true;
 800149c:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <ajsr04m_callback_handler_echo_start+0x28>)
 800149e:	2201      	movs	r2, #1
 80014a0:	731a      	strb	r2, [r3, #12]
	return;
 80014a2:	bf00      	nop
}
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	2000020c 	.word	0x2000020c
 80014b0:	20000210 	.word	0x20000210

080014b4 <ajsr04m_callback_handler_echo_finish>:

void ajsr04m_callback_handler_echo_finish( void ){
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
	ajsr04m_data.tof_ticks = __HAL_TIM_GET_COUNTER( p_ajsr04m_htim );
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <ajsr04m_callback_handler_echo_finish+0x20>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <ajsr04m_callback_handler_echo_finish+0x24>)
 80014c2:	6093      	str	r3, [r2, #8]
	ajsr04m_data.measuring = false;
 80014c4:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <ajsr04m_callback_handler_echo_finish+0x24>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	731a      	strb	r2, [r3, #12]
//	tim_flag = __HAL_TIM_GET_FLAG(p_ajsr04m_htim, TIM_FLAG_UPDATE);
//	HAL_TIM_Base_Stop( p_ajsr04m_htim );
	return;
 80014ca:	bf00      	nop
}
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	2000020c 	.word	0x2000020c
 80014d8:	20000210 	.word	0x20000210

080014dc <le910r1br_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t le910r1br_init( UART_HandleTypeDef *huart, TIM_HandleTypeDef *htim ){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
	if( huart != NULL && htim != NULL ){
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d01f      	beq.n	800152c <le910r1br_init+0x50>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d01c      	beq.n	800152c <le910r1br_init+0x50>
		p_modem_huart  = huart;
 80014f2:	4a11      	ldr	r2, [pc, #68]	@ (8001538 <le910r1br_init+0x5c>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6013      	str	r3, [r2, #0]
		p_modem_htim   = htim;
 80014f8:	4a10      	ldr	r2, [pc, #64]	@ (800153c <le910r1br_init+0x60>)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	6013      	str	r3, [r2, #0]

		modem_data.tim_channel  = TIM_CHANNEL_3;	// todo: select correct channel
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <le910r1br_init+0x64>)
 8001500:	2208      	movs	r2, #8
 8001502:	701a      	strb	r2, [r3, #0]
		modem_data.port_pwr		= uLTE_PWR_GPIO_Port;
 8001504:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <le910r1br_init+0x64>)
 8001506:	4a0f      	ldr	r2, [pc, #60]	@ (8001544 <le910r1br_init+0x68>)
 8001508:	605a      	str	r2, [r3, #4]
		modem_data.pin_pwr 		= uLTE_PWR_Pin;
 800150a:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <le910r1br_init+0x64>)
 800150c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001510:	811a      	strh	r2, [r3, #8]
		modem_data.ready 		= false;
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <le910r1br_init+0x64>)
 8001514:	2200      	movs	r2, #0
 8001516:	729a      	strb	r2, [r3, #10]

		HAL_GPIO_WritePin( modem_data.port_pwr, modem_data.pin_pwr, GPIO_PIN_RESET );
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <le910r1br_init+0x64>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4a08      	ldr	r2, [pc, #32]	@ (8001540 <le910r1br_init+0x64>)
 800151e:	8911      	ldrh	r1, [r2, #8]
 8001520:	2200      	movs	r2, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f002 faa5 	bl	8003a72 <HAL_GPIO_WritePin>

		return LSD_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	e001      	b.n	8001530 <le910r1br_init+0x54>
	}
	return LSD_ERR_NULL_HANDLE;
 800152c:	f06f 0301 	mvn.w	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000224 	.word	0x20000224
 800153c:	20000228 	.word	0x20000228
 8001540:	2000022c 	.word	0x2000022c
 8001544:	40010c00 	.word	0x40010c00

08001548 <le910r1br_power_off>:
*/

	return;
}

void le910r1br_power_off( void ){
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( modem_data.port_pwr, modem_data.pin_pwr, GPIO_PIN_SET );
 800154c:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <le910r1br_power_off+0x30>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4a09      	ldr	r2, [pc, #36]	@ (8001578 <le910r1br_power_off+0x30>)
 8001552:	8911      	ldrh	r1, [r2, #8]
 8001554:	2201      	movs	r2, #1
 8001556:	4618      	mov	r0, r3
 8001558:	f002 fa8b 	bl	8003a72 <HAL_GPIO_WritePin>
	HAL_Delay( LE910R1BR_TURN_OFF_PULSE_MS );
 800155c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001560:	f001 ff08 	bl	8003374 <HAL_Delay>
	HAL_GPIO_WritePin( modem_data.port_pwr, modem_data.pin_pwr, GPIO_PIN_RESET );
 8001564:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <le910r1br_power_off+0x30>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4a03      	ldr	r2, [pc, #12]	@ (8001578 <le910r1br_power_off+0x30>)
 800156a:	8911      	ldrh	r1, [r2, #8]
 800156c:	2200      	movs	r2, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fa7f 	bl	8003a72 <HAL_GPIO_WritePin>
	HAL_TIM_OC_Start_IT( p_modem_htim, modem_data.tim_channel );

	__HAL_TIM_SET_COMPARE( p_modem_htim, modem_data.tim_channel, \
		( __HAL_TIM_GET_COMPARE( p_modem_htim, modem_data.tim_channel ) + LE910R1BR_TURN_OFF_PULSE_MS ) );
*/
	return;
 8001574:	bf00      	nop
}
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000022c 	.word	0x2000022c

0800157c <le910r1br_check_at>:

int8_t le910r1br_sw_reboot( void ){
	return modem_send_at_cmd( AT_CMD_ONLY, AT_CMD_REBOOT, NULL, 0 );
}

int8_t le910r1br_check_at( void ){
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	return modem_send_at_cmd( AT_ONLY, AT_CMD_AT, NULL, 0 );
 8001580:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <le910r1br_check_at+0x18>)
 8001582:	6819      	ldr	r1, [r3, #0]
 8001584:	2300      	movs	r3, #0
 8001586:	2200      	movs	r2, #0
 8001588:	2000      	movs	r0, #0
 800158a:	f000 f9df 	bl	800194c <modem_send_at_cmd>
 800158e:	4603      	mov	r3, r0
}
 8001590:	4618      	mov	r0, r3
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000000 	.word	0x20000000

08001598 <le910r1br_check_cpin>:

int8_t le910r1br_check_cpin( void ){
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	return modem_send_at_cmd( AT_CMD_ASK, AT_CMD_CPIN, NULL, 0 );
 800159c:	4b04      	ldr	r3, [pc, #16]	@ (80015b0 <le910r1br_check_cpin+0x18>)
 800159e:	6819      	ldr	r1, [r3, #0]
 80015a0:	2300      	movs	r3, #0
 80015a2:	2200      	movs	r2, #0
 80015a4:	2002      	movs	r0, #2
 80015a6:	f000 f9d1 	bl	800194c <modem_send_at_cmd>
 80015aa:	4603      	mov	r3, r0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000004 	.word	0x20000004

080015b4 <modem_at_cmd_concat>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static int8_t modem_at_cmd_concat( AT_CMD_TYPE_E type, uint8_t prm_count, MODEM_AT_CMD_T *cmd_list, char *cmd_concat/*, uint8_t cmd_concat_size */){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60ba      	str	r2, [r7, #8]
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4603      	mov	r3, r0
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	460b      	mov	r3, r1
 80015c4:	73bb      	strb	r3, [r7, #14]
	if( cmd_list->cmd == NULL ){
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <modem_at_cmd_concat+0x20>
		return LSD_ERR_NULL_HANDLE;
 80015ce:	f06f 0301 	mvn.w	r3, #1
 80015d2:	e0e3      	b.n	800179c <modem_at_cmd_concat+0x1e8>
	}

	uint8_t cmd_concat_size = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	77fb      	strb	r3, [r7, #31]
	cmd_concat_size += strlen( cmd_list->cmd );
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe fdb7 	bl	8000150 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	7ffb      	ldrb	r3, [r7, #31]
 80015e8:	4413      	add	r3, r2
 80015ea:	77fb      	strb	r3, [r7, #31]

	for( int i=0; i<prm_count; i++){
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
 80015f0:	e010      	b.n	8001614 <modem_at_cmd_concat+0x60>
		cmd_concat_size += strlen( cmd_list->prm[i] );
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe fda6 	bl	8000150 <strlen>
 8001604:	4603      	mov	r3, r0
 8001606:	b2da      	uxtb	r2, r3
 8001608:	7ffb      	ldrb	r3, [r7, #31]
 800160a:	4413      	add	r3, r2
 800160c:	77fb      	strb	r3, [r7, #31]
	for( int i=0; i<prm_count; i++){
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	3301      	adds	r3, #1
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	7bbb      	ldrb	r3, [r7, #14]
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbea      	blt.n	80015f2 <modem_at_cmd_concat+0x3e>
	}
	cmd_concat_size++;	// Add only one '\0' at the end
 800161c:	7ffb      	ldrb	r3, [r7, #31]
 800161e:	3301      	adds	r3, #1
 8001620:	77fb      	strb	r3, [r7, #31]

	memset( cmd_concat, 0, cmd_concat_size );
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	461a      	mov	r2, r3
 8001626:	2100      	movs	r1, #0
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f007 fad8 	bl	8008bde <memset>

	switch( type ){
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	2b04      	cmp	r3, #4
 8001632:	f200 80b1 	bhi.w	8001798 <modem_at_cmd_concat+0x1e4>
 8001636:	a201      	add	r2, pc, #4	@ (adr r2, 800163c <modem_at_cmd_concat+0x88>)
 8001638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163c:	08001651 	.word	0x08001651
 8001640:	08001677 	.word	0x08001677
 8001644:	080016a9 	.word	0x080016a9
 8001648:	080016d7 	.word	0x080016d7
 800164c:	08001709 	.word	0x08001709
		case AT_ONLY:
			strcat( cmd_concat, cmd_list->cmd );
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f007 fac9 	bl	8008bee <strcat>
			strcat( cmd_concat, "\r\n" );
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7fe fd77 	bl	8000150 <strlen>
 8001662:	4603      	mov	r3, r0
 8001664:	461a      	mov	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	4a4e      	ldr	r2, [pc, #312]	@ (80017a4 <modem_at_cmd_concat+0x1f0>)
 800166c:	8811      	ldrh	r1, [r2, #0]
 800166e:	7892      	ldrb	r2, [r2, #2]
 8001670:	8019      	strh	r1, [r3, #0]
 8001672:	709a      	strb	r2, [r3, #2]
			break;
 8001674:	e091      	b.n	800179a <modem_at_cmd_concat+0x1e6>

		case AT_CMD_ONLY:
			strcpy( cmd_concat, AT_CMD_AT );
 8001676:	4b4c      	ldr	r3, [pc, #304]	@ (80017a8 <modem_at_cmd_concat+0x1f4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4619      	mov	r1, r3
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f007 fb4c 	bl	8008d1a <strcpy>
			strcat( cmd_concat, cmd_list->cmd );
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4619      	mov	r1, r3
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f007 fab0 	bl	8008bee <strcat>
			strcat( cmd_concat, "\r\n" );
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7fe fd5e 	bl	8000150 <strlen>
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	4a41      	ldr	r2, [pc, #260]	@ (80017a4 <modem_at_cmd_concat+0x1f0>)
 800169e:	8811      	ldrh	r1, [r2, #0]
 80016a0:	7892      	ldrb	r2, [r2, #2]
 80016a2:	8019      	strh	r1, [r3, #0]
 80016a4:	709a      	strb	r2, [r3, #2]
			break;
 80016a6:	e078      	b.n	800179a <modem_at_cmd_concat+0x1e6>

		case AT_CMD_ASK:
			strcpy( cmd_concat, AT_CMD_AT );
 80016a8:	4b3f      	ldr	r3, [pc, #252]	@ (80017a8 <modem_at_cmd_concat+0x1f4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f007 fb33 	bl	8008d1a <strcpy>
			strcat( cmd_concat, cmd_list->cmd );
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f007 fa97 	bl	8008bee <strcat>
			strcat( cmd_concat, "?\r\n" );
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7fe fd45 	bl	8000150 <strlen>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	4a37      	ldr	r2, [pc, #220]	@ (80017ac <modem_at_cmd_concat+0x1f8>)
 80016d0:	6810      	ldr	r0, [r2, #0]
 80016d2:	6018      	str	r0, [r3, #0]
			break;
 80016d4:	e061      	b.n	800179a <modem_at_cmd_concat+0x1e6>

		case AT_CMD_TEST:
			strcpy( cmd_concat, AT_CMD_AT );
 80016d6:	4b34      	ldr	r3, [pc, #208]	@ (80017a8 <modem_at_cmd_concat+0x1f4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4619      	mov	r1, r3
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f007 fb1c 	bl	8008d1a <strcpy>
			strcat( cmd_concat, cmd_list->cmd );
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4619      	mov	r1, r3
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f007 fa80 	bl	8008bee <strcat>
			strcat( cmd_concat, "=?\r\n" );
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7fe fd2e 	bl	8000150 <strlen>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a2c      	ldr	r2, [pc, #176]	@ (80017b0 <modem_at_cmd_concat+0x1fc>)
 80016fe:	6810      	ldr	r0, [r2, #0]
 8001700:	6018      	str	r0, [r3, #0]
 8001702:	7912      	ldrb	r2, [r2, #4]
 8001704:	711a      	strb	r2, [r3, #4]
			break;
 8001706:	e048      	b.n	800179a <modem_at_cmd_concat+0x1e6>

		case AT_CMD_PRM:
			strcpy( cmd_concat, AT_CMD_AT );
 8001708:	4b27      	ldr	r3, [pc, #156]	@ (80017a8 <modem_at_cmd_concat+0x1f4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f007 fb03 	bl	8008d1a <strcpy>
			strcat( cmd_concat, cmd_list->cmd );
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f007 fa67 	bl	8008bee <strcat>
			strcat( cmd_concat, "=" );
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7fe fd15 	bl	8000150 <strlen>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4921      	ldr	r1, [pc, #132]	@ (80017b4 <modem_at_cmd_concat+0x200>)
 8001730:	461a      	mov	r2, r3
 8001732:	460b      	mov	r3, r1
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	8013      	strh	r3, [r2, #0]
			for( int i=0; i<prm_count; i++){
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	e01b      	b.n	8001776 <modem_at_cmd_concat+0x1c2>
				if( i != 0 ){
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00b      	beq.n	800175c <modem_at_cmd_concat+0x1a8>
					strcat( cmd_concat, "," );
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7fe fd03 	bl	8000150 <strlen>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	4919      	ldr	r1, [pc, #100]	@ (80017b8 <modem_at_cmd_concat+0x204>)
 8001754:	461a      	mov	r2, r3
 8001756:	460b      	mov	r3, r1
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	8013      	strh	r3, [r2, #0]
				}
				strcat( cmd_concat, cmd_list->prm[i] );
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f007 fa3f 	bl	8008bee <strcat>
			for( int i=0; i<prm_count; i++){
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3301      	adds	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	7bbb      	ldrb	r3, [r7, #14]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	429a      	cmp	r2, r3
 800177c:	dbdf      	blt.n	800173e <modem_at_cmd_concat+0x18a>
			}
			strcat( cmd_concat, "\r\n" );
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7fe fce6 	bl	8000150 <strlen>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	4a05      	ldr	r2, [pc, #20]	@ (80017a4 <modem_at_cmd_concat+0x1f0>)
 800178e:	8811      	ldrh	r1, [r2, #0]
 8001790:	7892      	ldrb	r2, [r2, #2]
 8001792:	8019      	strh	r1, [r3, #0]
 8001794:	709a      	strb	r2, [r3, #2]
			break;
 8001796:	e000      	b.n	800179a <modem_at_cmd_concat+0x1e6>

		default:
			break;
 8001798:	bf00      	nop
	}

	return LSD_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	0800a9bc 	.word	0x0800a9bc
 80017a8:	20000000 	.word	0x20000000
 80017ac:	0800a9c0 	.word	0x0800a9c0
 80017b0:	0800a9c4 	.word	0x0800a9c4
 80017b4:	0800a9cc 	.word	0x0800a9cc
 80017b8:	0800a9d0 	.word	0x0800a9d0

080017bc <modem_send_command_receive_response>:

static int8_t modem_send_command_receive_response( AT_CMD_TYPE_E type, uint8_t prm_count, MODEM_AT_CMD_T *cmd_list, char *cmd_concat ){
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60ba      	str	r2, [r7, #8]
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4603      	mov	r3, r0
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	460b      	mov	r3, r1
 80017cc:	73bb      	strb	r3, [r7, #14]
	int8_t ret = LSD_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	75bb      	strb	r3, [r7, #22]

	ret = modem_at_cmd_concat( type, prm_count, cmd_list, cmd_concat );
 80017d2:	7bb9      	ldrb	r1, [r7, #14]
 80017d4:	7bf8      	ldrb	r0, [r7, #15]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	f7ff feeb 	bl	80015b4 <modem_at_cmd_concat>
 80017de:	4603      	mov	r3, r0
 80017e0:	75bb      	strb	r3, [r7, #22]

	if( ret != LSD_OK )
 80017e2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <modem_send_command_receive_response+0x34>
	{
		return ret;
 80017ea:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80017ee:	e05b      	b.n	80018a8 <modem_send_command_receive_response+0xec>
	}

	ret = modem_try_take_buffer( MODEM_TAKE_RX_BUF, 10 );
 80017f0:	210a      	movs	r1, #10
 80017f2:	2000      	movs	r0, #0
 80017f4:	f000 f860 	bl	80018b8 <modem_try_take_buffer>
 80017f8:	4603      	mov	r3, r0
 80017fa:	75bb      	strb	r3, [r7, #22]
	if( ret != LSD_OK ){
 80017fc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <modem_send_command_receive_response+0x4e>
		return ret;
 8001804:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001808:	e04e      	b.n	80018a8 <modem_send_command_receive_response+0xec>
	}

	ret = HAL_UART_Transmit( p_modem_huart, (const uint8_t *) cmd_concat, strlen( cmd_concat ), 1000 );
 800180a:	4b29      	ldr	r3, [pc, #164]	@ (80018b0 <modem_send_command_receive_response+0xf4>)
 800180c:	681c      	ldr	r4, [r3, #0]
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7fe fc9e 	bl	8000150 <strlen>
 8001814:	4603      	mov	r3, r0
 8001816:	b29a      	uxth	r2, r3
 8001818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4620      	mov	r0, r4
 8001820:	f005 fdb4 	bl	800738c <HAL_UART_Transmit>
 8001824:	4603      	mov	r3, r0
 8001826:	75bb      	strb	r3, [r7, #22]

	uint8_t rx_pos = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	75fb      	strb	r3, [r7, #23]
	uint8_t c = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	757b      	strb	r3, [r7, #21]

	HAL_UART_Receive_IT( p_modem_huart, &c, 1 );
 8001830:	4b1f      	ldr	r3, [pc, #124]	@ (80018b0 <modem_send_command_receive_response+0xf4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f107 0115 	add.w	r1, r7, #21
 8001838:	2201      	movs	r2, #1
 800183a:	4618      	mov	r0, r3
 800183c:	f005 fe31 	bl	80074a2 <HAL_UART_Receive_IT>

	do{
		if( p_modem_huart->RxState != HAL_UART_STATE_BUSY_RX ){
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <modem_send_command_receive_response+0xf4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b22      	cmp	r3, #34	@ 0x22
 800184c:	d00e      	beq.n	800186c <modem_send_command_receive_response+0xb0>
			modem_rx_buffer.msg[rx_pos++] = c;
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	75fa      	strb	r2, [r7, #23]
 8001854:	461a      	mov	r2, r3
 8001856:	7d79      	ldrb	r1, [r7, #21]
 8001858:	4b16      	ldr	r3, [pc, #88]	@ (80018b4 <modem_send_command_receive_response+0xf8>)
 800185a:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT( p_modem_huart, &c, 1 );
 800185c:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <modem_send_command_receive_response+0xf4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f107 0115 	add.w	r1, r7, #21
 8001864:	2201      	movs	r2, #1
 8001866:	4618      	mov	r0, r3
 8001868:	f005 fe1b 	bl	80074a2 <HAL_UART_Receive_IT>
		}
	} while( modem_rx_buffer.msg[rx_pos] != '\r' && modem_rx_buffer.msg[rx_pos] != '\n' );
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	4a11      	ldr	r2, [pc, #68]	@ (80018b4 <modem_send_command_receive_response+0xf8>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	2b0d      	cmp	r3, #13
 8001874:	d004      	beq.n	8001880 <modem_send_command_receive_response+0xc4>
 8001876:	7dfb      	ldrb	r3, [r7, #23]
 8001878:	4a0e      	ldr	r2, [pc, #56]	@ (80018b4 <modem_send_command_receive_response+0xf8>)
 800187a:	5cd3      	ldrb	r3, [r2, r3]
 800187c:	2b0a      	cmp	r3, #10
 800187e:	d1df      	bne.n	8001840 <modem_send_command_receive_response+0x84>

	if( rx_pos < ( LSD_BUF_SIZE - 1 ) ){
 8001880:	7dfb      	ldrb	r3, [r7, #23]
 8001882:	2b3e      	cmp	r3, #62	@ 0x3e
 8001884:	d807      	bhi.n	8001896 <modem_send_command_receive_response+0xda>
		modem_rx_buffer.msg[++rx_pos] = 0;
 8001886:	7dfb      	ldrb	r3, [r7, #23]
 8001888:	3301      	adds	r3, #1
 800188a:	75fb      	strb	r3, [r7, #23]
 800188c:	7dfb      	ldrb	r3, [r7, #23]
 800188e:	4a09      	ldr	r2, [pc, #36]	@ (80018b4 <modem_send_command_receive_response+0xf8>)
 8001890:	2100      	movs	r1, #0
 8001892:	54d1      	strb	r1, [r2, r3]
 8001894:	e003      	b.n	800189e <modem_send_command_receive_response+0xe2>
	}
	else{
		modem_rx_buffer.msg[LSD_BUF_SIZE - 1] = 0;
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <modem_send_command_receive_response+0xf8>)
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	}
	modem_rx_buffer.busy = false;
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <modem_send_command_receive_response+0xf8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	return LSD_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd90      	pop	{r4, r7, pc}
 80018b0:	20000224 	.word	0x20000224
 80018b4:	200014fc 	.word	0x200014fc

080018b8 <modem_try_take_buffer>:

static int8_t modem_try_take_buffer( uint8_t buf_rx_tx, uint8_t max_tries ){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	460a      	mov	r2, r1
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	4613      	mov	r3, r2
 80018c6:	71bb      	strb	r3, [r7, #6]
	uint8_t try_count = max_tries;
 80018c8:	79bb      	ldrb	r3, [r7, #6]
 80018ca:	73fb      	strb	r3, [r7, #15]

	switch( buf_rx_tx ){
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00e      	beq.n	80018f0 <modem_try_take_buffer+0x38>
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d024      	beq.n	8001920 <modem_try_take_buffer+0x68>
 80018d6:	e02f      	b.n	8001938 <modem_try_take_buffer+0x80>
		case MODEM_TAKE_RX_BUF:
			while( modem_rx_buffer.busy ){
				HAL_Delay( 10 );
 80018d8:	200a      	movs	r0, #10
 80018da:	f001 fd4b 	bl	8003374 <HAL_Delay>
				if( --try_count <= 0 ){
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <modem_try_take_buffer+0x38>
					return LSD_ERR_TIMEOUT;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e025      	b.n	800193c <modem_try_take_buffer+0x84>
			while( modem_rx_buffer.busy ){
 80018f0:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <modem_try_take_buffer+0x8c>)
 80018f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1ed      	bne.n	80018d8 <modem_try_take_buffer+0x20>
				}
			}
			modem_rx_buffer.busy = true;
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <modem_try_take_buffer+0x8c>)
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			return LSD_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	e019      	b.n	800193c <modem_try_take_buffer+0x84>

		case MODEM_TAKE_TX_BUF:
			while( modem_tx_buffer.busy ){
				HAL_Delay( 10 );
 8001908:	200a      	movs	r0, #10
 800190a:	f001 fd33 	bl	8003374 <HAL_Delay>
				if( --try_count <= 0 ){
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	3b01      	subs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <modem_try_take_buffer+0x68>
					return LSD_ERR_TIMEOUT;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	e00d      	b.n	800193c <modem_try_take_buffer+0x84>
			while( modem_tx_buffer.busy ){
 8001920:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <modem_try_take_buffer+0x90>)
 8001922:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1ed      	bne.n	8001908 <modem_try_take_buffer+0x50>
				}
			}
			modem_tx_buffer.busy = true;
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <modem_try_take_buffer+0x90>)
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			return LSD_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	e001      	b.n	800193c <modem_try_take_buffer+0x84>

		default:
			return LSD_ERR_WRONG_PARAM;
 8001938:	f06f 0302 	mvn.w	r3, #2
	}
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200014fc 	.word	0x200014fc
 8001948:	20001540 	.word	0x20001540

0800194c <modem_send_at_cmd>:

static int8_t modem_send_at_cmd( AT_CMD_TYPE_E type, const char *cmd, char **prm, uint8_t prm_count ){
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	461a      	mov	r2, r3
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	4613      	mov	r3, r2
 800195e:	73bb      	strb	r3, [r7, #14]
	int8_t ret = LSD_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	75fb      	strb	r3, [r7, #23]
//	ret = modem_try_take_buffer( MODEM_TAKE_TX_BUF, 10 );
//	if( ret != LSD_OK ){
//		return ret;
//	}

	modem_cmd.cmd = cmd;
 8001964:	4a08      	ldr	r2, [pc, #32]	@ (8001988 <modem_send_at_cmd+0x3c>)
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	6013      	str	r3, [r2, #0]
	modem_cmd.prm = prm;
 800196a:	4a07      	ldr	r2, [pc, #28]	@ (8001988 <modem_send_at_cmd+0x3c>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6053      	str	r3, [r2, #4]

	return modem_send_command_receive_response( type, prm_count, &modem_cmd, (char *) modem_tx_buffer.msg );
 8001970:	7bb9      	ldrb	r1, [r7, #14]
 8001972:	7bf8      	ldrb	r0, [r7, #15]
 8001974:	4b05      	ldr	r3, [pc, #20]	@ (800198c <modem_send_at_cmd+0x40>)
 8001976:	4a04      	ldr	r2, [pc, #16]	@ (8001988 <modem_send_at_cmd+0x3c>)
 8001978:	f7ff ff20 	bl	80017bc <modem_send_command_receive_response>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000238 	.word	0x20000238
 800198c:	20001540 	.word	0x20001540

08001990 <leds_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t leds_init( TIM_HandleTypeDef *htim ){
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	if( htim != NULL ){
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d04c      	beq.n	8001a38 <leds_init+0xa8>
		p_leds_htim = htim;
 800199e:	4a29      	ldr	r2, [pc, #164]	@ (8001a44 <leds_init+0xb4>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6013      	str	r3, [r2, #0]

		leds_data[LSD_LED_BLUE].channel = TIM_CHANNEL_1;
 80019a4:	4b28      	ldr	r3, [pc, #160]	@ (8001a48 <leds_init+0xb8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
		leds_data[LSD_LED_RED].channel = TIM_CHANNEL_2;
 80019aa:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <leds_init+0xb8>)
 80019ac:	2204      	movs	r2, #4
 80019ae:	741a      	strb	r2, [r3, #16]

		leds_data[LSD_LED_BLUE].pin = LED_INFO1_Pin;
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <leds_init+0xb8>)
 80019b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019b6:	811a      	strh	r2, [r3, #8]
		leds_data[LSD_LED_RED].pin = LED_INFO2_Pin;
 80019b8:	4b23      	ldr	r3, [pc, #140]	@ (8001a48 <leds_init+0xb8>)
 80019ba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019be:	831a      	strh	r2, [r3, #24]

		leds_data[LSD_LED_BLUE].port = LED_INFO1_GPIO_Port;
 80019c0:	4b21      	ldr	r3, [pc, #132]	@ (8001a48 <leds_init+0xb8>)
 80019c2:	4a22      	ldr	r2, [pc, #136]	@ (8001a4c <leds_init+0xbc>)
 80019c4:	605a      	str	r2, [r3, #4]
		leds_data[LSD_LED_RED].port = LED_INFO2_GPIO_Port;
 80019c6:	4b20      	ldr	r3, [pc, #128]	@ (8001a48 <leds_init+0xb8>)
 80019c8:	4a20      	ldr	r2, [pc, #128]	@ (8001a4c <leds_init+0xbc>)
 80019ca:	615a      	str	r2, [r3, #20]

		leds_data[LSD_LED_BLUE].state = GPIO_PIN_SET;
 80019cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a48 <leds_init+0xb8>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	729a      	strb	r2, [r3, #10]
		leds_data[LSD_LED_RED].state = GPIO_PIN_SET;
 80019d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a48 <leds_init+0xb8>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	769a      	strb	r2, [r3, #26]

		leds_data[LSD_LED_BLUE].blink_half_period = 0;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <leds_init+0xb8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	819a      	strh	r2, [r3, #12]
		leds_data[LSD_LED_RED].blink_half_period = 0;
 80019de:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <leds_init+0xb8>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	839a      	strh	r2, [r3, #28]

		leds_data[LSD_LED_BLUE].single_blink = false;
 80019e4:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <leds_init+0xb8>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	739a      	strb	r2, [r3, #14]
		leds_data[LSD_LED_RED].single_blink = false;
 80019ea:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <leds_init+0xb8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	779a      	strb	r2, [r3, #30]

//		HAL_GPIO_WritePin( LED_INFO1_GPIO_Port, LED_INFO1_Pin, GPIO_PIN_RESET );
//		HAL_GPIO_WritePin( LED_INFO2_GPIO_Port, LED_INFO2_Pin, GPIO_PIN_RESET );

		int8_t ret = HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]
		ret = HAL_TIM_Base_Start_IT( htim );
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f004 fdc5 	bl	8006584 <HAL_TIM_Base_Start_IT>
 80019fa:	4603      	mov	r3, r0
 80019fc:	73fb      	strb	r3, [r7, #15]
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	e013      	b.n	8001a2c <leds_init+0x9c>
			ret += HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[i].channel );
 8001a04:	4b0f      	ldr	r3, [pc, #60]	@ (8001a44 <leds_init+0xb4>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	490f      	ldr	r1, [pc, #60]	@ (8001a48 <leds_init+0xb8>)
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	440b      	add	r3, r1
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	4619      	mov	r1, r3
 8001a14:	4610      	mov	r0, r2
 8001a16:	f004 fe5f 	bl	80066d8 <HAL_TIM_OC_Stop_IT>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	4413      	add	r3, r2
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	73fb      	strb	r3, [r7, #15]
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	dde8      	ble.n	8001a04 <leds_init+0x74>
		}

		return ret;
 8001a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a36:	e001      	b.n	8001a3c <leds_init+0xac>
	}
	return LSD_ERR_NULL_HANDLE;
 8001a38:	f06f 0301 	mvn.w	r3, #1
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000240 	.word	0x20000240
 8001a48:	20000244 	.word	0x20000244
 8001a4c:	40011000 	.word	0x40011000

08001a50 <leds_turn_on>:

int8_t leds_turn_on( uint8_t led ){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
	int8_t ret = LSD_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	73fb      	strb	r3, [r7, #15]
	if( led < 0 || led > LSD_ALL_LEDS ){
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d902      	bls.n	8001a6a <leds_turn_on+0x1a>
		return LSD_ERR_WRONG_PARAM;
 8001a64:	f06f 0302 	mvn.w	r3, #2
 8001a68:	e043      	b.n	8001af2 <leds_turn_on+0xa2>
	}
	else if( led < LSD_ALL_LEDS ){
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d817      	bhi.n	8001aa0 <leds_turn_on+0x50>
		HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[led].channel );
 8001a70:	4b22      	ldr	r3, [pc, #136]	@ (8001afc <leds_turn_on+0xac>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	4922      	ldr	r1, [pc, #136]	@ (8001b00 <leds_turn_on+0xb0>)
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	440b      	add	r3, r1
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4610      	mov	r0, r2
 8001a82:	f004 fe29 	bl	80066d8 <HAL_TIM_OC_Stop_IT>
		leds_data[led].state = GPIO_PIN_SET;
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	4a1d      	ldr	r2, [pc, #116]	@ (8001b00 <leds_turn_on+0xb0>)
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	4413      	add	r3, r2
 8001a8e:	330a      	adds	r3, #10
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
		leds_write_value( led, GPIO_PIN_SET );
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	2101      	movs	r1, #1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 f8c7 	bl	8001c2c <leds_write_value>
 8001a9e:	e026      	b.n	8001aee <leds_turn_on+0x9e>
	}
	else{
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	e020      	b.n	8001ae8 <leds_turn_on+0x98>
			ret += HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[i].channel );
 8001aa6:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <leds_turn_on+0xac>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4915      	ldr	r1, [pc, #84]	@ (8001b00 <leds_turn_on+0xb0>)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	440b      	add	r3, r1
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	f004 fe0e 	bl	80066d8 <HAL_TIM_OC_Stop_IT>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	73fb      	strb	r3, [r7, #15]
			leds_data[i].state = GPIO_PIN_SET;
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b00 <leds_turn_on+0xb0>)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	4413      	add	r3, r2
 8001ad0:	330a      	adds	r3, #10
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
			leds_write_value( i, GPIO_PIN_SET );
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2101      	movs	r1, #1
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 f8a5 	bl	8001c2c <leds_write_value>
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	dddb      	ble.n	8001aa6 <leds_turn_on+0x56>
		}
	}
	return ret;
 8001aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000240 	.word	0x20000240
 8001b00:	20000244 	.word	0x20000244

08001b04 <leds_turn_off>:

int8_t leds_turn_off( uint8_t led ){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
	if( led < 0 || led > LSD_ALL_LEDS ){
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d902      	bls.n	8001b1a <leds_turn_off+0x16>
		return LSD_ERR_WRONG_PARAM;
 8001b14:	f06f 0302 	mvn.w	r3, #2
 8001b18:	e03c      	b.n	8001b94 <leds_turn_off+0x90>
	}
	else if( led < LSD_ALL_LEDS ){
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d817      	bhi.n	8001b50 <leds_turn_off+0x4c>
		HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[led].channel );
 8001b20:	4b1e      	ldr	r3, [pc, #120]	@ (8001b9c <leds_turn_off+0x98>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	491e      	ldr	r1, [pc, #120]	@ (8001ba0 <leds_turn_off+0x9c>)
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	440b      	add	r3, r1
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4610      	mov	r0, r2
 8001b32:	f004 fdd1 	bl	80066d8 <HAL_TIM_OC_Stop_IT>
		leds_data[led].state = GPIO_PIN_RESET;
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4a19      	ldr	r2, [pc, #100]	@ (8001ba0 <leds_turn_off+0x9c>)
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	4413      	add	r3, r2
 8001b3e:	330a      	adds	r3, #10
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
		leds_write_value( led, GPIO_PIN_RESET );
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 f86f 	bl	8001c2c <leds_write_value>
 8001b4e:	e020      	b.n	8001b92 <leds_turn_off+0x8e>
	}
	else{
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	e01a      	b.n	8001b8c <leds_turn_off+0x88>
			HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[i].channel );
 8001b56:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <leds_turn_off+0x98>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4911      	ldr	r1, [pc, #68]	@ (8001ba0 <leds_turn_off+0x9c>)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	440b      	add	r3, r1
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	4610      	mov	r0, r2
 8001b68:	f004 fdb6 	bl	80066d8 <HAL_TIM_OC_Stop_IT>
			leds_data[i].state = GPIO_PIN_RESET;
 8001b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba0 <leds_turn_off+0x9c>)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	4413      	add	r3, r2
 8001b74:	330a      	adds	r3, #10
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
			leds_write_value( i, GPIO_PIN_RESET );
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 f853 	bl	8001c2c <leds_write_value>
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	dde1      	ble.n	8001b56 <leds_turn_off+0x52>
		}
	}
	return LSD_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000240 	.word	0x20000240
 8001ba0:	20000244 	.word	0x20000244

08001ba4 <leds_callback_handler>:
		}
	}
	return LSD_OK;
}

void leds_callback_handler( uint8_t led ){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
	leds_data[led].state = ! leds_data[led].state;
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c24 <leds_callback_handler+0x80>)
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	4413      	add	r3, r2
 8001bb6:	330a      	adds	r3, #10
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bf0c      	ite	eq
 8001bbe:	2301      	moveq	r3, #1
 8001bc0:	2300      	movne	r3, #0
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4a16      	ldr	r2, [pc, #88]	@ (8001c24 <leds_callback_handler+0x80>)
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	4413      	add	r3, r2
 8001bce:	330a      	adds	r3, #10
 8001bd0:	460a      	mov	r2, r1
 8001bd2:	701a      	strb	r2, [r3, #0]
	leds_write_value( led, leds_data[led].state );
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	4a13      	ldr	r2, [pc, #76]	@ (8001c24 <leds_callback_handler+0x80>)
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	4413      	add	r3, r2
 8001bdc:	330a      	adds	r3, #10
 8001bde:	781a      	ldrb	r2, [r3, #0]
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 f821 	bl	8001c2c <leds_write_value>

	if( leds_data[led].single_blink == true ){
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	4a0d      	ldr	r2, [pc, #52]	@ (8001c24 <leds_callback_handler+0x80>)
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	4413      	add	r3, r2
 8001bf2:	330e      	adds	r3, #14
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00b      	beq.n	8001c12 <leds_callback_handler+0x6e>
		HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[led].channel );
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <leds_callback_handler+0x84>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	4908      	ldr	r1, [pc, #32]	@ (8001c24 <leds_callback_handler+0x80>)
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	440b      	add	r3, r1
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f004 fd64 	bl	80066d8 <HAL_TIM_OC_Stop_IT>
	}
	else{
		leds_timer_set_compare_value( led );
	}

	return;
 8001c10:	e004      	b.n	8001c1c <leds_callback_handler+0x78>
		leds_timer_set_compare_value( led );
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 f827 	bl	8001c68 <leds_timer_set_compare_value>
	return;
 8001c1a:	bf00      	nop
}
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000244 	.word	0x20000244
 8001c28:	20000240 	.word	0x20000240

08001c2c <leds_write_value>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static inline void leds_write_value( uint8_t led, uint8_t value ){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	460a      	mov	r2, r1
 8001c36:	71fb      	strb	r3, [r7, #7]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin( leds_data[led].port, leds_data[led].pin, value );
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4a09      	ldr	r2, [pc, #36]	@ (8001c64 <leds_write_value+0x38>)
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	4413      	add	r3, r2
 8001c44:	3304      	adds	r3, #4
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	4a06      	ldr	r2, [pc, #24]	@ (8001c64 <leds_write_value+0x38>)
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	4413      	add	r3, r2
 8001c50:	3308      	adds	r3, #8
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	79ba      	ldrb	r2, [r7, #6]
 8001c56:	4619      	mov	r1, r3
 8001c58:	f001 ff0b 	bl	8003a72 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin( LED_INFO2_GPIO_Port, LED_INFO2_Pin, value );
//			break;
//		default:
//			break;
//	}
	return;
 8001c5c:	bf00      	nop
}
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000244 	.word	0x20000244

08001c68 <leds_timer_set_compare_value>:

static inline void leds_timer_set_compare_value( uint8_t led ){
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
	uint32_t current_count = __HAL_TIM_GET_COUNTER( p_leds_htim );
 8001c72:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <leds_timer_set_compare_value+0x8c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7a:	60fb      	str	r3, [r7, #12]
	uint32_t new_count = current_count + (uint32_t) leds_data[led].blink_half_period;
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf8 <leds_timer_set_compare_value+0x90>)
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	4413      	add	r3, r2
 8001c84:	330c      	adds	r3, #12
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE( p_leds_htim, leds_data[led].channel, new_count );
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	4a19      	ldr	r2, [pc, #100]	@ (8001cf8 <leds_timer_set_compare_value+0x90>)
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	4413      	add	r3, r2
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d105      	bne.n	8001caa <leds_timer_set_compare_value+0x42>
 8001c9e:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <leds_timer_set_compare_value+0x8c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	635a      	str	r2, [r3, #52]	@ 0x34
	return;
 8001ca8:	e01f      	b.n	8001cea <leds_timer_set_compare_value+0x82>
	__HAL_TIM_SET_COMPARE( p_leds_htim, leds_data[led].channel, new_count );
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <leds_timer_set_compare_value+0x90>)
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	4413      	add	r3, r2
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d105      	bne.n	8001cc4 <leds_timer_set_compare_value+0x5c>
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf4 <leds_timer_set_compare_value+0x8c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	6393      	str	r3, [r2, #56]	@ 0x38
	return;
 8001cc2:	e012      	b.n	8001cea <leds_timer_set_compare_value+0x82>
	__HAL_TIM_SET_COMPARE( p_leds_htim, leds_data[led].channel, new_count );
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <leds_timer_set_compare_value+0x90>)
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	4413      	add	r3, r2
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d105      	bne.n	8001cde <leds_timer_set_compare_value+0x76>
 8001cd2:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <leds_timer_set_compare_value+0x8c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	63d3      	str	r3, [r2, #60]	@ 0x3c
	return;
 8001cdc:	e005      	b.n	8001cea <leds_timer_set_compare_value+0x82>
	__HAL_TIM_SET_COMPARE( p_leds_htim, leds_data[led].channel, new_count );
 8001cde:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <leds_timer_set_compare_value+0x8c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	6413      	str	r3, [r2, #64]	@ 0x40
	return;
 8001ce8:	bf00      	nop
}
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000240 	.word	0x20000240
 8001cf8:	20000244 	.word	0x20000244

08001cfc <HAL_TIM_OC_DelayElapsedCallback>:
//void HAL_I2C_MasterTxCpltCallback ( I2C_HandleTypeDef *hi2c );
//void HAL_I2C_MasterRxCpltCallback ( I2C_HandleTypeDef *hi2c );
//void HAL_I2C_ErrorCallback ( I2C_HandleTypeDef *hi2c );


void HAL_TIM_OC_DelayElapsedCallback( TIM_HandleTypeDef *htim ){
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
    if( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 ){
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	7f1b      	ldrb	r3, [r3, #28]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d103      	bne.n	8001d14 <HAL_TIM_OC_DelayElapsedCallback+0x18>
    	leds_callback_handler( LSD_LED_BLUE );
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f7ff ff49 	bl	8001ba4 <leds_callback_handler>
    	leds_callback_handler( LSD_LED_RED );
    }
//    else if( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3 ){
//    	le910r1br_turn_on_callback_handle();
//    }
    return;
 8001d12:	e007      	b.n	8001d24 <HAL_TIM_OC_DelayElapsedCallback+0x28>
    else if( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 ){
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7f1b      	ldrb	r3, [r3, #28]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d103      	bne.n	8001d24 <HAL_TIM_OC_DelayElapsedCallback+0x28>
    	leds_callback_handler( LSD_LED_RED );
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f7ff ff41 	bl	8001ba4 <leds_callback_handler>
    return;
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
}
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin ){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == US_ECHO_Pin ){
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d10c      	bne.n	8001d56 <HAL_GPIO_EXTI_Callback+0x2a>
		if( HAL_GPIO_ReadPin( US_ECHO_GPIO_Port, US_ECHO_Pin ) == GPIO_PIN_SET ){
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4808      	ldr	r0, [pc, #32]	@ (8001d60 <HAL_GPIO_EXTI_Callback+0x34>)
 8001d40:	f001 fe80 	bl	8003a44 <HAL_GPIO_ReadPin>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d102      	bne.n	8001d50 <HAL_GPIO_EXTI_Callback+0x24>
			ajsr04m_callback_handler_echo_start();
 8001d4a:	f7ff fb9d 	bl	8001488 <ajsr04m_callback_handler_echo_start>
		}
		else{
			ajsr04m_callback_handler_echo_finish();
		}
	}
	return;
 8001d4e:	e002      	b.n	8001d56 <HAL_GPIO_EXTI_Callback+0x2a>
			ajsr04m_callback_handler_echo_finish();
 8001d50:	f7ff fbb0 	bl	80014b4 <ajsr04m_callback_handler_echo_finish>
	return;
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
}
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40010c00 	.word	0x40010c00

08001d64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart ) {
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 ){
//		le910r1br_rx_handler();
//		modem_rx_buffer.busy = false;
	}
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart ) {
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 ){
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a05      	ldr	r2, [pc, #20]	@ (8001d9c <HAL_UART_TxCpltCallback+0x24>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d103      	bne.n	8001d92 <HAL_UART_TxCpltCallback+0x1a>
//		le910r1br_rx_handler();
		modem_tx_buffer.busy = false;
 8001d8a:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <HAL_UART_TxCpltCallback+0x28>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	20001540 	.word	0x20001540

08001da4 <lsd_common_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t lsd_common_init( TIM_HandleTypeDef *htim, RTC_HandleTypeDef *hrtc ){
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
	if ( htim != NULL && hrtc != NULL ){
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00a      	beq.n	8001dca <lsd_common_init+0x26>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d007      	beq.n	8001dca <lsd_common_init+0x26>
		p_lsd_htim = htim;
 8001dba:	4a07      	ldr	r2, [pc, #28]	@ (8001dd8 <lsd_common_init+0x34>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6013      	str	r3, [r2, #0]
		p_lsd_hrtc = hrtc;
 8001dc0:	4a06      	ldr	r2, [pc, #24]	@ (8001ddc <lsd_common_init+0x38>)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6013      	str	r3, [r2, #0]
//		lsd_common_data.channel = TIM_CHANNEL_3;
//		return HAL_TIM_Base_Start_IT( htim );
		return LSD_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e001      	b.n	8001dce <lsd_common_init+0x2a>
	}
	return LSD_ERR_NULL_HANDLE;
 8001dca:	f06f 0301 	mvn.w	r3, #1
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	20000264 	.word	0x20000264
 8001ddc:	20000268 	.word	0x20000268

08001de0 <lsd_delay_us>:

void lsd_delay_us( uint32_t time_us ){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER( p_lsd_htim, 0 );
 8001de8:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <lsd_delay_us+0x4c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	@ 0x24
	int ret = HAL_TIM_Base_Start( p_lsd_htim );
 8001df2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <lsd_delay_us+0x4c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 fb54 	bl	80064a4 <HAL_TIM_Base_Start>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60fb      	str	r3, [r7, #12]
	if( ret != HAL_OK ){
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10d      	bne.n	8001e22 <lsd_delay_us+0x42>
		return;
	}
	while( __HAL_TIM_GET_COUNTER( p_lsd_htim ) < time_us );
 8001e06:	bf00      	nop
 8001e08:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <lsd_delay_us+0x4c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d8f8      	bhi.n	8001e08 <lsd_delay_us+0x28>
	HAL_TIM_Base_Stop( p_lsd_htim );
 8001e16:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <lsd_delay_us+0x4c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f004 fb8c 	bl	8006538 <HAL_TIM_Base_Stop>
	return;
 8001e20:	e000      	b.n	8001e24 <lsd_delay_us+0x44>
		return;
 8001e22:	bf00      	nop
}
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000264 	.word	0x20000264

08001e30 <lsd_delay_ms>:

void lsd_delay_ms( uint32_t time_ms ){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	for( int i=0; i<time_ms; i++ ){
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e006      	b.n	8001e4c <lsd_delay_ms+0x1c>
		lsd_delay_us( 1000 );
 8001e3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e42:	f7ff ffcd 	bl	8001de0 <lsd_delay_us>
	for( int i=0; i<time_ms; i++ ){
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d8f4      	bhi.n	8001e3e <lsd_delay_ms+0xe>
	}
	return;
 8001e54:	bf00      	nop
}
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <lsd_get_rtc_timestamp>:
	}

    return;
}

void lsd_get_rtc_timestamp( LSD_TIMESTAMP_T *timestamp ){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetTime( p_lsd_hrtc, &sTime, RTC_FORMAT_BIN );
 8001e64:	4b21      	ldr	r3, [pc, #132]	@ (8001eec <lsd_get_rtc_timestamp+0x90>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f107 010c 	add.w	r1, r7, #12
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fd12 	bl	8005898 <HAL_RTC_GetTime>
	HAL_RTC_GetDate( p_lsd_hrtc, &sDate, RTC_FORMAT_BIN );
 8001e74:	4b1d      	ldr	r3, [pc, #116]	@ (8001eec <lsd_get_rtc_timestamp+0x90>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f107 0108 	add.w	r1, r7, #8
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 fe98 	bl	8005bb4 <HAL_RTC_GetDate>

	timestamp->year		= sDate.Year;
 8001e84:	7afa      	ldrb	r2, [r7, #11]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	701a      	strb	r2, [r3, #0]
	timestamp->month	= sDate.Month;
 8001e8a:	7a7b      	ldrb	r3, [r7, #9]
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	b2d9      	uxtb	r1, r3
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	7853      	ldrb	r3, [r2, #1]
 8001e96:	f361 0303 	bfi	r3, r1, #0, #4
 8001e9a:	7053      	strb	r3, [r2, #1]
	timestamp->day		= sDate.Date;
 8001e9c:	7abb      	ldrb	r3, [r7, #10]
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	b2d9      	uxtb	r1, r3
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	7893      	ldrb	r3, [r2, #2]
 8001ea8:	f361 0304 	bfi	r3, r1, #0, #5
 8001eac:	7093      	strb	r3, [r2, #2]
	timestamp->hour		= sTime.Hours;
 8001eae:	7b3b      	ldrb	r3, [r7, #12]
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	b2d9      	uxtb	r1, r3
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	78d3      	ldrb	r3, [r2, #3]
 8001eba:	f361 0304 	bfi	r3, r1, #0, #5
 8001ebe:	70d3      	strb	r3, [r2, #3]
	timestamp->minute	= sTime.Minutes;
 8001ec0:	7b7b      	ldrb	r3, [r7, #13]
 8001ec2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ec6:	b2d9      	uxtb	r1, r3
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	7913      	ldrb	r3, [r2, #4]
 8001ecc:	f361 0305 	bfi	r3, r1, #0, #6
 8001ed0:	7113      	strb	r3, [r2, #4]
	timestamp->second	= sTime.Seconds;
 8001ed2:	7bbb      	ldrb	r3, [r7, #14]
 8001ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ed8:	b2d9      	uxtb	r1, r3
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	7953      	ldrb	r3, [r2, #5]
 8001ede:	f361 0305 	bfi	r3, r1, #0, #6
 8001ee2:	7153      	strb	r3, [r2, #5]

	return;
 8001ee4:	bf00      	nop
}
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000268 	.word	0x20000268

08001ef0 <lsd_analyze_data>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

void lsd_analyze_data( LSD_LOG_DATA_T *p_log_data ){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	p_recent_log_data = p_log_data;
 8001ef8:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <lsd_analyze_data+0x20>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6013      	str	r3, [r2, #0]
	update_thresold_values();
 8001efe:	f000 f809 	bl	8001f14 <update_thresold_values>
//	lsd_log_read_batch( -LSD_RECENT_LOG_SIZE, p_recent_log_data );
	categoryze_recent_data();
 8001f02:	f000 f859 	bl	8001fb8 <categoryze_recent_data>
	return;
 8001f06:	bf00      	nop
}
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200002ac 	.word	0x200002ac

08001f14 <update_thresold_values>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static void update_thresold_values( void ){
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
	lsd_thres[LSD_THRES_CLIM_TEMP].very_low		= LSD_THRES_CLIM_TEMP_VL;
 8001f18:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <update_thresold_values+0x6c>)
 8001f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001f84 <update_thresold_values+0x70>)
 8001f1c:	601a      	str	r2, [r3, #0]
	lsd_thres[LSD_THRES_CLIM_TEMP].low			= LSD_THRES_CLIM_TEMP_L;
 8001f1e:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <update_thresold_values+0x6c>)
 8001f20:	4a19      	ldr	r2, [pc, #100]	@ (8001f88 <update_thresold_values+0x74>)
 8001f22:	605a      	str	r2, [r3, #4]
	lsd_thres[LSD_THRES_CLIM_TEMP].high			= LSD_THRES_CLIM_TEMP_H;
 8001f24:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <update_thresold_values+0x6c>)
 8001f26:	4a19      	ldr	r2, [pc, #100]	@ (8001f8c <update_thresold_values+0x78>)
 8001f28:	609a      	str	r2, [r3, #8]
	lsd_thres[LSD_THRES_CLIM_TEMP].very_high	= LSD_THRES_CLIM_TEMP_VH;
 8001f2a:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <update_thresold_values+0x6c>)
 8001f2c:	4a18      	ldr	r2, [pc, #96]	@ (8001f90 <update_thresold_values+0x7c>)
 8001f2e:	60da      	str	r2, [r3, #12]

	lsd_thres[LSD_THRES_CLIM_HUMI].very_low		= LSD_THRES_CLIM_HUMI_VL;
 8001f30:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <update_thresold_values+0x6c>)
 8001f32:	4a18      	ldr	r2, [pc, #96]	@ (8001f94 <update_thresold_values+0x80>)
 8001f34:	611a      	str	r2, [r3, #16]
	lsd_thres[LSD_THRES_CLIM_HUMI].low			= LSD_THRES_CLIM_HUMI_L;
 8001f36:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <update_thresold_values+0x6c>)
 8001f38:	4a14      	ldr	r2, [pc, #80]	@ (8001f8c <update_thresold_values+0x78>)
 8001f3a:	615a      	str	r2, [r3, #20]
	lsd_thres[LSD_THRES_CLIM_HUMI].high			= LSD_THRES_CLIM_HUMI_H;
 8001f3c:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <update_thresold_values+0x6c>)
 8001f3e:	4a16      	ldr	r2, [pc, #88]	@ (8001f98 <update_thresold_values+0x84>)
 8001f40:	619a      	str	r2, [r3, #24]
	lsd_thres[LSD_THRES_CLIM_HUMI].very_high	= LSD_THRES_CLIM_HUMI_VH;
 8001f42:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <update_thresold_values+0x6c>)
 8001f44:	4a15      	ldr	r2, [pc, #84]	@ (8001f9c <update_thresold_values+0x88>)
 8001f46:	61da      	str	r2, [r3, #28]

	lsd_thres[LSD_THRES_DIST_DIST].very_low		= LSD_THRES_DIST_DIST_VL;
 8001f48:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <update_thresold_values+0x6c>)
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f84 <update_thresold_values+0x70>)
 8001f4c:	621a      	str	r2, [r3, #32]
	lsd_thres[LSD_THRES_DIST_DIST].low			= LSD_THRES_DIST_DIST_L;
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <update_thresold_values+0x6c>)
 8001f50:	4a0e      	ldr	r2, [pc, #56]	@ (8001f8c <update_thresold_values+0x78>)
 8001f52:	625a      	str	r2, [r3, #36]	@ 0x24
	lsd_thres[LSD_THRES_DIST_DIST].high			= LSD_THRES_DIST_DIST_H;
 8001f54:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <update_thresold_values+0x6c>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	@ (8001fa0 <update_thresold_values+0x8c>)
 8001f58:	629a      	str	r2, [r3, #40]	@ 0x28
	lsd_thres[LSD_THRES_DIST_DIST].very_high	= LSD_THRES_DIST_DIST_VH;
 8001f5a:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <update_thresold_values+0x6c>)
 8001f5c:	4a11      	ldr	r2, [pc, #68]	@ (8001fa4 <update_thresold_values+0x90>)
 8001f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

	lsd_thres[LSD_THRES_DIST_SPEED].very_low	= LSD_THRES_DIST_SPEED_VL;
 8001f60:	4b07      	ldr	r3, [pc, #28]	@ (8001f80 <update_thresold_values+0x6c>)
 8001f62:	4a11      	ldr	r2, [pc, #68]	@ (8001fa8 <update_thresold_values+0x94>)
 8001f64:	631a      	str	r2, [r3, #48]	@ 0x30
	lsd_thres[LSD_THRES_DIST_SPEED].low			= LSD_THRES_DIST_SPEED_L;
 8001f66:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <update_thresold_values+0x6c>)
 8001f68:	4a10      	ldr	r2, [pc, #64]	@ (8001fac <update_thresold_values+0x98>)
 8001f6a:	635a      	str	r2, [r3, #52]	@ 0x34
	lsd_thres[LSD_THRES_DIST_SPEED].high		= LSD_THRES_DIST_SPEED_H;
 8001f6c:	4b04      	ldr	r3, [pc, #16]	@ (8001f80 <update_thresold_values+0x6c>)
 8001f6e:	4a10      	ldr	r2, [pc, #64]	@ (8001fb0 <update_thresold_values+0x9c>)
 8001f70:	639a      	str	r2, [r3, #56]	@ 0x38
	lsd_thres[LSD_THRES_DIST_SPEED].very_high	= LSD_THRES_DIST_SPEED_VH;
 8001f72:	4b03      	ldr	r3, [pc, #12]	@ (8001f80 <update_thresold_values+0x6c>)
 8001f74:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb4 <update_thresold_values+0xa0>)
 8001f76:	63da      	str	r2, [r3, #60]	@ 0x3c
	return;
 8001f78:	bf00      	nop
}
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	2000026c 	.word	0x2000026c
 8001f84:	41200000 	.word	0x41200000
 8001f88:	41700000 	.word	0x41700000
 8001f8c:	41f00000 	.word	0x41f00000
 8001f90:	420c0000 	.word	0x420c0000
 8001f94:	41a00000 	.word	0x41a00000
 8001f98:	42a00000 	.word	0x42a00000
 8001f9c:	42b40000 	.word	0x42b40000
 8001fa0:	43480000 	.word	0x43480000
 8001fa4:	43520000 	.word	0x43520000
 8001fa8:	43a78000 	.word	0x43a78000
 8001fac:	43a90000 	.word	0x43a90000
 8001fb0:	43af0000 	.word	0x43af0000
 8001fb4:	43b10000 	.word	0x43b10000

08001fb8 <categoryze_recent_data>:

static void categoryze_recent_data( void ){
 8001fb8:	b598      	push	{r3, r4, r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	p_recent_log_data->clim.temperature_category = \
		compare_threshold( p_recent_log_data->clim.temperature, &lsd_thres[LSD_THRES_CLIM_TEMP] );
 8001fbc:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <categoryze_recent_data+0x60>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
	p_recent_log_data->clim.temperature_category = \
 8001fc2:	4a15      	ldr	r2, [pc, #84]	@ (8002018 <categoryze_recent_data+0x60>)
 8001fc4:	6814      	ldr	r4, [r2, #0]
		compare_threshold( p_recent_log_data->clim.temperature, &lsd_thres[LSD_THRES_CLIM_TEMP] );
 8001fc6:	4915      	ldr	r1, [pc, #84]	@ (800201c <categoryze_recent_data+0x64>)
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 f82f 	bl	800202c <compare_threshold>
 8001fce:	4603      	mov	r3, r0
	p_recent_log_data->clim.temperature_category = \
 8001fd0:	7223      	strb	r3, [r4, #8]

	p_recent_log_data->clim.humidity_category = \
		compare_threshold( p_recent_log_data->clim.humidity, &lsd_thres[LSD_THRES_CLIM_HUMI] );
 8001fd2:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <categoryze_recent_data+0x60>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
	p_recent_log_data->clim.humidity_category = \
 8001fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8002018 <categoryze_recent_data+0x60>)
 8001fda:	6814      	ldr	r4, [r2, #0]
		compare_threshold( p_recent_log_data->clim.humidity, &lsd_thres[LSD_THRES_CLIM_HUMI] );
 8001fdc:	4910      	ldr	r1, [pc, #64]	@ (8002020 <categoryze_recent_data+0x68>)
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f824 	bl	800202c <compare_threshold>
 8001fe4:	4603      	mov	r3, r0
	p_recent_log_data->clim.humidity_category = \
 8001fe6:	7263      	strb	r3, [r4, #9]

	p_recent_log_data->dist.distance_category = \
		compare_threshold( p_recent_log_data->dist.distance, &lsd_thres[LSD_THRES_DIST_DIST] );
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <categoryze_recent_data+0x60>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
	p_recent_log_data->dist.distance_category = \
 8001fee:	4a0a      	ldr	r2, [pc, #40]	@ (8002018 <categoryze_recent_data+0x60>)
 8001ff0:	6814      	ldr	r4, [r2, #0]
		compare_threshold( p_recent_log_data->dist.distance, &lsd_thres[LSD_THRES_DIST_DIST] );
 8001ff2:	490c      	ldr	r1, [pc, #48]	@ (8002024 <categoryze_recent_data+0x6c>)
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 f819 	bl	800202c <compare_threshold>
 8001ffa:	4603      	mov	r3, r0
	p_recent_log_data->dist.distance_category = \
 8001ffc:	7523      	strb	r3, [r4, #20]

	p_recent_log_data->dist.speed_of_sound_category = \
		compare_threshold( p_recent_log_data->dist.speed_of_sound, &lsd_thres[LSD_THRES_DIST_SPEED] );
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <categoryze_recent_data+0x60>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691b      	ldr	r3, [r3, #16]
	p_recent_log_data->dist.speed_of_sound_category = \
 8002004:	4a04      	ldr	r2, [pc, #16]	@ (8002018 <categoryze_recent_data+0x60>)
 8002006:	6814      	ldr	r4, [r2, #0]
		compare_threshold( p_recent_log_data->dist.speed_of_sound, &lsd_thres[LSD_THRES_DIST_SPEED] );
 8002008:	4907      	ldr	r1, [pc, #28]	@ (8002028 <categoryze_recent_data+0x70>)
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f80e 	bl	800202c <compare_threshold>
 8002010:	4603      	mov	r3, r0
	p_recent_log_data->dist.speed_of_sound_category = \
 8002012:	7563      	strb	r3, [r4, #21]

	return;
 8002014:	bf00      	nop
}
 8002016:	bd98      	pop	{r3, r4, r7, pc}
 8002018:	200002ac 	.word	0x200002ac
 800201c:	2000026c 	.word	0x2000026c
 8002020:	2000027c 	.word	0x2000027c
 8002024:	2000028c 	.word	0x2000028c
 8002028:	2000029c 	.word	0x2000029c

0800202c <compare_threshold>:

static uint8_t compare_threshold( float value, LSD_TRHES_T *thres ){
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
	if( value <= thres->very_low ){
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4619      	mov	r1, r3
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff f829 	bl	8001094 <__aeabi_fcmple>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <compare_threshold+0x20>
		return LSD_THRES_BELOW_VERY_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	e021      	b.n	8002090 <compare_threshold+0x64>
	}
	else if( value <= thres->low ){
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4619      	mov	r1, r3
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff f81e 	bl	8001094 <__aeabi_fcmple>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <compare_threshold+0x36>
		return LSD_THRES_BELOW_LOW;
 800205e:	2301      	movs	r3, #1
 8002060:	e016      	b.n	8002090 <compare_threshold+0x64>
	}
	else if( value >= thres->very_high ){
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	4619      	mov	r1, r3
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff f81d 	bl	80010a8 <__aeabi_fcmpge>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <compare_threshold+0x4c>
		return LSD_THRES_ABOVE_VERY_HIGH;
 8002074:	2304      	movs	r3, #4
 8002076:	e00b      	b.n	8002090 <compare_threshold+0x64>
	}
	else if( value >= thres->high ){
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4619      	mov	r1, r3
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff f812 	bl	80010a8 <__aeabi_fcmpge>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <compare_threshold+0x62>
		return LSD_THRES_ABOVE_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	e000      	b.n	8002090 <compare_threshold+0x64>
	}
	else{
		return LSD_THRES_CENTER;
 800208e:	2302      	movs	r3, #2
	}
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <lsd_exit_stop_mode>:
//#include "usb_device.h"
#include "MyDriversInc/lsd_errno.h"
#include "MyServicesInc/device_sleep.h"


uint8_t lsd_exit_stop_mode( lsd_sys_clk_cfg_t clk_cfg ){
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	if( clk_cfg != NULL ){
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <lsd_exit_stop_mode+0x16>
		clk_cfg();
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4798      	blx	r3
//		MX_USB_DEVICE_Init();
		return LSD_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <lsd_exit_stop_mode+0x18>
	}

	return LSD_ERR_NULL_HANDLE;
 80020ae:	23fe      	movs	r3, #254	@ 0xfe
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <lsd_measure_distance>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

void lsd_measure_distance( LSD_LOG_DATA_T *p_log ){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	p_log_data = p_log;
 80020c0:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <lsd_measure_distance+0x1c>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]

	read_climate_variables();
 80020c6:	f000 f807 	bl	80020d8 <read_climate_variables>
//	calculate_speed_of_sound();
//	calculate_distance();
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200002b0 	.word	0x200002b0

080020d8 <read_climate_variables>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static void read_climate_variables( void ){
 80020d8:	b598      	push	{r3, r4, r7, lr}
 80020da:	af00      	add	r7, sp, #0
	if( aht20_update() != LSD_OK){
 80020dc:	f7ff f836 	bl	800114c <aht20_update>
		// todo
	}

//	clim_data->pos_buf = ( clim_data->pos_buf+ 1 ) % LSD_CLIMATE_BUF_SIZE;
	p_log_data->clim.temperature = aht20_get_temperature_C();
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <read_climate_variables+0x24>)
 80020e2:	681c      	ldr	r4, [r3, #0]
 80020e4:	f7ff f8ba 	bl	800125c <aht20_get_temperature_C>
 80020e8:	4603      	mov	r3, r0
 80020ea:	6023      	str	r3, [r4, #0]
	p_log_data->clim.humidity = aht20_get_humidity_RH();
 80020ec:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <read_climate_variables+0x24>)
 80020ee:	681c      	ldr	r4, [r3, #0]
 80020f0:	f7ff f8f0 	bl	80012d4 <aht20_get_humidity_RH>
 80020f4:	4603      	mov	r3, r0
 80020f6:	6063      	str	r3, [r4, #4]

	return;
 80020f8:	bf00      	nop
}
 80020fa:	bd98      	pop	{r3, r4, r7, pc}
 80020fc:	200002b0 	.word	0x200002b0

08002100 <lsd_log_write>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

void lsd_log_write( LSD_LOG_DATA_T *p_log_data ){
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	lsd_get_rtc_timestamp( &log_timestamp );
 8002108:	480c      	ldr	r0, [pc, #48]	@ (800213c <lsd_log_write+0x3c>)
 800210a:	f7ff fea7 	bl	8001e5c <lsd_get_rtc_timestamp>

	uint8_t try_count = 10;
 800210e:	230a      	movs	r3, #10
 8002110:	73fb      	strb	r3, [r7, #15]
	do{
		write_log_values( p_log_data );
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f814 	bl	8002140 <write_log_values>
		try_count--;
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	3b01      	subs	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
		HAL_Delay( 10 );
 800211e:	200a      	movs	r0, #10
 8002120:	f001 f928 	bl	8003374 <HAL_Delay>
	} while( log_values_check() != LSD_OK && try_count >= 0 );
 8002124:	f000 f99e 	bl	8002464 <log_values_check>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f1      	bne.n	8002112 <lsd_log_write+0x12>

	update_pos_indexes();
 800212e:	f000 f9cd 	bl	80024cc <update_pos_indexes>
	return;
 8002132:	bf00      	nop
}
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200002b4 	.word	0x200002b4

08002140 <write_log_values>:
	log_mngr.was_transmitted 		= lsd_log_buffer[pos].was_transmitted;

	return;
}

static void write_log_values( LSD_LOG_DATA_T *p_log_data ){
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	// Update local log buffer:
	log_mngr.timestamp.year 		= log_timestamp.year;
 8002148:	4bb2      	ldr	r3, [pc, #712]	@ (8002414 <write_log_values+0x2d4>)
 800214a:	781a      	ldrb	r2, [r3, #0]
 800214c:	4bb2      	ldr	r3, [pc, #712]	@ (8002418 <write_log_values+0x2d8>)
 800214e:	701a      	strb	r2, [r3, #0]
	log_mngr.timestamp.month 		= log_timestamp.month;
 8002150:	4bb0      	ldr	r3, [pc, #704]	@ (8002414 <write_log_values+0x2d4>)
 8002152:	785b      	ldrb	r3, [r3, #1]
 8002154:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002158:	b2d9      	uxtb	r1, r3
 800215a:	4aaf      	ldr	r2, [pc, #700]	@ (8002418 <write_log_values+0x2d8>)
 800215c:	7853      	ldrb	r3, [r2, #1]
 800215e:	f361 0303 	bfi	r3, r1, #0, #4
 8002162:	7053      	strb	r3, [r2, #1]
	log_mngr.timestamp.day 			= log_timestamp.day;
 8002164:	4bab      	ldr	r3, [pc, #684]	@ (8002414 <write_log_values+0x2d4>)
 8002166:	789b      	ldrb	r3, [r3, #2]
 8002168:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800216c:	b2d9      	uxtb	r1, r3
 800216e:	4aaa      	ldr	r2, [pc, #680]	@ (8002418 <write_log_values+0x2d8>)
 8002170:	7893      	ldrb	r3, [r2, #2]
 8002172:	f361 0304 	bfi	r3, r1, #0, #5
 8002176:	7093      	strb	r3, [r2, #2]
	log_mngr.timestamp.hour 		= log_timestamp.hour;
 8002178:	4ba6      	ldr	r3, [pc, #664]	@ (8002414 <write_log_values+0x2d4>)
 800217a:	78db      	ldrb	r3, [r3, #3]
 800217c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002180:	b2d9      	uxtb	r1, r3
 8002182:	4aa5      	ldr	r2, [pc, #660]	@ (8002418 <write_log_values+0x2d8>)
 8002184:	78d3      	ldrb	r3, [r2, #3]
 8002186:	f361 0304 	bfi	r3, r1, #0, #5
 800218a:	70d3      	strb	r3, [r2, #3]
	log_mngr.timestamp.minute 		= log_timestamp.minute;
 800218c:	4ba1      	ldr	r3, [pc, #644]	@ (8002414 <write_log_values+0x2d4>)
 800218e:	791b      	ldrb	r3, [r3, #4]
 8002190:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002194:	b2d9      	uxtb	r1, r3
 8002196:	4aa0      	ldr	r2, [pc, #640]	@ (8002418 <write_log_values+0x2d8>)
 8002198:	7913      	ldrb	r3, [r2, #4]
 800219a:	f361 0305 	bfi	r3, r1, #0, #6
 800219e:	7113      	strb	r3, [r2, #4]
	log_mngr.timestamp.second 		= log_timestamp.second;
 80021a0:	4b9c      	ldr	r3, [pc, #624]	@ (8002414 <write_log_values+0x2d4>)
 80021a2:	795b      	ldrb	r3, [r3, #5]
 80021a4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80021a8:	b2d9      	uxtb	r1, r3
 80021aa:	4a9b      	ldr	r2, [pc, #620]	@ (8002418 <write_log_values+0x2d8>)
 80021ac:	7953      	ldrb	r3, [r2, #5]
 80021ae:	f361 0305 	bfi	r3, r1, #0, #6
 80021b2:	7153      	strb	r3, [r2, #5]
	log_mngr.timestamp.reserved		= log_timestamp.reserved;
 80021b4:	4b97      	ldr	r3, [pc, #604]	@ (8002414 <write_log_values+0x2d4>)
 80021b6:	799b      	ldrb	r3, [r3, #6]
 80021b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80021bc:	b2d9      	uxtb	r1, r3
 80021be:	4a96      	ldr	r2, [pc, #600]	@ (8002418 <write_log_values+0x2d8>)
 80021c0:	7993      	ldrb	r3, [r2, #6]
 80021c2:	f361 0303 	bfi	r3, r1, #0, #4
 80021c6:	7193      	strb	r3, [r2, #6]
	log_mngr.temperature_centi_C	= (uint16_t) ( 100 * p_log_data->clim.temperature);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4993      	ldr	r1, [pc, #588]	@ (800241c <write_log_values+0x2dc>)
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fdb8 	bl	8000d44 <__aeabi_fmul>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe ff7a 	bl	80010d0 <__aeabi_f2uiz>
 80021dc:	4603      	mov	r3, r0
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b8d      	ldr	r3, [pc, #564]	@ (8002418 <write_log_values+0x2d8>)
 80021e2:	811a      	strh	r2, [r3, #8]
	log_mngr.humidity_centi_RH		= (uint16_t) ( 100 * p_log_data->clim.humidity );
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	498c      	ldr	r1, [pc, #560]	@ (800241c <write_log_values+0x2dc>)
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fdaa 	bl	8000d44 <__aeabi_fmul>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe ff6c 	bl	80010d0 <__aeabi_f2uiz>
 80021f8:	4603      	mov	r3, r0
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	4b86      	ldr	r3, [pc, #536]	@ (8002418 <write_log_values+0x2d8>)
 80021fe:	815a      	strh	r2, [r3, #10]
	log_mngr.speed_of_sound_mps 	= (uint16_t) ( 100 * p_log_data->dist.speed_of_sound );
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	4985      	ldr	r1, [pc, #532]	@ (800241c <write_log_values+0x2dc>)
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fd9c 	bl	8000d44 <__aeabi_fmul>
 800220c:	4603      	mov	r3, r0
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe ff5e 	bl	80010d0 <__aeabi_f2uiz>
 8002214:	4603      	mov	r3, r0
 8002216:	b29a      	uxth	r2, r3
 8002218:	4b7f      	ldr	r3, [pc, #508]	@ (8002418 <write_log_values+0x2d8>)
 800221a:	819a      	strh	r2, [r3, #12]
	log_mngr.distance_mm 			= (uint16_t) ( 10  * p_log_data->dist.distance );		// cm to mm
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	497f      	ldr	r1, [pc, #508]	@ (8002420 <write_log_values+0x2e0>)
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe fd8e 	bl	8000d44 <__aeabi_fmul>
 8002228:	4603      	mov	r3, r0
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe ff50 	bl	80010d0 <__aeabi_f2uiz>
 8002230:	4603      	mov	r3, r0
 8002232:	b29a      	uxth	r2, r3
 8002234:	4b78      	ldr	r3, [pc, #480]	@ (8002418 <write_log_values+0x2d8>)
 8002236:	81da      	strh	r2, [r3, #14]
	log_mngr.found_errors 			= p_log_data->errors;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7e1a      	ldrb	r2, [r3, #24]
 800223c:	4b76      	ldr	r3, [pc, #472]	@ (8002418 <write_log_values+0x2d8>)
 800223e:	741a      	strb	r2, [r3, #16]
	log_mngr.was_transmitted 		= p_log_data->transmitted;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7e5a      	ldrb	r2, [r3, #25]
 8002244:	4b74      	ldr	r3, [pc, #464]	@ (8002418 <write_log_values+0x2d8>)
 8002246:	745a      	strb	r2, [r3, #17]

	// Update global log buffer:
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.year 			= log_timestamp.year;
 8002248:	4b76      	ldr	r3, [pc, #472]	@ (8002424 <write_log_values+0x2e4>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	4b71      	ldr	r3, [pc, #452]	@ (8002414 <write_log_values+0x2d4>)
 8002250:	7818      	ldrb	r0, [r3, #0]
 8002252:	4a75      	ldr	r2, [pc, #468]	@ (8002428 <write_log_values+0x2e8>)
 8002254:	460b      	mov	r3, r1
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	4602      	mov	r2, r0
 8002260:	701a      	strb	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.month 		= log_timestamp.month;
 8002262:	4b70      	ldr	r3, [pc, #448]	@ (8002424 <write_log_values+0x2e4>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	4b6a      	ldr	r3, [pc, #424]	@ (8002414 <write_log_values+0x2d4>)
 800226a:	785b      	ldrb	r3, [r3, #1]
 800226c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002270:	b2d9      	uxtb	r1, r3
 8002272:	4a6d      	ldr	r2, [pc, #436]	@ (8002428 <write_log_values+0x2e8>)
 8002274:	4603      	mov	r3, r0
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4403      	add	r3, r0
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	441a      	add	r2, r3
 800227e:	7853      	ldrb	r3, [r2, #1]
 8002280:	f361 0303 	bfi	r3, r1, #0, #4
 8002284:	7053      	strb	r3, [r2, #1]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.day 			= log_timestamp.day;
 8002286:	4b67      	ldr	r3, [pc, #412]	@ (8002424 <write_log_values+0x2e4>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	4b61      	ldr	r3, [pc, #388]	@ (8002414 <write_log_values+0x2d4>)
 800228e:	789b      	ldrb	r3, [r3, #2]
 8002290:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002294:	b2d9      	uxtb	r1, r3
 8002296:	4a64      	ldr	r2, [pc, #400]	@ (8002428 <write_log_values+0x2e8>)
 8002298:	4603      	mov	r3, r0
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4403      	add	r3, r0
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	441a      	add	r2, r3
 80022a2:	7893      	ldrb	r3, [r2, #2]
 80022a4:	f361 0304 	bfi	r3, r1, #0, #5
 80022a8:	7093      	strb	r3, [r2, #2]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.hour 			= log_timestamp.hour;
 80022aa:	4b5e      	ldr	r3, [pc, #376]	@ (8002424 <write_log_values+0x2e4>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	4b58      	ldr	r3, [pc, #352]	@ (8002414 <write_log_values+0x2d4>)
 80022b2:	78db      	ldrb	r3, [r3, #3]
 80022b4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80022b8:	b2d9      	uxtb	r1, r3
 80022ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002428 <write_log_values+0x2e8>)
 80022bc:	4603      	mov	r3, r0
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4403      	add	r3, r0
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	441a      	add	r2, r3
 80022c6:	78d3      	ldrb	r3, [r2, #3]
 80022c8:	f361 0304 	bfi	r3, r1, #0, #5
 80022cc:	70d3      	strb	r3, [r2, #3]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.minute 		= log_timestamp.minute;
 80022ce:	4b55      	ldr	r3, [pc, #340]	@ (8002424 <write_log_values+0x2e4>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002414 <write_log_values+0x2d4>)
 80022d6:	791b      	ldrb	r3, [r3, #4]
 80022d8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80022dc:	b2d9      	uxtb	r1, r3
 80022de:	4a52      	ldr	r2, [pc, #328]	@ (8002428 <write_log_values+0x2e8>)
 80022e0:	4603      	mov	r3, r0
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4403      	add	r3, r0
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	441a      	add	r2, r3
 80022ea:	7913      	ldrb	r3, [r2, #4]
 80022ec:	f361 0305 	bfi	r3, r1, #0, #6
 80022f0:	7113      	strb	r3, [r2, #4]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.second 		= log_timestamp.second;
 80022f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002424 <write_log_values+0x2e4>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	4b46      	ldr	r3, [pc, #280]	@ (8002414 <write_log_values+0x2d4>)
 80022fa:	795b      	ldrb	r3, [r3, #5]
 80022fc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002300:	b2d9      	uxtb	r1, r3
 8002302:	4a49      	ldr	r2, [pc, #292]	@ (8002428 <write_log_values+0x2e8>)
 8002304:	4603      	mov	r3, r0
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4403      	add	r3, r0
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	441a      	add	r2, r3
 800230e:	7953      	ldrb	r3, [r2, #5]
 8002310:	f361 0305 	bfi	r3, r1, #0, #6
 8002314:	7153      	strb	r3, [r2, #5]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.reserved		= log_timestamp.reserved;
 8002316:	4b43      	ldr	r3, [pc, #268]	@ (8002424 <write_log_values+0x2e4>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	4b3d      	ldr	r3, [pc, #244]	@ (8002414 <write_log_values+0x2d4>)
 800231e:	799b      	ldrb	r3, [r3, #6]
 8002320:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002324:	b2d9      	uxtb	r1, r3
 8002326:	4a40      	ldr	r2, [pc, #256]	@ (8002428 <write_log_values+0x2e8>)
 8002328:	4603      	mov	r3, r0
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4403      	add	r3, r0
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	441a      	add	r2, r3
 8002332:	7993      	ldrb	r3, [r2, #6]
 8002334:	f361 0303 	bfi	r3, r1, #0, #4
 8002338:	7193      	strb	r3, [r2, #6]

	lsd_log_buffer[lsd_log_buffer_next_pos].temperature_centi_C = (uint16_t) ( 100 * p_log_data->clim.temperature);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4937      	ldr	r1, [pc, #220]	@ (800241c <write_log_values+0x2dc>)
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe fcff 	bl	8000d44 <__aeabi_fmul>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	4b36      	ldr	r3, [pc, #216]	@ (8002424 <write_log_values+0x2e4>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	461c      	mov	r4, r3
 8002350:	4610      	mov	r0, r2
 8002352:	f7fe febd 	bl	80010d0 <__aeabi_f2uiz>
 8002356:	4603      	mov	r3, r0
 8002358:	b299      	uxth	r1, r3
 800235a:	4a33      	ldr	r2, [pc, #204]	@ (8002428 <write_log_values+0x2e8>)
 800235c:	4623      	mov	r3, r4
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4423      	add	r3, r4
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	3308      	adds	r3, #8
 8002368:	460a      	mov	r2, r1
 800236a:	801a      	strh	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].humidity_centi_RH 	= (uint16_t) ( 100 * p_log_data->clim.humidity );
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	492a      	ldr	r1, [pc, #168]	@ (800241c <write_log_values+0x2dc>)
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fce6 	bl	8000d44 <__aeabi_fmul>
 8002378:	4603      	mov	r3, r0
 800237a:	461a      	mov	r2, r3
 800237c:	4b29      	ldr	r3, [pc, #164]	@ (8002424 <write_log_values+0x2e4>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461c      	mov	r4, r3
 8002382:	4610      	mov	r0, r2
 8002384:	f7fe fea4 	bl	80010d0 <__aeabi_f2uiz>
 8002388:	4603      	mov	r3, r0
 800238a:	b299      	uxth	r1, r3
 800238c:	4a26      	ldr	r2, [pc, #152]	@ (8002428 <write_log_values+0x2e8>)
 800238e:	4623      	mov	r3, r4
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4423      	add	r3, r4
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	330a      	adds	r3, #10
 800239a:	460a      	mov	r2, r1
 800239c:	801a      	strh	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].speed_of_sound_mps 	= (uint16_t) ( 100 * p_log_data->dist.speed_of_sound );
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	491e      	ldr	r1, [pc, #120]	@ (800241c <write_log_values+0x2dc>)
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fccd 	bl	8000d44 <__aeabi_fmul>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002424 <write_log_values+0x2e4>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	461c      	mov	r4, r3
 80023b4:	4610      	mov	r0, r2
 80023b6:	f7fe fe8b 	bl	80010d0 <__aeabi_f2uiz>
 80023ba:	4603      	mov	r3, r0
 80023bc:	b299      	uxth	r1, r3
 80023be:	4a1a      	ldr	r2, [pc, #104]	@ (8002428 <write_log_values+0x2e8>)
 80023c0:	4623      	mov	r3, r4
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4423      	add	r3, r4
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	330c      	adds	r3, #12
 80023cc:	460a      	mov	r2, r1
 80023ce:	801a      	strh	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].distance_mm 		= (uint16_t) ( 10  * p_log_data->dist.distance );		// cm to mm
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4912      	ldr	r1, [pc, #72]	@ (8002420 <write_log_values+0x2e0>)
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fcb4 	bl	8000d44 <__aeabi_fmul>
 80023dc:	4603      	mov	r3, r0
 80023de:	461a      	mov	r2, r3
 80023e0:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <write_log_values+0x2e4>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	461c      	mov	r4, r3
 80023e6:	4610      	mov	r0, r2
 80023e8:	f7fe fe72 	bl	80010d0 <__aeabi_f2uiz>
 80023ec:	4603      	mov	r3, r0
 80023ee:	b299      	uxth	r1, r3
 80023f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002428 <write_log_values+0x2e8>)
 80023f2:	4623      	mov	r3, r4
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4423      	add	r3, r4
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	330e      	adds	r3, #14
 80023fe:	460a      	mov	r2, r1
 8002400:	801a      	strh	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].found_errors 		= p_log_data->errors;
 8002402:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <write_log_values+0x2e4>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	4619      	mov	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7e18      	ldrb	r0, [r3, #24]
 800240c:	4a06      	ldr	r2, [pc, #24]	@ (8002428 <write_log_values+0x2e8>)
 800240e:	460b      	mov	r3, r1
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	e00b      	b.n	800242c <write_log_values+0x2ec>
 8002414:	200002b4 	.word	0x200002b4
 8002418:	200002bc 	.word	0x200002bc
 800241c:	42c80000 	.word	0x42c80000
 8002420:	41200000 	.word	0x41200000
 8002424:	200014f8 	.word	0x200014f8
 8002428:	200002f8 	.word	0x200002f8
 800242c:	440b      	add	r3, r1
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	3310      	adds	r3, #16
 8002434:	4602      	mov	r2, r0
 8002436:	701a      	strb	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].was_transmitted 	= p_log_data->transmitted;
 8002438:	4b08      	ldr	r3, [pc, #32]	@ (800245c <write_log_values+0x31c>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	4619      	mov	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	7e58      	ldrb	r0, [r3, #25]
 8002442:	4a07      	ldr	r2, [pc, #28]	@ (8002460 <write_log_values+0x320>)
 8002444:	460b      	mov	r3, r1
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	3311      	adds	r3, #17
 8002450:	4602      	mov	r2, r0
 8002452:	701a      	strb	r2, [r3, #0]

	/*
	 * TODO: save on flash memory
	 */

	return;
 8002454:	bf00      	nop
}
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bd90      	pop	{r4, r7, pc}
 800245c:	200014f8 	.word	0x200014f8
 8002460:	200002f8 	.word	0x200002f8

08002464 <log_values_check>:

static int8_t log_values_check( void ){
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
	uint8_t *p_global = (uint8_t *) &lsd_log_buffer[lsd_log_buffer_next_pos];
 800246a:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <log_values_check+0x5c>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4413      	add	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4a12      	ldr	r2, [pc, #72]	@ (80024c4 <log_values_check+0x60>)
 800247a:	4413      	add	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
	uint8_t *p_local = (uint8_t *) &log_mngr;
 800247e:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <log_values_check+0x64>)
 8002480:	60bb      	str	r3, [r7, #8]

	for( uint8_t i=0; i<sizeof(LSD_LOG_BUFFER_T); i++ ){
 8002482:	2300      	movs	r3, #0
 8002484:	71fb      	strb	r3, [r7, #7]
 8002486:	e011      	b.n	80024ac <log_values_check+0x48>
		if( *p_global != *p_local ){
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	781a      	ldrb	r2, [r3, #0]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d002      	beq.n	800249a <log_values_check+0x36>
			return LSD_ERR_CRC_CHECK;
 8002494:	f06f 0304 	mvn.w	r3, #4
 8002498:	e00c      	b.n	80024b4 <log_values_check+0x50>
		}
		p_global++;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3301      	adds	r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
		p_local++;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	3301      	adds	r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
	for( uint8_t i=0; i<sizeof(LSD_LOG_BUFFER_T); i++ ){
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	3301      	adds	r3, #1
 80024aa:	71fb      	strb	r3, [r7, #7]
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2b11      	cmp	r3, #17
 80024b0:	d9ea      	bls.n	8002488 <log_values_check+0x24>
	}

	return LSD_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	200014f8 	.word	0x200014f8
 80024c4:	200002f8 	.word	0x200002f8
 80024c8:	200002bc 	.word	0x200002bc

080024cc <update_pos_indexes>:

static void update_pos_indexes( void ){
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
	lsd_log_buffer_next_pos = ( lsd_log_buffer_next_pos + 1 ) % LSD_LOG_BUFFER_SIZE;
 80024d0:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <update_pos_indexes+0x48>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	3301      	adds	r3, #1
 80024d6:	425a      	negs	r2, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	bf58      	it	pl
 80024de:	4253      	negpl	r3, r2
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <update_pos_indexes+0x48>)
 80024e4:	701a      	strb	r2, [r3, #0]

	if( lsd_log_buffer_next_pos == lsd_log_buffer_first_pos ){
 80024e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <update_pos_indexes+0x48>)
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002518 <update_pos_indexes+0x4c>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d10b      	bne.n	800250a <update_pos_indexes+0x3e>
		lsd_log_buffer_first_pos = ( lsd_log_buffer_first_pos + 1 ) % LSD_LOG_BUFFER_SIZE;
 80024f2:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <update_pos_indexes+0x4c>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	3301      	adds	r3, #1
 80024f8:	425a      	negs	r2, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	bf58      	it	pl
 8002500:	4253      	negpl	r3, r2
 8002502:	b2da      	uxtb	r2, r3
 8002504:	4b04      	ldr	r3, [pc, #16]	@ (8002518 <update_pos_indexes+0x4c>)
 8002506:	701a      	strb	r2, [r3, #0]
	}

	return;
 8002508:	bf00      	nop
 800250a:	bf00      	nop
}
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	200014f8 	.word	0x200014f8
 8002518:	200014f9 	.word	0x200014f9

0800251c <state_machine_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

void state_machine_init( LSD_MCU_PERIPH_HANDLES_T *hmcu, lsd_sys_clk_cfg_t clk_cfg ){
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
	hmcu_periph = hmcu;
 8002526:	4a2a      	ldr	r2, [pc, #168]	@ (80025d0 <state_machine_init+0xb4>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6013      	str	r3, [r2, #0]
	lsd_clk_cfg = clk_cfg;
 800252c:	4a29      	ldr	r2, [pc, #164]	@ (80025d4 <state_machine_init+0xb8>)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin( SENSOR_PWR_GPIO_Port, SENSOR_PWR_Pin, LSD_SENSORS_OFF );  // turn sensors ON
 8002532:	2201      	movs	r2, #1
 8002534:	2110      	movs	r1, #16
 8002536:	4828      	ldr	r0, [pc, #160]	@ (80025d8 <state_machine_init+0xbc>)
 8002538:	f001 fa9b 	bl	8003a72 <HAL_GPIO_WritePin>

	int8_t ret = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	73fb      	strb	r3, [r7, #15]

	ret = lsd_common_init( hmcu_periph->mcu_htim[LSD_TIM_COMMON], hmcu_periph->mcu_hrtc );
 8002540:	4b23      	ldr	r3, [pc, #140]	@ (80025d0 <state_machine_init+0xb4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	4b22      	ldr	r3, [pc, #136]	@ (80025d0 <state_machine_init+0xb4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	4619      	mov	r1, r3
 800254e:	4610      	mov	r0, r2
 8002550:	f7ff fc28 	bl	8001da4 <lsd_common_init>
 8002554:	4603      	mov	r3, r0
 8002556:	73fb      	strb	r3, [r7, #15]
	ret += leds_init( hmcu_periph->mcu_htim[LSD_TIM_GENERAL] );
 8002558:	4b1d      	ldr	r3, [pc, #116]	@ (80025d0 <state_machine_init+0xb4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fa16 	bl	8001990 <leds_init>
 8002564:	4603      	mov	r3, r0
 8002566:	b2da      	uxtb	r2, r3
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	4413      	add	r3, r2
 800256c:	b2db      	uxtb	r3, r3
 800256e:	73fb      	strb	r3, [r7, #15]
	ret += aht20_init( hmcu_periph->mcu_hi2c );
 8002570:	4b17      	ldr	r3, [pc, #92]	@ (80025d0 <state_machine_init+0xb4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fdca 	bl	8001110 <aht20_init>
 800257c:	4603      	mov	r3, r0
 800257e:	b2da      	uxtb	r2, r3
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	4413      	add	r3, r2
 8002584:	b2db      	uxtb	r3, r3
 8002586:	73fb      	strb	r3, [r7, #15]
	ret += ajsr04m_init( hmcu_periph->mcu_htim[LSD_TIM_SENSORS] );
 8002588:	4b11      	ldr	r3, [pc, #68]	@ (80025d0 <state_machine_init+0xb4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe ff48 	bl	8001424 <ajsr04m_init>
 8002594:	4603      	mov	r3, r0
 8002596:	b2da      	uxtb	r2, r3
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	4413      	add	r3, r2
 800259c:	b2db      	uxtb	r3, r3
 800259e:	73fb      	strb	r3, [r7, #15]
	ret += le910r1br_init( hmcu_periph->mcu_huart, hmcu_periph->mcu_htim[LSD_TIM_GENERAL] );
 80025a0:	4b0b      	ldr	r3, [pc, #44]	@ (80025d0 <state_machine_init+0xb4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <state_machine_init+0xb4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f7fe ff94 	bl	80014dc <le910r1br_init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	4413      	add	r3, r2
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	73fb      	strb	r3, [r7, #15]

//	uint8_t *msg = "System Initialized\r\n";
//	CDC_Transmit_FS( msg, strlen( (char *) msg ) );

	HAL_Delay( 1000 );
 80025c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025c4:	f000 fed6 	bl	8003374 <HAL_Delay>

	return;
 80025c8:	bf00      	nop
}
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	200002d0 	.word	0x200002d0
 80025d4:	200002f0 	.word	0x200002f0
 80025d8:	40010c00 	.word	0x40010c00

080025dc <state_machine_run>:

void state_machine_run( void ){
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
	switch( current_state ){
 80025e0:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <state_machine_run+0x5c>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b05      	cmp	r3, #5
 80025e6:	d821      	bhi.n	800262c <state_machine_run+0x50>
 80025e8:	a201      	add	r2, pc, #4	@ (adr r2, 80025f0 <state_machine_run+0x14>)
 80025ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ee:	bf00      	nop
 80025f0:	08002609 	.word	0x08002609
 80025f4:	0800260f 	.word	0x0800260f
 80025f8:	08002615 	.word	0x08002615
 80025fc:	0800261b 	.word	0x0800261b
 8002600:	08002621 	.word	0x08002621
 8002604:	08002627 	.word	0x08002627
		case S0_WAKEUP:
			state_machine_run_s0_wakeup();
 8002608:	f000 f818 	bl	800263c <state_machine_run_s0_wakeup>
			break;
 800260c:	e012      	b.n	8002634 <state_machine_run+0x58>

		case S1_MEASURE:
			state_machine_run_s1_measure();
 800260e:	f000 f841 	bl	8002694 <state_machine_run_s1_measure>
			break;
 8002612:	e00f      	b.n	8002634 <state_machine_run+0x58>

		case S2_ANALYZE:
			state_machine_run_s2_analyze();
 8002614:	f000 f856 	bl	80026c4 <state_machine_run_s2_analyze>
			break;
 8002618:	e00c      	b.n	8002634 <state_machine_run+0x58>

		case S3_TRANSMIT:
			state_machine_run_s3_transmit();
 800261a:	f000 f865 	bl	80026e8 <state_machine_run_s3_transmit>
			break;
 800261e:	e009      	b.n	8002634 <state_machine_run+0x58>

		case S4_SLEEP:
			state_machine_run_s4_sleep();
 8002620:	f000 f87e 	bl	8002720 <state_machine_run_s4_sleep>
			break;
 8002624:	e006      	b.n	8002634 <state_machine_run+0x58>

		case S5_FAIL_SAFE:
			state_machine_run_s5_fail_safe();
 8002626:	f000 f893 	bl	8002750 <state_machine_run_s5_fail_safe>
			break;
 800262a:	e003      	b.n	8002634 <state_machine_run+0x58>

		default:
			current_state = S5_FAIL_SAFE;
 800262c:	4b02      	ldr	r3, [pc, #8]	@ (8002638 <state_machine_run+0x5c>)
 800262e:	2205      	movs	r2, #5
 8002630:	701a      	strb	r2, [r3, #0]
			break;
 8002632:	bf00      	nop
	}
	return;
 8002634:	bf00      	nop
}
 8002636:	bd80      	pop	{r7, pc}
 8002638:	200002ce 	.word	0x200002ce

0800263c <state_machine_run_s0_wakeup>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static void state_machine_run_s0_wakeup( void ){
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	HAL_Delay( 1000 );
 8002640:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002644:	f000 fe96 	bl	8003374 <HAL_Delay>
	lsd_exit_stop_mode( lsd_clk_cfg );
 8002648:	4b0e      	ldr	r3, [pc, #56]	@ (8002684 <state_machine_run_s0_wakeup+0x48>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fd23 	bl	8002098 <lsd_exit_stop_mode>

	lsd_cycle_count++;
 8002652:	4b0d      	ldr	r3, [pc, #52]	@ (8002688 <state_machine_run_s0_wakeup+0x4c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	4a0b      	ldr	r2, [pc, #44]	@ (8002688 <state_machine_run_s0_wakeup+0x4c>)
 800265a:	6013      	str	r3, [r2, #0]

	leds_turn_on( LSD_LED_BLUE );
 800265c:	2000      	movs	r0, #0
 800265e:	f7ff f9f7 	bl	8001a50 <leds_turn_on>

//	le910r1br_power_on();
	HAL_GPIO_WritePin( SENSOR_PWR_GPIO_Port, SENSOR_PWR_Pin, LSD_SENSORS_ON );
 8002662:	2200      	movs	r2, #0
 8002664:	2110      	movs	r1, #16
 8002666:	4809      	ldr	r0, [pc, #36]	@ (800268c <state_machine_run_s0_wakeup+0x50>)
 8002668:	f001 fa03 	bl	8003a72 <HAL_GPIO_WritePin>

	leds_turn_off( LSD_LED_BLUE );
 800266c:	2000      	movs	r0, #0
 800266e:	f7ff fa49 	bl	8001b04 <leds_turn_off>

	HAL_Delay( 1000 );
 8002672:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002676:	f000 fe7d 	bl	8003374 <HAL_Delay>
	current_state = S1_MEASURE;
 800267a:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <state_machine_run_s0_wakeup+0x54>)
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
	return;
 8002680:	bf00      	nop
}
 8002682:	bd80      	pop	{r7, pc}
 8002684:	200002f0 	.word	0x200002f0
 8002688:	200002f4 	.word	0x200002f4
 800268c:	40010c00 	.word	0x40010c00
 8002690:	200002ce 	.word	0x200002ce

08002694 <state_machine_run_s1_measure>:

static void state_machine_run_s1_measure( void ){
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
	leds_turn_on( LSD_ALL_LEDS);
 8002698:	2002      	movs	r0, #2
 800269a:	f7ff f9d9 	bl	8001a50 <leds_turn_on>
	lsd_measure_distance( &lsd_log_data );
 800269e:	4807      	ldr	r0, [pc, #28]	@ (80026bc <state_machine_run_s1_measure+0x28>)
 80026a0:	f7ff fd0a 	bl	80020b8 <lsd_measure_distance>
	leds_turn_off( LSD_ALL_LEDS );
 80026a4:	2002      	movs	r0, #2
 80026a6:	f7ff fa2d 	bl	8001b04 <leds_turn_off>

	current_state = S1_MEASURE;
 80026aa:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <state_machine_run_s1_measure+0x2c>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
	HAL_Delay( 1000 );
 80026b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026b4:	f000 fe5e 	bl	8003374 <HAL_Delay>
	return;
 80026b8:	bf00      	nop
}
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	200002d4 	.word	0x200002d4
 80026c0:	200002ce 	.word	0x200002ce

080026c4 <state_machine_run_s2_analyze>:

static void state_machine_run_s2_analyze( void ){
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	lsd_analyze_data( &lsd_log_data );
 80026c8:	4805      	ldr	r0, [pc, #20]	@ (80026e0 <state_machine_run_s2_analyze+0x1c>)
 80026ca:	f7ff fc11 	bl	8001ef0 <lsd_analyze_data>
	lsd_log_write( &lsd_log_data );
 80026ce:	4804      	ldr	r0, [pc, #16]	@ (80026e0 <state_machine_run_s2_analyze+0x1c>)
 80026d0:	f7ff fd16 	bl	8002100 <lsd_log_write>

	/*
	 * TODO: change next state depending on data, maybe skip a transmission or shorten sleep time
	 */
//	lsd_change_sleep_time( hmcu_periph->mcu_hrtc, 0, 0, 5 );
	current_state = S3_TRANSMIT;
 80026d4:	4b03      	ldr	r3, [pc, #12]	@ (80026e4 <state_machine_run_s2_analyze+0x20>)
 80026d6:	2203      	movs	r2, #3
 80026d8:	701a      	strb	r2, [r3, #0]
	return;
 80026da:	bf00      	nop
}
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200002d4 	.word	0x200002d4
 80026e4:	200002ce 	.word	0x200002ce

080026e8 <state_machine_run_s3_transmit>:

static void state_machine_run_s3_transmit( void ){
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
//	lsd_transmit_lte();
	int8_t ret = le910r1br_check_at();
 80026ee:	f7fe ff45 	bl	800157c <le910r1br_check_at>
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(500);
 80026f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026fa:	f000 fe3b 	bl	8003374 <HAL_Delay>

	ret = le910r1br_check_cpin();
 80026fe:	f7fe ff4b 	bl	8001598 <le910r1br_check_cpin>
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(500);
 8002706:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800270a:	f000 fe33 	bl	8003374 <HAL_Delay>
//	snprintf( msg, msg_size, "errors : %c%c%c%c%c%c%c%c\r\n", BYTE_TO_BINARY( lsd_log_data.errors ) );
//	CDC_Transmit_FS( (uint8_t *) msg, strlen( msg ) );
//	snprintf( msg, msg_size, "transmitted : %s\r\n\n", ( lsd_log_data.transmitted ? "true" : "false" ) );
//	CDC_Transmit_FS( (uint8_t *) msg, strlen( msg ) );

	current_state = S3_TRANSMIT;
 800270e:	4b03      	ldr	r3, [pc, #12]	@ (800271c <state_machine_run_s3_transmit+0x34>)
 8002710:	2203      	movs	r2, #3
 8002712:	701a      	strb	r2, [r3, #0]
	return;
 8002714:	bf00      	nop
}
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200002ce 	.word	0x200002ce

08002720 <state_machine_run_s4_sleep>:

static void state_machine_run_s4_sleep( void ){
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
	current_state = S0_WAKEUP;
 8002724:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <state_machine_run_s4_sleep+0x28>)
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]

	leds_turn_on( LSD_LED_BLUE );
 800272a:	2000      	movs	r0, #0
 800272c:	f7ff f990 	bl	8001a50 <leds_turn_on>
	le910r1br_power_off();
 8002730:	f7fe ff0a 	bl	8001548 <le910r1br_power_off>
	HAL_GPIO_WritePin( SENSOR_PWR_GPIO_Port, SENSOR_PWR_Pin, LSD_SENSORS_OFF );
 8002734:	2201      	movs	r2, #1
 8002736:	2110      	movs	r1, #16
 8002738:	4804      	ldr	r0, [pc, #16]	@ (800274c <state_machine_run_s4_sleep+0x2c>)
 800273a:	f001 f99a 	bl	8003a72 <HAL_GPIO_WritePin>
	leds_turn_off( LSD_LED_BLUE );
 800273e:	2000      	movs	r0, #0
 8002740:	f7ff f9e0 	bl	8001b04 <leds_turn_off>

//	lsd_enter_stop_mode();
	return;
 8002744:	bf00      	nop
}
 8002746:	bd80      	pop	{r7, pc}
 8002748:	200002ce 	.word	0x200002ce
 800274c:	40010c00 	.word	0x40010c00

08002750 <state_machine_run_s5_fail_safe>:

static void state_machine_run_s5_fail_safe( void ){
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
	current_state = S5_FAIL_SAFE;
 8002754:	4b03      	ldr	r3, [pc, #12]	@ (8002764 <state_machine_run_s5_fail_safe+0x14>)
 8002756:	2205      	movs	r2, #5
 8002758:	701a      	strb	r2, [r3, #0]
	return;
 800275a:	bf00      	nop
}
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	200002ce 	.word	0x200002ce

08002768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800276c:	f000 fda0 	bl	80032b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002770:	f000 f838 	bl	80027e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002774:	f000 fa5e 	bl	8002c34 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002778:	f000 f918 	bl	80029ac <MX_TIM2_Init>
  MX_TIM3_Init();
 800277c:	f000 f994 	bl	8002aa8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002780:	f000 f882 	bl	8002888 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002784:	f000 f9de 	bl	8002b44 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002788:	f000 fa2a 	bl	8002be0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800278c:	f000 f8aa 	bl	80028e4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  hmcu_peripherals.mcu_hi2c = &hi2c1;
 8002790:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <main+0x5c>)
 8002792:	4a0d      	ldr	r2, [pc, #52]	@ (80027c8 <main+0x60>)
 8002794:	601a      	str	r2, [r3, #0]
  hmcu_peripherals.mcu_htim[LSD_TIM_GENERAL] = &htim2;
 8002796:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <main+0x5c>)
 8002798:	4a0c      	ldr	r2, [pc, #48]	@ (80027cc <main+0x64>)
 800279a:	605a      	str	r2, [r3, #4]
  hmcu_peripherals.mcu_htim[LSD_TIM_COMMON] = &htim3;
 800279c:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <main+0x5c>)
 800279e:	4a0c      	ldr	r2, [pc, #48]	@ (80027d0 <main+0x68>)
 80027a0:	609a      	str	r2, [r3, #8]
  hmcu_peripherals.mcu_htim[LSD_TIM_SENSORS] = &htim4;
 80027a2:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <main+0x5c>)
 80027a4:	4a0b      	ldr	r2, [pc, #44]	@ (80027d4 <main+0x6c>)
 80027a6:	60da      	str	r2, [r3, #12]
  hmcu_peripherals.mcu_huart = &huart1;
 80027a8:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <main+0x5c>)
 80027aa:	4a0b      	ldr	r2, [pc, #44]	@ (80027d8 <main+0x70>)
 80027ac:	611a      	str	r2, [r3, #16]
  hmcu_peripherals.mcu_hrtc = &hrtc;
 80027ae:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <main+0x5c>)
 80027b0:	4a0a      	ldr	r2, [pc, #40]	@ (80027dc <main+0x74>)
 80027b2:	615a      	str	r2, [r3, #20]

  state_machine_init( &hmcu_peripherals, SystemClock_Config );
 80027b4:	490a      	ldr	r1, [pc, #40]	@ (80027e0 <main+0x78>)
 80027b6:	4803      	ldr	r0, [pc, #12]	@ (80027c4 <main+0x5c>)
 80027b8:	f7ff feb0 	bl	800251c <state_machine_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	state_machine_run();
 80027bc:	f7ff ff0e 	bl	80025dc <state_machine_run>
 80027c0:	e7fc      	b.n	80027bc <main+0x54>
 80027c2:	bf00      	nop
 80027c4:	2000170c 	.word	0x2000170c
 80027c8:	20001584 	.word	0x20001584
 80027cc:	200015ec 	.word	0x200015ec
 80027d0:	20001634 	.word	0x20001634
 80027d4:	2000167c 	.word	0x2000167c
 80027d8:	200016c4 	.word	0x200016c4
 80027dc:	200015d8 	.word	0x200015d8
 80027e0:	080027e5 	.word	0x080027e5

080027e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b094      	sub	sp, #80	@ 0x50
 80027e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027ee:	2228      	movs	r2, #40	@ 0x28
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f006 f9f3 	bl	8008bde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002814:	2309      	movs	r3, #9
 8002816:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002818:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800281c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800281e:	2301      	movs	r3, #1
 8002820:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002822:	2300      	movs	r3, #0
 8002824:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002826:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800282a:	4618      	mov	r0, r3
 800282c:	f002 f992 	bl	8004b54 <HAL_RCC_OscConfig>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8002836:	f000 fa95 	bl	8002d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800283a:	230f      	movs	r3, #15
 800283c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800283e:	2301      	movs	r3, #1
 8002840:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800284a:	2300      	movs	r3, #0
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f002 fbff 	bl	8005058 <HAL_RCC_ClockConfig>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002860:	f000 fa80 	bl	8002d64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002864:	2301      	movs	r3, #1
 8002866:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002868:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800286c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	4618      	mov	r0, r3
 8002872:	f002 fd81 	bl	8005378 <HAL_RCCEx_PeriphCLKConfig>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800287c:	f000 fa72 	bl	8002d64 <Error_Handler>
  }
}
 8002880:	bf00      	nop
 8002882:	3750      	adds	r7, #80	@ 0x50
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800288c:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <MX_I2C1_Init+0x50>)
 800288e:	4a13      	ldr	r2, [pc, #76]	@ (80028dc <MX_I2C1_Init+0x54>)
 8002890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002892:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <MX_I2C1_Init+0x50>)
 8002894:	4a12      	ldr	r2, [pc, #72]	@ (80028e0 <MX_I2C1_Init+0x58>)
 8002896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002898:	4b0f      	ldr	r3, [pc, #60]	@ (80028d8 <MX_I2C1_Init+0x50>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800289e:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <MX_I2C1_Init+0x50>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028a4:	4b0c      	ldr	r3, [pc, #48]	@ (80028d8 <MX_I2C1_Init+0x50>)
 80028a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028ac:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <MX_I2C1_Init+0x50>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028b2:	4b09      	ldr	r3, [pc, #36]	@ (80028d8 <MX_I2C1_Init+0x50>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028b8:	4b07      	ldr	r3, [pc, #28]	@ (80028d8 <MX_I2C1_Init+0x50>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028be:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <MX_I2C1_Init+0x50>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028c4:	4804      	ldr	r0, [pc, #16]	@ (80028d8 <MX_I2C1_Init+0x50>)
 80028c6:	f001 f905 	bl	8003ad4 <HAL_I2C_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028d0:	f000 fa48 	bl	8002d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20001584 	.word	0x20001584
 80028dc:	40005400 	.word	0x40005400
 80028e0:	000186a0 	.word	0x000186a0

080028e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80028ea:	f107 030c 	add.w	r3, r7, #12
 80028ee:	2100      	movs	r1, #0
 80028f0:	460a      	mov	r2, r1
 80028f2:	801a      	strh	r2, [r3, #0]
 80028f4:	460a      	mov	r2, r1
 80028f6:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80028f8:	2300      	movs	r3, #0
 80028fa:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 80028fc:	463b      	mov	r3, r7
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002904:	4b27      	ldr	r3, [pc, #156]	@ (80029a4 <MX_RTC_Init+0xc0>)
 8002906:	4a28      	ldr	r2, [pc, #160]	@ (80029a8 <MX_RTC_Init+0xc4>)
 8002908:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800290a:	4b26      	ldr	r3, [pc, #152]	@ (80029a4 <MX_RTC_Init+0xc0>)
 800290c:	f04f 32ff 	mov.w	r2, #4294967295
 8002910:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002912:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <MX_RTC_Init+0xc0>)
 8002914:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002918:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800291a:	4822      	ldr	r0, [pc, #136]	@ (80029a4 <MX_RTC_Init+0xc0>)
 800291c:	f002 fe98 	bl	8005650 <HAL_RTC_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002926:	f000 fa1d 	bl	8002d64 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002936:	f107 030c 	add.w	r3, r7, #12
 800293a:	2200      	movs	r2, #0
 800293c:	4619      	mov	r1, r3
 800293e:	4819      	ldr	r0, [pc, #100]	@ (80029a4 <MX_RTC_Init+0xc0>)
 8002940:	f002 ff12 	bl	8005768 <HAL_RTC_SetTime>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 800294a:	f000 fa0b 	bl	8002d64 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800294e:	2301      	movs	r3, #1
 8002950:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002952:	2301      	movs	r3, #1
 8002954:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 1;
 8002956:	2301      	movs	r3, #1
 8002958:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 800295e:	f107 0308 	add.w	r3, r7, #8
 8002962:	2200      	movs	r2, #0
 8002964:	4619      	mov	r1, r3
 8002966:	480f      	ldr	r0, [pc, #60]	@ (80029a4 <MX_RTC_Init+0xc0>)
 8002968:	f003 f86e 	bl	8005a48 <HAL_RTC_SetDate>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002972:	f000 f9f7 	bl	8002d64 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 10;
 800297e:	230a      	movs	r3, #10
 8002980:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002982:	2300      	movs	r3, #0
 8002984:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002986:	463b      	mov	r3, r7
 8002988:	2200      	movs	r2, #0
 800298a:	4619      	mov	r1, r3
 800298c:	4805      	ldr	r0, [pc, #20]	@ (80029a4 <MX_RTC_Init+0xc0>)
 800298e:	f003 f965 	bl	8005c5c <HAL_RTC_SetAlarm_IT>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8002998:	f000 f9e4 	bl	8002d64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	200015d8 	.word	0x200015d8
 80029a8:	40002800 	.word	0x40002800

080029ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08e      	sub	sp, #56	@ 0x38
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c0:	f107 0320 	add.w	r3, r7, #32
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
 80029d8:	615a      	str	r2, [r3, #20]
 80029da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029dc:	4b31      	ldr	r3, [pc, #196]	@ (8002aa4 <MX_TIM2_Init+0xf8>)
 80029de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000 - 1;
 80029e4:	4b2f      	ldr	r3, [pc, #188]	@ (8002aa4 <MX_TIM2_Init+0xf8>)
 80029e6:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80029ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ec:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa4 <MX_TIM2_Init+0xf8>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80029f2:	4b2c      	ldr	r3, [pc, #176]	@ (8002aa4 <MX_TIM2_Init+0xf8>)
 80029f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029fa:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa4 <MX_TIM2_Init+0xf8>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a00:	4b28      	ldr	r3, [pc, #160]	@ (8002aa4 <MX_TIM2_Init+0xf8>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a06:	4827      	ldr	r0, [pc, #156]	@ (8002aa4 <MX_TIM2_Init+0xf8>)
 8002a08:	f003 fcfd 	bl	8006406 <HAL_TIM_Base_Init>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002a12:	f000 f9a7 	bl	8002d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a20:	4619      	mov	r1, r3
 8002a22:	4820      	ldr	r0, [pc, #128]	@ (8002aa4 <MX_TIM2_Init+0xf8>)
 8002a24:	f004 f856 	bl	8006ad4 <HAL_TIM_ConfigClockSource>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002a2e:	f000 f999 	bl	8002d64 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002a32:	481c      	ldr	r0, [pc, #112]	@ (8002aa4 <MX_TIM2_Init+0xf8>)
 8002a34:	f003 fdf8 	bl	8006628 <HAL_TIM_OC_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002a3e:	f000 f991 	bl	8002d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a4a:	f107 0320 	add.w	r3, r7, #32
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4814      	ldr	r0, [pc, #80]	@ (8002aa4 <MX_TIM2_Init+0xf8>)
 8002a52:	f004 fbdb 	bl	800720c <HAL_TIMEx_MasterConfigSynchronization>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002a5c:	f000 f982 	bl	8002d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002a60:	2300      	movs	r3, #0
 8002a62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a70:	1d3b      	adds	r3, r7, #4
 8002a72:	2200      	movs	r2, #0
 8002a74:	4619      	mov	r1, r3
 8002a76:	480b      	ldr	r0, [pc, #44]	@ (8002aa4 <MX_TIM2_Init+0xf8>)
 8002a78:	f003 ffd0 	bl	8006a1c <HAL_TIM_OC_ConfigChannel>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002a82:	f000 f96f 	bl	8002d64 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	2204      	movs	r2, #4
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4805      	ldr	r0, [pc, #20]	@ (8002aa4 <MX_TIM2_Init+0xf8>)
 8002a8e:	f003 ffc5 	bl	8006a1c <HAL_TIM_OC_ConfigChannel>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002a98:	f000 f964 	bl	8002d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a9c:	bf00      	nop
 8002a9e:	3738      	adds	r7, #56	@ 0x38
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	200015ec 	.word	0x200015ec

08002aa8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aae:	f107 0308 	add.w	r3, r7, #8
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	605a      	str	r2, [r3, #4]
 8002ab8:	609a      	str	r2, [r3, #8]
 8002aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002abc:	463b      	mov	r3, r7
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b3c <MX_TIM3_Init+0x94>)
 8002ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b40 <MX_TIM3_Init+0x98>)
 8002ac8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 8002aca:	4b1c      	ldr	r3, [pc, #112]	@ (8002b3c <MX_TIM3_Init+0x94>)
 8002acc:	220f      	movs	r2, #15
 8002ace:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <MX_TIM3_Init+0x94>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ad6:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <MX_TIM3_Init+0x94>)
 8002ad8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002adc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ade:	4b17      	ldr	r3, [pc, #92]	@ (8002b3c <MX_TIM3_Init+0x94>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae4:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <MX_TIM3_Init+0x94>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002aea:	4814      	ldr	r0, [pc, #80]	@ (8002b3c <MX_TIM3_Init+0x94>)
 8002aec:	f003 fc8b 	bl	8006406 <HAL_TIM_Base_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002af6:	f000 f935 	bl	8002d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002afa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002afe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b00:	f107 0308 	add.w	r3, r7, #8
 8002b04:	4619      	mov	r1, r3
 8002b06:	480d      	ldr	r0, [pc, #52]	@ (8002b3c <MX_TIM3_Init+0x94>)
 8002b08:	f003 ffe4 	bl	8006ad4 <HAL_TIM_ConfigClockSource>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002b12:	f000 f927 	bl	8002d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b1e:	463b      	mov	r3, r7
 8002b20:	4619      	mov	r1, r3
 8002b22:	4806      	ldr	r0, [pc, #24]	@ (8002b3c <MX_TIM3_Init+0x94>)
 8002b24:	f004 fb72 	bl	800720c <HAL_TIMEx_MasterConfigSynchronization>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002b2e:	f000 f919 	bl	8002d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20001634 	.word	0x20001634
 8002b40:	40000400 	.word	0x40000400

08002b44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b4a:	f107 0308 	add.w	r3, r7, #8
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b58:	463b      	mov	r3, r7
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b60:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd8 <MX_TIM4_Init+0x94>)
 8002b62:	4a1e      	ldr	r2, [pc, #120]	@ (8002bdc <MX_TIM4_Init+0x98>)
 8002b64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16 - 1;
 8002b66:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd8 <MX_TIM4_Init+0x94>)
 8002b68:	220f      	movs	r2, #15
 8002b6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd8 <MX_TIM4_Init+0x94>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b72:	4b19      	ldr	r3, [pc, #100]	@ (8002bd8 <MX_TIM4_Init+0x94>)
 8002b74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7a:	4b17      	ldr	r3, [pc, #92]	@ (8002bd8 <MX_TIM4_Init+0x94>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b80:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <MX_TIM4_Init+0x94>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b86:	4814      	ldr	r0, [pc, #80]	@ (8002bd8 <MX_TIM4_Init+0x94>)
 8002b88:	f003 fc3d 	bl	8006406 <HAL_TIM_Base_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002b92:	f000 f8e7 	bl	8002d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b9c:	f107 0308 	add.w	r3, r7, #8
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	480d      	ldr	r0, [pc, #52]	@ (8002bd8 <MX_TIM4_Init+0x94>)
 8002ba4:	f003 ff96 	bl	8006ad4 <HAL_TIM_ConfigClockSource>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002bae:	f000 f8d9 	bl	8002d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bba:	463b      	mov	r3, r7
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4806      	ldr	r0, [pc, #24]	@ (8002bd8 <MX_TIM4_Init+0x94>)
 8002bc0:	f004 fb24 	bl	800720c <HAL_TIMEx_MasterConfigSynchronization>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002bca:	f000 f8cb 	bl	8002d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bce:	bf00      	nop
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000167c 	.word	0x2000167c
 8002bdc:	40000800 	.word	0x40000800

08002be0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <MX_USART1_UART_Init+0x4c>)
 8002be6:	4a12      	ldr	r2, [pc, #72]	@ (8002c30 <MX_USART1_UART_Init+0x50>)
 8002be8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bea:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <MX_USART1_UART_Init+0x4c>)
 8002bec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002bf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8002c2c <MX_USART1_UART_Init+0x4c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <MX_USART1_UART_Init+0x4c>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8002c2c <MX_USART1_UART_Init+0x4c>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c04:	4b09      	ldr	r3, [pc, #36]	@ (8002c2c <MX_USART1_UART_Init+0x4c>)
 8002c06:	220c      	movs	r2, #12
 8002c08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c0a:	4b08      	ldr	r3, [pc, #32]	@ (8002c2c <MX_USART1_UART_Init+0x4c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c10:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <MX_USART1_UART_Init+0x4c>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c16:	4805      	ldr	r0, [pc, #20]	@ (8002c2c <MX_USART1_UART_Init+0x4c>)
 8002c18:	f004 fb68 	bl	80072ec <HAL_UART_Init>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c22:	f000 f89f 	bl	8002d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200016c4 	.word	0x200016c4
 8002c30:	40013800 	.word	0x40013800

08002c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3a:	f107 0310 	add.w	r3, r7, #16
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c48:	4b42      	ldr	r3, [pc, #264]	@ (8002d54 <MX_GPIO_Init+0x120>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	4a41      	ldr	r2, [pc, #260]	@ (8002d54 <MX_GPIO_Init+0x120>)
 8002c4e:	f043 0310 	orr.w	r3, r3, #16
 8002c52:	6193      	str	r3, [r2, #24]
 8002c54:	4b3f      	ldr	r3, [pc, #252]	@ (8002d54 <MX_GPIO_Init+0x120>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c60:	4b3c      	ldr	r3, [pc, #240]	@ (8002d54 <MX_GPIO_Init+0x120>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	4a3b      	ldr	r2, [pc, #236]	@ (8002d54 <MX_GPIO_Init+0x120>)
 8002c66:	f043 0320 	orr.w	r3, r3, #32
 8002c6a:	6193      	str	r3, [r2, #24]
 8002c6c:	4b39      	ldr	r3, [pc, #228]	@ (8002d54 <MX_GPIO_Init+0x120>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c78:	4b36      	ldr	r3, [pc, #216]	@ (8002d54 <MX_GPIO_Init+0x120>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	4a35      	ldr	r2, [pc, #212]	@ (8002d54 <MX_GPIO_Init+0x120>)
 8002c7e:	f043 0308 	orr.w	r3, r3, #8
 8002c82:	6193      	str	r3, [r2, #24]
 8002c84:	4b33      	ldr	r3, [pc, #204]	@ (8002d54 <MX_GPIO_Init+0x120>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c90:	4b30      	ldr	r3, [pc, #192]	@ (8002d54 <MX_GPIO_Init+0x120>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	4a2f      	ldr	r2, [pc, #188]	@ (8002d54 <MX_GPIO_Init+0x120>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	6193      	str	r3, [r2, #24]
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d54 <MX_GPIO_Init+0x120>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, US_TRIG_Pin|SENSOR_PWR_Pin, GPIO_PIN_RESET);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2112      	movs	r1, #18
 8002cac:	482a      	ldr	r0, [pc, #168]	@ (8002d58 <MX_GPIO_Init+0x124>)
 8002cae:	f000 fee0 	bl	8003a72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(uLTE_PWR_GPIO_Port, uLTE_PWR_Pin, GPIO_PIN_SET);
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002cb8:	4827      	ldr	r0, [pc, #156]	@ (8002d58 <MX_GPIO_Init+0x124>)
 8002cba:	f000 feda 	bl	8003a72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_INFO1_Pin|LED_INFO2_Pin, GPIO_PIN_RESET);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002cc4:	4825      	ldr	r0, [pc, #148]	@ (8002d5c <MX_GPIO_Init+0x128>)
 8002cc6:	f000 fed4 	bl	8003a72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : US_ECHO_Pin */
  GPIO_InitStruct.Pin = US_ECHO_Pin;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002cce:	4b24      	ldr	r3, [pc, #144]	@ (8002d60 <MX_GPIO_Init+0x12c>)
 8002cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(US_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002cd6:	f107 0310 	add.w	r3, r7, #16
 8002cda:	4619      	mov	r1, r3
 8002cdc:	481e      	ldr	r0, [pc, #120]	@ (8002d58 <MX_GPIO_Init+0x124>)
 8002cde:	f000 fd2d 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : US_TRIG_Pin SENSOR_PWR_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin|SENSOR_PWR_Pin;
 8002ce2:	2312      	movs	r3, #18
 8002ce4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf2:	f107 0310 	add.w	r3, r7, #16
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4817      	ldr	r0, [pc, #92]	@ (8002d58 <MX_GPIO_Init+0x124>)
 8002cfa:	f000 fd1f 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pin : uLTE_PWR_Pin */
  GPIO_InitStruct.Pin = uLTE_PWR_Pin;
 8002cfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d04:	2301      	movs	r3, #1
 8002d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(uLTE_PWR_GPIO_Port, &GPIO_InitStruct);
 8002d10:	f107 0310 	add.w	r3, r7, #16
 8002d14:	4619      	mov	r1, r3
 8002d16:	4810      	ldr	r0, [pc, #64]	@ (8002d58 <MX_GPIO_Init+0x124>)
 8002d18:	f000 fd10 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INFO1_Pin LED_INFO2_Pin */
  GPIO_InitStruct.Pin = LED_INFO1_Pin|LED_INFO2_Pin;
 8002d1c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d22:	2301      	movs	r3, #1
 8002d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2e:	f107 0310 	add.w	r3, r7, #16
 8002d32:	4619      	mov	r1, r3
 8002d34:	4809      	ldr	r0, [pc, #36]	@ (8002d5c <MX_GPIO_Init+0x128>)
 8002d36:	f000 fd01 	bl	800373c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2006      	movs	r0, #6
 8002d40:	f000 fc13 	bl	800356a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d44:	2006      	movs	r0, #6
 8002d46:	f000 fc2c 	bl	80035a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d4a:	bf00      	nop
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40010c00 	.word	0x40010c00
 8002d5c:	40011000 	.word	0x40011000
 8002d60:	10310000 	.word	0x10310000

08002d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d68:	b672      	cpsid	i
}
 8002d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d6c:	bf00      	nop
 8002d6e:	e7fd      	b.n	8002d6c <Error_Handler+0x8>

08002d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d76:	4b15      	ldr	r3, [pc, #84]	@ (8002dcc <HAL_MspInit+0x5c>)
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	4a14      	ldr	r2, [pc, #80]	@ (8002dcc <HAL_MspInit+0x5c>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6193      	str	r3, [r2, #24]
 8002d82:	4b12      	ldr	r3, [pc, #72]	@ (8002dcc <HAL_MspInit+0x5c>)
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002dcc <HAL_MspInit+0x5c>)
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	4a0e      	ldr	r2, [pc, #56]	@ (8002dcc <HAL_MspInit+0x5c>)
 8002d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d98:	61d3      	str	r3, [r2, #28]
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <HAL_MspInit+0x5c>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002da6:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd0 <HAL_MspInit+0x60>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	4a04      	ldr	r2, [pc, #16]	@ (8002dd0 <HAL_MspInit+0x60>)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40010000 	.word	0x40010000

08002dd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 0310 	add.w	r3, r7, #16
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a15      	ldr	r2, [pc, #84]	@ (8002e44 <HAL_I2C_MspInit+0x70>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d123      	bne.n	8002e3c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df4:	4b14      	ldr	r3, [pc, #80]	@ (8002e48 <HAL_I2C_MspInit+0x74>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	4a13      	ldr	r2, [pc, #76]	@ (8002e48 <HAL_I2C_MspInit+0x74>)
 8002dfa:	f043 0308 	orr.w	r3, r3, #8
 8002dfe:	6193      	str	r3, [r2, #24]
 8002e00:	4b11      	ldr	r3, [pc, #68]	@ (8002e48 <HAL_I2C_MspInit+0x74>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e0c:	23c0      	movs	r3, #192	@ 0xc0
 8002e0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e10:	2312      	movs	r3, #18
 8002e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e14:	2303      	movs	r3, #3
 8002e16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e18:	f107 0310 	add.w	r3, r7, #16
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	480b      	ldr	r0, [pc, #44]	@ (8002e4c <HAL_I2C_MspInit+0x78>)
 8002e20:	f000 fc8c 	bl	800373c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e24:	4b08      	ldr	r3, [pc, #32]	@ (8002e48 <HAL_I2C_MspInit+0x74>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	4a07      	ldr	r2, [pc, #28]	@ (8002e48 <HAL_I2C_MspInit+0x74>)
 8002e2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e2e:	61d3      	str	r3, [r2, #28]
 8002e30:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <HAL_I2C_MspInit+0x74>)
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002e3c:	bf00      	nop
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40005400 	.word	0x40005400
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40010c00 	.word	0x40010c00

08002e50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a13      	ldr	r2, [pc, #76]	@ (8002eac <HAL_RTC_MspInit+0x5c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d120      	bne.n	8002ea4 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002e62:	f001 fe6b 	bl	8004b3c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002e66:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <HAL_RTC_MspInit+0x60>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	4a11      	ldr	r2, [pc, #68]	@ (8002eb0 <HAL_RTC_MspInit+0x60>)
 8002e6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e70:	61d3      	str	r3, [r2, #28]
 8002e72:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb0 <HAL_RTC_MspInit+0x60>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <HAL_RTC_MspInit+0x64>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002e84:	2200      	movs	r2, #0
 8002e86:	2100      	movs	r1, #0
 8002e88:	2003      	movs	r0, #3
 8002e8a:	f000 fb6e 	bl	800356a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002e8e:	2003      	movs	r0, #3
 8002e90:	f000 fb87 	bl	80035a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002e94:	2200      	movs	r2, #0
 8002e96:	2100      	movs	r1, #0
 8002e98:	2029      	movs	r0, #41	@ 0x29
 8002e9a:	f000 fb66 	bl	800356a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002e9e:	2029      	movs	r0, #41	@ 0x29
 8002ea0:	f000 fb7f 	bl	80035a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40002800 	.word	0x40002800
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	4242043c 	.word	0x4242043c

08002eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec8:	d114      	bne.n	8002ef4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eca:	4b22      	ldr	r3, [pc, #136]	@ (8002f54 <HAL_TIM_Base_MspInit+0x9c>)
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	4a21      	ldr	r2, [pc, #132]	@ (8002f54 <HAL_TIM_Base_MspInit+0x9c>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	61d3      	str	r3, [r2, #28]
 8002ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f54 <HAL_TIM_Base_MspInit+0x9c>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	201c      	movs	r0, #28
 8002ee8:	f000 fb3f 	bl	800356a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002eec:	201c      	movs	r0, #28
 8002eee:	f000 fb58 	bl	80035a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ef2:	e02a      	b.n	8002f4a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a17      	ldr	r2, [pc, #92]	@ (8002f58 <HAL_TIM_Base_MspInit+0xa0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d114      	bne.n	8002f28 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002efe:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <HAL_TIM_Base_MspInit+0x9c>)
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	4a14      	ldr	r2, [pc, #80]	@ (8002f54 <HAL_TIM_Base_MspInit+0x9c>)
 8002f04:	f043 0302 	orr.w	r3, r3, #2
 8002f08:	61d3      	str	r3, [r2, #28]
 8002f0a:	4b12      	ldr	r3, [pc, #72]	@ (8002f54 <HAL_TIM_Base_MspInit+0x9c>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2100      	movs	r1, #0
 8002f1a:	201d      	movs	r0, #29
 8002f1c:	f000 fb25 	bl	800356a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f20:	201d      	movs	r0, #29
 8002f22:	f000 fb3e 	bl	80035a2 <HAL_NVIC_EnableIRQ>
}
 8002f26:	e010      	b.n	8002f4a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f5c <HAL_TIM_Base_MspInit+0xa4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d10b      	bne.n	8002f4a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f32:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <HAL_TIM_Base_MspInit+0x9c>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	4a07      	ldr	r2, [pc, #28]	@ (8002f54 <HAL_TIM_Base_MspInit+0x9c>)
 8002f38:	f043 0304 	orr.w	r3, r3, #4
 8002f3c:	61d3      	str	r3, [r2, #28]
 8002f3e:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <HAL_TIM_Base_MspInit+0x9c>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800

08002f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f68:	f107 0310 	add.w	r3, r7, #16
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a20      	ldr	r2, [pc, #128]	@ (8002ffc <HAL_UART_MspInit+0x9c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d139      	bne.n	8002ff4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f80:	4b1f      	ldr	r3, [pc, #124]	@ (8003000 <HAL_UART_MspInit+0xa0>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	4a1e      	ldr	r2, [pc, #120]	@ (8003000 <HAL_UART_MspInit+0xa0>)
 8002f86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f8a:	6193      	str	r3, [r2, #24]
 8002f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003000 <HAL_UART_MspInit+0xa0>)
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f98:	4b19      	ldr	r3, [pc, #100]	@ (8003000 <HAL_UART_MspInit+0xa0>)
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	4a18      	ldr	r2, [pc, #96]	@ (8003000 <HAL_UART_MspInit+0xa0>)
 8002f9e:	f043 0304 	orr.w	r3, r3, #4
 8002fa2:	6193      	str	r3, [r2, #24]
 8002fa4:	4b16      	ldr	r3, [pc, #88]	@ (8003000 <HAL_UART_MspInit+0xa0>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = uLTE_TX_Pin;
 8002fb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(uLTE_TX_GPIO_Port, &GPIO_InitStruct);
 8002fbe:	f107 0310 	add.w	r3, r7, #16
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	480f      	ldr	r0, [pc, #60]	@ (8003004 <HAL_UART_MspInit+0xa4>)
 8002fc6:	f000 fbb9 	bl	800373c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uLTE_RX_Pin;
 8002fca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(uLTE_RX_GPIO_Port, &GPIO_InitStruct);
 8002fd8:	f107 0310 	add.w	r3, r7, #16
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4809      	ldr	r0, [pc, #36]	@ (8003004 <HAL_UART_MspInit+0xa4>)
 8002fe0:	f000 fbac 	bl	800373c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	2025      	movs	r0, #37	@ 0x25
 8002fea:	f000 fabe 	bl	800356a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fee:	2025      	movs	r0, #37	@ 0x25
 8002ff0:	f000 fad7 	bl	80035a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002ff4:	bf00      	nop
 8002ff6:	3720      	adds	r7, #32
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40013800 	.word	0x40013800
 8003000:	40021000 	.word	0x40021000
 8003004:	40010800 	.word	0x40010800

08003008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800300c:	bf00      	nop
 800300e:	e7fd      	b.n	800300c <NMI_Handler+0x4>

08003010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <HardFault_Handler+0x4>

08003018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800301c:	bf00      	nop
 800301e:	e7fd      	b.n	800301c <MemManage_Handler+0x4>

08003020 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <BusFault_Handler+0x4>

08003028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <UsageFault_Handler+0x4>

08003030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003058:	f000 f970 	bl	800333c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800305c:	bf00      	nop
 800305e:	bd80      	pop	{r7, pc}

08003060 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8003064:	4802      	ldr	r0, [pc, #8]	@ (8003070 <RTC_IRQHandler+0x10>)
 8003066:	f003 f985 	bl	8006374 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200015d8 	.word	0x200015d8

08003074 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(US_ECHO_Pin);
 8003078:	2001      	movs	r0, #1
 800307a:	f000 fd13 	bl	8003aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003088:	4802      	ldr	r0, [pc, #8]	@ (8003094 <TIM2_IRQHandler+0x10>)
 800308a:	f003 fbd7 	bl	800683c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	200015ec 	.word	0x200015ec

08003098 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800309c:	4802      	ldr	r0, [pc, #8]	@ (80030a8 <TIM3_IRQHandler+0x10>)
 800309e:	f003 fbcd 	bl	800683c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20001634 	.word	0x20001634

080030ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030b0:	4802      	ldr	r0, [pc, #8]	@ (80030bc <USART1_IRQHandler+0x10>)
 80030b2:	f004 fa1b 	bl	80074ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	200016c4 	.word	0x200016c4

080030c0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80030c4:	4802      	ldr	r0, [pc, #8]	@ (80030d0 <RTC_Alarm_IRQHandler+0x10>)
 80030c6:	f002 fe81 	bl	8005dcc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200015d8 	.word	0x200015d8

080030d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return 1;
 80030d8:	2301      	movs	r3, #1
}
 80030da:	4618      	mov	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <_kill>:

int _kill(int pid, int sig)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030ec:	f005 fde8 	bl	8008cc0 <__errno>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2216      	movs	r2, #22
 80030f4:	601a      	str	r2, [r3, #0]
  return -1;
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <_exit>:

void _exit (int status)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800310a:	f04f 31ff 	mov.w	r1, #4294967295
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ffe7 	bl	80030e2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003114:	bf00      	nop
 8003116:	e7fd      	b.n	8003114 <_exit+0x12>

08003118 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	e00a      	b.n	8003140 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800312a:	f3af 8000 	nop.w
 800312e:	4601      	mov	r1, r0
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	60ba      	str	r2, [r7, #8]
 8003136:	b2ca      	uxtb	r2, r1
 8003138:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	3301      	adds	r3, #1
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	429a      	cmp	r2, r3
 8003146:	dbf0      	blt.n	800312a <_read+0x12>
  }

  return len;
 8003148:	687b      	ldr	r3, [r7, #4]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b086      	sub	sp, #24
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	e009      	b.n	8003178 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	60ba      	str	r2, [r7, #8]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	3301      	adds	r3, #1
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	429a      	cmp	r2, r3
 800317e:	dbf1      	blt.n	8003164 <_write+0x12>
  }
  return len;
 8003180:	687b      	ldr	r3, [r7, #4]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <_close>:

int _close(int file)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031b0:	605a      	str	r2, [r3, #4]
  return 0;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <_isatty>:

int _isatty(int file)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031c6:	2301      	movs	r3, #1
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr

080031d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b085      	sub	sp, #20
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr
	...

080031ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031f4:	4a14      	ldr	r2, [pc, #80]	@ (8003248 <_sbrk+0x5c>)
 80031f6:	4b15      	ldr	r3, [pc, #84]	@ (800324c <_sbrk+0x60>)
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003200:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <_sbrk+0x64>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003208:	4b11      	ldr	r3, [pc, #68]	@ (8003250 <_sbrk+0x64>)
 800320a:	4a12      	ldr	r2, [pc, #72]	@ (8003254 <_sbrk+0x68>)
 800320c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800320e:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <_sbrk+0x64>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	429a      	cmp	r2, r3
 800321a:	d207      	bcs.n	800322c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800321c:	f005 fd50 	bl	8008cc0 <__errno>
 8003220:	4603      	mov	r3, r0
 8003222:	220c      	movs	r2, #12
 8003224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003226:	f04f 33ff 	mov.w	r3, #4294967295
 800322a:	e009      	b.n	8003240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800322c:	4b08      	ldr	r3, [pc, #32]	@ (8003250 <_sbrk+0x64>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003232:	4b07      	ldr	r3, [pc, #28]	@ (8003250 <_sbrk+0x64>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	4a05      	ldr	r2, [pc, #20]	@ (8003250 <_sbrk+0x64>)
 800323c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800323e:	68fb      	ldr	r3, [r7, #12]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20005000 	.word	0x20005000
 800324c:	00000400 	.word	0x00000400
 8003250:	20001724 	.word	0x20001724
 8003254:	20001878 	.word	0x20001878

08003258 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003264:	f7ff fff8 	bl	8003258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003268:	480b      	ldr	r0, [pc, #44]	@ (8003298 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800326a:	490c      	ldr	r1, [pc, #48]	@ (800329c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800326c:	4a0c      	ldr	r2, [pc, #48]	@ (80032a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800326e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003270:	e002      	b.n	8003278 <LoopCopyDataInit>

08003272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003276:	3304      	adds	r3, #4

08003278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800327a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800327c:	d3f9      	bcc.n	8003272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800327e:	4a09      	ldr	r2, [pc, #36]	@ (80032a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003280:	4c09      	ldr	r4, [pc, #36]	@ (80032a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003284:	e001      	b.n	800328a <LoopFillZerobss>

08003286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003288:	3204      	adds	r2, #4

0800328a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800328a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800328c:	d3fb      	bcc.n	8003286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800328e:	f005 fd1d 	bl	8008ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003292:	f7ff fa69 	bl	8002768 <main>
  bx lr
 8003296:	4770      	bx	lr
  ldr r0, =_sdata
 8003298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800329c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80032a0:	0800ad90 	.word	0x0800ad90
  ldr r2, =_sbss
 80032a4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80032a8:	20001878 	.word	0x20001878

080032ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032ac:	e7fe      	b.n	80032ac <ADC1_2_IRQHandler>
	...

080032b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b4:	4b08      	ldr	r3, [pc, #32]	@ (80032d8 <HAL_Init+0x28>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a07      	ldr	r2, [pc, #28]	@ (80032d8 <HAL_Init+0x28>)
 80032ba:	f043 0310 	orr.w	r3, r3, #16
 80032be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c0:	2003      	movs	r0, #3
 80032c2:	f000 f947 	bl	8003554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032c6:	200f      	movs	r0, #15
 80032c8:	f000 f808 	bl	80032dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032cc:	f7ff fd50 	bl	8002d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40022000 	.word	0x40022000

080032dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032e4:	4b12      	ldr	r3, [pc, #72]	@ (8003330 <HAL_InitTick+0x54>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b12      	ldr	r3, [pc, #72]	@ (8003334 <HAL_InitTick+0x58>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	4619      	mov	r1, r3
 80032ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 f95f 	bl	80035be <HAL_SYSTICK_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e00e      	b.n	8003328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b0f      	cmp	r3, #15
 800330e:	d80a      	bhi.n	8003326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003310:	2200      	movs	r2, #0
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	f000 f927 	bl	800356a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800331c:	4a06      	ldr	r2, [pc, #24]	@ (8003338 <HAL_InitTick+0x5c>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000008 	.word	0x20000008
 8003334:	20000010 	.word	0x20000010
 8003338:	2000000c 	.word	0x2000000c

0800333c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003340:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <HAL_IncTick+0x1c>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	4b05      	ldr	r3, [pc, #20]	@ (800335c <HAL_IncTick+0x20>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4413      	add	r3, r2
 800334c:	4a03      	ldr	r2, [pc, #12]	@ (800335c <HAL_IncTick+0x20>)
 800334e:	6013      	str	r3, [r2, #0]
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	20000010 	.word	0x20000010
 800335c:	20001728 	.word	0x20001728

08003360 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return uwTick;
 8003364:	4b02      	ldr	r3, [pc, #8]	@ (8003370 <HAL_GetTick+0x10>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr
 8003370:	20001728 	.word	0x20001728

08003374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800337c:	f7ff fff0 	bl	8003360 <HAL_GetTick>
 8003380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d005      	beq.n	800339a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800338e:	4b0a      	ldr	r3, [pc, #40]	@ (80033b8 <HAL_Delay+0x44>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800339a:	bf00      	nop
 800339c:	f7ff ffe0 	bl	8003360 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d8f7      	bhi.n	800339c <HAL_Delay+0x28>
  {
  }
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000010 	.word	0x20000010

080033bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003400 <__NVIC_SetPriorityGrouping+0x44>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033d8:	4013      	ands	r3, r2
 80033da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ee:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <__NVIC_SetPriorityGrouping+0x44>)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	60d3      	str	r3, [r2, #12]
}
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <__NVIC_GetPriorityGrouping+0x18>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	f003 0307 	and.w	r3, r3, #7
}
 8003412:	4618      	mov	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	2b00      	cmp	r3, #0
 8003430:	db0b      	blt.n	800344a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	f003 021f 	and.w	r2, r3, #31
 8003438:	4906      	ldr	r1, [pc, #24]	@ (8003454 <__NVIC_EnableIRQ+0x34>)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2001      	movs	r0, #1
 8003442:	fa00 f202 	lsl.w	r2, r0, r2
 8003446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr
 8003454:	e000e100 	.word	0xe000e100

08003458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	6039      	str	r1, [r7, #0]
 8003462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003468:	2b00      	cmp	r3, #0
 800346a:	db0a      	blt.n	8003482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	b2da      	uxtb	r2, r3
 8003470:	490c      	ldr	r1, [pc, #48]	@ (80034a4 <__NVIC_SetPriority+0x4c>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	0112      	lsls	r2, r2, #4
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	440b      	add	r3, r1
 800347c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003480:	e00a      	b.n	8003498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4908      	ldr	r1, [pc, #32]	@ (80034a8 <__NVIC_SetPriority+0x50>)
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	3b04      	subs	r3, #4
 8003490:	0112      	lsls	r2, r2, #4
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	440b      	add	r3, r1
 8003496:	761a      	strb	r2, [r3, #24]
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	e000e100 	.word	0xe000e100
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b089      	sub	sp, #36	@ 0x24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f1c3 0307 	rsb	r3, r3, #7
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	bf28      	it	cs
 80034ca:	2304      	movcs	r3, #4
 80034cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3304      	adds	r3, #4
 80034d2:	2b06      	cmp	r3, #6
 80034d4:	d902      	bls.n	80034dc <NVIC_EncodePriority+0x30>
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3b03      	subs	r3, #3
 80034da:	e000      	b.n	80034de <NVIC_EncodePriority+0x32>
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	f04f 32ff 	mov.w	r2, #4294967295
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43da      	mvns	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	401a      	ands	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034f4:	f04f 31ff 	mov.w	r1, #4294967295
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	43d9      	mvns	r1, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003504:	4313      	orrs	r3, r2
         );
}
 8003506:	4618      	mov	r0, r3
 8003508:	3724      	adds	r7, #36	@ 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3b01      	subs	r3, #1
 800351c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003520:	d301      	bcc.n	8003526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003522:	2301      	movs	r3, #1
 8003524:	e00f      	b.n	8003546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003526:	4a0a      	ldr	r2, [pc, #40]	@ (8003550 <SysTick_Config+0x40>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3b01      	subs	r3, #1
 800352c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800352e:	210f      	movs	r1, #15
 8003530:	f04f 30ff 	mov.w	r0, #4294967295
 8003534:	f7ff ff90 	bl	8003458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003538:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <SysTick_Config+0x40>)
 800353a:	2200      	movs	r2, #0
 800353c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800353e:	4b04      	ldr	r3, [pc, #16]	@ (8003550 <SysTick_Config+0x40>)
 8003540:	2207      	movs	r2, #7
 8003542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	e000e010 	.word	0xe000e010

08003554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ff2d 	bl	80033bc <__NVIC_SetPriorityGrouping>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800356a:	b580      	push	{r7, lr}
 800356c:	b086      	sub	sp, #24
 800356e:	af00      	add	r7, sp, #0
 8003570:	4603      	mov	r3, r0
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800357c:	f7ff ff42 	bl	8003404 <__NVIC_GetPriorityGrouping>
 8003580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	6978      	ldr	r0, [r7, #20]
 8003588:	f7ff ff90 	bl	80034ac <NVIC_EncodePriority>
 800358c:	4602      	mov	r2, r0
 800358e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff5f 	bl	8003458 <__NVIC_SetPriority>
}
 800359a:	bf00      	nop
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	4603      	mov	r3, r0
 80035aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff35 	bl	8003420 <__NVIC_EnableIRQ>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ffa2 	bl	8003510 <SysTick_Config>
 80035cc:	4603      	mov	r3, r0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d008      	beq.n	8003600 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2204      	movs	r2, #4
 80035f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e020      	b.n	8003642 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 020e 	bic.w	r2, r2, #14
 800360e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003628:	2101      	movs	r1, #1
 800362a:	fa01 f202 	lsl.w	r2, r1, r2
 800362e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d005      	beq.n	8003670 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2204      	movs	r2, #4
 8003668:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	e051      	b.n	8003714 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 020e 	bic.w	r2, r2, #14
 800367e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0201 	bic.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a22      	ldr	r2, [pc, #136]	@ (8003720 <HAL_DMA_Abort_IT+0xd4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d029      	beq.n	80036ee <HAL_DMA_Abort_IT+0xa2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a21      	ldr	r2, [pc, #132]	@ (8003724 <HAL_DMA_Abort_IT+0xd8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d022      	beq.n	80036ea <HAL_DMA_Abort_IT+0x9e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003728 <HAL_DMA_Abort_IT+0xdc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01a      	beq.n	80036e4 <HAL_DMA_Abort_IT+0x98>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <HAL_DMA_Abort_IT+0xe0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d012      	beq.n	80036de <HAL_DMA_Abort_IT+0x92>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003730 <HAL_DMA_Abort_IT+0xe4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00a      	beq.n	80036d8 <HAL_DMA_Abort_IT+0x8c>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003734 <HAL_DMA_Abort_IT+0xe8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d102      	bne.n	80036d2 <HAL_DMA_Abort_IT+0x86>
 80036cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80036d0:	e00e      	b.n	80036f0 <HAL_DMA_Abort_IT+0xa4>
 80036d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036d6:	e00b      	b.n	80036f0 <HAL_DMA_Abort_IT+0xa4>
 80036d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036dc:	e008      	b.n	80036f0 <HAL_DMA_Abort_IT+0xa4>
 80036de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036e2:	e005      	b.n	80036f0 <HAL_DMA_Abort_IT+0xa4>
 80036e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036e8:	e002      	b.n	80036f0 <HAL_DMA_Abort_IT+0xa4>
 80036ea:	2310      	movs	r3, #16
 80036ec:	e000      	b.n	80036f0 <HAL_DMA_Abort_IT+0xa4>
 80036ee:	2301      	movs	r3, #1
 80036f0:	4a11      	ldr	r2, [pc, #68]	@ (8003738 <HAL_DMA_Abort_IT+0xec>)
 80036f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3
    } 
  }
  return status;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40020008 	.word	0x40020008
 8003724:	4002001c 	.word	0x4002001c
 8003728:	40020030 	.word	0x40020030
 800372c:	40020044 	.word	0x40020044
 8003730:	40020058 	.word	0x40020058
 8003734:	4002006c 	.word	0x4002006c
 8003738:	40020000 	.word	0x40020000

0800373c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800373c:	b480      	push	{r7}
 800373e:	b08b      	sub	sp, #44	@ 0x2c
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003746:	2300      	movs	r3, #0
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800374a:	2300      	movs	r3, #0
 800374c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800374e:	e169      	b.n	8003a24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003750:	2201      	movs	r2, #1
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	429a      	cmp	r2, r3
 800376a:	f040 8158 	bne.w	8003a1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4a9a      	ldr	r2, [pc, #616]	@ (80039dc <HAL_GPIO_Init+0x2a0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d05e      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
 8003778:	4a98      	ldr	r2, [pc, #608]	@ (80039dc <HAL_GPIO_Init+0x2a0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d875      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 800377e:	4a98      	ldr	r2, [pc, #608]	@ (80039e0 <HAL_GPIO_Init+0x2a4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d058      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
 8003784:	4a96      	ldr	r2, [pc, #600]	@ (80039e0 <HAL_GPIO_Init+0x2a4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d86f      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 800378a:	4a96      	ldr	r2, [pc, #600]	@ (80039e4 <HAL_GPIO_Init+0x2a8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d052      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
 8003790:	4a94      	ldr	r2, [pc, #592]	@ (80039e4 <HAL_GPIO_Init+0x2a8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d869      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 8003796:	4a94      	ldr	r2, [pc, #592]	@ (80039e8 <HAL_GPIO_Init+0x2ac>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d04c      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
 800379c:	4a92      	ldr	r2, [pc, #584]	@ (80039e8 <HAL_GPIO_Init+0x2ac>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d863      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 80037a2:	4a92      	ldr	r2, [pc, #584]	@ (80039ec <HAL_GPIO_Init+0x2b0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d046      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
 80037a8:	4a90      	ldr	r2, [pc, #576]	@ (80039ec <HAL_GPIO_Init+0x2b0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d85d      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 80037ae:	2b12      	cmp	r3, #18
 80037b0:	d82a      	bhi.n	8003808 <HAL_GPIO_Init+0xcc>
 80037b2:	2b12      	cmp	r3, #18
 80037b4:	d859      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 80037b6:	a201      	add	r2, pc, #4	@ (adr r2, 80037bc <HAL_GPIO_Init+0x80>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	08003837 	.word	0x08003837
 80037c0:	08003811 	.word	0x08003811
 80037c4:	08003823 	.word	0x08003823
 80037c8:	08003865 	.word	0x08003865
 80037cc:	0800386b 	.word	0x0800386b
 80037d0:	0800386b 	.word	0x0800386b
 80037d4:	0800386b 	.word	0x0800386b
 80037d8:	0800386b 	.word	0x0800386b
 80037dc:	0800386b 	.word	0x0800386b
 80037e0:	0800386b 	.word	0x0800386b
 80037e4:	0800386b 	.word	0x0800386b
 80037e8:	0800386b 	.word	0x0800386b
 80037ec:	0800386b 	.word	0x0800386b
 80037f0:	0800386b 	.word	0x0800386b
 80037f4:	0800386b 	.word	0x0800386b
 80037f8:	0800386b 	.word	0x0800386b
 80037fc:	0800386b 	.word	0x0800386b
 8003800:	08003819 	.word	0x08003819
 8003804:	0800382d 	.word	0x0800382d
 8003808:	4a79      	ldr	r2, [pc, #484]	@ (80039f0 <HAL_GPIO_Init+0x2b4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800380e:	e02c      	b.n	800386a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	623b      	str	r3, [r7, #32]
          break;
 8003816:	e029      	b.n	800386c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	3304      	adds	r3, #4
 800381e:	623b      	str	r3, [r7, #32]
          break;
 8003820:	e024      	b.n	800386c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	3308      	adds	r3, #8
 8003828:	623b      	str	r3, [r7, #32]
          break;
 800382a:	e01f      	b.n	800386c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	330c      	adds	r3, #12
 8003832:	623b      	str	r3, [r7, #32]
          break;
 8003834:	e01a      	b.n	800386c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800383e:	2304      	movs	r3, #4
 8003840:	623b      	str	r3, [r7, #32]
          break;
 8003842:	e013      	b.n	800386c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d105      	bne.n	8003858 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800384c:	2308      	movs	r3, #8
 800384e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	611a      	str	r2, [r3, #16]
          break;
 8003856:	e009      	b.n	800386c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003858:	2308      	movs	r3, #8
 800385a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	615a      	str	r2, [r3, #20]
          break;
 8003862:	e003      	b.n	800386c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003864:	2300      	movs	r3, #0
 8003866:	623b      	str	r3, [r7, #32]
          break;
 8003868:	e000      	b.n	800386c <HAL_GPIO_Init+0x130>
          break;
 800386a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2bff      	cmp	r3, #255	@ 0xff
 8003870:	d801      	bhi.n	8003876 <HAL_GPIO_Init+0x13a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	e001      	b.n	800387a <HAL_GPIO_Init+0x13e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2bff      	cmp	r3, #255	@ 0xff
 8003880:	d802      	bhi.n	8003888 <HAL_GPIO_Init+0x14c>
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	e002      	b.n	800388e <HAL_GPIO_Init+0x152>
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	3b08      	subs	r3, #8
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	210f      	movs	r1, #15
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	fa01 f303 	lsl.w	r3, r1, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	401a      	ands	r2, r3
 80038a0:	6a39      	ldr	r1, [r7, #32]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	fa01 f303 	lsl.w	r3, r1, r3
 80038a8:	431a      	orrs	r2, r3
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 80b1 	beq.w	8003a1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038bc:	4b4d      	ldr	r3, [pc, #308]	@ (80039f4 <HAL_GPIO_Init+0x2b8>)
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	4a4c      	ldr	r2, [pc, #304]	@ (80039f4 <HAL_GPIO_Init+0x2b8>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	6193      	str	r3, [r2, #24]
 80038c8:	4b4a      	ldr	r3, [pc, #296]	@ (80039f4 <HAL_GPIO_Init+0x2b8>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038d4:	4a48      	ldr	r2, [pc, #288]	@ (80039f8 <HAL_GPIO_Init+0x2bc>)
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	3302      	adds	r3, #2
 80038dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	220f      	movs	r2, #15
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4013      	ands	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a40      	ldr	r2, [pc, #256]	@ (80039fc <HAL_GPIO_Init+0x2c0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <HAL_GPIO_Init+0x1ec>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a3f      	ldr	r2, [pc, #252]	@ (8003a00 <HAL_GPIO_Init+0x2c4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00d      	beq.n	8003924 <HAL_GPIO_Init+0x1e8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3e      	ldr	r2, [pc, #248]	@ (8003a04 <HAL_GPIO_Init+0x2c8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <HAL_GPIO_Init+0x1e4>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3d      	ldr	r2, [pc, #244]	@ (8003a08 <HAL_GPIO_Init+0x2cc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_GPIO_Init+0x1e0>
 8003918:	2303      	movs	r3, #3
 800391a:	e006      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 800391c:	2304      	movs	r3, #4
 800391e:	e004      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003920:	2302      	movs	r3, #2
 8003922:	e002      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003928:	2300      	movs	r3, #0
 800392a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392c:	f002 0203 	and.w	r2, r2, #3
 8003930:	0092      	lsls	r2, r2, #2
 8003932:	4093      	lsls	r3, r2
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800393a:	492f      	ldr	r1, [pc, #188]	@ (80039f8 <HAL_GPIO_Init+0x2bc>)
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	3302      	adds	r3, #2
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d006      	beq.n	8003962 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003954:	4b2d      	ldr	r3, [pc, #180]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	492c      	ldr	r1, [pc, #176]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4313      	orrs	r3, r2
 800395e:	608b      	str	r3, [r1, #8]
 8003960:	e006      	b.n	8003970 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003962:	4b2a      	ldr	r3, [pc, #168]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	43db      	mvns	r3, r3
 800396a:	4928      	ldr	r1, [pc, #160]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 800396c:	4013      	ands	r3, r2
 800396e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d006      	beq.n	800398a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800397c:	4b23      	ldr	r3, [pc, #140]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	4922      	ldr	r1, [pc, #136]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	4313      	orrs	r3, r2
 8003986:	60cb      	str	r3, [r1, #12]
 8003988:	e006      	b.n	8003998 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800398a:	4b20      	ldr	r3, [pc, #128]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	43db      	mvns	r3, r3
 8003992:	491e      	ldr	r1, [pc, #120]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 8003994:	4013      	ands	r3, r2
 8003996:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d006      	beq.n	80039b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039a4:	4b19      	ldr	r3, [pc, #100]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	4918      	ldr	r1, [pc, #96]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]
 80039b0:	e006      	b.n	80039c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039b2:	4b16      	ldr	r3, [pc, #88]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	4914      	ldr	r1, [pc, #80]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039bc:	4013      	ands	r3, r2
 80039be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d021      	beq.n	8003a10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039cc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	490e      	ldr	r1, [pc, #56]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]
 80039d8:	e021      	b.n	8003a1e <HAL_GPIO_Init+0x2e2>
 80039da:	bf00      	nop
 80039dc:	10320000 	.word	0x10320000
 80039e0:	10310000 	.word	0x10310000
 80039e4:	10220000 	.word	0x10220000
 80039e8:	10210000 	.word	0x10210000
 80039ec:	10120000 	.word	0x10120000
 80039f0:	10110000 	.word	0x10110000
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40010800 	.word	0x40010800
 8003a00:	40010c00 	.word	0x40010c00
 8003a04:	40011000 	.word	0x40011000
 8003a08:	40011400 	.word	0x40011400
 8003a0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a10:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <HAL_GPIO_Init+0x304>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	4909      	ldr	r1, [pc, #36]	@ (8003a40 <HAL_GPIO_Init+0x304>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	3301      	adds	r3, #1
 8003a22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f47f ae8e 	bne.w	8003750 <HAL_GPIO_Init+0x14>
  }
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	372c      	adds	r7, #44	@ 0x2c
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr
 8003a40:	40010400 	.word	0x40010400

08003a44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	887b      	ldrh	r3, [r7, #2]
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e001      	b.n	8003a66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr

08003a72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	807b      	strh	r3, [r7, #2]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a82:	787b      	ldrb	r3, [r7, #1]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a88:	887a      	ldrh	r2, [r7, #2]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a8e:	e003      	b.n	8003a98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a90:	887b      	ldrh	r3, [r7, #2]
 8003a92:	041a      	lsls	r2, r3, #16
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	611a      	str	r2, [r3, #16]
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr
	...

08003aa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003aae:	4b08      	ldr	r3, [pc, #32]	@ (8003ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d006      	beq.n	8003ac8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aba:	4a05      	ldr	r2, [pc, #20]	@ (8003ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe f932 	bl	8001d2c <HAL_GPIO_EXTI_Callback>
  }
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40010400 	.word	0x40010400

08003ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e12b      	b.n	8003d3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff f96a 	bl	8002dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	@ 0x24
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b38:	f001 fbd8 	bl	80052ec <HAL_RCC_GetPCLK1Freq>
 8003b3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4a81      	ldr	r2, [pc, #516]	@ (8003d48 <HAL_I2C_Init+0x274>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d807      	bhi.n	8003b58 <HAL_I2C_Init+0x84>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a80      	ldr	r2, [pc, #512]	@ (8003d4c <HAL_I2C_Init+0x278>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	bf94      	ite	ls
 8003b50:	2301      	movls	r3, #1
 8003b52:	2300      	movhi	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	e006      	b.n	8003b66 <HAL_I2C_Init+0x92>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a7d      	ldr	r2, [pc, #500]	@ (8003d50 <HAL_I2C_Init+0x27c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	bf94      	ite	ls
 8003b60:	2301      	movls	r3, #1
 8003b62:	2300      	movhi	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e0e7      	b.n	8003d3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a78      	ldr	r2, [pc, #480]	@ (8003d54 <HAL_I2C_Init+0x280>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	0c9b      	lsrs	r3, r3, #18
 8003b78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4a6a      	ldr	r2, [pc, #424]	@ (8003d48 <HAL_I2C_Init+0x274>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d802      	bhi.n	8003ba8 <HAL_I2C_Init+0xd4>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	e009      	b.n	8003bbc <HAL_I2C_Init+0xe8>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bae:	fb02 f303 	mul.w	r3, r2, r3
 8003bb2:	4a69      	ldr	r2, [pc, #420]	@ (8003d58 <HAL_I2C_Init+0x284>)
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	099b      	lsrs	r3, r3, #6
 8003bba:	3301      	adds	r3, #1
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	495c      	ldr	r1, [pc, #368]	@ (8003d48 <HAL_I2C_Init+0x274>)
 8003bd8:	428b      	cmp	r3, r1
 8003bda:	d819      	bhi.n	8003c10 <HAL_I2C_Init+0x13c>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1e59      	subs	r1, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bea:	1c59      	adds	r1, r3, #1
 8003bec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003bf0:	400b      	ands	r3, r1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_I2C_Init+0x138>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1e59      	subs	r1, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0a:	e051      	b.n	8003cb0 <HAL_I2C_Init+0x1dc>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	e04f      	b.n	8003cb0 <HAL_I2C_Init+0x1dc>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d111      	bne.n	8003c3c <HAL_I2C_Init+0x168>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1e58      	subs	r0, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	440b      	add	r3, r1
 8003c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	e012      	b.n	8003c62 <HAL_I2C_Init+0x18e>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	1e58      	subs	r0, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6859      	ldr	r1, [r3, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	0099      	lsls	r1, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c52:	3301      	adds	r3, #1
 8003c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_Init+0x196>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e022      	b.n	8003cb0 <HAL_I2C_Init+0x1dc>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10e      	bne.n	8003c90 <HAL_I2C_Init+0x1bc>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1e58      	subs	r0, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6859      	ldr	r1, [r3, #4]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	440b      	add	r3, r1
 8003c80:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c84:	3301      	adds	r3, #1
 8003c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c8e:	e00f      	b.n	8003cb0 <HAL_I2C_Init+0x1dc>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	1e58      	subs	r0, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	0099      	lsls	r1, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	6809      	ldr	r1, [r1, #0]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69da      	ldr	r2, [r3, #28]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003cde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6911      	ldr	r1, [r2, #16]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68d2      	ldr	r2, [r2, #12]
 8003cea:	4311      	orrs	r1, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	000186a0 	.word	0x000186a0
 8003d4c:	001e847f 	.word	0x001e847f
 8003d50:	003d08ff 	.word	0x003d08ff
 8003d54:	431bde83 	.word	0x431bde83
 8003d58:	10624dd3 	.word	0x10624dd3

08003d5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	461a      	mov	r2, r3
 8003d68:	460b      	mov	r3, r1
 8003d6a:	817b      	strh	r3, [r7, #10]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d70:	f7ff faf6 	bl	8003360 <HAL_GetTick>
 8003d74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b20      	cmp	r3, #32
 8003d80:	f040 80e0 	bne.w	8003f44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	2319      	movs	r3, #25
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	4970      	ldr	r1, [pc, #448]	@ (8003f50 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fc9e 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e0d3      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_I2C_Master_Transmit+0x50>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e0cc      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d007      	beq.n	8003dd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003de0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2221      	movs	r2, #33	@ 0x21
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2210      	movs	r2, #16
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	893a      	ldrh	r2, [r7, #8]
 8003e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a50      	ldr	r2, [pc, #320]	@ (8003f54 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e14:	8979      	ldrh	r1, [r7, #10]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	6a3a      	ldr	r2, [r7, #32]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fb08 	bl	8004430 <I2C_MasterRequestWrite>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e08d      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e40:	e066      	b.n	8003f10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	6a39      	ldr	r1, [r7, #32]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fd5c 	bl	8004904 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00d      	beq.n	8003e6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d107      	bne.n	8003e6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e06b      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	781a      	ldrb	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d11b      	bne.n	8003ee4 <HAL_I2C_Master_Transmit+0x188>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d017      	beq.n	8003ee4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	781a      	ldrb	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	6a39      	ldr	r1, [r7, #32]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fd53 	bl	8004994 <I2C_WaitOnBTFFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00d      	beq.n	8003f10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d107      	bne.n	8003f0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e01a      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d194      	bne.n	8003e42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	e000      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f44:	2302      	movs	r3, #2
  }
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	00100002 	.word	0x00100002
 8003f54:	ffff0000 	.word	0xffff0000

08003f58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08c      	sub	sp, #48	@ 0x30
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	607a      	str	r2, [r7, #4]
 8003f62:	461a      	mov	r2, r3
 8003f64:	460b      	mov	r3, r1
 8003f66:	817b      	strh	r3, [r7, #10]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f70:	f7ff f9f6 	bl	8003360 <HAL_GetTick>
 8003f74:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	f040 824b 	bne.w	800441a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	2319      	movs	r3, #25
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	497f      	ldr	r1, [pc, #508]	@ (800418c <HAL_I2C_Master_Receive+0x234>)
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fb9e 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e23e      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_I2C_Master_Receive+0x54>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e237      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d007      	beq.n	8003fd2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fe0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2222      	movs	r2, #34	@ 0x22
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2210      	movs	r2, #16
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	893a      	ldrh	r2, [r7, #8]
 8004002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4a5f      	ldr	r2, [pc, #380]	@ (8004190 <HAL_I2C_Master_Receive+0x238>)
 8004012:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004014:	8979      	ldrh	r1, [r7, #10]
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 fa8a 	bl	8004534 <I2C_MasterRequestRead>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e1f8      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402e:	2b00      	cmp	r3, #0
 8004030:	d113      	bne.n	800405a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e1cc      	b.n	80043f4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405e:	2b01      	cmp	r3, #1
 8004060:	d11e      	bne.n	80040a0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004070:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004072:	b672      	cpsid	i
}
 8004074:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004076:	2300      	movs	r3, #0
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800409a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800409c:	b662      	cpsie	i
}
 800409e:	e035      	b.n	800410c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d11e      	bne.n	80040e6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040b8:	b672      	cpsid	i
}
 80040ba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040e2:	b662      	cpsie	i
}
 80040e4:	e012      	b.n	800410c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800410c:	e172      	b.n	80043f4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004112:	2b03      	cmp	r3, #3
 8004114:	f200 811f 	bhi.w	8004356 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411c:	2b01      	cmp	r3, #1
 800411e:	d123      	bne.n	8004168 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004122:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 fc7d 	bl	8004a24 <I2C_WaitOnRXNEFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e173      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004166:	e145      	b.n	80043f4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416c:	2b02      	cmp	r3, #2
 800416e:	d152      	bne.n	8004216 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004176:	2200      	movs	r2, #0
 8004178:	4906      	ldr	r1, [pc, #24]	@ (8004194 <HAL_I2C_Master_Receive+0x23c>)
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 faa8 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e148      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
 800418a:	bf00      	nop
 800418c:	00100002 	.word	0x00100002
 8004190:	ffff0000 	.word	0xffff0000
 8004194:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004198:	b672      	cpsid	i
}
 800419a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041de:	b662      	cpsie	i
}
 80041e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004214:	e0ee      	b.n	80043f4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421c:	2200      	movs	r2, #0
 800421e:	4981      	ldr	r1, [pc, #516]	@ (8004424 <HAL_I2C_Master_Receive+0x4cc>)
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 fa55 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0f5      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800423e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004240:	b672      	cpsid	i
}
 8004242:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004276:	4b6c      	ldr	r3, [pc, #432]	@ (8004428 <HAL_I2C_Master_Receive+0x4d0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	08db      	lsrs	r3, r3, #3
 800427c:	4a6b      	ldr	r2, [pc, #428]	@ (800442c <HAL_I2C_Master_Receive+0x4d4>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0a1a      	lsrs	r2, r3, #8
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	00da      	lsls	r2, r3, #3
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	3b01      	subs	r3, #1
 8004294:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d118      	bne.n	80042ce <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	f043 0220 	orr.w	r2, r3, #32
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80042be:	b662      	cpsie	i
}
 80042c0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e0a6      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d1d9      	bne.n	8004290 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800431e:	b662      	cpsie	i
}
 8004320:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004354:	e04e      	b.n	80043f4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004358:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 fb62 	bl	8004a24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e058      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d124      	bne.n	80043f4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d107      	bne.n	80043c2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f47f ae88 	bne.w	800410e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e000      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800441a:	2302      	movs	r3, #2
  }
}
 800441c:	4618      	mov	r0, r3
 800441e:	3728      	adds	r7, #40	@ 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	00010004 	.word	0x00010004
 8004428:	20000008 	.word	0x20000008
 800442c:	14f8b589 	.word	0x14f8b589

08004430 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	460b      	mov	r3, r1
 800443e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004444:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b08      	cmp	r3, #8
 800444a:	d006      	beq.n	800445a <I2C_MasterRequestWrite+0x2a>
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d003      	beq.n	800445a <I2C_MasterRequestWrite+0x2a>
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004458:	d108      	bne.n	800446c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	e00b      	b.n	8004484 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004470:	2b12      	cmp	r3, #18
 8004472:	d107      	bne.n	8004484 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004482:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f91d 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00d      	beq.n	80044b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044aa:	d103      	bne.n	80044b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e035      	b.n	8004524 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044c0:	d108      	bne.n	80044d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044c2:	897b      	ldrh	r3, [r7, #10]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044d0:	611a      	str	r2, [r3, #16]
 80044d2:	e01b      	b.n	800450c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044d4:	897b      	ldrh	r3, [r7, #10]
 80044d6:	11db      	asrs	r3, r3, #7
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f003 0306 	and.w	r3, r3, #6
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f063 030f 	orn	r3, r3, #15
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	490e      	ldr	r1, [pc, #56]	@ (800452c <I2C_MasterRequestWrite+0xfc>)
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f966 	bl	80047c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e010      	b.n	8004524 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004502:	897b      	ldrh	r3, [r7, #10]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4907      	ldr	r1, [pc, #28]	@ (8004530 <I2C_MasterRequestWrite+0x100>)
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f956 	bl	80047c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	00010008 	.word	0x00010008
 8004530:	00010002 	.word	0x00010002

08004534 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	460b      	mov	r3, r1
 8004542:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004558:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d006      	beq.n	800456e <I2C_MasterRequestRead+0x3a>
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d003      	beq.n	800456e <I2C_MasterRequestRead+0x3a>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800456c:	d108      	bne.n	8004580 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	e00b      	b.n	8004598 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004584:	2b11      	cmp	r3, #17
 8004586:	d107      	bne.n	8004598 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004596:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f893 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00d      	beq.n	80045cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045be:	d103      	bne.n	80045c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e079      	b.n	80046c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045d4:	d108      	bne.n	80045e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045d6:	897b      	ldrh	r3, [r7, #10]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	611a      	str	r2, [r3, #16]
 80045e6:	e05f      	b.n	80046a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045e8:	897b      	ldrh	r3, [r7, #10]
 80045ea:	11db      	asrs	r3, r3, #7
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	f003 0306 	and.w	r3, r3, #6
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f063 030f 	orn	r3, r3, #15
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	4930      	ldr	r1, [pc, #192]	@ (80046c8 <I2C_MasterRequestRead+0x194>)
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f8dc 	bl	80047c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e054      	b.n	80046c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004616:	897b      	ldrh	r3, [r7, #10]
 8004618:	b2da      	uxtb	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	4929      	ldr	r1, [pc, #164]	@ (80046cc <I2C_MasterRequestRead+0x198>)
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f8cc 	bl	80047c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e044      	b.n	80046c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800465a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f831 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00d      	beq.n	8004690 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004682:	d103      	bne.n	800468c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800468a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e017      	b.n	80046c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004690:	897b      	ldrh	r3, [r7, #10]
 8004692:	11db      	asrs	r3, r3, #7
 8004694:	b2db      	uxtb	r3, r3
 8004696:	f003 0306 	and.w	r3, r3, #6
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f063 030e 	orn	r3, r3, #14
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	4907      	ldr	r1, [pc, #28]	@ (80046cc <I2C_MasterRequestRead+0x198>)
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f888 	bl	80047c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	00010008 	.word	0x00010008
 80046cc:	00010002 	.word	0x00010002

080046d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046e0:	e048      	b.n	8004774 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d044      	beq.n	8004774 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ea:	f7fe fe39 	bl	8003360 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d302      	bcc.n	8004700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d139      	bne.n	8004774 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	0c1b      	lsrs	r3, r3, #16
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d10d      	bne.n	8004726 <I2C_WaitOnFlagUntilTimeout+0x56>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	43da      	mvns	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4013      	ands	r3, r2
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf0c      	ite	eq
 800471c:	2301      	moveq	r3, #1
 800471e:	2300      	movne	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	461a      	mov	r2, r3
 8004724:	e00c      	b.n	8004740 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	43da      	mvns	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4013      	ands	r3, r2
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	429a      	cmp	r2, r3
 8004744:	d116      	bne.n	8004774 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004760:	f043 0220 	orr.w	r2, r3, #32
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e023      	b.n	80047bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	0c1b      	lsrs	r3, r3, #16
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b01      	cmp	r3, #1
 800477c:	d10d      	bne.n	800479a <I2C_WaitOnFlagUntilTimeout+0xca>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	43da      	mvns	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4013      	ands	r3, r2
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf0c      	ite	eq
 8004790:	2301      	moveq	r3, #1
 8004792:	2300      	movne	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	e00c      	b.n	80047b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	43da      	mvns	r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4013      	ands	r3, r2
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bf0c      	ite	eq
 80047ac:	2301      	moveq	r3, #1
 80047ae:	2300      	movne	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d093      	beq.n	80046e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047d2:	e071      	b.n	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e2:	d123      	bne.n	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004818:	f043 0204 	orr.w	r2, r3, #4
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e067      	b.n	80048fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004832:	d041      	beq.n	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004834:	f7fe fd94 	bl	8003360 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	d302      	bcc.n	800484a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d136      	bne.n	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	0c1b      	lsrs	r3, r3, #16
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	d10c      	bne.n	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	43da      	mvns	r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4013      	ands	r3, r2
 8004860:	b29b      	uxth	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	bf14      	ite	ne
 8004866:	2301      	movne	r3, #1
 8004868:	2300      	moveq	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	e00b      	b.n	8004886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	43da      	mvns	r2, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	4013      	ands	r3, r2
 800487a:	b29b      	uxth	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	bf14      	ite	ne
 8004880:	2301      	movne	r3, #1
 8004882:	2300      	moveq	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d016      	beq.n	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a4:	f043 0220 	orr.w	r2, r3, #32
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e021      	b.n	80048fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	0c1b      	lsrs	r3, r3, #16
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d10c      	bne.n	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	43da      	mvns	r2, r3
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4013      	ands	r3, r2
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	e00b      	b.n	80048f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	43da      	mvns	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4013      	ands	r3, r2
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	bf14      	ite	ne
 80048ee:	2301      	movne	r3, #1
 80048f0:	2300      	moveq	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f47f af6d 	bne.w	80047d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004910:	e034      	b.n	800497c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 f8e3 	bl	8004ade <I2C_IsAcknowledgeFailed>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e034      	b.n	800498c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004928:	d028      	beq.n	800497c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492a:	f7fe fd19 	bl	8003360 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	429a      	cmp	r2, r3
 8004938:	d302      	bcc.n	8004940 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d11d      	bne.n	800497c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800494a:	2b80      	cmp	r3, #128	@ 0x80
 800494c:	d016      	beq.n	800497c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004968:	f043 0220 	orr.w	r2, r3, #32
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e007      	b.n	800498c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004986:	2b80      	cmp	r3, #128	@ 0x80
 8004988:	d1c3      	bne.n	8004912 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049a0:	e034      	b.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f89b 	bl	8004ade <I2C_IsAcknowledgeFailed>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e034      	b.n	8004a1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d028      	beq.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ba:	f7fe fcd1 	bl	8003360 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d302      	bcc.n	80049d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d11d      	bne.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d016      	beq.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	f043 0220 	orr.w	r2, r3, #32
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e007      	b.n	8004a1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d1c3      	bne.n	80049a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a30:	e049      	b.n	8004ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b10      	cmp	r3, #16
 8004a3e:	d119      	bne.n	8004a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0210 	mvn.w	r2, #16
 8004a48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e030      	b.n	8004ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a74:	f7fe fc74 	bl	8003360 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d302      	bcc.n	8004a8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d11d      	bne.n	8004ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a94:	2b40      	cmp	r3, #64	@ 0x40
 8004a96:	d016      	beq.n	8004ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	f043 0220 	orr.w	r2, r3, #32
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e007      	b.n	8004ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad0:	2b40      	cmp	r3, #64	@ 0x40
 8004ad2:	d1ae      	bne.n	8004a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004af4:	d11b      	bne.n	8004b2e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004afe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	f043 0204 	orr.w	r2, r3, #4
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr
	...

08004b3c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004b40:	4b03      	ldr	r3, [pc, #12]	@ (8004b50 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
}
 8004b46:	bf00      	nop
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	420e0020 	.word	0x420e0020

08004b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e272      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 8087 	beq.w	8004c82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b74:	4b92      	ldr	r3, [pc, #584]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f003 030c 	and.w	r3, r3, #12
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d00c      	beq.n	8004b9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b80:	4b8f      	ldr	r3, [pc, #572]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f003 030c 	and.w	r3, r3, #12
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d112      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x5e>
 8004b8c:	4b8c      	ldr	r3, [pc, #560]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b98:	d10b      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b9a:	4b89      	ldr	r3, [pc, #548]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d06c      	beq.n	8004c80 <HAL_RCC_OscConfig+0x12c>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d168      	bne.n	8004c80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e24c      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bba:	d106      	bne.n	8004bca <HAL_RCC_OscConfig+0x76>
 8004bbc:	4b80      	ldr	r3, [pc, #512]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a7f      	ldr	r2, [pc, #508]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004bc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	e02e      	b.n	8004c28 <HAL_RCC_OscConfig+0xd4>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10c      	bne.n	8004bec <HAL_RCC_OscConfig+0x98>
 8004bd2:	4b7b      	ldr	r3, [pc, #492]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a7a      	ldr	r2, [pc, #488]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	4b78      	ldr	r3, [pc, #480]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a77      	ldr	r2, [pc, #476]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	e01d      	b.n	8004c28 <HAL_RCC_OscConfig+0xd4>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bf4:	d10c      	bne.n	8004c10 <HAL_RCC_OscConfig+0xbc>
 8004bf6:	4b72      	ldr	r3, [pc, #456]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a71      	ldr	r2, [pc, #452]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	4b6f      	ldr	r3, [pc, #444]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a6e      	ldr	r2, [pc, #440]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	e00b      	b.n	8004c28 <HAL_RCC_OscConfig+0xd4>
 8004c10:	4b6b      	ldr	r3, [pc, #428]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a6a      	ldr	r2, [pc, #424]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	4b68      	ldr	r3, [pc, #416]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a67      	ldr	r2, [pc, #412]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004c22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d013      	beq.n	8004c58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c30:	f7fe fb96 	bl	8003360 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c38:	f7fe fb92 	bl	8003360 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b64      	cmp	r3, #100	@ 0x64
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e200      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4a:	4b5d      	ldr	r3, [pc, #372]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCC_OscConfig+0xe4>
 8004c56:	e014      	b.n	8004c82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c58:	f7fe fb82 	bl	8003360 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c60:	f7fe fb7e 	bl	8003360 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	@ 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e1ec      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c72:	4b53      	ldr	r3, [pc, #332]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x10c>
 8004c7e:	e000      	b.n	8004c82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d063      	beq.n	8004d56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c8e:	4b4c      	ldr	r3, [pc, #304]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f003 030c 	and.w	r3, r3, #12
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c9a:	4b49      	ldr	r3, [pc, #292]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d11c      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x18c>
 8004ca6:	4b46      	ldr	r3, [pc, #280]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d116      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cb2:	4b43      	ldr	r3, [pc, #268]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d005      	beq.n	8004cca <HAL_RCC_OscConfig+0x176>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d001      	beq.n	8004cca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e1c0      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cca:	4b3d      	ldr	r3, [pc, #244]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4939      	ldr	r1, [pc, #228]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cde:	e03a      	b.n	8004d56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d020      	beq.n	8004d2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ce8:	4b36      	ldr	r3, [pc, #216]	@ (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004cea:	2201      	movs	r2, #1
 8004cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cee:	f7fe fb37 	bl	8003360 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf6:	f7fe fb33 	bl	8003360 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e1a1      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d08:	4b2d      	ldr	r3, [pc, #180]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0f0      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d14:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	4927      	ldr	r1, [pc, #156]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	600b      	str	r3, [r1, #0]
 8004d28:	e015      	b.n	8004d56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d2a:	4b26      	ldr	r3, [pc, #152]	@ (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d30:	f7fe fb16 	bl	8003360 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d38:	f7fe fb12 	bl	8003360 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e180      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f0      	bne.n	8004d38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d03a      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d019      	beq.n	8004d9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d6a:	4b17      	ldr	r3, [pc, #92]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d70:	f7fe faf6 	bl	8003360 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d78:	f7fe faf2 	bl	8003360 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e160      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc0 <HAL_RCC_OscConfig+0x26c>)
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d96:	2001      	movs	r0, #1
 8004d98:	f000 fad0 	bl	800533c <RCC_Delay>
 8004d9c:	e01c      	b.n	8004dd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da4:	f7fe fadc 	bl	8003360 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004daa:	e00f      	b.n	8004dcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dac:	f7fe fad8 	bl	8003360 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d908      	bls.n	8004dcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e146      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>
 8004dbe:	bf00      	nop
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	42420000 	.word	0x42420000
 8004dc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dcc:	4b92      	ldr	r3, [pc, #584]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e9      	bne.n	8004dac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80a6 	beq.w	8004f32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dea:	4b8b      	ldr	r3, [pc, #556]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10d      	bne.n	8004e12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004df6:	4b88      	ldr	r3, [pc, #544]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	4a87      	ldr	r2, [pc, #540]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e00:	61d3      	str	r3, [r2, #28]
 8004e02:	4b85      	ldr	r3, [pc, #532]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e0a:	60bb      	str	r3, [r7, #8]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e12:	4b82      	ldr	r3, [pc, #520]	@ (800501c <HAL_RCC_OscConfig+0x4c8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d118      	bne.n	8004e50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800501c <HAL_RCC_OscConfig+0x4c8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a7e      	ldr	r2, [pc, #504]	@ (800501c <HAL_RCC_OscConfig+0x4c8>)
 8004e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e2a:	f7fe fa99 	bl	8003360 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e32:	f7fe fa95 	bl	8003360 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b64      	cmp	r3, #100	@ 0x64
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e103      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e44:	4b75      	ldr	r3, [pc, #468]	@ (800501c <HAL_RCC_OscConfig+0x4c8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d106      	bne.n	8004e66 <HAL_RCC_OscConfig+0x312>
 8004e58:	4b6f      	ldr	r3, [pc, #444]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	4a6e      	ldr	r2, [pc, #440]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	6213      	str	r3, [r2, #32]
 8004e64:	e02d      	b.n	8004ec2 <HAL_RCC_OscConfig+0x36e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10c      	bne.n	8004e88 <HAL_RCC_OscConfig+0x334>
 8004e6e:	4b6a      	ldr	r3, [pc, #424]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	4a69      	ldr	r2, [pc, #420]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004e74:	f023 0301 	bic.w	r3, r3, #1
 8004e78:	6213      	str	r3, [r2, #32]
 8004e7a:	4b67      	ldr	r3, [pc, #412]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	4a66      	ldr	r2, [pc, #408]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004e80:	f023 0304 	bic.w	r3, r3, #4
 8004e84:	6213      	str	r3, [r2, #32]
 8004e86:	e01c      	b.n	8004ec2 <HAL_RCC_OscConfig+0x36e>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	2b05      	cmp	r3, #5
 8004e8e:	d10c      	bne.n	8004eaa <HAL_RCC_OscConfig+0x356>
 8004e90:	4b61      	ldr	r3, [pc, #388]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	4a60      	ldr	r2, [pc, #384]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004e96:	f043 0304 	orr.w	r3, r3, #4
 8004e9a:	6213      	str	r3, [r2, #32]
 8004e9c:	4b5e      	ldr	r3, [pc, #376]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	4a5d      	ldr	r2, [pc, #372]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	6213      	str	r3, [r2, #32]
 8004ea8:	e00b      	b.n	8004ec2 <HAL_RCC_OscConfig+0x36e>
 8004eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	4a5a      	ldr	r2, [pc, #360]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	6213      	str	r3, [r2, #32]
 8004eb6:	4b58      	ldr	r3, [pc, #352]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	4a57      	ldr	r2, [pc, #348]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004ebc:	f023 0304 	bic.w	r3, r3, #4
 8004ec0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d015      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eca:	f7fe fa49 	bl	8003360 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed0:	e00a      	b.n	8004ee8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed2:	f7fe fa45 	bl	8003360 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e0b1      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee8:	4b4b      	ldr	r3, [pc, #300]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0ee      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x37e>
 8004ef4:	e014      	b.n	8004f20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef6:	f7fe fa33 	bl	8003360 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efc:	e00a      	b.n	8004f14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efe:	f7fe fa2f 	bl	8003360 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e09b      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f14:	4b40      	ldr	r3, [pc, #256]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1ee      	bne.n	8004efe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f20:	7dfb      	ldrb	r3, [r7, #23]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d105      	bne.n	8004f32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f26:	4b3c      	ldr	r3, [pc, #240]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	4a3b      	ldr	r2, [pc, #236]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004f2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8087 	beq.w	800504a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f3c:	4b36      	ldr	r3, [pc, #216]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f003 030c 	and.w	r3, r3, #12
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d061      	beq.n	800500c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d146      	bne.n	8004fde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f50:	4b33      	ldr	r3, [pc, #204]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f56:	f7fe fa03 	bl	8003360 <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f5e:	f7fe f9ff 	bl	8003360 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e06d      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f70:	4b29      	ldr	r3, [pc, #164]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1f0      	bne.n	8004f5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f84:	d108      	bne.n	8004f98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f86:	4b24      	ldr	r3, [pc, #144]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	4921      	ldr	r1, [pc, #132]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f98:	4b1f      	ldr	r3, [pc, #124]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a19      	ldr	r1, [r3, #32]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	491b      	ldr	r1, [pc, #108]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb6:	f7fe f9d3 	bl	8003360 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fbe:	f7fe f9cf 	bl	8003360 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e03d      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fd0:	4b11      	ldr	r3, [pc, #68]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_RCC_OscConfig+0x46a>
 8004fdc:	e035      	b.n	800504a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fde:	4b10      	ldr	r3, [pc, #64]	@ (8005020 <HAL_RCC_OscConfig+0x4cc>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe4:	f7fe f9bc 	bl	8003360 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fec:	f7fe f9b8 	bl	8003360 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e026      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ffe:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <HAL_RCC_OscConfig+0x4c4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x498>
 800500a:	e01e      	b.n	800504a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d107      	bne.n	8005024 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e019      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>
 8005018:	40021000 	.word	0x40021000
 800501c:	40007000 	.word	0x40007000
 8005020:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005024:	4b0b      	ldr	r3, [pc, #44]	@ (8005054 <HAL_RCC_OscConfig+0x500>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	429a      	cmp	r2, r3
 8005036:	d106      	bne.n	8005046 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005042:	429a      	cmp	r2, r3
 8005044:	d001      	beq.n	800504a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40021000 	.word	0x40021000

08005058 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0d0      	b.n	800520e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800506c:	4b6a      	ldr	r3, [pc, #424]	@ (8005218 <HAL_RCC_ClockConfig+0x1c0>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d910      	bls.n	800509c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507a:	4b67      	ldr	r3, [pc, #412]	@ (8005218 <HAL_RCC_ClockConfig+0x1c0>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f023 0207 	bic.w	r2, r3, #7
 8005082:	4965      	ldr	r1, [pc, #404]	@ (8005218 <HAL_RCC_ClockConfig+0x1c0>)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	4313      	orrs	r3, r2
 8005088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800508a:	4b63      	ldr	r3, [pc, #396]	@ (8005218 <HAL_RCC_ClockConfig+0x1c0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d001      	beq.n	800509c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e0b8      	b.n	800520e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d020      	beq.n	80050ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050b4:	4b59      	ldr	r3, [pc, #356]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	4a58      	ldr	r2, [pc, #352]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 80050ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80050be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050cc:	4b53      	ldr	r3, [pc, #332]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	4a52      	ldr	r2, [pc, #328]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 80050d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80050d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d8:	4b50      	ldr	r3, [pc, #320]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	494d      	ldr	r1, [pc, #308]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d040      	beq.n	8005178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fe:	4b47      	ldr	r3, [pc, #284]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d115      	bne.n	8005136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e07f      	b.n	800520e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d107      	bne.n	8005126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005116:	4b41      	ldr	r3, [pc, #260]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d109      	bne.n	8005136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e073      	b.n	800520e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005126:	4b3d      	ldr	r3, [pc, #244]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e06b      	b.n	800520e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005136:	4b39      	ldr	r3, [pc, #228]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f023 0203 	bic.w	r2, r3, #3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	4936      	ldr	r1, [pc, #216]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 8005144:	4313      	orrs	r3, r2
 8005146:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005148:	f7fe f90a 	bl	8003360 <HAL_GetTick>
 800514c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514e:	e00a      	b.n	8005166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005150:	f7fe f906 	bl	8003360 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e053      	b.n	800520e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005166:	4b2d      	ldr	r3, [pc, #180]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f003 020c 	and.w	r2, r3, #12
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	429a      	cmp	r2, r3
 8005176:	d1eb      	bne.n	8005150 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005178:	4b27      	ldr	r3, [pc, #156]	@ (8005218 <HAL_RCC_ClockConfig+0x1c0>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d210      	bcs.n	80051a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005186:	4b24      	ldr	r3, [pc, #144]	@ (8005218 <HAL_RCC_ClockConfig+0x1c0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f023 0207 	bic.w	r2, r3, #7
 800518e:	4922      	ldr	r1, [pc, #136]	@ (8005218 <HAL_RCC_ClockConfig+0x1c0>)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	4313      	orrs	r3, r2
 8005194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005196:	4b20      	ldr	r3, [pc, #128]	@ (8005218 <HAL_RCC_ClockConfig+0x1c0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d001      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e032      	b.n	800520e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b4:	4b19      	ldr	r3, [pc, #100]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4916      	ldr	r1, [pc, #88]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051d2:	4b12      	ldr	r3, [pc, #72]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	490e      	ldr	r1, [pc, #56]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051e6:	f000 f821 	bl	800522c <HAL_RCC_GetSysClockFreq>
 80051ea:	4602      	mov	r2, r0
 80051ec:	4b0b      	ldr	r3, [pc, #44]	@ (800521c <HAL_RCC_ClockConfig+0x1c4>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	091b      	lsrs	r3, r3, #4
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	490a      	ldr	r1, [pc, #40]	@ (8005220 <HAL_RCC_ClockConfig+0x1c8>)
 80051f8:	5ccb      	ldrb	r3, [r1, r3]
 80051fa:	fa22 f303 	lsr.w	r3, r2, r3
 80051fe:	4a09      	ldr	r2, [pc, #36]	@ (8005224 <HAL_RCC_ClockConfig+0x1cc>)
 8005200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005202:	4b09      	ldr	r3, [pc, #36]	@ (8005228 <HAL_RCC_ClockConfig+0x1d0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f7fe f868 	bl	80032dc <HAL_InitTick>

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	40022000 	.word	0x40022000
 800521c:	40021000 	.word	0x40021000
 8005220:	0800a9d4 	.word	0x0800a9d4
 8005224:	20000008 	.word	0x20000008
 8005228:	2000000c 	.word	0x2000000c

0800522c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	2300      	movs	r3, #0
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	2300      	movs	r3, #0
 8005240:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005246:	4b1e      	ldr	r3, [pc, #120]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 030c 	and.w	r3, r3, #12
 8005252:	2b04      	cmp	r3, #4
 8005254:	d002      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x30>
 8005256:	2b08      	cmp	r3, #8
 8005258:	d003      	beq.n	8005262 <HAL_RCC_GetSysClockFreq+0x36>
 800525a:	e027      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800525c:	4b19      	ldr	r3, [pc, #100]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800525e:	613b      	str	r3, [r7, #16]
      break;
 8005260:	e027      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	0c9b      	lsrs	r3, r3, #18
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	4a17      	ldr	r2, [pc, #92]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800526c:	5cd3      	ldrb	r3, [r2, r3]
 800526e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d010      	beq.n	800529c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800527a:	4b11      	ldr	r3, [pc, #68]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	0c5b      	lsrs	r3, r3, #17
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	4a11      	ldr	r2, [pc, #68]	@ (80052cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005286:	5cd3      	ldrb	r3, [r2, r3]
 8005288:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a0d      	ldr	r2, [pc, #52]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800528e:	fb03 f202 	mul.w	r2, r3, r2
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	fbb2 f3f3 	udiv	r3, r2, r3
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	e004      	b.n	80052a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a0c      	ldr	r2, [pc, #48]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80052a0:	fb02 f303 	mul.w	r3, r2, r3
 80052a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	613b      	str	r3, [r7, #16]
      break;
 80052aa:	e002      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052ac:	4b09      	ldr	r3, [pc, #36]	@ (80052d4 <HAL_RCC_GetSysClockFreq+0xa8>)
 80052ae:	613b      	str	r3, [r7, #16]
      break;
 80052b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052b2:	693b      	ldr	r3, [r7, #16]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40021000 	.word	0x40021000
 80052c4:	00f42400 	.word	0x00f42400
 80052c8:	0800a9ec 	.word	0x0800a9ec
 80052cc:	0800a9fc 	.word	0x0800a9fc
 80052d0:	003d0900 	.word	0x003d0900
 80052d4:	007a1200 	.word	0x007a1200

080052d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052dc:	4b02      	ldr	r3, [pc, #8]	@ (80052e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80052de:	681b      	ldr	r3, [r3, #0]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr
 80052e8:	20000008 	.word	0x20000008

080052ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052f0:	f7ff fff2 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 80052f4:	4602      	mov	r2, r0
 80052f6:	4b05      	ldr	r3, [pc, #20]	@ (800530c <HAL_RCC_GetPCLK1Freq+0x20>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	0a1b      	lsrs	r3, r3, #8
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	4903      	ldr	r1, [pc, #12]	@ (8005310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005302:	5ccb      	ldrb	r3, [r1, r3]
 8005304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005308:	4618      	mov	r0, r3
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40021000 	.word	0x40021000
 8005310:	0800a9e4 	.word	0x0800a9e4

08005314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005318:	f7ff ffde 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 800531c:	4602      	mov	r2, r0
 800531e:	4b05      	ldr	r3, [pc, #20]	@ (8005334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	0adb      	lsrs	r3, r3, #11
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	4903      	ldr	r1, [pc, #12]	@ (8005338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800532a:	5ccb      	ldrb	r3, [r1, r3]
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40021000 	.word	0x40021000
 8005338:	0800a9e4 	.word	0x0800a9e4

0800533c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005344:	4b0a      	ldr	r3, [pc, #40]	@ (8005370 <RCC_Delay+0x34>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a0a      	ldr	r2, [pc, #40]	@ (8005374 <RCC_Delay+0x38>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	0a5b      	lsrs	r3, r3, #9
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005358:	bf00      	nop
  }
  while (Delay --);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1e5a      	subs	r2, r3, #1
 800535e:	60fa      	str	r2, [r7, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f9      	bne.n	8005358 <RCC_Delay+0x1c>
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr
 8005370:	20000008 	.word	0x20000008
 8005374:	10624dd3 	.word	0x10624dd3

08005378 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	613b      	str	r3, [r7, #16]
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d07d      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005394:	2300      	movs	r3, #0
 8005396:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005398:	4b4f      	ldr	r3, [pc, #316]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10d      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a4:	4b4c      	ldr	r3, [pc, #304]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	4a4b      	ldr	r2, [pc, #300]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053ae:	61d3      	str	r3, [r2, #28]
 80053b0:	4b49      	ldr	r3, [pc, #292]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053bc:	2301      	movs	r3, #1
 80053be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c0:	4b46      	ldr	r3, [pc, #280]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d118      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053cc:	4b43      	ldr	r3, [pc, #268]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a42      	ldr	r2, [pc, #264]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053d8:	f7fd ffc2 	bl	8003360 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053de:	e008      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e0:	f7fd ffbe 	bl	8003360 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b64      	cmp	r3, #100	@ 0x64
 80053ec:	d901      	bls.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e06d      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f2:	4b3a      	ldr	r3, [pc, #232]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053fe:	4b36      	ldr	r3, [pc, #216]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005406:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d02e      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	429a      	cmp	r2, r3
 800541a:	d027      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800541c:	4b2e      	ldr	r3, [pc, #184]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005424:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005426:	4b2e      	ldr	r3, [pc, #184]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005428:	2201      	movs	r2, #1
 800542a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800542c:	4b2c      	ldr	r3, [pc, #176]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005432:	4a29      	ldr	r2, [pc, #164]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d014      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005442:	f7fd ff8d 	bl	8003360 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005448:	e00a      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544a:	f7fd ff89 	bl	8003360 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e036      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005460:	4b1d      	ldr	r3, [pc, #116]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0ee      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800546c:	4b1a      	ldr	r3, [pc, #104]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4917      	ldr	r1, [pc, #92]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547a:	4313      	orrs	r3, r2
 800547c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800547e:	7dfb      	ldrb	r3, [r7, #23]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d105      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005484:	4b14      	ldr	r3, [pc, #80]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	4a13      	ldr	r2, [pc, #76]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800548e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800549c:	4b0e      	ldr	r3, [pc, #56]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	490b      	ldr	r1, [pc, #44]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0310 	and.w	r3, r3, #16
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d008      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054ba:	4b07      	ldr	r3, [pc, #28]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	4904      	ldr	r1, [pc, #16]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40021000 	.word	0x40021000
 80054dc:	40007000 	.word	0x40007000
 80054e0:	42420440 	.word	0x42420440

080054e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	2300      	movs	r3, #0
 80054f2:	61fb      	str	r3, [r7, #28]
 80054f4:	2300      	movs	r3, #0
 80054f6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	2300      	movs	r3, #0
 80054fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b10      	cmp	r3, #16
 8005504:	d00a      	beq.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b10      	cmp	r3, #16
 800550a:	f200 8089 	bhi.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d045      	beq.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d074      	beq.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800551a:	e081      	b.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 800551c:	4b45      	ldr	r3, [pc, #276]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005522:	4b44      	ldr	r3, [pc, #272]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d07a      	beq.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	0c9b      	lsrs	r3, r3, #18
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	4a40      	ldr	r2, [pc, #256]	@ (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005538:	5cd3      	ldrb	r3, [r2, r3]
 800553a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d015      	beq.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005546:	4b3b      	ldr	r3, [pc, #236]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	0c5b      	lsrs	r3, r3, #17
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	4a3a      	ldr	r2, [pc, #232]	@ (800563c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005552:	5cd3      	ldrb	r3, [r2, r3]
 8005554:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00d      	beq.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005560:	4a37      	ldr	r2, [pc, #220]	@ (8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	fbb2 f2f3 	udiv	r2, r2, r3
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	fb02 f303 	mul.w	r3, r2, r3
 800556e:	61fb      	str	r3, [r7, #28]
 8005570:	e004      	b.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	4a33      	ldr	r2, [pc, #204]	@ (8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005576:	fb02 f303 	mul.w	r3, r2, r3
 800557a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800557c:	4b2d      	ldr	r3, [pc, #180]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005584:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005588:	d102      	bne.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	61bb      	str	r3, [r7, #24]
      break;
 800558e:	e049      	b.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	4a2c      	ldr	r2, [pc, #176]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	085b      	lsrs	r3, r3, #1
 800559c:	61bb      	str	r3, [r7, #24]
      break;
 800559e:	e041      	b.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 80055a0:	4b24      	ldr	r3, [pc, #144]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055b0:	d108      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80055bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	e01e      	b.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055ce:	d109      	bne.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80055d0:	4b18      	ldr	r3, [pc, #96]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80055d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80055dc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	e00e      	b.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ee:	d11b      	bne.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80055f0:	4b10      	ldr	r3, [pc, #64]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d015      	beq.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 80055fc:	4b13      	ldr	r3, [pc, #76]	@ (800564c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80055fe:	61bb      	str	r3, [r7, #24]
      break;
 8005600:	e012      	b.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8005602:	e011      	b.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005604:	f7ff fe86 	bl	8005314 <HAL_RCC_GetPCLK2Freq>
 8005608:	4602      	mov	r2, r0
 800560a:	4b0a      	ldr	r3, [pc, #40]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	0b9b      	lsrs	r3, r3, #14
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	3301      	adds	r3, #1
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	fbb2 f3f3 	udiv	r3, r2, r3
 800561c:	61bb      	str	r3, [r7, #24]
      break;
 800561e:	e004      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8005620:	bf00      	nop
 8005622:	e002      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8005624:	bf00      	nop
 8005626:	e000      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8005628:	bf00      	nop
    }
  }
  return (frequency);
 800562a:	69bb      	ldr	r3, [r7, #24]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3720      	adds	r7, #32
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40021000 	.word	0x40021000
 8005638:	0800aa00 	.word	0x0800aa00
 800563c:	0800aa10 	.word	0x0800aa10
 8005640:	00f42400 	.word	0x00f42400
 8005644:	003d0900 	.word	0x003d0900
 8005648:	aaaaaaab 	.word	0xaaaaaaab
 800564c:	0001e848 	.word	0x0001e848

08005650 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e07a      	b.n	800575c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	7c5b      	ldrb	r3, [r3, #17]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d105      	bne.n	800567c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fd fbea 	bl	8002e50 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fbd5 	bl	8005e32 <HAL_RTC_WaitForSynchro>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d004      	beq.n	8005698 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2204      	movs	r2, #4
 8005692:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e061      	b.n	800575c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fc8e 	bl	8005fba <RTC_EnterInitMode>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2204      	movs	r2, #4
 80056a8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e056      	b.n	800575c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0207 	bic.w	r2, r2, #7
 80056bc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80056c6:	4b27      	ldr	r3, [pc, #156]	@ (8005764 <HAL_RTC_Init+0x114>)
 80056c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ca:	4a26      	ldr	r2, [pc, #152]	@ (8005764 <HAL_RTC_Init+0x114>)
 80056cc:	f023 0301 	bic.w	r3, r3, #1
 80056d0:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80056d2:	4b24      	ldr	r3, [pc, #144]	@ (8005764 <HAL_RTC_Init+0x114>)
 80056d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d6:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	4921      	ldr	r1, [pc, #132]	@ (8005764 <HAL_RTC_Init+0x114>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d003      	beq.n	80056f6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e00e      	b.n	8005714 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80056f6:	2001      	movs	r0, #1
 80056f8:	f7ff fef4 	bl	80054e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80056fc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2204      	movs	r2, #4
 8005708:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e026      	b.n	800575c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3b01      	subs	r3, #1
 8005712:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	0c1a      	lsrs	r2, r3, #16
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f002 020f 	and.w	r2, r2, #15
 8005720:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	b292      	uxth	r2, r2
 800572a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fc6c 	bl	800600a <RTC_ExitInitMode>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d004      	beq.n	8005742 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2204      	movs	r2, #4
 800573c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e00c      	b.n	800575c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800575a:	2300      	movs	r3, #0
  }
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40006c00 	.word	0x40006c00

08005768 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005768:	b590      	push	{r4, r7, lr}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	2300      	movs	r3, #0
 800577a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d002      	beq.n	8005788 <HAL_RTC_SetTime+0x20>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e080      	b.n	800588e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	7c1b      	ldrb	r3, [r3, #16]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_RTC_SetTime+0x30>
 8005794:	2302      	movs	r3, #2
 8005796:	e07a      	b.n	800588e <HAL_RTC_SetTime+0x126>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2201      	movs	r2, #1
 800579c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2202      	movs	r2, #2
 80057a2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d113      	bne.n	80057d2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80057b4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	4619      	mov	r1, r3
 80057be:	460b      	mov	r3, r1
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	1a5b      	subs	r3, r3, r1
 80057c4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80057c6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80057cc:	4413      	add	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	e01e      	b.n	8005810 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fc5c 	bl	8006094 <RTC_Bcd2ToByte>
 80057dc:	4603      	mov	r3, r0
 80057de:	461a      	mov	r2, r3
 80057e0:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80057e4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	785b      	ldrb	r3, [r3, #1]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fc51 	bl	8006094 <RTC_Bcd2ToByte>
 80057f2:	4603      	mov	r3, r0
 80057f4:	461a      	mov	r2, r3
 80057f6:	4613      	mov	r3, r2
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80057fe:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	789b      	ldrb	r3, [r3, #2]
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fc45 	bl	8006094 <RTC_Bcd2ToByte>
 800580a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800580c:	4423      	add	r3, r4
 800580e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005810:	6979      	ldr	r1, [r7, #20]
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 fb6a 	bl	8005eec <RTC_WriteTimeCounter>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d007      	beq.n	800582e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2204      	movs	r2, #4
 8005822:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e02f      	b.n	800588e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0205 	bic.w	r2, r2, #5
 800583c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 fb7b 	bl	8005f3a <RTC_ReadAlarmCounter>
 8005844:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584c:	d018      	beq.n	8005880 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	429a      	cmp	r2, r3
 8005854:	d214      	bcs.n	8005880 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800585c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005860:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005862:	6939      	ldr	r1, [r7, #16]
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fb81 	bl	8005f6c <RTC_WriteAlarmCounter>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d007      	beq.n	8005880 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2204      	movs	r2, #4
 8005874:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e006      	b.n	800588e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800588c:	2300      	movs	r3, #0
  }
}
 800588e:	4618      	mov	r0, r3
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	bd90      	pop	{r4, r7, pc}
	...

08005898 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b088      	sub	sp, #32
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	61bb      	str	r3, [r7, #24]
 80058a8:	2300      	movs	r3, #0
 80058aa:	61fb      	str	r3, [r7, #28]
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	2300      	movs	r3, #0
 80058b2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_RTC_GetTime+0x28>
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0b5      	b.n	8005a30 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e0ac      	b.n	8005a30 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 fad8 	bl	8005e8c <RTC_ReadTimeCounter>
 80058dc:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	4a55      	ldr	r2, [pc, #340]	@ (8005a38 <HAL_RTC_GetTime+0x1a0>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	0adb      	lsrs	r3, r3, #11
 80058e8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	4b52      	ldr	r3, [pc, #328]	@ (8005a38 <HAL_RTC_GetTime+0x1a0>)
 80058ee:	fba3 1302 	umull	r1, r3, r3, r2
 80058f2:	0adb      	lsrs	r3, r3, #11
 80058f4:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80058f8:	fb01 f303 	mul.w	r3, r1, r3
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	4a4f      	ldr	r2, [pc, #316]	@ (8005a3c <HAL_RTC_GetTime+0x1a4>)
 8005900:	fba2 2303 	umull	r2, r3, r2, r3
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	b2da      	uxtb	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	4a4a      	ldr	r2, [pc, #296]	@ (8005a38 <HAL_RTC_GetTime+0x1a0>)
 8005910:	fba2 1203 	umull	r1, r2, r2, r3
 8005914:	0ad2      	lsrs	r2, r2, #11
 8005916:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800591a:	fb01 f202 	mul.w	r2, r1, r2
 800591e:	1a9a      	subs	r2, r3, r2
 8005920:	4b46      	ldr	r3, [pc, #280]	@ (8005a3c <HAL_RTC_GetTime+0x1a4>)
 8005922:	fba3 1302 	umull	r1, r3, r3, r2
 8005926:	0959      	lsrs	r1, r3, #5
 8005928:	460b      	mov	r3, r1
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	1a5b      	subs	r3, r3, r1
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	1ad1      	subs	r1, r2, r3
 8005932:	b2ca      	uxtb	r2, r1
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	2b17      	cmp	r3, #23
 800593c:	d955      	bls.n	80059ea <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	4a3f      	ldr	r2, [pc, #252]	@ (8005a40 <HAL_RTC_GetTime+0x1a8>)
 8005942:	fba2 2303 	umull	r2, r3, r2, r3
 8005946:	091b      	lsrs	r3, r3, #4
 8005948:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800594a:	6939      	ldr	r1, [r7, #16]
 800594c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a40 <HAL_RTC_GetTime+0x1a8>)
 800594e:	fba3 2301 	umull	r2, r3, r3, r1
 8005952:	091a      	lsrs	r2, r3, #4
 8005954:	4613      	mov	r3, r2
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	4413      	add	r3, r2
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	1aca      	subs	r2, r1, r3
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 fae8 	bl	8005f3a <RTC_ReadAlarmCounter>
 800596a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d008      	beq.n	8005986 <HAL_RTC_GetTime+0xee>
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	429a      	cmp	r2, r3
 800597a:	d904      	bls.n	8005986 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	61fb      	str	r3, [r7, #28]
 8005984:	e002      	b.n	800598c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005986:	f04f 33ff 	mov.w	r3, #4294967295
 800598a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	4a2d      	ldr	r2, [pc, #180]	@ (8005a44 <HAL_RTC_GetTime+0x1ac>)
 8005990:	fb02 f303 	mul.w	r3, r2, r3
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800599a:	69b9      	ldr	r1, [r7, #24]
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 faa5 	bl	8005eec <RTC_WriteTimeCounter>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e041      	b.n	8005a30 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b2:	d00c      	beq.n	80059ce <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	4413      	add	r3, r2
 80059ba:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80059bc:	69f9      	ldr	r1, [r7, #28]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 fad4 	bl	8005f6c <RTC_WriteAlarmCounter>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e030      	b.n	8005a30 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80059ce:	69f9      	ldr	r1, [r7, #28]
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 facb 	bl	8005f6c <RTC_WriteAlarmCounter>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e027      	b.n	8005a30 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80059e0:	6979      	ldr	r1, [r7, #20]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 fb73 	bl	80060ce <RTC_DateUpdate>
 80059e8:	e003      	b.n	80059f2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01a      	beq.n	8005a2e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 fb2c 	bl	800605a <RTC_ByteToBcd2>
 8005a02:	4603      	mov	r3, r0
 8005a04:	461a      	mov	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fb23 	bl	800605a <RTC_ByteToBcd2>
 8005a14:	4603      	mov	r3, r0
 8005a16:	461a      	mov	r2, r3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	789b      	ldrb	r3, [r3, #2]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fb1a 	bl	800605a <RTC_ByteToBcd2>
 8005a26:	4603      	mov	r3, r0
 8005a28:	461a      	mov	r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	91a2b3c5 	.word	0x91a2b3c5
 8005a3c:	88888889 	.word	0x88888889
 8005a40:	aaaaaaab 	.word	0xaaaaaaab
 8005a44:	00015180 	.word	0x00015180

08005a48 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	61fb      	str	r3, [r7, #28]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61bb      	str	r3, [r7, #24]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_RTC_SetDate+0x24>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e097      	b.n	8005ba0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	7c1b      	ldrb	r3, [r3, #16]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_RTC_SetDate+0x34>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e091      	b.n	8005ba0 <HAL_RTC_SetDate+0x158>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2202      	movs	r2, #2
 8005a86:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10c      	bne.n	8005aa8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	78da      	ldrb	r2, [r3, #3]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	785a      	ldrb	r2, [r3, #1]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	789a      	ldrb	r2, [r3, #2]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	739a      	strb	r2, [r3, #14]
 8005aa6:	e01a      	b.n	8005ade <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	78db      	ldrb	r3, [r3, #3]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 faf1 	bl	8006094 <RTC_Bcd2ToByte>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	785b      	ldrb	r3, [r3, #1]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fae8 	bl	8006094 <RTC_Bcd2ToByte>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	789b      	ldrb	r3, [r3, #2]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fadf 	bl	8006094 <RTC_Bcd2ToByte>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	461a      	mov	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	7bdb      	ldrb	r3, [r3, #15]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	7b59      	ldrb	r1, [r3, #13]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	7b9b      	ldrb	r3, [r3, #14]
 8005aec:	461a      	mov	r2, r3
 8005aee:	f000 fbc9 	bl	8006284 <RTC_WeekDayNum>
 8005af2:	4603      	mov	r3, r0
 8005af4:	461a      	mov	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	7b1a      	ldrb	r2, [r3, #12]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 f9c2 	bl	8005e8c <RTC_ReadTimeCounter>
 8005b08:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	4a26      	ldr	r2, [pc, #152]	@ (8005ba8 <HAL_RTC_SetDate+0x160>)
 8005b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b12:	0adb      	lsrs	r3, r3, #11
 8005b14:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b18      	cmp	r3, #24
 8005b1a:	d93a      	bls.n	8005b92 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	4a23      	ldr	r2, [pc, #140]	@ (8005bac <HAL_RTC_SetDate+0x164>)
 8005b20:	fba2 2303 	umull	r2, r3, r2, r3
 8005b24:	091b      	lsrs	r3, r3, #4
 8005b26:	4a22      	ldr	r2, [pc, #136]	@ (8005bb0 <HAL_RTC_SetDate+0x168>)
 8005b28:	fb02 f303 	mul.w	r3, r2, r3
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005b32:	69f9      	ldr	r1, [r7, #28]
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f9d9 	bl	8005eec <RTC_WriteTimeCounter>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d007      	beq.n	8005b50 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2204      	movs	r2, #4
 8005b44:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e027      	b.n	8005ba0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 f9f2 	bl	8005f3a <RTC_ReadAlarmCounter>
 8005b56:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d018      	beq.n	8005b92 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d214      	bcs.n	8005b92 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005b6e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005b72:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005b74:	69b9      	ldr	r1, [r7, #24]
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f9f8 	bl	8005f6c <RTC_WriteAlarmCounter>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2204      	movs	r2, #4
 8005b86:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e006      	b.n	8005ba0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2201      	movs	r2, #1
 8005b96:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3720      	adds	r7, #32
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	91a2b3c5 	.word	0x91a2b3c5
 8005bac:	aaaaaaab 	.word	0xaaaaaaab
 8005bb0:	00015180 	.word	0x00015180

08005bb4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8005bc0:	f107 0314 	add.w	r3, r7, #20
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	460a      	mov	r2, r1
 8005bc8:	801a      	strh	r2, [r3, #0]
 8005bca:	460a      	mov	r2, r1
 8005bcc:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <HAL_RTC_GetDate+0x26>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e03a      	b.n	8005c54 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005bde:	f107 0314 	add.w	r3, r7, #20
 8005be2:	2200      	movs	r2, #0
 8005be4:	4619      	mov	r1, r3
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f7ff fe56 	bl	8005898 <HAL_RTC_GetTime>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e02e      	b.n	8005c54 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	7b1a      	ldrb	r2, [r3, #12]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	7bda      	ldrb	r2, [r3, #15]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	7b5a      	ldrb	r2, [r3, #13]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	7b9a      	ldrb	r2, [r3, #14]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01a      	beq.n	8005c52 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	78db      	ldrb	r3, [r3, #3]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fa1a 	bl	800605a <RTC_ByteToBcd2>
 8005c26:	4603      	mov	r3, r0
 8005c28:	461a      	mov	r2, r3
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fa11 	bl	800605a <RTC_ByteToBcd2>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	789b      	ldrb	r3, [r3, #2]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fa08 	bl	800605a <RTC_ByteToBcd2>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005c5c:	b590      	push	{r4, r7, lr}
 8005c5e:	b089      	sub	sp, #36	@ 0x24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8005c6c:	f107 0314 	add.w	r3, r7, #20
 8005c70:	2100      	movs	r1, #0
 8005c72:	460a      	mov	r2, r1
 8005c74:	801a      	strh	r2, [r3, #0]
 8005c76:	460a      	mov	r2, r1
 8005c78:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <HAL_RTC_SetAlarm_IT+0x2a>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e099      	b.n	8005dbe <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	7c1b      	ldrb	r3, [r3, #16]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d101      	bne.n	8005c96 <HAL_RTC_SetAlarm_IT+0x3a>
 8005c92:	2302      	movs	r3, #2
 8005c94:	e093      	b.n	8005dbe <HAL_RTC_SetAlarm_IT+0x162>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005ca2:	f107 0314 	add.w	r3, r7, #20
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	4619      	mov	r1, r3
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7ff fdf4 	bl	8005898 <HAL_RTC_GetTime>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e081      	b.n	8005dbe <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005cba:	7d3b      	ldrb	r3, [r7, #20]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005cc2:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8005cc6:	7d7b      	ldrb	r3, [r7, #21]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	460b      	mov	r3, r1
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	1a5b      	subs	r3, r3, r1
 8005cd0:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005cd2:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8005cd4:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8005cd6:	4413      	add	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d113      	bne.n	8005d08 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005cea:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	1a5b      	subs	r3, r3, r1
 8005cfa:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005cfc:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005d02:	4413      	add	r3, r2
 8005d04:	61fb      	str	r3, [r7, #28]
 8005d06:	e01e      	b.n	8005d46 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 f9c1 	bl	8006094 <RTC_Bcd2ToByte>
 8005d12:	4603      	mov	r3, r0
 8005d14:	461a      	mov	r2, r3
 8005d16:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005d1a:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 f9b6 	bl	8006094 <RTC_Bcd2ToByte>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	1a9b      	subs	r3, r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005d34:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	789b      	ldrb	r3, [r3, #2]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 f9aa 	bl	8006094 <RTC_Bcd2ToByte>
 8005d40:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005d42:	4423      	add	r3, r4
 8005d44:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d205      	bcs.n	8005d5a <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005d54:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005d58:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005d5a:	69f9      	ldr	r1, [r7, #28]
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 f905 	bl	8005f6c <RTC_WriteAlarmCounter>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d007      	beq.n	8005d78 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e022      	b.n	8005dbe <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0202 	bic.w	r2, r2, #2
 8005d86:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0202 	orr.w	r2, r2, #2
 8005d96:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005d98:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc8 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8005dc8 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005da2:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005da4:	4b08      	ldr	r3, [pc, #32]	@ (8005dc8 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4a07      	ldr	r2, [pc, #28]	@ (8005dc8 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005daa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dae:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
  }
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3724      	adds	r7, #36	@ 0x24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd90      	pop	{r4, r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	40010400 	.word	0x40010400

08005dcc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d011      	beq.n	8005e06 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00a      	beq.n	8005e06 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f815 	bl	8005e20 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0202 	bic.w	r2, r2, #2
 8005e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005e06:	4b05      	ldr	r3, [pc, #20]	@ (8005e1c <HAL_RTC_AlarmIRQHandler+0x50>)
 8005e08:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005e0c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	745a      	strb	r2, [r3, #17]
}
 8005e14:	bf00      	nop
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	40010400 	.word	0x40010400

08005e20 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bc80      	pop	{r7}
 8005e30:	4770      	bx	lr

08005e32 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e01d      	b.n	8005e84 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0208 	bic.w	r2, r2, #8
 8005e56:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005e58:	f7fd fa82 	bl	8003360 <HAL_GetTick>
 8005e5c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005e5e:	e009      	b.n	8005e74 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005e60:	f7fd fa7e 	bl	8003360 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e6e:	d901      	bls.n	8005e74 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e007      	b.n	8005e84 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0ee      	beq.n	8005e60 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	827b      	strh	r3, [r7, #18]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	823b      	strh	r3, [r7, #16]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005ebc:	8a7a      	ldrh	r2, [r7, #18]
 8005ebe:	8a3b      	ldrh	r3, [r7, #16]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d008      	beq.n	8005ed6 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005ec4:	8a3b      	ldrh	r3, [r7, #16]
 8005ec6:	041a      	lsls	r2, r3, #16
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	e004      	b.n	8005ee0 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005ed6:	8a7b      	ldrh	r3, [r7, #18]
 8005ed8:	041a      	lsls	r2, r3, #16
 8005eda:	89fb      	ldrh	r3, [r7, #14]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005ee0:	697b      	ldr	r3, [r7, #20]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bc80      	pop	{r7}
 8005eea:	4770      	bx	lr

08005eec <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f85d 	bl	8005fba <RTC_EnterInitMode>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	73fb      	strb	r3, [r7, #15]
 8005f0a:	e011      	b.n	8005f30 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	0c12      	lsrs	r2, r2, #16
 8005f14:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	b292      	uxth	r2, r2
 8005f1e:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f872 	bl	800600a <RTC_ExitInitMode>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	81fb      	strh	r3, [r7, #14]
 8005f46:	2300      	movs	r3, #0
 8005f48:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f58:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005f5a:	89fb      	ldrh	r3, [r7, #14]
 8005f5c:	041a      	lsls	r2, r3, #16
 8005f5e:	89bb      	ldrh	r3, [r7, #12]
 8005f60:	4313      	orrs	r3, r2
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr

08005f6c <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f81d 	bl	8005fba <RTC_EnterInitMode>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	73fb      	strb	r3, [r7, #15]
 8005f8a:	e011      	b.n	8005fb0 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	0c12      	lsrs	r2, r2, #16
 8005f94:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	b292      	uxth	r2, r2
 8005f9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f832 	bl	800600a <RTC_ExitInitMode>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005fc6:	f7fd f9cb 	bl	8003360 <HAL_GetTick>
 8005fca:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005fcc:	e009      	b.n	8005fe2 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005fce:	f7fd f9c7 	bl	8003360 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fdc:	d901      	bls.n	8005fe2 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e00f      	b.n	8006002 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f003 0320 	and.w	r3, r3, #32
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0ee      	beq.n	8005fce <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0210 	orr.w	r2, r2, #16
 8005ffe:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b084      	sub	sp, #16
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0210 	bic.w	r2, r2, #16
 8006024:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006026:	f7fd f99b 	bl	8003360 <HAL_GetTick>
 800602a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800602c:	e009      	b.n	8006042 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800602e:	f7fd f997 	bl	8003360 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800603c:	d901      	bls.n	8006042 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e007      	b.n	8006052 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0ee      	beq.n	800602e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800605a:	b480      	push	{r7}
 800605c:	b085      	sub	sp, #20
 800605e:	af00      	add	r7, sp, #0
 8006060:	4603      	mov	r3, r0
 8006062:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006068:	e005      	b.n	8006076 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3301      	adds	r3, #1
 800606e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	3b0a      	subs	r3, #10
 8006074:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	2b09      	cmp	r3, #9
 800607a:	d8f6      	bhi.n	800606a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	b2da      	uxtb	r2, r3
 8006084:	79fb      	ldrb	r3, [r7, #7]
 8006086:	4313      	orrs	r3, r2
 8006088:	b2db      	uxtb	r3, r3
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr

08006094 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	4603      	mov	r3, r0
 800609c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	091b      	lsrs	r3, r3, #4
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	4413      	add	r3, r2
 80060c2:	b2db      	uxtb	r3, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr

080060ce <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b086      	sub	sp, #24
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	7bdb      	ldrb	r3, [r3, #15]
 80060ec:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	7b5b      	ldrb	r3, [r3, #13]
 80060f2:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	7b9b      	ldrb	r3, [r3, #14]
 80060f8:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80060fa:	2300      	movs	r3, #0
 80060fc:	60bb      	str	r3, [r7, #8]
 80060fe:	e06f      	b.n	80061e0 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d011      	beq.n	800612a <RTC_DateUpdate+0x5c>
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	2b03      	cmp	r3, #3
 800610a:	d00e      	beq.n	800612a <RTC_DateUpdate+0x5c>
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b05      	cmp	r3, #5
 8006110:	d00b      	beq.n	800612a <RTC_DateUpdate+0x5c>
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	2b07      	cmp	r3, #7
 8006116:	d008      	beq.n	800612a <RTC_DateUpdate+0x5c>
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	2b08      	cmp	r3, #8
 800611c:	d005      	beq.n	800612a <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	2b0a      	cmp	r3, #10
 8006122:	d002      	beq.n	800612a <RTC_DateUpdate+0x5c>
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	2b0c      	cmp	r3, #12
 8006128:	d117      	bne.n	800615a <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b1e      	cmp	r3, #30
 800612e:	d803      	bhi.n	8006138 <RTC_DateUpdate+0x6a>
      {
        day++;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3301      	adds	r3, #1
 8006134:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006136:	e050      	b.n	80061da <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	2b0c      	cmp	r3, #12
 800613c:	d005      	beq.n	800614a <RTC_DateUpdate+0x7c>
        {
          month++;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	3301      	adds	r3, #1
 8006142:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006144:	2301      	movs	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006148:	e047      	b.n	80061da <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800614a:	2301      	movs	r3, #1
 800614c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800614e:	2301      	movs	r3, #1
 8006150:	60fb      	str	r3, [r7, #12]
          year++;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	3301      	adds	r3, #1
 8006156:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8006158:	e03f      	b.n	80061da <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b04      	cmp	r3, #4
 800615e:	d008      	beq.n	8006172 <RTC_DateUpdate+0xa4>
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	2b06      	cmp	r3, #6
 8006164:	d005      	beq.n	8006172 <RTC_DateUpdate+0xa4>
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	2b09      	cmp	r3, #9
 800616a:	d002      	beq.n	8006172 <RTC_DateUpdate+0xa4>
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	2b0b      	cmp	r3, #11
 8006170:	d10c      	bne.n	800618c <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b1d      	cmp	r3, #29
 8006176:	d803      	bhi.n	8006180 <RTC_DateUpdate+0xb2>
      {
        day++;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3301      	adds	r3, #1
 800617c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800617e:	e02c      	b.n	80061da <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	3301      	adds	r3, #1
 8006184:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006186:	2301      	movs	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800618a:	e026      	b.n	80061da <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2b02      	cmp	r3, #2
 8006190:	d123      	bne.n	80061da <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b1b      	cmp	r3, #27
 8006196:	d803      	bhi.n	80061a0 <RTC_DateUpdate+0xd2>
      {
        day++;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3301      	adds	r3, #1
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	e01c      	b.n	80061da <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b1c      	cmp	r3, #28
 80061a4:	d111      	bne.n	80061ca <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 f838 	bl	8006220 <RTC_IsLeapYear>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <RTC_DateUpdate+0xf0>
        {
          day++;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3301      	adds	r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	e00d      	b.n	80061da <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	3301      	adds	r3, #1
 80061c2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80061c4:	2301      	movs	r3, #1
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	e007      	b.n	80061da <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b1d      	cmp	r3, #29
 80061ce:	d104      	bne.n	80061da <RTC_DateUpdate+0x10c>
      {
        month++;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	3301      	adds	r3, #1
 80061d4:	613b      	str	r3, [r7, #16]
        day = 1U;
 80061d6:	2301      	movs	r3, #1
 80061d8:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	3301      	adds	r3, #1
 80061de:	60bb      	str	r3, [r7, #8]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d38b      	bcc.n	8006100 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	4619      	mov	r1, r3
 800620a:	6978      	ldr	r0, [r7, #20]
 800620c:	f000 f83a 	bl	8006284 <RTC_WeekDayNum>
 8006210:	4603      	mov	r3, r0
 8006212:	461a      	mov	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	731a      	strb	r2, [r3, #12]
}
 8006218:	bf00      	nop
 800621a:	3718      	adds	r7, #24
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800622a:	88fb      	ldrh	r3, [r7, #6]
 800622c:	f003 0303 	and.w	r3, r3, #3
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	e01d      	b.n	8006276 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800623a:	88fb      	ldrh	r3, [r7, #6]
 800623c:	4a10      	ldr	r2, [pc, #64]	@ (8006280 <RTC_IsLeapYear+0x60>)
 800623e:	fba2 1203 	umull	r1, r2, r2, r3
 8006242:	0952      	lsrs	r2, r2, #5
 8006244:	2164      	movs	r1, #100	@ 0x64
 8006246:	fb01 f202 	mul.w	r2, r1, r2
 800624a:	1a9b      	subs	r3, r3, r2
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8006252:	2301      	movs	r3, #1
 8006254:	e00f      	b.n	8006276 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8006256:	88fb      	ldrh	r3, [r7, #6]
 8006258:	4a09      	ldr	r2, [pc, #36]	@ (8006280 <RTC_IsLeapYear+0x60>)
 800625a:	fba2 1203 	umull	r1, r2, r2, r3
 800625e:	09d2      	lsrs	r2, r2, #7
 8006260:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8006264:	fb01 f202 	mul.w	r2, r1, r2
 8006268:	1a9b      	subs	r3, r3, r2
 800626a:	b29b      	uxth	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8006270:	2301      	movs	r3, #1
 8006272:	e000      	b.n	8006276 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006274:	2300      	movs	r3, #0
  }
}
 8006276:	4618      	mov	r0, r3
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	bc80      	pop	{r7}
 800627e:	4770      	bx	lr
 8006280:	51eb851f 	.word	0x51eb851f

08006284 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	70fb      	strb	r3, [r7, #3]
 8006290:	4613      	mov	r3, r2
 8006292:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	60bb      	str	r3, [r7, #8]
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80062a2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d82d      	bhi.n	8006306 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80062aa:	78fa      	ldrb	r2, [r7, #3]
 80062ac:	4613      	mov	r3, r2
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	4413      	add	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	1a9b      	subs	r3, r3, r2
 80062b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006368 <RTC_WeekDayNum+0xe4>)
 80062b8:	fba2 2303 	umull	r2, r3, r2, r3
 80062bc:	085a      	lsrs	r2, r3, #1
 80062be:	78bb      	ldrb	r3, [r7, #2]
 80062c0:	441a      	add	r2, r3
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	441a      	add	r2, r3
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	089b      	lsrs	r3, r3, #2
 80062cc:	441a      	add	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	4926      	ldr	r1, [pc, #152]	@ (800636c <RTC_WeekDayNum+0xe8>)
 80062d4:	fba1 1303 	umull	r1, r3, r1, r3
 80062d8:	095b      	lsrs	r3, r3, #5
 80062da:	1ad2      	subs	r2, r2, r3
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	3b01      	subs	r3, #1
 80062e0:	4922      	ldr	r1, [pc, #136]	@ (800636c <RTC_WeekDayNum+0xe8>)
 80062e2:	fba1 1303 	umull	r1, r3, r1, r3
 80062e6:	09db      	lsrs	r3, r3, #7
 80062e8:	4413      	add	r3, r2
 80062ea:	1d1a      	adds	r2, r3, #4
 80062ec:	4b20      	ldr	r3, [pc, #128]	@ (8006370 <RTC_WeekDayNum+0xec>)
 80062ee:	fba3 1302 	umull	r1, r3, r3, r2
 80062f2:	1ad1      	subs	r1, r2, r3
 80062f4:	0849      	lsrs	r1, r1, #1
 80062f6:	440b      	add	r3, r1
 80062f8:	0899      	lsrs	r1, r3, #2
 80062fa:	460b      	mov	r3, r1
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	1a5b      	subs	r3, r3, r1
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	e029      	b.n	800635a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006306:	78fa      	ldrb	r2, [r7, #3]
 8006308:	4613      	mov	r3, r2
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	4413      	add	r3, r2
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	1a9b      	subs	r3, r3, r2
 8006312:	4a15      	ldr	r2, [pc, #84]	@ (8006368 <RTC_WeekDayNum+0xe4>)
 8006314:	fba2 2303 	umull	r2, r3, r2, r3
 8006318:	085a      	lsrs	r2, r3, #1
 800631a:	78bb      	ldrb	r3, [r7, #2]
 800631c:	441a      	add	r2, r3
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	441a      	add	r2, r3
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	089b      	lsrs	r3, r3, #2
 8006326:	441a      	add	r2, r3
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4910      	ldr	r1, [pc, #64]	@ (800636c <RTC_WeekDayNum+0xe8>)
 800632c:	fba1 1303 	umull	r1, r3, r1, r3
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	1ad2      	subs	r2, r2, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	490d      	ldr	r1, [pc, #52]	@ (800636c <RTC_WeekDayNum+0xe8>)
 8006338:	fba1 1303 	umull	r1, r3, r1, r3
 800633c:	09db      	lsrs	r3, r3, #7
 800633e:	4413      	add	r3, r2
 8006340:	1c9a      	adds	r2, r3, #2
 8006342:	4b0b      	ldr	r3, [pc, #44]	@ (8006370 <RTC_WeekDayNum+0xec>)
 8006344:	fba3 1302 	umull	r1, r3, r3, r2
 8006348:	1ad1      	subs	r1, r2, r3
 800634a:	0849      	lsrs	r1, r1, #1
 800634c:	440b      	add	r3, r1
 800634e:	0899      	lsrs	r1, r3, #2
 8006350:	460b      	mov	r3, r1
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	1a5b      	subs	r3, r3, r1
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	b2db      	uxtb	r3, r3
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr
 8006368:	38e38e39 	.word	0x38e38e39
 800636c:	51eb851f 	.word	0x51eb851f
 8006370:	24924925 	.word	0x24924925

08006374 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d027      	beq.n	80063da <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	d020      	beq.n	80063da <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f003 0304 	and.w	r3, r3, #4
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00b      	beq.n	80063be <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f824 	bl	80063f4 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f06f 0204 	mvn.w	r2, #4
 80063b4:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2204      	movs	r2, #4
 80063ba:	745a      	strb	r2, [r3, #17]
 80063bc:	e005      	b.n	80063ca <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f80f 	bl	80063e2 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0201 	bic.w	r2, r2, #1
 80063d8:	605a      	str	r2, [r3, #4]
    }
  }
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bc80      	pop	{r7}
 80063f2:	4770      	bx	lr

080063f4 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	bc80      	pop	{r7}
 8006404:	4770      	bx	lr

08006406 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e041      	b.n	800649c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d106      	bne.n	8006432 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f7fc fd43 	bl	8002eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2202      	movs	r2, #2
 8006436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3304      	adds	r3, #4
 8006442:	4619      	mov	r1, r3
 8006444:	4610      	mov	r0, r2
 8006446:	f000 fc31 	bl	8006cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d001      	beq.n	80064bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e032      	b.n	8006522 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a18      	ldr	r2, [pc, #96]	@ (800652c <HAL_TIM_Base_Start+0x88>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d00e      	beq.n	80064ec <HAL_TIM_Base_Start+0x48>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d6:	d009      	beq.n	80064ec <HAL_TIM_Base_Start+0x48>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a14      	ldr	r2, [pc, #80]	@ (8006530 <HAL_TIM_Base_Start+0x8c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d004      	beq.n	80064ec <HAL_TIM_Base_Start+0x48>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a13      	ldr	r2, [pc, #76]	@ (8006534 <HAL_TIM_Base_Start+0x90>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d111      	bne.n	8006510 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b06      	cmp	r3, #6
 80064fc:	d010      	beq.n	8006520 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f042 0201 	orr.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650e:	e007      	b.n	8006520 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0201 	orr.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr
 800652c:	40012c00 	.word	0x40012c00
 8006530:	40000400 	.word	0x40000400
 8006534:	40000800 	.word	0x40000800

08006538 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6a1a      	ldr	r2, [r3, #32]
 8006546:	f241 1311 	movw	r3, #4369	@ 0x1111
 800654a:	4013      	ands	r3, r2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10f      	bne.n	8006570 <HAL_TIM_Base_Stop+0x38>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6a1a      	ldr	r2, [r3, #32]
 8006556:	f240 4344 	movw	r3, #1092	@ 0x444
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d107      	bne.n	8006570 <HAL_TIM_Base_Stop+0x38>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0201 	bic.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	bc80      	pop	{r7}
 8006582:	4770      	bx	lr

08006584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b01      	cmp	r3, #1
 8006596:	d001      	beq.n	800659c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e03a      	b.n	8006612 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2202      	movs	r2, #2
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0201 	orr.w	r2, r2, #1
 80065b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a18      	ldr	r2, [pc, #96]	@ (800661c <HAL_TIM_Base_Start_IT+0x98>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d00e      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x58>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c6:	d009      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x58>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a14      	ldr	r2, [pc, #80]	@ (8006620 <HAL_TIM_Base_Start_IT+0x9c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d004      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x58>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a13      	ldr	r2, [pc, #76]	@ (8006624 <HAL_TIM_Base_Start_IT+0xa0>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d111      	bne.n	8006600 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b06      	cmp	r3, #6
 80065ec:	d010      	beq.n	8006610 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0201 	orr.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fe:	e007      	b.n	8006610 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	bc80      	pop	{r7}
 800661a:	4770      	bx	lr
 800661c:	40012c00 	.word	0x40012c00
 8006620:	40000400 	.word	0x40000400
 8006624:	40000800 	.word	0x40000800

08006628 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e041      	b.n	80066be <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f839 	bl	80066c6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3304      	adds	r3, #4
 8006664:	4619      	mov	r1, r3
 8006666:	4610      	mov	r0, r2
 8006668:	f000 fb20 	bl	8006cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr

080066d8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b0c      	cmp	r3, #12
 80066ea:	d841      	bhi.n	8006770 <HAL_TIM_OC_Stop_IT+0x98>
 80066ec:	a201      	add	r2, pc, #4	@ (adr r2, 80066f4 <HAL_TIM_OC_Stop_IT+0x1c>)
 80066ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f2:	bf00      	nop
 80066f4:	08006729 	.word	0x08006729
 80066f8:	08006771 	.word	0x08006771
 80066fc:	08006771 	.word	0x08006771
 8006700:	08006771 	.word	0x08006771
 8006704:	0800673b 	.word	0x0800673b
 8006708:	08006771 	.word	0x08006771
 800670c:	08006771 	.word	0x08006771
 8006710:	08006771 	.word	0x08006771
 8006714:	0800674d 	.word	0x0800674d
 8006718:	08006771 	.word	0x08006771
 800671c:	08006771 	.word	0x08006771
 8006720:	08006771 	.word	0x08006771
 8006724:	0800675f 	.word	0x0800675f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0202 	bic.w	r2, r2, #2
 8006736:	60da      	str	r2, [r3, #12]
      break;
 8006738:	e01d      	b.n	8006776 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0204 	bic.w	r2, r2, #4
 8006748:	60da      	str	r2, [r3, #12]
      break;
 800674a:	e014      	b.n	8006776 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0208 	bic.w	r2, r2, #8
 800675a:	60da      	str	r2, [r3, #12]
      break;
 800675c:	e00b      	b.n	8006776 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0210 	bic.w	r2, r2, #16
 800676c:	60da      	str	r2, [r3, #12]
      break;
 800676e:	e002      	b.n	8006776 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	73fb      	strb	r3, [r7, #15]
      break;
 8006774:	bf00      	nop
  }

  if (status == HAL_OK)
 8006776:	7bfb      	ldrb	r3, [r7, #15]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d157      	bne.n	800682c <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2200      	movs	r2, #0
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fd1d 	bl	80071c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a2a      	ldr	r2, [pc, #168]	@ (8006838 <HAL_TIM_OC_Stop_IT+0x160>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d117      	bne.n	80067c4 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6a1a      	ldr	r2, [r3, #32]
 800679a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800679e:	4013      	ands	r3, r2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10f      	bne.n	80067c4 <HAL_TIM_OC_Stop_IT+0xec>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6a1a      	ldr	r2, [r3, #32]
 80067aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80067ae:	4013      	ands	r3, r2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d107      	bne.n	80067c4 <HAL_TIM_OC_Stop_IT+0xec>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80067c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6a1a      	ldr	r2, [r3, #32]
 80067ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80067ce:	4013      	ands	r3, r2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10f      	bne.n	80067f4 <HAL_TIM_OC_Stop_IT+0x11c>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6a1a      	ldr	r2, [r3, #32]
 80067da:	f240 4344 	movw	r3, #1092	@ 0x444
 80067de:	4013      	ands	r3, r2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d107      	bne.n	80067f4 <HAL_TIM_OC_Stop_IT+0x11c>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0201 	bic.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d104      	bne.n	8006804 <HAL_TIM_OC_Stop_IT+0x12c>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006802:	e013      	b.n	800682c <HAL_TIM_OC_Stop_IT+0x154>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b04      	cmp	r3, #4
 8006808:	d104      	bne.n	8006814 <HAL_TIM_OC_Stop_IT+0x13c>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006812:	e00b      	b.n	800682c <HAL_TIM_OC_Stop_IT+0x154>
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2b08      	cmp	r3, #8
 8006818:	d104      	bne.n	8006824 <HAL_TIM_OC_Stop_IT+0x14c>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006822:	e003      	b.n	800682c <HAL_TIM_OC_Stop_IT+0x154>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800682c:	7bfb      	ldrb	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	40012c00 	.word	0x40012c00

0800683c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d020      	beq.n	80068a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01b      	beq.n	80068a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f06f 0202 	mvn.w	r2, #2
 8006870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f003 0303 	and.w	r3, r3, #3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f9f4 	bl	8006c74 <HAL_TIM_IC_CaptureCallback>
 800688c:	e005      	b.n	800689a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7fb fa34 	bl	8001cfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f9f6 	bl	8006c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 0304 	and.w	r3, r3, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d020      	beq.n	80068ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01b      	beq.n	80068ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f06f 0204 	mvn.w	r2, #4
 80068bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2202      	movs	r2, #2
 80068c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f9ce 	bl	8006c74 <HAL_TIM_IC_CaptureCallback>
 80068d8:	e005      	b.n	80068e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fb fa0e 	bl	8001cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f9d0 	bl	8006c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d020      	beq.n	8006938 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01b      	beq.n	8006938 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f06f 0208 	mvn.w	r2, #8
 8006908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2204      	movs	r2, #4
 800690e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f9a8 	bl	8006c74 <HAL_TIM_IC_CaptureCallback>
 8006924:	e005      	b.n	8006932 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fb f9e8 	bl	8001cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f9aa 	bl	8006c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f003 0310 	and.w	r3, r3, #16
 800693e:	2b00      	cmp	r3, #0
 8006940:	d020      	beq.n	8006984 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f003 0310 	and.w	r3, r3, #16
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01b      	beq.n	8006984 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f06f 0210 	mvn.w	r2, #16
 8006954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2208      	movs	r2, #8
 800695a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f982 	bl	8006c74 <HAL_TIM_IC_CaptureCallback>
 8006970:	e005      	b.n	800697e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fb f9c2 	bl	8001cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f984 	bl	8006c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00c      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d007      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0201 	mvn.w	r2, #1
 80069a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f95d 	bl	8006c62 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00c      	beq.n	80069cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d007      	beq.n	80069cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80069c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fc87 	bl	80072da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00c      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80069e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f954 	bl	8006c98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d007      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0220 	mvn.w	r2, #32
 8006a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fc5a 	bl	80072c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a14:	bf00      	nop
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e048      	b.n	8006acc <HAL_TIM_OC_ConfigChannel+0xb0>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b0c      	cmp	r3, #12
 8006a46:	d839      	bhi.n	8006abc <HAL_TIM_OC_ConfigChannel+0xa0>
 8006a48:	a201      	add	r2, pc, #4	@ (adr r2, 8006a50 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4e:	bf00      	nop
 8006a50:	08006a85 	.word	0x08006a85
 8006a54:	08006abd 	.word	0x08006abd
 8006a58:	08006abd 	.word	0x08006abd
 8006a5c:	08006abd 	.word	0x08006abd
 8006a60:	08006a93 	.word	0x08006a93
 8006a64:	08006abd 	.word	0x08006abd
 8006a68:	08006abd 	.word	0x08006abd
 8006a6c:	08006abd 	.word	0x08006abd
 8006a70:	08006aa1 	.word	0x08006aa1
 8006a74:	08006abd 	.word	0x08006abd
 8006a78:	08006abd 	.word	0x08006abd
 8006a7c:	08006abd 	.word	0x08006abd
 8006a80:	08006aaf 	.word	0x08006aaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 f97c 	bl	8006d88 <TIM_OC1_SetConfig>
      break;
 8006a90:	e017      	b.n	8006ac2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68b9      	ldr	r1, [r7, #8]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 f9db 	bl	8006e54 <TIM_OC2_SetConfig>
      break;
 8006a9e:	e010      	b.n	8006ac2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fa3e 	bl	8006f28 <TIM_OC3_SetConfig>
      break;
 8006aac:	e009      	b.n	8006ac2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 faa1 	bl	8006ffc <TIM_OC4_SetConfig>
      break;
 8006aba:	e002      	b.n	8006ac2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_TIM_ConfigClockSource+0x1c>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e0b4      	b.n	8006c5a <HAL_TIM_ConfigClockSource+0x186>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b28:	d03e      	beq.n	8006ba8 <HAL_TIM_ConfigClockSource+0xd4>
 8006b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b2e:	f200 8087 	bhi.w	8006c40 <HAL_TIM_ConfigClockSource+0x16c>
 8006b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b36:	f000 8086 	beq.w	8006c46 <HAL_TIM_ConfigClockSource+0x172>
 8006b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b3e:	d87f      	bhi.n	8006c40 <HAL_TIM_ConfigClockSource+0x16c>
 8006b40:	2b70      	cmp	r3, #112	@ 0x70
 8006b42:	d01a      	beq.n	8006b7a <HAL_TIM_ConfigClockSource+0xa6>
 8006b44:	2b70      	cmp	r3, #112	@ 0x70
 8006b46:	d87b      	bhi.n	8006c40 <HAL_TIM_ConfigClockSource+0x16c>
 8006b48:	2b60      	cmp	r3, #96	@ 0x60
 8006b4a:	d050      	beq.n	8006bee <HAL_TIM_ConfigClockSource+0x11a>
 8006b4c:	2b60      	cmp	r3, #96	@ 0x60
 8006b4e:	d877      	bhi.n	8006c40 <HAL_TIM_ConfigClockSource+0x16c>
 8006b50:	2b50      	cmp	r3, #80	@ 0x50
 8006b52:	d03c      	beq.n	8006bce <HAL_TIM_ConfigClockSource+0xfa>
 8006b54:	2b50      	cmp	r3, #80	@ 0x50
 8006b56:	d873      	bhi.n	8006c40 <HAL_TIM_ConfigClockSource+0x16c>
 8006b58:	2b40      	cmp	r3, #64	@ 0x40
 8006b5a:	d058      	beq.n	8006c0e <HAL_TIM_ConfigClockSource+0x13a>
 8006b5c:	2b40      	cmp	r3, #64	@ 0x40
 8006b5e:	d86f      	bhi.n	8006c40 <HAL_TIM_ConfigClockSource+0x16c>
 8006b60:	2b30      	cmp	r3, #48	@ 0x30
 8006b62:	d064      	beq.n	8006c2e <HAL_TIM_ConfigClockSource+0x15a>
 8006b64:	2b30      	cmp	r3, #48	@ 0x30
 8006b66:	d86b      	bhi.n	8006c40 <HAL_TIM_ConfigClockSource+0x16c>
 8006b68:	2b20      	cmp	r3, #32
 8006b6a:	d060      	beq.n	8006c2e <HAL_TIM_ConfigClockSource+0x15a>
 8006b6c:	2b20      	cmp	r3, #32
 8006b6e:	d867      	bhi.n	8006c40 <HAL_TIM_ConfigClockSource+0x16c>
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d05c      	beq.n	8006c2e <HAL_TIM_ConfigClockSource+0x15a>
 8006b74:	2b10      	cmp	r3, #16
 8006b76:	d05a      	beq.n	8006c2e <HAL_TIM_ConfigClockSource+0x15a>
 8006b78:	e062      	b.n	8006c40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b8a:	f000 fafc 	bl	8007186 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	609a      	str	r2, [r3, #8]
      break;
 8006ba6:	e04f      	b.n	8006c48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bb8:	f000 fae5 	bl	8007186 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689a      	ldr	r2, [r3, #8]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bca:	609a      	str	r2, [r3, #8]
      break;
 8006bcc:	e03c      	b.n	8006c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f000 fa5c 	bl	8007098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2150      	movs	r1, #80	@ 0x50
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fab3 	bl	8007152 <TIM_ITRx_SetConfig>
      break;
 8006bec:	e02c      	b.n	8006c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f000 fa7a 	bl	80070f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2160      	movs	r1, #96	@ 0x60
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 faa3 	bl	8007152 <TIM_ITRx_SetConfig>
      break;
 8006c0c:	e01c      	b.n	8006c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f000 fa3c 	bl	8007098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2140      	movs	r1, #64	@ 0x40
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fa93 	bl	8007152 <TIM_ITRx_SetConfig>
      break;
 8006c2c:	e00c      	b.n	8006c48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4619      	mov	r1, r3
 8006c38:	4610      	mov	r0, r2
 8006c3a:	f000 fa8a 	bl	8007152 <TIM_ITRx_SetConfig>
      break;
 8006c3e:	e003      	b.n	8006c48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	73fb      	strb	r3, [r7, #15]
      break;
 8006c44:	e000      	b.n	8006c48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bc80      	pop	{r7}
 8006c72:	4770      	bx	lr

08006c74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bc80      	pop	{r7}
 8006c84:	4770      	bx	lr

08006c86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr

08006c98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bc80      	pop	{r7}
 8006ca8:	4770      	bx	lr
	...

08006cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8006d7c <TIM_Base_SetConfig+0xd0>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d00b      	beq.n	8006cdc <TIM_Base_SetConfig+0x30>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cca:	d007      	beq.n	8006cdc <TIM_Base_SetConfig+0x30>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a2c      	ldr	r2, [pc, #176]	@ (8006d80 <TIM_Base_SetConfig+0xd4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d003      	beq.n	8006cdc <TIM_Base_SetConfig+0x30>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8006d84 <TIM_Base_SetConfig+0xd8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d108      	bne.n	8006cee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a22      	ldr	r2, [pc, #136]	@ (8006d7c <TIM_Base_SetConfig+0xd0>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00b      	beq.n	8006d0e <TIM_Base_SetConfig+0x62>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cfc:	d007      	beq.n	8006d0e <TIM_Base_SetConfig+0x62>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a1f      	ldr	r2, [pc, #124]	@ (8006d80 <TIM_Base_SetConfig+0xd4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d003      	beq.n	8006d0e <TIM_Base_SetConfig+0x62>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a1e      	ldr	r2, [pc, #120]	@ (8006d84 <TIM_Base_SetConfig+0xd8>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d108      	bne.n	8006d20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a0d      	ldr	r2, [pc, #52]	@ (8006d7c <TIM_Base_SetConfig+0xd0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d103      	bne.n	8006d54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d005      	beq.n	8006d72 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f023 0201 	bic.w	r2, r3, #1
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	611a      	str	r2, [r3, #16]
  }
}
 8006d72:	bf00      	nop
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bc80      	pop	{r7}
 8006d7a:	4770      	bx	lr
 8006d7c:	40012c00 	.word	0x40012c00
 8006d80:	40000400 	.word	0x40000400
 8006d84:	40000800 	.word	0x40000800

08006d88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	f023 0201 	bic.w	r2, r3, #1
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0303 	bic.w	r3, r3, #3
 8006dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f023 0302 	bic.w	r3, r3, #2
 8006dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a1c      	ldr	r2, [pc, #112]	@ (8006e50 <TIM_OC1_SetConfig+0xc8>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d10c      	bne.n	8006dfe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f023 0308 	bic.w	r3, r3, #8
 8006dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f023 0304 	bic.w	r3, r3, #4
 8006dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a13      	ldr	r2, [pc, #76]	@ (8006e50 <TIM_OC1_SetConfig+0xc8>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d111      	bne.n	8006e2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	621a      	str	r2, [r3, #32]
}
 8006e44:	bf00      	nop
 8006e46:	371c      	adds	r7, #28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	40012c00 	.word	0x40012c00

08006e54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	f023 0210 	bic.w	r2, r3, #16
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	021b      	lsls	r3, r3, #8
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f023 0320 	bic.w	r3, r3, #32
 8006e9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	011b      	lsls	r3, r3, #4
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a1d      	ldr	r2, [pc, #116]	@ (8006f24 <TIM_OC2_SetConfig+0xd0>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d10d      	bne.n	8006ed0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	011b      	lsls	r3, r3, #4
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ece:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a14      	ldr	r2, [pc, #80]	@ (8006f24 <TIM_OC2_SetConfig+0xd0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d113      	bne.n	8006f00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	621a      	str	r2, [r3, #32]
}
 8006f1a:	bf00      	nop
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bc80      	pop	{r7}
 8006f22:	4770      	bx	lr
 8006f24:	40012c00 	.word	0x40012c00

08006f28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0303 	bic.w	r3, r3, #3
 8006f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	021b      	lsls	r3, r3, #8
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a1d      	ldr	r2, [pc, #116]	@ (8006ff8 <TIM_OC3_SetConfig+0xd0>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d10d      	bne.n	8006fa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	021b      	lsls	r3, r3, #8
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a14      	ldr	r2, [pc, #80]	@ (8006ff8 <TIM_OC3_SetConfig+0xd0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d113      	bne.n	8006fd2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	621a      	str	r2, [r3, #32]
}
 8006fec:	bf00      	nop
 8006fee:	371c      	adds	r7, #28
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bc80      	pop	{r7}
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	40012c00 	.word	0x40012c00

08006ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800702a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	021b      	lsls	r3, r3, #8
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	4313      	orrs	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	031b      	lsls	r3, r3, #12
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	4313      	orrs	r3, r2
 8007052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a0f      	ldr	r2, [pc, #60]	@ (8007094 <TIM_OC4_SetConfig+0x98>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d109      	bne.n	8007070 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	019b      	lsls	r3, r3, #6
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	4313      	orrs	r3, r2
 800706e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	621a      	str	r2, [r3, #32]
}
 800708a:	bf00      	nop
 800708c:	371c      	adds	r7, #28
 800708e:	46bd      	mov	sp, r7
 8007090:	bc80      	pop	{r7}
 8007092:	4770      	bx	lr
 8007094:	40012c00 	.word	0x40012c00

08007098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	f023 0201 	bic.w	r2, r3, #1
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f023 030a 	bic.w	r3, r3, #10
 80070d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4313      	orrs	r3, r2
 80070dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	621a      	str	r2, [r3, #32]
}
 80070ea:	bf00      	nop
 80070ec:	371c      	adds	r7, #28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr

080070f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	f023 0210 	bic.w	r2, r3, #16
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800711e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	031b      	lsls	r3, r3, #12
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4313      	orrs	r3, r2
 8007128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007130:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	011b      	lsls	r3, r3, #4
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	4313      	orrs	r3, r2
 800713a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	621a      	str	r2, [r3, #32]
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	bc80      	pop	{r7}
 8007150:	4770      	bx	lr

08007152 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007152:	b480      	push	{r7}
 8007154:	b085      	sub	sp, #20
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4313      	orrs	r3, r2
 8007170:	f043 0307 	orr.w	r3, r3, #7
 8007174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	609a      	str	r2, [r3, #8]
}
 800717c:	bf00      	nop
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	bc80      	pop	{r7}
 8007184:	4770      	bx	lr

08007186 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007186:	b480      	push	{r7}
 8007188:	b087      	sub	sp, #28
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	021a      	lsls	r2, r3, #8
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	431a      	orrs	r2, r3
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	609a      	str	r2, [r3, #8]
}
 80071ba:	bf00      	nop
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	bc80      	pop	{r7}
 80071c2:	4770      	bx	lr

080071c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f003 031f 	and.w	r3, r3, #31
 80071d6:	2201      	movs	r2, #1
 80071d8:	fa02 f303 	lsl.w	r3, r2, r3
 80071dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6a1a      	ldr	r2, [r3, #32]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	43db      	mvns	r3, r3
 80071e6:	401a      	ands	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a1a      	ldr	r2, [r3, #32]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f003 031f 	and.w	r3, r3, #31
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	fa01 f303 	lsl.w	r3, r1, r3
 80071fc:	431a      	orrs	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	bc80      	pop	{r7}
 800720a:	4770      	bx	lr

0800720c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007220:	2302      	movs	r3, #2
 8007222:	e046      	b.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800724a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a16      	ldr	r2, [pc, #88]	@ (80072bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d00e      	beq.n	8007286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007270:	d009      	beq.n	8007286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a12      	ldr	r2, [pc, #72]	@ (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d004      	beq.n	8007286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a10      	ldr	r2, [pc, #64]	@ (80072c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d10c      	bne.n	80072a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800728c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	4313      	orrs	r3, r2
 8007296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bc80      	pop	{r7}
 80072ba:	4770      	bx	lr
 80072bc:	40012c00 	.word	0x40012c00
 80072c0:	40000400 	.word	0x40000400
 80072c4:	40000800 	.word	0x40000800

080072c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bc80      	pop	{r7}
 80072d8:	4770      	bx	lr

080072da <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072da:	b480      	push	{r7}
 80072dc:	b083      	sub	sp, #12
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072e2:	bf00      	nop
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bc80      	pop	{r7}
 80072ea:	4770      	bx	lr

080072ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e042      	b.n	8007384 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d106      	bne.n	8007318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fb fe24 	bl	8002f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2224      	movs	r2, #36	@ 0x24
 800731c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800732e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fdaf 	bl	8007e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	691a      	ldr	r2, [r3, #16]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	695a      	ldr	r2, [r3, #20]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68da      	ldr	r2, [r3, #12]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2220      	movs	r2, #32
 8007370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2220      	movs	r2, #32
 8007378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08a      	sub	sp, #40	@ 0x28
 8007390:	af02      	add	r7, sp, #8
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	4613      	mov	r3, r2
 800739a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d175      	bne.n	8007498 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <HAL_UART_Transmit+0x2c>
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e06e      	b.n	800749a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2221      	movs	r2, #33	@ 0x21
 80073c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073ca:	f7fb ffc9 	bl	8003360 <HAL_GetTick>
 80073ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	88fa      	ldrh	r2, [r7, #6]
 80073d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	88fa      	ldrh	r2, [r7, #6]
 80073da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073e4:	d108      	bne.n	80073f8 <HAL_UART_Transmit+0x6c>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d104      	bne.n	80073f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	61bb      	str	r3, [r7, #24]
 80073f6:	e003      	b.n	8007400 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007400:	e02e      	b.n	8007460 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2200      	movs	r2, #0
 800740a:	2180      	movs	r1, #128	@ 0x80
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 fb13 	bl	8007a38 <UART_WaitOnFlagUntilTimeout>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d005      	beq.n	8007424 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2220      	movs	r2, #32
 800741c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e03a      	b.n	800749a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10b      	bne.n	8007442 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	461a      	mov	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007438:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	3302      	adds	r3, #2
 800743e:	61bb      	str	r3, [r7, #24]
 8007440:	e007      	b.n	8007452 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	781a      	ldrb	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	3301      	adds	r3, #1
 8007450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1cb      	bne.n	8007402 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2200      	movs	r2, #0
 8007472:	2140      	movs	r1, #64	@ 0x40
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fadf 	bl	8007a38 <UART_WaitOnFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2220      	movs	r2, #32
 8007484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e006      	b.n	800749a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	e000      	b.n	800749a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007498:	2302      	movs	r3, #2
  }
}
 800749a:	4618      	mov	r0, r3
 800749c:	3720      	adds	r7, #32
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	4613      	mov	r3, r2
 80074ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	d112      	bne.n	80074e2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <HAL_UART_Receive_IT+0x26>
 80074c2:	88fb      	ldrh	r3, [r7, #6]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e00b      	b.n	80074e4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074d2:	88fb      	ldrh	r3, [r7, #6]
 80074d4:	461a      	mov	r2, r3
 80074d6:	68b9      	ldr	r1, [r7, #8]
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 fb06 	bl	8007aea <UART_Start_Receive_IT>
 80074de:	4603      	mov	r3, r0
 80074e0:	e000      	b.n	80074e4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80074e2:	2302      	movs	r3, #2
  }
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b0ba      	sub	sp, #232	@ 0xe8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007512:	2300      	movs	r3, #0
 8007514:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007518:	2300      	movs	r3, #0
 800751a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800751e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007522:	f003 030f 	and.w	r3, r3, #15
 8007526:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800752a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10f      	bne.n	8007552 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	d009      	beq.n	8007552 <HAL_UART_IRQHandler+0x66>
 800753e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007542:	f003 0320 	and.w	r3, r3, #32
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fbe3 	bl	8007d16 <UART_Receive_IT>
      return;
 8007550:	e25b      	b.n	8007a0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 80de 	beq.w	8007718 <HAL_UART_IRQHandler+0x22c>
 800755c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d106      	bne.n	8007576 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800756c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 80d1 	beq.w	8007718 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00b      	beq.n	800759a <HAL_UART_IRQHandler+0xae>
 8007582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800758a:	2b00      	cmp	r3, #0
 800758c:	d005      	beq.n	800759a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007592:	f043 0201 	orr.w	r2, r3, #1
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800759a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800759e:	f003 0304 	and.w	r3, r3, #4
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00b      	beq.n	80075be <HAL_UART_IRQHandler+0xd2>
 80075a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d005      	beq.n	80075be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b6:	f043 0202 	orr.w	r2, r3, #2
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00b      	beq.n	80075e2 <HAL_UART_IRQHandler+0xf6>
 80075ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d005      	beq.n	80075e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075da:	f043 0204 	orr.w	r2, r3, #4
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80075e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075e6:	f003 0308 	and.w	r3, r3, #8
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d011      	beq.n	8007612 <HAL_UART_IRQHandler+0x126>
 80075ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d105      	bne.n	8007606 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80075fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d005      	beq.n	8007612 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800760a:	f043 0208 	orr.w	r2, r3, #8
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007616:	2b00      	cmp	r3, #0
 8007618:	f000 81f2 	beq.w	8007a00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800761c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	2b00      	cmp	r3, #0
 8007626:	d008      	beq.n	800763a <HAL_UART_IRQHandler+0x14e>
 8007628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800762c:	f003 0320 	and.w	r3, r3, #32
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fb6e 	bl	8007d16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	bf14      	ite	ne
 8007648:	2301      	movne	r3, #1
 800764a:	2300      	moveq	r3, #0
 800764c:	b2db      	uxtb	r3, r3
 800764e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007656:	f003 0308 	and.w	r3, r3, #8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d103      	bne.n	8007666 <HAL_UART_IRQHandler+0x17a>
 800765e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007662:	2b00      	cmp	r3, #0
 8007664:	d04f      	beq.n	8007706 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fa78 	bl	8007b5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007676:	2b00      	cmp	r3, #0
 8007678:	d041      	beq.n	80076fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3314      	adds	r3, #20
 8007680:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007688:	e853 3f00 	ldrex	r3, [r3]
 800768c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007690:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007694:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007698:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3314      	adds	r3, #20
 80076a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80076a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80076aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80076b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80076be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1d9      	bne.n	800767a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d013      	beq.n	80076f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d2:	4a7e      	ldr	r2, [pc, #504]	@ (80078cc <HAL_UART_IRQHandler+0x3e0>)
 80076d4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fb ffb6 	bl	800364c <HAL_DMA_Abort_IT>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d016      	beq.n	8007714 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80076f0:	4610      	mov	r0, r2
 80076f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f4:	e00e      	b.n	8007714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f98a 	bl	8007a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076fc:	e00a      	b.n	8007714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f986 	bl	8007a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007704:	e006      	b.n	8007714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f982 	bl	8007a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007712:	e175      	b.n	8007a00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007714:	bf00      	nop
    return;
 8007716:	e173      	b.n	8007a00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771c:	2b01      	cmp	r3, #1
 800771e:	f040 814f 	bne.w	80079c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007726:	f003 0310 	and.w	r3, r3, #16
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 8148 	beq.w	80079c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007734:	f003 0310 	and.w	r3, r3, #16
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 8141 	beq.w	80079c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800773e:	2300      	movs	r3, #0
 8007740:	60bb      	str	r3, [r7, #8]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60bb      	str	r3, [r7, #8]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	60bb      	str	r3, [r7, #8]
 8007752:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 80b6 	beq.w	80078d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007770:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 8145 	beq.w	8007a04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800777e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007782:	429a      	cmp	r2, r3
 8007784:	f080 813e 	bcs.w	8007a04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800778e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	2b20      	cmp	r3, #32
 8007798:	f000 8088 	beq.w	80078ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	330c      	adds	r3, #12
 80077a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80077aa:	e853 3f00 	ldrex	r3, [r3]
 80077ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80077b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	330c      	adds	r3, #12
 80077c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80077c8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80077cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80077d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80077e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1d9      	bne.n	800779c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3314      	adds	r3, #20
 80077ee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077f2:	e853 3f00 	ldrex	r3, [r3]
 80077f6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80077f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077fa:	f023 0301 	bic.w	r3, r3, #1
 80077fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3314      	adds	r3, #20
 8007808:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800780c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007810:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007812:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007814:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800781e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e1      	bne.n	80077e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3314      	adds	r3, #20
 800782a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800782e:	e853 3f00 	ldrex	r3, [r3]
 8007832:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007834:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007836:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800783a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3314      	adds	r3, #20
 8007844:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007848:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800784a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800784e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007850:	e841 2300 	strex	r3, r2, [r1]
 8007854:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007856:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1e3      	bne.n	8007824 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2220      	movs	r2, #32
 8007860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	330c      	adds	r3, #12
 8007870:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800787a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800787c:	f023 0310 	bic.w	r3, r3, #16
 8007880:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	330c      	adds	r3, #12
 800788a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800788e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007890:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007892:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007894:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007896:	e841 2300 	strex	r3, r2, [r1]
 800789a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800789c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1e3      	bne.n	800786a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fb fe95 	bl	80035d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	b29b      	uxth	r3, r3
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f8ad 	bl	8007a22 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078c8:	e09c      	b.n	8007a04 <HAL_UART_IRQHandler+0x518>
 80078ca:	bf00      	nop
 80078cc:	08007c21 	.word	0x08007c21
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078d8:	b29b      	uxth	r3, r3
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 808e 	beq.w	8007a08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80078ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 8089 	beq.w	8007a08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	330c      	adds	r3, #12
 80078fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800790c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	330c      	adds	r3, #12
 8007916:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800791a:	647a      	str	r2, [r7, #68]	@ 0x44
 800791c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007920:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e3      	bne.n	80078f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3314      	adds	r3, #20
 8007934:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007938:	e853 3f00 	ldrex	r3, [r3]
 800793c:	623b      	str	r3, [r7, #32]
   return(result);
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	f023 0301 	bic.w	r3, r3, #1
 8007944:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3314      	adds	r3, #20
 800794e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007952:	633a      	str	r2, [r7, #48]	@ 0x30
 8007954:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e3      	bne.n	800792e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2220      	movs	r2, #32
 800796a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	330c      	adds	r3, #12
 800797a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	e853 3f00 	ldrex	r3, [r3]
 8007982:	60fb      	str	r3, [r7, #12]
   return(result);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f023 0310 	bic.w	r3, r3, #16
 800798a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	330c      	adds	r3, #12
 8007994:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007998:	61fa      	str	r2, [r7, #28]
 800799a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	69b9      	ldr	r1, [r7, #24]
 800799e:	69fa      	ldr	r2, [r7, #28]
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	617b      	str	r3, [r7, #20]
   return(result);
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e3      	bne.n	8007974 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f832 	bl	8007a22 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079be:	e023      	b.n	8007a08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d009      	beq.n	80079e0 <HAL_UART_IRQHandler+0x4f4>
 80079cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f935 	bl	8007c48 <UART_Transmit_IT>
    return;
 80079de:	e014      	b.n	8007a0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00e      	beq.n	8007a0a <HAL_UART_IRQHandler+0x51e>
 80079ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d008      	beq.n	8007a0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f974 	bl	8007ce6 <UART_EndTransmit_IT>
    return;
 80079fe:	e004      	b.n	8007a0a <HAL_UART_IRQHandler+0x51e>
    return;
 8007a00:	bf00      	nop
 8007a02:	e002      	b.n	8007a0a <HAL_UART_IRQHandler+0x51e>
      return;
 8007a04:	bf00      	nop
 8007a06:	e000      	b.n	8007a0a <HAL_UART_IRQHandler+0x51e>
      return;
 8007a08:	bf00      	nop
  }
}
 8007a0a:	37e8      	adds	r7, #232	@ 0xe8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bc80      	pop	{r7}
 8007a20:	4770      	bx	lr

08007a22 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a2e:	bf00      	nop
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bc80      	pop	{r7}
 8007a36:	4770      	bx	lr

08007a38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	603b      	str	r3, [r7, #0]
 8007a44:	4613      	mov	r3, r2
 8007a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a48:	e03b      	b.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a50:	d037      	beq.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a52:	f7fb fc85 	bl	8003360 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	6a3a      	ldr	r2, [r7, #32]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d302      	bcc.n	8007a68 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e03a      	b.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f003 0304 	and.w	r3, r3, #4
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d023      	beq.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b80      	cmp	r3, #128	@ 0x80
 8007a7e:	d020      	beq.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b40      	cmp	r3, #64	@ 0x40
 8007a84:	d01d      	beq.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d116      	bne.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007a94:	2300      	movs	r3, #0
 8007a96:	617b      	str	r3, [r7, #20]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 f856 	bl	8007b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2208      	movs	r2, #8
 8007ab4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e00f      	b.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	4013      	ands	r3, r2
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	bf0c      	ite	eq
 8007ad2:	2301      	moveq	r3, #1
 8007ad4:	2300      	movne	r3, #0
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	461a      	mov	r2, r3
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d0b4      	beq.n	8007a4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b085      	sub	sp, #20
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	60b9      	str	r1, [r7, #8]
 8007af4:	4613      	mov	r3, r2
 8007af6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	88fa      	ldrh	r2, [r7, #6]
 8007b02:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	88fa      	ldrh	r2, [r7, #6]
 8007b08:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2222      	movs	r2, #34	@ 0x22
 8007b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d007      	beq.n	8007b30 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b2e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	695a      	ldr	r2, [r3, #20]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 0201 	orr.w	r2, r2, #1
 8007b3e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68da      	ldr	r2, [r3, #12]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f042 0220 	orr.w	r2, r2, #32
 8007b4e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bc80      	pop	{r7}
 8007b5a:	4770      	bx	lr

08007b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b095      	sub	sp, #84	@ 0x54
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	330c      	adds	r3, #12
 8007b6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b6e:	e853 3f00 	ldrex	r3, [r3]
 8007b72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	330c      	adds	r3, #12
 8007b82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b84:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b8c:	e841 2300 	strex	r3, r2, [r1]
 8007b90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e5      	bne.n	8007b64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3314      	adds	r3, #20
 8007b9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	e853 3f00 	ldrex	r3, [r3]
 8007ba6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	f023 0301 	bic.w	r3, r3, #1
 8007bae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	3314      	adds	r3, #20
 8007bb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bc0:	e841 2300 	strex	r3, r2, [r1]
 8007bc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e5      	bne.n	8007b98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d119      	bne.n	8007c08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	330c      	adds	r3, #12
 8007bda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f023 0310 	bic.w	r3, r3, #16
 8007bea:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	330c      	adds	r3, #12
 8007bf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bf4:	61ba      	str	r2, [r7, #24]
 8007bf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	6979      	ldr	r1, [r7, #20]
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	e841 2300 	strex	r3, r2, [r1]
 8007c00:	613b      	str	r3, [r7, #16]
   return(result);
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e5      	bne.n	8007bd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c16:	bf00      	nop
 8007c18:	3754      	adds	r7, #84	@ 0x54
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bc80      	pop	{r7}
 8007c1e:	4770      	bx	lr

08007c20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f7ff fee8 	bl	8007a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c40:	bf00      	nop
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b21      	cmp	r3, #33	@ 0x21
 8007c5a:	d13e      	bne.n	8007cda <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c64:	d114      	bne.n	8007c90 <UART_Transmit_IT+0x48>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d110      	bne.n	8007c90 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	1c9a      	adds	r2, r3, #2
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	621a      	str	r2, [r3, #32]
 8007c8e:	e008      	b.n	8007ca2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	1c59      	adds	r1, r3, #1
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	6211      	str	r1, [r2, #32]
 8007c9a:	781a      	ldrb	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10f      	bne.n	8007cd6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007cc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68da      	ldr	r2, [r3, #12]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	e000      	b.n	8007cdc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007cda:	2302      	movs	r3, #2
  }
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bc80      	pop	{r7}
 8007ce4:	4770      	bx	lr

08007ce6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cfc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7fa f836 	bl	8001d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b08c      	sub	sp, #48	@ 0x30
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b22      	cmp	r3, #34	@ 0x22
 8007d28:	f040 80ae 	bne.w	8007e88 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d34:	d117      	bne.n	8007d66 <UART_Receive_IT+0x50>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d113      	bne.n	8007d66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d46:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d5e:	1c9a      	adds	r2, r3, #2
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d64:	e026      	b.n	8007db4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d78:	d007      	beq.n	8007d8a <UART_Receive_IT+0x74>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10a      	bne.n	8007d98 <UART_Receive_IT+0x82>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d106      	bne.n	8007d98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d94:	701a      	strb	r2, [r3, #0]
 8007d96:	e008      	b.n	8007daa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d15d      	bne.n	8007e84 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68da      	ldr	r2, [r3, #12]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 0220 	bic.w	r2, r2, #32
 8007dd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007de6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	695a      	ldr	r2, [r3, #20]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f022 0201 	bic.w	r2, r2, #1
 8007df6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d135      	bne.n	8007e7a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	330c      	adds	r3, #12
 8007e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	613b      	str	r3, [r7, #16]
   return(result);
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	f023 0310 	bic.w	r3, r3, #16
 8007e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	330c      	adds	r3, #12
 8007e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e34:	623a      	str	r2, [r7, #32]
 8007e36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	69f9      	ldr	r1, [r7, #28]
 8007e3a:	6a3a      	ldr	r2, [r7, #32]
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e5      	bne.n	8007e14 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0310 	and.w	r3, r3, #16
 8007e52:	2b10      	cmp	r3, #16
 8007e54:	d10a      	bne.n	8007e6c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	60fb      	str	r3, [r7, #12]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7ff fdd5 	bl	8007a22 <HAL_UARTEx_RxEventCallback>
 8007e78:	e002      	b.n	8007e80 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7f9 ff72 	bl	8001d64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	e002      	b.n	8007e8a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	e000      	b.n	8007e8a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007e88:	2302      	movs	r3, #2
  }
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3730      	adds	r7, #48	@ 0x30
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68da      	ldr	r2, [r3, #12]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	689a      	ldr	r2, [r3, #8]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007ece:	f023 030c 	bic.w	r3, r3, #12
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	6812      	ldr	r2, [r2, #0]
 8007ed6:	68b9      	ldr	r1, [r7, #8]
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	699a      	ldr	r2, [r3, #24]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8007fa8 <UART_SetConfig+0x114>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d103      	bne.n	8007f04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007efc:	f7fd fa0a 	bl	8005314 <HAL_RCC_GetPCLK2Freq>
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	e002      	b.n	8007f0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007f04:	f7fd f9f2 	bl	80052ec <HAL_RCC_GetPCLK1Freq>
 8007f08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	009a      	lsls	r2, r3, #2
 8007f14:	441a      	add	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f20:	4a22      	ldr	r2, [pc, #136]	@ (8007fac <UART_SetConfig+0x118>)
 8007f22:	fba2 2303 	umull	r2, r3, r2, r3
 8007f26:	095b      	lsrs	r3, r3, #5
 8007f28:	0119      	lsls	r1, r3, #4
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	009a      	lsls	r2, r3, #2
 8007f34:	441a      	add	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f40:	4b1a      	ldr	r3, [pc, #104]	@ (8007fac <UART_SetConfig+0x118>)
 8007f42:	fba3 0302 	umull	r0, r3, r3, r2
 8007f46:	095b      	lsrs	r3, r3, #5
 8007f48:	2064      	movs	r0, #100	@ 0x64
 8007f4a:	fb00 f303 	mul.w	r3, r0, r3
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	011b      	lsls	r3, r3, #4
 8007f52:	3332      	adds	r3, #50	@ 0x32
 8007f54:	4a15      	ldr	r2, [pc, #84]	@ (8007fac <UART_SetConfig+0x118>)
 8007f56:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5a:	095b      	lsrs	r3, r3, #5
 8007f5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f60:	4419      	add	r1, r3
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	4613      	mov	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	009a      	lsls	r2, r3, #2
 8007f6c:	441a      	add	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f78:	4b0c      	ldr	r3, [pc, #48]	@ (8007fac <UART_SetConfig+0x118>)
 8007f7a:	fba3 0302 	umull	r0, r3, r3, r2
 8007f7e:	095b      	lsrs	r3, r3, #5
 8007f80:	2064      	movs	r0, #100	@ 0x64
 8007f82:	fb00 f303 	mul.w	r3, r0, r3
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	011b      	lsls	r3, r3, #4
 8007f8a:	3332      	adds	r3, #50	@ 0x32
 8007f8c:	4a07      	ldr	r2, [pc, #28]	@ (8007fac <UART_SetConfig+0x118>)
 8007f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f92:	095b      	lsrs	r3, r3, #5
 8007f94:	f003 020f 	and.w	r2, r3, #15
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	440a      	add	r2, r1
 8007f9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007fa0:	bf00      	nop
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	40013800 	.word	0x40013800
 8007fac:	51eb851f 	.word	0x51eb851f

08007fb0 <malloc>:
 8007fb0:	4b02      	ldr	r3, [pc, #8]	@ (8007fbc <malloc+0xc>)
 8007fb2:	4601      	mov	r1, r0
 8007fb4:	6818      	ldr	r0, [r3, #0]
 8007fb6:	f000 b825 	b.w	8008004 <_malloc_r>
 8007fba:	bf00      	nop
 8007fbc:	20000020 	.word	0x20000020

08007fc0 <sbrk_aligned>:
 8007fc0:	b570      	push	{r4, r5, r6, lr}
 8007fc2:	4e0f      	ldr	r6, [pc, #60]	@ (8008000 <sbrk_aligned+0x40>)
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	6831      	ldr	r1, [r6, #0]
 8007fc8:	4605      	mov	r5, r0
 8007fca:	b911      	cbnz	r1, 8007fd2 <sbrk_aligned+0x12>
 8007fcc:	f000 fe56 	bl	8008c7c <_sbrk_r>
 8007fd0:	6030      	str	r0, [r6, #0]
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f000 fe51 	bl	8008c7c <_sbrk_r>
 8007fda:	1c43      	adds	r3, r0, #1
 8007fdc:	d103      	bne.n	8007fe6 <sbrk_aligned+0x26>
 8007fde:	f04f 34ff 	mov.w	r4, #4294967295
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	bd70      	pop	{r4, r5, r6, pc}
 8007fe6:	1cc4      	adds	r4, r0, #3
 8007fe8:	f024 0403 	bic.w	r4, r4, #3
 8007fec:	42a0      	cmp	r0, r4
 8007fee:	d0f8      	beq.n	8007fe2 <sbrk_aligned+0x22>
 8007ff0:	1a21      	subs	r1, r4, r0
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f000 fe42 	bl	8008c7c <_sbrk_r>
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d1f2      	bne.n	8007fe2 <sbrk_aligned+0x22>
 8007ffc:	e7ef      	b.n	8007fde <sbrk_aligned+0x1e>
 8007ffe:	bf00      	nop
 8008000:	2000172c 	.word	0x2000172c

08008004 <_malloc_r>:
 8008004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008008:	1ccd      	adds	r5, r1, #3
 800800a:	f025 0503 	bic.w	r5, r5, #3
 800800e:	3508      	adds	r5, #8
 8008010:	2d0c      	cmp	r5, #12
 8008012:	bf38      	it	cc
 8008014:	250c      	movcc	r5, #12
 8008016:	2d00      	cmp	r5, #0
 8008018:	4606      	mov	r6, r0
 800801a:	db01      	blt.n	8008020 <_malloc_r+0x1c>
 800801c:	42a9      	cmp	r1, r5
 800801e:	d904      	bls.n	800802a <_malloc_r+0x26>
 8008020:	230c      	movs	r3, #12
 8008022:	6033      	str	r3, [r6, #0]
 8008024:	2000      	movs	r0, #0
 8008026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800802a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008100 <_malloc_r+0xfc>
 800802e:	f000 f869 	bl	8008104 <__malloc_lock>
 8008032:	f8d8 3000 	ldr.w	r3, [r8]
 8008036:	461c      	mov	r4, r3
 8008038:	bb44      	cbnz	r4, 800808c <_malloc_r+0x88>
 800803a:	4629      	mov	r1, r5
 800803c:	4630      	mov	r0, r6
 800803e:	f7ff ffbf 	bl	8007fc0 <sbrk_aligned>
 8008042:	1c43      	adds	r3, r0, #1
 8008044:	4604      	mov	r4, r0
 8008046:	d158      	bne.n	80080fa <_malloc_r+0xf6>
 8008048:	f8d8 4000 	ldr.w	r4, [r8]
 800804c:	4627      	mov	r7, r4
 800804e:	2f00      	cmp	r7, #0
 8008050:	d143      	bne.n	80080da <_malloc_r+0xd6>
 8008052:	2c00      	cmp	r4, #0
 8008054:	d04b      	beq.n	80080ee <_malloc_r+0xea>
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	4639      	mov	r1, r7
 800805a:	4630      	mov	r0, r6
 800805c:	eb04 0903 	add.w	r9, r4, r3
 8008060:	f000 fe0c 	bl	8008c7c <_sbrk_r>
 8008064:	4581      	cmp	r9, r0
 8008066:	d142      	bne.n	80080ee <_malloc_r+0xea>
 8008068:	6821      	ldr	r1, [r4, #0]
 800806a:	4630      	mov	r0, r6
 800806c:	1a6d      	subs	r5, r5, r1
 800806e:	4629      	mov	r1, r5
 8008070:	f7ff ffa6 	bl	8007fc0 <sbrk_aligned>
 8008074:	3001      	adds	r0, #1
 8008076:	d03a      	beq.n	80080ee <_malloc_r+0xea>
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	442b      	add	r3, r5
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	f8d8 3000 	ldr.w	r3, [r8]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	bb62      	cbnz	r2, 80080e0 <_malloc_r+0xdc>
 8008086:	f8c8 7000 	str.w	r7, [r8]
 800808a:	e00f      	b.n	80080ac <_malloc_r+0xa8>
 800808c:	6822      	ldr	r2, [r4, #0]
 800808e:	1b52      	subs	r2, r2, r5
 8008090:	d420      	bmi.n	80080d4 <_malloc_r+0xd0>
 8008092:	2a0b      	cmp	r2, #11
 8008094:	d917      	bls.n	80080c6 <_malloc_r+0xc2>
 8008096:	1961      	adds	r1, r4, r5
 8008098:	42a3      	cmp	r3, r4
 800809a:	6025      	str	r5, [r4, #0]
 800809c:	bf18      	it	ne
 800809e:	6059      	strne	r1, [r3, #4]
 80080a0:	6863      	ldr	r3, [r4, #4]
 80080a2:	bf08      	it	eq
 80080a4:	f8c8 1000 	streq.w	r1, [r8]
 80080a8:	5162      	str	r2, [r4, r5]
 80080aa:	604b      	str	r3, [r1, #4]
 80080ac:	4630      	mov	r0, r6
 80080ae:	f000 f82f 	bl	8008110 <__malloc_unlock>
 80080b2:	f104 000b 	add.w	r0, r4, #11
 80080b6:	1d23      	adds	r3, r4, #4
 80080b8:	f020 0007 	bic.w	r0, r0, #7
 80080bc:	1ac2      	subs	r2, r0, r3
 80080be:	bf1c      	itt	ne
 80080c0:	1a1b      	subne	r3, r3, r0
 80080c2:	50a3      	strne	r3, [r4, r2]
 80080c4:	e7af      	b.n	8008026 <_malloc_r+0x22>
 80080c6:	6862      	ldr	r2, [r4, #4]
 80080c8:	42a3      	cmp	r3, r4
 80080ca:	bf0c      	ite	eq
 80080cc:	f8c8 2000 	streq.w	r2, [r8]
 80080d0:	605a      	strne	r2, [r3, #4]
 80080d2:	e7eb      	b.n	80080ac <_malloc_r+0xa8>
 80080d4:	4623      	mov	r3, r4
 80080d6:	6864      	ldr	r4, [r4, #4]
 80080d8:	e7ae      	b.n	8008038 <_malloc_r+0x34>
 80080da:	463c      	mov	r4, r7
 80080dc:	687f      	ldr	r7, [r7, #4]
 80080de:	e7b6      	b.n	800804e <_malloc_r+0x4a>
 80080e0:	461a      	mov	r2, r3
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	d1fb      	bne.n	80080e0 <_malloc_r+0xdc>
 80080e8:	2300      	movs	r3, #0
 80080ea:	6053      	str	r3, [r2, #4]
 80080ec:	e7de      	b.n	80080ac <_malloc_r+0xa8>
 80080ee:	230c      	movs	r3, #12
 80080f0:	4630      	mov	r0, r6
 80080f2:	6033      	str	r3, [r6, #0]
 80080f4:	f000 f80c 	bl	8008110 <__malloc_unlock>
 80080f8:	e794      	b.n	8008024 <_malloc_r+0x20>
 80080fa:	6005      	str	r5, [r0, #0]
 80080fc:	e7d6      	b.n	80080ac <_malloc_r+0xa8>
 80080fe:	bf00      	nop
 8008100:	20001730 	.word	0x20001730

08008104 <__malloc_lock>:
 8008104:	4801      	ldr	r0, [pc, #4]	@ (800810c <__malloc_lock+0x8>)
 8008106:	f000 be06 	b.w	8008d16 <__retarget_lock_acquire_recursive>
 800810a:	bf00      	nop
 800810c:	20001874 	.word	0x20001874

08008110 <__malloc_unlock>:
 8008110:	4801      	ldr	r0, [pc, #4]	@ (8008118 <__malloc_unlock+0x8>)
 8008112:	f000 be01 	b.w	8008d18 <__retarget_lock_release_recursive>
 8008116:	bf00      	nop
 8008118:	20001874 	.word	0x20001874

0800811c <__cvt>:
 800811c:	2b00      	cmp	r3, #0
 800811e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008122:	461d      	mov	r5, r3
 8008124:	bfbb      	ittet	lt
 8008126:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800812a:	461d      	movlt	r5, r3
 800812c:	2300      	movge	r3, #0
 800812e:	232d      	movlt	r3, #45	@ 0x2d
 8008130:	b088      	sub	sp, #32
 8008132:	4614      	mov	r4, r2
 8008134:	bfb8      	it	lt
 8008136:	4614      	movlt	r4, r2
 8008138:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800813a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800813c:	7013      	strb	r3, [r2, #0]
 800813e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008140:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008144:	f023 0820 	bic.w	r8, r3, #32
 8008148:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800814c:	d005      	beq.n	800815a <__cvt+0x3e>
 800814e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008152:	d100      	bne.n	8008156 <__cvt+0x3a>
 8008154:	3601      	adds	r6, #1
 8008156:	2302      	movs	r3, #2
 8008158:	e000      	b.n	800815c <__cvt+0x40>
 800815a:	2303      	movs	r3, #3
 800815c:	aa07      	add	r2, sp, #28
 800815e:	9204      	str	r2, [sp, #16]
 8008160:	aa06      	add	r2, sp, #24
 8008162:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008166:	e9cd 3600 	strd	r3, r6, [sp]
 800816a:	4622      	mov	r2, r4
 800816c:	462b      	mov	r3, r5
 800816e:	f000 fe73 	bl	8008e58 <_dtoa_r>
 8008172:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008176:	4607      	mov	r7, r0
 8008178:	d119      	bne.n	80081ae <__cvt+0x92>
 800817a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800817c:	07db      	lsls	r3, r3, #31
 800817e:	d50e      	bpl.n	800819e <__cvt+0x82>
 8008180:	eb00 0906 	add.w	r9, r0, r6
 8008184:	2200      	movs	r2, #0
 8008186:	2300      	movs	r3, #0
 8008188:	4620      	mov	r0, r4
 800818a:	4629      	mov	r1, r5
 800818c:	f7f8 fc0c 	bl	80009a8 <__aeabi_dcmpeq>
 8008190:	b108      	cbz	r0, 8008196 <__cvt+0x7a>
 8008192:	f8cd 901c 	str.w	r9, [sp, #28]
 8008196:	2230      	movs	r2, #48	@ 0x30
 8008198:	9b07      	ldr	r3, [sp, #28]
 800819a:	454b      	cmp	r3, r9
 800819c:	d31e      	bcc.n	80081dc <__cvt+0xc0>
 800819e:	4638      	mov	r0, r7
 80081a0:	9b07      	ldr	r3, [sp, #28]
 80081a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80081a4:	1bdb      	subs	r3, r3, r7
 80081a6:	6013      	str	r3, [r2, #0]
 80081a8:	b008      	add	sp, #32
 80081aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081b2:	eb00 0906 	add.w	r9, r0, r6
 80081b6:	d1e5      	bne.n	8008184 <__cvt+0x68>
 80081b8:	7803      	ldrb	r3, [r0, #0]
 80081ba:	2b30      	cmp	r3, #48	@ 0x30
 80081bc:	d10a      	bne.n	80081d4 <__cvt+0xb8>
 80081be:	2200      	movs	r2, #0
 80081c0:	2300      	movs	r3, #0
 80081c2:	4620      	mov	r0, r4
 80081c4:	4629      	mov	r1, r5
 80081c6:	f7f8 fbef 	bl	80009a8 <__aeabi_dcmpeq>
 80081ca:	b918      	cbnz	r0, 80081d4 <__cvt+0xb8>
 80081cc:	f1c6 0601 	rsb	r6, r6, #1
 80081d0:	f8ca 6000 	str.w	r6, [sl]
 80081d4:	f8da 3000 	ldr.w	r3, [sl]
 80081d8:	4499      	add	r9, r3
 80081da:	e7d3      	b.n	8008184 <__cvt+0x68>
 80081dc:	1c59      	adds	r1, r3, #1
 80081de:	9107      	str	r1, [sp, #28]
 80081e0:	701a      	strb	r2, [r3, #0]
 80081e2:	e7d9      	b.n	8008198 <__cvt+0x7c>

080081e4 <__exponent>:
 80081e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081e6:	2900      	cmp	r1, #0
 80081e8:	bfb6      	itet	lt
 80081ea:	232d      	movlt	r3, #45	@ 0x2d
 80081ec:	232b      	movge	r3, #43	@ 0x2b
 80081ee:	4249      	neglt	r1, r1
 80081f0:	2909      	cmp	r1, #9
 80081f2:	7002      	strb	r2, [r0, #0]
 80081f4:	7043      	strb	r3, [r0, #1]
 80081f6:	dd29      	ble.n	800824c <__exponent+0x68>
 80081f8:	f10d 0307 	add.w	r3, sp, #7
 80081fc:	461d      	mov	r5, r3
 80081fe:	270a      	movs	r7, #10
 8008200:	fbb1 f6f7 	udiv	r6, r1, r7
 8008204:	461a      	mov	r2, r3
 8008206:	fb07 1416 	mls	r4, r7, r6, r1
 800820a:	3430      	adds	r4, #48	@ 0x30
 800820c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008210:	460c      	mov	r4, r1
 8008212:	2c63      	cmp	r4, #99	@ 0x63
 8008214:	4631      	mov	r1, r6
 8008216:	f103 33ff 	add.w	r3, r3, #4294967295
 800821a:	dcf1      	bgt.n	8008200 <__exponent+0x1c>
 800821c:	3130      	adds	r1, #48	@ 0x30
 800821e:	1e94      	subs	r4, r2, #2
 8008220:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008224:	4623      	mov	r3, r4
 8008226:	1c41      	adds	r1, r0, #1
 8008228:	42ab      	cmp	r3, r5
 800822a:	d30a      	bcc.n	8008242 <__exponent+0x5e>
 800822c:	f10d 0309 	add.w	r3, sp, #9
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	42ac      	cmp	r4, r5
 8008234:	bf88      	it	hi
 8008236:	2300      	movhi	r3, #0
 8008238:	3302      	adds	r3, #2
 800823a:	4403      	add	r3, r0
 800823c:	1a18      	subs	r0, r3, r0
 800823e:	b003      	add	sp, #12
 8008240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008242:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008246:	f801 6f01 	strb.w	r6, [r1, #1]!
 800824a:	e7ed      	b.n	8008228 <__exponent+0x44>
 800824c:	2330      	movs	r3, #48	@ 0x30
 800824e:	3130      	adds	r1, #48	@ 0x30
 8008250:	7083      	strb	r3, [r0, #2]
 8008252:	70c1      	strb	r1, [r0, #3]
 8008254:	1d03      	adds	r3, r0, #4
 8008256:	e7f1      	b.n	800823c <__exponent+0x58>

08008258 <_printf_float>:
 8008258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825c:	b091      	sub	sp, #68	@ 0x44
 800825e:	460c      	mov	r4, r1
 8008260:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008264:	4616      	mov	r6, r2
 8008266:	461f      	mov	r7, r3
 8008268:	4605      	mov	r5, r0
 800826a:	f000 fccf 	bl	8008c0c <_localeconv_r>
 800826e:	6803      	ldr	r3, [r0, #0]
 8008270:	4618      	mov	r0, r3
 8008272:	9308      	str	r3, [sp, #32]
 8008274:	f7f7 ff6c 	bl	8000150 <strlen>
 8008278:	2300      	movs	r3, #0
 800827a:	930e      	str	r3, [sp, #56]	@ 0x38
 800827c:	f8d8 3000 	ldr.w	r3, [r8]
 8008280:	9009      	str	r0, [sp, #36]	@ 0x24
 8008282:	3307      	adds	r3, #7
 8008284:	f023 0307 	bic.w	r3, r3, #7
 8008288:	f103 0208 	add.w	r2, r3, #8
 800828c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008290:	f8d4 b000 	ldr.w	fp, [r4]
 8008294:	f8c8 2000 	str.w	r2, [r8]
 8008298:	e9d3 8900 	ldrd	r8, r9, [r3]
 800829c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80082a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082a2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80082a6:	f04f 32ff 	mov.w	r2, #4294967295
 80082aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80082b2:	4b9c      	ldr	r3, [pc, #624]	@ (8008524 <_printf_float+0x2cc>)
 80082b4:	f7f8 fbaa 	bl	8000a0c <__aeabi_dcmpun>
 80082b8:	bb70      	cbnz	r0, 8008318 <_printf_float+0xc0>
 80082ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082be:	f04f 32ff 	mov.w	r2, #4294967295
 80082c2:	4b98      	ldr	r3, [pc, #608]	@ (8008524 <_printf_float+0x2cc>)
 80082c4:	f7f8 fb84 	bl	80009d0 <__aeabi_dcmple>
 80082c8:	bb30      	cbnz	r0, 8008318 <_printf_float+0xc0>
 80082ca:	2200      	movs	r2, #0
 80082cc:	2300      	movs	r3, #0
 80082ce:	4640      	mov	r0, r8
 80082d0:	4649      	mov	r1, r9
 80082d2:	f7f8 fb73 	bl	80009bc <__aeabi_dcmplt>
 80082d6:	b110      	cbz	r0, 80082de <_printf_float+0x86>
 80082d8:	232d      	movs	r3, #45	@ 0x2d
 80082da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082de:	4a92      	ldr	r2, [pc, #584]	@ (8008528 <_printf_float+0x2d0>)
 80082e0:	4b92      	ldr	r3, [pc, #584]	@ (800852c <_printf_float+0x2d4>)
 80082e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80082e6:	bf94      	ite	ls
 80082e8:	4690      	movls	r8, r2
 80082ea:	4698      	movhi	r8, r3
 80082ec:	2303      	movs	r3, #3
 80082ee:	f04f 0900 	mov.w	r9, #0
 80082f2:	6123      	str	r3, [r4, #16]
 80082f4:	f02b 0304 	bic.w	r3, fp, #4
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	4633      	mov	r3, r6
 80082fc:	4621      	mov	r1, r4
 80082fe:	4628      	mov	r0, r5
 8008300:	9700      	str	r7, [sp, #0]
 8008302:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008304:	f000 f9d4 	bl	80086b0 <_printf_common>
 8008308:	3001      	adds	r0, #1
 800830a:	f040 8090 	bne.w	800842e <_printf_float+0x1d6>
 800830e:	f04f 30ff 	mov.w	r0, #4294967295
 8008312:	b011      	add	sp, #68	@ 0x44
 8008314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008318:	4642      	mov	r2, r8
 800831a:	464b      	mov	r3, r9
 800831c:	4640      	mov	r0, r8
 800831e:	4649      	mov	r1, r9
 8008320:	f7f8 fb74 	bl	8000a0c <__aeabi_dcmpun>
 8008324:	b148      	cbz	r0, 800833a <_printf_float+0xe2>
 8008326:	464b      	mov	r3, r9
 8008328:	2b00      	cmp	r3, #0
 800832a:	bfb8      	it	lt
 800832c:	232d      	movlt	r3, #45	@ 0x2d
 800832e:	4a80      	ldr	r2, [pc, #512]	@ (8008530 <_printf_float+0x2d8>)
 8008330:	bfb8      	it	lt
 8008332:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008336:	4b7f      	ldr	r3, [pc, #508]	@ (8008534 <_printf_float+0x2dc>)
 8008338:	e7d3      	b.n	80082e2 <_printf_float+0x8a>
 800833a:	6863      	ldr	r3, [r4, #4]
 800833c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	d13f      	bne.n	80083c4 <_printf_float+0x16c>
 8008344:	2306      	movs	r3, #6
 8008346:	6063      	str	r3, [r4, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800834e:	6023      	str	r3, [r4, #0]
 8008350:	9206      	str	r2, [sp, #24]
 8008352:	aa0e      	add	r2, sp, #56	@ 0x38
 8008354:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008358:	aa0d      	add	r2, sp, #52	@ 0x34
 800835a:	9203      	str	r2, [sp, #12]
 800835c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008360:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008364:	6863      	ldr	r3, [r4, #4]
 8008366:	4642      	mov	r2, r8
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	4628      	mov	r0, r5
 800836c:	464b      	mov	r3, r9
 800836e:	910a      	str	r1, [sp, #40]	@ 0x28
 8008370:	f7ff fed4 	bl	800811c <__cvt>
 8008374:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008376:	4680      	mov	r8, r0
 8008378:	2947      	cmp	r1, #71	@ 0x47
 800837a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800837c:	d128      	bne.n	80083d0 <_printf_float+0x178>
 800837e:	1cc8      	adds	r0, r1, #3
 8008380:	db02      	blt.n	8008388 <_printf_float+0x130>
 8008382:	6863      	ldr	r3, [r4, #4]
 8008384:	4299      	cmp	r1, r3
 8008386:	dd40      	ble.n	800840a <_printf_float+0x1b2>
 8008388:	f1aa 0a02 	sub.w	sl, sl, #2
 800838c:	fa5f fa8a 	uxtb.w	sl, sl
 8008390:	4652      	mov	r2, sl
 8008392:	3901      	subs	r1, #1
 8008394:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008398:	910d      	str	r1, [sp, #52]	@ 0x34
 800839a:	f7ff ff23 	bl	80081e4 <__exponent>
 800839e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083a0:	4681      	mov	r9, r0
 80083a2:	1813      	adds	r3, r2, r0
 80083a4:	2a01      	cmp	r2, #1
 80083a6:	6123      	str	r3, [r4, #16]
 80083a8:	dc02      	bgt.n	80083b0 <_printf_float+0x158>
 80083aa:	6822      	ldr	r2, [r4, #0]
 80083ac:	07d2      	lsls	r2, r2, #31
 80083ae:	d501      	bpl.n	80083b4 <_printf_float+0x15c>
 80083b0:	3301      	adds	r3, #1
 80083b2:	6123      	str	r3, [r4, #16]
 80083b4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d09e      	beq.n	80082fa <_printf_float+0xa2>
 80083bc:	232d      	movs	r3, #45	@ 0x2d
 80083be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083c2:	e79a      	b.n	80082fa <_printf_float+0xa2>
 80083c4:	2947      	cmp	r1, #71	@ 0x47
 80083c6:	d1bf      	bne.n	8008348 <_printf_float+0xf0>
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1bd      	bne.n	8008348 <_printf_float+0xf0>
 80083cc:	2301      	movs	r3, #1
 80083ce:	e7ba      	b.n	8008346 <_printf_float+0xee>
 80083d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80083d4:	d9dc      	bls.n	8008390 <_printf_float+0x138>
 80083d6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80083da:	d118      	bne.n	800840e <_printf_float+0x1b6>
 80083dc:	2900      	cmp	r1, #0
 80083de:	6863      	ldr	r3, [r4, #4]
 80083e0:	dd0b      	ble.n	80083fa <_printf_float+0x1a2>
 80083e2:	6121      	str	r1, [r4, #16]
 80083e4:	b913      	cbnz	r3, 80083ec <_printf_float+0x194>
 80083e6:	6822      	ldr	r2, [r4, #0]
 80083e8:	07d0      	lsls	r0, r2, #31
 80083ea:	d502      	bpl.n	80083f2 <_printf_float+0x19a>
 80083ec:	3301      	adds	r3, #1
 80083ee:	440b      	add	r3, r1
 80083f0:	6123      	str	r3, [r4, #16]
 80083f2:	f04f 0900 	mov.w	r9, #0
 80083f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80083f8:	e7dc      	b.n	80083b4 <_printf_float+0x15c>
 80083fa:	b913      	cbnz	r3, 8008402 <_printf_float+0x1aa>
 80083fc:	6822      	ldr	r2, [r4, #0]
 80083fe:	07d2      	lsls	r2, r2, #31
 8008400:	d501      	bpl.n	8008406 <_printf_float+0x1ae>
 8008402:	3302      	adds	r3, #2
 8008404:	e7f4      	b.n	80083f0 <_printf_float+0x198>
 8008406:	2301      	movs	r3, #1
 8008408:	e7f2      	b.n	80083f0 <_printf_float+0x198>
 800840a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800840e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008410:	4299      	cmp	r1, r3
 8008412:	db05      	blt.n	8008420 <_printf_float+0x1c8>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	6121      	str	r1, [r4, #16]
 8008418:	07d8      	lsls	r0, r3, #31
 800841a:	d5ea      	bpl.n	80083f2 <_printf_float+0x19a>
 800841c:	1c4b      	adds	r3, r1, #1
 800841e:	e7e7      	b.n	80083f0 <_printf_float+0x198>
 8008420:	2900      	cmp	r1, #0
 8008422:	bfcc      	ite	gt
 8008424:	2201      	movgt	r2, #1
 8008426:	f1c1 0202 	rsble	r2, r1, #2
 800842a:	4413      	add	r3, r2
 800842c:	e7e0      	b.n	80083f0 <_printf_float+0x198>
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	055a      	lsls	r2, r3, #21
 8008432:	d407      	bmi.n	8008444 <_printf_float+0x1ec>
 8008434:	6923      	ldr	r3, [r4, #16]
 8008436:	4642      	mov	r2, r8
 8008438:	4631      	mov	r1, r6
 800843a:	4628      	mov	r0, r5
 800843c:	47b8      	blx	r7
 800843e:	3001      	adds	r0, #1
 8008440:	d12b      	bne.n	800849a <_printf_float+0x242>
 8008442:	e764      	b.n	800830e <_printf_float+0xb6>
 8008444:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008448:	f240 80dc 	bls.w	8008604 <_printf_float+0x3ac>
 800844c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008450:	2200      	movs	r2, #0
 8008452:	2300      	movs	r3, #0
 8008454:	f7f8 faa8 	bl	80009a8 <__aeabi_dcmpeq>
 8008458:	2800      	cmp	r0, #0
 800845a:	d033      	beq.n	80084c4 <_printf_float+0x26c>
 800845c:	2301      	movs	r3, #1
 800845e:	4631      	mov	r1, r6
 8008460:	4628      	mov	r0, r5
 8008462:	4a35      	ldr	r2, [pc, #212]	@ (8008538 <_printf_float+0x2e0>)
 8008464:	47b8      	blx	r7
 8008466:	3001      	adds	r0, #1
 8008468:	f43f af51 	beq.w	800830e <_printf_float+0xb6>
 800846c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008470:	4543      	cmp	r3, r8
 8008472:	db02      	blt.n	800847a <_printf_float+0x222>
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	07d8      	lsls	r0, r3, #31
 8008478:	d50f      	bpl.n	800849a <_printf_float+0x242>
 800847a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800847e:	4631      	mov	r1, r6
 8008480:	4628      	mov	r0, r5
 8008482:	47b8      	blx	r7
 8008484:	3001      	adds	r0, #1
 8008486:	f43f af42 	beq.w	800830e <_printf_float+0xb6>
 800848a:	f04f 0900 	mov.w	r9, #0
 800848e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008492:	f104 0a1a 	add.w	sl, r4, #26
 8008496:	45c8      	cmp	r8, r9
 8008498:	dc09      	bgt.n	80084ae <_printf_float+0x256>
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	079b      	lsls	r3, r3, #30
 800849e:	f100 8102 	bmi.w	80086a6 <_printf_float+0x44e>
 80084a2:	68e0      	ldr	r0, [r4, #12]
 80084a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084a6:	4298      	cmp	r0, r3
 80084a8:	bfb8      	it	lt
 80084aa:	4618      	movlt	r0, r3
 80084ac:	e731      	b.n	8008312 <_printf_float+0xba>
 80084ae:	2301      	movs	r3, #1
 80084b0:	4652      	mov	r2, sl
 80084b2:	4631      	mov	r1, r6
 80084b4:	4628      	mov	r0, r5
 80084b6:	47b8      	blx	r7
 80084b8:	3001      	adds	r0, #1
 80084ba:	f43f af28 	beq.w	800830e <_printf_float+0xb6>
 80084be:	f109 0901 	add.w	r9, r9, #1
 80084c2:	e7e8      	b.n	8008496 <_printf_float+0x23e>
 80084c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	dc38      	bgt.n	800853c <_printf_float+0x2e4>
 80084ca:	2301      	movs	r3, #1
 80084cc:	4631      	mov	r1, r6
 80084ce:	4628      	mov	r0, r5
 80084d0:	4a19      	ldr	r2, [pc, #100]	@ (8008538 <_printf_float+0x2e0>)
 80084d2:	47b8      	blx	r7
 80084d4:	3001      	adds	r0, #1
 80084d6:	f43f af1a 	beq.w	800830e <_printf_float+0xb6>
 80084da:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80084de:	ea59 0303 	orrs.w	r3, r9, r3
 80084e2:	d102      	bne.n	80084ea <_printf_float+0x292>
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	07d9      	lsls	r1, r3, #31
 80084e8:	d5d7      	bpl.n	800849a <_printf_float+0x242>
 80084ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80084ee:	4631      	mov	r1, r6
 80084f0:	4628      	mov	r0, r5
 80084f2:	47b8      	blx	r7
 80084f4:	3001      	adds	r0, #1
 80084f6:	f43f af0a 	beq.w	800830e <_printf_float+0xb6>
 80084fa:	f04f 0a00 	mov.w	sl, #0
 80084fe:	f104 0b1a 	add.w	fp, r4, #26
 8008502:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008504:	425b      	negs	r3, r3
 8008506:	4553      	cmp	r3, sl
 8008508:	dc01      	bgt.n	800850e <_printf_float+0x2b6>
 800850a:	464b      	mov	r3, r9
 800850c:	e793      	b.n	8008436 <_printf_float+0x1de>
 800850e:	2301      	movs	r3, #1
 8008510:	465a      	mov	r2, fp
 8008512:	4631      	mov	r1, r6
 8008514:	4628      	mov	r0, r5
 8008516:	47b8      	blx	r7
 8008518:	3001      	adds	r0, #1
 800851a:	f43f aef8 	beq.w	800830e <_printf_float+0xb6>
 800851e:	f10a 0a01 	add.w	sl, sl, #1
 8008522:	e7ee      	b.n	8008502 <_printf_float+0x2aa>
 8008524:	7fefffff 	.word	0x7fefffff
 8008528:	0800aa12 	.word	0x0800aa12
 800852c:	0800aa16 	.word	0x0800aa16
 8008530:	0800aa1a 	.word	0x0800aa1a
 8008534:	0800aa1e 	.word	0x0800aa1e
 8008538:	0800aa22 	.word	0x0800aa22
 800853c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800853e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008542:	4553      	cmp	r3, sl
 8008544:	bfa8      	it	ge
 8008546:	4653      	movge	r3, sl
 8008548:	2b00      	cmp	r3, #0
 800854a:	4699      	mov	r9, r3
 800854c:	dc36      	bgt.n	80085bc <_printf_float+0x364>
 800854e:	f04f 0b00 	mov.w	fp, #0
 8008552:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008556:	f104 021a 	add.w	r2, r4, #26
 800855a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800855c:	930a      	str	r3, [sp, #40]	@ 0x28
 800855e:	eba3 0309 	sub.w	r3, r3, r9
 8008562:	455b      	cmp	r3, fp
 8008564:	dc31      	bgt.n	80085ca <_printf_float+0x372>
 8008566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008568:	459a      	cmp	sl, r3
 800856a:	dc3a      	bgt.n	80085e2 <_printf_float+0x38a>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	07da      	lsls	r2, r3, #31
 8008570:	d437      	bmi.n	80085e2 <_printf_float+0x38a>
 8008572:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008574:	ebaa 0903 	sub.w	r9, sl, r3
 8008578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800857a:	ebaa 0303 	sub.w	r3, sl, r3
 800857e:	4599      	cmp	r9, r3
 8008580:	bfa8      	it	ge
 8008582:	4699      	movge	r9, r3
 8008584:	f1b9 0f00 	cmp.w	r9, #0
 8008588:	dc33      	bgt.n	80085f2 <_printf_float+0x39a>
 800858a:	f04f 0800 	mov.w	r8, #0
 800858e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008592:	f104 0b1a 	add.w	fp, r4, #26
 8008596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008598:	ebaa 0303 	sub.w	r3, sl, r3
 800859c:	eba3 0309 	sub.w	r3, r3, r9
 80085a0:	4543      	cmp	r3, r8
 80085a2:	f77f af7a 	ble.w	800849a <_printf_float+0x242>
 80085a6:	2301      	movs	r3, #1
 80085a8:	465a      	mov	r2, fp
 80085aa:	4631      	mov	r1, r6
 80085ac:	4628      	mov	r0, r5
 80085ae:	47b8      	blx	r7
 80085b0:	3001      	adds	r0, #1
 80085b2:	f43f aeac 	beq.w	800830e <_printf_float+0xb6>
 80085b6:	f108 0801 	add.w	r8, r8, #1
 80085ba:	e7ec      	b.n	8008596 <_printf_float+0x33e>
 80085bc:	4642      	mov	r2, r8
 80085be:	4631      	mov	r1, r6
 80085c0:	4628      	mov	r0, r5
 80085c2:	47b8      	blx	r7
 80085c4:	3001      	adds	r0, #1
 80085c6:	d1c2      	bne.n	800854e <_printf_float+0x2f6>
 80085c8:	e6a1      	b.n	800830e <_printf_float+0xb6>
 80085ca:	2301      	movs	r3, #1
 80085cc:	4631      	mov	r1, r6
 80085ce:	4628      	mov	r0, r5
 80085d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80085d2:	47b8      	blx	r7
 80085d4:	3001      	adds	r0, #1
 80085d6:	f43f ae9a 	beq.w	800830e <_printf_float+0xb6>
 80085da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085dc:	f10b 0b01 	add.w	fp, fp, #1
 80085e0:	e7bb      	b.n	800855a <_printf_float+0x302>
 80085e2:	4631      	mov	r1, r6
 80085e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b8      	blx	r7
 80085ec:	3001      	adds	r0, #1
 80085ee:	d1c0      	bne.n	8008572 <_printf_float+0x31a>
 80085f0:	e68d      	b.n	800830e <_printf_float+0xb6>
 80085f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085f4:	464b      	mov	r3, r9
 80085f6:	4631      	mov	r1, r6
 80085f8:	4628      	mov	r0, r5
 80085fa:	4442      	add	r2, r8
 80085fc:	47b8      	blx	r7
 80085fe:	3001      	adds	r0, #1
 8008600:	d1c3      	bne.n	800858a <_printf_float+0x332>
 8008602:	e684      	b.n	800830e <_printf_float+0xb6>
 8008604:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008608:	f1ba 0f01 	cmp.w	sl, #1
 800860c:	dc01      	bgt.n	8008612 <_printf_float+0x3ba>
 800860e:	07db      	lsls	r3, r3, #31
 8008610:	d536      	bpl.n	8008680 <_printf_float+0x428>
 8008612:	2301      	movs	r3, #1
 8008614:	4642      	mov	r2, r8
 8008616:	4631      	mov	r1, r6
 8008618:	4628      	mov	r0, r5
 800861a:	47b8      	blx	r7
 800861c:	3001      	adds	r0, #1
 800861e:	f43f ae76 	beq.w	800830e <_printf_float+0xb6>
 8008622:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008626:	4631      	mov	r1, r6
 8008628:	4628      	mov	r0, r5
 800862a:	47b8      	blx	r7
 800862c:	3001      	adds	r0, #1
 800862e:	f43f ae6e 	beq.w	800830e <_printf_float+0xb6>
 8008632:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008636:	2200      	movs	r2, #0
 8008638:	2300      	movs	r3, #0
 800863a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800863e:	f7f8 f9b3 	bl	80009a8 <__aeabi_dcmpeq>
 8008642:	b9c0      	cbnz	r0, 8008676 <_printf_float+0x41e>
 8008644:	4653      	mov	r3, sl
 8008646:	f108 0201 	add.w	r2, r8, #1
 800864a:	4631      	mov	r1, r6
 800864c:	4628      	mov	r0, r5
 800864e:	47b8      	blx	r7
 8008650:	3001      	adds	r0, #1
 8008652:	d10c      	bne.n	800866e <_printf_float+0x416>
 8008654:	e65b      	b.n	800830e <_printf_float+0xb6>
 8008656:	2301      	movs	r3, #1
 8008658:	465a      	mov	r2, fp
 800865a:	4631      	mov	r1, r6
 800865c:	4628      	mov	r0, r5
 800865e:	47b8      	blx	r7
 8008660:	3001      	adds	r0, #1
 8008662:	f43f ae54 	beq.w	800830e <_printf_float+0xb6>
 8008666:	f108 0801 	add.w	r8, r8, #1
 800866a:	45d0      	cmp	r8, sl
 800866c:	dbf3      	blt.n	8008656 <_printf_float+0x3fe>
 800866e:	464b      	mov	r3, r9
 8008670:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008674:	e6e0      	b.n	8008438 <_printf_float+0x1e0>
 8008676:	f04f 0800 	mov.w	r8, #0
 800867a:	f104 0b1a 	add.w	fp, r4, #26
 800867e:	e7f4      	b.n	800866a <_printf_float+0x412>
 8008680:	2301      	movs	r3, #1
 8008682:	4642      	mov	r2, r8
 8008684:	e7e1      	b.n	800864a <_printf_float+0x3f2>
 8008686:	2301      	movs	r3, #1
 8008688:	464a      	mov	r2, r9
 800868a:	4631      	mov	r1, r6
 800868c:	4628      	mov	r0, r5
 800868e:	47b8      	blx	r7
 8008690:	3001      	adds	r0, #1
 8008692:	f43f ae3c 	beq.w	800830e <_printf_float+0xb6>
 8008696:	f108 0801 	add.w	r8, r8, #1
 800869a:	68e3      	ldr	r3, [r4, #12]
 800869c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800869e:	1a5b      	subs	r3, r3, r1
 80086a0:	4543      	cmp	r3, r8
 80086a2:	dcf0      	bgt.n	8008686 <_printf_float+0x42e>
 80086a4:	e6fd      	b.n	80084a2 <_printf_float+0x24a>
 80086a6:	f04f 0800 	mov.w	r8, #0
 80086aa:	f104 0919 	add.w	r9, r4, #25
 80086ae:	e7f4      	b.n	800869a <_printf_float+0x442>

080086b0 <_printf_common>:
 80086b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b4:	4616      	mov	r6, r2
 80086b6:	4698      	mov	r8, r3
 80086b8:	688a      	ldr	r2, [r1, #8]
 80086ba:	690b      	ldr	r3, [r1, #16]
 80086bc:	4607      	mov	r7, r0
 80086be:	4293      	cmp	r3, r2
 80086c0:	bfb8      	it	lt
 80086c2:	4613      	movlt	r3, r2
 80086c4:	6033      	str	r3, [r6, #0]
 80086c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086ca:	460c      	mov	r4, r1
 80086cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086d0:	b10a      	cbz	r2, 80086d6 <_printf_common+0x26>
 80086d2:	3301      	adds	r3, #1
 80086d4:	6033      	str	r3, [r6, #0]
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	0699      	lsls	r1, r3, #26
 80086da:	bf42      	ittt	mi
 80086dc:	6833      	ldrmi	r3, [r6, #0]
 80086de:	3302      	addmi	r3, #2
 80086e0:	6033      	strmi	r3, [r6, #0]
 80086e2:	6825      	ldr	r5, [r4, #0]
 80086e4:	f015 0506 	ands.w	r5, r5, #6
 80086e8:	d106      	bne.n	80086f8 <_printf_common+0x48>
 80086ea:	f104 0a19 	add.w	sl, r4, #25
 80086ee:	68e3      	ldr	r3, [r4, #12]
 80086f0:	6832      	ldr	r2, [r6, #0]
 80086f2:	1a9b      	subs	r3, r3, r2
 80086f4:	42ab      	cmp	r3, r5
 80086f6:	dc2b      	bgt.n	8008750 <_printf_common+0xa0>
 80086f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086fc:	6822      	ldr	r2, [r4, #0]
 80086fe:	3b00      	subs	r3, #0
 8008700:	bf18      	it	ne
 8008702:	2301      	movne	r3, #1
 8008704:	0692      	lsls	r2, r2, #26
 8008706:	d430      	bmi.n	800876a <_printf_common+0xba>
 8008708:	4641      	mov	r1, r8
 800870a:	4638      	mov	r0, r7
 800870c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008710:	47c8      	blx	r9
 8008712:	3001      	adds	r0, #1
 8008714:	d023      	beq.n	800875e <_printf_common+0xae>
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	6922      	ldr	r2, [r4, #16]
 800871a:	f003 0306 	and.w	r3, r3, #6
 800871e:	2b04      	cmp	r3, #4
 8008720:	bf14      	ite	ne
 8008722:	2500      	movne	r5, #0
 8008724:	6833      	ldreq	r3, [r6, #0]
 8008726:	f04f 0600 	mov.w	r6, #0
 800872a:	bf08      	it	eq
 800872c:	68e5      	ldreq	r5, [r4, #12]
 800872e:	f104 041a 	add.w	r4, r4, #26
 8008732:	bf08      	it	eq
 8008734:	1aed      	subeq	r5, r5, r3
 8008736:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800873a:	bf08      	it	eq
 800873c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008740:	4293      	cmp	r3, r2
 8008742:	bfc4      	itt	gt
 8008744:	1a9b      	subgt	r3, r3, r2
 8008746:	18ed      	addgt	r5, r5, r3
 8008748:	42b5      	cmp	r5, r6
 800874a:	d11a      	bne.n	8008782 <_printf_common+0xd2>
 800874c:	2000      	movs	r0, #0
 800874e:	e008      	b.n	8008762 <_printf_common+0xb2>
 8008750:	2301      	movs	r3, #1
 8008752:	4652      	mov	r2, sl
 8008754:	4641      	mov	r1, r8
 8008756:	4638      	mov	r0, r7
 8008758:	47c8      	blx	r9
 800875a:	3001      	adds	r0, #1
 800875c:	d103      	bne.n	8008766 <_printf_common+0xb6>
 800875e:	f04f 30ff 	mov.w	r0, #4294967295
 8008762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008766:	3501      	adds	r5, #1
 8008768:	e7c1      	b.n	80086ee <_printf_common+0x3e>
 800876a:	2030      	movs	r0, #48	@ 0x30
 800876c:	18e1      	adds	r1, r4, r3
 800876e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008778:	4422      	add	r2, r4
 800877a:	3302      	adds	r3, #2
 800877c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008780:	e7c2      	b.n	8008708 <_printf_common+0x58>
 8008782:	2301      	movs	r3, #1
 8008784:	4622      	mov	r2, r4
 8008786:	4641      	mov	r1, r8
 8008788:	4638      	mov	r0, r7
 800878a:	47c8      	blx	r9
 800878c:	3001      	adds	r0, #1
 800878e:	d0e6      	beq.n	800875e <_printf_common+0xae>
 8008790:	3601      	adds	r6, #1
 8008792:	e7d9      	b.n	8008748 <_printf_common+0x98>

08008794 <_printf_i>:
 8008794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008798:	7e0f      	ldrb	r7, [r1, #24]
 800879a:	4691      	mov	r9, r2
 800879c:	2f78      	cmp	r7, #120	@ 0x78
 800879e:	4680      	mov	r8, r0
 80087a0:	460c      	mov	r4, r1
 80087a2:	469a      	mov	sl, r3
 80087a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087aa:	d807      	bhi.n	80087bc <_printf_i+0x28>
 80087ac:	2f62      	cmp	r7, #98	@ 0x62
 80087ae:	d80a      	bhi.n	80087c6 <_printf_i+0x32>
 80087b0:	2f00      	cmp	r7, #0
 80087b2:	f000 80d3 	beq.w	800895c <_printf_i+0x1c8>
 80087b6:	2f58      	cmp	r7, #88	@ 0x58
 80087b8:	f000 80ba 	beq.w	8008930 <_printf_i+0x19c>
 80087bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087c4:	e03a      	b.n	800883c <_printf_i+0xa8>
 80087c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087ca:	2b15      	cmp	r3, #21
 80087cc:	d8f6      	bhi.n	80087bc <_printf_i+0x28>
 80087ce:	a101      	add	r1, pc, #4	@ (adr r1, 80087d4 <_printf_i+0x40>)
 80087d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087d4:	0800882d 	.word	0x0800882d
 80087d8:	08008841 	.word	0x08008841
 80087dc:	080087bd 	.word	0x080087bd
 80087e0:	080087bd 	.word	0x080087bd
 80087e4:	080087bd 	.word	0x080087bd
 80087e8:	080087bd 	.word	0x080087bd
 80087ec:	08008841 	.word	0x08008841
 80087f0:	080087bd 	.word	0x080087bd
 80087f4:	080087bd 	.word	0x080087bd
 80087f8:	080087bd 	.word	0x080087bd
 80087fc:	080087bd 	.word	0x080087bd
 8008800:	08008943 	.word	0x08008943
 8008804:	0800886b 	.word	0x0800886b
 8008808:	080088fd 	.word	0x080088fd
 800880c:	080087bd 	.word	0x080087bd
 8008810:	080087bd 	.word	0x080087bd
 8008814:	08008965 	.word	0x08008965
 8008818:	080087bd 	.word	0x080087bd
 800881c:	0800886b 	.word	0x0800886b
 8008820:	080087bd 	.word	0x080087bd
 8008824:	080087bd 	.word	0x080087bd
 8008828:	08008905 	.word	0x08008905
 800882c:	6833      	ldr	r3, [r6, #0]
 800882e:	1d1a      	adds	r2, r3, #4
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6032      	str	r2, [r6, #0]
 8008834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800883c:	2301      	movs	r3, #1
 800883e:	e09e      	b.n	800897e <_printf_i+0x1ea>
 8008840:	6833      	ldr	r3, [r6, #0]
 8008842:	6820      	ldr	r0, [r4, #0]
 8008844:	1d19      	adds	r1, r3, #4
 8008846:	6031      	str	r1, [r6, #0]
 8008848:	0606      	lsls	r6, r0, #24
 800884a:	d501      	bpl.n	8008850 <_printf_i+0xbc>
 800884c:	681d      	ldr	r5, [r3, #0]
 800884e:	e003      	b.n	8008858 <_printf_i+0xc4>
 8008850:	0645      	lsls	r5, r0, #25
 8008852:	d5fb      	bpl.n	800884c <_printf_i+0xb8>
 8008854:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008858:	2d00      	cmp	r5, #0
 800885a:	da03      	bge.n	8008864 <_printf_i+0xd0>
 800885c:	232d      	movs	r3, #45	@ 0x2d
 800885e:	426d      	negs	r5, r5
 8008860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008864:	230a      	movs	r3, #10
 8008866:	4859      	ldr	r0, [pc, #356]	@ (80089cc <_printf_i+0x238>)
 8008868:	e011      	b.n	800888e <_printf_i+0xfa>
 800886a:	6821      	ldr	r1, [r4, #0]
 800886c:	6833      	ldr	r3, [r6, #0]
 800886e:	0608      	lsls	r0, r1, #24
 8008870:	f853 5b04 	ldr.w	r5, [r3], #4
 8008874:	d402      	bmi.n	800887c <_printf_i+0xe8>
 8008876:	0649      	lsls	r1, r1, #25
 8008878:	bf48      	it	mi
 800887a:	b2ad      	uxthmi	r5, r5
 800887c:	2f6f      	cmp	r7, #111	@ 0x6f
 800887e:	6033      	str	r3, [r6, #0]
 8008880:	bf14      	ite	ne
 8008882:	230a      	movne	r3, #10
 8008884:	2308      	moveq	r3, #8
 8008886:	4851      	ldr	r0, [pc, #324]	@ (80089cc <_printf_i+0x238>)
 8008888:	2100      	movs	r1, #0
 800888a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800888e:	6866      	ldr	r6, [r4, #4]
 8008890:	2e00      	cmp	r6, #0
 8008892:	bfa8      	it	ge
 8008894:	6821      	ldrge	r1, [r4, #0]
 8008896:	60a6      	str	r6, [r4, #8]
 8008898:	bfa4      	itt	ge
 800889a:	f021 0104 	bicge.w	r1, r1, #4
 800889e:	6021      	strge	r1, [r4, #0]
 80088a0:	b90d      	cbnz	r5, 80088a6 <_printf_i+0x112>
 80088a2:	2e00      	cmp	r6, #0
 80088a4:	d04b      	beq.n	800893e <_printf_i+0x1aa>
 80088a6:	4616      	mov	r6, r2
 80088a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80088ac:	fb03 5711 	mls	r7, r3, r1, r5
 80088b0:	5dc7      	ldrb	r7, [r0, r7]
 80088b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088b6:	462f      	mov	r7, r5
 80088b8:	42bb      	cmp	r3, r7
 80088ba:	460d      	mov	r5, r1
 80088bc:	d9f4      	bls.n	80088a8 <_printf_i+0x114>
 80088be:	2b08      	cmp	r3, #8
 80088c0:	d10b      	bne.n	80088da <_printf_i+0x146>
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	07df      	lsls	r7, r3, #31
 80088c6:	d508      	bpl.n	80088da <_printf_i+0x146>
 80088c8:	6923      	ldr	r3, [r4, #16]
 80088ca:	6861      	ldr	r1, [r4, #4]
 80088cc:	4299      	cmp	r1, r3
 80088ce:	bfde      	ittt	le
 80088d0:	2330      	movle	r3, #48	@ 0x30
 80088d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088da:	1b92      	subs	r2, r2, r6
 80088dc:	6122      	str	r2, [r4, #16]
 80088de:	464b      	mov	r3, r9
 80088e0:	4621      	mov	r1, r4
 80088e2:	4640      	mov	r0, r8
 80088e4:	f8cd a000 	str.w	sl, [sp]
 80088e8:	aa03      	add	r2, sp, #12
 80088ea:	f7ff fee1 	bl	80086b0 <_printf_common>
 80088ee:	3001      	adds	r0, #1
 80088f0:	d14a      	bne.n	8008988 <_printf_i+0x1f4>
 80088f2:	f04f 30ff 	mov.w	r0, #4294967295
 80088f6:	b004      	add	sp, #16
 80088f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	f043 0320 	orr.w	r3, r3, #32
 8008902:	6023      	str	r3, [r4, #0]
 8008904:	2778      	movs	r7, #120	@ 0x78
 8008906:	4832      	ldr	r0, [pc, #200]	@ (80089d0 <_printf_i+0x23c>)
 8008908:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	6831      	ldr	r1, [r6, #0]
 8008910:	061f      	lsls	r7, r3, #24
 8008912:	f851 5b04 	ldr.w	r5, [r1], #4
 8008916:	d402      	bmi.n	800891e <_printf_i+0x18a>
 8008918:	065f      	lsls	r7, r3, #25
 800891a:	bf48      	it	mi
 800891c:	b2ad      	uxthmi	r5, r5
 800891e:	6031      	str	r1, [r6, #0]
 8008920:	07d9      	lsls	r1, r3, #31
 8008922:	bf44      	itt	mi
 8008924:	f043 0320 	orrmi.w	r3, r3, #32
 8008928:	6023      	strmi	r3, [r4, #0]
 800892a:	b11d      	cbz	r5, 8008934 <_printf_i+0x1a0>
 800892c:	2310      	movs	r3, #16
 800892e:	e7ab      	b.n	8008888 <_printf_i+0xf4>
 8008930:	4826      	ldr	r0, [pc, #152]	@ (80089cc <_printf_i+0x238>)
 8008932:	e7e9      	b.n	8008908 <_printf_i+0x174>
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	f023 0320 	bic.w	r3, r3, #32
 800893a:	6023      	str	r3, [r4, #0]
 800893c:	e7f6      	b.n	800892c <_printf_i+0x198>
 800893e:	4616      	mov	r6, r2
 8008940:	e7bd      	b.n	80088be <_printf_i+0x12a>
 8008942:	6833      	ldr	r3, [r6, #0]
 8008944:	6825      	ldr	r5, [r4, #0]
 8008946:	1d18      	adds	r0, r3, #4
 8008948:	6961      	ldr	r1, [r4, #20]
 800894a:	6030      	str	r0, [r6, #0]
 800894c:	062e      	lsls	r6, r5, #24
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	d501      	bpl.n	8008956 <_printf_i+0x1c2>
 8008952:	6019      	str	r1, [r3, #0]
 8008954:	e002      	b.n	800895c <_printf_i+0x1c8>
 8008956:	0668      	lsls	r0, r5, #25
 8008958:	d5fb      	bpl.n	8008952 <_printf_i+0x1be>
 800895a:	8019      	strh	r1, [r3, #0]
 800895c:	2300      	movs	r3, #0
 800895e:	4616      	mov	r6, r2
 8008960:	6123      	str	r3, [r4, #16]
 8008962:	e7bc      	b.n	80088de <_printf_i+0x14a>
 8008964:	6833      	ldr	r3, [r6, #0]
 8008966:	2100      	movs	r1, #0
 8008968:	1d1a      	adds	r2, r3, #4
 800896a:	6032      	str	r2, [r6, #0]
 800896c:	681e      	ldr	r6, [r3, #0]
 800896e:	6862      	ldr	r2, [r4, #4]
 8008970:	4630      	mov	r0, r6
 8008972:	f000 f9da 	bl	8008d2a <memchr>
 8008976:	b108      	cbz	r0, 800897c <_printf_i+0x1e8>
 8008978:	1b80      	subs	r0, r0, r6
 800897a:	6060      	str	r0, [r4, #4]
 800897c:	6863      	ldr	r3, [r4, #4]
 800897e:	6123      	str	r3, [r4, #16]
 8008980:	2300      	movs	r3, #0
 8008982:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008986:	e7aa      	b.n	80088de <_printf_i+0x14a>
 8008988:	4632      	mov	r2, r6
 800898a:	4649      	mov	r1, r9
 800898c:	4640      	mov	r0, r8
 800898e:	6923      	ldr	r3, [r4, #16]
 8008990:	47d0      	blx	sl
 8008992:	3001      	adds	r0, #1
 8008994:	d0ad      	beq.n	80088f2 <_printf_i+0x15e>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	079b      	lsls	r3, r3, #30
 800899a:	d413      	bmi.n	80089c4 <_printf_i+0x230>
 800899c:	68e0      	ldr	r0, [r4, #12]
 800899e:	9b03      	ldr	r3, [sp, #12]
 80089a0:	4298      	cmp	r0, r3
 80089a2:	bfb8      	it	lt
 80089a4:	4618      	movlt	r0, r3
 80089a6:	e7a6      	b.n	80088f6 <_printf_i+0x162>
 80089a8:	2301      	movs	r3, #1
 80089aa:	4632      	mov	r2, r6
 80089ac:	4649      	mov	r1, r9
 80089ae:	4640      	mov	r0, r8
 80089b0:	47d0      	blx	sl
 80089b2:	3001      	adds	r0, #1
 80089b4:	d09d      	beq.n	80088f2 <_printf_i+0x15e>
 80089b6:	3501      	adds	r5, #1
 80089b8:	68e3      	ldr	r3, [r4, #12]
 80089ba:	9903      	ldr	r1, [sp, #12]
 80089bc:	1a5b      	subs	r3, r3, r1
 80089be:	42ab      	cmp	r3, r5
 80089c0:	dcf2      	bgt.n	80089a8 <_printf_i+0x214>
 80089c2:	e7eb      	b.n	800899c <_printf_i+0x208>
 80089c4:	2500      	movs	r5, #0
 80089c6:	f104 0619 	add.w	r6, r4, #25
 80089ca:	e7f5      	b.n	80089b8 <_printf_i+0x224>
 80089cc:	0800aa24 	.word	0x0800aa24
 80089d0:	0800aa35 	.word	0x0800aa35

080089d4 <std>:
 80089d4:	2300      	movs	r3, #0
 80089d6:	b510      	push	{r4, lr}
 80089d8:	4604      	mov	r4, r0
 80089da:	e9c0 3300 	strd	r3, r3, [r0]
 80089de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089e2:	6083      	str	r3, [r0, #8]
 80089e4:	8181      	strh	r1, [r0, #12]
 80089e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80089e8:	81c2      	strh	r2, [r0, #14]
 80089ea:	6183      	str	r3, [r0, #24]
 80089ec:	4619      	mov	r1, r3
 80089ee:	2208      	movs	r2, #8
 80089f0:	305c      	adds	r0, #92	@ 0x5c
 80089f2:	f000 f8f4 	bl	8008bde <memset>
 80089f6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a2c <std+0x58>)
 80089f8:	6224      	str	r4, [r4, #32]
 80089fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80089fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008a30 <std+0x5c>)
 80089fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a00:	4b0c      	ldr	r3, [pc, #48]	@ (8008a34 <std+0x60>)
 8008a02:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a04:	4b0c      	ldr	r3, [pc, #48]	@ (8008a38 <std+0x64>)
 8008a06:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a08:	4b0c      	ldr	r3, [pc, #48]	@ (8008a3c <std+0x68>)
 8008a0a:	429c      	cmp	r4, r3
 8008a0c:	d006      	beq.n	8008a1c <std+0x48>
 8008a0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a12:	4294      	cmp	r4, r2
 8008a14:	d002      	beq.n	8008a1c <std+0x48>
 8008a16:	33d0      	adds	r3, #208	@ 0xd0
 8008a18:	429c      	cmp	r4, r3
 8008a1a:	d105      	bne.n	8008a28 <std+0x54>
 8008a1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a24:	f000 b976 	b.w	8008d14 <__retarget_lock_init_recursive>
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	bf00      	nop
 8008a2c:	08008b59 	.word	0x08008b59
 8008a30:	08008b7b 	.word	0x08008b7b
 8008a34:	08008bb3 	.word	0x08008bb3
 8008a38:	08008bd7 	.word	0x08008bd7
 8008a3c:	20001734 	.word	0x20001734

08008a40 <stdio_exit_handler>:
 8008a40:	4a02      	ldr	r2, [pc, #8]	@ (8008a4c <stdio_exit_handler+0xc>)
 8008a42:	4903      	ldr	r1, [pc, #12]	@ (8008a50 <stdio_exit_handler+0x10>)
 8008a44:	4803      	ldr	r0, [pc, #12]	@ (8008a54 <stdio_exit_handler+0x14>)
 8008a46:	f000 b869 	b.w	8008b1c <_fwalk_sglue>
 8008a4a:	bf00      	nop
 8008a4c:	20000014 	.word	0x20000014
 8008a50:	0800a279 	.word	0x0800a279
 8008a54:	20000024 	.word	0x20000024

08008a58 <cleanup_stdio>:
 8008a58:	6841      	ldr	r1, [r0, #4]
 8008a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a8c <cleanup_stdio+0x34>)
 8008a5c:	b510      	push	{r4, lr}
 8008a5e:	4299      	cmp	r1, r3
 8008a60:	4604      	mov	r4, r0
 8008a62:	d001      	beq.n	8008a68 <cleanup_stdio+0x10>
 8008a64:	f001 fc08 	bl	800a278 <_fflush_r>
 8008a68:	68a1      	ldr	r1, [r4, #8]
 8008a6a:	4b09      	ldr	r3, [pc, #36]	@ (8008a90 <cleanup_stdio+0x38>)
 8008a6c:	4299      	cmp	r1, r3
 8008a6e:	d002      	beq.n	8008a76 <cleanup_stdio+0x1e>
 8008a70:	4620      	mov	r0, r4
 8008a72:	f001 fc01 	bl	800a278 <_fflush_r>
 8008a76:	68e1      	ldr	r1, [r4, #12]
 8008a78:	4b06      	ldr	r3, [pc, #24]	@ (8008a94 <cleanup_stdio+0x3c>)
 8008a7a:	4299      	cmp	r1, r3
 8008a7c:	d004      	beq.n	8008a88 <cleanup_stdio+0x30>
 8008a7e:	4620      	mov	r0, r4
 8008a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a84:	f001 bbf8 	b.w	800a278 <_fflush_r>
 8008a88:	bd10      	pop	{r4, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20001734 	.word	0x20001734
 8008a90:	2000179c 	.word	0x2000179c
 8008a94:	20001804 	.word	0x20001804

08008a98 <global_stdio_init.part.0>:
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008ac8 <global_stdio_init.part.0+0x30>)
 8008a9c:	4c0b      	ldr	r4, [pc, #44]	@ (8008acc <global_stdio_init.part.0+0x34>)
 8008a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8008ad0 <global_stdio_init.part.0+0x38>)
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	2104      	movs	r1, #4
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f7ff ff94 	bl	80089d4 <std>
 8008aac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	2109      	movs	r1, #9
 8008ab4:	f7ff ff8e 	bl	80089d4 <std>
 8008ab8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008abc:	2202      	movs	r2, #2
 8008abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ac2:	2112      	movs	r1, #18
 8008ac4:	f7ff bf86 	b.w	80089d4 <std>
 8008ac8:	2000186c 	.word	0x2000186c
 8008acc:	20001734 	.word	0x20001734
 8008ad0:	08008a41 	.word	0x08008a41

08008ad4 <__sfp_lock_acquire>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	@ (8008adc <__sfp_lock_acquire+0x8>)
 8008ad6:	f000 b91e 	b.w	8008d16 <__retarget_lock_acquire_recursive>
 8008ada:	bf00      	nop
 8008adc:	20001875 	.word	0x20001875

08008ae0 <__sfp_lock_release>:
 8008ae0:	4801      	ldr	r0, [pc, #4]	@ (8008ae8 <__sfp_lock_release+0x8>)
 8008ae2:	f000 b919 	b.w	8008d18 <__retarget_lock_release_recursive>
 8008ae6:	bf00      	nop
 8008ae8:	20001875 	.word	0x20001875

08008aec <__sinit>:
 8008aec:	b510      	push	{r4, lr}
 8008aee:	4604      	mov	r4, r0
 8008af0:	f7ff fff0 	bl	8008ad4 <__sfp_lock_acquire>
 8008af4:	6a23      	ldr	r3, [r4, #32]
 8008af6:	b11b      	cbz	r3, 8008b00 <__sinit+0x14>
 8008af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008afc:	f7ff bff0 	b.w	8008ae0 <__sfp_lock_release>
 8008b00:	4b04      	ldr	r3, [pc, #16]	@ (8008b14 <__sinit+0x28>)
 8008b02:	6223      	str	r3, [r4, #32]
 8008b04:	4b04      	ldr	r3, [pc, #16]	@ (8008b18 <__sinit+0x2c>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1f5      	bne.n	8008af8 <__sinit+0xc>
 8008b0c:	f7ff ffc4 	bl	8008a98 <global_stdio_init.part.0>
 8008b10:	e7f2      	b.n	8008af8 <__sinit+0xc>
 8008b12:	bf00      	nop
 8008b14:	08008a59 	.word	0x08008a59
 8008b18:	2000186c 	.word	0x2000186c

08008b1c <_fwalk_sglue>:
 8008b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b20:	4607      	mov	r7, r0
 8008b22:	4688      	mov	r8, r1
 8008b24:	4614      	mov	r4, r2
 8008b26:	2600      	movs	r6, #0
 8008b28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b2c:	f1b9 0901 	subs.w	r9, r9, #1
 8008b30:	d505      	bpl.n	8008b3e <_fwalk_sglue+0x22>
 8008b32:	6824      	ldr	r4, [r4, #0]
 8008b34:	2c00      	cmp	r4, #0
 8008b36:	d1f7      	bne.n	8008b28 <_fwalk_sglue+0xc>
 8008b38:	4630      	mov	r0, r6
 8008b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b3e:	89ab      	ldrh	r3, [r5, #12]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d907      	bls.n	8008b54 <_fwalk_sglue+0x38>
 8008b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	d003      	beq.n	8008b54 <_fwalk_sglue+0x38>
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4638      	mov	r0, r7
 8008b50:	47c0      	blx	r8
 8008b52:	4306      	orrs	r6, r0
 8008b54:	3568      	adds	r5, #104	@ 0x68
 8008b56:	e7e9      	b.n	8008b2c <_fwalk_sglue+0x10>

08008b58 <__sread>:
 8008b58:	b510      	push	{r4, lr}
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b60:	f000 f87a 	bl	8008c58 <_read_r>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	bfab      	itete	ge
 8008b68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b6c:	181b      	addge	r3, r3, r0
 8008b6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b72:	bfac      	ite	ge
 8008b74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b76:	81a3      	strhlt	r3, [r4, #12]
 8008b78:	bd10      	pop	{r4, pc}

08008b7a <__swrite>:
 8008b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7e:	461f      	mov	r7, r3
 8008b80:	898b      	ldrh	r3, [r1, #12]
 8008b82:	4605      	mov	r5, r0
 8008b84:	05db      	lsls	r3, r3, #23
 8008b86:	460c      	mov	r4, r1
 8008b88:	4616      	mov	r6, r2
 8008b8a:	d505      	bpl.n	8008b98 <__swrite+0x1e>
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b94:	f000 f84e 	bl	8008c34 <_lseek_r>
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	4632      	mov	r2, r6
 8008b9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ba0:	81a3      	strh	r3, [r4, #12]
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	463b      	mov	r3, r7
 8008ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bae:	f000 b875 	b.w	8008c9c <_write_r>

08008bb2 <__sseek>:
 8008bb2:	b510      	push	{r4, lr}
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bba:	f000 f83b 	bl	8008c34 <_lseek_r>
 8008bbe:	1c43      	adds	r3, r0, #1
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	bf15      	itete	ne
 8008bc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008bc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008bca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008bce:	81a3      	strheq	r3, [r4, #12]
 8008bd0:	bf18      	it	ne
 8008bd2:	81a3      	strhne	r3, [r4, #12]
 8008bd4:	bd10      	pop	{r4, pc}

08008bd6 <__sclose>:
 8008bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bda:	f000 b81b 	b.w	8008c14 <_close_r>

08008bde <memset>:
 8008bde:	4603      	mov	r3, r0
 8008be0:	4402      	add	r2, r0
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d100      	bne.n	8008be8 <memset+0xa>
 8008be6:	4770      	bx	lr
 8008be8:	f803 1b01 	strb.w	r1, [r3], #1
 8008bec:	e7f9      	b.n	8008be2 <memset+0x4>

08008bee <strcat>:
 8008bee:	4602      	mov	r2, r0
 8008bf0:	b510      	push	{r4, lr}
 8008bf2:	7814      	ldrb	r4, [r2, #0]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	3201      	adds	r2, #1
 8008bf8:	2c00      	cmp	r4, #0
 8008bfa:	d1fa      	bne.n	8008bf2 <strcat+0x4>
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c06:	2a00      	cmp	r2, #0
 8008c08:	d1f9      	bne.n	8008bfe <strcat+0x10>
 8008c0a:	bd10      	pop	{r4, pc}

08008c0c <_localeconv_r>:
 8008c0c:	4800      	ldr	r0, [pc, #0]	@ (8008c10 <_localeconv_r+0x4>)
 8008c0e:	4770      	bx	lr
 8008c10:	20000160 	.word	0x20000160

08008c14 <_close_r>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	2300      	movs	r3, #0
 8008c18:	4d05      	ldr	r5, [pc, #20]	@ (8008c30 <_close_r+0x1c>)
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	4608      	mov	r0, r1
 8008c1e:	602b      	str	r3, [r5, #0]
 8008c20:	f7fa fab3 	bl	800318a <_close>
 8008c24:	1c43      	adds	r3, r0, #1
 8008c26:	d102      	bne.n	8008c2e <_close_r+0x1a>
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	b103      	cbz	r3, 8008c2e <_close_r+0x1a>
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	bd38      	pop	{r3, r4, r5, pc}
 8008c30:	20001870 	.word	0x20001870

08008c34 <_lseek_r>:
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	4604      	mov	r4, r0
 8008c38:	4608      	mov	r0, r1
 8008c3a:	4611      	mov	r1, r2
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	4d05      	ldr	r5, [pc, #20]	@ (8008c54 <_lseek_r+0x20>)
 8008c40:	602a      	str	r2, [r5, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	f7fa fac5 	bl	80031d2 <_lseek>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	d102      	bne.n	8008c52 <_lseek_r+0x1e>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	b103      	cbz	r3, 8008c52 <_lseek_r+0x1e>
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	20001870 	.word	0x20001870

08008c58 <_read_r>:
 8008c58:	b538      	push	{r3, r4, r5, lr}
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	4608      	mov	r0, r1
 8008c5e:	4611      	mov	r1, r2
 8008c60:	2200      	movs	r2, #0
 8008c62:	4d05      	ldr	r5, [pc, #20]	@ (8008c78 <_read_r+0x20>)
 8008c64:	602a      	str	r2, [r5, #0]
 8008c66:	461a      	mov	r2, r3
 8008c68:	f7fa fa56 	bl	8003118 <_read>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d102      	bne.n	8008c76 <_read_r+0x1e>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	b103      	cbz	r3, 8008c76 <_read_r+0x1e>
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	bd38      	pop	{r3, r4, r5, pc}
 8008c78:	20001870 	.word	0x20001870

08008c7c <_sbrk_r>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	2300      	movs	r3, #0
 8008c80:	4d05      	ldr	r5, [pc, #20]	@ (8008c98 <_sbrk_r+0x1c>)
 8008c82:	4604      	mov	r4, r0
 8008c84:	4608      	mov	r0, r1
 8008c86:	602b      	str	r3, [r5, #0]
 8008c88:	f7fa fab0 	bl	80031ec <_sbrk>
 8008c8c:	1c43      	adds	r3, r0, #1
 8008c8e:	d102      	bne.n	8008c96 <_sbrk_r+0x1a>
 8008c90:	682b      	ldr	r3, [r5, #0]
 8008c92:	b103      	cbz	r3, 8008c96 <_sbrk_r+0x1a>
 8008c94:	6023      	str	r3, [r4, #0]
 8008c96:	bd38      	pop	{r3, r4, r5, pc}
 8008c98:	20001870 	.word	0x20001870

08008c9c <_write_r>:
 8008c9c:	b538      	push	{r3, r4, r5, lr}
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	4608      	mov	r0, r1
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	4d05      	ldr	r5, [pc, #20]	@ (8008cbc <_write_r+0x20>)
 8008ca8:	602a      	str	r2, [r5, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	f7fa fa51 	bl	8003152 <_write>
 8008cb0:	1c43      	adds	r3, r0, #1
 8008cb2:	d102      	bne.n	8008cba <_write_r+0x1e>
 8008cb4:	682b      	ldr	r3, [r5, #0]
 8008cb6:	b103      	cbz	r3, 8008cba <_write_r+0x1e>
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	bd38      	pop	{r3, r4, r5, pc}
 8008cbc:	20001870 	.word	0x20001870

08008cc0 <__errno>:
 8008cc0:	4b01      	ldr	r3, [pc, #4]	@ (8008cc8 <__errno+0x8>)
 8008cc2:	6818      	ldr	r0, [r3, #0]
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	20000020 	.word	0x20000020

08008ccc <__libc_init_array>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	2600      	movs	r6, #0
 8008cd0:	4d0c      	ldr	r5, [pc, #48]	@ (8008d04 <__libc_init_array+0x38>)
 8008cd2:	4c0d      	ldr	r4, [pc, #52]	@ (8008d08 <__libc_init_array+0x3c>)
 8008cd4:	1b64      	subs	r4, r4, r5
 8008cd6:	10a4      	asrs	r4, r4, #2
 8008cd8:	42a6      	cmp	r6, r4
 8008cda:	d109      	bne.n	8008cf0 <__libc_init_array+0x24>
 8008cdc:	f001 fe08 	bl	800a8f0 <_init>
 8008ce0:	2600      	movs	r6, #0
 8008ce2:	4d0a      	ldr	r5, [pc, #40]	@ (8008d0c <__libc_init_array+0x40>)
 8008ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8008d10 <__libc_init_array+0x44>)
 8008ce6:	1b64      	subs	r4, r4, r5
 8008ce8:	10a4      	asrs	r4, r4, #2
 8008cea:	42a6      	cmp	r6, r4
 8008cec:	d105      	bne.n	8008cfa <__libc_init_array+0x2e>
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cf4:	4798      	blx	r3
 8008cf6:	3601      	adds	r6, #1
 8008cf8:	e7ee      	b.n	8008cd8 <__libc_init_array+0xc>
 8008cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cfe:	4798      	blx	r3
 8008d00:	3601      	adds	r6, #1
 8008d02:	e7f2      	b.n	8008cea <__libc_init_array+0x1e>
 8008d04:	0800ad88 	.word	0x0800ad88
 8008d08:	0800ad88 	.word	0x0800ad88
 8008d0c:	0800ad88 	.word	0x0800ad88
 8008d10:	0800ad8c 	.word	0x0800ad8c

08008d14 <__retarget_lock_init_recursive>:
 8008d14:	4770      	bx	lr

08008d16 <__retarget_lock_acquire_recursive>:
 8008d16:	4770      	bx	lr

08008d18 <__retarget_lock_release_recursive>:
 8008d18:	4770      	bx	lr

08008d1a <strcpy>:
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d20:	f803 2b01 	strb.w	r2, [r3], #1
 8008d24:	2a00      	cmp	r2, #0
 8008d26:	d1f9      	bne.n	8008d1c <strcpy+0x2>
 8008d28:	4770      	bx	lr

08008d2a <memchr>:
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	b510      	push	{r4, lr}
 8008d2e:	b2c9      	uxtb	r1, r1
 8008d30:	4402      	add	r2, r0
 8008d32:	4293      	cmp	r3, r2
 8008d34:	4618      	mov	r0, r3
 8008d36:	d101      	bne.n	8008d3c <memchr+0x12>
 8008d38:	2000      	movs	r0, #0
 8008d3a:	e003      	b.n	8008d44 <memchr+0x1a>
 8008d3c:	7804      	ldrb	r4, [r0, #0]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	428c      	cmp	r4, r1
 8008d42:	d1f6      	bne.n	8008d32 <memchr+0x8>
 8008d44:	bd10      	pop	{r4, pc}

08008d46 <quorem>:
 8008d46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4a:	6903      	ldr	r3, [r0, #16]
 8008d4c:	690c      	ldr	r4, [r1, #16]
 8008d4e:	4607      	mov	r7, r0
 8008d50:	42a3      	cmp	r3, r4
 8008d52:	db7e      	blt.n	8008e52 <quorem+0x10c>
 8008d54:	3c01      	subs	r4, #1
 8008d56:	00a3      	lsls	r3, r4, #2
 8008d58:	f100 0514 	add.w	r5, r0, #20
 8008d5c:	f101 0814 	add.w	r8, r1, #20
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d66:	9301      	str	r3, [sp, #4]
 8008d68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d70:	3301      	adds	r3, #1
 8008d72:	429a      	cmp	r2, r3
 8008d74:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d7c:	d32e      	bcc.n	8008ddc <quorem+0x96>
 8008d7e:	f04f 0a00 	mov.w	sl, #0
 8008d82:	46c4      	mov	ip, r8
 8008d84:	46ae      	mov	lr, r5
 8008d86:	46d3      	mov	fp, sl
 8008d88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d8c:	b298      	uxth	r0, r3
 8008d8e:	fb06 a000 	mla	r0, r6, r0, sl
 8008d92:	0c1b      	lsrs	r3, r3, #16
 8008d94:	0c02      	lsrs	r2, r0, #16
 8008d96:	fb06 2303 	mla	r3, r6, r3, r2
 8008d9a:	f8de 2000 	ldr.w	r2, [lr]
 8008d9e:	b280      	uxth	r0, r0
 8008da0:	b292      	uxth	r2, r2
 8008da2:	1a12      	subs	r2, r2, r0
 8008da4:	445a      	add	r2, fp
 8008da6:	f8de 0000 	ldr.w	r0, [lr]
 8008daa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008db4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008db8:	b292      	uxth	r2, r2
 8008dba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008dbe:	45e1      	cmp	r9, ip
 8008dc0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008dc4:	f84e 2b04 	str.w	r2, [lr], #4
 8008dc8:	d2de      	bcs.n	8008d88 <quorem+0x42>
 8008dca:	9b00      	ldr	r3, [sp, #0]
 8008dcc:	58eb      	ldr	r3, [r5, r3]
 8008dce:	b92b      	cbnz	r3, 8008ddc <quorem+0x96>
 8008dd0:	9b01      	ldr	r3, [sp, #4]
 8008dd2:	3b04      	subs	r3, #4
 8008dd4:	429d      	cmp	r5, r3
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	d32f      	bcc.n	8008e3a <quorem+0xf4>
 8008dda:	613c      	str	r4, [r7, #16]
 8008ddc:	4638      	mov	r0, r7
 8008dde:	f001 f8c3 	bl	8009f68 <__mcmp>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	db25      	blt.n	8008e32 <quorem+0xec>
 8008de6:	4629      	mov	r1, r5
 8008de8:	2000      	movs	r0, #0
 8008dea:	f858 2b04 	ldr.w	r2, [r8], #4
 8008dee:	f8d1 c000 	ldr.w	ip, [r1]
 8008df2:	fa1f fe82 	uxth.w	lr, r2
 8008df6:	fa1f f38c 	uxth.w	r3, ip
 8008dfa:	eba3 030e 	sub.w	r3, r3, lr
 8008dfe:	4403      	add	r3, r0
 8008e00:	0c12      	lsrs	r2, r2, #16
 8008e02:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008e06:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e10:	45c1      	cmp	r9, r8
 8008e12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008e16:	f841 3b04 	str.w	r3, [r1], #4
 8008e1a:	d2e6      	bcs.n	8008dea <quorem+0xa4>
 8008e1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e24:	b922      	cbnz	r2, 8008e30 <quorem+0xea>
 8008e26:	3b04      	subs	r3, #4
 8008e28:	429d      	cmp	r5, r3
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	d30b      	bcc.n	8008e46 <quorem+0x100>
 8008e2e:	613c      	str	r4, [r7, #16]
 8008e30:	3601      	adds	r6, #1
 8008e32:	4630      	mov	r0, r6
 8008e34:	b003      	add	sp, #12
 8008e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3a:	6812      	ldr	r2, [r2, #0]
 8008e3c:	3b04      	subs	r3, #4
 8008e3e:	2a00      	cmp	r2, #0
 8008e40:	d1cb      	bne.n	8008dda <quorem+0x94>
 8008e42:	3c01      	subs	r4, #1
 8008e44:	e7c6      	b.n	8008dd4 <quorem+0x8e>
 8008e46:	6812      	ldr	r2, [r2, #0]
 8008e48:	3b04      	subs	r3, #4
 8008e4a:	2a00      	cmp	r2, #0
 8008e4c:	d1ef      	bne.n	8008e2e <quorem+0xe8>
 8008e4e:	3c01      	subs	r4, #1
 8008e50:	e7ea      	b.n	8008e28 <quorem+0xe2>
 8008e52:	2000      	movs	r0, #0
 8008e54:	e7ee      	b.n	8008e34 <quorem+0xee>
	...

08008e58 <_dtoa_r>:
 8008e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	4614      	mov	r4, r2
 8008e5e:	461d      	mov	r5, r3
 8008e60:	69c7      	ldr	r7, [r0, #28]
 8008e62:	b097      	sub	sp, #92	@ 0x5c
 8008e64:	4683      	mov	fp, r0
 8008e66:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008e6a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008e6c:	b97f      	cbnz	r7, 8008e8e <_dtoa_r+0x36>
 8008e6e:	2010      	movs	r0, #16
 8008e70:	f7ff f89e 	bl	8007fb0 <malloc>
 8008e74:	4602      	mov	r2, r0
 8008e76:	f8cb 001c 	str.w	r0, [fp, #28]
 8008e7a:	b920      	cbnz	r0, 8008e86 <_dtoa_r+0x2e>
 8008e7c:	21ef      	movs	r1, #239	@ 0xef
 8008e7e:	4ba8      	ldr	r3, [pc, #672]	@ (8009120 <_dtoa_r+0x2c8>)
 8008e80:	48a8      	ldr	r0, [pc, #672]	@ (8009124 <_dtoa_r+0x2cc>)
 8008e82:	f001 fa2f 	bl	800a2e4 <__assert_func>
 8008e86:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008e8a:	6007      	str	r7, [r0, #0]
 8008e8c:	60c7      	str	r7, [r0, #12]
 8008e8e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e92:	6819      	ldr	r1, [r3, #0]
 8008e94:	b159      	cbz	r1, 8008eae <_dtoa_r+0x56>
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	2301      	movs	r3, #1
 8008e9a:	4093      	lsls	r3, r2
 8008e9c:	604a      	str	r2, [r1, #4]
 8008e9e:	608b      	str	r3, [r1, #8]
 8008ea0:	4658      	mov	r0, fp
 8008ea2:	f000 fe29 	bl	8009af8 <_Bfree>
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	1e2b      	subs	r3, r5, #0
 8008eb0:	bfaf      	iteee	ge
 8008eb2:	2300      	movge	r3, #0
 8008eb4:	2201      	movlt	r2, #1
 8008eb6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008eba:	9303      	strlt	r3, [sp, #12]
 8008ebc:	bfa8      	it	ge
 8008ebe:	6033      	strge	r3, [r6, #0]
 8008ec0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008ec4:	4b98      	ldr	r3, [pc, #608]	@ (8009128 <_dtoa_r+0x2d0>)
 8008ec6:	bfb8      	it	lt
 8008ec8:	6032      	strlt	r2, [r6, #0]
 8008eca:	ea33 0308 	bics.w	r3, r3, r8
 8008ece:	d112      	bne.n	8008ef6 <_dtoa_r+0x9e>
 8008ed0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008ed4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008ed6:	6013      	str	r3, [r2, #0]
 8008ed8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008edc:	4323      	orrs	r3, r4
 8008ede:	f000 8550 	beq.w	8009982 <_dtoa_r+0xb2a>
 8008ee2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008ee4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800912c <_dtoa_r+0x2d4>
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f000 8552 	beq.w	8009992 <_dtoa_r+0xb3a>
 8008eee:	f10a 0303 	add.w	r3, sl, #3
 8008ef2:	f000 bd4c 	b.w	800998e <_dtoa_r+0xb36>
 8008ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008efa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008efe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f02:	2200      	movs	r2, #0
 8008f04:	2300      	movs	r3, #0
 8008f06:	f7f7 fd4f 	bl	80009a8 <__aeabi_dcmpeq>
 8008f0a:	4607      	mov	r7, r0
 8008f0c:	b158      	cbz	r0, 8008f26 <_dtoa_r+0xce>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008f12:	6013      	str	r3, [r2, #0]
 8008f14:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008f16:	b113      	cbz	r3, 8008f1e <_dtoa_r+0xc6>
 8008f18:	4b85      	ldr	r3, [pc, #532]	@ (8009130 <_dtoa_r+0x2d8>)
 8008f1a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009134 <_dtoa_r+0x2dc>
 8008f22:	f000 bd36 	b.w	8009992 <_dtoa_r+0xb3a>
 8008f26:	ab14      	add	r3, sp, #80	@ 0x50
 8008f28:	9301      	str	r3, [sp, #4]
 8008f2a:	ab15      	add	r3, sp, #84	@ 0x54
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	4658      	mov	r0, fp
 8008f30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008f34:	f001 f8c8 	bl	800a0c8 <__d2b>
 8008f38:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008f3c:	4681      	mov	r9, r0
 8008f3e:	2e00      	cmp	r6, #0
 8008f40:	d077      	beq.n	8009032 <_dtoa_r+0x1da>
 8008f42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f48:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f50:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008f54:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008f58:	9712      	str	r7, [sp, #72]	@ 0x48
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	4b76      	ldr	r3, [pc, #472]	@ (8009138 <_dtoa_r+0x2e0>)
 8008f60:	f7f7 f902 	bl	8000168 <__aeabi_dsub>
 8008f64:	a368      	add	r3, pc, #416	@ (adr r3, 8009108 <_dtoa_r+0x2b0>)
 8008f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6a:	f7f7 fab5 	bl	80004d8 <__aeabi_dmul>
 8008f6e:	a368      	add	r3, pc, #416	@ (adr r3, 8009110 <_dtoa_r+0x2b8>)
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	f7f7 f8fa 	bl	800016c <__adddf3>
 8008f78:	4604      	mov	r4, r0
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	460d      	mov	r5, r1
 8008f7e:	f7f7 fa41 	bl	8000404 <__aeabi_i2d>
 8008f82:	a365      	add	r3, pc, #404	@ (adr r3, 8009118 <_dtoa_r+0x2c0>)
 8008f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f88:	f7f7 faa6 	bl	80004d8 <__aeabi_dmul>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	460b      	mov	r3, r1
 8008f90:	4620      	mov	r0, r4
 8008f92:	4629      	mov	r1, r5
 8008f94:	f7f7 f8ea 	bl	800016c <__adddf3>
 8008f98:	4604      	mov	r4, r0
 8008f9a:	460d      	mov	r5, r1
 8008f9c:	f7f7 fd4c 	bl	8000a38 <__aeabi_d2iz>
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	4607      	mov	r7, r0
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	4629      	mov	r1, r5
 8008faa:	f7f7 fd07 	bl	80009bc <__aeabi_dcmplt>
 8008fae:	b140      	cbz	r0, 8008fc2 <_dtoa_r+0x16a>
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	f7f7 fa27 	bl	8000404 <__aeabi_i2d>
 8008fb6:	4622      	mov	r2, r4
 8008fb8:	462b      	mov	r3, r5
 8008fba:	f7f7 fcf5 	bl	80009a8 <__aeabi_dcmpeq>
 8008fbe:	b900      	cbnz	r0, 8008fc2 <_dtoa_r+0x16a>
 8008fc0:	3f01      	subs	r7, #1
 8008fc2:	2f16      	cmp	r7, #22
 8008fc4:	d853      	bhi.n	800906e <_dtoa_r+0x216>
 8008fc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fca:	4b5c      	ldr	r3, [pc, #368]	@ (800913c <_dtoa_r+0x2e4>)
 8008fcc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	f7f7 fcf2 	bl	80009bc <__aeabi_dcmplt>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d04a      	beq.n	8009072 <_dtoa_r+0x21a>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	3f01      	subs	r7, #1
 8008fe0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fe2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008fe4:	1b9b      	subs	r3, r3, r6
 8008fe6:	1e5a      	subs	r2, r3, #1
 8008fe8:	bf46      	itte	mi
 8008fea:	f1c3 0801 	rsbmi	r8, r3, #1
 8008fee:	2300      	movmi	r3, #0
 8008ff0:	f04f 0800 	movpl.w	r8, #0
 8008ff4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ff6:	bf48      	it	mi
 8008ff8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008ffa:	2f00      	cmp	r7, #0
 8008ffc:	db3b      	blt.n	8009076 <_dtoa_r+0x21e>
 8008ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009000:	970e      	str	r7, [sp, #56]	@ 0x38
 8009002:	443b      	add	r3, r7
 8009004:	9309      	str	r3, [sp, #36]	@ 0x24
 8009006:	2300      	movs	r3, #0
 8009008:	930a      	str	r3, [sp, #40]	@ 0x28
 800900a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800900c:	2b09      	cmp	r3, #9
 800900e:	d866      	bhi.n	80090de <_dtoa_r+0x286>
 8009010:	2b05      	cmp	r3, #5
 8009012:	bfc4      	itt	gt
 8009014:	3b04      	subgt	r3, #4
 8009016:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009018:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800901a:	bfc8      	it	gt
 800901c:	2400      	movgt	r4, #0
 800901e:	f1a3 0302 	sub.w	r3, r3, #2
 8009022:	bfd8      	it	le
 8009024:	2401      	movle	r4, #1
 8009026:	2b03      	cmp	r3, #3
 8009028:	d864      	bhi.n	80090f4 <_dtoa_r+0x29c>
 800902a:	e8df f003 	tbb	[pc, r3]
 800902e:	382b      	.short	0x382b
 8009030:	5636      	.short	0x5636
 8009032:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009036:	441e      	add	r6, r3
 8009038:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800903c:	2b20      	cmp	r3, #32
 800903e:	bfc1      	itttt	gt
 8009040:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009044:	fa08 f803 	lslgt.w	r8, r8, r3
 8009048:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800904c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009050:	bfd6      	itet	le
 8009052:	f1c3 0320 	rsble	r3, r3, #32
 8009056:	ea48 0003 	orrgt.w	r0, r8, r3
 800905a:	fa04 f003 	lslle.w	r0, r4, r3
 800905e:	f7f7 f9c1 	bl	80003e4 <__aeabi_ui2d>
 8009062:	2201      	movs	r2, #1
 8009064:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009068:	3e01      	subs	r6, #1
 800906a:	9212      	str	r2, [sp, #72]	@ 0x48
 800906c:	e775      	b.n	8008f5a <_dtoa_r+0x102>
 800906e:	2301      	movs	r3, #1
 8009070:	e7b6      	b.n	8008fe0 <_dtoa_r+0x188>
 8009072:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009074:	e7b5      	b.n	8008fe2 <_dtoa_r+0x18a>
 8009076:	427b      	negs	r3, r7
 8009078:	930a      	str	r3, [sp, #40]	@ 0x28
 800907a:	2300      	movs	r3, #0
 800907c:	eba8 0807 	sub.w	r8, r8, r7
 8009080:	930e      	str	r3, [sp, #56]	@ 0x38
 8009082:	e7c2      	b.n	800900a <_dtoa_r+0x1b2>
 8009084:	2300      	movs	r3, #0
 8009086:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009088:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800908a:	2b00      	cmp	r3, #0
 800908c:	dc35      	bgt.n	80090fa <_dtoa_r+0x2a2>
 800908e:	2301      	movs	r3, #1
 8009090:	461a      	mov	r2, r3
 8009092:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009096:	9221      	str	r2, [sp, #132]	@ 0x84
 8009098:	e00b      	b.n	80090b2 <_dtoa_r+0x25a>
 800909a:	2301      	movs	r3, #1
 800909c:	e7f3      	b.n	8009086 <_dtoa_r+0x22e>
 800909e:	2300      	movs	r3, #0
 80090a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80090a4:	18fb      	adds	r3, r7, r3
 80090a6:	9308      	str	r3, [sp, #32]
 80090a8:	3301      	adds	r3, #1
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	9307      	str	r3, [sp, #28]
 80090ae:	bfb8      	it	lt
 80090b0:	2301      	movlt	r3, #1
 80090b2:	2100      	movs	r1, #0
 80090b4:	2204      	movs	r2, #4
 80090b6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80090ba:	f102 0514 	add.w	r5, r2, #20
 80090be:	429d      	cmp	r5, r3
 80090c0:	d91f      	bls.n	8009102 <_dtoa_r+0x2aa>
 80090c2:	6041      	str	r1, [r0, #4]
 80090c4:	4658      	mov	r0, fp
 80090c6:	f000 fcd7 	bl	8009a78 <_Balloc>
 80090ca:	4682      	mov	sl, r0
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d139      	bne.n	8009144 <_dtoa_r+0x2ec>
 80090d0:	4602      	mov	r2, r0
 80090d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80090d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009140 <_dtoa_r+0x2e8>)
 80090d8:	e6d2      	b.n	8008e80 <_dtoa_r+0x28>
 80090da:	2301      	movs	r3, #1
 80090dc:	e7e0      	b.n	80090a0 <_dtoa_r+0x248>
 80090de:	2401      	movs	r4, #1
 80090e0:	2300      	movs	r3, #0
 80090e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80090e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80090e6:	f04f 33ff 	mov.w	r3, #4294967295
 80090ea:	2200      	movs	r2, #0
 80090ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80090f0:	2312      	movs	r3, #18
 80090f2:	e7d0      	b.n	8009096 <_dtoa_r+0x23e>
 80090f4:	2301      	movs	r3, #1
 80090f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090f8:	e7f5      	b.n	80090e6 <_dtoa_r+0x28e>
 80090fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80090fc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009100:	e7d7      	b.n	80090b2 <_dtoa_r+0x25a>
 8009102:	3101      	adds	r1, #1
 8009104:	0052      	lsls	r2, r2, #1
 8009106:	e7d8      	b.n	80090ba <_dtoa_r+0x262>
 8009108:	636f4361 	.word	0x636f4361
 800910c:	3fd287a7 	.word	0x3fd287a7
 8009110:	8b60c8b3 	.word	0x8b60c8b3
 8009114:	3fc68a28 	.word	0x3fc68a28
 8009118:	509f79fb 	.word	0x509f79fb
 800911c:	3fd34413 	.word	0x3fd34413
 8009120:	0800aa53 	.word	0x0800aa53
 8009124:	0800aa6a 	.word	0x0800aa6a
 8009128:	7ff00000 	.word	0x7ff00000
 800912c:	0800aa4f 	.word	0x0800aa4f
 8009130:	0800aa23 	.word	0x0800aa23
 8009134:	0800aa22 	.word	0x0800aa22
 8009138:	3ff80000 	.word	0x3ff80000
 800913c:	0800ab60 	.word	0x0800ab60
 8009140:	0800aac2 	.word	0x0800aac2
 8009144:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009148:	6018      	str	r0, [r3, #0]
 800914a:	9b07      	ldr	r3, [sp, #28]
 800914c:	2b0e      	cmp	r3, #14
 800914e:	f200 80a4 	bhi.w	800929a <_dtoa_r+0x442>
 8009152:	2c00      	cmp	r4, #0
 8009154:	f000 80a1 	beq.w	800929a <_dtoa_r+0x442>
 8009158:	2f00      	cmp	r7, #0
 800915a:	dd33      	ble.n	80091c4 <_dtoa_r+0x36c>
 800915c:	4b86      	ldr	r3, [pc, #536]	@ (8009378 <_dtoa_r+0x520>)
 800915e:	f007 020f 	and.w	r2, r7, #15
 8009162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009166:	05f8      	lsls	r0, r7, #23
 8009168:	e9d3 3400 	ldrd	r3, r4, [r3]
 800916c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009170:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009174:	d516      	bpl.n	80091a4 <_dtoa_r+0x34c>
 8009176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800917a:	4b80      	ldr	r3, [pc, #512]	@ (800937c <_dtoa_r+0x524>)
 800917c:	2603      	movs	r6, #3
 800917e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009182:	f7f7 fad3 	bl	800072c <__aeabi_ddiv>
 8009186:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800918a:	f004 040f 	and.w	r4, r4, #15
 800918e:	4d7b      	ldr	r5, [pc, #492]	@ (800937c <_dtoa_r+0x524>)
 8009190:	b954      	cbnz	r4, 80091a8 <_dtoa_r+0x350>
 8009192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800919a:	f7f7 fac7 	bl	800072c <__aeabi_ddiv>
 800919e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091a2:	e028      	b.n	80091f6 <_dtoa_r+0x39e>
 80091a4:	2602      	movs	r6, #2
 80091a6:	e7f2      	b.n	800918e <_dtoa_r+0x336>
 80091a8:	07e1      	lsls	r1, r4, #31
 80091aa:	d508      	bpl.n	80091be <_dtoa_r+0x366>
 80091ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80091b4:	f7f7 f990 	bl	80004d8 <__aeabi_dmul>
 80091b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091bc:	3601      	adds	r6, #1
 80091be:	1064      	asrs	r4, r4, #1
 80091c0:	3508      	adds	r5, #8
 80091c2:	e7e5      	b.n	8009190 <_dtoa_r+0x338>
 80091c4:	f000 80d2 	beq.w	800936c <_dtoa_r+0x514>
 80091c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091cc:	427c      	negs	r4, r7
 80091ce:	4b6a      	ldr	r3, [pc, #424]	@ (8009378 <_dtoa_r+0x520>)
 80091d0:	f004 020f 	and.w	r2, r4, #15
 80091d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	f7f7 f97c 	bl	80004d8 <__aeabi_dmul>
 80091e0:	2602      	movs	r6, #2
 80091e2:	2300      	movs	r3, #0
 80091e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091e8:	4d64      	ldr	r5, [pc, #400]	@ (800937c <_dtoa_r+0x524>)
 80091ea:	1124      	asrs	r4, r4, #4
 80091ec:	2c00      	cmp	r4, #0
 80091ee:	f040 80b2 	bne.w	8009356 <_dtoa_r+0x4fe>
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1d3      	bne.n	800919e <_dtoa_r+0x346>
 80091f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80091fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 80b7 	beq.w	8009370 <_dtoa_r+0x518>
 8009202:	2200      	movs	r2, #0
 8009204:	4620      	mov	r0, r4
 8009206:	4629      	mov	r1, r5
 8009208:	4b5d      	ldr	r3, [pc, #372]	@ (8009380 <_dtoa_r+0x528>)
 800920a:	f7f7 fbd7 	bl	80009bc <__aeabi_dcmplt>
 800920e:	2800      	cmp	r0, #0
 8009210:	f000 80ae 	beq.w	8009370 <_dtoa_r+0x518>
 8009214:	9b07      	ldr	r3, [sp, #28]
 8009216:	2b00      	cmp	r3, #0
 8009218:	f000 80aa 	beq.w	8009370 <_dtoa_r+0x518>
 800921c:	9b08      	ldr	r3, [sp, #32]
 800921e:	2b00      	cmp	r3, #0
 8009220:	dd37      	ble.n	8009292 <_dtoa_r+0x43a>
 8009222:	1e7b      	subs	r3, r7, #1
 8009224:	4620      	mov	r0, r4
 8009226:	9304      	str	r3, [sp, #16]
 8009228:	2200      	movs	r2, #0
 800922a:	4629      	mov	r1, r5
 800922c:	4b55      	ldr	r3, [pc, #340]	@ (8009384 <_dtoa_r+0x52c>)
 800922e:	f7f7 f953 	bl	80004d8 <__aeabi_dmul>
 8009232:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009236:	9c08      	ldr	r4, [sp, #32]
 8009238:	3601      	adds	r6, #1
 800923a:	4630      	mov	r0, r6
 800923c:	f7f7 f8e2 	bl	8000404 <__aeabi_i2d>
 8009240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009244:	f7f7 f948 	bl	80004d8 <__aeabi_dmul>
 8009248:	2200      	movs	r2, #0
 800924a:	4b4f      	ldr	r3, [pc, #316]	@ (8009388 <_dtoa_r+0x530>)
 800924c:	f7f6 ff8e 	bl	800016c <__adddf3>
 8009250:	4605      	mov	r5, r0
 8009252:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009256:	2c00      	cmp	r4, #0
 8009258:	f040 809a 	bne.w	8009390 <_dtoa_r+0x538>
 800925c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009260:	2200      	movs	r2, #0
 8009262:	4b4a      	ldr	r3, [pc, #296]	@ (800938c <_dtoa_r+0x534>)
 8009264:	f7f6 ff80 	bl	8000168 <__aeabi_dsub>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009270:	462a      	mov	r2, r5
 8009272:	4633      	mov	r3, r6
 8009274:	f7f7 fbc0 	bl	80009f8 <__aeabi_dcmpgt>
 8009278:	2800      	cmp	r0, #0
 800927a:	f040 828e 	bne.w	800979a <_dtoa_r+0x942>
 800927e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009282:	462a      	mov	r2, r5
 8009284:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009288:	f7f7 fb98 	bl	80009bc <__aeabi_dcmplt>
 800928c:	2800      	cmp	r0, #0
 800928e:	f040 8127 	bne.w	80094e0 <_dtoa_r+0x688>
 8009292:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009296:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800929a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800929c:	2b00      	cmp	r3, #0
 800929e:	f2c0 8163 	blt.w	8009568 <_dtoa_r+0x710>
 80092a2:	2f0e      	cmp	r7, #14
 80092a4:	f300 8160 	bgt.w	8009568 <_dtoa_r+0x710>
 80092a8:	4b33      	ldr	r3, [pc, #204]	@ (8009378 <_dtoa_r+0x520>)
 80092aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80092b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80092b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	da03      	bge.n	80092c4 <_dtoa_r+0x46c>
 80092bc:	9b07      	ldr	r3, [sp, #28]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f340 8100 	ble.w	80094c4 <_dtoa_r+0x66c>
 80092c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80092c8:	4656      	mov	r6, sl
 80092ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092ce:	4620      	mov	r0, r4
 80092d0:	4629      	mov	r1, r5
 80092d2:	f7f7 fa2b 	bl	800072c <__aeabi_ddiv>
 80092d6:	f7f7 fbaf 	bl	8000a38 <__aeabi_d2iz>
 80092da:	4680      	mov	r8, r0
 80092dc:	f7f7 f892 	bl	8000404 <__aeabi_i2d>
 80092e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092e4:	f7f7 f8f8 	bl	80004d8 <__aeabi_dmul>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	4620      	mov	r0, r4
 80092ee:	4629      	mov	r1, r5
 80092f0:	f7f6 ff3a 	bl	8000168 <__aeabi_dsub>
 80092f4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80092f8:	9d07      	ldr	r5, [sp, #28]
 80092fa:	f806 4b01 	strb.w	r4, [r6], #1
 80092fe:	eba6 040a 	sub.w	r4, r6, sl
 8009302:	42a5      	cmp	r5, r4
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	f040 8116 	bne.w	8009538 <_dtoa_r+0x6e0>
 800930c:	f7f6 ff2e 	bl	800016c <__adddf3>
 8009310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009314:	4604      	mov	r4, r0
 8009316:	460d      	mov	r5, r1
 8009318:	f7f7 fb6e 	bl	80009f8 <__aeabi_dcmpgt>
 800931c:	2800      	cmp	r0, #0
 800931e:	f040 80f8 	bne.w	8009512 <_dtoa_r+0x6ba>
 8009322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009326:	4620      	mov	r0, r4
 8009328:	4629      	mov	r1, r5
 800932a:	f7f7 fb3d 	bl	80009a8 <__aeabi_dcmpeq>
 800932e:	b118      	cbz	r0, 8009338 <_dtoa_r+0x4e0>
 8009330:	f018 0f01 	tst.w	r8, #1
 8009334:	f040 80ed 	bne.w	8009512 <_dtoa_r+0x6ba>
 8009338:	4649      	mov	r1, r9
 800933a:	4658      	mov	r0, fp
 800933c:	f000 fbdc 	bl	8009af8 <_Bfree>
 8009340:	2300      	movs	r3, #0
 8009342:	7033      	strb	r3, [r6, #0]
 8009344:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009346:	3701      	adds	r7, #1
 8009348:	601f      	str	r7, [r3, #0]
 800934a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 8320 	beq.w	8009992 <_dtoa_r+0xb3a>
 8009352:	601e      	str	r6, [r3, #0]
 8009354:	e31d      	b.n	8009992 <_dtoa_r+0xb3a>
 8009356:	07e2      	lsls	r2, r4, #31
 8009358:	d505      	bpl.n	8009366 <_dtoa_r+0x50e>
 800935a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800935e:	f7f7 f8bb 	bl	80004d8 <__aeabi_dmul>
 8009362:	2301      	movs	r3, #1
 8009364:	3601      	adds	r6, #1
 8009366:	1064      	asrs	r4, r4, #1
 8009368:	3508      	adds	r5, #8
 800936a:	e73f      	b.n	80091ec <_dtoa_r+0x394>
 800936c:	2602      	movs	r6, #2
 800936e:	e742      	b.n	80091f6 <_dtoa_r+0x39e>
 8009370:	9c07      	ldr	r4, [sp, #28]
 8009372:	9704      	str	r7, [sp, #16]
 8009374:	e761      	b.n	800923a <_dtoa_r+0x3e2>
 8009376:	bf00      	nop
 8009378:	0800ab60 	.word	0x0800ab60
 800937c:	0800ab38 	.word	0x0800ab38
 8009380:	3ff00000 	.word	0x3ff00000
 8009384:	40240000 	.word	0x40240000
 8009388:	401c0000 	.word	0x401c0000
 800938c:	40140000 	.word	0x40140000
 8009390:	4b70      	ldr	r3, [pc, #448]	@ (8009554 <_dtoa_r+0x6fc>)
 8009392:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009394:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009398:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800939c:	4454      	add	r4, sl
 800939e:	2900      	cmp	r1, #0
 80093a0:	d045      	beq.n	800942e <_dtoa_r+0x5d6>
 80093a2:	2000      	movs	r0, #0
 80093a4:	496c      	ldr	r1, [pc, #432]	@ (8009558 <_dtoa_r+0x700>)
 80093a6:	f7f7 f9c1 	bl	800072c <__aeabi_ddiv>
 80093aa:	4633      	mov	r3, r6
 80093ac:	462a      	mov	r2, r5
 80093ae:	f7f6 fedb 	bl	8000168 <__aeabi_dsub>
 80093b2:	4656      	mov	r6, sl
 80093b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80093b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093bc:	f7f7 fb3c 	bl	8000a38 <__aeabi_d2iz>
 80093c0:	4605      	mov	r5, r0
 80093c2:	f7f7 f81f 	bl	8000404 <__aeabi_i2d>
 80093c6:	4602      	mov	r2, r0
 80093c8:	460b      	mov	r3, r1
 80093ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093ce:	f7f6 fecb 	bl	8000168 <__aeabi_dsub>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	3530      	adds	r5, #48	@ 0x30
 80093d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80093e0:	f806 5b01 	strb.w	r5, [r6], #1
 80093e4:	f7f7 faea 	bl	80009bc <__aeabi_dcmplt>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d163      	bne.n	80094b4 <_dtoa_r+0x65c>
 80093ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093f0:	2000      	movs	r0, #0
 80093f2:	495a      	ldr	r1, [pc, #360]	@ (800955c <_dtoa_r+0x704>)
 80093f4:	f7f6 feb8 	bl	8000168 <__aeabi_dsub>
 80093f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80093fc:	f7f7 fade 	bl	80009bc <__aeabi_dcmplt>
 8009400:	2800      	cmp	r0, #0
 8009402:	f040 8087 	bne.w	8009514 <_dtoa_r+0x6bc>
 8009406:	42a6      	cmp	r6, r4
 8009408:	f43f af43 	beq.w	8009292 <_dtoa_r+0x43a>
 800940c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009410:	2200      	movs	r2, #0
 8009412:	4b53      	ldr	r3, [pc, #332]	@ (8009560 <_dtoa_r+0x708>)
 8009414:	f7f7 f860 	bl	80004d8 <__aeabi_dmul>
 8009418:	2200      	movs	r2, #0
 800941a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800941e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009422:	4b4f      	ldr	r3, [pc, #316]	@ (8009560 <_dtoa_r+0x708>)
 8009424:	f7f7 f858 	bl	80004d8 <__aeabi_dmul>
 8009428:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800942c:	e7c4      	b.n	80093b8 <_dtoa_r+0x560>
 800942e:	4631      	mov	r1, r6
 8009430:	4628      	mov	r0, r5
 8009432:	f7f7 f851 	bl	80004d8 <__aeabi_dmul>
 8009436:	4656      	mov	r6, sl
 8009438:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800943c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800943e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009442:	f7f7 faf9 	bl	8000a38 <__aeabi_d2iz>
 8009446:	4605      	mov	r5, r0
 8009448:	f7f6 ffdc 	bl	8000404 <__aeabi_i2d>
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009454:	f7f6 fe88 	bl	8000168 <__aeabi_dsub>
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	3530      	adds	r5, #48	@ 0x30
 800945e:	f806 5b01 	strb.w	r5, [r6], #1
 8009462:	42a6      	cmp	r6, r4
 8009464:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009468:	f04f 0200 	mov.w	r2, #0
 800946c:	d124      	bne.n	80094b8 <_dtoa_r+0x660>
 800946e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009472:	4b39      	ldr	r3, [pc, #228]	@ (8009558 <_dtoa_r+0x700>)
 8009474:	f7f6 fe7a 	bl	800016c <__adddf3>
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009480:	f7f7 faba 	bl	80009f8 <__aeabi_dcmpgt>
 8009484:	2800      	cmp	r0, #0
 8009486:	d145      	bne.n	8009514 <_dtoa_r+0x6bc>
 8009488:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800948c:	2000      	movs	r0, #0
 800948e:	4932      	ldr	r1, [pc, #200]	@ (8009558 <_dtoa_r+0x700>)
 8009490:	f7f6 fe6a 	bl	8000168 <__aeabi_dsub>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800949c:	f7f7 fa8e 	bl	80009bc <__aeabi_dcmplt>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	f43f aef6 	beq.w	8009292 <_dtoa_r+0x43a>
 80094a6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80094a8:	1e73      	subs	r3, r6, #1
 80094aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80094ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80094b0:	2b30      	cmp	r3, #48	@ 0x30
 80094b2:	d0f8      	beq.n	80094a6 <_dtoa_r+0x64e>
 80094b4:	9f04      	ldr	r7, [sp, #16]
 80094b6:	e73f      	b.n	8009338 <_dtoa_r+0x4e0>
 80094b8:	4b29      	ldr	r3, [pc, #164]	@ (8009560 <_dtoa_r+0x708>)
 80094ba:	f7f7 f80d 	bl	80004d8 <__aeabi_dmul>
 80094be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094c2:	e7bc      	b.n	800943e <_dtoa_r+0x5e6>
 80094c4:	d10c      	bne.n	80094e0 <_dtoa_r+0x688>
 80094c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094ca:	2200      	movs	r2, #0
 80094cc:	4b25      	ldr	r3, [pc, #148]	@ (8009564 <_dtoa_r+0x70c>)
 80094ce:	f7f7 f803 	bl	80004d8 <__aeabi_dmul>
 80094d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094d6:	f7f7 fa85 	bl	80009e4 <__aeabi_dcmpge>
 80094da:	2800      	cmp	r0, #0
 80094dc:	f000 815b 	beq.w	8009796 <_dtoa_r+0x93e>
 80094e0:	2400      	movs	r4, #0
 80094e2:	4625      	mov	r5, r4
 80094e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094e6:	4656      	mov	r6, sl
 80094e8:	43db      	mvns	r3, r3
 80094ea:	9304      	str	r3, [sp, #16]
 80094ec:	2700      	movs	r7, #0
 80094ee:	4621      	mov	r1, r4
 80094f0:	4658      	mov	r0, fp
 80094f2:	f000 fb01 	bl	8009af8 <_Bfree>
 80094f6:	2d00      	cmp	r5, #0
 80094f8:	d0dc      	beq.n	80094b4 <_dtoa_r+0x65c>
 80094fa:	b12f      	cbz	r7, 8009508 <_dtoa_r+0x6b0>
 80094fc:	42af      	cmp	r7, r5
 80094fe:	d003      	beq.n	8009508 <_dtoa_r+0x6b0>
 8009500:	4639      	mov	r1, r7
 8009502:	4658      	mov	r0, fp
 8009504:	f000 faf8 	bl	8009af8 <_Bfree>
 8009508:	4629      	mov	r1, r5
 800950a:	4658      	mov	r0, fp
 800950c:	f000 faf4 	bl	8009af8 <_Bfree>
 8009510:	e7d0      	b.n	80094b4 <_dtoa_r+0x65c>
 8009512:	9704      	str	r7, [sp, #16]
 8009514:	4633      	mov	r3, r6
 8009516:	461e      	mov	r6, r3
 8009518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800951c:	2a39      	cmp	r2, #57	@ 0x39
 800951e:	d107      	bne.n	8009530 <_dtoa_r+0x6d8>
 8009520:	459a      	cmp	sl, r3
 8009522:	d1f8      	bne.n	8009516 <_dtoa_r+0x6be>
 8009524:	9a04      	ldr	r2, [sp, #16]
 8009526:	3201      	adds	r2, #1
 8009528:	9204      	str	r2, [sp, #16]
 800952a:	2230      	movs	r2, #48	@ 0x30
 800952c:	f88a 2000 	strb.w	r2, [sl]
 8009530:	781a      	ldrb	r2, [r3, #0]
 8009532:	3201      	adds	r2, #1
 8009534:	701a      	strb	r2, [r3, #0]
 8009536:	e7bd      	b.n	80094b4 <_dtoa_r+0x65c>
 8009538:	2200      	movs	r2, #0
 800953a:	4b09      	ldr	r3, [pc, #36]	@ (8009560 <_dtoa_r+0x708>)
 800953c:	f7f6 ffcc 	bl	80004d8 <__aeabi_dmul>
 8009540:	2200      	movs	r2, #0
 8009542:	2300      	movs	r3, #0
 8009544:	4604      	mov	r4, r0
 8009546:	460d      	mov	r5, r1
 8009548:	f7f7 fa2e 	bl	80009a8 <__aeabi_dcmpeq>
 800954c:	2800      	cmp	r0, #0
 800954e:	f43f aebc 	beq.w	80092ca <_dtoa_r+0x472>
 8009552:	e6f1      	b.n	8009338 <_dtoa_r+0x4e0>
 8009554:	0800ab60 	.word	0x0800ab60
 8009558:	3fe00000 	.word	0x3fe00000
 800955c:	3ff00000 	.word	0x3ff00000
 8009560:	40240000 	.word	0x40240000
 8009564:	40140000 	.word	0x40140000
 8009568:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800956a:	2a00      	cmp	r2, #0
 800956c:	f000 80db 	beq.w	8009726 <_dtoa_r+0x8ce>
 8009570:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009572:	2a01      	cmp	r2, #1
 8009574:	f300 80bf 	bgt.w	80096f6 <_dtoa_r+0x89e>
 8009578:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800957a:	2a00      	cmp	r2, #0
 800957c:	f000 80b7 	beq.w	80096ee <_dtoa_r+0x896>
 8009580:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009584:	4646      	mov	r6, r8
 8009586:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009588:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800958a:	2101      	movs	r1, #1
 800958c:	441a      	add	r2, r3
 800958e:	4658      	mov	r0, fp
 8009590:	4498      	add	r8, r3
 8009592:	9209      	str	r2, [sp, #36]	@ 0x24
 8009594:	f000 fb64 	bl	8009c60 <__i2b>
 8009598:	4605      	mov	r5, r0
 800959a:	b15e      	cbz	r6, 80095b4 <_dtoa_r+0x75c>
 800959c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800959e:	2b00      	cmp	r3, #0
 80095a0:	dd08      	ble.n	80095b4 <_dtoa_r+0x75c>
 80095a2:	42b3      	cmp	r3, r6
 80095a4:	bfa8      	it	ge
 80095a6:	4633      	movge	r3, r6
 80095a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095aa:	eba8 0803 	sub.w	r8, r8, r3
 80095ae:	1af6      	subs	r6, r6, r3
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80095b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095b6:	b1f3      	cbz	r3, 80095f6 <_dtoa_r+0x79e>
 80095b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 80b7 	beq.w	800972e <_dtoa_r+0x8d6>
 80095c0:	b18c      	cbz	r4, 80095e6 <_dtoa_r+0x78e>
 80095c2:	4629      	mov	r1, r5
 80095c4:	4622      	mov	r2, r4
 80095c6:	4658      	mov	r0, fp
 80095c8:	f000 fc08 	bl	8009ddc <__pow5mult>
 80095cc:	464a      	mov	r2, r9
 80095ce:	4601      	mov	r1, r0
 80095d0:	4605      	mov	r5, r0
 80095d2:	4658      	mov	r0, fp
 80095d4:	f000 fb5a 	bl	8009c8c <__multiply>
 80095d8:	4649      	mov	r1, r9
 80095da:	9004      	str	r0, [sp, #16]
 80095dc:	4658      	mov	r0, fp
 80095de:	f000 fa8b 	bl	8009af8 <_Bfree>
 80095e2:	9b04      	ldr	r3, [sp, #16]
 80095e4:	4699      	mov	r9, r3
 80095e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095e8:	1b1a      	subs	r2, r3, r4
 80095ea:	d004      	beq.n	80095f6 <_dtoa_r+0x79e>
 80095ec:	4649      	mov	r1, r9
 80095ee:	4658      	mov	r0, fp
 80095f0:	f000 fbf4 	bl	8009ddc <__pow5mult>
 80095f4:	4681      	mov	r9, r0
 80095f6:	2101      	movs	r1, #1
 80095f8:	4658      	mov	r0, fp
 80095fa:	f000 fb31 	bl	8009c60 <__i2b>
 80095fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009600:	4604      	mov	r4, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 81c9 	beq.w	800999a <_dtoa_r+0xb42>
 8009608:	461a      	mov	r2, r3
 800960a:	4601      	mov	r1, r0
 800960c:	4658      	mov	r0, fp
 800960e:	f000 fbe5 	bl	8009ddc <__pow5mult>
 8009612:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009614:	4604      	mov	r4, r0
 8009616:	2b01      	cmp	r3, #1
 8009618:	f300 808f 	bgt.w	800973a <_dtoa_r+0x8e2>
 800961c:	9b02      	ldr	r3, [sp, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	f040 8087 	bne.w	8009732 <_dtoa_r+0x8da>
 8009624:	9b03      	ldr	r3, [sp, #12]
 8009626:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800962a:	2b00      	cmp	r3, #0
 800962c:	f040 8083 	bne.w	8009736 <_dtoa_r+0x8de>
 8009630:	9b03      	ldr	r3, [sp, #12]
 8009632:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009636:	0d1b      	lsrs	r3, r3, #20
 8009638:	051b      	lsls	r3, r3, #20
 800963a:	b12b      	cbz	r3, 8009648 <_dtoa_r+0x7f0>
 800963c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800963e:	f108 0801 	add.w	r8, r8, #1
 8009642:	3301      	adds	r3, #1
 8009644:	9309      	str	r3, [sp, #36]	@ 0x24
 8009646:	2301      	movs	r3, #1
 8009648:	930a      	str	r3, [sp, #40]	@ 0x28
 800964a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 81aa 	beq.w	80099a6 <_dtoa_r+0xb4e>
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009658:	6918      	ldr	r0, [r3, #16]
 800965a:	f000 fab5 	bl	8009bc8 <__hi0bits>
 800965e:	f1c0 0020 	rsb	r0, r0, #32
 8009662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009664:	4418      	add	r0, r3
 8009666:	f010 001f 	ands.w	r0, r0, #31
 800966a:	d071      	beq.n	8009750 <_dtoa_r+0x8f8>
 800966c:	f1c0 0320 	rsb	r3, r0, #32
 8009670:	2b04      	cmp	r3, #4
 8009672:	dd65      	ble.n	8009740 <_dtoa_r+0x8e8>
 8009674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009676:	f1c0 001c 	rsb	r0, r0, #28
 800967a:	4403      	add	r3, r0
 800967c:	4480      	add	r8, r0
 800967e:	4406      	add	r6, r0
 8009680:	9309      	str	r3, [sp, #36]	@ 0x24
 8009682:	f1b8 0f00 	cmp.w	r8, #0
 8009686:	dd05      	ble.n	8009694 <_dtoa_r+0x83c>
 8009688:	4649      	mov	r1, r9
 800968a:	4642      	mov	r2, r8
 800968c:	4658      	mov	r0, fp
 800968e:	f000 fbff 	bl	8009e90 <__lshift>
 8009692:	4681      	mov	r9, r0
 8009694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009696:	2b00      	cmp	r3, #0
 8009698:	dd05      	ble.n	80096a6 <_dtoa_r+0x84e>
 800969a:	4621      	mov	r1, r4
 800969c:	461a      	mov	r2, r3
 800969e:	4658      	mov	r0, fp
 80096a0:	f000 fbf6 	bl	8009e90 <__lshift>
 80096a4:	4604      	mov	r4, r0
 80096a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d053      	beq.n	8009754 <_dtoa_r+0x8fc>
 80096ac:	4621      	mov	r1, r4
 80096ae:	4648      	mov	r0, r9
 80096b0:	f000 fc5a 	bl	8009f68 <__mcmp>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	da4d      	bge.n	8009754 <_dtoa_r+0x8fc>
 80096b8:	1e7b      	subs	r3, r7, #1
 80096ba:	4649      	mov	r1, r9
 80096bc:	9304      	str	r3, [sp, #16]
 80096be:	220a      	movs	r2, #10
 80096c0:	2300      	movs	r3, #0
 80096c2:	4658      	mov	r0, fp
 80096c4:	f000 fa3a 	bl	8009b3c <__multadd>
 80096c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096ca:	4681      	mov	r9, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f000 816c 	beq.w	80099aa <_dtoa_r+0xb52>
 80096d2:	2300      	movs	r3, #0
 80096d4:	4629      	mov	r1, r5
 80096d6:	220a      	movs	r2, #10
 80096d8:	4658      	mov	r0, fp
 80096da:	f000 fa2f 	bl	8009b3c <__multadd>
 80096de:	9b08      	ldr	r3, [sp, #32]
 80096e0:	4605      	mov	r5, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	dc61      	bgt.n	80097aa <_dtoa_r+0x952>
 80096e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	dc3b      	bgt.n	8009764 <_dtoa_r+0x90c>
 80096ec:	e05d      	b.n	80097aa <_dtoa_r+0x952>
 80096ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80096f0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80096f4:	e746      	b.n	8009584 <_dtoa_r+0x72c>
 80096f6:	9b07      	ldr	r3, [sp, #28]
 80096f8:	1e5c      	subs	r4, r3, #1
 80096fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096fc:	42a3      	cmp	r3, r4
 80096fe:	bfbf      	itttt	lt
 8009700:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009702:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009704:	1ae3      	sublt	r3, r4, r3
 8009706:	18d2      	addlt	r2, r2, r3
 8009708:	bfa8      	it	ge
 800970a:	1b1c      	subge	r4, r3, r4
 800970c:	9b07      	ldr	r3, [sp, #28]
 800970e:	bfbe      	ittt	lt
 8009710:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009712:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009714:	2400      	movlt	r4, #0
 8009716:	2b00      	cmp	r3, #0
 8009718:	bfb5      	itete	lt
 800971a:	eba8 0603 	sublt.w	r6, r8, r3
 800971e:	4646      	movge	r6, r8
 8009720:	2300      	movlt	r3, #0
 8009722:	9b07      	ldrge	r3, [sp, #28]
 8009724:	e730      	b.n	8009588 <_dtoa_r+0x730>
 8009726:	4646      	mov	r6, r8
 8009728:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800972a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800972c:	e735      	b.n	800959a <_dtoa_r+0x742>
 800972e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009730:	e75c      	b.n	80095ec <_dtoa_r+0x794>
 8009732:	2300      	movs	r3, #0
 8009734:	e788      	b.n	8009648 <_dtoa_r+0x7f0>
 8009736:	9b02      	ldr	r3, [sp, #8]
 8009738:	e786      	b.n	8009648 <_dtoa_r+0x7f0>
 800973a:	2300      	movs	r3, #0
 800973c:	930a      	str	r3, [sp, #40]	@ 0x28
 800973e:	e788      	b.n	8009652 <_dtoa_r+0x7fa>
 8009740:	d09f      	beq.n	8009682 <_dtoa_r+0x82a>
 8009742:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009744:	331c      	adds	r3, #28
 8009746:	441a      	add	r2, r3
 8009748:	4498      	add	r8, r3
 800974a:	441e      	add	r6, r3
 800974c:	9209      	str	r2, [sp, #36]	@ 0x24
 800974e:	e798      	b.n	8009682 <_dtoa_r+0x82a>
 8009750:	4603      	mov	r3, r0
 8009752:	e7f6      	b.n	8009742 <_dtoa_r+0x8ea>
 8009754:	9b07      	ldr	r3, [sp, #28]
 8009756:	9704      	str	r7, [sp, #16]
 8009758:	2b00      	cmp	r3, #0
 800975a:	dc20      	bgt.n	800979e <_dtoa_r+0x946>
 800975c:	9308      	str	r3, [sp, #32]
 800975e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009760:	2b02      	cmp	r3, #2
 8009762:	dd1e      	ble.n	80097a2 <_dtoa_r+0x94a>
 8009764:	9b08      	ldr	r3, [sp, #32]
 8009766:	2b00      	cmp	r3, #0
 8009768:	f47f aebc 	bne.w	80094e4 <_dtoa_r+0x68c>
 800976c:	4621      	mov	r1, r4
 800976e:	2205      	movs	r2, #5
 8009770:	4658      	mov	r0, fp
 8009772:	f000 f9e3 	bl	8009b3c <__multadd>
 8009776:	4601      	mov	r1, r0
 8009778:	4604      	mov	r4, r0
 800977a:	4648      	mov	r0, r9
 800977c:	f000 fbf4 	bl	8009f68 <__mcmp>
 8009780:	2800      	cmp	r0, #0
 8009782:	f77f aeaf 	ble.w	80094e4 <_dtoa_r+0x68c>
 8009786:	2331      	movs	r3, #49	@ 0x31
 8009788:	4656      	mov	r6, sl
 800978a:	f806 3b01 	strb.w	r3, [r6], #1
 800978e:	9b04      	ldr	r3, [sp, #16]
 8009790:	3301      	adds	r3, #1
 8009792:	9304      	str	r3, [sp, #16]
 8009794:	e6aa      	b.n	80094ec <_dtoa_r+0x694>
 8009796:	9c07      	ldr	r4, [sp, #28]
 8009798:	9704      	str	r7, [sp, #16]
 800979a:	4625      	mov	r5, r4
 800979c:	e7f3      	b.n	8009786 <_dtoa_r+0x92e>
 800979e:	9b07      	ldr	r3, [sp, #28]
 80097a0:	9308      	str	r3, [sp, #32]
 80097a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 8104 	beq.w	80099b2 <_dtoa_r+0xb5a>
 80097aa:	2e00      	cmp	r6, #0
 80097ac:	dd05      	ble.n	80097ba <_dtoa_r+0x962>
 80097ae:	4629      	mov	r1, r5
 80097b0:	4632      	mov	r2, r6
 80097b2:	4658      	mov	r0, fp
 80097b4:	f000 fb6c 	bl	8009e90 <__lshift>
 80097b8:	4605      	mov	r5, r0
 80097ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d05a      	beq.n	8009876 <_dtoa_r+0xa1e>
 80097c0:	4658      	mov	r0, fp
 80097c2:	6869      	ldr	r1, [r5, #4]
 80097c4:	f000 f958 	bl	8009a78 <_Balloc>
 80097c8:	4606      	mov	r6, r0
 80097ca:	b928      	cbnz	r0, 80097d8 <_dtoa_r+0x980>
 80097cc:	4602      	mov	r2, r0
 80097ce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80097d2:	4b83      	ldr	r3, [pc, #524]	@ (80099e0 <_dtoa_r+0xb88>)
 80097d4:	f7ff bb54 	b.w	8008e80 <_dtoa_r+0x28>
 80097d8:	692a      	ldr	r2, [r5, #16]
 80097da:	f105 010c 	add.w	r1, r5, #12
 80097de:	3202      	adds	r2, #2
 80097e0:	0092      	lsls	r2, r2, #2
 80097e2:	300c      	adds	r0, #12
 80097e4:	f000 fd70 	bl	800a2c8 <memcpy>
 80097e8:	2201      	movs	r2, #1
 80097ea:	4631      	mov	r1, r6
 80097ec:	4658      	mov	r0, fp
 80097ee:	f000 fb4f 	bl	8009e90 <__lshift>
 80097f2:	462f      	mov	r7, r5
 80097f4:	4605      	mov	r5, r0
 80097f6:	f10a 0301 	add.w	r3, sl, #1
 80097fa:	9307      	str	r3, [sp, #28]
 80097fc:	9b08      	ldr	r3, [sp, #32]
 80097fe:	4453      	add	r3, sl
 8009800:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009802:	9b02      	ldr	r3, [sp, #8]
 8009804:	f003 0301 	and.w	r3, r3, #1
 8009808:	930a      	str	r3, [sp, #40]	@ 0x28
 800980a:	9b07      	ldr	r3, [sp, #28]
 800980c:	4621      	mov	r1, r4
 800980e:	3b01      	subs	r3, #1
 8009810:	4648      	mov	r0, r9
 8009812:	9302      	str	r3, [sp, #8]
 8009814:	f7ff fa97 	bl	8008d46 <quorem>
 8009818:	4639      	mov	r1, r7
 800981a:	9008      	str	r0, [sp, #32]
 800981c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009820:	4648      	mov	r0, r9
 8009822:	f000 fba1 	bl	8009f68 <__mcmp>
 8009826:	462a      	mov	r2, r5
 8009828:	9009      	str	r0, [sp, #36]	@ 0x24
 800982a:	4621      	mov	r1, r4
 800982c:	4658      	mov	r0, fp
 800982e:	f000 fbb7 	bl	8009fa0 <__mdiff>
 8009832:	68c2      	ldr	r2, [r0, #12]
 8009834:	4606      	mov	r6, r0
 8009836:	bb02      	cbnz	r2, 800987a <_dtoa_r+0xa22>
 8009838:	4601      	mov	r1, r0
 800983a:	4648      	mov	r0, r9
 800983c:	f000 fb94 	bl	8009f68 <__mcmp>
 8009840:	4602      	mov	r2, r0
 8009842:	4631      	mov	r1, r6
 8009844:	4658      	mov	r0, fp
 8009846:	920c      	str	r2, [sp, #48]	@ 0x30
 8009848:	f000 f956 	bl	8009af8 <_Bfree>
 800984c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800984e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009850:	9e07      	ldr	r6, [sp, #28]
 8009852:	ea43 0102 	orr.w	r1, r3, r2
 8009856:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009858:	4319      	orrs	r1, r3
 800985a:	d110      	bne.n	800987e <_dtoa_r+0xa26>
 800985c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009860:	d029      	beq.n	80098b6 <_dtoa_r+0xa5e>
 8009862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009864:	2b00      	cmp	r3, #0
 8009866:	dd02      	ble.n	800986e <_dtoa_r+0xa16>
 8009868:	9b08      	ldr	r3, [sp, #32]
 800986a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800986e:	9b02      	ldr	r3, [sp, #8]
 8009870:	f883 8000 	strb.w	r8, [r3]
 8009874:	e63b      	b.n	80094ee <_dtoa_r+0x696>
 8009876:	4628      	mov	r0, r5
 8009878:	e7bb      	b.n	80097f2 <_dtoa_r+0x99a>
 800987a:	2201      	movs	r2, #1
 800987c:	e7e1      	b.n	8009842 <_dtoa_r+0x9ea>
 800987e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009880:	2b00      	cmp	r3, #0
 8009882:	db04      	blt.n	800988e <_dtoa_r+0xa36>
 8009884:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009886:	430b      	orrs	r3, r1
 8009888:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800988a:	430b      	orrs	r3, r1
 800988c:	d120      	bne.n	80098d0 <_dtoa_r+0xa78>
 800988e:	2a00      	cmp	r2, #0
 8009890:	dded      	ble.n	800986e <_dtoa_r+0xa16>
 8009892:	4649      	mov	r1, r9
 8009894:	2201      	movs	r2, #1
 8009896:	4658      	mov	r0, fp
 8009898:	f000 fafa 	bl	8009e90 <__lshift>
 800989c:	4621      	mov	r1, r4
 800989e:	4681      	mov	r9, r0
 80098a0:	f000 fb62 	bl	8009f68 <__mcmp>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	dc03      	bgt.n	80098b0 <_dtoa_r+0xa58>
 80098a8:	d1e1      	bne.n	800986e <_dtoa_r+0xa16>
 80098aa:	f018 0f01 	tst.w	r8, #1
 80098ae:	d0de      	beq.n	800986e <_dtoa_r+0xa16>
 80098b0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80098b4:	d1d8      	bne.n	8009868 <_dtoa_r+0xa10>
 80098b6:	2339      	movs	r3, #57	@ 0x39
 80098b8:	9a02      	ldr	r2, [sp, #8]
 80098ba:	7013      	strb	r3, [r2, #0]
 80098bc:	4633      	mov	r3, r6
 80098be:	461e      	mov	r6, r3
 80098c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80098c4:	3b01      	subs	r3, #1
 80098c6:	2a39      	cmp	r2, #57	@ 0x39
 80098c8:	d052      	beq.n	8009970 <_dtoa_r+0xb18>
 80098ca:	3201      	adds	r2, #1
 80098cc:	701a      	strb	r2, [r3, #0]
 80098ce:	e60e      	b.n	80094ee <_dtoa_r+0x696>
 80098d0:	2a00      	cmp	r2, #0
 80098d2:	dd07      	ble.n	80098e4 <_dtoa_r+0xa8c>
 80098d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80098d8:	d0ed      	beq.n	80098b6 <_dtoa_r+0xa5e>
 80098da:	9a02      	ldr	r2, [sp, #8]
 80098dc:	f108 0301 	add.w	r3, r8, #1
 80098e0:	7013      	strb	r3, [r2, #0]
 80098e2:	e604      	b.n	80094ee <_dtoa_r+0x696>
 80098e4:	9b07      	ldr	r3, [sp, #28]
 80098e6:	9a07      	ldr	r2, [sp, #28]
 80098e8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80098ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d028      	beq.n	8009944 <_dtoa_r+0xaec>
 80098f2:	4649      	mov	r1, r9
 80098f4:	2300      	movs	r3, #0
 80098f6:	220a      	movs	r2, #10
 80098f8:	4658      	mov	r0, fp
 80098fa:	f000 f91f 	bl	8009b3c <__multadd>
 80098fe:	42af      	cmp	r7, r5
 8009900:	4681      	mov	r9, r0
 8009902:	f04f 0300 	mov.w	r3, #0
 8009906:	f04f 020a 	mov.w	r2, #10
 800990a:	4639      	mov	r1, r7
 800990c:	4658      	mov	r0, fp
 800990e:	d107      	bne.n	8009920 <_dtoa_r+0xac8>
 8009910:	f000 f914 	bl	8009b3c <__multadd>
 8009914:	4607      	mov	r7, r0
 8009916:	4605      	mov	r5, r0
 8009918:	9b07      	ldr	r3, [sp, #28]
 800991a:	3301      	adds	r3, #1
 800991c:	9307      	str	r3, [sp, #28]
 800991e:	e774      	b.n	800980a <_dtoa_r+0x9b2>
 8009920:	f000 f90c 	bl	8009b3c <__multadd>
 8009924:	4629      	mov	r1, r5
 8009926:	4607      	mov	r7, r0
 8009928:	2300      	movs	r3, #0
 800992a:	220a      	movs	r2, #10
 800992c:	4658      	mov	r0, fp
 800992e:	f000 f905 	bl	8009b3c <__multadd>
 8009932:	4605      	mov	r5, r0
 8009934:	e7f0      	b.n	8009918 <_dtoa_r+0xac0>
 8009936:	9b08      	ldr	r3, [sp, #32]
 8009938:	2700      	movs	r7, #0
 800993a:	2b00      	cmp	r3, #0
 800993c:	bfcc      	ite	gt
 800993e:	461e      	movgt	r6, r3
 8009940:	2601      	movle	r6, #1
 8009942:	4456      	add	r6, sl
 8009944:	4649      	mov	r1, r9
 8009946:	2201      	movs	r2, #1
 8009948:	4658      	mov	r0, fp
 800994a:	f000 faa1 	bl	8009e90 <__lshift>
 800994e:	4621      	mov	r1, r4
 8009950:	4681      	mov	r9, r0
 8009952:	f000 fb09 	bl	8009f68 <__mcmp>
 8009956:	2800      	cmp	r0, #0
 8009958:	dcb0      	bgt.n	80098bc <_dtoa_r+0xa64>
 800995a:	d102      	bne.n	8009962 <_dtoa_r+0xb0a>
 800995c:	f018 0f01 	tst.w	r8, #1
 8009960:	d1ac      	bne.n	80098bc <_dtoa_r+0xa64>
 8009962:	4633      	mov	r3, r6
 8009964:	461e      	mov	r6, r3
 8009966:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800996a:	2a30      	cmp	r2, #48	@ 0x30
 800996c:	d0fa      	beq.n	8009964 <_dtoa_r+0xb0c>
 800996e:	e5be      	b.n	80094ee <_dtoa_r+0x696>
 8009970:	459a      	cmp	sl, r3
 8009972:	d1a4      	bne.n	80098be <_dtoa_r+0xa66>
 8009974:	9b04      	ldr	r3, [sp, #16]
 8009976:	3301      	adds	r3, #1
 8009978:	9304      	str	r3, [sp, #16]
 800997a:	2331      	movs	r3, #49	@ 0x31
 800997c:	f88a 3000 	strb.w	r3, [sl]
 8009980:	e5b5      	b.n	80094ee <_dtoa_r+0x696>
 8009982:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009984:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80099e4 <_dtoa_r+0xb8c>
 8009988:	b11b      	cbz	r3, 8009992 <_dtoa_r+0xb3a>
 800998a:	f10a 0308 	add.w	r3, sl, #8
 800998e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	4650      	mov	r0, sl
 8009994:	b017      	add	sp, #92	@ 0x5c
 8009996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800999c:	2b01      	cmp	r3, #1
 800999e:	f77f ae3d 	ble.w	800961c <_dtoa_r+0x7c4>
 80099a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80099a6:	2001      	movs	r0, #1
 80099a8:	e65b      	b.n	8009662 <_dtoa_r+0x80a>
 80099aa:	9b08      	ldr	r3, [sp, #32]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f77f aed6 	ble.w	800975e <_dtoa_r+0x906>
 80099b2:	4656      	mov	r6, sl
 80099b4:	4621      	mov	r1, r4
 80099b6:	4648      	mov	r0, r9
 80099b8:	f7ff f9c5 	bl	8008d46 <quorem>
 80099bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80099c0:	9b08      	ldr	r3, [sp, #32]
 80099c2:	f806 8b01 	strb.w	r8, [r6], #1
 80099c6:	eba6 020a 	sub.w	r2, r6, sl
 80099ca:	4293      	cmp	r3, r2
 80099cc:	ddb3      	ble.n	8009936 <_dtoa_r+0xade>
 80099ce:	4649      	mov	r1, r9
 80099d0:	2300      	movs	r3, #0
 80099d2:	220a      	movs	r2, #10
 80099d4:	4658      	mov	r0, fp
 80099d6:	f000 f8b1 	bl	8009b3c <__multadd>
 80099da:	4681      	mov	r9, r0
 80099dc:	e7ea      	b.n	80099b4 <_dtoa_r+0xb5c>
 80099de:	bf00      	nop
 80099e0:	0800aac2 	.word	0x0800aac2
 80099e4:	0800aa46 	.word	0x0800aa46

080099e8 <_free_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4605      	mov	r5, r0
 80099ec:	2900      	cmp	r1, #0
 80099ee:	d040      	beq.n	8009a72 <_free_r+0x8a>
 80099f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f4:	1f0c      	subs	r4, r1, #4
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	bfb8      	it	lt
 80099fa:	18e4      	addlt	r4, r4, r3
 80099fc:	f7fe fb82 	bl	8008104 <__malloc_lock>
 8009a00:	4a1c      	ldr	r2, [pc, #112]	@ (8009a74 <_free_r+0x8c>)
 8009a02:	6813      	ldr	r3, [r2, #0]
 8009a04:	b933      	cbnz	r3, 8009a14 <_free_r+0x2c>
 8009a06:	6063      	str	r3, [r4, #4]
 8009a08:	6014      	str	r4, [r2, #0]
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a10:	f7fe bb7e 	b.w	8008110 <__malloc_unlock>
 8009a14:	42a3      	cmp	r3, r4
 8009a16:	d908      	bls.n	8009a2a <_free_r+0x42>
 8009a18:	6820      	ldr	r0, [r4, #0]
 8009a1a:	1821      	adds	r1, r4, r0
 8009a1c:	428b      	cmp	r3, r1
 8009a1e:	bf01      	itttt	eq
 8009a20:	6819      	ldreq	r1, [r3, #0]
 8009a22:	685b      	ldreq	r3, [r3, #4]
 8009a24:	1809      	addeq	r1, r1, r0
 8009a26:	6021      	streq	r1, [r4, #0]
 8009a28:	e7ed      	b.n	8009a06 <_free_r+0x1e>
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	b10b      	cbz	r3, 8009a34 <_free_r+0x4c>
 8009a30:	42a3      	cmp	r3, r4
 8009a32:	d9fa      	bls.n	8009a2a <_free_r+0x42>
 8009a34:	6811      	ldr	r1, [r2, #0]
 8009a36:	1850      	adds	r0, r2, r1
 8009a38:	42a0      	cmp	r0, r4
 8009a3a:	d10b      	bne.n	8009a54 <_free_r+0x6c>
 8009a3c:	6820      	ldr	r0, [r4, #0]
 8009a3e:	4401      	add	r1, r0
 8009a40:	1850      	adds	r0, r2, r1
 8009a42:	4283      	cmp	r3, r0
 8009a44:	6011      	str	r1, [r2, #0]
 8009a46:	d1e0      	bne.n	8009a0a <_free_r+0x22>
 8009a48:	6818      	ldr	r0, [r3, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	4408      	add	r0, r1
 8009a4e:	6010      	str	r0, [r2, #0]
 8009a50:	6053      	str	r3, [r2, #4]
 8009a52:	e7da      	b.n	8009a0a <_free_r+0x22>
 8009a54:	d902      	bls.n	8009a5c <_free_r+0x74>
 8009a56:	230c      	movs	r3, #12
 8009a58:	602b      	str	r3, [r5, #0]
 8009a5a:	e7d6      	b.n	8009a0a <_free_r+0x22>
 8009a5c:	6820      	ldr	r0, [r4, #0]
 8009a5e:	1821      	adds	r1, r4, r0
 8009a60:	428b      	cmp	r3, r1
 8009a62:	bf01      	itttt	eq
 8009a64:	6819      	ldreq	r1, [r3, #0]
 8009a66:	685b      	ldreq	r3, [r3, #4]
 8009a68:	1809      	addeq	r1, r1, r0
 8009a6a:	6021      	streq	r1, [r4, #0]
 8009a6c:	6063      	str	r3, [r4, #4]
 8009a6e:	6054      	str	r4, [r2, #4]
 8009a70:	e7cb      	b.n	8009a0a <_free_r+0x22>
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	20001730 	.word	0x20001730

08009a78 <_Balloc>:
 8009a78:	b570      	push	{r4, r5, r6, lr}
 8009a7a:	69c6      	ldr	r6, [r0, #28]
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	460d      	mov	r5, r1
 8009a80:	b976      	cbnz	r6, 8009aa0 <_Balloc+0x28>
 8009a82:	2010      	movs	r0, #16
 8009a84:	f7fe fa94 	bl	8007fb0 <malloc>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	61e0      	str	r0, [r4, #28]
 8009a8c:	b920      	cbnz	r0, 8009a98 <_Balloc+0x20>
 8009a8e:	216b      	movs	r1, #107	@ 0x6b
 8009a90:	4b17      	ldr	r3, [pc, #92]	@ (8009af0 <_Balloc+0x78>)
 8009a92:	4818      	ldr	r0, [pc, #96]	@ (8009af4 <_Balloc+0x7c>)
 8009a94:	f000 fc26 	bl	800a2e4 <__assert_func>
 8009a98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a9c:	6006      	str	r6, [r0, #0]
 8009a9e:	60c6      	str	r6, [r0, #12]
 8009aa0:	69e6      	ldr	r6, [r4, #28]
 8009aa2:	68f3      	ldr	r3, [r6, #12]
 8009aa4:	b183      	cbz	r3, 8009ac8 <_Balloc+0x50>
 8009aa6:	69e3      	ldr	r3, [r4, #28]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009aae:	b9b8      	cbnz	r0, 8009ae0 <_Balloc+0x68>
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ab6:	1d72      	adds	r2, r6, #5
 8009ab8:	4620      	mov	r0, r4
 8009aba:	0092      	lsls	r2, r2, #2
 8009abc:	f000 fc30 	bl	800a320 <_calloc_r>
 8009ac0:	b160      	cbz	r0, 8009adc <_Balloc+0x64>
 8009ac2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ac6:	e00e      	b.n	8009ae6 <_Balloc+0x6e>
 8009ac8:	2221      	movs	r2, #33	@ 0x21
 8009aca:	2104      	movs	r1, #4
 8009acc:	4620      	mov	r0, r4
 8009ace:	f000 fc27 	bl	800a320 <_calloc_r>
 8009ad2:	69e3      	ldr	r3, [r4, #28]
 8009ad4:	60f0      	str	r0, [r6, #12]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1e4      	bne.n	8009aa6 <_Balloc+0x2e>
 8009adc:	2000      	movs	r0, #0
 8009ade:	bd70      	pop	{r4, r5, r6, pc}
 8009ae0:	6802      	ldr	r2, [r0, #0]
 8009ae2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009aec:	e7f7      	b.n	8009ade <_Balloc+0x66>
 8009aee:	bf00      	nop
 8009af0:	0800aa53 	.word	0x0800aa53
 8009af4:	0800aad3 	.word	0x0800aad3

08009af8 <_Bfree>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	69c6      	ldr	r6, [r0, #28]
 8009afc:	4605      	mov	r5, r0
 8009afe:	460c      	mov	r4, r1
 8009b00:	b976      	cbnz	r6, 8009b20 <_Bfree+0x28>
 8009b02:	2010      	movs	r0, #16
 8009b04:	f7fe fa54 	bl	8007fb0 <malloc>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	61e8      	str	r0, [r5, #28]
 8009b0c:	b920      	cbnz	r0, 8009b18 <_Bfree+0x20>
 8009b0e:	218f      	movs	r1, #143	@ 0x8f
 8009b10:	4b08      	ldr	r3, [pc, #32]	@ (8009b34 <_Bfree+0x3c>)
 8009b12:	4809      	ldr	r0, [pc, #36]	@ (8009b38 <_Bfree+0x40>)
 8009b14:	f000 fbe6 	bl	800a2e4 <__assert_func>
 8009b18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b1c:	6006      	str	r6, [r0, #0]
 8009b1e:	60c6      	str	r6, [r0, #12]
 8009b20:	b13c      	cbz	r4, 8009b32 <_Bfree+0x3a>
 8009b22:	69eb      	ldr	r3, [r5, #28]
 8009b24:	6862      	ldr	r2, [r4, #4]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b2c:	6021      	str	r1, [r4, #0]
 8009b2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
 8009b34:	0800aa53 	.word	0x0800aa53
 8009b38:	0800aad3 	.word	0x0800aad3

08009b3c <__multadd>:
 8009b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b40:	4607      	mov	r7, r0
 8009b42:	460c      	mov	r4, r1
 8009b44:	461e      	mov	r6, r3
 8009b46:	2000      	movs	r0, #0
 8009b48:	690d      	ldr	r5, [r1, #16]
 8009b4a:	f101 0c14 	add.w	ip, r1, #20
 8009b4e:	f8dc 3000 	ldr.w	r3, [ip]
 8009b52:	3001      	adds	r0, #1
 8009b54:	b299      	uxth	r1, r3
 8009b56:	fb02 6101 	mla	r1, r2, r1, r6
 8009b5a:	0c1e      	lsrs	r6, r3, #16
 8009b5c:	0c0b      	lsrs	r3, r1, #16
 8009b5e:	fb02 3306 	mla	r3, r2, r6, r3
 8009b62:	b289      	uxth	r1, r1
 8009b64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b68:	4285      	cmp	r5, r0
 8009b6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b6e:	f84c 1b04 	str.w	r1, [ip], #4
 8009b72:	dcec      	bgt.n	8009b4e <__multadd+0x12>
 8009b74:	b30e      	cbz	r6, 8009bba <__multadd+0x7e>
 8009b76:	68a3      	ldr	r3, [r4, #8]
 8009b78:	42ab      	cmp	r3, r5
 8009b7a:	dc19      	bgt.n	8009bb0 <__multadd+0x74>
 8009b7c:	6861      	ldr	r1, [r4, #4]
 8009b7e:	4638      	mov	r0, r7
 8009b80:	3101      	adds	r1, #1
 8009b82:	f7ff ff79 	bl	8009a78 <_Balloc>
 8009b86:	4680      	mov	r8, r0
 8009b88:	b928      	cbnz	r0, 8009b96 <__multadd+0x5a>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	21ba      	movs	r1, #186	@ 0xba
 8009b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc0 <__multadd+0x84>)
 8009b90:	480c      	ldr	r0, [pc, #48]	@ (8009bc4 <__multadd+0x88>)
 8009b92:	f000 fba7 	bl	800a2e4 <__assert_func>
 8009b96:	6922      	ldr	r2, [r4, #16]
 8009b98:	f104 010c 	add.w	r1, r4, #12
 8009b9c:	3202      	adds	r2, #2
 8009b9e:	0092      	lsls	r2, r2, #2
 8009ba0:	300c      	adds	r0, #12
 8009ba2:	f000 fb91 	bl	800a2c8 <memcpy>
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	4638      	mov	r0, r7
 8009baa:	f7ff ffa5 	bl	8009af8 <_Bfree>
 8009bae:	4644      	mov	r4, r8
 8009bb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009bb4:	3501      	adds	r5, #1
 8009bb6:	615e      	str	r6, [r3, #20]
 8009bb8:	6125      	str	r5, [r4, #16]
 8009bba:	4620      	mov	r0, r4
 8009bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc0:	0800aac2 	.word	0x0800aac2
 8009bc4:	0800aad3 	.word	0x0800aad3

08009bc8 <__hi0bits>:
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009bce:	bf3a      	itte	cc
 8009bd0:	0403      	lslcc	r3, r0, #16
 8009bd2:	2010      	movcc	r0, #16
 8009bd4:	2000      	movcs	r0, #0
 8009bd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009bda:	bf3c      	itt	cc
 8009bdc:	021b      	lslcc	r3, r3, #8
 8009bde:	3008      	addcc	r0, #8
 8009be0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009be4:	bf3c      	itt	cc
 8009be6:	011b      	lslcc	r3, r3, #4
 8009be8:	3004      	addcc	r0, #4
 8009bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bee:	bf3c      	itt	cc
 8009bf0:	009b      	lslcc	r3, r3, #2
 8009bf2:	3002      	addcc	r0, #2
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	db05      	blt.n	8009c04 <__hi0bits+0x3c>
 8009bf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009bfc:	f100 0001 	add.w	r0, r0, #1
 8009c00:	bf08      	it	eq
 8009c02:	2020      	moveq	r0, #32
 8009c04:	4770      	bx	lr

08009c06 <__lo0bits>:
 8009c06:	6803      	ldr	r3, [r0, #0]
 8009c08:	4602      	mov	r2, r0
 8009c0a:	f013 0007 	ands.w	r0, r3, #7
 8009c0e:	d00b      	beq.n	8009c28 <__lo0bits+0x22>
 8009c10:	07d9      	lsls	r1, r3, #31
 8009c12:	d421      	bmi.n	8009c58 <__lo0bits+0x52>
 8009c14:	0798      	lsls	r0, r3, #30
 8009c16:	bf49      	itett	mi
 8009c18:	085b      	lsrmi	r3, r3, #1
 8009c1a:	089b      	lsrpl	r3, r3, #2
 8009c1c:	2001      	movmi	r0, #1
 8009c1e:	6013      	strmi	r3, [r2, #0]
 8009c20:	bf5c      	itt	pl
 8009c22:	2002      	movpl	r0, #2
 8009c24:	6013      	strpl	r3, [r2, #0]
 8009c26:	4770      	bx	lr
 8009c28:	b299      	uxth	r1, r3
 8009c2a:	b909      	cbnz	r1, 8009c30 <__lo0bits+0x2a>
 8009c2c:	2010      	movs	r0, #16
 8009c2e:	0c1b      	lsrs	r3, r3, #16
 8009c30:	b2d9      	uxtb	r1, r3
 8009c32:	b909      	cbnz	r1, 8009c38 <__lo0bits+0x32>
 8009c34:	3008      	adds	r0, #8
 8009c36:	0a1b      	lsrs	r3, r3, #8
 8009c38:	0719      	lsls	r1, r3, #28
 8009c3a:	bf04      	itt	eq
 8009c3c:	091b      	lsreq	r3, r3, #4
 8009c3e:	3004      	addeq	r0, #4
 8009c40:	0799      	lsls	r1, r3, #30
 8009c42:	bf04      	itt	eq
 8009c44:	089b      	lsreq	r3, r3, #2
 8009c46:	3002      	addeq	r0, #2
 8009c48:	07d9      	lsls	r1, r3, #31
 8009c4a:	d403      	bmi.n	8009c54 <__lo0bits+0x4e>
 8009c4c:	085b      	lsrs	r3, r3, #1
 8009c4e:	f100 0001 	add.w	r0, r0, #1
 8009c52:	d003      	beq.n	8009c5c <__lo0bits+0x56>
 8009c54:	6013      	str	r3, [r2, #0]
 8009c56:	4770      	bx	lr
 8009c58:	2000      	movs	r0, #0
 8009c5a:	4770      	bx	lr
 8009c5c:	2020      	movs	r0, #32
 8009c5e:	4770      	bx	lr

08009c60 <__i2b>:
 8009c60:	b510      	push	{r4, lr}
 8009c62:	460c      	mov	r4, r1
 8009c64:	2101      	movs	r1, #1
 8009c66:	f7ff ff07 	bl	8009a78 <_Balloc>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	b928      	cbnz	r0, 8009c7a <__i2b+0x1a>
 8009c6e:	f240 1145 	movw	r1, #325	@ 0x145
 8009c72:	4b04      	ldr	r3, [pc, #16]	@ (8009c84 <__i2b+0x24>)
 8009c74:	4804      	ldr	r0, [pc, #16]	@ (8009c88 <__i2b+0x28>)
 8009c76:	f000 fb35 	bl	800a2e4 <__assert_func>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	6144      	str	r4, [r0, #20]
 8009c7e:	6103      	str	r3, [r0, #16]
 8009c80:	bd10      	pop	{r4, pc}
 8009c82:	bf00      	nop
 8009c84:	0800aac2 	.word	0x0800aac2
 8009c88:	0800aad3 	.word	0x0800aad3

08009c8c <__multiply>:
 8009c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	4614      	mov	r4, r2
 8009c92:	690a      	ldr	r2, [r1, #16]
 8009c94:	6923      	ldr	r3, [r4, #16]
 8009c96:	460f      	mov	r7, r1
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	bfa2      	ittt	ge
 8009c9c:	4623      	movge	r3, r4
 8009c9e:	460c      	movge	r4, r1
 8009ca0:	461f      	movge	r7, r3
 8009ca2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009ca6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009caa:	68a3      	ldr	r3, [r4, #8]
 8009cac:	6861      	ldr	r1, [r4, #4]
 8009cae:	eb0a 0609 	add.w	r6, sl, r9
 8009cb2:	42b3      	cmp	r3, r6
 8009cb4:	b085      	sub	sp, #20
 8009cb6:	bfb8      	it	lt
 8009cb8:	3101      	addlt	r1, #1
 8009cba:	f7ff fedd 	bl	8009a78 <_Balloc>
 8009cbe:	b930      	cbnz	r0, 8009cce <__multiply+0x42>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009cc6:	4b43      	ldr	r3, [pc, #268]	@ (8009dd4 <__multiply+0x148>)
 8009cc8:	4843      	ldr	r0, [pc, #268]	@ (8009dd8 <__multiply+0x14c>)
 8009cca:	f000 fb0b 	bl	800a2e4 <__assert_func>
 8009cce:	f100 0514 	add.w	r5, r0, #20
 8009cd2:	462b      	mov	r3, r5
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009cda:	4543      	cmp	r3, r8
 8009cdc:	d321      	bcc.n	8009d22 <__multiply+0x96>
 8009cde:	f107 0114 	add.w	r1, r7, #20
 8009ce2:	f104 0214 	add.w	r2, r4, #20
 8009ce6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009cea:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009cee:	9302      	str	r3, [sp, #8]
 8009cf0:	1b13      	subs	r3, r2, r4
 8009cf2:	3b15      	subs	r3, #21
 8009cf4:	f023 0303 	bic.w	r3, r3, #3
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	f104 0715 	add.w	r7, r4, #21
 8009cfe:	42ba      	cmp	r2, r7
 8009d00:	bf38      	it	cc
 8009d02:	2304      	movcc	r3, #4
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	9b02      	ldr	r3, [sp, #8]
 8009d08:	9103      	str	r1, [sp, #12]
 8009d0a:	428b      	cmp	r3, r1
 8009d0c:	d80c      	bhi.n	8009d28 <__multiply+0x9c>
 8009d0e:	2e00      	cmp	r6, #0
 8009d10:	dd03      	ble.n	8009d1a <__multiply+0x8e>
 8009d12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d05a      	beq.n	8009dd0 <__multiply+0x144>
 8009d1a:	6106      	str	r6, [r0, #16]
 8009d1c:	b005      	add	sp, #20
 8009d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d22:	f843 2b04 	str.w	r2, [r3], #4
 8009d26:	e7d8      	b.n	8009cda <__multiply+0x4e>
 8009d28:	f8b1 a000 	ldrh.w	sl, [r1]
 8009d2c:	f1ba 0f00 	cmp.w	sl, #0
 8009d30:	d023      	beq.n	8009d7a <__multiply+0xee>
 8009d32:	46a9      	mov	r9, r5
 8009d34:	f04f 0c00 	mov.w	ip, #0
 8009d38:	f104 0e14 	add.w	lr, r4, #20
 8009d3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d40:	f8d9 3000 	ldr.w	r3, [r9]
 8009d44:	fa1f fb87 	uxth.w	fp, r7
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	fb0a 330b 	mla	r3, sl, fp, r3
 8009d4e:	4463      	add	r3, ip
 8009d50:	f8d9 c000 	ldr.w	ip, [r9]
 8009d54:	0c3f      	lsrs	r7, r7, #16
 8009d56:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009d5a:	fb0a c707 	mla	r7, sl, r7, ip
 8009d5e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d68:	4572      	cmp	r2, lr
 8009d6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d6e:	f849 3b04 	str.w	r3, [r9], #4
 8009d72:	d8e3      	bhi.n	8009d3c <__multiply+0xb0>
 8009d74:	9b01      	ldr	r3, [sp, #4]
 8009d76:	f845 c003 	str.w	ip, [r5, r3]
 8009d7a:	9b03      	ldr	r3, [sp, #12]
 8009d7c:	3104      	adds	r1, #4
 8009d7e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009d82:	f1b9 0f00 	cmp.w	r9, #0
 8009d86:	d021      	beq.n	8009dcc <__multiply+0x140>
 8009d88:	46ae      	mov	lr, r5
 8009d8a:	f04f 0a00 	mov.w	sl, #0
 8009d8e:	682b      	ldr	r3, [r5, #0]
 8009d90:	f104 0c14 	add.w	ip, r4, #20
 8009d94:	f8bc b000 	ldrh.w	fp, [ip]
 8009d98:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	fb09 770b 	mla	r7, r9, fp, r7
 8009da2:	4457      	add	r7, sl
 8009da4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009da8:	f84e 3b04 	str.w	r3, [lr], #4
 8009dac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009db0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009db4:	f8be 3000 	ldrh.w	r3, [lr]
 8009db8:	4562      	cmp	r2, ip
 8009dba:	fb09 330a 	mla	r3, r9, sl, r3
 8009dbe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009dc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009dc6:	d8e5      	bhi.n	8009d94 <__multiply+0x108>
 8009dc8:	9f01      	ldr	r7, [sp, #4]
 8009dca:	51eb      	str	r3, [r5, r7]
 8009dcc:	3504      	adds	r5, #4
 8009dce:	e79a      	b.n	8009d06 <__multiply+0x7a>
 8009dd0:	3e01      	subs	r6, #1
 8009dd2:	e79c      	b.n	8009d0e <__multiply+0x82>
 8009dd4:	0800aac2 	.word	0x0800aac2
 8009dd8:	0800aad3 	.word	0x0800aad3

08009ddc <__pow5mult>:
 8009ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009de0:	4615      	mov	r5, r2
 8009de2:	f012 0203 	ands.w	r2, r2, #3
 8009de6:	4607      	mov	r7, r0
 8009de8:	460e      	mov	r6, r1
 8009dea:	d007      	beq.n	8009dfc <__pow5mult+0x20>
 8009dec:	4c25      	ldr	r4, [pc, #148]	@ (8009e84 <__pow5mult+0xa8>)
 8009dee:	3a01      	subs	r2, #1
 8009df0:	2300      	movs	r3, #0
 8009df2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009df6:	f7ff fea1 	bl	8009b3c <__multadd>
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	10ad      	asrs	r5, r5, #2
 8009dfe:	d03d      	beq.n	8009e7c <__pow5mult+0xa0>
 8009e00:	69fc      	ldr	r4, [r7, #28]
 8009e02:	b97c      	cbnz	r4, 8009e24 <__pow5mult+0x48>
 8009e04:	2010      	movs	r0, #16
 8009e06:	f7fe f8d3 	bl	8007fb0 <malloc>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	61f8      	str	r0, [r7, #28]
 8009e0e:	b928      	cbnz	r0, 8009e1c <__pow5mult+0x40>
 8009e10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009e14:	4b1c      	ldr	r3, [pc, #112]	@ (8009e88 <__pow5mult+0xac>)
 8009e16:	481d      	ldr	r0, [pc, #116]	@ (8009e8c <__pow5mult+0xb0>)
 8009e18:	f000 fa64 	bl	800a2e4 <__assert_func>
 8009e1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e20:	6004      	str	r4, [r0, #0]
 8009e22:	60c4      	str	r4, [r0, #12]
 8009e24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009e28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e2c:	b94c      	cbnz	r4, 8009e42 <__pow5mult+0x66>
 8009e2e:	f240 2171 	movw	r1, #625	@ 0x271
 8009e32:	4638      	mov	r0, r7
 8009e34:	f7ff ff14 	bl	8009c60 <__i2b>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e40:	6003      	str	r3, [r0, #0]
 8009e42:	f04f 0900 	mov.w	r9, #0
 8009e46:	07eb      	lsls	r3, r5, #31
 8009e48:	d50a      	bpl.n	8009e60 <__pow5mult+0x84>
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4622      	mov	r2, r4
 8009e4e:	4638      	mov	r0, r7
 8009e50:	f7ff ff1c 	bl	8009c8c <__multiply>
 8009e54:	4680      	mov	r8, r0
 8009e56:	4631      	mov	r1, r6
 8009e58:	4638      	mov	r0, r7
 8009e5a:	f7ff fe4d 	bl	8009af8 <_Bfree>
 8009e5e:	4646      	mov	r6, r8
 8009e60:	106d      	asrs	r5, r5, #1
 8009e62:	d00b      	beq.n	8009e7c <__pow5mult+0xa0>
 8009e64:	6820      	ldr	r0, [r4, #0]
 8009e66:	b938      	cbnz	r0, 8009e78 <__pow5mult+0x9c>
 8009e68:	4622      	mov	r2, r4
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	f7ff ff0d 	bl	8009c8c <__multiply>
 8009e72:	6020      	str	r0, [r4, #0]
 8009e74:	f8c0 9000 	str.w	r9, [r0]
 8009e78:	4604      	mov	r4, r0
 8009e7a:	e7e4      	b.n	8009e46 <__pow5mult+0x6a>
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e82:	bf00      	nop
 8009e84:	0800ab2c 	.word	0x0800ab2c
 8009e88:	0800aa53 	.word	0x0800aa53
 8009e8c:	0800aad3 	.word	0x0800aad3

08009e90 <__lshift>:
 8009e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e94:	460c      	mov	r4, r1
 8009e96:	4607      	mov	r7, r0
 8009e98:	4691      	mov	r9, r2
 8009e9a:	6923      	ldr	r3, [r4, #16]
 8009e9c:	6849      	ldr	r1, [r1, #4]
 8009e9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ea2:	68a3      	ldr	r3, [r4, #8]
 8009ea4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ea8:	f108 0601 	add.w	r6, r8, #1
 8009eac:	42b3      	cmp	r3, r6
 8009eae:	db0b      	blt.n	8009ec8 <__lshift+0x38>
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	f7ff fde1 	bl	8009a78 <_Balloc>
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	b948      	cbnz	r0, 8009ece <__lshift+0x3e>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009ec0:	4b27      	ldr	r3, [pc, #156]	@ (8009f60 <__lshift+0xd0>)
 8009ec2:	4828      	ldr	r0, [pc, #160]	@ (8009f64 <__lshift+0xd4>)
 8009ec4:	f000 fa0e 	bl	800a2e4 <__assert_func>
 8009ec8:	3101      	adds	r1, #1
 8009eca:	005b      	lsls	r3, r3, #1
 8009ecc:	e7ee      	b.n	8009eac <__lshift+0x1c>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f100 0114 	add.w	r1, r0, #20
 8009ed4:	f100 0210 	add.w	r2, r0, #16
 8009ed8:	4618      	mov	r0, r3
 8009eda:	4553      	cmp	r3, sl
 8009edc:	db33      	blt.n	8009f46 <__lshift+0xb6>
 8009ede:	6920      	ldr	r0, [r4, #16]
 8009ee0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ee4:	f104 0314 	add.w	r3, r4, #20
 8009ee8:	f019 091f 	ands.w	r9, r9, #31
 8009eec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ef0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ef4:	d02b      	beq.n	8009f4e <__lshift+0xbe>
 8009ef6:	468a      	mov	sl, r1
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f1c9 0e20 	rsb	lr, r9, #32
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	fa00 f009 	lsl.w	r0, r0, r9
 8009f04:	4310      	orrs	r0, r2
 8009f06:	f84a 0b04 	str.w	r0, [sl], #4
 8009f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f0e:	459c      	cmp	ip, r3
 8009f10:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f14:	d8f3      	bhi.n	8009efe <__lshift+0x6e>
 8009f16:	ebac 0304 	sub.w	r3, ip, r4
 8009f1a:	3b15      	subs	r3, #21
 8009f1c:	f023 0303 	bic.w	r3, r3, #3
 8009f20:	3304      	adds	r3, #4
 8009f22:	f104 0015 	add.w	r0, r4, #21
 8009f26:	4584      	cmp	ip, r0
 8009f28:	bf38      	it	cc
 8009f2a:	2304      	movcc	r3, #4
 8009f2c:	50ca      	str	r2, [r1, r3]
 8009f2e:	b10a      	cbz	r2, 8009f34 <__lshift+0xa4>
 8009f30:	f108 0602 	add.w	r6, r8, #2
 8009f34:	3e01      	subs	r6, #1
 8009f36:	4638      	mov	r0, r7
 8009f38:	4621      	mov	r1, r4
 8009f3a:	612e      	str	r6, [r5, #16]
 8009f3c:	f7ff fddc 	bl	8009af8 <_Bfree>
 8009f40:	4628      	mov	r0, r5
 8009f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f46:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	e7c5      	b.n	8009eda <__lshift+0x4a>
 8009f4e:	3904      	subs	r1, #4
 8009f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f54:	459c      	cmp	ip, r3
 8009f56:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f5a:	d8f9      	bhi.n	8009f50 <__lshift+0xc0>
 8009f5c:	e7ea      	b.n	8009f34 <__lshift+0xa4>
 8009f5e:	bf00      	nop
 8009f60:	0800aac2 	.word	0x0800aac2
 8009f64:	0800aad3 	.word	0x0800aad3

08009f68 <__mcmp>:
 8009f68:	4603      	mov	r3, r0
 8009f6a:	690a      	ldr	r2, [r1, #16]
 8009f6c:	6900      	ldr	r0, [r0, #16]
 8009f6e:	b530      	push	{r4, r5, lr}
 8009f70:	1a80      	subs	r0, r0, r2
 8009f72:	d10e      	bne.n	8009f92 <__mcmp+0x2a>
 8009f74:	3314      	adds	r3, #20
 8009f76:	3114      	adds	r1, #20
 8009f78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f88:	4295      	cmp	r5, r2
 8009f8a:	d003      	beq.n	8009f94 <__mcmp+0x2c>
 8009f8c:	d205      	bcs.n	8009f9a <__mcmp+0x32>
 8009f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f92:	bd30      	pop	{r4, r5, pc}
 8009f94:	42a3      	cmp	r3, r4
 8009f96:	d3f3      	bcc.n	8009f80 <__mcmp+0x18>
 8009f98:	e7fb      	b.n	8009f92 <__mcmp+0x2a>
 8009f9a:	2001      	movs	r0, #1
 8009f9c:	e7f9      	b.n	8009f92 <__mcmp+0x2a>
	...

08009fa0 <__mdiff>:
 8009fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa4:	4689      	mov	r9, r1
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	4611      	mov	r1, r2
 8009faa:	4648      	mov	r0, r9
 8009fac:	4614      	mov	r4, r2
 8009fae:	f7ff ffdb 	bl	8009f68 <__mcmp>
 8009fb2:	1e05      	subs	r5, r0, #0
 8009fb4:	d112      	bne.n	8009fdc <__mdiff+0x3c>
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f7ff fd5d 	bl	8009a78 <_Balloc>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	b928      	cbnz	r0, 8009fce <__mdiff+0x2e>
 8009fc2:	f240 2137 	movw	r1, #567	@ 0x237
 8009fc6:	4b3e      	ldr	r3, [pc, #248]	@ (800a0c0 <__mdiff+0x120>)
 8009fc8:	483e      	ldr	r0, [pc, #248]	@ (800a0c4 <__mdiff+0x124>)
 8009fca:	f000 f98b 	bl	800a2e4 <__assert_func>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	b003      	add	sp, #12
 8009fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fdc:	bfbc      	itt	lt
 8009fde:	464b      	movlt	r3, r9
 8009fe0:	46a1      	movlt	r9, r4
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009fe8:	bfba      	itte	lt
 8009fea:	461c      	movlt	r4, r3
 8009fec:	2501      	movlt	r5, #1
 8009fee:	2500      	movge	r5, #0
 8009ff0:	f7ff fd42 	bl	8009a78 <_Balloc>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	b918      	cbnz	r0, 800a000 <__mdiff+0x60>
 8009ff8:	f240 2145 	movw	r1, #581	@ 0x245
 8009ffc:	4b30      	ldr	r3, [pc, #192]	@ (800a0c0 <__mdiff+0x120>)
 8009ffe:	e7e3      	b.n	8009fc8 <__mdiff+0x28>
 800a000:	f100 0b14 	add.w	fp, r0, #20
 800a004:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a008:	f109 0310 	add.w	r3, r9, #16
 800a00c:	60c5      	str	r5, [r0, #12]
 800a00e:	f04f 0c00 	mov.w	ip, #0
 800a012:	f109 0514 	add.w	r5, r9, #20
 800a016:	46d9      	mov	r9, fp
 800a018:	6926      	ldr	r6, [r4, #16]
 800a01a:	f104 0e14 	add.w	lr, r4, #20
 800a01e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a022:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a026:	9301      	str	r3, [sp, #4]
 800a028:	9b01      	ldr	r3, [sp, #4]
 800a02a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a02e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a032:	b281      	uxth	r1, r0
 800a034:	9301      	str	r3, [sp, #4]
 800a036:	fa1f f38a 	uxth.w	r3, sl
 800a03a:	1a5b      	subs	r3, r3, r1
 800a03c:	0c00      	lsrs	r0, r0, #16
 800a03e:	4463      	add	r3, ip
 800a040:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a044:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a048:	b29b      	uxth	r3, r3
 800a04a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a04e:	4576      	cmp	r6, lr
 800a050:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a054:	f849 3b04 	str.w	r3, [r9], #4
 800a058:	d8e6      	bhi.n	800a028 <__mdiff+0x88>
 800a05a:	1b33      	subs	r3, r6, r4
 800a05c:	3b15      	subs	r3, #21
 800a05e:	f023 0303 	bic.w	r3, r3, #3
 800a062:	3415      	adds	r4, #21
 800a064:	3304      	adds	r3, #4
 800a066:	42a6      	cmp	r6, r4
 800a068:	bf38      	it	cc
 800a06a:	2304      	movcc	r3, #4
 800a06c:	441d      	add	r5, r3
 800a06e:	445b      	add	r3, fp
 800a070:	461e      	mov	r6, r3
 800a072:	462c      	mov	r4, r5
 800a074:	4544      	cmp	r4, r8
 800a076:	d30e      	bcc.n	800a096 <__mdiff+0xf6>
 800a078:	f108 0103 	add.w	r1, r8, #3
 800a07c:	1b49      	subs	r1, r1, r5
 800a07e:	f021 0103 	bic.w	r1, r1, #3
 800a082:	3d03      	subs	r5, #3
 800a084:	45a8      	cmp	r8, r5
 800a086:	bf38      	it	cc
 800a088:	2100      	movcc	r1, #0
 800a08a:	440b      	add	r3, r1
 800a08c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a090:	b199      	cbz	r1, 800a0ba <__mdiff+0x11a>
 800a092:	6117      	str	r7, [r2, #16]
 800a094:	e79e      	b.n	8009fd4 <__mdiff+0x34>
 800a096:	46e6      	mov	lr, ip
 800a098:	f854 1b04 	ldr.w	r1, [r4], #4
 800a09c:	fa1f fc81 	uxth.w	ip, r1
 800a0a0:	44f4      	add	ip, lr
 800a0a2:	0c08      	lsrs	r0, r1, #16
 800a0a4:	4471      	add	r1, lr
 800a0a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a0aa:	b289      	uxth	r1, r1
 800a0ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a0b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a0b4:	f846 1b04 	str.w	r1, [r6], #4
 800a0b8:	e7dc      	b.n	800a074 <__mdiff+0xd4>
 800a0ba:	3f01      	subs	r7, #1
 800a0bc:	e7e6      	b.n	800a08c <__mdiff+0xec>
 800a0be:	bf00      	nop
 800a0c0:	0800aac2 	.word	0x0800aac2
 800a0c4:	0800aad3 	.word	0x0800aad3

0800a0c8 <__d2b>:
 800a0c8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a0cc:	2101      	movs	r1, #1
 800a0ce:	4690      	mov	r8, r2
 800a0d0:	4699      	mov	r9, r3
 800a0d2:	9e08      	ldr	r6, [sp, #32]
 800a0d4:	f7ff fcd0 	bl	8009a78 <_Balloc>
 800a0d8:	4604      	mov	r4, r0
 800a0da:	b930      	cbnz	r0, 800a0ea <__d2b+0x22>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	f240 310f 	movw	r1, #783	@ 0x30f
 800a0e2:	4b23      	ldr	r3, [pc, #140]	@ (800a170 <__d2b+0xa8>)
 800a0e4:	4823      	ldr	r0, [pc, #140]	@ (800a174 <__d2b+0xac>)
 800a0e6:	f000 f8fd 	bl	800a2e4 <__assert_func>
 800a0ea:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a0ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0f2:	b10d      	cbz	r5, 800a0f8 <__d2b+0x30>
 800a0f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0f8:	9301      	str	r3, [sp, #4]
 800a0fa:	f1b8 0300 	subs.w	r3, r8, #0
 800a0fe:	d024      	beq.n	800a14a <__d2b+0x82>
 800a100:	4668      	mov	r0, sp
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	f7ff fd7f 	bl	8009c06 <__lo0bits>
 800a108:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a10c:	b1d8      	cbz	r0, 800a146 <__d2b+0x7e>
 800a10e:	f1c0 0320 	rsb	r3, r0, #32
 800a112:	fa02 f303 	lsl.w	r3, r2, r3
 800a116:	430b      	orrs	r3, r1
 800a118:	40c2      	lsrs	r2, r0
 800a11a:	6163      	str	r3, [r4, #20]
 800a11c:	9201      	str	r2, [sp, #4]
 800a11e:	9b01      	ldr	r3, [sp, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	bf0c      	ite	eq
 800a124:	2201      	moveq	r2, #1
 800a126:	2202      	movne	r2, #2
 800a128:	61a3      	str	r3, [r4, #24]
 800a12a:	6122      	str	r2, [r4, #16]
 800a12c:	b1ad      	cbz	r5, 800a15a <__d2b+0x92>
 800a12e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a132:	4405      	add	r5, r0
 800a134:	6035      	str	r5, [r6, #0]
 800a136:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a13a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a13c:	6018      	str	r0, [r3, #0]
 800a13e:	4620      	mov	r0, r4
 800a140:	b002      	add	sp, #8
 800a142:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a146:	6161      	str	r1, [r4, #20]
 800a148:	e7e9      	b.n	800a11e <__d2b+0x56>
 800a14a:	a801      	add	r0, sp, #4
 800a14c:	f7ff fd5b 	bl	8009c06 <__lo0bits>
 800a150:	9b01      	ldr	r3, [sp, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	6163      	str	r3, [r4, #20]
 800a156:	3020      	adds	r0, #32
 800a158:	e7e7      	b.n	800a12a <__d2b+0x62>
 800a15a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a15e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a162:	6030      	str	r0, [r6, #0]
 800a164:	6918      	ldr	r0, [r3, #16]
 800a166:	f7ff fd2f 	bl	8009bc8 <__hi0bits>
 800a16a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a16e:	e7e4      	b.n	800a13a <__d2b+0x72>
 800a170:	0800aac2 	.word	0x0800aac2
 800a174:	0800aad3 	.word	0x0800aad3

0800a178 <__sflush_r>:
 800a178:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17e:	0716      	lsls	r6, r2, #28
 800a180:	4605      	mov	r5, r0
 800a182:	460c      	mov	r4, r1
 800a184:	d454      	bmi.n	800a230 <__sflush_r+0xb8>
 800a186:	684b      	ldr	r3, [r1, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	dc02      	bgt.n	800a192 <__sflush_r+0x1a>
 800a18c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a18e:	2b00      	cmp	r3, #0
 800a190:	dd48      	ble.n	800a224 <__sflush_r+0xac>
 800a192:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a194:	2e00      	cmp	r6, #0
 800a196:	d045      	beq.n	800a224 <__sflush_r+0xac>
 800a198:	2300      	movs	r3, #0
 800a19a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a19e:	682f      	ldr	r7, [r5, #0]
 800a1a0:	6a21      	ldr	r1, [r4, #32]
 800a1a2:	602b      	str	r3, [r5, #0]
 800a1a4:	d030      	beq.n	800a208 <__sflush_r+0x90>
 800a1a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	0759      	lsls	r1, r3, #29
 800a1ac:	d505      	bpl.n	800a1ba <__sflush_r+0x42>
 800a1ae:	6863      	ldr	r3, [r4, #4]
 800a1b0:	1ad2      	subs	r2, r2, r3
 800a1b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a1b4:	b10b      	cbz	r3, 800a1ba <__sflush_r+0x42>
 800a1b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a1b8:	1ad2      	subs	r2, r2, r3
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	4628      	mov	r0, r5
 800a1be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1c0:	6a21      	ldr	r1, [r4, #32]
 800a1c2:	47b0      	blx	r6
 800a1c4:	1c43      	adds	r3, r0, #1
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	d106      	bne.n	800a1d8 <__sflush_r+0x60>
 800a1ca:	6829      	ldr	r1, [r5, #0]
 800a1cc:	291d      	cmp	r1, #29
 800a1ce:	d82b      	bhi.n	800a228 <__sflush_r+0xb0>
 800a1d0:	4a28      	ldr	r2, [pc, #160]	@ (800a274 <__sflush_r+0xfc>)
 800a1d2:	410a      	asrs	r2, r1
 800a1d4:	07d6      	lsls	r6, r2, #31
 800a1d6:	d427      	bmi.n	800a228 <__sflush_r+0xb0>
 800a1d8:	2200      	movs	r2, #0
 800a1da:	6062      	str	r2, [r4, #4]
 800a1dc:	6922      	ldr	r2, [r4, #16]
 800a1de:	04d9      	lsls	r1, r3, #19
 800a1e0:	6022      	str	r2, [r4, #0]
 800a1e2:	d504      	bpl.n	800a1ee <__sflush_r+0x76>
 800a1e4:	1c42      	adds	r2, r0, #1
 800a1e6:	d101      	bne.n	800a1ec <__sflush_r+0x74>
 800a1e8:	682b      	ldr	r3, [r5, #0]
 800a1ea:	b903      	cbnz	r3, 800a1ee <__sflush_r+0x76>
 800a1ec:	6560      	str	r0, [r4, #84]	@ 0x54
 800a1ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1f0:	602f      	str	r7, [r5, #0]
 800a1f2:	b1b9      	cbz	r1, 800a224 <__sflush_r+0xac>
 800a1f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1f8:	4299      	cmp	r1, r3
 800a1fa:	d002      	beq.n	800a202 <__sflush_r+0x8a>
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	f7ff fbf3 	bl	80099e8 <_free_r>
 800a202:	2300      	movs	r3, #0
 800a204:	6363      	str	r3, [r4, #52]	@ 0x34
 800a206:	e00d      	b.n	800a224 <__sflush_r+0xac>
 800a208:	2301      	movs	r3, #1
 800a20a:	4628      	mov	r0, r5
 800a20c:	47b0      	blx	r6
 800a20e:	4602      	mov	r2, r0
 800a210:	1c50      	adds	r0, r2, #1
 800a212:	d1c9      	bne.n	800a1a8 <__sflush_r+0x30>
 800a214:	682b      	ldr	r3, [r5, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d0c6      	beq.n	800a1a8 <__sflush_r+0x30>
 800a21a:	2b1d      	cmp	r3, #29
 800a21c:	d001      	beq.n	800a222 <__sflush_r+0xaa>
 800a21e:	2b16      	cmp	r3, #22
 800a220:	d11d      	bne.n	800a25e <__sflush_r+0xe6>
 800a222:	602f      	str	r7, [r5, #0]
 800a224:	2000      	movs	r0, #0
 800a226:	e021      	b.n	800a26c <__sflush_r+0xf4>
 800a228:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a22c:	b21b      	sxth	r3, r3
 800a22e:	e01a      	b.n	800a266 <__sflush_r+0xee>
 800a230:	690f      	ldr	r7, [r1, #16]
 800a232:	2f00      	cmp	r7, #0
 800a234:	d0f6      	beq.n	800a224 <__sflush_r+0xac>
 800a236:	0793      	lsls	r3, r2, #30
 800a238:	bf18      	it	ne
 800a23a:	2300      	movne	r3, #0
 800a23c:	680e      	ldr	r6, [r1, #0]
 800a23e:	bf08      	it	eq
 800a240:	694b      	ldreq	r3, [r1, #20]
 800a242:	1bf6      	subs	r6, r6, r7
 800a244:	600f      	str	r7, [r1, #0]
 800a246:	608b      	str	r3, [r1, #8]
 800a248:	2e00      	cmp	r6, #0
 800a24a:	ddeb      	ble.n	800a224 <__sflush_r+0xac>
 800a24c:	4633      	mov	r3, r6
 800a24e:	463a      	mov	r2, r7
 800a250:	4628      	mov	r0, r5
 800a252:	6a21      	ldr	r1, [r4, #32]
 800a254:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a258:	47e0      	blx	ip
 800a25a:	2800      	cmp	r0, #0
 800a25c:	dc07      	bgt.n	800a26e <__sflush_r+0xf6>
 800a25e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a266:	f04f 30ff 	mov.w	r0, #4294967295
 800a26a:	81a3      	strh	r3, [r4, #12]
 800a26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a26e:	4407      	add	r7, r0
 800a270:	1a36      	subs	r6, r6, r0
 800a272:	e7e9      	b.n	800a248 <__sflush_r+0xd0>
 800a274:	dfbffffe 	.word	0xdfbffffe

0800a278 <_fflush_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	690b      	ldr	r3, [r1, #16]
 800a27c:	4605      	mov	r5, r0
 800a27e:	460c      	mov	r4, r1
 800a280:	b913      	cbnz	r3, 800a288 <_fflush_r+0x10>
 800a282:	2500      	movs	r5, #0
 800a284:	4628      	mov	r0, r5
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	b118      	cbz	r0, 800a292 <_fflush_r+0x1a>
 800a28a:	6a03      	ldr	r3, [r0, #32]
 800a28c:	b90b      	cbnz	r3, 800a292 <_fflush_r+0x1a>
 800a28e:	f7fe fc2d 	bl	8008aec <__sinit>
 800a292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d0f3      	beq.n	800a282 <_fflush_r+0xa>
 800a29a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a29c:	07d0      	lsls	r0, r2, #31
 800a29e:	d404      	bmi.n	800a2aa <_fflush_r+0x32>
 800a2a0:	0599      	lsls	r1, r3, #22
 800a2a2:	d402      	bmi.n	800a2aa <_fflush_r+0x32>
 800a2a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2a6:	f7fe fd36 	bl	8008d16 <__retarget_lock_acquire_recursive>
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	f7ff ff63 	bl	800a178 <__sflush_r>
 800a2b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	07da      	lsls	r2, r3, #31
 800a2b8:	d4e4      	bmi.n	800a284 <_fflush_r+0xc>
 800a2ba:	89a3      	ldrh	r3, [r4, #12]
 800a2bc:	059b      	lsls	r3, r3, #22
 800a2be:	d4e1      	bmi.n	800a284 <_fflush_r+0xc>
 800a2c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2c2:	f7fe fd29 	bl	8008d18 <__retarget_lock_release_recursive>
 800a2c6:	e7dd      	b.n	800a284 <_fflush_r+0xc>

0800a2c8 <memcpy>:
 800a2c8:	440a      	add	r2, r1
 800a2ca:	4291      	cmp	r1, r2
 800a2cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2d0:	d100      	bne.n	800a2d4 <memcpy+0xc>
 800a2d2:	4770      	bx	lr
 800a2d4:	b510      	push	{r4, lr}
 800a2d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2da:	4291      	cmp	r1, r2
 800a2dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2e0:	d1f9      	bne.n	800a2d6 <memcpy+0xe>
 800a2e2:	bd10      	pop	{r4, pc}

0800a2e4 <__assert_func>:
 800a2e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2e6:	4614      	mov	r4, r2
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	4b09      	ldr	r3, [pc, #36]	@ (800a310 <__assert_func+0x2c>)
 800a2ec:	4605      	mov	r5, r0
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	68d8      	ldr	r0, [r3, #12]
 800a2f2:	b954      	cbnz	r4, 800a30a <__assert_func+0x26>
 800a2f4:	4b07      	ldr	r3, [pc, #28]	@ (800a314 <__assert_func+0x30>)
 800a2f6:	461c      	mov	r4, r3
 800a2f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2fc:	9100      	str	r1, [sp, #0]
 800a2fe:	462b      	mov	r3, r5
 800a300:	4905      	ldr	r1, [pc, #20]	@ (800a318 <__assert_func+0x34>)
 800a302:	f000 f841 	bl	800a388 <fiprintf>
 800a306:	f000 f851 	bl	800a3ac <abort>
 800a30a:	4b04      	ldr	r3, [pc, #16]	@ (800a31c <__assert_func+0x38>)
 800a30c:	e7f4      	b.n	800a2f8 <__assert_func+0x14>
 800a30e:	bf00      	nop
 800a310:	20000020 	.word	0x20000020
 800a314:	0800ac6d 	.word	0x0800ac6d
 800a318:	0800ac3f 	.word	0x0800ac3f
 800a31c:	0800ac32 	.word	0x0800ac32

0800a320 <_calloc_r>:
 800a320:	b570      	push	{r4, r5, r6, lr}
 800a322:	fba1 5402 	umull	r5, r4, r1, r2
 800a326:	b93c      	cbnz	r4, 800a338 <_calloc_r+0x18>
 800a328:	4629      	mov	r1, r5
 800a32a:	f7fd fe6b 	bl	8008004 <_malloc_r>
 800a32e:	4606      	mov	r6, r0
 800a330:	b928      	cbnz	r0, 800a33e <_calloc_r+0x1e>
 800a332:	2600      	movs	r6, #0
 800a334:	4630      	mov	r0, r6
 800a336:	bd70      	pop	{r4, r5, r6, pc}
 800a338:	220c      	movs	r2, #12
 800a33a:	6002      	str	r2, [r0, #0]
 800a33c:	e7f9      	b.n	800a332 <_calloc_r+0x12>
 800a33e:	462a      	mov	r2, r5
 800a340:	4621      	mov	r1, r4
 800a342:	f7fe fc4c 	bl	8008bde <memset>
 800a346:	e7f5      	b.n	800a334 <_calloc_r+0x14>

0800a348 <__ascii_mbtowc>:
 800a348:	b082      	sub	sp, #8
 800a34a:	b901      	cbnz	r1, 800a34e <__ascii_mbtowc+0x6>
 800a34c:	a901      	add	r1, sp, #4
 800a34e:	b142      	cbz	r2, 800a362 <__ascii_mbtowc+0x1a>
 800a350:	b14b      	cbz	r3, 800a366 <__ascii_mbtowc+0x1e>
 800a352:	7813      	ldrb	r3, [r2, #0]
 800a354:	600b      	str	r3, [r1, #0]
 800a356:	7812      	ldrb	r2, [r2, #0]
 800a358:	1e10      	subs	r0, r2, #0
 800a35a:	bf18      	it	ne
 800a35c:	2001      	movne	r0, #1
 800a35e:	b002      	add	sp, #8
 800a360:	4770      	bx	lr
 800a362:	4610      	mov	r0, r2
 800a364:	e7fb      	b.n	800a35e <__ascii_mbtowc+0x16>
 800a366:	f06f 0001 	mvn.w	r0, #1
 800a36a:	e7f8      	b.n	800a35e <__ascii_mbtowc+0x16>

0800a36c <__ascii_wctomb>:
 800a36c:	4603      	mov	r3, r0
 800a36e:	4608      	mov	r0, r1
 800a370:	b141      	cbz	r1, 800a384 <__ascii_wctomb+0x18>
 800a372:	2aff      	cmp	r2, #255	@ 0xff
 800a374:	d904      	bls.n	800a380 <__ascii_wctomb+0x14>
 800a376:	228a      	movs	r2, #138	@ 0x8a
 800a378:	f04f 30ff 	mov.w	r0, #4294967295
 800a37c:	601a      	str	r2, [r3, #0]
 800a37e:	4770      	bx	lr
 800a380:	2001      	movs	r0, #1
 800a382:	700a      	strb	r2, [r1, #0]
 800a384:	4770      	bx	lr
	...

0800a388 <fiprintf>:
 800a388:	b40e      	push	{r1, r2, r3}
 800a38a:	b503      	push	{r0, r1, lr}
 800a38c:	4601      	mov	r1, r0
 800a38e:	ab03      	add	r3, sp, #12
 800a390:	4805      	ldr	r0, [pc, #20]	@ (800a3a8 <fiprintf+0x20>)
 800a392:	f853 2b04 	ldr.w	r2, [r3], #4
 800a396:	6800      	ldr	r0, [r0, #0]
 800a398:	9301      	str	r3, [sp, #4]
 800a39a:	f000 f835 	bl	800a408 <_vfiprintf_r>
 800a39e:	b002      	add	sp, #8
 800a3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3a4:	b003      	add	sp, #12
 800a3a6:	4770      	bx	lr
 800a3a8:	20000020 	.word	0x20000020

0800a3ac <abort>:
 800a3ac:	2006      	movs	r0, #6
 800a3ae:	b508      	push	{r3, lr}
 800a3b0:	f000 f9fe 	bl	800a7b0 <raise>
 800a3b4:	2001      	movs	r0, #1
 800a3b6:	f7f8 fea4 	bl	8003102 <_exit>

0800a3ba <__sfputc_r>:
 800a3ba:	6893      	ldr	r3, [r2, #8]
 800a3bc:	b410      	push	{r4}
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	6093      	str	r3, [r2, #8]
 800a3c4:	da07      	bge.n	800a3d6 <__sfputc_r+0x1c>
 800a3c6:	6994      	ldr	r4, [r2, #24]
 800a3c8:	42a3      	cmp	r3, r4
 800a3ca:	db01      	blt.n	800a3d0 <__sfputc_r+0x16>
 800a3cc:	290a      	cmp	r1, #10
 800a3ce:	d102      	bne.n	800a3d6 <__sfputc_r+0x1c>
 800a3d0:	bc10      	pop	{r4}
 800a3d2:	f000 b931 	b.w	800a638 <__swbuf_r>
 800a3d6:	6813      	ldr	r3, [r2, #0]
 800a3d8:	1c58      	adds	r0, r3, #1
 800a3da:	6010      	str	r0, [r2, #0]
 800a3dc:	7019      	strb	r1, [r3, #0]
 800a3de:	4608      	mov	r0, r1
 800a3e0:	bc10      	pop	{r4}
 800a3e2:	4770      	bx	lr

0800a3e4 <__sfputs_r>:
 800a3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e6:	4606      	mov	r6, r0
 800a3e8:	460f      	mov	r7, r1
 800a3ea:	4614      	mov	r4, r2
 800a3ec:	18d5      	adds	r5, r2, r3
 800a3ee:	42ac      	cmp	r4, r5
 800a3f0:	d101      	bne.n	800a3f6 <__sfputs_r+0x12>
 800a3f2:	2000      	movs	r0, #0
 800a3f4:	e007      	b.n	800a406 <__sfputs_r+0x22>
 800a3f6:	463a      	mov	r2, r7
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3fe:	f7ff ffdc 	bl	800a3ba <__sfputc_r>
 800a402:	1c43      	adds	r3, r0, #1
 800a404:	d1f3      	bne.n	800a3ee <__sfputs_r+0xa>
 800a406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a408 <_vfiprintf_r>:
 800a408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40c:	460d      	mov	r5, r1
 800a40e:	4614      	mov	r4, r2
 800a410:	4698      	mov	r8, r3
 800a412:	4606      	mov	r6, r0
 800a414:	b09d      	sub	sp, #116	@ 0x74
 800a416:	b118      	cbz	r0, 800a420 <_vfiprintf_r+0x18>
 800a418:	6a03      	ldr	r3, [r0, #32]
 800a41a:	b90b      	cbnz	r3, 800a420 <_vfiprintf_r+0x18>
 800a41c:	f7fe fb66 	bl	8008aec <__sinit>
 800a420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a422:	07d9      	lsls	r1, r3, #31
 800a424:	d405      	bmi.n	800a432 <_vfiprintf_r+0x2a>
 800a426:	89ab      	ldrh	r3, [r5, #12]
 800a428:	059a      	lsls	r2, r3, #22
 800a42a:	d402      	bmi.n	800a432 <_vfiprintf_r+0x2a>
 800a42c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a42e:	f7fe fc72 	bl	8008d16 <__retarget_lock_acquire_recursive>
 800a432:	89ab      	ldrh	r3, [r5, #12]
 800a434:	071b      	lsls	r3, r3, #28
 800a436:	d501      	bpl.n	800a43c <_vfiprintf_r+0x34>
 800a438:	692b      	ldr	r3, [r5, #16]
 800a43a:	b99b      	cbnz	r3, 800a464 <_vfiprintf_r+0x5c>
 800a43c:	4629      	mov	r1, r5
 800a43e:	4630      	mov	r0, r6
 800a440:	f000 f938 	bl	800a6b4 <__swsetup_r>
 800a444:	b170      	cbz	r0, 800a464 <_vfiprintf_r+0x5c>
 800a446:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a448:	07dc      	lsls	r4, r3, #31
 800a44a:	d504      	bpl.n	800a456 <_vfiprintf_r+0x4e>
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295
 800a450:	b01d      	add	sp, #116	@ 0x74
 800a452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a456:	89ab      	ldrh	r3, [r5, #12]
 800a458:	0598      	lsls	r0, r3, #22
 800a45a:	d4f7      	bmi.n	800a44c <_vfiprintf_r+0x44>
 800a45c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a45e:	f7fe fc5b 	bl	8008d18 <__retarget_lock_release_recursive>
 800a462:	e7f3      	b.n	800a44c <_vfiprintf_r+0x44>
 800a464:	2300      	movs	r3, #0
 800a466:	9309      	str	r3, [sp, #36]	@ 0x24
 800a468:	2320      	movs	r3, #32
 800a46a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a46e:	2330      	movs	r3, #48	@ 0x30
 800a470:	f04f 0901 	mov.w	r9, #1
 800a474:	f8cd 800c 	str.w	r8, [sp, #12]
 800a478:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a624 <_vfiprintf_r+0x21c>
 800a47c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a480:	4623      	mov	r3, r4
 800a482:	469a      	mov	sl, r3
 800a484:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a488:	b10a      	cbz	r2, 800a48e <_vfiprintf_r+0x86>
 800a48a:	2a25      	cmp	r2, #37	@ 0x25
 800a48c:	d1f9      	bne.n	800a482 <_vfiprintf_r+0x7a>
 800a48e:	ebba 0b04 	subs.w	fp, sl, r4
 800a492:	d00b      	beq.n	800a4ac <_vfiprintf_r+0xa4>
 800a494:	465b      	mov	r3, fp
 800a496:	4622      	mov	r2, r4
 800a498:	4629      	mov	r1, r5
 800a49a:	4630      	mov	r0, r6
 800a49c:	f7ff ffa2 	bl	800a3e4 <__sfputs_r>
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	f000 80a7 	beq.w	800a5f4 <_vfiprintf_r+0x1ec>
 800a4a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4a8:	445a      	add	r2, fp
 800a4aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f000 809f 	beq.w	800a5f4 <_vfiprintf_r+0x1ec>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4c0:	f10a 0a01 	add.w	sl, sl, #1
 800a4c4:	9304      	str	r3, [sp, #16]
 800a4c6:	9307      	str	r3, [sp, #28]
 800a4c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a4cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4ce:	4654      	mov	r4, sl
 800a4d0:	2205      	movs	r2, #5
 800a4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d6:	4853      	ldr	r0, [pc, #332]	@ (800a624 <_vfiprintf_r+0x21c>)
 800a4d8:	f7fe fc27 	bl	8008d2a <memchr>
 800a4dc:	9a04      	ldr	r2, [sp, #16]
 800a4de:	b9d8      	cbnz	r0, 800a518 <_vfiprintf_r+0x110>
 800a4e0:	06d1      	lsls	r1, r2, #27
 800a4e2:	bf44      	itt	mi
 800a4e4:	2320      	movmi	r3, #32
 800a4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4ea:	0713      	lsls	r3, r2, #28
 800a4ec:	bf44      	itt	mi
 800a4ee:	232b      	movmi	r3, #43	@ 0x2b
 800a4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4fa:	d015      	beq.n	800a528 <_vfiprintf_r+0x120>
 800a4fc:	4654      	mov	r4, sl
 800a4fe:	2000      	movs	r0, #0
 800a500:	f04f 0c0a 	mov.w	ip, #10
 800a504:	9a07      	ldr	r2, [sp, #28]
 800a506:	4621      	mov	r1, r4
 800a508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a50c:	3b30      	subs	r3, #48	@ 0x30
 800a50e:	2b09      	cmp	r3, #9
 800a510:	d94b      	bls.n	800a5aa <_vfiprintf_r+0x1a2>
 800a512:	b1b0      	cbz	r0, 800a542 <_vfiprintf_r+0x13a>
 800a514:	9207      	str	r2, [sp, #28]
 800a516:	e014      	b.n	800a542 <_vfiprintf_r+0x13a>
 800a518:	eba0 0308 	sub.w	r3, r0, r8
 800a51c:	fa09 f303 	lsl.w	r3, r9, r3
 800a520:	4313      	orrs	r3, r2
 800a522:	46a2      	mov	sl, r4
 800a524:	9304      	str	r3, [sp, #16]
 800a526:	e7d2      	b.n	800a4ce <_vfiprintf_r+0xc6>
 800a528:	9b03      	ldr	r3, [sp, #12]
 800a52a:	1d19      	adds	r1, r3, #4
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	9103      	str	r1, [sp, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	bfbb      	ittet	lt
 800a534:	425b      	neglt	r3, r3
 800a536:	f042 0202 	orrlt.w	r2, r2, #2
 800a53a:	9307      	strge	r3, [sp, #28]
 800a53c:	9307      	strlt	r3, [sp, #28]
 800a53e:	bfb8      	it	lt
 800a540:	9204      	strlt	r2, [sp, #16]
 800a542:	7823      	ldrb	r3, [r4, #0]
 800a544:	2b2e      	cmp	r3, #46	@ 0x2e
 800a546:	d10a      	bne.n	800a55e <_vfiprintf_r+0x156>
 800a548:	7863      	ldrb	r3, [r4, #1]
 800a54a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a54c:	d132      	bne.n	800a5b4 <_vfiprintf_r+0x1ac>
 800a54e:	9b03      	ldr	r3, [sp, #12]
 800a550:	3402      	adds	r4, #2
 800a552:	1d1a      	adds	r2, r3, #4
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	9203      	str	r2, [sp, #12]
 800a558:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a55c:	9305      	str	r3, [sp, #20]
 800a55e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a628 <_vfiprintf_r+0x220>
 800a562:	2203      	movs	r2, #3
 800a564:	4650      	mov	r0, sl
 800a566:	7821      	ldrb	r1, [r4, #0]
 800a568:	f7fe fbdf 	bl	8008d2a <memchr>
 800a56c:	b138      	cbz	r0, 800a57e <_vfiprintf_r+0x176>
 800a56e:	2240      	movs	r2, #64	@ 0x40
 800a570:	9b04      	ldr	r3, [sp, #16]
 800a572:	eba0 000a 	sub.w	r0, r0, sl
 800a576:	4082      	lsls	r2, r0
 800a578:	4313      	orrs	r3, r2
 800a57a:	3401      	adds	r4, #1
 800a57c:	9304      	str	r3, [sp, #16]
 800a57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a582:	2206      	movs	r2, #6
 800a584:	4829      	ldr	r0, [pc, #164]	@ (800a62c <_vfiprintf_r+0x224>)
 800a586:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a58a:	f7fe fbce 	bl	8008d2a <memchr>
 800a58e:	2800      	cmp	r0, #0
 800a590:	d03f      	beq.n	800a612 <_vfiprintf_r+0x20a>
 800a592:	4b27      	ldr	r3, [pc, #156]	@ (800a630 <_vfiprintf_r+0x228>)
 800a594:	bb1b      	cbnz	r3, 800a5de <_vfiprintf_r+0x1d6>
 800a596:	9b03      	ldr	r3, [sp, #12]
 800a598:	3307      	adds	r3, #7
 800a59a:	f023 0307 	bic.w	r3, r3, #7
 800a59e:	3308      	adds	r3, #8
 800a5a0:	9303      	str	r3, [sp, #12]
 800a5a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5a4:	443b      	add	r3, r7
 800a5a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5a8:	e76a      	b.n	800a480 <_vfiprintf_r+0x78>
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	2001      	movs	r0, #1
 800a5ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5b2:	e7a8      	b.n	800a506 <_vfiprintf_r+0xfe>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f04f 0c0a 	mov.w	ip, #10
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	3401      	adds	r4, #1
 800a5be:	9305      	str	r3, [sp, #20]
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5c6:	3a30      	subs	r2, #48	@ 0x30
 800a5c8:	2a09      	cmp	r2, #9
 800a5ca:	d903      	bls.n	800a5d4 <_vfiprintf_r+0x1cc>
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d0c6      	beq.n	800a55e <_vfiprintf_r+0x156>
 800a5d0:	9105      	str	r1, [sp, #20]
 800a5d2:	e7c4      	b.n	800a55e <_vfiprintf_r+0x156>
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5dc:	e7f0      	b.n	800a5c0 <_vfiprintf_r+0x1b8>
 800a5de:	ab03      	add	r3, sp, #12
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	462a      	mov	r2, r5
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	4b13      	ldr	r3, [pc, #76]	@ (800a634 <_vfiprintf_r+0x22c>)
 800a5e8:	a904      	add	r1, sp, #16
 800a5ea:	f7fd fe35 	bl	8008258 <_printf_float>
 800a5ee:	4607      	mov	r7, r0
 800a5f0:	1c78      	adds	r0, r7, #1
 800a5f2:	d1d6      	bne.n	800a5a2 <_vfiprintf_r+0x19a>
 800a5f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5f6:	07d9      	lsls	r1, r3, #31
 800a5f8:	d405      	bmi.n	800a606 <_vfiprintf_r+0x1fe>
 800a5fa:	89ab      	ldrh	r3, [r5, #12]
 800a5fc:	059a      	lsls	r2, r3, #22
 800a5fe:	d402      	bmi.n	800a606 <_vfiprintf_r+0x1fe>
 800a600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a602:	f7fe fb89 	bl	8008d18 <__retarget_lock_release_recursive>
 800a606:	89ab      	ldrh	r3, [r5, #12]
 800a608:	065b      	lsls	r3, r3, #25
 800a60a:	f53f af1f 	bmi.w	800a44c <_vfiprintf_r+0x44>
 800a60e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a610:	e71e      	b.n	800a450 <_vfiprintf_r+0x48>
 800a612:	ab03      	add	r3, sp, #12
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	462a      	mov	r2, r5
 800a618:	4630      	mov	r0, r6
 800a61a:	4b06      	ldr	r3, [pc, #24]	@ (800a634 <_vfiprintf_r+0x22c>)
 800a61c:	a904      	add	r1, sp, #16
 800a61e:	f7fe f8b9 	bl	8008794 <_printf_i>
 800a622:	e7e4      	b.n	800a5ee <_vfiprintf_r+0x1e6>
 800a624:	0800ad6f 	.word	0x0800ad6f
 800a628:	0800ad75 	.word	0x0800ad75
 800a62c:	0800ad79 	.word	0x0800ad79
 800a630:	08008259 	.word	0x08008259
 800a634:	0800a3e5 	.word	0x0800a3e5

0800a638 <__swbuf_r>:
 800a638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63a:	460e      	mov	r6, r1
 800a63c:	4614      	mov	r4, r2
 800a63e:	4605      	mov	r5, r0
 800a640:	b118      	cbz	r0, 800a64a <__swbuf_r+0x12>
 800a642:	6a03      	ldr	r3, [r0, #32]
 800a644:	b90b      	cbnz	r3, 800a64a <__swbuf_r+0x12>
 800a646:	f7fe fa51 	bl	8008aec <__sinit>
 800a64a:	69a3      	ldr	r3, [r4, #24]
 800a64c:	60a3      	str	r3, [r4, #8]
 800a64e:	89a3      	ldrh	r3, [r4, #12]
 800a650:	071a      	lsls	r2, r3, #28
 800a652:	d501      	bpl.n	800a658 <__swbuf_r+0x20>
 800a654:	6923      	ldr	r3, [r4, #16]
 800a656:	b943      	cbnz	r3, 800a66a <__swbuf_r+0x32>
 800a658:	4621      	mov	r1, r4
 800a65a:	4628      	mov	r0, r5
 800a65c:	f000 f82a 	bl	800a6b4 <__swsetup_r>
 800a660:	b118      	cbz	r0, 800a66a <__swbuf_r+0x32>
 800a662:	f04f 37ff 	mov.w	r7, #4294967295
 800a666:	4638      	mov	r0, r7
 800a668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a66a:	6823      	ldr	r3, [r4, #0]
 800a66c:	6922      	ldr	r2, [r4, #16]
 800a66e:	b2f6      	uxtb	r6, r6
 800a670:	1a98      	subs	r0, r3, r2
 800a672:	6963      	ldr	r3, [r4, #20]
 800a674:	4637      	mov	r7, r6
 800a676:	4283      	cmp	r3, r0
 800a678:	dc05      	bgt.n	800a686 <__swbuf_r+0x4e>
 800a67a:	4621      	mov	r1, r4
 800a67c:	4628      	mov	r0, r5
 800a67e:	f7ff fdfb 	bl	800a278 <_fflush_r>
 800a682:	2800      	cmp	r0, #0
 800a684:	d1ed      	bne.n	800a662 <__swbuf_r+0x2a>
 800a686:	68a3      	ldr	r3, [r4, #8]
 800a688:	3b01      	subs	r3, #1
 800a68a:	60a3      	str	r3, [r4, #8]
 800a68c:	6823      	ldr	r3, [r4, #0]
 800a68e:	1c5a      	adds	r2, r3, #1
 800a690:	6022      	str	r2, [r4, #0]
 800a692:	701e      	strb	r6, [r3, #0]
 800a694:	6962      	ldr	r2, [r4, #20]
 800a696:	1c43      	adds	r3, r0, #1
 800a698:	429a      	cmp	r2, r3
 800a69a:	d004      	beq.n	800a6a6 <__swbuf_r+0x6e>
 800a69c:	89a3      	ldrh	r3, [r4, #12]
 800a69e:	07db      	lsls	r3, r3, #31
 800a6a0:	d5e1      	bpl.n	800a666 <__swbuf_r+0x2e>
 800a6a2:	2e0a      	cmp	r6, #10
 800a6a4:	d1df      	bne.n	800a666 <__swbuf_r+0x2e>
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	f7ff fde5 	bl	800a278 <_fflush_r>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	d0d9      	beq.n	800a666 <__swbuf_r+0x2e>
 800a6b2:	e7d6      	b.n	800a662 <__swbuf_r+0x2a>

0800a6b4 <__swsetup_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4b29      	ldr	r3, [pc, #164]	@ (800a75c <__swsetup_r+0xa8>)
 800a6b8:	4605      	mov	r5, r0
 800a6ba:	6818      	ldr	r0, [r3, #0]
 800a6bc:	460c      	mov	r4, r1
 800a6be:	b118      	cbz	r0, 800a6c8 <__swsetup_r+0x14>
 800a6c0:	6a03      	ldr	r3, [r0, #32]
 800a6c2:	b90b      	cbnz	r3, 800a6c8 <__swsetup_r+0x14>
 800a6c4:	f7fe fa12 	bl	8008aec <__sinit>
 800a6c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6cc:	0719      	lsls	r1, r3, #28
 800a6ce:	d422      	bmi.n	800a716 <__swsetup_r+0x62>
 800a6d0:	06da      	lsls	r2, r3, #27
 800a6d2:	d407      	bmi.n	800a6e4 <__swsetup_r+0x30>
 800a6d4:	2209      	movs	r2, #9
 800a6d6:	602a      	str	r2, [r5, #0]
 800a6d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e0:	81a3      	strh	r3, [r4, #12]
 800a6e2:	e033      	b.n	800a74c <__swsetup_r+0x98>
 800a6e4:	0758      	lsls	r0, r3, #29
 800a6e6:	d512      	bpl.n	800a70e <__swsetup_r+0x5a>
 800a6e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6ea:	b141      	cbz	r1, 800a6fe <__swsetup_r+0x4a>
 800a6ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6f0:	4299      	cmp	r1, r3
 800a6f2:	d002      	beq.n	800a6fa <__swsetup_r+0x46>
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	f7ff f977 	bl	80099e8 <_free_r>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6fe:	89a3      	ldrh	r3, [r4, #12]
 800a700:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a704:	81a3      	strh	r3, [r4, #12]
 800a706:	2300      	movs	r3, #0
 800a708:	6063      	str	r3, [r4, #4]
 800a70a:	6923      	ldr	r3, [r4, #16]
 800a70c:	6023      	str	r3, [r4, #0]
 800a70e:	89a3      	ldrh	r3, [r4, #12]
 800a710:	f043 0308 	orr.w	r3, r3, #8
 800a714:	81a3      	strh	r3, [r4, #12]
 800a716:	6923      	ldr	r3, [r4, #16]
 800a718:	b94b      	cbnz	r3, 800a72e <__swsetup_r+0x7a>
 800a71a:	89a3      	ldrh	r3, [r4, #12]
 800a71c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a724:	d003      	beq.n	800a72e <__swsetup_r+0x7a>
 800a726:	4621      	mov	r1, r4
 800a728:	4628      	mov	r0, r5
 800a72a:	f000 f882 	bl	800a832 <__smakebuf_r>
 800a72e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a732:	f013 0201 	ands.w	r2, r3, #1
 800a736:	d00a      	beq.n	800a74e <__swsetup_r+0x9a>
 800a738:	2200      	movs	r2, #0
 800a73a:	60a2      	str	r2, [r4, #8]
 800a73c:	6962      	ldr	r2, [r4, #20]
 800a73e:	4252      	negs	r2, r2
 800a740:	61a2      	str	r2, [r4, #24]
 800a742:	6922      	ldr	r2, [r4, #16]
 800a744:	b942      	cbnz	r2, 800a758 <__swsetup_r+0xa4>
 800a746:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a74a:	d1c5      	bne.n	800a6d8 <__swsetup_r+0x24>
 800a74c:	bd38      	pop	{r3, r4, r5, pc}
 800a74e:	0799      	lsls	r1, r3, #30
 800a750:	bf58      	it	pl
 800a752:	6962      	ldrpl	r2, [r4, #20]
 800a754:	60a2      	str	r2, [r4, #8]
 800a756:	e7f4      	b.n	800a742 <__swsetup_r+0x8e>
 800a758:	2000      	movs	r0, #0
 800a75a:	e7f7      	b.n	800a74c <__swsetup_r+0x98>
 800a75c:	20000020 	.word	0x20000020

0800a760 <_raise_r>:
 800a760:	291f      	cmp	r1, #31
 800a762:	b538      	push	{r3, r4, r5, lr}
 800a764:	4605      	mov	r5, r0
 800a766:	460c      	mov	r4, r1
 800a768:	d904      	bls.n	800a774 <_raise_r+0x14>
 800a76a:	2316      	movs	r3, #22
 800a76c:	6003      	str	r3, [r0, #0]
 800a76e:	f04f 30ff 	mov.w	r0, #4294967295
 800a772:	bd38      	pop	{r3, r4, r5, pc}
 800a774:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a776:	b112      	cbz	r2, 800a77e <_raise_r+0x1e>
 800a778:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a77c:	b94b      	cbnz	r3, 800a792 <_raise_r+0x32>
 800a77e:	4628      	mov	r0, r5
 800a780:	f000 f830 	bl	800a7e4 <_getpid_r>
 800a784:	4622      	mov	r2, r4
 800a786:	4601      	mov	r1, r0
 800a788:	4628      	mov	r0, r5
 800a78a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a78e:	f000 b817 	b.w	800a7c0 <_kill_r>
 800a792:	2b01      	cmp	r3, #1
 800a794:	d00a      	beq.n	800a7ac <_raise_r+0x4c>
 800a796:	1c59      	adds	r1, r3, #1
 800a798:	d103      	bne.n	800a7a2 <_raise_r+0x42>
 800a79a:	2316      	movs	r3, #22
 800a79c:	6003      	str	r3, [r0, #0]
 800a79e:	2001      	movs	r0, #1
 800a7a0:	e7e7      	b.n	800a772 <_raise_r+0x12>
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a7aa:	4798      	blx	r3
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	e7e0      	b.n	800a772 <_raise_r+0x12>

0800a7b0 <raise>:
 800a7b0:	4b02      	ldr	r3, [pc, #8]	@ (800a7bc <raise+0xc>)
 800a7b2:	4601      	mov	r1, r0
 800a7b4:	6818      	ldr	r0, [r3, #0]
 800a7b6:	f7ff bfd3 	b.w	800a760 <_raise_r>
 800a7ba:	bf00      	nop
 800a7bc:	20000020 	.word	0x20000020

0800a7c0 <_kill_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	4d06      	ldr	r5, [pc, #24]	@ (800a7e0 <_kill_r+0x20>)
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	4608      	mov	r0, r1
 800a7ca:	4611      	mov	r1, r2
 800a7cc:	602b      	str	r3, [r5, #0]
 800a7ce:	f7f8 fc88 	bl	80030e2 <_kill>
 800a7d2:	1c43      	adds	r3, r0, #1
 800a7d4:	d102      	bne.n	800a7dc <_kill_r+0x1c>
 800a7d6:	682b      	ldr	r3, [r5, #0]
 800a7d8:	b103      	cbz	r3, 800a7dc <_kill_r+0x1c>
 800a7da:	6023      	str	r3, [r4, #0]
 800a7dc:	bd38      	pop	{r3, r4, r5, pc}
 800a7de:	bf00      	nop
 800a7e0:	20001870 	.word	0x20001870

0800a7e4 <_getpid_r>:
 800a7e4:	f7f8 bc76 	b.w	80030d4 <_getpid>

0800a7e8 <__swhatbuf_r>:
 800a7e8:	b570      	push	{r4, r5, r6, lr}
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7f0:	4615      	mov	r5, r2
 800a7f2:	2900      	cmp	r1, #0
 800a7f4:	461e      	mov	r6, r3
 800a7f6:	b096      	sub	sp, #88	@ 0x58
 800a7f8:	da0c      	bge.n	800a814 <__swhatbuf_r+0x2c>
 800a7fa:	89a3      	ldrh	r3, [r4, #12]
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a802:	bf14      	ite	ne
 800a804:	2340      	movne	r3, #64	@ 0x40
 800a806:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a80a:	2000      	movs	r0, #0
 800a80c:	6031      	str	r1, [r6, #0]
 800a80e:	602b      	str	r3, [r5, #0]
 800a810:	b016      	add	sp, #88	@ 0x58
 800a812:	bd70      	pop	{r4, r5, r6, pc}
 800a814:	466a      	mov	r2, sp
 800a816:	f000 f849 	bl	800a8ac <_fstat_r>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	dbed      	blt.n	800a7fa <__swhatbuf_r+0x12>
 800a81e:	9901      	ldr	r1, [sp, #4]
 800a820:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a824:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a828:	4259      	negs	r1, r3
 800a82a:	4159      	adcs	r1, r3
 800a82c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a830:	e7eb      	b.n	800a80a <__swhatbuf_r+0x22>

0800a832 <__smakebuf_r>:
 800a832:	898b      	ldrh	r3, [r1, #12]
 800a834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a836:	079d      	lsls	r5, r3, #30
 800a838:	4606      	mov	r6, r0
 800a83a:	460c      	mov	r4, r1
 800a83c:	d507      	bpl.n	800a84e <__smakebuf_r+0x1c>
 800a83e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a842:	6023      	str	r3, [r4, #0]
 800a844:	6123      	str	r3, [r4, #16]
 800a846:	2301      	movs	r3, #1
 800a848:	6163      	str	r3, [r4, #20]
 800a84a:	b003      	add	sp, #12
 800a84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a84e:	466a      	mov	r2, sp
 800a850:	ab01      	add	r3, sp, #4
 800a852:	f7ff ffc9 	bl	800a7e8 <__swhatbuf_r>
 800a856:	9f00      	ldr	r7, [sp, #0]
 800a858:	4605      	mov	r5, r0
 800a85a:	4639      	mov	r1, r7
 800a85c:	4630      	mov	r0, r6
 800a85e:	f7fd fbd1 	bl	8008004 <_malloc_r>
 800a862:	b948      	cbnz	r0, 800a878 <__smakebuf_r+0x46>
 800a864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a868:	059a      	lsls	r2, r3, #22
 800a86a:	d4ee      	bmi.n	800a84a <__smakebuf_r+0x18>
 800a86c:	f023 0303 	bic.w	r3, r3, #3
 800a870:	f043 0302 	orr.w	r3, r3, #2
 800a874:	81a3      	strh	r3, [r4, #12]
 800a876:	e7e2      	b.n	800a83e <__smakebuf_r+0xc>
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a87e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a882:	81a3      	strh	r3, [r4, #12]
 800a884:	9b01      	ldr	r3, [sp, #4]
 800a886:	6020      	str	r0, [r4, #0]
 800a888:	b15b      	cbz	r3, 800a8a2 <__smakebuf_r+0x70>
 800a88a:	4630      	mov	r0, r6
 800a88c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a890:	f000 f81e 	bl	800a8d0 <_isatty_r>
 800a894:	b128      	cbz	r0, 800a8a2 <__smakebuf_r+0x70>
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	f023 0303 	bic.w	r3, r3, #3
 800a89c:	f043 0301 	orr.w	r3, r3, #1
 800a8a0:	81a3      	strh	r3, [r4, #12]
 800a8a2:	89a3      	ldrh	r3, [r4, #12]
 800a8a4:	431d      	orrs	r5, r3
 800a8a6:	81a5      	strh	r5, [r4, #12]
 800a8a8:	e7cf      	b.n	800a84a <__smakebuf_r+0x18>
	...

0800a8ac <_fstat_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	4d06      	ldr	r5, [pc, #24]	@ (800a8cc <_fstat_r+0x20>)
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	602b      	str	r3, [r5, #0]
 800a8ba:	f7f8 fc71 	bl	80031a0 <_fstat>
 800a8be:	1c43      	adds	r3, r0, #1
 800a8c0:	d102      	bne.n	800a8c8 <_fstat_r+0x1c>
 800a8c2:	682b      	ldr	r3, [r5, #0]
 800a8c4:	b103      	cbz	r3, 800a8c8 <_fstat_r+0x1c>
 800a8c6:	6023      	str	r3, [r4, #0]
 800a8c8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20001870 	.word	0x20001870

0800a8d0 <_isatty_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	4d05      	ldr	r5, [pc, #20]	@ (800a8ec <_isatty_r+0x1c>)
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4608      	mov	r0, r1
 800a8da:	602b      	str	r3, [r5, #0]
 800a8dc:	f7f8 fc6f 	bl	80031be <_isatty>
 800a8e0:	1c43      	adds	r3, r0, #1
 800a8e2:	d102      	bne.n	800a8ea <_isatty_r+0x1a>
 800a8e4:	682b      	ldr	r3, [r5, #0]
 800a8e6:	b103      	cbz	r3, 800a8ea <_isatty_r+0x1a>
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	bd38      	pop	{r3, r4, r5, pc}
 800a8ec:	20001870 	.word	0x20001870

0800a8f0 <_init>:
 800a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f2:	bf00      	nop
 800a8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f6:	bc08      	pop	{r3}
 800a8f8:	469e      	mov	lr, r3
 800a8fa:	4770      	bx	lr

0800a8fc <_fini>:
 800a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fe:	bf00      	nop
 800a900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a902:	bc08      	pop	{r3}
 800a904:	469e      	mov	lr, r3
 800a906:	4770      	bx	lr
