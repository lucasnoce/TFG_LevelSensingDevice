
lsd_fw_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c20  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08011d30  08011d30  00012d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122e0  080122e0  00014358  2**0
                  CONTENTS
  4 .ARM          00000008  080122e0  080122e0  000132e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122e8  080122e8  00014358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122e8  080122e8  000132e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080122ec  080122ec  000132ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  080122f0  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027cc  20000358  08012648  00014358  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002b24  08012648  00014b24  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00014358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020631  00000000  00000000  00014381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000561b  00000000  00000000  000349b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb8  00000000  00000000  00039fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001535  00000000  00000000  0003bb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e9dd  00000000  00000000  0003d0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025d20  00000000  00000000  0005ba9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009862e  00000000  00000000  000817ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119de8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085e8  00000000  00000000  00119e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00122414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	08011d18 	.word	0x08011d18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	08011d18 	.word	0x08011d18

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <aht20_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t aht20_init( I2C_HandleTypeDef *hi2c ){
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	if( hi2c != NULL ){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00d      	beq.n	800113a <aht20_init+0x2a>
		aht20_hi2c = hi2c;
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <aht20_init+0x38>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6013      	str	r3, [r2, #0]
		uint8_t init_cmd = AHT20_I2C_CMD_INIT;
 8001124:	23be      	movs	r3, #190	@ 0xbe
 8001126:	73fb      	strb	r3, [r7, #15]
		return aht20_hal_i2c_transmit( AHT20_I2C_ADDR_WRITE, &init_cmd, 1 );
 8001128:	f107 030f 	add.w	r3, r7, #15
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	2070      	movs	r0, #112	@ 0x70
 8001132:	f000 f901 	bl	8001338 <aht20_hal_i2c_transmit>
 8001136:	4603      	mov	r3, r0
 8001138:	e001      	b.n	800113e <aht20_init+0x2e>
	}
	return LSD_ERR_NULL_HANDLE;
 800113a:	f06f 0301 	mvn.w	r3, #1
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000374 	.word	0x20000374

0800114c <aht20_update>:
		return aht20_hal_i2c_transmit( AHT20_I2C_ADDR_WRITE, &rst_cmd, 1 );
	}
	return LSD_ERR_DEVICE_BUSY;
}

int8_t aht20_update( void ){
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
	int ret = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]

	uint8_t trig_cmd[3] = {
 8001156:	4a3f      	ldr	r2, [pc, #252]	@ (8001254 <aht20_update+0x108>)
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	4611      	mov	r1, r2
 8001160:	8019      	strh	r1, [r3, #0]
 8001162:	3302      	adds	r3, #2
 8001164:	0c12      	lsrs	r2, r2, #16
 8001166:	701a      	strb	r2, [r3, #0]
		AHT20_I2C_CMD_TRIG_MEASURE,
		AHT20_I2C_TRIG_MEAS_DATA0,
		AHT20_I2C_TRIG_MEAS_DATA1
	};

	ret = aht20_hal_i2c_transmit( AHT20_I2C_ADDR_WRITE, trig_cmd, 3 );
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2203      	movs	r2, #3
 800116e:	4619      	mov	r1, r3
 8001170:	2070      	movs	r0, #112	@ 0x70
 8001172:	f000 f8e1 	bl	8001338 <aht20_hal_i2c_transmit>
 8001176:	4603      	mov	r3, r0
 8001178:	613b      	str	r3, [r7, #16]

	// wait at least 75ms
	// todo: add non-blocking function
	lsd_delay_ms( 80 );
 800117a:	2050      	movs	r0, #80	@ 0x50
 800117c:	f000 fcf6 	bl	8001b6c <lsd_delay_ms>

	uint8_t retry_count = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_buf[7] = {0};
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	2100      	movs	r1, #0
 800118e:	460a      	mov	r2, r1
 8001190:	801a      	strh	r2, [r3, #0]
 8001192:	460a      	mov	r2, r1
 8001194:	709a      	strb	r2, [r3, #2]

	do{
		ret = aht20_hal_i2c_receive( AHT20_I2C_ADDR_READ, rx_buf, 7 );
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2207      	movs	r2, #7
 800119a:	4619      	mov	r1, r3
 800119c:	2071      	movs	r0, #113	@ 0x71
 800119e:	f000 f8e9 	bl	8001374 <aht20_hal_i2c_receive>
 80011a2:	4603      	mov	r3, r0
 80011a4:	613b      	str	r3, [r7, #16]
		if( ret != HAL_OK ){
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00e      	beq.n	80011ca <aht20_update+0x7e>
			aht20_data.state.byte = 0;
 80011ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001258 <aht20_update+0x10c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
			aht20_data.humidity.word = 0;
 80011b2:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <aht20_update+0x10c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	605a      	str	r2, [r3, #4]
			aht20_data.temperature.word = 0;
 80011b8:	4b27      	ldr	r3, [pc, #156]	@ (8001258 <aht20_update+0x10c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
			aht20_data.check_sum = 0;
 80011be:	4b26      	ldr	r3, [pc, #152]	@ (8001258 <aht20_update+0x10c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	731a      	strb	r2, [r3, #12]
	//		*data = aht20_data;
			return ret;
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	e040      	b.n	800124c <aht20_update+0x100>
		}

		if( ++retry_count > 10 ){
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	3301      	adds	r3, #1
 80011ce:	75fb      	strb	r3, [r7, #23]
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	2b0a      	cmp	r3, #10
 80011d4:	d902      	bls.n	80011dc <aht20_update+0x90>
			return LSD_ERR_TIMEOUT;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	e037      	b.n	800124c <aht20_update+0x100>
		}

		lsd_delay_ms( 2 );
 80011dc:	2002      	movs	r0, #2
 80011de:	f000 fcc5 	bl	8001b6c <lsd_delay_ms>
	} while( ( rx_buf[0] & 0x80 ) != AHT20_I2C_STATE_NOT_BUSY );
 80011e2:	793b      	ldrb	r3, [r7, #4]
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	dbd5      	blt.n	8001196 <aht20_update+0x4a>

	aht20_data.state.byte = rx_buf[0] & 0xFF;
 80011ea:	793a      	ldrb	r2, [r7, #4]
 80011ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <aht20_update+0x10c>)
 80011ee:	701a      	strb	r2, [r3, #0]

	aht20_data.humidity.bytes[0] = rx_buf[3] & 0xF0;
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f023 030f 	bic.w	r3, r3, #15
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <aht20_update+0x10c>)
 80011fa:	711a      	strb	r2, [r3, #4]
	aht20_data.humidity.bytes[1] = rx_buf[2];
 80011fc:	79ba      	ldrb	r2, [r7, #6]
 80011fe:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <aht20_update+0x10c>)
 8001200:	715a      	strb	r2, [r3, #5]
	aht20_data.humidity.bytes[2] = rx_buf[1];
 8001202:	797a      	ldrb	r2, [r7, #5]
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <aht20_update+0x10c>)
 8001206:	719a      	strb	r2, [r3, #6]
	aht20_data.humidity.word = ( aht20_data.humidity.word >> 4 ) & 0x0FFFFFFF;
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <aht20_update+0x10c>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	4a12      	ldr	r2, [pc, #72]	@ (8001258 <aht20_update+0x10c>)
 8001210:	6053      	str	r3, [r2, #4]

	aht20_data.temperature.bytes[0] = rx_buf[5];
 8001212:	7a7a      	ldrb	r2, [r7, #9]
 8001214:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <aht20_update+0x10c>)
 8001216:	721a      	strb	r2, [r3, #8]
	aht20_data.temperature.bytes[1] = rx_buf[4];
 8001218:	7a3a      	ldrb	r2, [r7, #8]
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <aht20_update+0x10c>)
 800121c:	725a      	strb	r2, [r3, #9]
	aht20_data.temperature.bytes[2] = rx_buf[3] & 0x0F;
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <aht20_update+0x10c>)
 8001228:	729a      	strb	r2, [r3, #10]

	aht20_data.check_sum = rx_buf[6];
 800122a:	7aba      	ldrb	r2, [r7, #10]
 800122c:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <aht20_update+0x10c>)
 800122e:	731a      	strb	r2, [r3, #12]

	if( aht20_data.check_sum != calculate_crc8( &rx_buf[0], 6 ) ){
 8001230:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <aht20_update+0x10c>)
 8001232:	7b1c      	ldrb	r4, [r3, #12]
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2106      	movs	r1, #6
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f8b9 	bl	80013b0 <calculate_crc8>
 800123e:	4603      	mov	r3, r0
 8001240:	429c      	cmp	r4, r3
 8001242:	d002      	beq.n	800124a <aht20_update+0xfe>
		return LSD_ERR_CRC_CHECK;
 8001244:	f06f 0304 	mvn.w	r3, #4
 8001248:	e000      	b.n	800124c <aht20_update+0x100>
	}

//	*data = aht20_data; // copy the contents of aht20_data to the variable pointed by data

	return LSD_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	371c      	adds	r7, #28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	08011d30 	.word	0x08011d30
 8001258:	20000378 	.word	0x20000378

0800125c <aht20_get_temperature_C>:

bool aht20_is_calibrated( void ){
	return aht20_data.state.bit.calibration ? true : false;
}

float aht20_get_temperature_C( void ){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
	float temp_raw = (float) aht20_data.temperature.word;
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <aht20_get_temperature_C+0x68>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fd14 	bl	8000c94 <__aeabi_ui2f>
 800126c:	4603      	mov	r3, r0
 800126e:	607b      	str	r3, [r7, #4]
	return (float) ( ( ( temp_raw / 1024.0 ) / 1024.0 ) * 200.0 ) - 50.0;
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff f8d9 	bl	8000428 <__aeabi_f2d>
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <aht20_get_temperature_C+0x6c>)
 800127c:	f7ff fa56 	bl	800072c <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <aht20_get_temperature_C+0x6c>)
 800128e:	f7ff fa4d 	bl	800072c <__aeabi_ddiv>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <aht20_get_temperature_C+0x70>)
 80012a0:	f7ff f91a 	bl	80004d8 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fbec 	bl	8000a88 <__aeabi_d2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4907      	ldr	r1, [pc, #28]	@ (80012d0 <aht20_get_temperature_C+0x74>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fc3b 	bl	8000b30 <__aeabi_fsub>
 80012ba:	4603      	mov	r3, r0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000378 	.word	0x20000378
 80012c8:	40900000 	.word	0x40900000
 80012cc:	40690000 	.word	0x40690000
 80012d0:	42480000 	.word	0x42480000

080012d4 <aht20_get_humidity_RH>:

float aht20_get_humidity_RH( void ){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	float rh_raw = (float) aht20_data.humidity.word;
 80012da:	4b14      	ldr	r3, [pc, #80]	@ (800132c <aht20_get_humidity_RH+0x58>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fcd8 	bl	8000c94 <__aeabi_ui2f>
 80012e4:	4603      	mov	r3, r0
 80012e6:	607b      	str	r3, [r7, #4]
	return (float) ( ( rh_raw / 1024.0 ) / 1024.0 ) * 100.0;
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff f89d 	bl	8000428 <__aeabi_f2d>
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <aht20_get_humidity_RH+0x5c>)
 80012f4:	f7ff fa1a 	bl	800072c <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <aht20_get_humidity_RH+0x5c>)
 8001306:	f7ff fa11 	bl	800072c <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fbb9 	bl	8000a88 <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	4906      	ldr	r1, [pc, #24]	@ (8001334 <aht20_get_humidity_RH+0x60>)
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fd12 	bl	8000d44 <__aeabi_fmul>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000378 	.word	0x20000378
 8001330:	40900000 	.word	0x40900000
 8001334:	42c80000 	.word	0x42c80000

08001338 <aht20_hal_i2c_transmit>:


/* ==========================================================================================================
 * Local Functions Implementation
 */
static int8_t aht20_hal_i2c_transmit( uint16_t dev_addr, uint8_t *p_buf, uint16_t buf_size ){
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af02      	add	r7, sp, #8
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	80fb      	strh	r3, [r7, #6]
 8001344:	4613      	mov	r3, r2
 8001346:	80bb      	strh	r3, [r7, #4]
	int8_t ret = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]
	LSD_I2C_IRQ_DEV_ID_DMA_TX = LSD_I2C_IRQ_DEV_ID_AHT20;
#elif defined( LSD_CONFIG_I2C_IT )
	ret = HAL_I2C_Master_Transmit_IT( aht20_hi2c, dev_addr, p_buf, buf_size );
	LSD_I2C_IRQ_DEV_ID_IT_TX = LSD_I2C_IRQ_DEV_ID_AHT20;
#else
	ret = HAL_I2C_Master_Transmit( aht20_hi2c, dev_addr, p_buf, buf_size, 1000 );
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <aht20_hal_i2c_transmit+0x38>)
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	88bb      	ldrh	r3, [r7, #4]
 8001352:	88f9      	ldrh	r1, [r7, #6]
 8001354:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001358:	9200      	str	r2, [sp, #0]
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	f003 f89e 	bl	800449c <HAL_I2C_Master_Transmit>
 8001360:	4603      	mov	r3, r0
 8001362:	73fb      	strb	r3, [r7, #15]
#endif /* LSD_CONFIG_I2C_DMA || LSD_CONFIG_I2C_IT */

	return ret;
 8001364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000374 	.word	0x20000374

08001374 <aht20_hal_i2c_receive>:

static int8_t aht20_hal_i2c_receive( uint16_t dev_addr, uint8_t *p_buf, uint16_t buf_size ){
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af02      	add	r7, sp, #8
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	80fb      	strh	r3, [r7, #6]
 8001380:	4613      	mov	r3, r2
 8001382:	80bb      	strh	r3, [r7, #4]
	int8_t ret = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]
	LSD_I2C_IRQ_DEV_ID_DMA_RX = LSD_I2C_IRQ_DEV_ID_AHT20;
#elif defined( LSD_CONFIG_I2C_IT )
	ret = HAL_I2C_Master_Receive_IT( aht20_hi2c, dev_addr, p_buf, buf_size );
	LSD_I2C_IRQ_DEV_ID_IT_RX = LSD_I2C_IRQ_DEV_ID_AHT20;
#else
	ret = HAL_I2C_Master_Receive( aht20_hi2c, dev_addr, p_buf, buf_size, 1000 );
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <aht20_hal_i2c_receive+0x38>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	88bb      	ldrh	r3, [r7, #4]
 800138e:	88f9      	ldrh	r1, [r7, #6]
 8001390:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001394:	9200      	str	r2, [sp, #0]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	f003 f97e 	bl	8004698 <HAL_I2C_Master_Receive>
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]
#endif /* LSD_CONFIG_I2C_DMA || LSD_CONFIG_I2C_IT */

	return ret;
 80013a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000374 	.word	0x20000374

080013b0 <calculate_crc8>:

static uint8_t calculate_crc8( uint8_t *data, uint8_t length ){
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 80013bc:	23ff      	movs	r3, #255	@ 0xff
 80013be:	73fb      	strb	r3, [r7, #15]
    uint8_t polynomial = 0x31;
 80013c0:	2331      	movs	r3, #49	@ 0x31
 80013c2:	733b      	strb	r3, [r7, #12]

	for (uint8_t byte_idx=0; byte_idx<length; byte_idx++){
 80013c4:	2300      	movs	r3, #0
 80013c6:	73bb      	strb	r3, [r7, #14]
 80013c8:	e022      	b.n	8001410 <calculate_crc8+0x60>
		crc ^= data[byte_idx];
 80013ca:	7bbb      	ldrb	r3, [r7, #14]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	781a      	ldrb	r2, [r3, #0]
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	4053      	eors	r3, r2
 80013d6:	73fb      	strb	r3, [r7, #15]
		for (uint8_t bit_idx=8; bit_idx>0; --bit_idx){
 80013d8:	2308      	movs	r3, #8
 80013da:	737b      	strb	r3, [r7, #13]
 80013dc:	e012      	b.n	8001404 <calculate_crc8+0x54>
			if (crc & 0x80){
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da08      	bge.n	80013f8 <calculate_crc8+0x48>
				crc = ( crc << 1 ) ^ polynomial;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	b25a      	sxtb	r2, r3
 80013ec:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80013f0:	4053      	eors	r3, r2
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	e002      	b.n	80013fe <calculate_crc8+0x4e>
			}
			else{
				crc <<= 1;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
		for (uint8_t bit_idx=8; bit_idx>0; --bit_idx){
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	3b01      	subs	r3, #1
 8001402:	737b      	strb	r3, [r7, #13]
 8001404:	7b7b      	ldrb	r3, [r7, #13]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1e9      	bne.n	80013de <calculate_crc8+0x2e>
	for (uint8_t byte_idx=0; byte_idx<length; byte_idx++){
 800140a:	7bbb      	ldrb	r3, [r7, #14]
 800140c:	3301      	adds	r3, #1
 800140e:	73bb      	strb	r3, [r7, #14]
 8001410:	7bba      	ldrb	r2, [r7, #14]
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	429a      	cmp	r2, r3
 8001416:	d3d8      	bcc.n	80013ca <calculate_crc8+0x1a>
			}
		}
	}

    return crc;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <ajsr04m_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t ajsr04m_init( TIM_HandleTypeDef *htim ){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	if ( htim != NULL ){
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d01d      	beq.n	800146e <ajsr04m_init+0x4a>
		p_ajsr04m_htim = htim;
 8001432:	4a12      	ldr	r2, [pc, #72]	@ (800147c <ajsr04m_init+0x58>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6013      	str	r3, [r2, #0]

		ajsr04m_data.port = US_ECHO_GPIO_Port;
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <ajsr04m_init+0x5c>)
 800143a:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <ajsr04m_init+0x60>)
 800143c:	601a      	str	r2, [r3, #0]
		ajsr04m_data.pin_echo = US_ECHO_Pin;
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <ajsr04m_init+0x5c>)
 8001440:	2201      	movs	r2, #1
 8001442:	809a      	strh	r2, [r3, #4]
		ajsr04m_data.pin_trig = US_TRIG_Pin;
 8001444:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <ajsr04m_init+0x5c>)
 8001446:	2202      	movs	r2, #2
 8001448:	80da      	strh	r2, [r3, #6]
		ajsr04m_data.tof_ticks = 0;
 800144a:	4b0d      	ldr	r3, [pc, #52]	@ (8001480 <ajsr04m_init+0x5c>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
		ajsr04m_data.measuring = false;
 8001450:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <ajsr04m_init+0x5c>)
 8001452:	2200      	movs	r2, #0
 8001454:	731a      	strb	r2, [r3, #12]
		ajsr04m_data.tof = 0.0;
 8001456:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <ajsr04m_init+0x5c>)
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	611a      	str	r2, [r3, #16]

		return HAL_TIM_Base_Start( p_ajsr04m_htim );
 800145e:	4b07      	ldr	r3, [pc, #28]	@ (800147c <ajsr04m_init+0x58>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f007 f9b8 	bl	80087d8 <HAL_TIM_Base_Start>
 8001468:	4603      	mov	r3, r0
 800146a:	b25b      	sxtb	r3, r3
 800146c:	e001      	b.n	8001472 <ajsr04m_init+0x4e>
	}
	return LSD_ERR_NULL_HANDLE;
 800146e:	f06f 0301 	mvn.w	r3, #1
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000388 	.word	0x20000388
 8001480:	2000038c 	.word	0x2000038c
 8001484:	40010c00 	.word	0x40010c00

08001488 <ajsr04m_read_tof_exti>:
	ajsr04m_data.measuring = false;

	return LSD_OK;
}

int8_t ajsr04m_read_tof_exti( void ){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	ajsr04m_trigger_measurement();
 800148c:	f000 f85e 	bl	800154c <ajsr04m_trigger_measurement>
	return LSD_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <ajsr04m_get_tof_ms>:
//static volatile int tim_flag;
float ajsr04m_get_tof_ms( void ){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Stop( p_ajsr04m_htim );
//	__HAL_TIM_SET_COUNTER( p_ajsr04m_htim, 0 );

	if( ajsr04m_data.measuring == false ){
 800149c:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <ajsr04m_get_tof_ms+0x58>)
 800149e:	7b1b      	ldrb	r3, [r3, #12]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f083 0301 	eor.w	r3, r3, #1
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d019      	beq.n	80014e0 <ajsr04m_get_tof_ms+0x48>
//		int ret = tim_flag ;
		ajsr04m_data.tof = (float) ajsr04m_data.tof_ticks / 10000.0;		// translates to miliseconds
 80014ac:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <ajsr04m_get_tof_ms+0x58>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fbef 	bl	8000c94 <__aeabi_ui2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffb5 	bl	8000428 <__aeabi_f2d>
 80014be:	a30a      	add	r3, pc, #40	@ (adr r3, 80014e8 <ajsr04m_get_tof_ms+0x50>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f932 	bl	800072c <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff fada 	bl	8000a88 <__aeabi_d2f>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4a06      	ldr	r2, [pc, #24]	@ (80014f0 <ajsr04m_get_tof_ms+0x58>)
 80014d8:	6113      	str	r3, [r2, #16]
		return ajsr04m_data.tof;
 80014da:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <ajsr04m_get_tof_ms+0x58>)
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	e000      	b.n	80014e2 <ajsr04m_get_tof_ms+0x4a>
	}
	return LSD_ERR_DEVICE_BUSY;
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <ajsr04m_get_tof_ms+0x5c>)
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	00000000 	.word	0x00000000
 80014ec:	40c38800 	.word	0x40c38800
 80014f0:	2000038c 	.word	0x2000038c
 80014f4:	c0800000 	.word	0xc0800000

080014f8 <ajsr04m_callback_handler_echo_start>:

void ajsr04m_callback_handler_echo_start( void ){
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Start( p_ajsr04m_htim );
	__HAL_TIM_SET_COUNTER( p_ajsr04m_htim, 0 );
 80014fc:	4b07      	ldr	r3, [pc, #28]	@ (800151c <ajsr04m_callback_handler_echo_start+0x24>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	@ 0x24
//	__HAL_TIM_CLEAR_FLAG(p_ajsr04m_htim, TIM_FLAG_UPDATE);
	ajsr04m_data.tof_ticks = 0;
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <ajsr04m_callback_handler_echo_start+0x28>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
	ajsr04m_data.measuring = true;
 800150c:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <ajsr04m_callback_handler_echo_start+0x28>)
 800150e:	2201      	movs	r2, #1
 8001510:	731a      	strb	r2, [r3, #12]
	return;
 8001512:	bf00      	nop
}
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000388 	.word	0x20000388
 8001520:	2000038c 	.word	0x2000038c

08001524 <ajsr04m_callback_handler_echo_finish>:

void ajsr04m_callback_handler_echo_finish( void ){
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	ajsr04m_data.tof_ticks = __HAL_TIM_GET_COUNTER( p_ajsr04m_htim );
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <ajsr04m_callback_handler_echo_finish+0x20>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001530:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <ajsr04m_callback_handler_echo_finish+0x24>)
 8001532:	6093      	str	r3, [r2, #8]
	ajsr04m_data.measuring = false;
 8001534:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <ajsr04m_callback_handler_echo_finish+0x24>)
 8001536:	2200      	movs	r2, #0
 8001538:	731a      	strb	r2, [r3, #12]
//	tim_flag = __HAL_TIM_GET_FLAG(p_ajsr04m_htim, TIM_FLAG_UPDATE);
//	HAL_TIM_Base_Stop( p_ajsr04m_htim );
	return;
 800153a:	bf00      	nop
}
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000388 	.word	0x20000388
 8001548:	2000038c 	.word	0x2000038c

0800154c <ajsr04m_trigger_measurement>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static void ajsr04m_trigger_measurement( void ){
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( ajsr04m_data.port, ajsr04m_data.pin_trig, GPIO_PIN_SET );
 8001550:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <ajsr04m_trigger_measurement+0x30>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a09      	ldr	r2, [pc, #36]	@ (800157c <ajsr04m_trigger_measurement+0x30>)
 8001556:	88d1      	ldrh	r1, [r2, #6]
 8001558:	2201      	movs	r2, #1
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fe29 	bl	80041b2 <HAL_GPIO_WritePin>

//	HAL_TIM_Base_Start( p_ajsr04m_htim );
//	__HAL_TIM_SET_COUNTER( p_ajsr04m_htim, 0 );
	lsd_delay_us( AJSR04M_TRIG_MIN_DELAY_US );
 8001560:	f240 404c 	movw	r0, #1100	@ 0x44c
 8001564:	f000 fada 	bl	8001b1c <lsd_delay_us>

	HAL_GPIO_WritePin( ajsr04m_data.port, ajsr04m_data.pin_trig, GPIO_PIN_RESET );
 8001568:	4b04      	ldr	r3, [pc, #16]	@ (800157c <ajsr04m_trigger_measurement+0x30>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a03      	ldr	r2, [pc, #12]	@ (800157c <ajsr04m_trigger_measurement+0x30>)
 800156e:	88d1      	ldrh	r1, [r2, #6]
 8001570:	2200      	movs	r2, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f002 fe1d 	bl	80041b2 <HAL_GPIO_WritePin>
	return;
 8001578:	bf00      	nop
}
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000038c 	.word	0x2000038c

08001580 <le910r1br_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t le910r1br_init( UART_HandleTypeDef *huart, TIM_HandleTypeDef *htim ){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
	if( huart != NULL && htim != NULL ){
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d01f      	beq.n	80015d0 <le910r1br_init+0x50>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d01c      	beq.n	80015d0 <le910r1br_init+0x50>
		p_modem_huart  = huart;
 8001596:	4a11      	ldr	r2, [pc, #68]	@ (80015dc <le910r1br_init+0x5c>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6013      	str	r3, [r2, #0]
		p_modem_htim   = htim;
 800159c:	4a10      	ldr	r2, [pc, #64]	@ (80015e0 <le910r1br_init+0x60>)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6013      	str	r3, [r2, #0]

		modem_data.tim_channel  = TIM_CHANNEL_3;	// todo: select correct channel
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <le910r1br_init+0x64>)
 80015a4:	2208      	movs	r2, #8
 80015a6:	701a      	strb	r2, [r3, #0]
		modem_data.port_pwr		= uLTE_PWR_GPIO_Port;
 80015a8:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <le910r1br_init+0x64>)
 80015aa:	4a0f      	ldr	r2, [pc, #60]	@ (80015e8 <le910r1br_init+0x68>)
 80015ac:	605a      	str	r2, [r3, #4]
		modem_data.pin_pwr 		= uLTE_PWR_Pin;
 80015ae:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <le910r1br_init+0x64>)
 80015b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b4:	811a      	strh	r2, [r3, #8]
		modem_data.ready 		= false;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <le910r1br_init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	729a      	strb	r2, [r3, #10]

		HAL_GPIO_WritePin( modem_data.port_pwr, modem_data.pin_pwr, GPIO_PIN_RESET );
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <le910r1br_init+0x64>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <le910r1br_init+0x64>)
 80015c2:	8911      	ldrh	r1, [r2, #8]
 80015c4:	2200      	movs	r2, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 fdf3 	bl	80041b2 <HAL_GPIO_WritePin>

		return LSD_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	e001      	b.n	80015d4 <le910r1br_init+0x54>
	}
	return LSD_ERR_NULL_HANDLE;
 80015d0:	f06f 0301 	mvn.w	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200003a0 	.word	0x200003a0
 80015e0:	200003a4 	.word	0x200003a4
 80015e4:	200003a8 	.word	0x200003a8
 80015e8:	40010c00 	.word	0x40010c00

080015ec <le910r1br_power_off>:
*/

	return;
}

void le910r1br_power_off( void ){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( modem_data.port_pwr, modem_data.pin_pwr, GPIO_PIN_SET );
 80015f0:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <le910r1br_power_off+0x30>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4a09      	ldr	r2, [pc, #36]	@ (800161c <le910r1br_power_off+0x30>)
 80015f6:	8911      	ldrh	r1, [r2, #8]
 80015f8:	2201      	movs	r2, #1
 80015fa:	4618      	mov	r0, r3
 80015fc:	f002 fdd9 	bl	80041b2 <HAL_GPIO_WritePin>
	HAL_Delay( LE910R1BR_TURN_OFF_PULSE_MS );
 8001600:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001604:	f002 fad6 	bl	8003bb4 <HAL_Delay>
	HAL_GPIO_WritePin( modem_data.port_pwr, modem_data.pin_pwr, GPIO_PIN_RESET );
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <le910r1br_power_off+0x30>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4a03      	ldr	r2, [pc, #12]	@ (800161c <le910r1br_power_off+0x30>)
 800160e:	8911      	ldrh	r1, [r2, #8]
 8001610:	2200      	movs	r2, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f002 fdcd 	bl	80041b2 <HAL_GPIO_WritePin>
	HAL_TIM_OC_Start_IT( p_modem_htim, modem_data.tim_channel );

	__HAL_TIM_SET_COMPARE( p_modem_htim, modem_data.tim_channel, \
		( __HAL_TIM_GET_COMPARE( p_modem_htim, modem_data.tim_channel ) + LE910R1BR_TURN_OFF_PULSE_MS ) );
*/
	return;
 8001618:	bf00      	nop
}
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200003a8 	.word	0x200003a8

08001620 <leds_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t leds_init( TIM_HandleTypeDef *htim ){
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	if( htim != NULL ){
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d04c      	beq.n	80016c8 <leds_init+0xa8>
		p_leds_htim = htim;
 800162e:	4a29      	ldr	r2, [pc, #164]	@ (80016d4 <leds_init+0xb4>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6013      	str	r3, [r2, #0]

		leds_data[LSD_LED_BLUE].channel = TIM_CHANNEL_1;
 8001634:	4b28      	ldr	r3, [pc, #160]	@ (80016d8 <leds_init+0xb8>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
		leds_data[LSD_LED_RED].channel = TIM_CHANNEL_2;
 800163a:	4b27      	ldr	r3, [pc, #156]	@ (80016d8 <leds_init+0xb8>)
 800163c:	2204      	movs	r2, #4
 800163e:	741a      	strb	r2, [r3, #16]

		leds_data[LSD_LED_BLUE].pin = LED_INFO1_Pin;
 8001640:	4b25      	ldr	r3, [pc, #148]	@ (80016d8 <leds_init+0xb8>)
 8001642:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001646:	811a      	strh	r2, [r3, #8]
		leds_data[LSD_LED_RED].pin = LED_INFO2_Pin;
 8001648:	4b23      	ldr	r3, [pc, #140]	@ (80016d8 <leds_init+0xb8>)
 800164a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800164e:	831a      	strh	r2, [r3, #24]

		leds_data[LSD_LED_BLUE].port = LED_INFO1_GPIO_Port;
 8001650:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <leds_init+0xb8>)
 8001652:	4a22      	ldr	r2, [pc, #136]	@ (80016dc <leds_init+0xbc>)
 8001654:	605a      	str	r2, [r3, #4]
		leds_data[LSD_LED_RED].port = LED_INFO2_GPIO_Port;
 8001656:	4b20      	ldr	r3, [pc, #128]	@ (80016d8 <leds_init+0xb8>)
 8001658:	4a20      	ldr	r2, [pc, #128]	@ (80016dc <leds_init+0xbc>)
 800165a:	615a      	str	r2, [r3, #20]

		leds_data[LSD_LED_BLUE].state = GPIO_PIN_SET;
 800165c:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <leds_init+0xb8>)
 800165e:	2201      	movs	r2, #1
 8001660:	729a      	strb	r2, [r3, #10]
		leds_data[LSD_LED_RED].state = GPIO_PIN_SET;
 8001662:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <leds_init+0xb8>)
 8001664:	2201      	movs	r2, #1
 8001666:	769a      	strb	r2, [r3, #26]

		leds_data[LSD_LED_BLUE].blink_half_period = 0;
 8001668:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <leds_init+0xb8>)
 800166a:	2200      	movs	r2, #0
 800166c:	819a      	strh	r2, [r3, #12]
		leds_data[LSD_LED_RED].blink_half_period = 0;
 800166e:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <leds_init+0xb8>)
 8001670:	2200      	movs	r2, #0
 8001672:	839a      	strh	r2, [r3, #28]

		leds_data[LSD_LED_BLUE].single_blink = false;
 8001674:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <leds_init+0xb8>)
 8001676:	2200      	movs	r2, #0
 8001678:	739a      	strb	r2, [r3, #14]
		leds_data[LSD_LED_RED].single_blink = false;
 800167a:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <leds_init+0xb8>)
 800167c:	2200      	movs	r2, #0
 800167e:	779a      	strb	r2, [r3, #30]

//		HAL_GPIO_WritePin( LED_INFO1_GPIO_Port, LED_INFO1_Pin, GPIO_PIN_RESET );
//		HAL_GPIO_WritePin( LED_INFO2_GPIO_Port, LED_INFO2_Pin, GPIO_PIN_RESET );

		int8_t ret = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]
		ret = HAL_TIM_Base_Start_IT( htim );
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f007 f917 	bl	80088b8 <HAL_TIM_Base_Start_IT>
 800168a:	4603      	mov	r3, r0
 800168c:	73fb      	strb	r3, [r7, #15]
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	e013      	b.n	80016bc <leds_init+0x9c>
			ret += HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[i].channel );
 8001694:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <leds_init+0xb4>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	490f      	ldr	r1, [pc, #60]	@ (80016d8 <leds_init+0xb8>)
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	440b      	add	r3, r1
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	4619      	mov	r1, r3
 80016a4:	4610      	mov	r0, r2
 80016a6:	f007 faa1 	bl	8008bec <HAL_TIM_OC_Stop_IT>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	4413      	add	r3, r2
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	73fb      	strb	r3, [r7, #15]
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	3301      	adds	r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	dde8      	ble.n	8001694 <leds_init+0x74>
		}

		return ret;
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	e001      	b.n	80016cc <leds_init+0xac>
	}
	return LSD_ERR_NULL_HANDLE;
 80016c8:	f06f 0301 	mvn.w	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200003b4 	.word	0x200003b4
 80016d8:	200003b8 	.word	0x200003b8
 80016dc:	40011000 	.word	0x40011000

080016e0 <leds_turn_on>:

int8_t leds_turn_on( uint8_t led ){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
	int8_t ret = LSD_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	73fb      	strb	r3, [r7, #15]
	if( led < 0 || led > LSD_ALL_LEDS ){
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d902      	bls.n	80016fa <leds_turn_on+0x1a>
		return LSD_ERR_WRONG_PARAM;
 80016f4:	f06f 0302 	mvn.w	r3, #2
 80016f8:	e043      	b.n	8001782 <leds_turn_on+0xa2>
	}
	else if( led < LSD_ALL_LEDS ){
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d817      	bhi.n	8001730 <leds_turn_on+0x50>
		HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[led].channel );
 8001700:	4b22      	ldr	r3, [pc, #136]	@ (800178c <leds_turn_on+0xac>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	4922      	ldr	r1, [pc, #136]	@ (8001790 <leds_turn_on+0xb0>)
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	440b      	add	r3, r1
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f007 fa6b 	bl	8008bec <HAL_TIM_OC_Stop_IT>
		leds_data[led].state = GPIO_PIN_SET;
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	4a1d      	ldr	r2, [pc, #116]	@ (8001790 <leds_turn_on+0xb0>)
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	4413      	add	r3, r2
 800171e:	330a      	adds	r3, #10
 8001720:	2201      	movs	r2, #1
 8001722:	701a      	strb	r2, [r3, #0]
		leds_write_value( led, GPIO_PIN_SET );
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	2101      	movs	r1, #1
 8001728:	4618      	mov	r0, r3
 800172a:	f000 f93d 	bl	80019a8 <leds_write_value>
 800172e:	e026      	b.n	800177e <leds_turn_on+0x9e>
	}
	else{
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	e020      	b.n	8001778 <leds_turn_on+0x98>
			ret += HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[i].channel );
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <leds_turn_on+0xac>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4915      	ldr	r1, [pc, #84]	@ (8001790 <leds_turn_on+0xb0>)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	440b      	add	r3, r1
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	4610      	mov	r0, r2
 8001748:	f007 fa50 	bl	8008bec <HAL_TIM_OC_Stop_IT>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	4413      	add	r3, r2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	73fb      	strb	r3, [r7, #15]
			leds_data[i].state = GPIO_PIN_SET;
 8001758:	4a0d      	ldr	r2, [pc, #52]	@ (8001790 <leds_turn_on+0xb0>)
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	4413      	add	r3, r2
 8001760:	330a      	adds	r3, #10
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
			leds_write_value( i, GPIO_PIN_SET );
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2101      	movs	r1, #1
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f91b 	bl	80019a8 <leds_write_value>
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3301      	adds	r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b01      	cmp	r3, #1
 800177c:	dddb      	ble.n	8001736 <leds_turn_on+0x56>
		}
	}
	return ret;
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200003b4 	.word	0x200003b4
 8001790:	200003b8 	.word	0x200003b8

08001794 <leds_turn_off>:

int8_t leds_turn_off( uint8_t led ){
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
	if( led < 0 || led > LSD_ALL_LEDS ){
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d902      	bls.n	80017aa <leds_turn_off+0x16>
		return LSD_ERR_WRONG_PARAM;
 80017a4:	f06f 0302 	mvn.w	r3, #2
 80017a8:	e03c      	b.n	8001824 <leds_turn_off+0x90>
	}
	else if( led < LSD_ALL_LEDS ){
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d817      	bhi.n	80017e0 <leds_turn_off+0x4c>
		HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[led].channel );
 80017b0:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <leds_turn_off+0x98>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	491e      	ldr	r1, [pc, #120]	@ (8001830 <leds_turn_off+0x9c>)
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	440b      	add	r3, r1
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	4619      	mov	r1, r3
 80017c0:	4610      	mov	r0, r2
 80017c2:	f007 fa13 	bl	8008bec <HAL_TIM_OC_Stop_IT>
		leds_data[led].state = GPIO_PIN_RESET;
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	4a19      	ldr	r2, [pc, #100]	@ (8001830 <leds_turn_off+0x9c>)
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	4413      	add	r3, r2
 80017ce:	330a      	adds	r3, #10
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
		leds_write_value( led, GPIO_PIN_RESET );
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 f8e5 	bl	80019a8 <leds_write_value>
 80017de:	e020      	b.n	8001822 <leds_turn_off+0x8e>
	}
	else{
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	e01a      	b.n	800181c <leds_turn_off+0x88>
			HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[i].channel );
 80017e6:	4b11      	ldr	r3, [pc, #68]	@ (800182c <leds_turn_off+0x98>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4911      	ldr	r1, [pc, #68]	@ (8001830 <leds_turn_off+0x9c>)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	440b      	add	r3, r1
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	4610      	mov	r0, r2
 80017f8:	f007 f9f8 	bl	8008bec <HAL_TIM_OC_Stop_IT>
			leds_data[i].state = GPIO_PIN_RESET;
 80017fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001830 <leds_turn_off+0x9c>)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	4413      	add	r3, r2
 8001804:	330a      	adds	r3, #10
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
			leds_write_value( i, GPIO_PIN_RESET );
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f8c9 	bl	80019a8 <leds_write_value>
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3301      	adds	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b01      	cmp	r3, #1
 8001820:	dde1      	ble.n	80017e6 <leds_turn_off+0x52>
		}
	}
	return LSD_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200003b4 	.word	0x200003b4
 8001830:	200003b8 	.word	0x200003b8

08001834 <leds_blink_fast>:
		}
	}
	return LSD_OK;
}

int8_t leds_blink_fast( uint8_t led ){
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
	if( led < 0 || led > LSD_ALL_LEDS ){
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2b02      	cmp	r3, #2
 8001842:	d902      	bls.n	800184a <leds_blink_fast+0x16>
		return LSD_ERR_WRONG_PARAM;
 8001844:	f06f 0302 	mvn.w	r3, #2
 8001848:	e061      	b.n	800190e <leds_blink_fast+0xda>
	}
	else if( led < LSD_ALL_LEDS ){
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d829      	bhi.n	80018a4 <leds_blink_fast+0x70>
		leds_data[led].blink_half_period = LEDS_FAST_HALF_PERIOD_MS;
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4a31      	ldr	r2, [pc, #196]	@ (8001918 <leds_blink_fast+0xe4>)
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	4413      	add	r3, r2
 8001858:	330c      	adds	r3, #12
 800185a:	2264      	movs	r2, #100	@ 0x64
 800185c:	801a      	strh	r2, [r3, #0]
		leds_data[led].single_blink = false;
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	4a2d      	ldr	r2, [pc, #180]	@ (8001918 <leds_blink_fast+0xe4>)
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	4413      	add	r3, r2
 8001866:	330e      	adds	r3, #14
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
		leds_data[led].state = GPIO_PIN_RESET;
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	4a2a      	ldr	r2, [pc, #168]	@ (8001918 <leds_blink_fast+0xe4>)
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	4413      	add	r3, r2
 8001874:	330a      	adds	r3, #10
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
		leds_write_value( led, GPIO_PIN_RESET );
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f892 	bl	80019a8 <leds_write_value>
		HAL_TIM_OC_Start_IT( p_leds_htim, leds_data[led].channel );
 8001884:	4b25      	ldr	r3, [pc, #148]	@ (800191c <leds_blink_fast+0xe8>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	4923      	ldr	r1, [pc, #140]	@ (8001918 <leds_blink_fast+0xe4>)
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	440b      	add	r3, r1
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4619      	mov	r1, r3
 8001894:	4610      	mov	r0, r2
 8001896:	f007 f8b9 	bl	8008a0c <HAL_TIM_OC_Start_IT>
		leds_timer_set_compare_value( led );
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f8a1 	bl	80019e4 <leds_timer_set_compare_value>
 80018a2:	e033      	b.n	800190c <leds_blink_fast+0xd8>
	}
	else{
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e02d      	b.n	8001906 <leds_blink_fast+0xd2>
			leds_data[i].blink_half_period = LEDS_FAST_HALF_PERIOD_MS;
 80018aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001918 <leds_blink_fast+0xe4>)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	4413      	add	r3, r2
 80018b2:	330c      	adds	r3, #12
 80018b4:	2264      	movs	r2, #100	@ 0x64
 80018b6:	801a      	strh	r2, [r3, #0]
			leds_data[i].single_blink = false;
 80018b8:	4a17      	ldr	r2, [pc, #92]	@ (8001918 <leds_blink_fast+0xe4>)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4413      	add	r3, r2
 80018c0:	330e      	adds	r3, #14
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
			leds_data[i].state = GPIO_PIN_RESET;
 80018c6:	4a14      	ldr	r2, [pc, #80]	@ (8001918 <leds_blink_fast+0xe4>)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	4413      	add	r3, r2
 80018ce:	330a      	adds	r3, #10
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
			leds_write_value( i, GPIO_PIN_RESET );
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f864 	bl	80019a8 <leds_write_value>
			HAL_TIM_OC_Start_IT( p_leds_htim, leds_data[i].channel );
 80018e0:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <leds_blink_fast+0xe8>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	490c      	ldr	r1, [pc, #48]	@ (8001918 <leds_blink_fast+0xe4>)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	440b      	add	r3, r1
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f007 f88b 	bl	8008a0c <HAL_TIM_OC_Start_IT>
			leds_timer_set_compare_value( i );
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f872 	bl	80019e4 <leds_timer_set_compare_value>
		for( int i=0; i<LSD_ALL_LEDS; i++ ){
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3301      	adds	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b01      	cmp	r3, #1
 800190a:	ddce      	ble.n	80018aa <leds_blink_fast+0x76>
		}
	}
	return LSD_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200003b8 	.word	0x200003b8
 800191c:	200003b4 	.word	0x200003b4

08001920 <leds_callback_handler>:
		}
	}
	return LSD_OK;
}

void leds_callback_handler( uint8_t led ){
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
	leds_data[led].state = ! leds_data[led].state;
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	4a1c      	ldr	r2, [pc, #112]	@ (80019a0 <leds_callback_handler+0x80>)
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	4413      	add	r3, r2
 8001932:	330a      	adds	r3, #10
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf0c      	ite	eq
 800193a:	2301      	moveq	r3, #1
 800193c:	2300      	movne	r3, #0
 800193e:	b2da      	uxtb	r2, r3
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	4611      	mov	r1, r2
 8001944:	4a16      	ldr	r2, [pc, #88]	@ (80019a0 <leds_callback_handler+0x80>)
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4413      	add	r3, r2
 800194a:	330a      	adds	r3, #10
 800194c:	460a      	mov	r2, r1
 800194e:	701a      	strb	r2, [r3, #0]
	leds_write_value( led, leds_data[led].state );
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	4a13      	ldr	r2, [pc, #76]	@ (80019a0 <leds_callback_handler+0x80>)
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	4413      	add	r3, r2
 8001958:	330a      	adds	r3, #10
 800195a:	781a      	ldrb	r2, [r3, #0]
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f000 f821 	bl	80019a8 <leds_write_value>

	if( leds_data[led].single_blink == true ){
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <leds_callback_handler+0x80>)
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	4413      	add	r3, r2
 800196e:	330e      	adds	r3, #14
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <leds_callback_handler+0x6e>
		HAL_TIM_OC_Stop_IT( p_leds_htim, leds_data[led].channel );
 8001976:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <leds_callback_handler+0x84>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	4908      	ldr	r1, [pc, #32]	@ (80019a0 <leds_callback_handler+0x80>)
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	440b      	add	r3, r1
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	4610      	mov	r0, r2
 8001988:	f007 f930 	bl	8008bec <HAL_TIM_OC_Stop_IT>
	}
	else{
		leds_timer_set_compare_value( led );
	}

	return;
 800198c:	e004      	b.n	8001998 <leds_callback_handler+0x78>
		leds_timer_set_compare_value( led );
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f000 f827 	bl	80019e4 <leds_timer_set_compare_value>
	return;
 8001996:	bf00      	nop
}
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200003b8 	.word	0x200003b8
 80019a4:	200003b4 	.word	0x200003b4

080019a8 <leds_write_value>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static inline void leds_write_value( uint8_t led, uint8_t value ){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	460a      	mov	r2, r1
 80019b2:	71fb      	strb	r3, [r7, #7]
 80019b4:	4613      	mov	r3, r2
 80019b6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin( leds_data[led].port, leds_data[led].pin, value );
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4a09      	ldr	r2, [pc, #36]	@ (80019e0 <leds_write_value+0x38>)
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4413      	add	r3, r2
 80019c0:	3304      	adds	r3, #4
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	4a06      	ldr	r2, [pc, #24]	@ (80019e0 <leds_write_value+0x38>)
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4413      	add	r3, r2
 80019cc:	3308      	adds	r3, #8
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	79ba      	ldrb	r2, [r7, #6]
 80019d2:	4619      	mov	r1, r3
 80019d4:	f002 fbed 	bl	80041b2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin( LED_INFO2_GPIO_Port, LED_INFO2_Pin, value );
//			break;
//		default:
//			break;
//	}
	return;
 80019d8:	bf00      	nop
}
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200003b8 	.word	0x200003b8

080019e4 <leds_timer_set_compare_value>:

static inline void leds_timer_set_compare_value( uint8_t led ){
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
	uint32_t current_count = __HAL_TIM_GET_COUNTER( p_leds_htim );
 80019ee:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <leds_timer_set_compare_value+0x8c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f6:	60fb      	str	r3, [r7, #12]
	uint32_t new_count = current_count + (uint32_t) leds_data[led].blink_half_period;
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001a74 <leds_timer_set_compare_value+0x90>)
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	4413      	add	r3, r2
 8001a00:	330c      	adds	r3, #12
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4413      	add	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE( p_leds_htim, leds_data[led].channel, new_count );
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4a19      	ldr	r2, [pc, #100]	@ (8001a74 <leds_timer_set_compare_value+0x90>)
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <leds_timer_set_compare_value+0x42>
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <leds_timer_set_compare_value+0x8c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	635a      	str	r2, [r3, #52]	@ 0x34
	return;
 8001a24:	e01f      	b.n	8001a66 <leds_timer_set_compare_value+0x82>
	__HAL_TIM_SET_COMPARE( p_leds_htim, leds_data[led].channel, new_count );
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	4a12      	ldr	r2, [pc, #72]	@ (8001a74 <leds_timer_set_compare_value+0x90>)
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d105      	bne.n	8001a40 <leds_timer_set_compare_value+0x5c>
 8001a34:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <leds_timer_set_compare_value+0x8c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	6393      	str	r3, [r2, #56]	@ 0x38
	return;
 8001a3e:	e012      	b.n	8001a66 <leds_timer_set_compare_value+0x82>
	__HAL_TIM_SET_COMPARE( p_leds_htim, leds_data[led].channel, new_count );
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	4a0c      	ldr	r2, [pc, #48]	@ (8001a74 <leds_timer_set_compare_value+0x90>)
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d105      	bne.n	8001a5a <leds_timer_set_compare_value+0x76>
 8001a4e:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <leds_timer_set_compare_value+0x8c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	63d3      	str	r3, [r2, #60]	@ 0x3c
	return;
 8001a58:	e005      	b.n	8001a66 <leds_timer_set_compare_value+0x82>
	__HAL_TIM_SET_COMPARE( p_leds_htim, leds_data[led].channel, new_count );
 8001a5a:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <leds_timer_set_compare_value+0x8c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	6413      	str	r3, [r2, #64]	@ 0x40
	return;
 8001a64:	bf00      	nop
}
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	200003b4 	.word	0x200003b4
 8001a74:	200003b8 	.word	0x200003b8

08001a78 <HAL_TIM_OC_DelayElapsedCallback>:
//void HAL_I2C_MasterTxCpltCallback ( I2C_HandleTypeDef *hi2c );
//void HAL_I2C_MasterRxCpltCallback ( I2C_HandleTypeDef *hi2c );
//void HAL_I2C_ErrorCallback ( I2C_HandleTypeDef *hi2c );


void HAL_TIM_OC_DelayElapsedCallback( TIM_HandleTypeDef *htim ){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    if( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 ){
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7f1b      	ldrb	r3, [r3, #28]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d103      	bne.n	8001a90 <HAL_TIM_OC_DelayElapsedCallback+0x18>
    	leds_callback_handler( LSD_LED_BLUE );
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff ff49 	bl	8001920 <leds_callback_handler>
    	leds_callback_handler( LSD_LED_RED );
    }
//    else if( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3 ){
//    	le910r1br_turn_on_callback_handle();
//    }
    return;
 8001a8e:	e007      	b.n	8001aa0 <HAL_TIM_OC_DelayElapsedCallback+0x28>
    else if( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 ){
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7f1b      	ldrb	r3, [r3, #28]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d103      	bne.n	8001aa0 <HAL_TIM_OC_DelayElapsedCallback+0x28>
    	leds_callback_handler( LSD_LED_RED );
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff ff41 	bl	8001920 <leds_callback_handler>
    return;
 8001a9e:	bf00      	nop
 8001aa0:	bf00      	nop
}
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin ){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == US_ECHO_Pin ){
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d10c      	bne.n	8001ad2 <HAL_GPIO_EXTI_Callback+0x2a>
		if( HAL_GPIO_ReadPin( US_ECHO_GPIO_Port, US_ECHO_Pin ) == GPIO_PIN_SET ){
 8001ab8:	2101      	movs	r1, #1
 8001aba:	4808      	ldr	r0, [pc, #32]	@ (8001adc <HAL_GPIO_EXTI_Callback+0x34>)
 8001abc:	f002 fb62 	bl	8004184 <HAL_GPIO_ReadPin>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d102      	bne.n	8001acc <HAL_GPIO_EXTI_Callback+0x24>
			ajsr04m_callback_handler_echo_start();
 8001ac6:	f7ff fd17 	bl	80014f8 <ajsr04m_callback_handler_echo_start>
		}
		else{
			ajsr04m_callback_handler_echo_finish();
		}
	}
	return;
 8001aca:	e002      	b.n	8001ad2 <HAL_GPIO_EXTI_Callback+0x2a>
			ajsr04m_callback_handler_echo_finish();
 8001acc:	f7ff fd2a 	bl	8001524 <ajsr04m_callback_handler_echo_finish>
	return;
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
}
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40010c00 	.word	0x40010c00

08001ae0 <lsd_common_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

int8_t lsd_common_init( TIM_HandleTypeDef *htim, RTC_HandleTypeDef *hrtc ){
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
	if ( htim != NULL && hrtc != NULL ){
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00a      	beq.n	8001b06 <lsd_common_init+0x26>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <lsd_common_init+0x26>
		p_lsd_htim = htim;
 8001af6:	4a07      	ldr	r2, [pc, #28]	@ (8001b14 <lsd_common_init+0x34>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6013      	str	r3, [r2, #0]
		p_lsd_hrtc = hrtc;
 8001afc:	4a06      	ldr	r2, [pc, #24]	@ (8001b18 <lsd_common_init+0x38>)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6013      	str	r3, [r2, #0]
//		lsd_common_data.channel = TIM_CHANNEL_3;
//		return HAL_TIM_Base_Start_IT( htim );
		return LSD_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e001      	b.n	8001b0a <lsd_common_init+0x2a>
	}
	return LSD_ERR_NULL_HANDLE;
 8001b06:	f06f 0301 	mvn.w	r3, #1
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	200003d8 	.word	0x200003d8
 8001b18:	200003dc 	.word	0x200003dc

08001b1c <lsd_delay_us>:

void lsd_delay_us( uint32_t time_us ){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER( p_lsd_htim, 0 );
 8001b24:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <lsd_delay_us+0x4c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	625a      	str	r2, [r3, #36]	@ 0x24
	int ret = HAL_TIM_Base_Start( p_lsd_htim );
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <lsd_delay_us+0x4c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f006 fe50 	bl	80087d8 <HAL_TIM_Base_Start>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60fb      	str	r3, [r7, #12]
	if( ret != HAL_OK ){
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10d      	bne.n	8001b5e <lsd_delay_us+0x42>
		return;
	}
	while( __HAL_TIM_GET_COUNTER( p_lsd_htim ) < time_us );
 8001b42:	bf00      	nop
 8001b44:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <lsd_delay_us+0x4c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d8f8      	bhi.n	8001b44 <lsd_delay_us+0x28>
	HAL_TIM_Base_Stop( p_lsd_htim );
 8001b52:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <lsd_delay_us+0x4c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f006 fe88 	bl	800886c <HAL_TIM_Base_Stop>
	return;
 8001b5c:	e000      	b.n	8001b60 <lsd_delay_us+0x44>
		return;
 8001b5e:	bf00      	nop
}
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200003d8 	.word	0x200003d8

08001b6c <lsd_delay_ms>:

void lsd_delay_ms( uint32_t time_ms ){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	for( int i=0; i<time_ms; i++ ){
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	e006      	b.n	8001b88 <lsd_delay_ms+0x1c>
		lsd_delay_us( 1000 );
 8001b7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b7e:	f7ff ffcd 	bl	8001b1c <lsd_delay_us>
	for( int i=0; i<time_ms; i++ ){
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3301      	adds	r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f4      	bhi.n	8001b7a <lsd_delay_ms+0xe>
	}
	return;
 8001b90:	bf00      	nop
}
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <lsd_get_rtc_timestamp>:
	}

    return;
}

void lsd_get_rtc_timestamp( LSD_TIMESTAMP_T *timestamp ){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetTime( p_lsd_hrtc, &sTime, RTC_FORMAT_BIN );
 8001ba0:	4b21      	ldr	r3, [pc, #132]	@ (8001c28 <lsd_get_rtc_timestamp+0x90>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f107 010c 	add.w	r1, r7, #12
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f006 f80e 	bl	8007bcc <HAL_RTC_GetTime>
	HAL_RTC_GetDate( p_lsd_hrtc, &sDate, RTC_FORMAT_BIN );
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c28 <lsd_get_rtc_timestamp+0x90>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f107 0108 	add.w	r1, r7, #8
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f006 f994 	bl	8007ee8 <HAL_RTC_GetDate>

	timestamp->year		= sDate.Year;
 8001bc0:	7afa      	ldrb	r2, [r7, #11]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	701a      	strb	r2, [r3, #0]
	timestamp->month	= sDate.Month;
 8001bc6:	7a7b      	ldrb	r3, [r7, #9]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	b2d9      	uxtb	r1, r3
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	7853      	ldrb	r3, [r2, #1]
 8001bd2:	f361 0303 	bfi	r3, r1, #0, #4
 8001bd6:	7053      	strb	r3, [r2, #1]
	timestamp->day		= sDate.Date;
 8001bd8:	7abb      	ldrb	r3, [r7, #10]
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	b2d9      	uxtb	r1, r3
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	7893      	ldrb	r3, [r2, #2]
 8001be4:	f361 0304 	bfi	r3, r1, #0, #5
 8001be8:	7093      	strb	r3, [r2, #2]
	timestamp->hour		= sTime.Hours;
 8001bea:	7b3b      	ldrb	r3, [r7, #12]
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	b2d9      	uxtb	r1, r3
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	78d3      	ldrb	r3, [r2, #3]
 8001bf6:	f361 0304 	bfi	r3, r1, #0, #5
 8001bfa:	70d3      	strb	r3, [r2, #3]
	timestamp->minute	= sTime.Minutes;
 8001bfc:	7b7b      	ldrb	r3, [r7, #13]
 8001bfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c02:	b2d9      	uxtb	r1, r3
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	7913      	ldrb	r3, [r2, #4]
 8001c08:	f361 0305 	bfi	r3, r1, #0, #6
 8001c0c:	7113      	strb	r3, [r2, #4]
	timestamp->second	= sTime.Seconds;
 8001c0e:	7bbb      	ldrb	r3, [r7, #14]
 8001c10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c14:	b2d9      	uxtb	r1, r3
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	7953      	ldrb	r3, [r2, #5]
 8001c1a:	f361 0305 	bfi	r3, r1, #0, #6
 8001c1e:	7153      	strb	r3, [r2, #5]

	return;
 8001c20:	bf00      	nop
}
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200003dc 	.word	0x200003dc

08001c2c <lsd_analyze_data>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

void lsd_analyze_data( LSD_LOG_DATA_T *p_log_data ){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	p_recent_log_data = p_log_data;
 8001c34:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <lsd_analyze_data+0x20>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
	update_thresold_values();
 8001c3a:	f000 f809 	bl	8001c50 <update_thresold_values>
//	lsd_log_read_batch( -LSD_RECENT_LOG_SIZE, p_recent_log_data );
	categoryze_recent_data();
 8001c3e:	f000 f859 	bl	8001cf4 <categoryze_recent_data>
	return;
 8001c42:	bf00      	nop
}
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000420 	.word	0x20000420

08001c50 <update_thresold_values>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static void update_thresold_values( void ){
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
	lsd_thres[LSD_THRES_CLIM_TEMP].very_low		= LSD_THRES_CLIM_TEMP_VL;
 8001c54:	4b19      	ldr	r3, [pc, #100]	@ (8001cbc <update_thresold_values+0x6c>)
 8001c56:	4a1a      	ldr	r2, [pc, #104]	@ (8001cc0 <update_thresold_values+0x70>)
 8001c58:	601a      	str	r2, [r3, #0]
	lsd_thres[LSD_THRES_CLIM_TEMP].low			= LSD_THRES_CLIM_TEMP_L;
 8001c5a:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <update_thresold_values+0x6c>)
 8001c5c:	4a19      	ldr	r2, [pc, #100]	@ (8001cc4 <update_thresold_values+0x74>)
 8001c5e:	605a      	str	r2, [r3, #4]
	lsd_thres[LSD_THRES_CLIM_TEMP].high			= LSD_THRES_CLIM_TEMP_H;
 8001c60:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <update_thresold_values+0x6c>)
 8001c62:	4a19      	ldr	r2, [pc, #100]	@ (8001cc8 <update_thresold_values+0x78>)
 8001c64:	609a      	str	r2, [r3, #8]
	lsd_thres[LSD_THRES_CLIM_TEMP].very_high	= LSD_THRES_CLIM_TEMP_VH;
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <update_thresold_values+0x6c>)
 8001c68:	4a18      	ldr	r2, [pc, #96]	@ (8001ccc <update_thresold_values+0x7c>)
 8001c6a:	60da      	str	r2, [r3, #12]

	lsd_thres[LSD_THRES_CLIM_HUMI].very_low		= LSD_THRES_CLIM_HUMI_VL;
 8001c6c:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <update_thresold_values+0x6c>)
 8001c6e:	4a18      	ldr	r2, [pc, #96]	@ (8001cd0 <update_thresold_values+0x80>)
 8001c70:	611a      	str	r2, [r3, #16]
	lsd_thres[LSD_THRES_CLIM_HUMI].low			= LSD_THRES_CLIM_HUMI_L;
 8001c72:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <update_thresold_values+0x6c>)
 8001c74:	4a14      	ldr	r2, [pc, #80]	@ (8001cc8 <update_thresold_values+0x78>)
 8001c76:	615a      	str	r2, [r3, #20]
	lsd_thres[LSD_THRES_CLIM_HUMI].high			= LSD_THRES_CLIM_HUMI_H;
 8001c78:	4b10      	ldr	r3, [pc, #64]	@ (8001cbc <update_thresold_values+0x6c>)
 8001c7a:	4a16      	ldr	r2, [pc, #88]	@ (8001cd4 <update_thresold_values+0x84>)
 8001c7c:	619a      	str	r2, [r3, #24]
	lsd_thres[LSD_THRES_CLIM_HUMI].very_high	= LSD_THRES_CLIM_HUMI_VH;
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <update_thresold_values+0x6c>)
 8001c80:	4a15      	ldr	r2, [pc, #84]	@ (8001cd8 <update_thresold_values+0x88>)
 8001c82:	61da      	str	r2, [r3, #28]

	lsd_thres[LSD_THRES_DIST_DIST].very_low		= LSD_THRES_DIST_DIST_VL;
 8001c84:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <update_thresold_values+0x6c>)
 8001c86:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc0 <update_thresold_values+0x70>)
 8001c88:	621a      	str	r2, [r3, #32]
	lsd_thres[LSD_THRES_DIST_DIST].low			= LSD_THRES_DIST_DIST_L;
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <update_thresold_values+0x6c>)
 8001c8c:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc8 <update_thresold_values+0x78>)
 8001c8e:	625a      	str	r2, [r3, #36]	@ 0x24
	lsd_thres[LSD_THRES_DIST_DIST].high			= LSD_THRES_DIST_DIST_H;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <update_thresold_values+0x6c>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	@ (8001cdc <update_thresold_values+0x8c>)
 8001c94:	629a      	str	r2, [r3, #40]	@ 0x28
	lsd_thres[LSD_THRES_DIST_DIST].very_high	= LSD_THRES_DIST_DIST_VH;
 8001c96:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <update_thresold_values+0x6c>)
 8001c98:	4a11      	ldr	r2, [pc, #68]	@ (8001ce0 <update_thresold_values+0x90>)
 8001c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

	lsd_thres[LSD_THRES_DIST_SPEED].very_low	= LSD_THRES_DIST_SPEED_VL;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	@ (8001cbc <update_thresold_values+0x6c>)
 8001c9e:	4a11      	ldr	r2, [pc, #68]	@ (8001ce4 <update_thresold_values+0x94>)
 8001ca0:	631a      	str	r2, [r3, #48]	@ 0x30
	lsd_thres[LSD_THRES_DIST_SPEED].low			= LSD_THRES_DIST_SPEED_L;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <update_thresold_values+0x6c>)
 8001ca4:	4a10      	ldr	r2, [pc, #64]	@ (8001ce8 <update_thresold_values+0x98>)
 8001ca6:	635a      	str	r2, [r3, #52]	@ 0x34
	lsd_thres[LSD_THRES_DIST_SPEED].high		= LSD_THRES_DIST_SPEED_H;
 8001ca8:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <update_thresold_values+0x6c>)
 8001caa:	4a10      	ldr	r2, [pc, #64]	@ (8001cec <update_thresold_values+0x9c>)
 8001cac:	639a      	str	r2, [r3, #56]	@ 0x38
	lsd_thres[LSD_THRES_DIST_SPEED].very_high	= LSD_THRES_DIST_SPEED_VH;
 8001cae:	4b03      	ldr	r3, [pc, #12]	@ (8001cbc <update_thresold_values+0x6c>)
 8001cb0:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf0 <update_thresold_values+0xa0>)
 8001cb2:	63da      	str	r2, [r3, #60]	@ 0x3c
	return;
 8001cb4:	bf00      	nop
}
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	200003e0 	.word	0x200003e0
 8001cc0:	41200000 	.word	0x41200000
 8001cc4:	41700000 	.word	0x41700000
 8001cc8:	41f00000 	.word	0x41f00000
 8001ccc:	420c0000 	.word	0x420c0000
 8001cd0:	41a00000 	.word	0x41a00000
 8001cd4:	42a00000 	.word	0x42a00000
 8001cd8:	42b40000 	.word	0x42b40000
 8001cdc:	43480000 	.word	0x43480000
 8001ce0:	43520000 	.word	0x43520000
 8001ce4:	43a78000 	.word	0x43a78000
 8001ce8:	43a90000 	.word	0x43a90000
 8001cec:	43af0000 	.word	0x43af0000
 8001cf0:	43b10000 	.word	0x43b10000

08001cf4 <categoryze_recent_data>:

static void categoryze_recent_data( void ){
 8001cf4:	b598      	push	{r3, r4, r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	p_recent_log_data->clim.temperature_category = \
		compare_threshold( p_recent_log_data->clim.temperature, &lsd_thres[LSD_THRES_CLIM_TEMP] );
 8001cf8:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <categoryze_recent_data+0x60>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
	p_recent_log_data->clim.temperature_category = \
 8001cfe:	4a15      	ldr	r2, [pc, #84]	@ (8001d54 <categoryze_recent_data+0x60>)
 8001d00:	6814      	ldr	r4, [r2, #0]
		compare_threshold( p_recent_log_data->clim.temperature, &lsd_thres[LSD_THRES_CLIM_TEMP] );
 8001d02:	4915      	ldr	r1, [pc, #84]	@ (8001d58 <categoryze_recent_data+0x64>)
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f82f 	bl	8001d68 <compare_threshold>
 8001d0a:	4603      	mov	r3, r0
	p_recent_log_data->clim.temperature_category = \
 8001d0c:	7223      	strb	r3, [r4, #8]

	p_recent_log_data->clim.humidity_category = \
		compare_threshold( p_recent_log_data->clim.humidity, &lsd_thres[LSD_THRES_CLIM_HUMI] );
 8001d0e:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <categoryze_recent_data+0x60>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
	p_recent_log_data->clim.humidity_category = \
 8001d14:	4a0f      	ldr	r2, [pc, #60]	@ (8001d54 <categoryze_recent_data+0x60>)
 8001d16:	6814      	ldr	r4, [r2, #0]
		compare_threshold( p_recent_log_data->clim.humidity, &lsd_thres[LSD_THRES_CLIM_HUMI] );
 8001d18:	4910      	ldr	r1, [pc, #64]	@ (8001d5c <categoryze_recent_data+0x68>)
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f824 	bl	8001d68 <compare_threshold>
 8001d20:	4603      	mov	r3, r0
	p_recent_log_data->clim.humidity_category = \
 8001d22:	7263      	strb	r3, [r4, #9]

	p_recent_log_data->dist.distance_category = \
		compare_threshold( p_recent_log_data->dist.distance, &lsd_thres[LSD_THRES_DIST_DIST] );
 8001d24:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <categoryze_recent_data+0x60>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
	p_recent_log_data->dist.distance_category = \
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <categoryze_recent_data+0x60>)
 8001d2c:	6814      	ldr	r4, [r2, #0]
		compare_threshold( p_recent_log_data->dist.distance, &lsd_thres[LSD_THRES_DIST_DIST] );
 8001d2e:	490c      	ldr	r1, [pc, #48]	@ (8001d60 <categoryze_recent_data+0x6c>)
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 f819 	bl	8001d68 <compare_threshold>
 8001d36:	4603      	mov	r3, r0
	p_recent_log_data->dist.distance_category = \
 8001d38:	7523      	strb	r3, [r4, #20]

	p_recent_log_data->dist.speed_of_sound_category = \
		compare_threshold( p_recent_log_data->dist.speed_of_sound, &lsd_thres[LSD_THRES_DIST_SPEED] );
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <categoryze_recent_data+0x60>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	691b      	ldr	r3, [r3, #16]
	p_recent_log_data->dist.speed_of_sound_category = \
 8001d40:	4a04      	ldr	r2, [pc, #16]	@ (8001d54 <categoryze_recent_data+0x60>)
 8001d42:	6814      	ldr	r4, [r2, #0]
		compare_threshold( p_recent_log_data->dist.speed_of_sound, &lsd_thres[LSD_THRES_DIST_SPEED] );
 8001d44:	4907      	ldr	r1, [pc, #28]	@ (8001d64 <categoryze_recent_data+0x70>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f80e 	bl	8001d68 <compare_threshold>
 8001d4c:	4603      	mov	r3, r0
	p_recent_log_data->dist.speed_of_sound_category = \
 8001d4e:	7563      	strb	r3, [r4, #21]

	return;
 8001d50:	bf00      	nop
}
 8001d52:	bd98      	pop	{r3, r4, r7, pc}
 8001d54:	20000420 	.word	0x20000420
 8001d58:	200003e0 	.word	0x200003e0
 8001d5c:	200003f0 	.word	0x200003f0
 8001d60:	20000400 	.word	0x20000400
 8001d64:	20000410 	.word	0x20000410

08001d68 <compare_threshold>:

static uint8_t compare_threshold( float value, LSD_TRHES_T *thres ){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
	if( value <= thres->very_low ){
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4619      	mov	r1, r3
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff f98b 	bl	8001094 <__aeabi_fcmple>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <compare_threshold+0x20>
		return LSD_THRES_BELOW_VERY_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e021      	b.n	8001dcc <compare_threshold+0x64>
	}
	else if( value <= thres->low ){
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff f980 	bl	8001094 <__aeabi_fcmple>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <compare_threshold+0x36>
		return LSD_THRES_BELOW_LOW;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e016      	b.n	8001dcc <compare_threshold+0x64>
	}
	else if( value >= thres->very_high ){
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	4619      	mov	r1, r3
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff f97f 	bl	80010a8 <__aeabi_fcmpge>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <compare_threshold+0x4c>
		return LSD_THRES_ABOVE_VERY_HIGH;
 8001db0:	2304      	movs	r3, #4
 8001db2:	e00b      	b.n	8001dcc <compare_threshold+0x64>
	}
	else if( value >= thres->high ){
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff f974 	bl	80010a8 <__aeabi_fcmpge>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <compare_threshold+0x62>
		return LSD_THRES_ABOVE_HIGH;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e000      	b.n	8001dcc <compare_threshold+0x64>
	}
	else{
		return LSD_THRES_CENTER;
 8001dca:	2302      	movs	r3, #2
	}
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <lsd_exit_stop_mode>:
#include "MyDriversInc/lsd_errno.h"
#include "MyServicesInc/device_sleep.h"

extern volatile uint32_t lsd_cycle_count;

uint8_t lsd_exit_stop_mode( lsd_sys_clk_cfg_t clk_cfg ){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	if( clk_cfg != NULL ){
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d011      	beq.n	8001e06 <lsd_exit_stop_mode+0x32>
		clk_cfg();
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4798      	blx	r3

		__HAL_RCC_USB_CLK_ENABLE();
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <lsd_exit_stop_mode+0x3c>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	4a09      	ldr	r2, [pc, #36]	@ (8001e10 <lsd_exit_stop_mode+0x3c>)
 8001dec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001df0:	61d3      	str	r3, [r2, #28]
 8001df2:	4b07      	ldr	r3, [pc, #28]	@ (8001e10 <lsd_exit_stop_mode+0x3c>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
		MX_USB_DEVICE_Init();
 8001dfe:	f00b fd1d 	bl	800d83c <MX_USB_DEVICE_Init>

		return LSD_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <lsd_exit_stop_mode+0x34>
	}

	return LSD_ERR_NULL_HANDLE;
 8001e06:	23fe      	movs	r3, #254	@ 0xfe
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000

08001e14 <lsd_enter_stop_mode>:

void lsd_enter_stop_mode( void ){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
	MX_USB_DEVICE_Deinit();
 8001e1a:	f00b fd01 	bl	800d820 <MX_USB_DEVICE_Deinit>
	__HAL_RCC_USB_CLK_DISABLE();
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <lsd_enter_stop_mode+0x40>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	4a0c      	ldr	r2, [pc, #48]	@ (8001e54 <lsd_enter_stop_mode+0x40>)
 8001e24:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e28:	61d3      	str	r3, [r2, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <lsd_enter_stop_mode+0x40>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4a09      	ldr	r2, [pc, #36]	@ (8001e54 <lsd_enter_stop_mode+0x40>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e34:	61d3      	str	r3, [r2, #28]
 8001e36:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <lsd_enter_stop_mode+0x40>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]

    HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
 8001e42:	2101      	movs	r1, #1
 8001e44:	2001      	movs	r0, #1
 8001e46:	f004 ffd5 	bl	8006df4 <HAL_PWR_EnterSTOPMode>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000

08001e58 <lsd_measure_distance>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

void lsd_measure_distance( LSD_LOG_DATA_T *p_log ){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	p_log_data = p_log;
 8001e60:	4a06      	ldr	r2, [pc, #24]	@ (8001e7c <lsd_measure_distance+0x24>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6013      	str	r3, [r2, #0]

	read_climate_variables();
 8001e66:	f000 f80b 	bl	8001e80 <read_climate_variables>
	calculate_speed_of_sound();
 8001e6a:	f000 f81d 	bl	8001ea8 <calculate_speed_of_sound>
	calculate_distance();
 8001e6e:	f000 f821 	bl	8001eb4 <calculate_distance>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000424 	.word	0x20000424

08001e80 <read_climate_variables>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static void read_climate_variables( void ){
 8001e80:	b598      	push	{r3, r4, r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	if( aht20_update() != LSD_OK){
 8001e84:	f7ff f962 	bl	800114c <aht20_update>
		// todo
	}

//	clim_data->pos_buf = ( clim_data->pos_buf+ 1 ) % LSD_CLIMATE_BUF_SIZE;
	p_log_data->clim.temperature = aht20_get_temperature_C();
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <read_climate_variables+0x24>)
 8001e8a:	681c      	ldr	r4, [r3, #0]
 8001e8c:	f7ff f9e6 	bl	800125c <aht20_get_temperature_C>
 8001e90:	4603      	mov	r3, r0
 8001e92:	6023      	str	r3, [r4, #0]
	p_log_data->clim.humidity = aht20_get_humidity_RH();
 8001e94:	4b03      	ldr	r3, [pc, #12]	@ (8001ea4 <read_climate_variables+0x24>)
 8001e96:	681c      	ldr	r4, [r3, #0]
 8001e98:	f7ff fa1c 	bl	80012d4 <aht20_get_humidity_RH>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	6063      	str	r3, [r4, #4]

	return;
 8001ea0:	bf00      	nop
}
 8001ea2:	bd98      	pop	{r3, r4, r7, pc}
 8001ea4:	20000424 	.word	0x20000424

08001ea8 <calculate_speed_of_sound>:

static void calculate_speed_of_sound( void ){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
#ifdef PERIPH_USED_AHT20
	calculate_speed_of_sound_Cramer_1993();
 8001eac:	f000 f838 	bl	8001f20 <calculate_speed_of_sound_Cramer_1993>
#else
	interpolateSpeedOfSound( );
#endif /* PERIPH_USED_AHT20 */
	return;
 8001eb0:	bf00      	nop
}
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <calculate_distance>:

static void calculate_distance( void ){
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
	int8_t ret __attribute__( ( unused ) );

//	ret = ajsr04m_read_tof_blocking( LSD_STD_TIMEOUT_US );
	ret = ajsr04m_read_tof_exti();
 8001eba:	f7ff fae5 	bl	8001488 <ajsr04m_read_tof_exti>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71bb      	strb	r3, [r7, #6]

	uint8_t try_count = 10;
 8001ec2:	230a      	movs	r3, #10
 8001ec4:	71fb      	strb	r3, [r7, #7]
	float tof = 0.0;
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	603b      	str	r3, [r7, #0]

	do{
		HAL_Delay( 25 );
 8001ecc:	2019      	movs	r0, #25
 8001ece:	f001 fe71 	bl	8003bb4 <HAL_Delay>
		tof = ajsr04m_get_tof_ms();
 8001ed2:	f7ff fae1 	bl	8001498 <ajsr04m_get_tof_ms>
 8001ed6:	6038      	str	r0, [r7, #0]
		try_count--;
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	71fb      	strb	r3, [r7, #7]
	}while( tof == LSD_ERR_DEVICE_BUSY && try_count >= 0 );
 8001ede:	490e      	ldr	r1, [pc, #56]	@ (8001f18 <calculate_distance+0x64>)
 8001ee0:	6838      	ldr	r0, [r7, #0]
 8001ee2:	f7ff f8c3 	bl	800106c <__aeabi_fcmpeq>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1ef      	bne.n	8001ecc <calculate_distance+0x18>

	p_log_data->dist.distance = (float) p_log_data->dist.speed_of_sound * tof / 2.0;
 8001eec:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <calculate_distance+0x68>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	6839      	ldr	r1, [r7, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe ff25 	bl	8000d44 <__aeabi_fmul>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <calculate_distance+0x68>)
 8001f00:	681c      	ldr	r4, [r3, #0]
 8001f02:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f06:	4610      	mov	r0, r2
 8001f08:	f7fe ffd0 	bl	8000eac <__aeabi_fdiv>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60e3      	str	r3, [r4, #12]

	return;
 8001f10:	bf00      	nop
}
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd90      	pop	{r4, r7, pc}
 8001f18:	c0800000 	.word	0xc0800000
 8001f1c:	20000424 	.word	0x20000424

08001f20 <calculate_speed_of_sound_Cramer_1993>:

static void calculate_speed_of_sound_Cramer_1993( void ){
 8001f20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f24:	b090      	sub	sp, #64	@ 0x40
 8001f26:	af00      	add	r7, sp, #0
	/*
	 * Calculation based on CRAMER, Owen (1993): "The variation of the specific heat ratio and the
	 * speed of sound in air with temperature, pressure, humidity, and CO2 concentration".
	 */
	float mTemp = p_log_data->clim.temperature;
 8001f28:	4bd3      	ldr	r3, [pc, #844]	@ (8002278 <calculate_speed_of_sound_Cramer_1993+0x358>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float mHumi = p_log_data->clim.humidity;
 8001f30:	4bd1      	ldr	r3, [pc, #836]	@ (8002278 <calculate_speed_of_sound_Cramer_1993+0x358>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	63bb      	str	r3, [r7, #56]	@ 0x38
	float mPres = MEAN_LOCAL_PRESSURE;
 8001f38:	4bd0      	ldr	r3, [pc, #832]	@ (800227c <calculate_speed_of_sound_Cramer_1993+0x35c>)
 8001f3a:	637b      	str	r3, [r7, #52]	@ 0x34

	float mTemp_K = mTemp + 273.15;  // Convert to Kelvin
 8001f3c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f3e:	f7fe fa73 	bl	8000428 <__aeabi_f2d>
 8001f42:	a3a9      	add	r3, pc, #676	@ (adr r3, 80021e8 <calculate_speed_of_sound_Cramer_1993+0x2c8>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	f7fe f910 	bl	800016c <__adddf3>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f7fe fd98 	bl	8000a88 <__aeabi_d2f>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	633b      	str	r3, [r7, #48]	@ 0x30
	float mTemp_2 = mTemp * mTemp;
 8001f5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f5e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f60:	f7fe fef0 	bl	8000d44 <__aeabi_fmul>
 8001f64:	4603      	mov	r3, r0
 8001f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	mPres *= 1000.0;                     // Convert to Pa
 8001f68:	49c5      	ldr	r1, [pc, #788]	@ (8002280 <calculate_speed_of_sound_Cramer_1993+0x360>)
 8001f6a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f6c:	f7fe feea 	bl	8000d44 <__aeabi_fmul>
 8001f70:	4603      	mov	r3, r0
 8001f72:	637b      	str	r3, [r7, #52]	@ 0x34

	float ENH = ( 3.14 * mPres * pow(10,-8) ) + 1.00062 + ( mTemp_2 * 5.600 * pow(10,-7) );
 8001f74:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f76:	f7fe fa57 	bl	8000428 <__aeabi_f2d>
 8001f7a:	a39d      	add	r3, pc, #628	@ (adr r3, 80021f0 <calculate_speed_of_sound_Cramer_1993+0x2d0>)
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	f7fe faaa 	bl	80004d8 <__aeabi_dmul>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	a39a      	add	r3, pc, #616	@ (adr r3, 80021f8 <calculate_speed_of_sound_Cramer_1993+0x2d8>)
 8001f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f92:	f7fe faa1 	bl	80004d8 <__aeabi_dmul>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	a398      	add	r3, pc, #608	@ (adr r3, 8002200 <calculate_speed_of_sound_Cramer_1993+0x2e0>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f7fe f8e2 	bl	800016c <__adddf3>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4614      	mov	r4, r2
 8001fae:	461d      	mov	r5, r3
 8001fb0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001fb2:	f7fe fa39 	bl	8000428 <__aeabi_f2d>
 8001fb6:	a394      	add	r3, pc, #592	@ (adr r3, 8002208 <calculate_speed_of_sound_Cramer_1993+0x2e8>)
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe fa8c 	bl	80004d8 <__aeabi_dmul>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	a391      	add	r3, pc, #580	@ (adr r3, 8002210 <calculate_speed_of_sound_Cramer_1993+0x2f0>)
 8001fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fce:	f7fe fa83 	bl	80004d8 <__aeabi_dmul>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	4629      	mov	r1, r5
 8001fda:	f7fe f8c7 	bl	800016c <__adddf3>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f7fe fd4f 	bl	8000a88 <__aeabi_d2f>
 8001fea:	4603      	mov	r3, r0
 8001fec:	62bb      	str	r3, [r7, #40]	@ 0x28

	float e = 2.71828182845904523536;
 8001fee:	4ba5      	ldr	r3, [pc, #660]	@ (8002284 <calculate_speed_of_sound_Cramer_1993+0x364>)
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
	float PSV1 = ( mTemp_K * mTemp_K * 1.2378847 * pow(10,-5) ) - ( 1.9121316 * mTemp_K / 100.0 );
 8001ff2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ff4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ff6:	f7fe fea5 	bl	8000d44 <__aeabi_fmul>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fa13 	bl	8000428 <__aeabi_f2d>
 8002002:	a385      	add	r3, pc, #532	@ (adr r3, 8002218 <calculate_speed_of_sound_Cramer_1993+0x2f8>)
 8002004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002008:	f7fe fa66 	bl	80004d8 <__aeabi_dmul>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	a382      	add	r3, pc, #520	@ (adr r3, 8002220 <calculate_speed_of_sound_Cramer_1993+0x300>)
 8002016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201a:	f7fe fa5d 	bl	80004d8 <__aeabi_dmul>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4614      	mov	r4, r2
 8002024:	461d      	mov	r5, r3
 8002026:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002028:	f7fe f9fe 	bl	8000428 <__aeabi_f2d>
 800202c:	a37e      	add	r3, pc, #504	@ (adr r3, 8002228 <calculate_speed_of_sound_Cramer_1993+0x308>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	f7fe fa51 	bl	80004d8 <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	4b91      	ldr	r3, [pc, #580]	@ (8002288 <calculate_speed_of_sound_Cramer_1993+0x368>)
 8002044:	f7fe fb72 	bl	800072c <__aeabi_ddiv>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4620      	mov	r0, r4
 800204e:	4629      	mov	r1, r5
 8002050:	f7fe f88a 	bl	8000168 <__aeabi_dsub>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	f7fe fd14 	bl	8000a88 <__aeabi_d2f>
 8002060:	4603      	mov	r3, r0
 8002062:	623b      	str	r3, [r7, #32]
	float PSV2 = 33.93711047 - ( 6343.1645 / mTemp_K );
 8002064:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002066:	f7fe f9df 	bl	8000428 <__aeabi_f2d>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	a170      	add	r1, pc, #448	@ (adr r1, 8002230 <calculate_speed_of_sound_Cramer_1993+0x310>)
 8002070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002074:	f7fe fb5a 	bl	800072c <__aeabi_ddiv>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	a16e      	add	r1, pc, #440	@ (adr r1, 8002238 <calculate_speed_of_sound_Cramer_1993+0x318>)
 800207e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002082:	f7fe f871 	bl	8000168 <__aeabi_dsub>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4610      	mov	r0, r2
 800208c:	4619      	mov	r1, r3
 800208e:	f7fe fcfb 	bl	8000a88 <__aeabi_d2f>
 8002092:	4603      	mov	r3, r0
 8002094:	61fb      	str	r3, [r7, #28]
	float PSV = pow(e,PSV1) * pow(e,PSV2);
 8002096:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002098:	f7fe f9c6 	bl	8000428 <__aeabi_f2d>
 800209c:	4604      	mov	r4, r0
 800209e:	460d      	mov	r5, r1
 80020a0:	6a38      	ldr	r0, [r7, #32]
 80020a2:	f7fe f9c1 	bl	8000428 <__aeabi_f2d>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4620      	mov	r0, r4
 80020ac:	4629      	mov	r1, r5
 80020ae:	f00e ff23 	bl	8010ef8 <pow>
 80020b2:	4604      	mov	r4, r0
 80020b4:	460d      	mov	r5, r1
 80020b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020b8:	f7fe f9b6 	bl	8000428 <__aeabi_f2d>
 80020bc:	4680      	mov	r8, r0
 80020be:	4689      	mov	r9, r1
 80020c0:	69f8      	ldr	r0, [r7, #28]
 80020c2:	f7fe f9b1 	bl	8000428 <__aeabi_f2d>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4640      	mov	r0, r8
 80020cc:	4649      	mov	r1, r9
 80020ce:	f00e ff13 	bl	8010ef8 <pow>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4620      	mov	r0, r4
 80020d8:	4629      	mov	r1, r5
 80020da:	f7fe f9fd 	bl	80004d8 <__aeabi_dmul>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f7fe fccf 	bl	8000a88 <__aeabi_d2f>
 80020ea:	4603      	mov	r3, r0
 80020ec:	61bb      	str	r3, [r7, #24]

	float Xw = ( mHumi * ENH * PSV / mPres ) / 100.0; 	// Mole fraction of water vapor
 80020ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80020f2:	f7fe fe27 	bl	8000d44 <__aeabi_fmul>
 80020f6:	4603      	mov	r3, r0
 80020f8:	69b9      	ldr	r1, [r7, #24]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fe22 	bl	8000d44 <__aeabi_fmul>
 8002100:	4603      	mov	r3, r0
 8002102:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fed1 	bl	8000eac <__aeabi_fdiv>
 800210a:	4603      	mov	r3, r0
 800210c:	495f      	ldr	r1, [pc, #380]	@ (800228c <calculate_speed_of_sound_Cramer_1993+0x36c>)
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fecc 	bl	8000eac <__aeabi_fdiv>
 8002114:	4603      	mov	r3, r0
 8002116:	617b      	str	r3, [r7, #20]
	float Xc = 0.000400;                           			// Mole fraction of carbon dioxide
 8002118:	4b5d      	ldr	r3, [pc, #372]	@ (8002290 <calculate_speed_of_sound_Cramer_1993+0x370>)
 800211a:	613b      	str	r3, [r7, #16]

	float C1 = ( 0.603055 * mTemp ) + 331.5024 - ( mTemp_2 * 5.28 * pow(10,-4) ) + ( 0.1495874 * mTemp + 51.471935 - ( mTemp_2 * 7.82 * pow(10,-4) ) ) * Xw;
 800211c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800211e:	f7fe f983 	bl	8000428 <__aeabi_f2d>
 8002122:	a347      	add	r3, pc, #284	@ (adr r3, 8002240 <calculate_speed_of_sound_Cramer_1993+0x320>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe f9d6 	bl	80004d8 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	a344      	add	r3, pc, #272	@ (adr r3, 8002248 <calculate_speed_of_sound_Cramer_1993+0x328>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe f817 	bl	800016c <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4614      	mov	r4, r2
 8002144:	461d      	mov	r5, r3
 8002146:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002148:	f7fe f96e 	bl	8000428 <__aeabi_f2d>
 800214c:	a340      	add	r3, pc, #256	@ (adr r3, 8002250 <calculate_speed_of_sound_Cramer_1993+0x330>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	f7fe f9c1 	bl	80004d8 <__aeabi_dmul>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	a33e      	add	r3, pc, #248	@ (adr r3, 8002258 <calculate_speed_of_sound_Cramer_1993+0x338>)
 8002160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002164:	f7fe f9b8 	bl	80004d8 <__aeabi_dmul>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4620      	mov	r0, r4
 800216e:	4629      	mov	r1, r5
 8002170:	f7fd fffa 	bl	8000168 <__aeabi_dsub>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4614      	mov	r4, r2
 800217a:	461d      	mov	r5, r3
 800217c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800217e:	f7fe f953 	bl	8000428 <__aeabi_f2d>
 8002182:	a337      	add	r3, pc, #220	@ (adr r3, 8002260 <calculate_speed_of_sound_Cramer_1993+0x340>)
 8002184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002188:	f7fe f9a6 	bl	80004d8 <__aeabi_dmul>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	a334      	add	r3, pc, #208	@ (adr r3, 8002268 <calculate_speed_of_sound_Cramer_1993+0x348>)
 8002196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219a:	f7fd ffe7 	bl	800016c <__adddf3>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4690      	mov	r8, r2
 80021a4:	4699      	mov	r9, r3
 80021a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021a8:	f7fe f93e 	bl	8000428 <__aeabi_f2d>
 80021ac:	a330      	add	r3, pc, #192	@ (adr r3, 8002270 <calculate_speed_of_sound_Cramer_1993+0x350>)
 80021ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b2:	f7fe f991 	bl	80004d8 <__aeabi_dmul>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	a326      	add	r3, pc, #152	@ (adr r3, 8002258 <calculate_speed_of_sound_Cramer_1993+0x338>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	f7fe f988 	bl	80004d8 <__aeabi_dmul>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4640      	mov	r0, r8
 80021ce:	4649      	mov	r1, r9
 80021d0:	f7fd ffca 	bl	8000168 <__aeabi_dsub>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4690      	mov	r8, r2
 80021da:	4699      	mov	r9, r3
 80021dc:	6978      	ldr	r0, [r7, #20]
 80021de:	f7fe f923 	bl	8000428 <__aeabi_f2d>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	e055      	b.n	8002294 <calculate_speed_of_sound_Cramer_1993+0x374>
 80021e8:	66666666 	.word	0x66666666
 80021ec:	40711266 	.word	0x40711266
 80021f0:	51eb851f 	.word	0x51eb851f
 80021f4:	40091eb8 	.word	0x40091eb8
 80021f8:	e2308c3a 	.word	0xe2308c3a
 80021fc:	3e45798e 	.word	0x3e45798e
 8002200:	1dfb938a 	.word	0x1dfb938a
 8002204:	3ff0028a 	.word	0x3ff0028a
 8002208:	66666666 	.word	0x66666666
 800220c:	40166666 	.word	0x40166666
 8002210:	9abcaf48 	.word	0x9abcaf48
 8002214:	3e7ad7f2 	.word	0x3e7ad7f2
 8002218:	2feb8016 	.word	0x2feb8016
 800221c:	3ff3ce60 	.word	0x3ff3ce60
 8002220:	88e368f1 	.word	0x88e368f1
 8002224:	3ee4f8b5 	.word	0x3ee4f8b5
 8002228:	4dfa5ed6 	.word	0x4dfa5ed6
 800222c:	3ffe9817 	.word	0x3ffe9817
 8002230:	1cac0831 	.word	0x1cac0831
 8002234:	40b8c72a 	.word	0x40b8c72a
 8002238:	3c62b1d1 	.word	0x3c62b1d1
 800223c:	4040f7f3 	.word	0x4040f7f3
 8002240:	ffd60e95 	.word	0xffd60e95
 8002244:	3fe34c39 	.word	0x3fe34c39
 8002248:	d495182b 	.word	0xd495182b
 800224c:	4074b809 	.word	0x4074b809
 8002250:	51eb851f 	.word	0x51eb851f
 8002254:	40151eb8 	.word	0x40151eb8
 8002258:	eb1c432d 	.word	0xeb1c432d
 800225c:	3f1a36e2 	.word	0x3f1a36e2
 8002260:	0f7263cb 	.word	0x0f7263cb
 8002264:	3fc325ae 	.word	0x3fc325ae
 8002268:	5db76b3c 	.word	0x5db76b3c
 800226c:	4049bc68 	.word	0x4049bc68
 8002270:	147ae148 	.word	0x147ae148
 8002274:	401f47ae 	.word	0x401f47ae
 8002278:	20000424 	.word	0x20000424
 800227c:	42cb8a3d 	.word	0x42cb8a3d
 8002280:	447a0000 	.word	0x447a0000
 8002284:	402df854 	.word	0x402df854
 8002288:	40590000 	.word	0x40590000
 800228c:	42c80000 	.word	0x42c80000
 8002290:	39d1b717 	.word	0x39d1b717
 8002294:	4640      	mov	r0, r8
 8002296:	4649      	mov	r1, r9
 8002298:	f7fe f91e 	bl	80004d8 <__aeabi_dmul>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4620      	mov	r0, r4
 80022a2:	4629      	mov	r1, r5
 80022a4:	f7fd ff62 	bl	800016c <__adddf3>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	f7fe fbea 	bl	8000a88 <__aeabi_d2f>
 80022b4:	4603      	mov	r3, r0
 80022b6:	60fb      	str	r3, [r7, #12]
	float C2 = ( (-1.82 * pow(10,-7) ) + ( 3.73 * mTemp * pow(10,-8) ) - ( mTemp_2 * 2.93 * pow(10,-10) ) ) * mPres + ( -85.20931 - 0.228525 * mTemp + ( mTemp_2 * 5.91 * pow(10,-5) ) ) * Xc;
 80022b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80022ba:	f7fe f8b5 	bl	8000428 <__aeabi_f2d>
 80022be:	a38a      	add	r3, pc, #552	@ (adr r3, 80024e8 <calculate_speed_of_sound_Cramer_1993+0x5c8>)
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	f7fe f908 	bl	80004d8 <__aeabi_dmul>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4610      	mov	r0, r2
 80022ce:	4619      	mov	r1, r3
 80022d0:	a387      	add	r3, pc, #540	@ (adr r3, 80024f0 <calculate_speed_of_sound_Cramer_1993+0x5d0>)
 80022d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d6:	f7fe f8ff 	bl	80004d8 <__aeabi_dmul>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	a385      	add	r3, pc, #532	@ (adr r3, 80024f8 <calculate_speed_of_sound_Cramer_1993+0x5d8>)
 80022e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e8:	f7fd ff3e 	bl	8000168 <__aeabi_dsub>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4614      	mov	r4, r2
 80022f2:	461d      	mov	r5, r3
 80022f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80022f6:	f7fe f897 	bl	8000428 <__aeabi_f2d>
 80022fa:	a381      	add	r3, pc, #516	@ (adr r3, 8002500 <calculate_speed_of_sound_Cramer_1993+0x5e0>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fe f8ea 	bl	80004d8 <__aeabi_dmul>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	a37e      	add	r3, pc, #504	@ (adr r3, 8002508 <calculate_speed_of_sound_Cramer_1993+0x5e8>)
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	f7fe f8e1 	bl	80004d8 <__aeabi_dmul>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4620      	mov	r0, r4
 800231c:	4629      	mov	r1, r5
 800231e:	f7fd ff23 	bl	8000168 <__aeabi_dsub>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4614      	mov	r4, r2
 8002328:	461d      	mov	r5, r3
 800232a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800232c:	f7fe f87c 	bl	8000428 <__aeabi_f2d>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4620      	mov	r0, r4
 8002336:	4629      	mov	r1, r5
 8002338:	f7fe f8ce 	bl	80004d8 <__aeabi_dmul>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4614      	mov	r4, r2
 8002342:	461d      	mov	r5, r3
 8002344:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002346:	f7fe f86f 	bl	8000428 <__aeabi_f2d>
 800234a:	a371      	add	r3, pc, #452	@ (adr r3, 8002510 <calculate_speed_of_sound_Cramer_1993+0x5f0>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fe f8c2 	bl	80004d8 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	a16f      	add	r1, pc, #444	@ (adr r1, 8002518 <calculate_speed_of_sound_Cramer_1993+0x5f8>)
 800235a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800235e:	f7fd ff03 	bl	8000168 <__aeabi_dsub>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4690      	mov	r8, r2
 8002368:	4699      	mov	r9, r3
 800236a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800236c:	f7fe f85c 	bl	8000428 <__aeabi_f2d>
 8002370:	a36b      	add	r3, pc, #428	@ (adr r3, 8002520 <calculate_speed_of_sound_Cramer_1993+0x600>)
 8002372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002376:	f7fe f8af 	bl	80004d8 <__aeabi_dmul>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	a369      	add	r3, pc, #420	@ (adr r3, 8002528 <calculate_speed_of_sound_Cramer_1993+0x608>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f8a6 	bl	80004d8 <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4640      	mov	r0, r8
 8002392:	4649      	mov	r1, r9
 8002394:	f7fd feea 	bl	800016c <__adddf3>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4690      	mov	r8, r2
 800239e:	4699      	mov	r9, r3
 80023a0:	6938      	ldr	r0, [r7, #16]
 80023a2:	f7fe f841 	bl	8000428 <__aeabi_f2d>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4640      	mov	r0, r8
 80023ac:	4649      	mov	r1, r9
 80023ae:	f7fe f893 	bl	80004d8 <__aeabi_dmul>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4620      	mov	r0, r4
 80023b8:	4629      	mov	r1, r5
 80023ba:	f7fd fed7 	bl	800016c <__adddf3>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	f7fe fb5f 	bl	8000a88 <__aeabi_d2f>
 80023ca:	4603      	mov	r3, r0
 80023cc:	60bb      	str	r3, [r7, #8]
	float C3 = Xw * Xw * 2.835149 - mPres * mPres * 2.15 * pow(10,-13) + Xc * Xc * 29.179762 + 4.86 * pow(10,-4) * Xw * mPres * Xc;
 80023ce:	6979      	ldr	r1, [r7, #20]
 80023d0:	6978      	ldr	r0, [r7, #20]
 80023d2:	f7fe fcb7 	bl	8000d44 <__aeabi_fmul>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe f825 	bl	8000428 <__aeabi_f2d>
 80023de:	a354      	add	r3, pc, #336	@ (adr r3, 8002530 <calculate_speed_of_sound_Cramer_1993+0x610>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	f7fe f878 	bl	80004d8 <__aeabi_dmul>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4614      	mov	r4, r2
 80023ee:	461d      	mov	r5, r3
 80023f0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80023f2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80023f4:	f7fe fca6 	bl	8000d44 <__aeabi_fmul>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe f814 	bl	8000428 <__aeabi_f2d>
 8002400:	a34d      	add	r3, pc, #308	@ (adr r3, 8002538 <calculate_speed_of_sound_Cramer_1993+0x618>)
 8002402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002406:	f7fe f867 	bl	80004d8 <__aeabi_dmul>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	a34b      	add	r3, pc, #300	@ (adr r3, 8002540 <calculate_speed_of_sound_Cramer_1993+0x620>)
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	f7fe f85e 	bl	80004d8 <__aeabi_dmul>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4620      	mov	r0, r4
 8002422:	4629      	mov	r1, r5
 8002424:	f7fd fea0 	bl	8000168 <__aeabi_dsub>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4614      	mov	r4, r2
 800242e:	461d      	mov	r5, r3
 8002430:	6939      	ldr	r1, [r7, #16]
 8002432:	6938      	ldr	r0, [r7, #16]
 8002434:	f7fe fc86 	bl	8000d44 <__aeabi_fmul>
 8002438:	4603      	mov	r3, r0
 800243a:	4618      	mov	r0, r3
 800243c:	f7fd fff4 	bl	8000428 <__aeabi_f2d>
 8002440:	a341      	add	r3, pc, #260	@ (adr r3, 8002548 <calculate_speed_of_sound_Cramer_1993+0x628>)
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	f7fe f847 	bl	80004d8 <__aeabi_dmul>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4620      	mov	r0, r4
 8002450:	4629      	mov	r1, r5
 8002452:	f7fd fe8b 	bl	800016c <__adddf3>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4614      	mov	r4, r2
 800245c:	461d      	mov	r5, r3
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f7fd ffe2 	bl	8000428 <__aeabi_f2d>
 8002464:	a33a      	add	r3, pc, #232	@ (adr r3, 8002550 <calculate_speed_of_sound_Cramer_1993+0x630>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f7fe f835 	bl	80004d8 <__aeabi_dmul>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4690      	mov	r8, r2
 8002474:	4699      	mov	r9, r3
 8002476:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002478:	f7fd ffd6 	bl	8000428 <__aeabi_f2d>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4640      	mov	r0, r8
 8002482:	4649      	mov	r1, r9
 8002484:	f7fe f828 	bl	80004d8 <__aeabi_dmul>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4690      	mov	r8, r2
 800248e:	4699      	mov	r9, r3
 8002490:	6938      	ldr	r0, [r7, #16]
 8002492:	f7fd ffc9 	bl	8000428 <__aeabi_f2d>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4640      	mov	r0, r8
 800249c:	4649      	mov	r1, r9
 800249e:	f7fe f81b 	bl	80004d8 <__aeabi_dmul>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4620      	mov	r0, r4
 80024a8:	4629      	mov	r1, r5
 80024aa:	f7fd fe5f 	bl	800016c <__adddf3>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	f7fe fae7 	bl	8000a88 <__aeabi_d2f>
 80024ba:	4603      	mov	r3, r0
 80024bc:	607b      	str	r3, [r7, #4]

	p_log_data->dist.speed_of_sound = C1 + C2 - C3;
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f7fe fb37 	bl	8000b34 <__addsf3>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b23      	ldr	r3, [pc, #140]	@ (8002558 <calculate_speed_of_sound_Cramer_1993+0x638>)
 80024cc:	681c      	ldr	r4, [r3, #0]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4610      	mov	r0, r2
 80024d2:	f7fe fb2d 	bl	8000b30 <__aeabi_fsub>
 80024d6:	4603      	mov	r3, r0
 80024d8:	6123      	str	r3, [r4, #16]

	return;
 80024da:	bf00      	nop
}
 80024dc:	3740      	adds	r7, #64	@ 0x40
 80024de:	46bd      	mov	sp, r7
 80024e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024e4:	f3af 8000 	nop.w
 80024e8:	3d70a3d7 	.word	0x3d70a3d7
 80024ec:	400dd70a 	.word	0x400dd70a
 80024f0:	e2308c3a 	.word	0xe2308c3a
 80024f4:	3e45798e 	.word	0x3e45798e
 80024f8:	ee17391b 	.word	0xee17391b
 80024fc:	3e886d78 	.word	0x3e886d78
 8002500:	d70a3d71 	.word	0xd70a3d71
 8002504:	400770a3 	.word	0x400770a3
 8002508:	d9d7bdbb 	.word	0xd9d7bdbb
 800250c:	3ddb7cdf 	.word	0x3ddb7cdf
 8002510:	a4a8c155 	.word	0xa4a8c155
 8002514:	3fcd404e 	.word	0x3fcd404e
 8002518:	55c52e73 	.word	0x55c52e73
 800251c:	c0554d65 	.word	0xc0554d65
 8002520:	0a3d70a4 	.word	0x0a3d70a4
 8002524:	4017a3d7 	.word	0x4017a3d7
 8002528:	88e368f1 	.word	0x88e368f1
 800252c:	3ee4f8b5 	.word	0x3ee4f8b5
 8002530:	99524bfd 	.word	0x99524bfd
 8002534:	4006ae62 	.word	0x4006ae62
 8002538:	33333333 	.word	0x33333333
 800253c:	40013333 	.word	0x40013333
 8002540:	68497682 	.word	0x68497682
 8002544:	3d3c25c2 	.word	0x3d3c25c2
 8002548:	e1e71045 	.word	0xe1e71045
 800254c:	403d2e04 	.word	0x403d2e04
 8002550:	1b1960fb 	.word	0x1b1960fb
 8002554:	3f3fd9ba 	.word	0x3f3fd9ba
 8002558:	20000424 	.word	0x20000424

0800255c <lsd_log_write>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

void lsd_log_write( LSD_LOG_DATA_T *p_log_data ){
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	lsd_get_rtc_timestamp( &log_timestamp );
 8002564:	480c      	ldr	r0, [pc, #48]	@ (8002598 <lsd_log_write+0x3c>)
 8002566:	f7ff fb17 	bl	8001b98 <lsd_get_rtc_timestamp>

	uint8_t try_count = 10;
 800256a:	230a      	movs	r3, #10
 800256c:	73fb      	strb	r3, [r7, #15]
	do{
		write_log_values( p_log_data );
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f814 	bl	800259c <write_log_values>
		try_count--;
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	3b01      	subs	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
		HAL_Delay( 10 );
 800257a:	200a      	movs	r0, #10
 800257c:	f001 fb1a 	bl	8003bb4 <HAL_Delay>
	} while( log_values_check() != LSD_OK && try_count >= 0 );
 8002580:	f000 f99e 	bl	80028c0 <log_values_check>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f1      	bne.n	800256e <lsd_log_write+0x12>

	update_pos_indexes();
 800258a:	f000 f9cd 	bl	8002928 <update_pos_indexes>
	return;
 800258e:	bf00      	nop
}
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000428 	.word	0x20000428

0800259c <write_log_values>:
	log_mngr.was_transmitted 		= lsd_log_buffer[pos].was_transmitted;

	return;
}

static void write_log_values( LSD_LOG_DATA_T *p_log_data ){
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	// Update local log buffer:
	log_mngr.timestamp.year 		= log_timestamp.year;
 80025a4:	4bb2      	ldr	r3, [pc, #712]	@ (8002870 <write_log_values+0x2d4>)
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	4bb2      	ldr	r3, [pc, #712]	@ (8002874 <write_log_values+0x2d8>)
 80025aa:	701a      	strb	r2, [r3, #0]
	log_mngr.timestamp.month 		= log_timestamp.month;
 80025ac:	4bb0      	ldr	r3, [pc, #704]	@ (8002870 <write_log_values+0x2d4>)
 80025ae:	785b      	ldrb	r3, [r3, #1]
 80025b0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80025b4:	b2d9      	uxtb	r1, r3
 80025b6:	4aaf      	ldr	r2, [pc, #700]	@ (8002874 <write_log_values+0x2d8>)
 80025b8:	7853      	ldrb	r3, [r2, #1]
 80025ba:	f361 0303 	bfi	r3, r1, #0, #4
 80025be:	7053      	strb	r3, [r2, #1]
	log_mngr.timestamp.day 			= log_timestamp.day;
 80025c0:	4bab      	ldr	r3, [pc, #684]	@ (8002870 <write_log_values+0x2d4>)
 80025c2:	789b      	ldrb	r3, [r3, #2]
 80025c4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80025c8:	b2d9      	uxtb	r1, r3
 80025ca:	4aaa      	ldr	r2, [pc, #680]	@ (8002874 <write_log_values+0x2d8>)
 80025cc:	7893      	ldrb	r3, [r2, #2]
 80025ce:	f361 0304 	bfi	r3, r1, #0, #5
 80025d2:	7093      	strb	r3, [r2, #2]
	log_mngr.timestamp.hour 		= log_timestamp.hour;
 80025d4:	4ba6      	ldr	r3, [pc, #664]	@ (8002870 <write_log_values+0x2d4>)
 80025d6:	78db      	ldrb	r3, [r3, #3]
 80025d8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80025dc:	b2d9      	uxtb	r1, r3
 80025de:	4aa5      	ldr	r2, [pc, #660]	@ (8002874 <write_log_values+0x2d8>)
 80025e0:	78d3      	ldrb	r3, [r2, #3]
 80025e2:	f361 0304 	bfi	r3, r1, #0, #5
 80025e6:	70d3      	strb	r3, [r2, #3]
	log_mngr.timestamp.minute 		= log_timestamp.minute;
 80025e8:	4ba1      	ldr	r3, [pc, #644]	@ (8002870 <write_log_values+0x2d4>)
 80025ea:	791b      	ldrb	r3, [r3, #4]
 80025ec:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80025f0:	b2d9      	uxtb	r1, r3
 80025f2:	4aa0      	ldr	r2, [pc, #640]	@ (8002874 <write_log_values+0x2d8>)
 80025f4:	7913      	ldrb	r3, [r2, #4]
 80025f6:	f361 0305 	bfi	r3, r1, #0, #6
 80025fa:	7113      	strb	r3, [r2, #4]
	log_mngr.timestamp.second 		= log_timestamp.second;
 80025fc:	4b9c      	ldr	r3, [pc, #624]	@ (8002870 <write_log_values+0x2d4>)
 80025fe:	795b      	ldrb	r3, [r3, #5]
 8002600:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002604:	b2d9      	uxtb	r1, r3
 8002606:	4a9b      	ldr	r2, [pc, #620]	@ (8002874 <write_log_values+0x2d8>)
 8002608:	7953      	ldrb	r3, [r2, #5]
 800260a:	f361 0305 	bfi	r3, r1, #0, #6
 800260e:	7153      	strb	r3, [r2, #5]
	log_mngr.timestamp.reserved		= log_timestamp.reserved;
 8002610:	4b97      	ldr	r3, [pc, #604]	@ (8002870 <write_log_values+0x2d4>)
 8002612:	799b      	ldrb	r3, [r3, #6]
 8002614:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002618:	b2d9      	uxtb	r1, r3
 800261a:	4a96      	ldr	r2, [pc, #600]	@ (8002874 <write_log_values+0x2d8>)
 800261c:	7993      	ldrb	r3, [r2, #6]
 800261e:	f361 0303 	bfi	r3, r1, #0, #4
 8002622:	7193      	strb	r3, [r2, #6]
	log_mngr.temperature_centi_C	= (uint16_t) ( 100 * p_log_data->clim.temperature);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4993      	ldr	r1, [pc, #588]	@ (8002878 <write_log_values+0x2dc>)
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe fb8a 	bl	8000d44 <__aeabi_fmul>
 8002630:	4603      	mov	r3, r0
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fd4c 	bl	80010d0 <__aeabi_f2uiz>
 8002638:	4603      	mov	r3, r0
 800263a:	b29a      	uxth	r2, r3
 800263c:	4b8d      	ldr	r3, [pc, #564]	@ (8002874 <write_log_values+0x2d8>)
 800263e:	811a      	strh	r2, [r3, #8]
	log_mngr.humidity_centi_RH		= (uint16_t) ( 100 * p_log_data->clim.humidity );
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	498c      	ldr	r1, [pc, #560]	@ (8002878 <write_log_values+0x2dc>)
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fb7c 	bl	8000d44 <__aeabi_fmul>
 800264c:	4603      	mov	r3, r0
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fd3e 	bl	80010d0 <__aeabi_f2uiz>
 8002654:	4603      	mov	r3, r0
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b86      	ldr	r3, [pc, #536]	@ (8002874 <write_log_values+0x2d8>)
 800265a:	815a      	strh	r2, [r3, #10]
	log_mngr.speed_of_sound_mps 	= (uint16_t) ( 100 * p_log_data->dist.speed_of_sound );
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	4985      	ldr	r1, [pc, #532]	@ (8002878 <write_log_values+0x2dc>)
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fb6e 	bl	8000d44 <__aeabi_fmul>
 8002668:	4603      	mov	r3, r0
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fd30 	bl	80010d0 <__aeabi_f2uiz>
 8002670:	4603      	mov	r3, r0
 8002672:	b29a      	uxth	r2, r3
 8002674:	4b7f      	ldr	r3, [pc, #508]	@ (8002874 <write_log_values+0x2d8>)
 8002676:	819a      	strh	r2, [r3, #12]
	log_mngr.distance_mm 			= (uint16_t) ( 10  * p_log_data->dist.distance );		// cm to mm
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	497f      	ldr	r1, [pc, #508]	@ (800287c <write_log_values+0x2e0>)
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fb60 	bl	8000d44 <__aeabi_fmul>
 8002684:	4603      	mov	r3, r0
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fd22 	bl	80010d0 <__aeabi_f2uiz>
 800268c:	4603      	mov	r3, r0
 800268e:	b29a      	uxth	r2, r3
 8002690:	4b78      	ldr	r3, [pc, #480]	@ (8002874 <write_log_values+0x2d8>)
 8002692:	81da      	strh	r2, [r3, #14]
	log_mngr.found_errors 			= p_log_data->errors;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7e1a      	ldrb	r2, [r3, #24]
 8002698:	4b76      	ldr	r3, [pc, #472]	@ (8002874 <write_log_values+0x2d8>)
 800269a:	741a      	strb	r2, [r3, #16]
	log_mngr.was_transmitted 		= p_log_data->transmitted;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7e5a      	ldrb	r2, [r3, #25]
 80026a0:	4b74      	ldr	r3, [pc, #464]	@ (8002874 <write_log_values+0x2d8>)
 80026a2:	745a      	strb	r2, [r3, #17]

	// Update global log buffer:
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.year 			= log_timestamp.year;
 80026a4:	4b76      	ldr	r3, [pc, #472]	@ (8002880 <write_log_values+0x2e4>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	4b71      	ldr	r3, [pc, #452]	@ (8002870 <write_log_values+0x2d4>)
 80026ac:	7818      	ldrb	r0, [r3, #0]
 80026ae:	4a75      	ldr	r2, [pc, #468]	@ (8002884 <write_log_values+0x2e8>)
 80026b0:	460b      	mov	r3, r1
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	440b      	add	r3, r1
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	4602      	mov	r2, r0
 80026bc:	701a      	strb	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.month 		= log_timestamp.month;
 80026be:	4b70      	ldr	r3, [pc, #448]	@ (8002880 <write_log_values+0x2e4>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002870 <write_log_values+0x2d4>)
 80026c6:	785b      	ldrb	r3, [r3, #1]
 80026c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80026cc:	b2d9      	uxtb	r1, r3
 80026ce:	4a6d      	ldr	r2, [pc, #436]	@ (8002884 <write_log_values+0x2e8>)
 80026d0:	4603      	mov	r3, r0
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4403      	add	r3, r0
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	441a      	add	r2, r3
 80026da:	7853      	ldrb	r3, [r2, #1]
 80026dc:	f361 0303 	bfi	r3, r1, #0, #4
 80026e0:	7053      	strb	r3, [r2, #1]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.day 			= log_timestamp.day;
 80026e2:	4b67      	ldr	r3, [pc, #412]	@ (8002880 <write_log_values+0x2e4>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	4b61      	ldr	r3, [pc, #388]	@ (8002870 <write_log_values+0x2d4>)
 80026ea:	789b      	ldrb	r3, [r3, #2]
 80026ec:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80026f0:	b2d9      	uxtb	r1, r3
 80026f2:	4a64      	ldr	r2, [pc, #400]	@ (8002884 <write_log_values+0x2e8>)
 80026f4:	4603      	mov	r3, r0
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4403      	add	r3, r0
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	441a      	add	r2, r3
 80026fe:	7893      	ldrb	r3, [r2, #2]
 8002700:	f361 0304 	bfi	r3, r1, #0, #5
 8002704:	7093      	strb	r3, [r2, #2]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.hour 			= log_timestamp.hour;
 8002706:	4b5e      	ldr	r3, [pc, #376]	@ (8002880 <write_log_values+0x2e4>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	4b58      	ldr	r3, [pc, #352]	@ (8002870 <write_log_values+0x2d4>)
 800270e:	78db      	ldrb	r3, [r3, #3]
 8002710:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002714:	b2d9      	uxtb	r1, r3
 8002716:	4a5b      	ldr	r2, [pc, #364]	@ (8002884 <write_log_values+0x2e8>)
 8002718:	4603      	mov	r3, r0
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4403      	add	r3, r0
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	441a      	add	r2, r3
 8002722:	78d3      	ldrb	r3, [r2, #3]
 8002724:	f361 0304 	bfi	r3, r1, #0, #5
 8002728:	70d3      	strb	r3, [r2, #3]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.minute 		= log_timestamp.minute;
 800272a:	4b55      	ldr	r3, [pc, #340]	@ (8002880 <write_log_values+0x2e4>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	4b4f      	ldr	r3, [pc, #316]	@ (8002870 <write_log_values+0x2d4>)
 8002732:	791b      	ldrb	r3, [r3, #4]
 8002734:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002738:	b2d9      	uxtb	r1, r3
 800273a:	4a52      	ldr	r2, [pc, #328]	@ (8002884 <write_log_values+0x2e8>)
 800273c:	4603      	mov	r3, r0
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4403      	add	r3, r0
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	441a      	add	r2, r3
 8002746:	7913      	ldrb	r3, [r2, #4]
 8002748:	f361 0305 	bfi	r3, r1, #0, #6
 800274c:	7113      	strb	r3, [r2, #4]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.second 		= log_timestamp.second;
 800274e:	4b4c      	ldr	r3, [pc, #304]	@ (8002880 <write_log_values+0x2e4>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	4b46      	ldr	r3, [pc, #280]	@ (8002870 <write_log_values+0x2d4>)
 8002756:	795b      	ldrb	r3, [r3, #5]
 8002758:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800275c:	b2d9      	uxtb	r1, r3
 800275e:	4a49      	ldr	r2, [pc, #292]	@ (8002884 <write_log_values+0x2e8>)
 8002760:	4603      	mov	r3, r0
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4403      	add	r3, r0
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	441a      	add	r2, r3
 800276a:	7953      	ldrb	r3, [r2, #5]
 800276c:	f361 0305 	bfi	r3, r1, #0, #6
 8002770:	7153      	strb	r3, [r2, #5]
	lsd_log_buffer[lsd_log_buffer_next_pos].timestamp.reserved		= log_timestamp.reserved;
 8002772:	4b43      	ldr	r3, [pc, #268]	@ (8002880 <write_log_values+0x2e4>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	4b3d      	ldr	r3, [pc, #244]	@ (8002870 <write_log_values+0x2d4>)
 800277a:	799b      	ldrb	r3, [r3, #6]
 800277c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002780:	b2d9      	uxtb	r1, r3
 8002782:	4a40      	ldr	r2, [pc, #256]	@ (8002884 <write_log_values+0x2e8>)
 8002784:	4603      	mov	r3, r0
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4403      	add	r3, r0
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	441a      	add	r2, r3
 800278e:	7993      	ldrb	r3, [r2, #6]
 8002790:	f361 0303 	bfi	r3, r1, #0, #4
 8002794:	7193      	strb	r3, [r2, #6]

	lsd_log_buffer[lsd_log_buffer_next_pos].temperature_centi_C = (uint16_t) ( 100 * p_log_data->clim.temperature);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4937      	ldr	r1, [pc, #220]	@ (8002878 <write_log_values+0x2dc>)
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe fad1 	bl	8000d44 <__aeabi_fmul>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b36      	ldr	r3, [pc, #216]	@ (8002880 <write_log_values+0x2e4>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	461c      	mov	r4, r3
 80027ac:	4610      	mov	r0, r2
 80027ae:	f7fe fc8f 	bl	80010d0 <__aeabi_f2uiz>
 80027b2:	4603      	mov	r3, r0
 80027b4:	b299      	uxth	r1, r3
 80027b6:	4a33      	ldr	r2, [pc, #204]	@ (8002884 <write_log_values+0x2e8>)
 80027b8:	4623      	mov	r3, r4
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4423      	add	r3, r4
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	3308      	adds	r3, #8
 80027c4:	460a      	mov	r2, r1
 80027c6:	801a      	strh	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].humidity_centi_RH 	= (uint16_t) ( 100 * p_log_data->clim.humidity );
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	492a      	ldr	r1, [pc, #168]	@ (8002878 <write_log_values+0x2dc>)
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fab8 	bl	8000d44 <__aeabi_fmul>
 80027d4:	4603      	mov	r3, r0
 80027d6:	461a      	mov	r2, r3
 80027d8:	4b29      	ldr	r3, [pc, #164]	@ (8002880 <write_log_values+0x2e4>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	461c      	mov	r4, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	f7fe fc76 	bl	80010d0 <__aeabi_f2uiz>
 80027e4:	4603      	mov	r3, r0
 80027e6:	b299      	uxth	r1, r3
 80027e8:	4a26      	ldr	r2, [pc, #152]	@ (8002884 <write_log_values+0x2e8>)
 80027ea:	4623      	mov	r3, r4
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4423      	add	r3, r4
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	330a      	adds	r3, #10
 80027f6:	460a      	mov	r2, r1
 80027f8:	801a      	strh	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].speed_of_sound_mps 	= (uint16_t) ( 100 * p_log_data->dist.speed_of_sound );
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	491e      	ldr	r1, [pc, #120]	@ (8002878 <write_log_values+0x2dc>)
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe fa9f 	bl	8000d44 <__aeabi_fmul>
 8002806:	4603      	mov	r3, r0
 8002808:	461a      	mov	r2, r3
 800280a:	4b1d      	ldr	r3, [pc, #116]	@ (8002880 <write_log_values+0x2e4>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	461c      	mov	r4, r3
 8002810:	4610      	mov	r0, r2
 8002812:	f7fe fc5d 	bl	80010d0 <__aeabi_f2uiz>
 8002816:	4603      	mov	r3, r0
 8002818:	b299      	uxth	r1, r3
 800281a:	4a1a      	ldr	r2, [pc, #104]	@ (8002884 <write_log_values+0x2e8>)
 800281c:	4623      	mov	r3, r4
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4423      	add	r3, r4
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	4413      	add	r3, r2
 8002826:	330c      	adds	r3, #12
 8002828:	460a      	mov	r2, r1
 800282a:	801a      	strh	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].distance_mm 		= (uint16_t) ( 10  * p_log_data->dist.distance );		// cm to mm
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4912      	ldr	r1, [pc, #72]	@ (800287c <write_log_values+0x2e0>)
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fa86 	bl	8000d44 <__aeabi_fmul>
 8002838:	4603      	mov	r3, r0
 800283a:	461a      	mov	r2, r3
 800283c:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <write_log_values+0x2e4>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	461c      	mov	r4, r3
 8002842:	4610      	mov	r0, r2
 8002844:	f7fe fc44 	bl	80010d0 <__aeabi_f2uiz>
 8002848:	4603      	mov	r3, r0
 800284a:	b299      	uxth	r1, r3
 800284c:	4a0d      	ldr	r2, [pc, #52]	@ (8002884 <write_log_values+0x2e8>)
 800284e:	4623      	mov	r3, r4
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4423      	add	r3, r4
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	330e      	adds	r3, #14
 800285a:	460a      	mov	r2, r1
 800285c:	801a      	strh	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].found_errors 		= p_log_data->errors;
 800285e:	4b08      	ldr	r3, [pc, #32]	@ (8002880 <write_log_values+0x2e4>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	4619      	mov	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7e18      	ldrb	r0, [r3, #24]
 8002868:	4a06      	ldr	r2, [pc, #24]	@ (8002884 <write_log_values+0x2e8>)
 800286a:	460b      	mov	r3, r1
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	e00b      	b.n	8002888 <write_log_values+0x2ec>
 8002870:	20000428 	.word	0x20000428
 8002874:	20000430 	.word	0x20000430
 8002878:	42c80000 	.word	0x42c80000
 800287c:	41200000 	.word	0x41200000
 8002880:	2000166c 	.word	0x2000166c
 8002884:	2000046c 	.word	0x2000046c
 8002888:	440b      	add	r3, r1
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	3310      	adds	r3, #16
 8002890:	4602      	mov	r2, r0
 8002892:	701a      	strb	r2, [r3, #0]
	lsd_log_buffer[lsd_log_buffer_next_pos].was_transmitted 	= p_log_data->transmitted;
 8002894:	4b08      	ldr	r3, [pc, #32]	@ (80028b8 <write_log_values+0x31c>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	7e58      	ldrb	r0, [r3, #25]
 800289e:	4a07      	ldr	r2, [pc, #28]	@ (80028bc <write_log_values+0x320>)
 80028a0:	460b      	mov	r3, r1
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	440b      	add	r3, r1
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	3311      	adds	r3, #17
 80028ac:	4602      	mov	r2, r0
 80028ae:	701a      	strb	r2, [r3, #0]

	/*
	 * TODO: save on flash memory
	 */

	return;
 80028b0:	bf00      	nop
}
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd90      	pop	{r4, r7, pc}
 80028b8:	2000166c 	.word	0x2000166c
 80028bc:	2000046c 	.word	0x2000046c

080028c0 <log_values_check>:

static int8_t log_values_check( void ){
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
	uint8_t *p_global = (uint8_t *) &lsd_log_buffer[lsd_log_buffer_next_pos];
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <log_values_check+0x5c>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4413      	add	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4a12      	ldr	r2, [pc, #72]	@ (8002920 <log_values_check+0x60>)
 80028d6:	4413      	add	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
	uint8_t *p_local = (uint8_t *) &log_mngr;
 80028da:	4b12      	ldr	r3, [pc, #72]	@ (8002924 <log_values_check+0x64>)
 80028dc:	60bb      	str	r3, [r7, #8]

	for( uint8_t i=0; i<sizeof(LSD_LOG_BUFFER_T); i++ ){
 80028de:	2300      	movs	r3, #0
 80028e0:	71fb      	strb	r3, [r7, #7]
 80028e2:	e011      	b.n	8002908 <log_values_check+0x48>
		if( *p_global != *p_local ){
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	781a      	ldrb	r2, [r3, #0]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d002      	beq.n	80028f6 <log_values_check+0x36>
			return LSD_ERR_CRC_CHECK;
 80028f0:	f06f 0304 	mvn.w	r3, #4
 80028f4:	e00c      	b.n	8002910 <log_values_check+0x50>
		}
		p_global++;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3301      	adds	r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
		p_local++;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	3301      	adds	r3, #1
 8002900:	60bb      	str	r3, [r7, #8]
	for( uint8_t i=0; i<sizeof(LSD_LOG_BUFFER_T); i++ ){
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	3301      	adds	r3, #1
 8002906:	71fb      	strb	r3, [r7, #7]
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	2b11      	cmp	r3, #17
 800290c:	d9ea      	bls.n	80028e4 <log_values_check+0x24>
	}

	return LSD_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	2000166c 	.word	0x2000166c
 8002920:	2000046c 	.word	0x2000046c
 8002924:	20000430 	.word	0x20000430

08002928 <update_pos_indexes>:

static void update_pos_indexes( void ){
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
	lsd_log_buffer_next_pos = ( lsd_log_buffer_next_pos + 1 ) % LSD_LOG_BUFFER_SIZE;
 800292c:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <update_pos_indexes+0x48>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	425a      	negs	r2, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	bf58      	it	pl
 800293a:	4253      	negpl	r3, r2
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <update_pos_indexes+0x48>)
 8002940:	701a      	strb	r2, [r3, #0]

	if( lsd_log_buffer_next_pos == lsd_log_buffer_first_pos ){
 8002942:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <update_pos_indexes+0x48>)
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <update_pos_indexes+0x4c>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d10b      	bne.n	8002966 <update_pos_indexes+0x3e>
		lsd_log_buffer_first_pos = ( lsd_log_buffer_first_pos + 1 ) % LSD_LOG_BUFFER_SIZE;
 800294e:	4b09      	ldr	r3, [pc, #36]	@ (8002974 <update_pos_indexes+0x4c>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	3301      	adds	r3, #1
 8002954:	425a      	negs	r2, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	bf58      	it	pl
 800295c:	4253      	negpl	r3, r2
 800295e:	b2da      	uxtb	r2, r3
 8002960:	4b04      	ldr	r3, [pc, #16]	@ (8002974 <update_pos_indexes+0x4c>)
 8002962:	701a      	strb	r2, [r3, #0]
	}

	return;
 8002964:	bf00      	nop
 8002966:	bf00      	nop
}
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	2000166c 	.word	0x2000166c
 8002974:	2000166d 	.word	0x2000166d

08002978 <state_machine_init>:

/* ==========================================================================================================
 * Global Functions Implementation
 */

void state_machine_init( LSD_MCU_PERIPH_HANDLES_T *hmcu, lsd_sys_clk_cfg_t clk_cfg ){
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
	hmcu_periph = hmcu;
 8002982:	4a30      	ldr	r2, [pc, #192]	@ (8002a44 <state_machine_init+0xcc>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6013      	str	r3, [r2, #0]
	lsd_clk_cfg = clk_cfg;
 8002988:	4a2f      	ldr	r2, [pc, #188]	@ (8002a48 <state_machine_init+0xd0>)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin( SENSOR_PWR_GPIO_Port, SENSOR_PWR_Pin, LSD_SENSORS_OFF );  // turn sensors ON
 800298e:	2201      	movs	r2, #1
 8002990:	2110      	movs	r1, #16
 8002992:	482e      	ldr	r0, [pc, #184]	@ (8002a4c <state_machine_init+0xd4>)
 8002994:	f001 fc0d 	bl	80041b2 <HAL_GPIO_WritePin>

	int8_t ret = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]

	ret = lsd_common_init( hmcu_periph->mcu_htim[LSD_TIM_COMMON], hmcu_periph->mcu_hrtc );
 800299c:	4b29      	ldr	r3, [pc, #164]	@ (8002a44 <state_machine_init+0xcc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	4b28      	ldr	r3, [pc, #160]	@ (8002a44 <state_machine_init+0xcc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f7ff f898 	bl	8001ae0 <lsd_common_init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	73fb      	strb	r3, [r7, #15]
	ret += leds_init( hmcu_periph->mcu_htim[LSD_TIM_GENERAL] );
 80029b4:	4b23      	ldr	r3, [pc, #140]	@ (8002a44 <state_machine_init+0xcc>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fe30 	bl	8001620 <leds_init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	4413      	add	r3, r2
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	73fb      	strb	r3, [r7, #15]
	ret += aht20_init( hmcu_periph->mcu_hi2c );
 80029cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a44 <state_machine_init+0xcc>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe fb9c 	bl	8001110 <aht20_init>
 80029d8:	4603      	mov	r3, r0
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	4413      	add	r3, r2
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	73fb      	strb	r3, [r7, #15]
	ret += ajsr04m_init( hmcu_periph->mcu_htim[LSD_TIM_SENSORS] );
 80029e4:	4b17      	ldr	r3, [pc, #92]	@ (8002a44 <state_machine_init+0xcc>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe fd1a 	bl	8001424 <ajsr04m_init>
 80029f0:	4603      	mov	r3, r0
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	4413      	add	r3, r2
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	73fb      	strb	r3, [r7, #15]
	ret += le910r1br_init( hmcu_periph->mcu_huart, hmcu_periph->mcu_htim[LSD_TIM_GENERAL] );
 80029fc:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <state_machine_init+0xcc>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	4b10      	ldr	r3, [pc, #64]	@ (8002a44 <state_machine_init+0xcc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	f7fe fdb8 	bl	8001580 <le910r1br_init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	4413      	add	r3, r2
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	73fb      	strb	r3, [r7, #15]

	char *msg = "System Initialized\r\n";
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a50 <state_machine_init+0xd8>)
 8002a1e:	60bb      	str	r3, [r7, #8]
	CDC_Transmit_FS( (uint8_t *) msg, strlen( msg ) );
 8002a20:	68b8      	ldr	r0, [r7, #8]
 8002a22:	f7fd fb95 	bl	8000150 <strlen>
 8002a26:	4603      	mov	r3, r0
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	68b8      	ldr	r0, [r7, #8]
 8002a2e:	f00a ffc3 	bl	800d9b8 <CDC_Transmit_FS>

	HAL_Delay( 1000 );
 8002a32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a36:	f001 f8bd 	bl	8003bb4 <HAL_Delay>

	return;
 8002a3a:	bf00      	nop
}
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000444 	.word	0x20000444
 8002a48:	20000464 	.word	0x20000464
 8002a4c:	40010c00 	.word	0x40010c00
 8002a50:	08011d34 	.word	0x08011d34

08002a54 <state_machine_run>:

void state_machine_run( void ){
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	switch( current_state ){
 8002a58:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <state_machine_run+0x5c>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d821      	bhi.n	8002aa4 <state_machine_run+0x50>
 8002a60:	a201      	add	r2, pc, #4	@ (adr r2, 8002a68 <state_machine_run+0x14>)
 8002a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a66:	bf00      	nop
 8002a68:	08002a81 	.word	0x08002a81
 8002a6c:	08002a87 	.word	0x08002a87
 8002a70:	08002a8d 	.word	0x08002a8d
 8002a74:	08002a93 	.word	0x08002a93
 8002a78:	08002a99 	.word	0x08002a99
 8002a7c:	08002a9f 	.word	0x08002a9f
		case S0_WAKEUP:
			state_machine_run_s0_wakeup();
 8002a80:	f000 f818 	bl	8002ab4 <state_machine_run_s0_wakeup>
			break;
 8002a84:	e012      	b.n	8002aac <state_machine_run+0x58>

		case S1_MEASURE:
			state_machine_run_s1_measure();
 8002a86:	f000 f879 	bl	8002b7c <state_machine_run_s1_measure>
			break;
 8002a8a:	e00f      	b.n	8002aac <state_machine_run+0x58>

		case S2_ANALYZE:
			state_machine_run_s2_analyze();
 8002a8c:	f000 f8a4 	bl	8002bd8 <state_machine_run_s2_analyze>
			break;
 8002a90:	e00c      	b.n	8002aac <state_machine_run+0x58>

		case S3_TRANSMIT:
			state_machine_run_s3_transmit();
 8002a92:	f000 f8c9 	bl	8002c28 <state_machine_run_s3_transmit>
			break;
 8002a96:	e009      	b.n	8002aac <state_machine_run+0x58>

		case S4_SLEEP:
			state_machine_run_s4_sleep();
 8002a98:	f000 f8ea 	bl	8002c70 <state_machine_run_s4_sleep>
			break;
 8002a9c:	e006      	b.n	8002aac <state_machine_run+0x58>

		case S5_FAIL_SAFE:
			state_machine_run_s5_fail_safe();
 8002a9e:	f000 f91b 	bl	8002cd8 <state_machine_run_s5_fail_safe>
			break;
 8002aa2:	e003      	b.n	8002aac <state_machine_run+0x58>

		default:
			current_state = S5_FAIL_SAFE;
 8002aa4:	4b02      	ldr	r3, [pc, #8]	@ (8002ab0 <state_machine_run+0x5c>)
 8002aa6:	2205      	movs	r2, #5
 8002aa8:	701a      	strb	r2, [r3, #0]
			break;
 8002aaa:	bf00      	nop
	}
	return;
 8002aac:	bf00      	nop
}
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000443 	.word	0x20000443

08002ab4 <state_machine_run_s0_wakeup>:

/* ==========================================================================================================
 * Local Functions Implementation
 */

static void state_machine_run_s0_wakeup( void ){
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08c      	sub	sp, #48	@ 0x30
 8002ab8:	af00      	add	r7, sp, #0
	if( lsd_cycle_count > 0 ){
 8002aba:	4b29      	ldr	r3, [pc, #164]	@ (8002b60 <state_machine_run_s0_wakeup+0xac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d004      	beq.n	8002acc <state_machine_run_s0_wakeup+0x18>
		lsd_exit_stop_mode( lsd_clk_cfg );
 8002ac2:	4b28      	ldr	r3, [pc, #160]	@ (8002b64 <state_machine_run_s0_wakeup+0xb0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff f984 	bl	8001dd4 <lsd_exit_stop_mode>
	}

	HAL_Delay( 1000 );
 8002acc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ad0:	f001 f870 	bl	8003bb4 <HAL_Delay>
	lsd_cycle_count++;
 8002ad4:	4b22      	ldr	r3, [pc, #136]	@ (8002b60 <state_machine_run_s0_wakeup+0xac>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	4a21      	ldr	r2, [pc, #132]	@ (8002b60 <state_machine_run_s0_wakeup+0xac>)
 8002adc:	6013      	str	r3, [r2, #0]

	char msg_cyle[40] = { 0 };
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	f107 0308 	add.w	r3, r7, #8
 8002ae6:	2224      	movs	r2, #36	@ 0x24
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f00c f9e9 	bl	800eec2 <memset>
	snprintf( msg_cyle, 40, "\n********** Cycle %ld **********\n", lsd_cycle_count );
 8002af0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b60 <state_machine_run_s0_wakeup+0xac>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	1d38      	adds	r0, r7, #4
 8002af6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b68 <state_machine_run_s0_wakeup+0xb4>)
 8002af8:	2128      	movs	r1, #40	@ 0x28
 8002afa:	f00c f96b 	bl	800edd4 <sniprintf>
	CDC_Transmit_FS( (uint8_t *) msg_cyle, strlen( msg_cyle ) );
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fd fb25 	bl	8000150 <strlen>
 8002b06:	4603      	mov	r3, r0
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f00a ff52 	bl	800d9b8 <CDC_Transmit_FS>

	char *msg = "S0 - Wakeup\n";
 8002b14:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <state_machine_run_s0_wakeup+0xb8>)
 8002b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
	CDC_Transmit_FS( (uint8_t *) msg, strlen( msg ) );
 8002b18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b1a:	f7fd fb19 	bl	8000150 <strlen>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	4619      	mov	r1, r3
 8002b24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b26:	f00a ff47 	bl	800d9b8 <CDC_Transmit_FS>

	leds_turn_on( LSD_LED_BLUE );
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7fe fdd8 	bl	80016e0 <leds_turn_on>
//	le910r1br_power_on();
	HAL_GPIO_WritePin( SENSOR_PWR_GPIO_Port, SENSOR_PWR_Pin, LSD_SENSORS_ON );
 8002b30:	2200      	movs	r2, #0
 8002b32:	2110      	movs	r1, #16
 8002b34:	480e      	ldr	r0, [pc, #56]	@ (8002b70 <state_machine_run_s0_wakeup+0xbc>)
 8002b36:	f001 fb3c 	bl	80041b2 <HAL_GPIO_WritePin>
	leds_turn_off( LSD_LED_BLUE );
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7fe fe2a 	bl	8001794 <leds_turn_off>

	HAL_Delay( 1000 );
 8002b40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b44:	f001 f836 	bl	8003bb4 <HAL_Delay>
	previous_state = current_state;
 8002b48:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <state_machine_run_s0_wakeup+0xc0>)
 8002b4a:	781a      	ldrb	r2, [r3, #0]
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <state_machine_run_s0_wakeup+0xc4>)
 8002b4e:	701a      	strb	r2, [r3, #0]
	current_state = S1_MEASURE;
 8002b50:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <state_machine_run_s0_wakeup+0xc0>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	701a      	strb	r2, [r3, #0]
	return;
 8002b56:	bf00      	nop
}
 8002b58:	3730      	adds	r7, #48	@ 0x30
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000468 	.word	0x20000468
 8002b64:	20000464 	.word	0x20000464
 8002b68:	08011d4c 	.word	0x08011d4c
 8002b6c:	08011d70 	.word	0x08011d70
 8002b70:	40010c00 	.word	0x40010c00
 8002b74:	20000443 	.word	0x20000443
 8002b78:	20000442 	.word	0x20000442

08002b7c <state_machine_run_s1_measure>:

static void state_machine_run_s1_measure( void ){
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
	char *msg = "S1 - Measuring\n";
 8002b82:	4b11      	ldr	r3, [pc, #68]	@ (8002bc8 <state_machine_run_s1_measure+0x4c>)
 8002b84:	607b      	str	r3, [r7, #4]
	CDC_Transmit_FS( (uint8_t *) msg, strlen( msg ) );
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fd fae2 	bl	8000150 <strlen>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	4619      	mov	r1, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f00a ff10 	bl	800d9b8 <CDC_Transmit_FS>

	leds_turn_on( LSD_LED_RED );
 8002b98:	2001      	movs	r0, #1
 8002b9a:	f7fe fda1 	bl	80016e0 <leds_turn_on>
	lsd_measure_distance( &lsd_log_data );
 8002b9e:	480b      	ldr	r0, [pc, #44]	@ (8002bcc <state_machine_run_s1_measure+0x50>)
 8002ba0:	f7ff f95a 	bl	8001e58 <lsd_measure_distance>
	leds_turn_off( LSD_LED_RED );
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	f7fe fdf5 	bl	8001794 <leds_turn_off>

	previous_state = current_state;
 8002baa:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <state_machine_run_s1_measure+0x54>)
 8002bac:	781a      	ldrb	r2, [r3, #0]
 8002bae:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <state_machine_run_s1_measure+0x58>)
 8002bb0:	701a      	strb	r2, [r3, #0]
	current_state = S2_ANALYZE;
 8002bb2:	4b07      	ldr	r3, [pc, #28]	@ (8002bd0 <state_machine_run_s1_measure+0x54>)
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	701a      	strb	r2, [r3, #0]
	HAL_Delay( 1000 );
 8002bb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bbc:	f000 fffa 	bl	8003bb4 <HAL_Delay>
	return;
 8002bc0:	bf00      	nop
}
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	08011d80 	.word	0x08011d80
 8002bcc:	20000448 	.word	0x20000448
 8002bd0:	20000443 	.word	0x20000443
 8002bd4:	20000442 	.word	0x20000442

08002bd8 <state_machine_run_s2_analyze>:

static void state_machine_run_s2_analyze( void ){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
	char *msg = "S2 - Analyzing data\n";
 8002bde:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <state_machine_run_s2_analyze+0x40>)
 8002be0:	607b      	str	r3, [r7, #4]
	CDC_Transmit_FS( (uint8_t *) msg, strlen( msg ) );
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fd fab4 	bl	8000150 <strlen>
 8002be8:	4603      	mov	r3, r0
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4619      	mov	r1, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f00a fee2 	bl	800d9b8 <CDC_Transmit_FS>

	lsd_analyze_data( &lsd_log_data );
 8002bf4:	4809      	ldr	r0, [pc, #36]	@ (8002c1c <state_machine_run_s2_analyze+0x44>)
 8002bf6:	f7ff f819 	bl	8001c2c <lsd_analyze_data>
	lsd_log_write( &lsd_log_data );
 8002bfa:	4808      	ldr	r0, [pc, #32]	@ (8002c1c <state_machine_run_s2_analyze+0x44>)
 8002bfc:	f7ff fcae 	bl	800255c <lsd_log_write>
	 *  TODO: change next state depending on data, maybe skip a transmission or shorten sleep time.
	 *
	 *  lsd_change_sleep_time( hmcu_periph->mcu_hrtc, 0, 0, 5 );
	 */

	previous_state = current_state;
 8002c00:	4b07      	ldr	r3, [pc, #28]	@ (8002c20 <state_machine_run_s2_analyze+0x48>)
 8002c02:	781a      	ldrb	r2, [r3, #0]
 8002c04:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <state_machine_run_s2_analyze+0x4c>)
 8002c06:	701a      	strb	r2, [r3, #0]
	current_state = S3_TRANSMIT;
 8002c08:	4b05      	ldr	r3, [pc, #20]	@ (8002c20 <state_machine_run_s2_analyze+0x48>)
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	701a      	strb	r2, [r3, #0]
	return;
 8002c0e:	bf00      	nop
}
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	08011d90 	.word	0x08011d90
 8002c1c:	20000448 	.word	0x20000448
 8002c20:	20000443 	.word	0x20000443
 8002c24:	20000442 	.word	0x20000442

08002c28 <state_machine_run_s3_transmit>:

static void state_machine_run_s3_transmit( void ){
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
	char *msg = "S3 - Transmitting\n";
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <state_machine_run_s3_transmit+0x38>)
 8002c30:	607b      	str	r3, [r7, #4]
	CDC_Transmit_FS( (uint8_t *) msg, strlen( msg ) );
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fd fa8c 	bl	8000150 <strlen>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f00a feba 	bl	800d9b8 <CDC_Transmit_FS>
//	HAL_Delay(500);
//
//	ret = le910r1br_check_cpin();
//	HAL_Delay(500);

	lsd_transmit_usb( &lsd_log_data );
 8002c44:	4807      	ldr	r0, [pc, #28]	@ (8002c64 <state_machine_run_s3_transmit+0x3c>)
 8002c46:	f000 f86f 	bl	8002d28 <lsd_transmit_usb>

	previous_state = current_state;
 8002c4a:	4b07      	ldr	r3, [pc, #28]	@ (8002c68 <state_machine_run_s3_transmit+0x40>)
 8002c4c:	781a      	ldrb	r2, [r3, #0]
 8002c4e:	4b07      	ldr	r3, [pc, #28]	@ (8002c6c <state_machine_run_s3_transmit+0x44>)
 8002c50:	701a      	strb	r2, [r3, #0]
	current_state = S4_SLEEP;
 8002c52:	4b05      	ldr	r3, [pc, #20]	@ (8002c68 <state_machine_run_s3_transmit+0x40>)
 8002c54:	2204      	movs	r2, #4
 8002c56:	701a      	strb	r2, [r3, #0]
	return;
 8002c58:	bf00      	nop
}
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	08011da8 	.word	0x08011da8
 8002c64:	20000448 	.word	0x20000448
 8002c68:	20000443 	.word	0x20000443
 8002c6c:	20000442 	.word	0x20000442

08002c70 <state_machine_run_s4_sleep>:

static void state_machine_run_s4_sleep( void ){
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
	char *msg = "S4 - Entering sleep\n";
 8002c76:	4b14      	ldr	r3, [pc, #80]	@ (8002cc8 <state_machine_run_s4_sleep+0x58>)
 8002c78:	607b      	str	r3, [r7, #4]
	CDC_Transmit_FS( (uint8_t *) msg, strlen( msg ) );
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fd fa68 	bl	8000150 <strlen>
 8002c80:	4603      	mov	r3, r0
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f00a fe96 	bl	800d9b8 <CDC_Transmit_FS>

	previous_state = current_state;
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ccc <state_machine_run_s4_sleep+0x5c>)
 8002c8e:	781a      	ldrb	r2, [r3, #0]
 8002c90:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd0 <state_machine_run_s4_sleep+0x60>)
 8002c92:	701a      	strb	r2, [r3, #0]
	current_state = S0_WAKEUP;
 8002c94:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <state_machine_run_s4_sleep+0x5c>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]

	leds_turn_on( LSD_LED_BLUE );
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7fe fd20 	bl	80016e0 <leds_turn_on>
	le910r1br_power_off();
 8002ca0:	f7fe fca4 	bl	80015ec <le910r1br_power_off>
	HAL_GPIO_WritePin( SENSOR_PWR_GPIO_Port, SENSOR_PWR_Pin, LSD_SENSORS_OFF );
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	2110      	movs	r1, #16
 8002ca8:	480a      	ldr	r0, [pc, #40]	@ (8002cd4 <state_machine_run_s4_sleep+0x64>)
 8002caa:	f001 fa82 	bl	80041b2 <HAL_GPIO_WritePin>
	leds_turn_off( LSD_LED_BLUE );
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f7fe fd70 	bl	8001794 <leds_turn_off>

	lsd_enter_stop_mode();
 8002cb4:	f7ff f8ae 	bl	8001e14 <lsd_enter_stop_mode>
	HAL_Delay( 1000 );
 8002cb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cbc:	f000 ff7a 	bl	8003bb4 <HAL_Delay>
	return;
 8002cc0:	bf00      	nop
}
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	08011dbc 	.word	0x08011dbc
 8002ccc:	20000443 	.word	0x20000443
 8002cd0:	20000442 	.word	0x20000442
 8002cd4:	40010c00 	.word	0x40010c00

08002cd8 <state_machine_run_s5_fail_safe>:

static void state_machine_run_s5_fail_safe( void ){
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
	char *msg = "S5 - Fail safe\n";
 8002cde:	4b0f      	ldr	r3, [pc, #60]	@ (8002d1c <state_machine_run_s5_fail_safe+0x44>)
 8002ce0:	607b      	str	r3, [r7, #4]
	CDC_Transmit_FS( (uint8_t *) msg, strlen( msg ) );
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fd fa34 	bl	8000150 <strlen>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	4619      	mov	r1, r3
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f00a fe62 	bl	800d9b8 <CDC_Transmit_FS>

	if( previous_state != current_state ){  // first time entering S5 state
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d20 <state_machine_run_s5_fail_safe+0x48>)
 8002cf6:	781a      	ldrb	r2, [r3, #0]
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d24 <state_machine_run_s5_fail_safe+0x4c>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d002      	beq.n	8002d06 <state_machine_run_s5_fail_safe+0x2e>
		leds_blink_fast( LSD_LED_RED );
 8002d00:	2001      	movs	r0, #1
 8002d02:	f7fe fd97 	bl	8001834 <leds_blink_fast>

	/*
	 *	TODO: identify issue, print and try solving it
	 */

	previous_state = current_state;
 8002d06:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <state_machine_run_s5_fail_safe+0x4c>)
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	4b05      	ldr	r3, [pc, #20]	@ (8002d20 <state_machine_run_s5_fail_safe+0x48>)
 8002d0c:	701a      	strb	r2, [r3, #0]
	current_state = S5_FAIL_SAFE;
 8002d0e:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <state_machine_run_s5_fail_safe+0x4c>)
 8002d10:	2205      	movs	r2, #5
 8002d12:	701a      	strb	r2, [r3, #0]
	return;
 8002d14:	bf00      	nop
}
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	08011dd4 	.word	0x08011dd4
 8002d20:	20000442 	.word	0x20000442
 8002d24:	20000443 	.word	0x20000443

08002d28 <lsd_transmit_usb>:
#include "MyDriversInc/lsd_common.h"

#include "MyServicesInc/distance_measurements.h"
#include "MyServicesInc/usb_transmission.h"

void lsd_transmit_usb( LSD_LOG_DATA_T *p_log ){
 8002d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d2c:	b0aa      	sub	sp, #168	@ 0xa8
 8002d2e:	af08      	add	r7, sp, #32
 8002d30:	6078      	str	r0, [r7, #4]
	char msg[128];

	snprintf( msg, 128, "temperature = %.2f [*C]\tcategory : %d\n",
			p_log->clim.temperature, p_log->clim.temperature_category );
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
	snprintf( msg, 128, "temperature = %.2f [*C]\tcategory : %d\n",
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd fb76 	bl	8000428 <__aeabi_f2d>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
			p_log->clim.temperature, p_log->clim.temperature_category );
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	7a09      	ldrb	r1, [r1, #8]
	snprintf( msg, 128, "temperature = %.2f [*C]\tcategory : %d\n",
 8002d44:	f107 0008 	add.w	r0, r7, #8
 8002d48:	9102      	str	r1, [sp, #8]
 8002d4a:	e9cd 2300 	strd	r2, r3, [sp]
 8002d4e:	4a76      	ldr	r2, [pc, #472]	@ (8002f28 <lsd_transmit_usb+0x200>)
 8002d50:	2180      	movs	r1, #128	@ 0x80
 8002d52:	f00c f83f 	bl	800edd4 <sniprintf>
	CDC_Transmit_FS( (uint8_t *) msg, strlen( msg ) );
 8002d56:	f107 0308 	add.w	r3, r7, #8
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fd f9f8 	bl	8000150 <strlen>
 8002d60:	4603      	mov	r3, r0
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	f107 0308 	add.w	r3, r7, #8
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f00a fe24 	bl	800d9b8 <CDC_Transmit_FS>

	snprintf( msg, 128, "humidity = %.2f [RH]\tcategory : %d\n",
			p_log->clim.humidity, p_log->clim.humidity_category );
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
	snprintf( msg, 128, "humidity = %.2f [RH]\tcategory : %d\n",
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd fb57 	bl	8000428 <__aeabi_f2d>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
			p_log->clim.humidity, p_log->clim.humidity_category );
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	7a49      	ldrb	r1, [r1, #9]
	snprintf( msg, 128, "humidity = %.2f [RH]\tcategory : %d\n",
 8002d82:	f107 0008 	add.w	r0, r7, #8
 8002d86:	9102      	str	r1, [sp, #8]
 8002d88:	e9cd 2300 	strd	r2, r3, [sp]
 8002d8c:	4a67      	ldr	r2, [pc, #412]	@ (8002f2c <lsd_transmit_usb+0x204>)
 8002d8e:	2180      	movs	r1, #128	@ 0x80
 8002d90:	f00c f820 	bl	800edd4 <sniprintf>
	CDC_Transmit_FS( (uint8_t *) msg, strlen( msg ) );
 8002d94:	f107 0308 	add.w	r3, r7, #8
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd f9d9 	bl	8000150 <strlen>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	f107 0308 	add.w	r3, r7, #8
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f00a fe05 	bl	800d9b8 <CDC_Transmit_FS>

	snprintf( msg, 128, "distance = %.2f [m]\tcategory : %d\n",
			p_log->dist.distance, p_log->dist.distance_category );
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
	snprintf( msg, 128, "distance = %.2f [m]\tcategory : %d\n",
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fb38 	bl	8000428 <__aeabi_f2d>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
			p_log->dist.distance, p_log->dist.distance_category );
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	7d09      	ldrb	r1, [r1, #20]
	snprintf( msg, 128, "distance = %.2f [m]\tcategory : %d\n",
 8002dc0:	f107 0008 	add.w	r0, r7, #8
 8002dc4:	9102      	str	r1, [sp, #8]
 8002dc6:	e9cd 2300 	strd	r2, r3, [sp]
 8002dca:	4a59      	ldr	r2, [pc, #356]	@ (8002f30 <lsd_transmit_usb+0x208>)
 8002dcc:	2180      	movs	r1, #128	@ 0x80
 8002dce:	f00c f801 	bl	800edd4 <sniprintf>
	CDC_Transmit_FS( (uint8_t *) msg, strlen( msg ) );
 8002dd2:	f107 0308 	add.w	r3, r7, #8
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fd f9ba 	bl	8000150 <strlen>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	f107 0308 	add.w	r3, r7, #8
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f00a fde6 	bl	800d9b8 <CDC_Transmit_FS>

	snprintf( msg, 128, "speed_of_sound = %.2f [m/s]\tcategory : %d\n",
			p_log->dist.speed_of_sound, p_log->dist.speed_of_sound_category );
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
	snprintf( msg, 128, "speed_of_sound = %.2f [m/s]\tcategory : %d\n",
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fb19 	bl	8000428 <__aeabi_f2d>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
			p_log->dist.speed_of_sound, p_log->dist.speed_of_sound_category );
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	7d49      	ldrb	r1, [r1, #21]
	snprintf( msg, 128, "speed_of_sound = %.2f [m/s]\tcategory : %d\n",
 8002dfe:	f107 0008 	add.w	r0, r7, #8
 8002e02:	9102      	str	r1, [sp, #8]
 8002e04:	e9cd 2300 	strd	r2, r3, [sp]
 8002e08:	4a4a      	ldr	r2, [pc, #296]	@ (8002f34 <lsd_transmit_usb+0x20c>)
 8002e0a:	2180      	movs	r1, #128	@ 0x80
 8002e0c:	f00b ffe2 	bl	800edd4 <sniprintf>
	CDC_Transmit_FS( (uint8_t *) msg, strlen( msg ) );
 8002e10:	f107 0308 	add.w	r3, r7, #8
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd f99b 	bl	8000150 <strlen>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	f107 0308 	add.w	r3, r7, #8
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f00a fdc7 	bl	800d9b8 <CDC_Transmit_FS>

	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7e1b      	ldrb	r3, [r3, #24]
 8002e2e:	b25b      	sxtb	r3, r3
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	da02      	bge.n	8002e3a <lsd_transmit_usb+0x112>
 8002e34:	f04f 0e31 	mov.w	lr, #49	@ 0x31
 8002e38:	e001      	b.n	8002e3e <lsd_transmit_usb+0x116>
 8002e3a:	f04f 0e30 	mov.w	lr, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7e1b      	ldrb	r3, [r3, #24]
 8002e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <lsd_transmit_usb+0x126>
 8002e4a:	2331      	movs	r3, #49	@ 0x31
 8002e4c:	e000      	b.n	8002e50 <lsd_transmit_usb+0x128>
 8002e4e:	2330      	movs	r3, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	7e12      	ldrb	r2, [r2, #24]
 8002e54:	f002 0220 	and.w	r2, r2, #32
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002e58:	2a00      	cmp	r2, #0
 8002e5a:	d001      	beq.n	8002e60 <lsd_transmit_usb+0x138>
 8002e5c:	2231      	movs	r2, #49	@ 0x31
 8002e5e:	e000      	b.n	8002e62 <lsd_transmit_usb+0x13a>
 8002e60:	2230      	movs	r2, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	7e09      	ldrb	r1, [r1, #24]
 8002e66:	f001 0110 	and.w	r1, r1, #16
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002e6a:	2900      	cmp	r1, #0
 8002e6c:	d001      	beq.n	8002e72 <lsd_transmit_usb+0x14a>
 8002e6e:	2131      	movs	r1, #49	@ 0x31
 8002e70:	e000      	b.n	8002e74 <lsd_transmit_usb+0x14c>
 8002e72:	2130      	movs	r1, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	7e00      	ldrb	r0, [r0, #24]
 8002e78:	f000 0008 	and.w	r0, r0, #8
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	d001      	beq.n	8002e84 <lsd_transmit_usb+0x15c>
 8002e80:	2031      	movs	r0, #49	@ 0x31
 8002e82:	e000      	b.n	8002e86 <lsd_transmit_usb+0x15e>
 8002e84:	2030      	movs	r0, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002e86:	687c      	ldr	r4, [r7, #4]
 8002e88:	7e24      	ldrb	r4, [r4, #24]
 8002e8a:	f004 0404 	and.w	r4, r4, #4
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002e8e:	2c00      	cmp	r4, #0
 8002e90:	d001      	beq.n	8002e96 <lsd_transmit_usb+0x16e>
 8002e92:	2431      	movs	r4, #49	@ 0x31
 8002e94:	e000      	b.n	8002e98 <lsd_transmit_usb+0x170>
 8002e96:	2430      	movs	r4, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002e98:	687d      	ldr	r5, [r7, #4]
 8002e9a:	7e2d      	ldrb	r5, [r5, #24]
 8002e9c:	f005 0502 	and.w	r5, r5, #2
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002ea0:	2d00      	cmp	r5, #0
 8002ea2:	d001      	beq.n	8002ea8 <lsd_transmit_usb+0x180>
 8002ea4:	2531      	movs	r5, #49	@ 0x31
 8002ea6:	e000      	b.n	8002eaa <lsd_transmit_usb+0x182>
 8002ea8:	2530      	movs	r5, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002eaa:	687e      	ldr	r6, [r7, #4]
 8002eac:	7e36      	ldrb	r6, [r6, #24]
 8002eae:	f006 0601 	and.w	r6, r6, #1
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002eb2:	2e00      	cmp	r6, #0
 8002eb4:	d001      	beq.n	8002eba <lsd_transmit_usb+0x192>
 8002eb6:	2631      	movs	r6, #49	@ 0x31
 8002eb8:	e000      	b.n	8002ebc <lsd_transmit_usb+0x194>
 8002eba:	2630      	movs	r6, #48	@ 0x30
			BYTE_TO_BINARY( p_log->errors ), ( p_log->transmitted ? "true" : "false" ) );
 8002ebc:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8002ec0:	f89c c019 	ldrb.w	ip, [ip, #25]
	snprintf( msg, 128, "errors : %c%c%c%c%c%c%c%c\ttransmitted : %s\n",
 8002ec4:	f1bc 0f00 	cmp.w	ip, #0
 8002ec8:	d004      	beq.n	8002ed4 <lsd_transmit_usb+0x1ac>
 8002eca:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 8002f38 <lsd_transmit_usb+0x210>
 8002ece:	f8c7 c000 	str.w	ip, [r7]
 8002ed2:	e003      	b.n	8002edc <lsd_transmit_usb+0x1b4>
 8002ed4:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8002f3c <lsd_transmit_usb+0x214>
 8002ed8:	f8c7 c000 	str.w	ip, [r7]
 8002edc:	f107 0c08 	add.w	ip, r7, #8
 8002ee0:	f8d7 8000 	ldr.w	r8, [r7]
 8002ee4:	f8cd 801c 	str.w	r8, [sp, #28]
 8002ee8:	9606      	str	r6, [sp, #24]
 8002eea:	9505      	str	r5, [sp, #20]
 8002eec:	9404      	str	r4, [sp, #16]
 8002eee:	9003      	str	r0, [sp, #12]
 8002ef0:	9102      	str	r1, [sp, #8]
 8002ef2:	9201      	str	r2, [sp, #4]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	4673      	mov	r3, lr
 8002ef8:	4a11      	ldr	r2, [pc, #68]	@ (8002f40 <lsd_transmit_usb+0x218>)
 8002efa:	2180      	movs	r1, #128	@ 0x80
 8002efc:	4660      	mov	r0, ip
 8002efe:	f00b ff69 	bl	800edd4 <sniprintf>
	CDC_Transmit_FS( (uint8_t *) msg, strlen( msg ) );
 8002f02:	f107 0308 	add.w	r3, r7, #8
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd f922 	bl	8000150 <strlen>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	f107 0308 	add.w	r3, r7, #8
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f00a fd4e 	bl	800d9b8 <CDC_Transmit_FS>

	return;
 8002f1c:	bf00      	nop
}
 8002f1e:	3788      	adds	r7, #136	@ 0x88
 8002f20:	46bd      	mov	sp, r7
 8002f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f26:	bf00      	nop
 8002f28:	08011de4 	.word	0x08011de4
 8002f2c:	08011e0c 	.word	0x08011e0c
 8002f30:	08011e30 	.word	0x08011e30
 8002f34:	08011e54 	.word	0x08011e54
 8002f38:	08011e80 	.word	0x08011e80
 8002f3c:	08011e88 	.word	0x08011e88
 8002f40:	08011e90 	.word	0x08011e90

08002f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f48:	f000 fdd2 	bl	8003af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f4c:	f000 f83a 	bl	8002fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f50:	f000 fa6e 	bl	8003430 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002f54:	f000 f928 	bl	80031a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002f58:	f000 f9a4 	bl	80032a4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002f5c:	f000 f892 	bl	8003084 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002f60:	f000 f9ee 	bl	8003340 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002f64:	f000 fa3a 	bl	80033dc <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002f68:	f000 f8ba 	bl	80030e0 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8002f6c:	f00a fc66 	bl	800d83c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  hmcu_peripherals.mcu_hi2c = &hi2c1;
 8002f70:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa4 <main+0x60>)
 8002f72:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa8 <main+0x64>)
 8002f74:	601a      	str	r2, [r3, #0]
  hmcu_peripherals.mcu_htim[LSD_TIM_GENERAL] = &htim2;
 8002f76:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <main+0x60>)
 8002f78:	4a0c      	ldr	r2, [pc, #48]	@ (8002fac <main+0x68>)
 8002f7a:	605a      	str	r2, [r3, #4]
  hmcu_peripherals.mcu_htim[LSD_TIM_COMMON] = &htim3;
 8002f7c:	4b09      	ldr	r3, [pc, #36]	@ (8002fa4 <main+0x60>)
 8002f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb0 <main+0x6c>)
 8002f80:	609a      	str	r2, [r3, #8]
  hmcu_peripherals.mcu_htim[LSD_TIM_SENSORS] = &htim4;
 8002f82:	4b08      	ldr	r3, [pc, #32]	@ (8002fa4 <main+0x60>)
 8002f84:	4a0b      	ldr	r2, [pc, #44]	@ (8002fb4 <main+0x70>)
 8002f86:	60da      	str	r2, [r3, #12]
  hmcu_peripherals.mcu_huart = &huart1;
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <main+0x60>)
 8002f8a:	4a0b      	ldr	r2, [pc, #44]	@ (8002fb8 <main+0x74>)
 8002f8c:	611a      	str	r2, [r3, #16]
  hmcu_peripherals.mcu_hrtc = &hrtc;
 8002f8e:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <main+0x60>)
 8002f90:	4a0a      	ldr	r2, [pc, #40]	@ (8002fbc <main+0x78>)
 8002f92:	615a      	str	r2, [r3, #20]

  state_machine_init( &hmcu_peripherals, &SystemClock_Config );
 8002f94:	490a      	ldr	r1, [pc, #40]	@ (8002fc0 <main+0x7c>)
 8002f96:	4803      	ldr	r0, [pc, #12]	@ (8002fa4 <main+0x60>)
 8002f98:	f7ff fcee 	bl	8002978 <state_machine_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	state_machine_run();
 8002f9c:	f7ff fd5a 	bl	8002a54 <state_machine_run>
 8002fa0:	e7fc      	b.n	8002f9c <main+0x58>
 8002fa2:	bf00      	nop
 8002fa4:	200017f8 	.word	0x200017f8
 8002fa8:	20001670 	.word	0x20001670
 8002fac:	200016d8 	.word	0x200016d8
 8002fb0:	20001720 	.word	0x20001720
 8002fb4:	20001768 	.word	0x20001768
 8002fb8:	200017b0 	.word	0x200017b0
 8002fbc:	200016c4 	.word	0x200016c4
 8002fc0:	08002fc5 	.word	0x08002fc5

08002fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b094      	sub	sp, #80	@ 0x50
 8002fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fce:	2228      	movs	r2, #40	@ 0x28
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f00b ff75 	bl	800eec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fd8:	f107 0314 	add.w	r3, r7, #20
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	605a      	str	r2, [r3, #4]
 8002ff0:	609a      	str	r2, [r3, #8]
 8002ff2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002ff4:	2309      	movs	r3, #9
 8002ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ff8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ffe:	2300      	movs	r3, #0
 8003000:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003002:	2301      	movs	r3, #1
 8003004:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003006:	2301      	movs	r3, #1
 8003008:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800300a:	2302      	movs	r3, #2
 800300c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800300e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003012:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8003014:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003018:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800301a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800301e:	4618      	mov	r0, r3
 8003020:	f003 ff32 	bl	8006e88 <HAL_RCC_OscConfig>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800302a:	f000 fa99 	bl	8003560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800302e:	230f      	movs	r3, #15
 8003030:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003032:	2301      	movs	r3, #1
 8003034:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800303a:	2300      	movs	r3, #0
 800303c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800303e:	2300      	movs	r3, #0
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003042:	f107 0314 	add.w	r3, r7, #20
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f004 f99f 	bl	800738c <HAL_RCC_ClockConfig>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003054:	f000 fa84 	bl	8003560 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8003058:	2311      	movs	r3, #17
 800305a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800305c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003060:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8003062:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003066:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003068:	1d3b      	adds	r3, r7, #4
 800306a:	4618      	mov	r0, r3
 800306c:	f004 fb1e 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003076:	f000 fa73 	bl	8003560 <Error_Handler>
  }
}
 800307a:	bf00      	nop
 800307c:	3750      	adds	r7, #80	@ 0x50
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003088:	4b12      	ldr	r3, [pc, #72]	@ (80030d4 <MX_I2C1_Init+0x50>)
 800308a:	4a13      	ldr	r2, [pc, #76]	@ (80030d8 <MX_I2C1_Init+0x54>)
 800308c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800308e:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <MX_I2C1_Init+0x50>)
 8003090:	4a12      	ldr	r2, [pc, #72]	@ (80030dc <MX_I2C1_Init+0x58>)
 8003092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003094:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <MX_I2C1_Init+0x50>)
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800309a:	4b0e      	ldr	r3, [pc, #56]	@ (80030d4 <MX_I2C1_Init+0x50>)
 800309c:	2200      	movs	r2, #0
 800309e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030a0:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <MX_I2C1_Init+0x50>)
 80030a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80030a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030a8:	4b0a      	ldr	r3, [pc, #40]	@ (80030d4 <MX_I2C1_Init+0x50>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80030ae:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <MX_I2C1_Init+0x50>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030b4:	4b07      	ldr	r3, [pc, #28]	@ (80030d4 <MX_I2C1_Init+0x50>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030ba:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <MX_I2C1_Init+0x50>)
 80030bc:	2200      	movs	r2, #0
 80030be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030c0:	4804      	ldr	r0, [pc, #16]	@ (80030d4 <MX_I2C1_Init+0x50>)
 80030c2:	f001 f8a7 	bl	8004214 <HAL_I2C_Init>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80030cc:	f000 fa48 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20001670 	.word	0x20001670
 80030d8:	40005400 	.word	0x40005400
 80030dc:	000186a0 	.word	0x000186a0

080030e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80030e6:	f107 030c 	add.w	r3, r7, #12
 80030ea:	2100      	movs	r1, #0
 80030ec:	460a      	mov	r2, r1
 80030ee:	801a      	strh	r2, [r3, #0]
 80030f0:	460a      	mov	r2, r1
 80030f2:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80030f4:	2300      	movs	r3, #0
 80030f6:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 80030f8:	463b      	mov	r3, r7
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003100:	4b27      	ldr	r3, [pc, #156]	@ (80031a0 <MX_RTC_Init+0xc0>)
 8003102:	4a28      	ldr	r2, [pc, #160]	@ (80031a4 <MX_RTC_Init+0xc4>)
 8003104:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8003106:	4b26      	ldr	r3, [pc, #152]	@ (80031a0 <MX_RTC_Init+0xc0>)
 8003108:	f04f 32ff 	mov.w	r2, #4294967295
 800310c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800310e:	4b24      	ldr	r3, [pc, #144]	@ (80031a0 <MX_RTC_Init+0xc0>)
 8003110:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003114:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003116:	4822      	ldr	r0, [pc, #136]	@ (80031a0 <MX_RTC_Init+0xc0>)
 8003118:	f004 fc34 	bl	8007984 <HAL_RTC_Init>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003122:	f000 fa1d 	bl	8003560 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003132:	f107 030c 	add.w	r3, r7, #12
 8003136:	2200      	movs	r2, #0
 8003138:	4619      	mov	r1, r3
 800313a:	4819      	ldr	r0, [pc, #100]	@ (80031a0 <MX_RTC_Init+0xc0>)
 800313c:	f004 fcae 	bl	8007a9c <HAL_RTC_SetTime>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8003146:	f000 fa0b 	bl	8003560 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800314a:	2301      	movs	r3, #1
 800314c:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800314e:	2301      	movs	r3, #1
 8003150:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 1;
 8003152:	2301      	movs	r3, #1
 8003154:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	2200      	movs	r2, #0
 8003160:	4619      	mov	r1, r3
 8003162:	480f      	ldr	r0, [pc, #60]	@ (80031a0 <MX_RTC_Init+0xc0>)
 8003164:	f004 fe0a 	bl	8007d7c <HAL_RTC_SetDate>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800316e:	f000 f9f7 	bl	8003560 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 10;
 800317a:	230a      	movs	r3, #10
 800317c:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003182:	463b      	mov	r3, r7
 8003184:	2200      	movs	r2, #0
 8003186:	4619      	mov	r1, r3
 8003188:	4805      	ldr	r0, [pc, #20]	@ (80031a0 <MX_RTC_Init+0xc0>)
 800318a:	f004 ff01 	bl	8007f90 <HAL_RTC_SetAlarm_IT>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8003194:	f000 f9e4 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	200016c4 	.word	0x200016c4
 80031a4:	40002800 	.word	0x40002800

080031a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08e      	sub	sp, #56	@ 0x38
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031bc:	f107 0320 	add.w	r3, r7, #32
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	611a      	str	r2, [r3, #16]
 80031d4:	615a      	str	r2, [r3, #20]
 80031d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031d8:	4b31      	ldr	r3, [pc, #196]	@ (80032a0 <MX_TIM2_Init+0xf8>)
 80031da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80031de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000 - 1;
 80031e0:	4b2f      	ldr	r3, [pc, #188]	@ (80032a0 <MX_TIM2_Init+0xf8>)
 80031e2:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80031e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e8:	4b2d      	ldr	r3, [pc, #180]	@ (80032a0 <MX_TIM2_Init+0xf8>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80031ee:	4b2c      	ldr	r3, [pc, #176]	@ (80032a0 <MX_TIM2_Init+0xf8>)
 80031f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f6:	4b2a      	ldr	r3, [pc, #168]	@ (80032a0 <MX_TIM2_Init+0xf8>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031fc:	4b28      	ldr	r3, [pc, #160]	@ (80032a0 <MX_TIM2_Init+0xf8>)
 80031fe:	2200      	movs	r2, #0
 8003200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003202:	4827      	ldr	r0, [pc, #156]	@ (80032a0 <MX_TIM2_Init+0xf8>)
 8003204:	f005 fa99 	bl	800873a <HAL_TIM_Base_Init>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800320e:	f000 f9a7 	bl	8003560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003212:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003216:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003218:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800321c:	4619      	mov	r1, r3
 800321e:	4820      	ldr	r0, [pc, #128]	@ (80032a0 <MX_TIM2_Init+0xf8>)
 8003220:	f005 fee2 	bl	8008fe8 <HAL_TIM_ConfigClockSource>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800322a:	f000 f999 	bl	8003560 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800322e:	481c      	ldr	r0, [pc, #112]	@ (80032a0 <MX_TIM2_Init+0xf8>)
 8003230:	f005 fb94 	bl	800895c <HAL_TIM_OC_Init>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800323a:	f000 f991 	bl	8003560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003242:	2300      	movs	r3, #0
 8003244:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003246:	f107 0320 	add.w	r3, r7, #32
 800324a:	4619      	mov	r1, r3
 800324c:	4814      	ldr	r0, [pc, #80]	@ (80032a0 <MX_TIM2_Init+0xf8>)
 800324e:	f006 fa67 	bl	8009720 <HAL_TIMEx_MasterConfigSynchronization>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003258:	f000 f982 	bl	8003560 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800325c:	2300      	movs	r3, #0
 800325e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800326c:	1d3b      	adds	r3, r7, #4
 800326e:	2200      	movs	r2, #0
 8003270:	4619      	mov	r1, r3
 8003272:	480b      	ldr	r0, [pc, #44]	@ (80032a0 <MX_TIM2_Init+0xf8>)
 8003274:	f005 fe5c 	bl	8008f30 <HAL_TIM_OC_ConfigChannel>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800327e:	f000 f96f 	bl	8003560 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	2204      	movs	r2, #4
 8003286:	4619      	mov	r1, r3
 8003288:	4805      	ldr	r0, [pc, #20]	@ (80032a0 <MX_TIM2_Init+0xf8>)
 800328a:	f005 fe51 	bl	8008f30 <HAL_TIM_OC_ConfigChannel>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003294:	f000 f964 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003298:	bf00      	nop
 800329a:	3738      	adds	r7, #56	@ 0x38
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	200016d8 	.word	0x200016d8

080032a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032aa:	f107 0308 	add.w	r3, r7, #8
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	609a      	str	r2, [r3, #8]
 80032b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032b8:	463b      	mov	r3, r7
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003338 <MX_TIM3_Init+0x94>)
 80032c2:	4a1e      	ldr	r2, [pc, #120]	@ (800333c <MX_TIM3_Init+0x98>)
 80032c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 80032c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003338 <MX_TIM3_Init+0x94>)
 80032c8:	220f      	movs	r2, #15
 80032ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003338 <MX_TIM3_Init+0x94>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80032d2:	4b19      	ldr	r3, [pc, #100]	@ (8003338 <MX_TIM3_Init+0x94>)
 80032d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032da:	4b17      	ldr	r3, [pc, #92]	@ (8003338 <MX_TIM3_Init+0x94>)
 80032dc:	2200      	movs	r2, #0
 80032de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032e0:	4b15      	ldr	r3, [pc, #84]	@ (8003338 <MX_TIM3_Init+0x94>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032e6:	4814      	ldr	r0, [pc, #80]	@ (8003338 <MX_TIM3_Init+0x94>)
 80032e8:	f005 fa27 	bl	800873a <HAL_TIM_Base_Init>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80032f2:	f000 f935 	bl	8003560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032fc:	f107 0308 	add.w	r3, r7, #8
 8003300:	4619      	mov	r1, r3
 8003302:	480d      	ldr	r0, [pc, #52]	@ (8003338 <MX_TIM3_Init+0x94>)
 8003304:	f005 fe70 	bl	8008fe8 <HAL_TIM_ConfigClockSource>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800330e:	f000 f927 	bl	8003560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003316:	2300      	movs	r3, #0
 8003318:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800331a:	463b      	mov	r3, r7
 800331c:	4619      	mov	r1, r3
 800331e:	4806      	ldr	r0, [pc, #24]	@ (8003338 <MX_TIM3_Init+0x94>)
 8003320:	f006 f9fe 	bl	8009720 <HAL_TIMEx_MasterConfigSynchronization>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800332a:	f000 f919 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800332e:	bf00      	nop
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20001720 	.word	0x20001720
 800333c:	40000400 	.word	0x40000400

08003340 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003346:	f107 0308 	add.w	r3, r7, #8
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	609a      	str	r2, [r3, #8]
 8003352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003354:	463b      	mov	r3, r7
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800335c:	4b1d      	ldr	r3, [pc, #116]	@ (80033d4 <MX_TIM4_Init+0x94>)
 800335e:	4a1e      	ldr	r2, [pc, #120]	@ (80033d8 <MX_TIM4_Init+0x98>)
 8003360:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16 - 1;
 8003362:	4b1c      	ldr	r3, [pc, #112]	@ (80033d4 <MX_TIM4_Init+0x94>)
 8003364:	220f      	movs	r2, #15
 8003366:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003368:	4b1a      	ldr	r3, [pc, #104]	@ (80033d4 <MX_TIM4_Init+0x94>)
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800336e:	4b19      	ldr	r3, [pc, #100]	@ (80033d4 <MX_TIM4_Init+0x94>)
 8003370:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003374:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003376:	4b17      	ldr	r3, [pc, #92]	@ (80033d4 <MX_TIM4_Init+0x94>)
 8003378:	2200      	movs	r2, #0
 800337a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800337c:	4b15      	ldr	r3, [pc, #84]	@ (80033d4 <MX_TIM4_Init+0x94>)
 800337e:	2200      	movs	r2, #0
 8003380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003382:	4814      	ldr	r0, [pc, #80]	@ (80033d4 <MX_TIM4_Init+0x94>)
 8003384:	f005 f9d9 	bl	800873a <HAL_TIM_Base_Init>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800338e:	f000 f8e7 	bl	8003560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003392:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003396:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003398:	f107 0308 	add.w	r3, r7, #8
 800339c:	4619      	mov	r1, r3
 800339e:	480d      	ldr	r0, [pc, #52]	@ (80033d4 <MX_TIM4_Init+0x94>)
 80033a0:	f005 fe22 	bl	8008fe8 <HAL_TIM_ConfigClockSource>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80033aa:	f000 f8d9 	bl	8003560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80033b6:	463b      	mov	r3, r7
 80033b8:	4619      	mov	r1, r3
 80033ba:	4806      	ldr	r0, [pc, #24]	@ (80033d4 <MX_TIM4_Init+0x94>)
 80033bc:	f006 f9b0 	bl	8009720 <HAL_TIMEx_MasterConfigSynchronization>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80033c6:	f000 f8cb 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80033ca:	bf00      	nop
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20001768 	.word	0x20001768
 80033d8:	40000800 	.word	0x40000800

080033dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033e0:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 80033e2:	4a12      	ldr	r2, [pc, #72]	@ (800342c <MX_USART1_UART_Init+0x50>)
 80033e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033e6:	4b10      	ldr	r3, [pc, #64]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 80033e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003400:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 8003402:	220c      	movs	r2, #12
 8003404:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003406:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 8003408:	2200      	movs	r2, #0
 800340a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800340c:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 800340e:	2200      	movs	r2, #0
 8003410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003412:	4805      	ldr	r0, [pc, #20]	@ (8003428 <MX_USART1_UART_Init+0x4c>)
 8003414:	f006 f9f4 	bl	8009800 <HAL_UART_Init>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800341e:	f000 f89f 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	200017b0 	.word	0x200017b0
 800342c:	40013800 	.word	0x40013800

08003430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003436:	f107 0310 	add.w	r3, r7, #16
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	605a      	str	r2, [r3, #4]
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003444:	4b42      	ldr	r3, [pc, #264]	@ (8003550 <MX_GPIO_Init+0x120>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	4a41      	ldr	r2, [pc, #260]	@ (8003550 <MX_GPIO_Init+0x120>)
 800344a:	f043 0310 	orr.w	r3, r3, #16
 800344e:	6193      	str	r3, [r2, #24]
 8003450:	4b3f      	ldr	r3, [pc, #252]	@ (8003550 <MX_GPIO_Init+0x120>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800345c:	4b3c      	ldr	r3, [pc, #240]	@ (8003550 <MX_GPIO_Init+0x120>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	4a3b      	ldr	r2, [pc, #236]	@ (8003550 <MX_GPIO_Init+0x120>)
 8003462:	f043 0320 	orr.w	r3, r3, #32
 8003466:	6193      	str	r3, [r2, #24]
 8003468:	4b39      	ldr	r3, [pc, #228]	@ (8003550 <MX_GPIO_Init+0x120>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003474:	4b36      	ldr	r3, [pc, #216]	@ (8003550 <MX_GPIO_Init+0x120>)
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	4a35      	ldr	r2, [pc, #212]	@ (8003550 <MX_GPIO_Init+0x120>)
 800347a:	f043 0308 	orr.w	r3, r3, #8
 800347e:	6193      	str	r3, [r2, #24]
 8003480:	4b33      	ldr	r3, [pc, #204]	@ (8003550 <MX_GPIO_Init+0x120>)
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800348c:	4b30      	ldr	r3, [pc, #192]	@ (8003550 <MX_GPIO_Init+0x120>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	4a2f      	ldr	r2, [pc, #188]	@ (8003550 <MX_GPIO_Init+0x120>)
 8003492:	f043 0304 	orr.w	r3, r3, #4
 8003496:	6193      	str	r3, [r2, #24]
 8003498:	4b2d      	ldr	r3, [pc, #180]	@ (8003550 <MX_GPIO_Init+0x120>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, US_TRIG_Pin|SENSOR_PWR_Pin, GPIO_PIN_RESET);
 80034a4:	2200      	movs	r2, #0
 80034a6:	2112      	movs	r1, #18
 80034a8:	482a      	ldr	r0, [pc, #168]	@ (8003554 <MX_GPIO_Init+0x124>)
 80034aa:	f000 fe82 	bl	80041b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(uLTE_PWR_GPIO_Port, uLTE_PWR_Pin, GPIO_PIN_SET);
 80034ae:	2201      	movs	r2, #1
 80034b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80034b4:	4827      	ldr	r0, [pc, #156]	@ (8003554 <MX_GPIO_Init+0x124>)
 80034b6:	f000 fe7c 	bl	80041b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_INFO1_Pin|LED_INFO2_Pin, GPIO_PIN_RESET);
 80034ba:	2200      	movs	r2, #0
 80034bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80034c0:	4825      	ldr	r0, [pc, #148]	@ (8003558 <MX_GPIO_Init+0x128>)
 80034c2:	f000 fe76 	bl	80041b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : US_ECHO_Pin */
  GPIO_InitStruct.Pin = US_ECHO_Pin;
 80034c6:	2301      	movs	r3, #1
 80034c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80034ca:	4b24      	ldr	r3, [pc, #144]	@ (800355c <MX_GPIO_Init+0x12c>)
 80034cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(US_ECHO_GPIO_Port, &GPIO_InitStruct);
 80034d2:	f107 0310 	add.w	r3, r7, #16
 80034d6:	4619      	mov	r1, r3
 80034d8:	481e      	ldr	r0, [pc, #120]	@ (8003554 <MX_GPIO_Init+0x124>)
 80034da:	f000 fccf 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : US_TRIG_Pin SENSOR_PWR_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin|SENSOR_PWR_Pin;
 80034de:	2312      	movs	r3, #18
 80034e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e2:	2301      	movs	r3, #1
 80034e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	2302      	movs	r3, #2
 80034ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ee:	f107 0310 	add.w	r3, r7, #16
 80034f2:	4619      	mov	r1, r3
 80034f4:	4817      	ldr	r0, [pc, #92]	@ (8003554 <MX_GPIO_Init+0x124>)
 80034f6:	f000 fcc1 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : uLTE_PWR_Pin */
  GPIO_InitStruct.Pin = uLTE_PWR_Pin;
 80034fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003500:	2301      	movs	r3, #1
 8003502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003504:	2301      	movs	r3, #1
 8003506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003508:	2302      	movs	r3, #2
 800350a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(uLTE_PWR_GPIO_Port, &GPIO_InitStruct);
 800350c:	f107 0310 	add.w	r3, r7, #16
 8003510:	4619      	mov	r1, r3
 8003512:	4810      	ldr	r0, [pc, #64]	@ (8003554 <MX_GPIO_Init+0x124>)
 8003514:	f000 fcb2 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INFO1_Pin LED_INFO2_Pin */
  GPIO_InitStruct.Pin = LED_INFO1_Pin|LED_INFO2_Pin;
 8003518:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800351c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800351e:	2301      	movs	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003526:	2302      	movs	r3, #2
 8003528:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800352a:	f107 0310 	add.w	r3, r7, #16
 800352e:	4619      	mov	r1, r3
 8003530:	4809      	ldr	r0, [pc, #36]	@ (8003558 <MX_GPIO_Init+0x128>)
 8003532:	f000 fca3 	bl	8003e7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003536:	2200      	movs	r2, #0
 8003538:	2100      	movs	r1, #0
 800353a:	2006      	movs	r0, #6
 800353c:	f000 fc59 	bl	8003df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003540:	2006      	movs	r0, #6
 8003542:	f000 fc72 	bl	8003e2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003546:	bf00      	nop
 8003548:	3720      	adds	r7, #32
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
 8003554:	40010c00 	.word	0x40010c00
 8003558:	40011000 	.word	0x40011000
 800355c:	10310000 	.word	0x10310000

08003560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003564:	b672      	cpsid	i
}
 8003566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003568:	bf00      	nop
 800356a:	e7fd      	b.n	8003568 <Error_Handler+0x8>

0800356c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003572:	4b19      	ldr	r3, [pc, #100]	@ (80035d8 <HAL_MspInit+0x6c>)
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	4a18      	ldr	r2, [pc, #96]	@ (80035d8 <HAL_MspInit+0x6c>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6193      	str	r3, [r2, #24]
 800357e:	4b16      	ldr	r3, [pc, #88]	@ (80035d8 <HAL_MspInit+0x6c>)
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800358a:	4b13      	ldr	r3, [pc, #76]	@ (80035d8 <HAL_MspInit+0x6c>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	4a12      	ldr	r2, [pc, #72]	@ (80035d8 <HAL_MspInit+0x6c>)
 8003590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003594:	61d3      	str	r3, [r2, #28]
 8003596:	4b10      	ldr	r3, [pc, #64]	@ (80035d8 <HAL_MspInit+0x6c>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800359e:	607b      	str	r3, [r7, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2100      	movs	r1, #0
 80035a6:	2001      	movs	r0, #1
 80035a8:	f000 fc23 	bl	8003df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80035ac:	2001      	movs	r0, #1
 80035ae:	f000 fc3c 	bl	8003e2a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80035b2:	4b0a      	ldr	r3, [pc, #40]	@ (80035dc <HAL_MspInit+0x70>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	4a04      	ldr	r2, [pc, #16]	@ (80035dc <HAL_MspInit+0x70>)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40010000 	.word	0x40010000

080035e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e8:	f107 0310 	add.w	r3, r7, #16
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a15      	ldr	r2, [pc, #84]	@ (8003650 <HAL_I2C_MspInit+0x70>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d123      	bne.n	8003648 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003600:	4b14      	ldr	r3, [pc, #80]	@ (8003654 <HAL_I2C_MspInit+0x74>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	4a13      	ldr	r2, [pc, #76]	@ (8003654 <HAL_I2C_MspInit+0x74>)
 8003606:	f043 0308 	orr.w	r3, r3, #8
 800360a:	6193      	str	r3, [r2, #24]
 800360c:	4b11      	ldr	r3, [pc, #68]	@ (8003654 <HAL_I2C_MspInit+0x74>)
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003618:	23c0      	movs	r3, #192	@ 0xc0
 800361a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800361c:	2312      	movs	r3, #18
 800361e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003620:	2303      	movs	r3, #3
 8003622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003624:	f107 0310 	add.w	r3, r7, #16
 8003628:	4619      	mov	r1, r3
 800362a:	480b      	ldr	r0, [pc, #44]	@ (8003658 <HAL_I2C_MspInit+0x78>)
 800362c:	f000 fc26 	bl	8003e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003630:	4b08      	ldr	r3, [pc, #32]	@ (8003654 <HAL_I2C_MspInit+0x74>)
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	4a07      	ldr	r2, [pc, #28]	@ (8003654 <HAL_I2C_MspInit+0x74>)
 8003636:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800363a:	61d3      	str	r3, [r2, #28]
 800363c:	4b05      	ldr	r3, [pc, #20]	@ (8003654 <HAL_I2C_MspInit+0x74>)
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003648:	bf00      	nop
 800364a:	3720      	adds	r7, #32
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40005400 	.word	0x40005400
 8003654:	40021000 	.word	0x40021000
 8003658:	40010c00 	.word	0x40010c00

0800365c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a13      	ldr	r2, [pc, #76]	@ (80036b8 <HAL_RTC_MspInit+0x5c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d120      	bne.n	80036b0 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800366e:	f003 fbb5 	bl	8006ddc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <HAL_RTC_MspInit+0x60>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	4a11      	ldr	r2, [pc, #68]	@ (80036bc <HAL_RTC_MspInit+0x60>)
 8003678:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800367c:	61d3      	str	r3, [r2, #28]
 800367e:	4b0f      	ldr	r3, [pc, #60]	@ (80036bc <HAL_RTC_MspInit+0x60>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800368a:	4b0d      	ldr	r3, [pc, #52]	@ (80036c0 <HAL_RTC_MspInit+0x64>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003690:	2200      	movs	r2, #0
 8003692:	2100      	movs	r1, #0
 8003694:	2003      	movs	r0, #3
 8003696:	f000 fbac 	bl	8003df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800369a:	2003      	movs	r0, #3
 800369c:	f000 fbc5 	bl	8003e2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2100      	movs	r1, #0
 80036a4:	2029      	movs	r0, #41	@ 0x29
 80036a6:	f000 fba4 	bl	8003df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80036aa:	2029      	movs	r0, #41	@ 0x29
 80036ac:	f000 fbbd 	bl	8003e2a <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80036b0:	bf00      	nop
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40002800 	.word	0x40002800
 80036bc:	40021000 	.word	0x40021000
 80036c0:	4242043c 	.word	0x4242043c

080036c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d4:	d114      	bne.n	8003700 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036d6:	4b26      	ldr	r3, [pc, #152]	@ (8003770 <HAL_TIM_Base_MspInit+0xac>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	4a25      	ldr	r2, [pc, #148]	@ (8003770 <HAL_TIM_Base_MspInit+0xac>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	61d3      	str	r3, [r2, #28]
 80036e2:	4b23      	ldr	r3, [pc, #140]	@ (8003770 <HAL_TIM_Base_MspInit+0xac>)
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80036ee:	2200      	movs	r2, #0
 80036f0:	2100      	movs	r1, #0
 80036f2:	201c      	movs	r0, #28
 80036f4:	f000 fb7d 	bl	8003df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036f8:	201c      	movs	r0, #28
 80036fa:	f000 fb96 	bl	8003e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80036fe:	e032      	b.n	8003766 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1b      	ldr	r2, [pc, #108]	@ (8003774 <HAL_TIM_Base_MspInit+0xb0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d114      	bne.n	8003734 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800370a:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <HAL_TIM_Base_MspInit+0xac>)
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	4a18      	ldr	r2, [pc, #96]	@ (8003770 <HAL_TIM_Base_MspInit+0xac>)
 8003710:	f043 0302 	orr.w	r3, r3, #2
 8003714:	61d3      	str	r3, [r2, #28]
 8003716:	4b16      	ldr	r3, [pc, #88]	@ (8003770 <HAL_TIM_Base_MspInit+0xac>)
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	201d      	movs	r0, #29
 8003728:	f000 fb63 	bl	8003df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800372c:	201d      	movs	r0, #29
 800372e:	f000 fb7c 	bl	8003e2a <HAL_NVIC_EnableIRQ>
}
 8003732:	e018      	b.n	8003766 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a0f      	ldr	r2, [pc, #60]	@ (8003778 <HAL_TIM_Base_MspInit+0xb4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d113      	bne.n	8003766 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800373e:	4b0c      	ldr	r3, [pc, #48]	@ (8003770 <HAL_TIM_Base_MspInit+0xac>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	4a0b      	ldr	r2, [pc, #44]	@ (8003770 <HAL_TIM_Base_MspInit+0xac>)
 8003744:	f043 0304 	orr.w	r3, r3, #4
 8003748:	61d3      	str	r3, [r2, #28]
 800374a:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <HAL_TIM_Base_MspInit+0xac>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003756:	2200      	movs	r2, #0
 8003758:	2100      	movs	r1, #0
 800375a:	201e      	movs	r0, #30
 800375c:	f000 fb49 	bl	8003df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003760:	201e      	movs	r0, #30
 8003762:	f000 fb62 	bl	8003e2a <HAL_NVIC_EnableIRQ>
}
 8003766:	bf00      	nop
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800

0800377c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003784:	f107 0310 	add.w	r3, r7, #16
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1c      	ldr	r2, [pc, #112]	@ (8003808 <HAL_UART_MspInit+0x8c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d131      	bne.n	8003800 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800379c:	4b1b      	ldr	r3, [pc, #108]	@ (800380c <HAL_UART_MspInit+0x90>)
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	4a1a      	ldr	r2, [pc, #104]	@ (800380c <HAL_UART_MspInit+0x90>)
 80037a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037a6:	6193      	str	r3, [r2, #24]
 80037a8:	4b18      	ldr	r3, [pc, #96]	@ (800380c <HAL_UART_MspInit+0x90>)
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b4:	4b15      	ldr	r3, [pc, #84]	@ (800380c <HAL_UART_MspInit+0x90>)
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	4a14      	ldr	r2, [pc, #80]	@ (800380c <HAL_UART_MspInit+0x90>)
 80037ba:	f043 0304 	orr.w	r3, r3, #4
 80037be:	6193      	str	r3, [r2, #24]
 80037c0:	4b12      	ldr	r3, [pc, #72]	@ (800380c <HAL_UART_MspInit+0x90>)
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80037cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d2:	2302      	movs	r3, #2
 80037d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037d6:	2303      	movs	r3, #3
 80037d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037da:	f107 0310 	add.w	r3, r7, #16
 80037de:	4619      	mov	r1, r3
 80037e0:	480b      	ldr	r0, [pc, #44]	@ (8003810 <HAL_UART_MspInit+0x94>)
 80037e2:	f000 fb4b 	bl	8003e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f4:	f107 0310 	add.w	r3, r7, #16
 80037f8:	4619      	mov	r1, r3
 80037fa:	4805      	ldr	r0, [pc, #20]	@ (8003810 <HAL_UART_MspInit+0x94>)
 80037fc:	f000 fb3e 	bl	8003e7c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003800:	bf00      	nop
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40013800 	.word	0x40013800
 800380c:	40021000 	.word	0x40021000
 8003810:	40010800 	.word	0x40010800

08003814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <NMI_Handler+0x4>

0800381c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003820:	bf00      	nop
 8003822:	e7fd      	b.n	8003820 <HardFault_Handler+0x4>

08003824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003828:	bf00      	nop
 800382a:	e7fd      	b.n	8003828 <MemManage_Handler+0x4>

0800382c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003830:	bf00      	nop
 8003832:	e7fd      	b.n	8003830 <BusFault_Handler+0x4>

08003834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003838:	bf00      	nop
 800383a:	e7fd      	b.n	8003838 <UsageFault_Handler+0x4>

0800383c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003864:	f000 f98a 	bl	8003b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003868:	bf00      	nop
 800386a:	bd80      	pop	{r7, pc}

0800386c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003870:	f003 faf2 	bl	8006e58 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}

08003878 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 800387c:	4802      	ldr	r0, [pc, #8]	@ (8003888 <RTC_IRQHandler+0x10>)
 800387e:	f004 ff13 	bl	80086a8 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	200016c4 	.word	0x200016c4

0800388c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(US_ECHO_Pin);
 8003890:	2001      	movs	r0, #1
 8003892:	f000 fca7 	bl	80041e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80038a0:	4802      	ldr	r0, [pc, #8]	@ (80038ac <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80038a2:	f001 fe4f 	bl	8005544 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	200024e0 	.word	0x200024e0

080038b0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80038b4:	4802      	ldr	r0, [pc, #8]	@ (80038c0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80038b6:	f001 fe45 	bl	8005544 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200024e0 	.word	0x200024e0

080038c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038c8:	4802      	ldr	r0, [pc, #8]	@ (80038d4 <TIM2_IRQHandler+0x10>)
 80038ca:	f005 fa41 	bl	8008d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200016d8 	.word	0x200016d8

080038d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038dc:	4802      	ldr	r0, [pc, #8]	@ (80038e8 <TIM3_IRQHandler+0x10>)
 80038de:	f005 fa37 	bl	8008d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20001720 	.word	0x20001720

080038ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80038f0:	4802      	ldr	r0, [pc, #8]	@ (80038fc <TIM4_IRQHandler+0x10>)
 80038f2:	f005 fa2d 	bl	8008d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20001768 	.word	0x20001768

08003900 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003904:	4802      	ldr	r0, [pc, #8]	@ (8003910 <RTC_Alarm_IRQHandler+0x10>)
 8003906:	f004 fbfb 	bl	8008100 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200016c4 	.word	0x200016c4

08003914 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return 1;
 8003918:	2301      	movs	r3, #1
}
 800391a:	4618      	mov	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr

08003922 <_kill>:

int _kill(int pid, int sig)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800392c:	f00b fb2c 	bl	800ef88 <__errno>
 8003930:	4603      	mov	r3, r0
 8003932:	2216      	movs	r2, #22
 8003934:	601a      	str	r2, [r3, #0]
  return -1;
 8003936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <_exit>:

void _exit (int status)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800394a:	f04f 31ff 	mov.w	r1, #4294967295
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ffe7 	bl	8003922 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003954:	bf00      	nop
 8003956:	e7fd      	b.n	8003954 <_exit+0x12>

08003958 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e00a      	b.n	8003980 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800396a:	f3af 8000 	nop.w
 800396e:	4601      	mov	r1, r0
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	60ba      	str	r2, [r7, #8]
 8003976:	b2ca      	uxtb	r2, r1
 8003978:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	3301      	adds	r3, #1
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	dbf0      	blt.n	800396a <_read+0x12>
  }

  return len;
 8003988:	687b      	ldr	r3, [r7, #4]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	e009      	b.n	80039b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	60ba      	str	r2, [r7, #8]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	3301      	adds	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	dbf1      	blt.n	80039a4 <_write+0x12>
  }
  return len;
 80039c0:	687b      	ldr	r3, [r7, #4]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <_close>:

int _close(int file)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr

080039e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039f0:	605a      	str	r2, [r3, #4]
  return 0;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr

080039fe <_isatty>:

int _isatty(int file)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a06:	2301      	movs	r3, #1
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b085      	sub	sp, #20
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
	...

08003a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a34:	4a14      	ldr	r2, [pc, #80]	@ (8003a88 <_sbrk+0x5c>)
 8003a36:	4b15      	ldr	r3, [pc, #84]	@ (8003a8c <_sbrk+0x60>)
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a40:	4b13      	ldr	r3, [pc, #76]	@ (8003a90 <_sbrk+0x64>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d102      	bne.n	8003a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a48:	4b11      	ldr	r3, [pc, #68]	@ (8003a90 <_sbrk+0x64>)
 8003a4a:	4a12      	ldr	r2, [pc, #72]	@ (8003a94 <_sbrk+0x68>)
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a4e:	4b10      	ldr	r3, [pc, #64]	@ (8003a90 <_sbrk+0x64>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d207      	bcs.n	8003a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a5c:	f00b fa94 	bl	800ef88 <__errno>
 8003a60:	4603      	mov	r3, r0
 8003a62:	220c      	movs	r2, #12
 8003a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6a:	e009      	b.n	8003a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a6c:	4b08      	ldr	r3, [pc, #32]	@ (8003a90 <_sbrk+0x64>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a72:	4b07      	ldr	r3, [pc, #28]	@ (8003a90 <_sbrk+0x64>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	4a05      	ldr	r2, [pc, #20]	@ (8003a90 <_sbrk+0x64>)
 8003a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20005000 	.word	0x20005000
 8003a8c:	00000400 	.word	0x00000400
 8003a90:	20001810 	.word	0x20001810
 8003a94:	20002b28 	.word	0x20002b28

08003a98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003aa4:	f7ff fff8 	bl	8003a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003aa8:	480b      	ldr	r0, [pc, #44]	@ (8003ad8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003aaa:	490c      	ldr	r1, [pc, #48]	@ (8003adc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003aac:	4a0c      	ldr	r2, [pc, #48]	@ (8003ae0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ab0:	e002      	b.n	8003ab8 <LoopCopyDataInit>

08003ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ab6:	3304      	adds	r3, #4

08003ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003abc:	d3f9      	bcc.n	8003ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003abe:	4a09      	ldr	r2, [pc, #36]	@ (8003ae4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003ac0:	4c09      	ldr	r4, [pc, #36]	@ (8003ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ac4:	e001      	b.n	8003aca <LoopFillZerobss>

08003ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ac8:	3204      	adds	r2, #4

08003aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003acc:	d3fb      	bcc.n	8003ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ace:	f00b fa61 	bl	800ef94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ad2:	f7ff fa37 	bl	8002f44 <main>
  bx lr
 8003ad6:	4770      	bx	lr
  ldr r0, =_sdata
 8003ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003adc:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8003ae0:	080122f0 	.word	0x080122f0
  ldr r2, =_sbss
 8003ae4:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8003ae8:	20002b24 	.word	0x20002b24

08003aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003aec:	e7fe      	b.n	8003aec <ADC1_2_IRQHandler>
	...

08003af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003af4:	4b08      	ldr	r3, [pc, #32]	@ (8003b18 <HAL_Init+0x28>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a07      	ldr	r2, [pc, #28]	@ (8003b18 <HAL_Init+0x28>)
 8003afa:	f043 0310 	orr.w	r3, r3, #16
 8003afe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b00:	2003      	movs	r0, #3
 8003b02:	f000 f96b 	bl	8003ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b06:	200f      	movs	r0, #15
 8003b08:	f000 f808 	bl	8003b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b0c:	f7ff fd2e 	bl	800356c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40022000 	.word	0x40022000

08003b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b24:	4b12      	ldr	r3, [pc, #72]	@ (8003b70 <HAL_InitTick+0x54>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b12      	ldr	r3, [pc, #72]	@ (8003b74 <HAL_InitTick+0x58>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 f991 	bl	8003e62 <HAL_SYSTICK_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e00e      	b.n	8003b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b0f      	cmp	r3, #15
 8003b4e:	d80a      	bhi.n	8003b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b50:	2200      	movs	r2, #0
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	f04f 30ff 	mov.w	r0, #4294967295
 8003b58:	f000 f94b 	bl	8003df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b5c:	4a06      	ldr	r2, [pc, #24]	@ (8003b78 <HAL_InitTick+0x5c>)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e000      	b.n	8003b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000000 	.word	0x20000000
 8003b74:	20000008 	.word	0x20000008
 8003b78:	20000004 	.word	0x20000004

08003b7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b80:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <HAL_IncTick+0x1c>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	4b05      	ldr	r3, [pc, #20]	@ (8003b9c <HAL_IncTick+0x20>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	4a03      	ldr	r2, [pc, #12]	@ (8003b9c <HAL_IncTick+0x20>)
 8003b8e:	6013      	str	r3, [r2, #0]
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	20000008 	.word	0x20000008
 8003b9c:	20001814 	.word	0x20001814

08003ba0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ba4:	4b02      	ldr	r3, [pc, #8]	@ (8003bb0 <HAL_GetTick+0x10>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr
 8003bb0:	20001814 	.word	0x20001814

08003bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bbc:	f7ff fff0 	bl	8003ba0 <HAL_GetTick>
 8003bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d005      	beq.n	8003bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bce:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf8 <HAL_Delay+0x44>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bda:	bf00      	nop
 8003bdc:	f7ff ffe0 	bl	8003ba0 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d8f7      	bhi.n	8003bdc <HAL_Delay+0x28>
  {
  }
}
 8003bec:	bf00      	nop
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000008 	.word	0x20000008

08003bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c40 <__NVIC_SetPriorityGrouping+0x44>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c18:	4013      	ands	r3, r2
 8003c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c2e:	4a04      	ldr	r2, [pc, #16]	@ (8003c40 <__NVIC_SetPriorityGrouping+0x44>)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	60d3      	str	r3, [r2, #12]
}
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c48:	4b04      	ldr	r3, [pc, #16]	@ (8003c5c <__NVIC_GetPriorityGrouping+0x18>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	0a1b      	lsrs	r3, r3, #8
 8003c4e:	f003 0307 	and.w	r3, r3, #7
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	db0b      	blt.n	8003c8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	f003 021f 	and.w	r2, r3, #31
 8003c78:	4906      	ldr	r1, [pc, #24]	@ (8003c94 <__NVIC_EnableIRQ+0x34>)
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	2001      	movs	r0, #1
 8003c82:	fa00 f202 	lsl.w	r2, r0, r2
 8003c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr
 8003c94:	e000e100 	.word	0xe000e100

08003c98 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	db12      	blt.n	8003cd0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	f003 021f 	and.w	r2, r3, #31
 8003cb0:	490a      	ldr	r1, [pc, #40]	@ (8003cdc <__NVIC_DisableIRQ+0x44>)
 8003cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2001      	movs	r0, #1
 8003cba:	fa00 f202 	lsl.w	r2, r0, r2
 8003cbe:	3320      	adds	r3, #32
 8003cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003cc4:	f3bf 8f4f 	dsb	sy
}
 8003cc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003cca:	f3bf 8f6f 	isb	sy
}
 8003cce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	e000e100 	.word	0xe000e100

08003ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	6039      	str	r1, [r7, #0]
 8003cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	db0a      	blt.n	8003d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	490c      	ldr	r1, [pc, #48]	@ (8003d2c <__NVIC_SetPriority+0x4c>)
 8003cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfe:	0112      	lsls	r2, r2, #4
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	440b      	add	r3, r1
 8003d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d08:	e00a      	b.n	8003d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	4908      	ldr	r1, [pc, #32]	@ (8003d30 <__NVIC_SetPriority+0x50>)
 8003d10:	79fb      	ldrb	r3, [r7, #7]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	3b04      	subs	r3, #4
 8003d18:	0112      	lsls	r2, r2, #4
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	761a      	strb	r2, [r3, #24]
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	e000e100 	.word	0xe000e100
 8003d30:	e000ed00 	.word	0xe000ed00

08003d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b089      	sub	sp, #36	@ 0x24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f1c3 0307 	rsb	r3, r3, #7
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	bf28      	it	cs
 8003d52:	2304      	movcs	r3, #4
 8003d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	2b06      	cmp	r3, #6
 8003d5c:	d902      	bls.n	8003d64 <NVIC_EncodePriority+0x30>
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	3b03      	subs	r3, #3
 8003d62:	e000      	b.n	8003d66 <NVIC_EncodePriority+0x32>
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d68:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43da      	mvns	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	401a      	ands	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	fa01 f303 	lsl.w	r3, r1, r3
 8003d86:	43d9      	mvns	r1, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d8c:	4313      	orrs	r3, r2
         );
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3724      	adds	r7, #36	@ 0x24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003da8:	d301      	bcc.n	8003dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003daa:	2301      	movs	r3, #1
 8003dac:	e00f      	b.n	8003dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dae:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd8 <SysTick_Config+0x40>)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003db6:	210f      	movs	r1, #15
 8003db8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbc:	f7ff ff90 	bl	8003ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dc0:	4b05      	ldr	r3, [pc, #20]	@ (8003dd8 <SysTick_Config+0x40>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dc6:	4b04      	ldr	r3, [pc, #16]	@ (8003dd8 <SysTick_Config+0x40>)
 8003dc8:	2207      	movs	r2, #7
 8003dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	e000e010 	.word	0xe000e010

08003ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff ff09 	bl	8003bfc <__NVIC_SetPriorityGrouping>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b086      	sub	sp, #24
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	4603      	mov	r3, r0
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e04:	f7ff ff1e 	bl	8003c44 <__NVIC_GetPriorityGrouping>
 8003e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	6978      	ldr	r0, [r7, #20]
 8003e10:	f7ff ff90 	bl	8003d34 <NVIC_EncodePriority>
 8003e14:	4602      	mov	r2, r0
 8003e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff ff5f 	bl	8003ce0 <__NVIC_SetPriority>
}
 8003e22:	bf00      	nop
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	4603      	mov	r3, r0
 8003e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff ff11 	bl	8003c60 <__NVIC_EnableIRQ>
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff ff1f 	bl	8003c98 <__NVIC_DisableIRQ>
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff ff94 	bl	8003d98 <SysTick_Config>
 8003e70:	4603      	mov	r3, r0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b08b      	sub	sp, #44	@ 0x2c
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e86:	2300      	movs	r3, #0
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e8e:	e169      	b.n	8004164 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e90:	2201      	movs	r2, #1
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	f040 8158 	bne.w	800415e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4a9a      	ldr	r2, [pc, #616]	@ (800411c <HAL_GPIO_Init+0x2a0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d05e      	beq.n	8003f76 <HAL_GPIO_Init+0xfa>
 8003eb8:	4a98      	ldr	r2, [pc, #608]	@ (800411c <HAL_GPIO_Init+0x2a0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d875      	bhi.n	8003faa <HAL_GPIO_Init+0x12e>
 8003ebe:	4a98      	ldr	r2, [pc, #608]	@ (8004120 <HAL_GPIO_Init+0x2a4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d058      	beq.n	8003f76 <HAL_GPIO_Init+0xfa>
 8003ec4:	4a96      	ldr	r2, [pc, #600]	@ (8004120 <HAL_GPIO_Init+0x2a4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d86f      	bhi.n	8003faa <HAL_GPIO_Init+0x12e>
 8003eca:	4a96      	ldr	r2, [pc, #600]	@ (8004124 <HAL_GPIO_Init+0x2a8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d052      	beq.n	8003f76 <HAL_GPIO_Init+0xfa>
 8003ed0:	4a94      	ldr	r2, [pc, #592]	@ (8004124 <HAL_GPIO_Init+0x2a8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d869      	bhi.n	8003faa <HAL_GPIO_Init+0x12e>
 8003ed6:	4a94      	ldr	r2, [pc, #592]	@ (8004128 <HAL_GPIO_Init+0x2ac>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d04c      	beq.n	8003f76 <HAL_GPIO_Init+0xfa>
 8003edc:	4a92      	ldr	r2, [pc, #584]	@ (8004128 <HAL_GPIO_Init+0x2ac>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d863      	bhi.n	8003faa <HAL_GPIO_Init+0x12e>
 8003ee2:	4a92      	ldr	r2, [pc, #584]	@ (800412c <HAL_GPIO_Init+0x2b0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d046      	beq.n	8003f76 <HAL_GPIO_Init+0xfa>
 8003ee8:	4a90      	ldr	r2, [pc, #576]	@ (800412c <HAL_GPIO_Init+0x2b0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d85d      	bhi.n	8003faa <HAL_GPIO_Init+0x12e>
 8003eee:	2b12      	cmp	r3, #18
 8003ef0:	d82a      	bhi.n	8003f48 <HAL_GPIO_Init+0xcc>
 8003ef2:	2b12      	cmp	r3, #18
 8003ef4:	d859      	bhi.n	8003faa <HAL_GPIO_Init+0x12e>
 8003ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8003efc <HAL_GPIO_Init+0x80>)
 8003ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efc:	08003f77 	.word	0x08003f77
 8003f00:	08003f51 	.word	0x08003f51
 8003f04:	08003f63 	.word	0x08003f63
 8003f08:	08003fa5 	.word	0x08003fa5
 8003f0c:	08003fab 	.word	0x08003fab
 8003f10:	08003fab 	.word	0x08003fab
 8003f14:	08003fab 	.word	0x08003fab
 8003f18:	08003fab 	.word	0x08003fab
 8003f1c:	08003fab 	.word	0x08003fab
 8003f20:	08003fab 	.word	0x08003fab
 8003f24:	08003fab 	.word	0x08003fab
 8003f28:	08003fab 	.word	0x08003fab
 8003f2c:	08003fab 	.word	0x08003fab
 8003f30:	08003fab 	.word	0x08003fab
 8003f34:	08003fab 	.word	0x08003fab
 8003f38:	08003fab 	.word	0x08003fab
 8003f3c:	08003fab 	.word	0x08003fab
 8003f40:	08003f59 	.word	0x08003f59
 8003f44:	08003f6d 	.word	0x08003f6d
 8003f48:	4a79      	ldr	r2, [pc, #484]	@ (8004130 <HAL_GPIO_Init+0x2b4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f4e:	e02c      	b.n	8003faa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	623b      	str	r3, [r7, #32]
          break;
 8003f56:	e029      	b.n	8003fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	623b      	str	r3, [r7, #32]
          break;
 8003f60:	e024      	b.n	8003fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	3308      	adds	r3, #8
 8003f68:	623b      	str	r3, [r7, #32]
          break;
 8003f6a:	e01f      	b.n	8003fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	330c      	adds	r3, #12
 8003f72:	623b      	str	r3, [r7, #32]
          break;
 8003f74:	e01a      	b.n	8003fac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d102      	bne.n	8003f84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f7e:	2304      	movs	r3, #4
 8003f80:	623b      	str	r3, [r7, #32]
          break;
 8003f82:	e013      	b.n	8003fac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d105      	bne.n	8003f98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f8c:	2308      	movs	r3, #8
 8003f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	611a      	str	r2, [r3, #16]
          break;
 8003f96:	e009      	b.n	8003fac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f98:	2308      	movs	r3, #8
 8003f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	615a      	str	r2, [r3, #20]
          break;
 8003fa2:	e003      	b.n	8003fac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	623b      	str	r3, [r7, #32]
          break;
 8003fa8:	e000      	b.n	8003fac <HAL_GPIO_Init+0x130>
          break;
 8003faa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2bff      	cmp	r3, #255	@ 0xff
 8003fb0:	d801      	bhi.n	8003fb6 <HAL_GPIO_Init+0x13a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	e001      	b.n	8003fba <HAL_GPIO_Init+0x13e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2bff      	cmp	r3, #255	@ 0xff
 8003fc0:	d802      	bhi.n	8003fc8 <HAL_GPIO_Init+0x14c>
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	e002      	b.n	8003fce <HAL_GPIO_Init+0x152>
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	3b08      	subs	r3, #8
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	210f      	movs	r1, #15
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	401a      	ands	r2, r3
 8003fe0:	6a39      	ldr	r1, [r7, #32]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80b1 	beq.w	800415e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8004134 <HAL_GPIO_Init+0x2b8>)
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	4a4c      	ldr	r2, [pc, #304]	@ (8004134 <HAL_GPIO_Init+0x2b8>)
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	6193      	str	r3, [r2, #24]
 8004008:	4b4a      	ldr	r3, [pc, #296]	@ (8004134 <HAL_GPIO_Init+0x2b8>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004014:	4a48      	ldr	r2, [pc, #288]	@ (8004138 <HAL_GPIO_Init+0x2bc>)
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	089b      	lsrs	r3, r3, #2
 800401a:	3302      	adds	r3, #2
 800401c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004020:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	220f      	movs	r2, #15
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4013      	ands	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a40      	ldr	r2, [pc, #256]	@ (800413c <HAL_GPIO_Init+0x2c0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d013      	beq.n	8004068 <HAL_GPIO_Init+0x1ec>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a3f      	ldr	r2, [pc, #252]	@ (8004140 <HAL_GPIO_Init+0x2c4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00d      	beq.n	8004064 <HAL_GPIO_Init+0x1e8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a3e      	ldr	r2, [pc, #248]	@ (8004144 <HAL_GPIO_Init+0x2c8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d007      	beq.n	8004060 <HAL_GPIO_Init+0x1e4>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a3d      	ldr	r2, [pc, #244]	@ (8004148 <HAL_GPIO_Init+0x2cc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d101      	bne.n	800405c <HAL_GPIO_Init+0x1e0>
 8004058:	2303      	movs	r3, #3
 800405a:	e006      	b.n	800406a <HAL_GPIO_Init+0x1ee>
 800405c:	2304      	movs	r3, #4
 800405e:	e004      	b.n	800406a <HAL_GPIO_Init+0x1ee>
 8004060:	2302      	movs	r3, #2
 8004062:	e002      	b.n	800406a <HAL_GPIO_Init+0x1ee>
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <HAL_GPIO_Init+0x1ee>
 8004068:	2300      	movs	r3, #0
 800406a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406c:	f002 0203 	and.w	r2, r2, #3
 8004070:	0092      	lsls	r2, r2, #2
 8004072:	4093      	lsls	r3, r2
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800407a:	492f      	ldr	r1, [pc, #188]	@ (8004138 <HAL_GPIO_Init+0x2bc>)
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	3302      	adds	r3, #2
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d006      	beq.n	80040a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004094:	4b2d      	ldr	r3, [pc, #180]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	492c      	ldr	r1, [pc, #176]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	4313      	orrs	r3, r2
 800409e:	608b      	str	r3, [r1, #8]
 80040a0:	e006      	b.n	80040b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80040a2:	4b2a      	ldr	r3, [pc, #168]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	4928      	ldr	r1, [pc, #160]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d006      	beq.n	80040ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80040bc:	4b23      	ldr	r3, [pc, #140]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	4922      	ldr	r1, [pc, #136]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60cb      	str	r3, [r1, #12]
 80040c8:	e006      	b.n	80040d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040ca:	4b20      	ldr	r3, [pc, #128]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	43db      	mvns	r3, r3
 80040d2:	491e      	ldr	r1, [pc, #120]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d006      	beq.n	80040f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040e4:	4b19      	ldr	r3, [pc, #100]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	4918      	ldr	r1, [pc, #96]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	604b      	str	r3, [r1, #4]
 80040f0:	e006      	b.n	8004100 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80040f2:	4b16      	ldr	r3, [pc, #88]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	4914      	ldr	r1, [pc, #80]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d021      	beq.n	8004150 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800410c:	4b0f      	ldr	r3, [pc, #60]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	490e      	ldr	r1, [pc, #56]	@ (800414c <HAL_GPIO_Init+0x2d0>)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	4313      	orrs	r3, r2
 8004116:	600b      	str	r3, [r1, #0]
 8004118:	e021      	b.n	800415e <HAL_GPIO_Init+0x2e2>
 800411a:	bf00      	nop
 800411c:	10320000 	.word	0x10320000
 8004120:	10310000 	.word	0x10310000
 8004124:	10220000 	.word	0x10220000
 8004128:	10210000 	.word	0x10210000
 800412c:	10120000 	.word	0x10120000
 8004130:	10110000 	.word	0x10110000
 8004134:	40021000 	.word	0x40021000
 8004138:	40010000 	.word	0x40010000
 800413c:	40010800 	.word	0x40010800
 8004140:	40010c00 	.word	0x40010c00
 8004144:	40011000 	.word	0x40011000
 8004148:	40011400 	.word	0x40011400
 800414c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004150:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <HAL_GPIO_Init+0x304>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	43db      	mvns	r3, r3
 8004158:	4909      	ldr	r1, [pc, #36]	@ (8004180 <HAL_GPIO_Init+0x304>)
 800415a:	4013      	ands	r3, r2
 800415c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004160:	3301      	adds	r3, #1
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416a:	fa22 f303 	lsr.w	r3, r2, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	f47f ae8e 	bne.w	8003e90 <HAL_GPIO_Init+0x14>
  }
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop
 8004178:	372c      	adds	r7, #44	@ 0x2c
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr
 8004180:	40010400 	.word	0x40010400

08004184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
 80041a0:	e001      	b.n	80041a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr

080041b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	460b      	mov	r3, r1
 80041bc:	807b      	strh	r3, [r7, #2]
 80041be:	4613      	mov	r3, r2
 80041c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041c2:	787b      	ldrb	r3, [r7, #1]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041c8:	887a      	ldrh	r2, [r7, #2]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80041ce:	e003      	b.n	80041d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041d0:	887b      	ldrh	r3, [r7, #2]
 80041d2:	041a      	lsls	r2, r3, #16
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	611a      	str	r2, [r3, #16]
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr
	...

080041e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041ee:	4b08      	ldr	r3, [pc, #32]	@ (8004210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	88fb      	ldrh	r3, [r7, #6]
 80041f4:	4013      	ands	r3, r2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d006      	beq.n	8004208 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041fa:	4a05      	ldr	r2, [pc, #20]	@ (8004210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041fc:	88fb      	ldrh	r3, [r7, #6]
 80041fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	4618      	mov	r0, r3
 8004204:	f7fd fc50 	bl	8001aa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40010400 	.word	0x40010400

08004214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e12b      	b.n	800447e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff f9d0 	bl	80035e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2224      	movs	r2, #36	@ 0x24
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004266:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004276:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004278:	f003 f9d2 	bl	8007620 <HAL_RCC_GetPCLK1Freq>
 800427c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	4a81      	ldr	r2, [pc, #516]	@ (8004488 <HAL_I2C_Init+0x274>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d807      	bhi.n	8004298 <HAL_I2C_Init+0x84>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4a80      	ldr	r2, [pc, #512]	@ (800448c <HAL_I2C_Init+0x278>)
 800428c:	4293      	cmp	r3, r2
 800428e:	bf94      	ite	ls
 8004290:	2301      	movls	r3, #1
 8004292:	2300      	movhi	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	e006      	b.n	80042a6 <HAL_I2C_Init+0x92>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4a7d      	ldr	r2, [pc, #500]	@ (8004490 <HAL_I2C_Init+0x27c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	bf94      	ite	ls
 80042a0:	2301      	movls	r3, #1
 80042a2:	2300      	movhi	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e0e7      	b.n	800447e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4a78      	ldr	r2, [pc, #480]	@ (8004494 <HAL_I2C_Init+0x280>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	0c9b      	lsrs	r3, r3, #18
 80042b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a6a      	ldr	r2, [pc, #424]	@ (8004488 <HAL_I2C_Init+0x274>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d802      	bhi.n	80042e8 <HAL_I2C_Init+0xd4>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	3301      	adds	r3, #1
 80042e6:	e009      	b.n	80042fc <HAL_I2C_Init+0xe8>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042ee:	fb02 f303 	mul.w	r3, r2, r3
 80042f2:	4a69      	ldr	r2, [pc, #420]	@ (8004498 <HAL_I2C_Init+0x284>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	099b      	lsrs	r3, r3, #6
 80042fa:	3301      	adds	r3, #1
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	430b      	orrs	r3, r1
 8004302:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800430e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	495c      	ldr	r1, [pc, #368]	@ (8004488 <HAL_I2C_Init+0x274>)
 8004318:	428b      	cmp	r3, r1
 800431a:	d819      	bhi.n	8004350 <HAL_I2C_Init+0x13c>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	1e59      	subs	r1, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	fbb1 f3f3 	udiv	r3, r1, r3
 800432a:	1c59      	adds	r1, r3, #1
 800432c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004330:	400b      	ands	r3, r1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_I2C_Init+0x138>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1e59      	subs	r1, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	fbb1 f3f3 	udiv	r3, r1, r3
 8004344:	3301      	adds	r3, #1
 8004346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434a:	e051      	b.n	80043f0 <HAL_I2C_Init+0x1dc>
 800434c:	2304      	movs	r3, #4
 800434e:	e04f      	b.n	80043f0 <HAL_I2C_Init+0x1dc>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d111      	bne.n	800437c <HAL_I2C_Init+0x168>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	1e58      	subs	r0, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6859      	ldr	r1, [r3, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	440b      	add	r3, r1
 8004366:	fbb0 f3f3 	udiv	r3, r0, r3
 800436a:	3301      	adds	r3, #1
 800436c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004370:	2b00      	cmp	r3, #0
 8004372:	bf0c      	ite	eq
 8004374:	2301      	moveq	r3, #1
 8004376:	2300      	movne	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	e012      	b.n	80043a2 <HAL_I2C_Init+0x18e>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	1e58      	subs	r0, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6859      	ldr	r1, [r3, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	0099      	lsls	r1, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004392:	3301      	adds	r3, #1
 8004394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004398:	2b00      	cmp	r3, #0
 800439a:	bf0c      	ite	eq
 800439c:	2301      	moveq	r3, #1
 800439e:	2300      	movne	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <HAL_I2C_Init+0x196>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e022      	b.n	80043f0 <HAL_I2C_Init+0x1dc>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10e      	bne.n	80043d0 <HAL_I2C_Init+0x1bc>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	1e58      	subs	r0, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6859      	ldr	r1, [r3, #4]
 80043ba:	460b      	mov	r3, r1
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	440b      	add	r3, r1
 80043c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c4:	3301      	adds	r3, #1
 80043c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043ce:	e00f      	b.n	80043f0 <HAL_I2C_Init+0x1dc>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1e58      	subs	r0, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6859      	ldr	r1, [r3, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	0099      	lsls	r1, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043e6:	3301      	adds	r3, #1
 80043e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	6809      	ldr	r1, [r1, #0]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69da      	ldr	r2, [r3, #28]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800441e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6911      	ldr	r1, [r2, #16]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68d2      	ldr	r2, [r2, #12]
 800442a:	4311      	orrs	r1, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6812      	ldr	r2, [r2, #0]
 8004430:	430b      	orrs	r3, r1
 8004432:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	000186a0 	.word	0x000186a0
 800448c:	001e847f 	.word	0x001e847f
 8004490:	003d08ff 	.word	0x003d08ff
 8004494:	431bde83 	.word	0x431bde83
 8004498:	10624dd3 	.word	0x10624dd3

0800449c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	461a      	mov	r2, r3
 80044a8:	460b      	mov	r3, r1
 80044aa:	817b      	strh	r3, [r7, #10]
 80044ac:	4613      	mov	r3, r2
 80044ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044b0:	f7ff fb76 	bl	8003ba0 <HAL_GetTick>
 80044b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b20      	cmp	r3, #32
 80044c0:	f040 80e0 	bne.w	8004684 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	2319      	movs	r3, #25
 80044ca:	2201      	movs	r2, #1
 80044cc:	4970      	ldr	r1, [pc, #448]	@ (8004690 <HAL_I2C_Master_Transmit+0x1f4>)
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fc9e 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044da:	2302      	movs	r3, #2
 80044dc:	e0d3      	b.n	8004686 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_I2C_Master_Transmit+0x50>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e0cc      	b.n	8004686 <HAL_I2C_Master_Transmit+0x1ea>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d007      	beq.n	8004512 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0201 	orr.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004520:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2221      	movs	r2, #33	@ 0x21
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2210      	movs	r2, #16
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	893a      	ldrh	r2, [r7, #8]
 8004542:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4a50      	ldr	r2, [pc, #320]	@ (8004694 <HAL_I2C_Master_Transmit+0x1f8>)
 8004552:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004554:	8979      	ldrh	r1, [r7, #10]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	6a3a      	ldr	r2, [r7, #32]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 fb08 	bl	8004b70 <I2C_MasterRequestWrite>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e08d      	b.n	8004686 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004580:	e066      	b.n	8004650 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	6a39      	ldr	r1, [r7, #32]
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fd5c 	bl	8005044 <I2C_WaitOnTXEFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00d      	beq.n	80045ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	2b04      	cmp	r3, #4
 8004598:	d107      	bne.n	80045aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e06b      	b.n	8004686 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b2:	781a      	ldrb	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d11b      	bne.n	8004624 <HAL_I2C_Master_Transmit+0x188>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d017      	beq.n	8004624 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	781a      	ldrb	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	6a39      	ldr	r1, [r7, #32]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fd53 	bl	80050d4 <I2C_WaitOnBTFFlagUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00d      	beq.n	8004650 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004638:	2b04      	cmp	r3, #4
 800463a:	d107      	bne.n	800464c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800464a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e01a      	b.n	8004686 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004654:	2b00      	cmp	r3, #0
 8004656:	d194      	bne.n	8004582 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e000      	b.n	8004686 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
  }
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	00100002 	.word	0x00100002
 8004694:	ffff0000 	.word	0xffff0000

08004698 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08c      	sub	sp, #48	@ 0x30
 800469c:	af02      	add	r7, sp, #8
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	607a      	str	r2, [r7, #4]
 80046a2:	461a      	mov	r2, r3
 80046a4:	460b      	mov	r3, r1
 80046a6:	817b      	strh	r3, [r7, #10]
 80046a8:	4613      	mov	r3, r2
 80046aa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046b0:	f7ff fa76 	bl	8003ba0 <HAL_GetTick>
 80046b4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b20      	cmp	r3, #32
 80046c0:	f040 824b 	bne.w	8004b5a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	2319      	movs	r3, #25
 80046ca:	2201      	movs	r2, #1
 80046cc:	497f      	ldr	r1, [pc, #508]	@ (80048cc <HAL_I2C_Master_Receive+0x234>)
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 fb9e 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80046da:	2302      	movs	r3, #2
 80046dc:	e23e      	b.n	8004b5c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_I2C_Master_Receive+0x54>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e237      	b.n	8004b5c <HAL_I2C_Master_Receive+0x4c4>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d007      	beq.n	8004712 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0201 	orr.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004720:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2222      	movs	r2, #34	@ 0x22
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2210      	movs	r2, #16
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	893a      	ldrh	r2, [r7, #8]
 8004742:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4a5f      	ldr	r2, [pc, #380]	@ (80048d0 <HAL_I2C_Master_Receive+0x238>)
 8004752:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004754:	8979      	ldrh	r1, [r7, #10]
 8004756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 fa8a 	bl	8004c74 <I2C_MasterRequestRead>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e1f8      	b.n	8004b5c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800476e:	2b00      	cmp	r3, #0
 8004770:	d113      	bne.n	800479a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004772:	2300      	movs	r3, #0
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e1cc      	b.n	8004b34 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d11e      	bne.n	80047e0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80047b2:	b672      	cpsid	i
}
 80047b4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b6:	2300      	movs	r3, #0
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80047dc:	b662      	cpsie	i
}
 80047de:	e035      	b.n	800484c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d11e      	bne.n	8004826 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80047f8:	b672      	cpsid	i
}
 80047fa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004820:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004822:	b662      	cpsie	i
}
 8004824:	e012      	b.n	800484c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004834:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004836:	2300      	movs	r3, #0
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800484c:	e172      	b.n	8004b34 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004852:	2b03      	cmp	r3, #3
 8004854:	f200 811f 	bhi.w	8004a96 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800485c:	2b01      	cmp	r3, #1
 800485e:	d123      	bne.n	80048a8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004862:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fc7d 	bl	8005164 <I2C_WaitOnRXNEFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e173      	b.n	8004b5c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048a6:	e145      	b.n	8004b34 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d152      	bne.n	8004956 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b6:	2200      	movs	r2, #0
 80048b8:	4906      	ldr	r1, [pc, #24]	@ (80048d4 <HAL_I2C_Master_Receive+0x23c>)
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 faa8 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d008      	beq.n	80048d8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e148      	b.n	8004b5c <HAL_I2C_Master_Receive+0x4c4>
 80048ca:	bf00      	nop
 80048cc:	00100002 	.word	0x00100002
 80048d0:	ffff0000 	.word	0xffff0000
 80048d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80048d8:	b672      	cpsid	i
}
 80048da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800491e:	b662      	cpsie	i
}
 8004920:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004954:	e0ee      	b.n	8004b34 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495c:	2200      	movs	r2, #0
 800495e:	4981      	ldr	r1, [pc, #516]	@ (8004b64 <HAL_I2C_Master_Receive+0x4cc>)
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fa55 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0f5      	b.n	8004b5c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800497e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004980:	b672      	cpsid	i
}
 8004982:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80049b6:	4b6c      	ldr	r3, [pc, #432]	@ (8004b68 <HAL_I2C_Master_Receive+0x4d0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	08db      	lsrs	r3, r3, #3
 80049bc:	4a6b      	ldr	r2, [pc, #428]	@ (8004b6c <HAL_I2C_Master_Receive+0x4d4>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	0a1a      	lsrs	r2, r3, #8
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	00da      	lsls	r2, r3, #3
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d118      	bne.n	8004a0e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	f043 0220 	orr.w	r2, r3, #32
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80049fe:	b662      	cpsie	i
}
 8004a00:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e0a6      	b.n	8004b5c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d1d9      	bne.n	80049d0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004a5e:	b662      	cpsie	i
}
 8004a60:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a94:	e04e      	b.n	8004b34 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 fb62 	bl	8005164 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e058      	b.n	8004b5c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691a      	ldr	r2, [r3, #16]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d124      	bne.n	8004b34 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d107      	bne.n	8004b02 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b00:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f47f ae88 	bne.w	800484e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	e000      	b.n	8004b5c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004b5a:	2302      	movs	r3, #2
  }
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3728      	adds	r7, #40	@ 0x28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	00010004 	.word	0x00010004
 8004b68:	20000000 	.word	0x20000000
 8004b6c:	14f8b589 	.word	0x14f8b589

08004b70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d006      	beq.n	8004b9a <I2C_MasterRequestWrite+0x2a>
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d003      	beq.n	8004b9a <I2C_MasterRequestWrite+0x2a>
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b98:	d108      	bne.n	8004bac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	e00b      	b.n	8004bc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb0:	2b12      	cmp	r3, #18
 8004bb2:	d107      	bne.n	8004bc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f91d 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00d      	beq.n	8004bf8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bea:	d103      	bne.n	8004bf4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bf2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e035      	b.n	8004c64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c00:	d108      	bne.n	8004c14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c02:	897b      	ldrh	r3, [r7, #10]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	461a      	mov	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c10:	611a      	str	r2, [r3, #16]
 8004c12:	e01b      	b.n	8004c4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c14:	897b      	ldrh	r3, [r7, #10]
 8004c16:	11db      	asrs	r3, r3, #7
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	f003 0306 	and.w	r3, r3, #6
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f063 030f 	orn	r3, r3, #15
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	490e      	ldr	r1, [pc, #56]	@ (8004c6c <I2C_MasterRequestWrite+0xfc>)
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f966 	bl	8004f04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e010      	b.n	8004c64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c42:	897b      	ldrh	r3, [r7, #10]
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	4907      	ldr	r1, [pc, #28]	@ (8004c70 <I2C_MasterRequestWrite+0x100>)
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f956 	bl	8004f04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	00010008 	.word	0x00010008
 8004c70:	00010002 	.word	0x00010002

08004c74 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	607a      	str	r2, [r7, #4]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	460b      	mov	r3, r1
 8004c82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c88:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c98:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d006      	beq.n	8004cae <I2C_MasterRequestRead+0x3a>
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d003      	beq.n	8004cae <I2C_MasterRequestRead+0x3a>
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cac:	d108      	bne.n	8004cc0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	e00b      	b.n	8004cd8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc4:	2b11      	cmp	r3, #17
 8004cc6:	d107      	bne.n	8004cd8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cd6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f893 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00d      	beq.n	8004d0c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cfe:	d103      	bne.n	8004d08 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e079      	b.n	8004e00 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d14:	d108      	bne.n	8004d28 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d16:	897b      	ldrh	r3, [r7, #10]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	611a      	str	r2, [r3, #16]
 8004d26:	e05f      	b.n	8004de8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d28:	897b      	ldrh	r3, [r7, #10]
 8004d2a:	11db      	asrs	r3, r3, #7
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	f003 0306 	and.w	r3, r3, #6
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	f063 030f 	orn	r3, r3, #15
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	4930      	ldr	r1, [pc, #192]	@ (8004e08 <I2C_MasterRequestRead+0x194>)
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f8dc 	bl	8004f04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e054      	b.n	8004e00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d56:	897b      	ldrh	r3, [r7, #10]
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	4929      	ldr	r1, [pc, #164]	@ (8004e0c <I2C_MasterRequestRead+0x198>)
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f8cc 	bl	8004f04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e044      	b.n	8004e00 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d76:	2300      	movs	r3, #0
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d9a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f831 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00d      	beq.n	8004dd0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dc2:	d103      	bne.n	8004dcc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dca:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e017      	b.n	8004e00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004dd0:	897b      	ldrh	r3, [r7, #10]
 8004dd2:	11db      	asrs	r3, r3, #7
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	f003 0306 	and.w	r3, r3, #6
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f063 030e 	orn	r3, r3, #14
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	4907      	ldr	r1, [pc, #28]	@ (8004e0c <I2C_MasterRequestRead+0x198>)
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f888 	bl	8004f04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	00010008 	.word	0x00010008
 8004e0c:	00010002 	.word	0x00010002

08004e10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e20:	e048      	b.n	8004eb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d044      	beq.n	8004eb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2a:	f7fe feb9 	bl	8003ba0 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d302      	bcc.n	8004e40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d139      	bne.n	8004eb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	0c1b      	lsrs	r3, r3, #16
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d10d      	bne.n	8004e66 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	43da      	mvns	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4013      	ands	r3, r2
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf0c      	ite	eq
 8004e5c:	2301      	moveq	r3, #1
 8004e5e:	2300      	movne	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	e00c      	b.n	8004e80 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	43da      	mvns	r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4013      	ands	r3, r2
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf0c      	ite	eq
 8004e78:	2301      	moveq	r3, #1
 8004e7a:	2300      	movne	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d116      	bne.n	8004eb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea0:	f043 0220 	orr.w	r2, r3, #32
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e023      	b.n	8004efc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	0c1b      	lsrs	r3, r3, #16
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d10d      	bne.n	8004eda <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	43da      	mvns	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf0c      	ite	eq
 8004ed0:	2301      	moveq	r3, #1
 8004ed2:	2300      	movne	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	e00c      	b.n	8004ef4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	43da      	mvns	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d093      	beq.n	8004e22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f12:	e071      	b.n	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f22:	d123      	bne.n	8004f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f58:	f043 0204 	orr.w	r2, r3, #4
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e067      	b.n	800503c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d041      	beq.n	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f74:	f7fe fe14 	bl	8003ba0 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d302      	bcc.n	8004f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d136      	bne.n	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	0c1b      	lsrs	r3, r3, #16
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d10c      	bne.n	8004fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	43da      	mvns	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bf14      	ite	ne
 8004fa6:	2301      	movne	r3, #1
 8004fa8:	2300      	moveq	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	e00b      	b.n	8004fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	43da      	mvns	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bf14      	ite	ne
 8004fc0:	2301      	movne	r3, #1
 8004fc2:	2300      	moveq	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d016      	beq.n	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe4:	f043 0220 	orr.w	r2, r3, #32
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e021      	b.n	800503c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	0c1b      	lsrs	r3, r3, #16
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d10c      	bne.n	800501c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	43da      	mvns	r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4013      	ands	r3, r2
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	bf14      	ite	ne
 8005014:	2301      	movne	r3, #1
 8005016:	2300      	moveq	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	e00b      	b.n	8005034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	43da      	mvns	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4013      	ands	r3, r2
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	bf14      	ite	ne
 800502e:	2301      	movne	r3, #1
 8005030:	2300      	moveq	r3, #0
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	f47f af6d 	bne.w	8004f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005050:	e034      	b.n	80050bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f8e3 	bl	800521e <I2C_IsAcknowledgeFailed>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e034      	b.n	80050cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005068:	d028      	beq.n	80050bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800506a:	f7fe fd99 	bl	8003ba0 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	429a      	cmp	r2, r3
 8005078:	d302      	bcc.n	8005080 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d11d      	bne.n	80050bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508a:	2b80      	cmp	r3, #128	@ 0x80
 800508c:	d016      	beq.n	80050bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a8:	f043 0220 	orr.w	r2, r3, #32
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e007      	b.n	80050cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c6:	2b80      	cmp	r3, #128	@ 0x80
 80050c8:	d1c3      	bne.n	8005052 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050e0:	e034      	b.n	800514c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f89b 	bl	800521e <I2C_IsAcknowledgeFailed>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e034      	b.n	800515c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d028      	beq.n	800514c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fa:	f7fe fd51 	bl	8003ba0 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	d302      	bcc.n	8005110 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d11d      	bne.n	800514c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b04      	cmp	r3, #4
 800511c:	d016      	beq.n	800514c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005138:	f043 0220 	orr.w	r2, r3, #32
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e007      	b.n	800515c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b04      	cmp	r3, #4
 8005158:	d1c3      	bne.n	80050e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005170:	e049      	b.n	8005206 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	2b10      	cmp	r3, #16
 800517e:	d119      	bne.n	80051b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0210 	mvn.w	r2, #16
 8005188:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e030      	b.n	8005216 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b4:	f7fe fcf4 	bl	8003ba0 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d302      	bcc.n	80051ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d11d      	bne.n	8005206 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d4:	2b40      	cmp	r3, #64	@ 0x40
 80051d6:	d016      	beq.n	8005206 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f2:	f043 0220 	orr.w	r2, r3, #32
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e007      	b.n	8005216 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005210:	2b40      	cmp	r3, #64	@ 0x40
 8005212:	d1ae      	bne.n	8005172 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005234:	d11b      	bne.n	800526e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800523e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525a:	f043 0204 	orr.w	r2, r3, #4
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr

0800527a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e0e8      	b.n	800545e <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d106      	bne.n	80052a6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f008 fcbd 	bl	800dc20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2203      	movs	r2, #3
 80052aa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f004 fba2 	bl	8009a02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3304      	adds	r3, #4
 80052c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052c8:	f004 fb78 	bl	80099bc <USB_CoreInit>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e0bf      	b.n	800545e <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2100      	movs	r1, #0
 80052e4:	4618      	mov	r0, r3
 80052e6:	f004 fba6 	bl	8009a36 <USB_SetCurrentMode>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e0b0      	b.n	800545e <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]
 8005300:	e03e      	b.n	8005380 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005302:	7bfa      	ldrb	r2, [r7, #15]
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	440b      	add	r3, r1
 8005310:	3311      	adds	r3, #17
 8005312:	2201      	movs	r2, #1
 8005314:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005316:	7bfa      	ldrb	r2, [r7, #15]
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	440b      	add	r3, r1
 8005324:	3310      	adds	r3, #16
 8005326:	7bfa      	ldrb	r2, [r7, #15]
 8005328:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800532a:	7bfa      	ldrb	r2, [r7, #15]
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	440b      	add	r3, r1
 8005338:	3313      	adds	r3, #19
 800533a:	2200      	movs	r2, #0
 800533c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800533e:	7bfa      	ldrb	r2, [r7, #15]
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	440b      	add	r3, r1
 800534c:	3320      	adds	r3, #32
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005352:	7bfa      	ldrb	r2, [r7, #15]
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	440b      	add	r3, r1
 8005360:	3324      	adds	r3, #36	@ 0x24
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005366:	7bfb      	ldrb	r3, [r7, #15]
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	440b      	add	r3, r1
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	3301      	adds	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	791b      	ldrb	r3, [r3, #4]
 8005384:	7bfa      	ldrb	r2, [r7, #15]
 8005386:	429a      	cmp	r2, r3
 8005388:	d3bb      	bcc.n	8005302 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800538a:	2300      	movs	r3, #0
 800538c:	73fb      	strb	r3, [r7, #15]
 800538e:	e044      	b.n	800541a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005390:	7bfa      	ldrb	r2, [r7, #15]
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	440b      	add	r3, r1
 800539e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80053a2:	2200      	movs	r2, #0
 80053a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80053a6:	7bfa      	ldrb	r2, [r7, #15]
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	440b      	add	r3, r1
 80053b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053b8:	7bfa      	ldrb	r2, [r7, #15]
 80053ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053bc:	7bfa      	ldrb	r2, [r7, #15]
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	440b      	add	r3, r1
 80053ca:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80053ce:	2200      	movs	r2, #0
 80053d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053d2:	7bfa      	ldrb	r2, [r7, #15]
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	440b      	add	r3, r1
 80053e0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053e8:	7bfa      	ldrb	r2, [r7, #15]
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	440b      	add	r3, r1
 80053f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053fe:	7bfa      	ldrb	r2, [r7, #15]
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	440b      	add	r3, r1
 800540c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	3301      	adds	r3, #1
 8005418:	73fb      	strb	r3, [r7, #15]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	791b      	ldrb	r3, [r3, #4]
 800541e:	7bfa      	ldrb	r2, [r7, #15]
 8005420:	429a      	cmp	r2, r3
 8005422:	d3b5      	bcc.n	8005390 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3304      	adds	r3, #4
 800542c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800542e:	f004 fb0e 	bl	8009a4e <USB_DevInit>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e00c      	b.n	800545e <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f006 fda3 	bl	800bfa2 <USB_DevDisconnect>

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e015      	b.n	80054a4 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2203      	movs	r2, #3
 800547c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4618      	mov	r0, r3
 8005486:	f006 fd59 	bl	800bf3c <USB_StopDevice>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e007      	b.n	80054a4 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f008 fbf1 	bl	800dc7c <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_PCD_Start+0x16>
 80054be:	2302      	movs	r3, #2
 80054c0:	e016      	b.n	80054f0 <HAL_PCD_Start+0x44>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f004 fa81 	bl	80099d6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80054d4:	2101      	movs	r1, #1
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f008 fe71 	bl	800e1be <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f006 fd54 	bl	800bf8e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_PCD_Stop+0x16>
 800550a:	2302      	movs	r3, #2
 800550c:	e016      	b.n	800553c <HAL_PCD_Stop+0x44>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f004 fa71 	bl	8009a02 <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 8005520:	2100      	movs	r1, #0
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f008 fe4b 	bl	800e1be <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4618      	mov	r0, r3
 800552e:	f006 fd38 	bl	800bfa2 <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4618      	mov	r0, r3
 8005552:	f006 fd30 	bl	800bfb6 <USB_ReadInterrupts>
 8005556:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fb1a 	bl	8005b9c <PCD_EP_ISR_Handler>

    return;
 8005568:	e119      	b.n	800579e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005570:	2b00      	cmp	r3, #0
 8005572:	d013      	beq.n	800559c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800557c:	b29a      	uxth	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005586:	b292      	uxth	r2, r2
 8005588:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f008 fbe8 	bl	800dd62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005592:	2100      	movs	r1, #0
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f905 	bl	80057a4 <HAL_PCD_SetAddress>

    return;
 800559a:	e100      	b.n	800579e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00c      	beq.n	80055c0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055b8:	b292      	uxth	r2, r2
 80055ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80055be:	e0ee      	b.n	800579e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00c      	beq.n	80055e4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055dc:	b292      	uxth	r2, r2
 80055de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80055e2:	e0dc      	b.n	800579e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d027      	beq.n	800563e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0204 	bic.w	r2, r2, #4
 8005600:	b292      	uxth	r2, r2
 8005602:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800560e:	b29a      	uxth	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0208 	bic.w	r2, r2, #8
 8005618:	b292      	uxth	r2, r2
 800561a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f008 fbd8 	bl	800ddd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800562c:	b29a      	uxth	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005636:	b292      	uxth	r2, r2
 8005638:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800563c:	e0af      	b.n	800579e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8083 	beq.w	8005750 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800564a:	2300      	movs	r3, #0
 800564c:	77fb      	strb	r3, [r7, #31]
 800564e:	e010      	b.n	8005672 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	7ffb      	ldrb	r3, [r7, #31]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	441a      	add	r2, r3
 800565c:	7ffb      	ldrb	r3, [r7, #31]
 800565e:	8812      	ldrh	r2, [r2, #0]
 8005660:	b292      	uxth	r2, r2
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	3320      	adds	r3, #32
 8005666:	443b      	add	r3, r7
 8005668:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800566c:	7ffb      	ldrb	r3, [r7, #31]
 800566e:	3301      	adds	r3, #1
 8005670:	77fb      	strb	r3, [r7, #31]
 8005672:	7ffb      	ldrb	r3, [r7, #31]
 8005674:	2b07      	cmp	r3, #7
 8005676:	d9eb      	bls.n	8005650 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005680:	b29a      	uxth	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	b292      	uxth	r2, r2
 800568c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005698:	b29a      	uxth	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0201 	bic.w	r2, r2, #1
 80056a2:	b292      	uxth	r2, r2
 80056a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80056a8:	bf00      	nop
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f6      	beq.n	80056aa <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056ce:	b292      	uxth	r2, r2
 80056d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80056d4:	2300      	movs	r3, #0
 80056d6:	77fb      	strb	r3, [r7, #31]
 80056d8:	e00f      	b.n	80056fa <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80056da:	7ffb      	ldrb	r3, [r7, #31]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6812      	ldr	r2, [r2, #0]
 80056e0:	4611      	mov	r1, r2
 80056e2:	7ffa      	ldrb	r2, [r7, #31]
 80056e4:	0092      	lsls	r2, r2, #2
 80056e6:	440a      	add	r2, r1
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	3320      	adds	r3, #32
 80056ec:	443b      	add	r3, r7
 80056ee:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80056f2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80056f4:	7ffb      	ldrb	r3, [r7, #31]
 80056f6:	3301      	adds	r3, #1
 80056f8:	77fb      	strb	r3, [r7, #31]
 80056fa:	7ffb      	ldrb	r3, [r7, #31]
 80056fc:	2b07      	cmp	r3, #7
 80056fe:	d9ec      	bls.n	80056da <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005708:	b29a      	uxth	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0208 	orr.w	r2, r2, #8
 8005712:	b292      	uxth	r2, r2
 8005714:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005720:	b29a      	uxth	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800572a:	b292      	uxth	r2, r2
 800572c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005738:	b29a      	uxth	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0204 	orr.w	r2, r2, #4
 8005742:	b292      	uxth	r2, r2
 8005744:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f008 fb29 	bl	800dda0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800574e:	e026      	b.n	800579e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00f      	beq.n	800577a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005762:	b29a      	uxth	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800576c:	b292      	uxth	r2, r2
 800576e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f008 fae7 	bl	800dd46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005778:	e011      	b.n	800579e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00c      	beq.n	800579e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800578c:	b29a      	uxth	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005796:	b292      	uxth	r2, r2
 8005798:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800579c:	bf00      	nop
  }
}
 800579e:	3720      	adds	r7, #32
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_PCD_SetAddress+0x1a>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e012      	b.n	80057e4 <HAL_PCD_SetAddress+0x40>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	78fa      	ldrb	r2, [r7, #3]
 80057ca:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	78fa      	ldrb	r2, [r7, #3]
 80057d2:	4611      	mov	r1, r2
 80057d4:	4618      	mov	r0, r3
 80057d6:	f006 fbc7 	bl	800bf68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	4608      	mov	r0, r1
 80057f6:	4611      	mov	r1, r2
 80057f8:	461a      	mov	r2, r3
 80057fa:	4603      	mov	r3, r0
 80057fc:	70fb      	strb	r3, [r7, #3]
 80057fe:	460b      	mov	r3, r1
 8005800:	803b      	strh	r3, [r7, #0]
 8005802:	4613      	mov	r3, r2
 8005804:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800580a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800580e:	2b00      	cmp	r3, #0
 8005810:	da0e      	bge.n	8005830 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	f003 0207 	and.w	r2, r3, #7
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	3310      	adds	r3, #16
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	4413      	add	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	705a      	strb	r2, [r3, #1]
 800582e:	e00e      	b.n	800584e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	f003 0207 	and.w	r2, r3, #7
 8005836:	4613      	mov	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	4413      	add	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	b2da      	uxtb	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800585a:	883a      	ldrh	r2, [r7, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	78ba      	ldrb	r2, [r7, #2]
 8005864:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005866:	78bb      	ldrb	r3, [r7, #2]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d102      	bne.n	8005872 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_PCD_EP_Open+0x94>
 800587c:	2302      	movs	r3, #2
 800587e:	e00e      	b.n	800589e <HAL_PCD_EP_Open+0xb2>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68f9      	ldr	r1, [r7, #12]
 800588e:	4618      	mov	r0, r3
 8005890:	f004 f8fa 	bl	8009a88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800589c:	7afb      	ldrb	r3, [r7, #11]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b084      	sub	sp, #16
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	460b      	mov	r3, r1
 80058b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	da0e      	bge.n	80058d8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058ba:	78fb      	ldrb	r3, [r7, #3]
 80058bc:	f003 0207 	and.w	r2, r3, #7
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	3310      	adds	r3, #16
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	4413      	add	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	705a      	strb	r2, [r3, #1]
 80058d6:	e00e      	b.n	80058f6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058d8:	78fb      	ldrb	r3, [r7, #3]
 80058da:	f003 0207 	and.w	r2, r3, #7
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	4413      	add	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80058f6:	78fb      	ldrb	r3, [r7, #3]
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_PCD_EP_Close+0x6a>
 800590c:	2302      	movs	r3, #2
 800590e:	e00e      	b.n	800592e <HAL_PCD_EP_Close+0x88>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68f9      	ldr	r1, [r7, #12]
 800591e:	4618      	mov	r0, r3
 8005920:	f004 fc72 	bl	800a208 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b086      	sub	sp, #24
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	603b      	str	r3, [r7, #0]
 8005942:	460b      	mov	r3, r1
 8005944:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005946:	7afb      	ldrb	r3, [r7, #11]
 8005948:	f003 0207 	and.w	r2, r3, #7
 800594c:	4613      	mov	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2200      	movs	r2, #0
 800596e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2200      	movs	r2, #0
 8005974:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005976:	7afb      	ldrb	r3, [r7, #11]
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	b2da      	uxtb	r2, r3
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6979      	ldr	r1, [r7, #20]
 8005988:	4618      	mov	r0, r3
 800598a:	f004 fe29 	bl	800a5e0 <USB_EPStartXfer>

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	f003 0207 	and.w	r2, r3, #7
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	440b      	add	r3, r1
 80059b6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80059ba:	681b      	ldr	r3, [r3, #0]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr

080059c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b086      	sub	sp, #24
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	60f8      	str	r0, [r7, #12]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
 80059d2:	460b      	mov	r3, r1
 80059d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059d6:	7afb      	ldrb	r3, [r7, #11]
 80059d8:	f003 0207 	and.w	r2, r3, #7
 80059dc:	4613      	mov	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	3310      	adds	r3, #16
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a12:	7afb      	ldrb	r3, [r7, #11]
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6979      	ldr	r1, [r7, #20]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f004 fddb 	bl	800a5e0 <USB_EPStartXfer>

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	7912      	ldrb	r2, [r2, #4]
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e04c      	b.n	8005aec <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	da0e      	bge.n	8005a78 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a5a:	78fb      	ldrb	r3, [r7, #3]
 8005a5c:	f003 0207 	and.w	r2, r3, #7
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	3310      	adds	r3, #16
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	705a      	strb	r2, [r3, #1]
 8005a76:	e00c      	b.n	8005a92 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a78:	78fa      	ldrb	r2, [r7, #3]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4413      	add	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_PCD_EP_SetStall+0x7e>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e01c      	b.n	8005aec <HAL_PCD_EP_SetStall+0xb8>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68f9      	ldr	r1, [r7, #12]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f006 f93e 	bl	800bd42 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d108      	bne.n	8005ae2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8005ada:	4619      	mov	r1, r3
 8005adc:	4610      	mov	r0, r2
 8005ade:	f006 fa79 	bl	800bfd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	7912      	ldrb	r2, [r2, #4]
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d901      	bls.n	8005b12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e040      	b.n	8005b94 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	da0e      	bge.n	8005b38 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	f003 0207 	and.w	r2, r3, #7
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	3310      	adds	r3, #16
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	705a      	strb	r2, [r3, #1]
 8005b36:	e00e      	b.n	8005b56 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b38:	78fb      	ldrb	r3, [r7, #3]
 8005b3a:	f003 0207 	and.w	r2, r3, #7
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <HAL_PCD_EP_ClrStall+0x82>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e00e      	b.n	8005b94 <HAL_PCD_EP_ClrStall+0xa0>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68f9      	ldr	r1, [r7, #12]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f006 f92c 	bl	800bde2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b096      	sub	sp, #88	@ 0x58
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005ba4:	e3bb      	b.n	800631e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005bae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005bb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005bc0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f040 8175 	bne.w	8005eb4 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005bca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005bce:	f003 0310 	and.w	r3, r3, #16
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d14e      	bne.n	8005c74 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005be6:	81fb      	strh	r3, [r7, #14]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	89fb      	ldrh	r3, [r7, #14]
 8005bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3310      	adds	r3, #16
 8005bfe:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	4413      	add	r3, r2
 8005c14:	3302      	adds	r3, #2
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6812      	ldr	r2, [r2, #0]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c2e:	695a      	ldr	r2, [r3, #20]
 8005c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	441a      	add	r2, r3
 8005c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c38:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f008 f868 	bl	800dd12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	7b5b      	ldrb	r3, [r3, #13]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 8368 	beq.w	800631e <PCD_EP_ISR_Handler+0x782>
 8005c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f040 8363 	bne.w	800631e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	7b5b      	ldrb	r3, [r3, #13]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	735a      	strb	r2, [r3, #13]
 8005c72:	e354      	b.n	800631e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005c7a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005c86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005c8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d034      	beq.n	8005cfc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	3306      	adds	r3, #6
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6812      	ldr	r2, [r2, #0]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cbc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f006 f9cf 	bl	800c074 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	823b      	strh	r3, [r7, #16]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	8a3a      	ldrh	r2, [r7, #16]
 8005cec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005cf0:	b292      	uxth	r2, r2
 8005cf2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f007 ffdf 	bl	800dcb8 <HAL_PCD_SetupStageCallback>
 8005cfa:	e310      	b.n	800631e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005cfc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f280 830c 	bge.w	800631e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005d12:	4013      	ands	r3, r2
 8005d14:	83fb      	strh	r3, [r7, #30]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	8bfa      	ldrh	r2, [r7, #30]
 8005d1c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d20:	b292      	uxth	r2, r2
 8005d22:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	461a      	mov	r2, r3
 8005d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	4413      	add	r3, r2
 8005d38:	3306      	adds	r3, #6
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6812      	ldr	r2, [r2, #0]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d4e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d019      	beq.n	8005d8c <PCD_EP_ISR_Handler+0x1f0>
 8005d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d015      	beq.n	8005d8c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d66:	6959      	ldr	r1, [r3, #20]
 8005d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d6a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d6e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	f006 f97f 	bl	800c074 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	441a      	add	r2, r3
 8005d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d82:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005d84:	2100      	movs	r1, #0
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f007 ffa8 	bl	800dcdc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005d96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005d9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f040 82bd 	bne.w	800631e <PCD_EP_ISR_Handler+0x782>
 8005da4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005da8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005dac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005db0:	f000 82b5 	beq.w	800631e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	4413      	add	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005dea:	d91d      	bls.n	8005e28 <PCD_EP_ISR_Handler+0x28c>
 8005dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f003 031f 	and.w	r3, r3, #31
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d102      	bne.n	8005e06 <PCD_EP_ISR_Handler+0x26a>
 8005e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e02:	3b01      	subs	r3, #1
 8005e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	029b      	lsls	r3, r3, #10
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	4313      	orrs	r3, r2
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	801a      	strh	r2, [r3, #0]
 8005e26:	e026      	b.n	8005e76 <PCD_EP_ISR_Handler+0x2da>
 8005e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <PCD_EP_ISR_Handler+0x2aa>
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	801a      	strh	r2, [r3, #0]
 8005e44:	e017      	b.n	8005e76 <PCD_EP_ISR_Handler+0x2da>
 8005e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	085b      	lsrs	r3, r3, #1
 8005e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <PCD_EP_ISR_Handler+0x2c4>
 8005e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	029b      	lsls	r3, r3, #10
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e86:	827b      	strh	r3, [r7, #18]
 8005e88:	8a7b      	ldrh	r3, [r7, #18]
 8005e8a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005e8e:	827b      	strh	r3, [r7, #18]
 8005e90:	8a7b      	ldrh	r3, [r7, #18]
 8005e92:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e96:	827b      	strh	r3, [r7, #18]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	8a7b      	ldrh	r3, [r7, #18]
 8005e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	8013      	strh	r3, [r2, #0]
 8005eb2:	e234      	b.n	800631e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005ec8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f280 80fc 	bge.w	80060ca <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005ee8:	4013      	ands	r3, r2
 8005eea:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005f00:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005f04:	b292      	uxth	r2, r2
 8005f06:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005f08:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f20:	7b1b      	ldrb	r3, [r3, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d125      	bne.n	8005f72 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	4413      	add	r3, r2
 8005f3a:	3306      	adds	r3, #6
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f4e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8005f52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 8092 	beq.w	8006080 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6818      	ldr	r0, [r3, #0]
 8005f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f62:	6959      	ldr	r1, [r3, #20]
 8005f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f66:	88da      	ldrh	r2, [r3, #6]
 8005f68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005f6c:	f006 f882 	bl	800c074 <USB_ReadPMA>
 8005f70:	e086      	b.n	8006080 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f74:	78db      	ldrb	r3, [r3, #3]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d10a      	bne.n	8005f90 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005f7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005f7e:	461a      	mov	r2, r3
 8005f80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f9d9 	bl	800633a <HAL_PCD_EP_DB_Receive>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005f8e:	e077      	b.n	8006080 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005faa:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	441a      	add	r2, r3
 8005fbc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005fc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fcc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d024      	beq.n	8006038 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	4413      	add	r3, r2
 8006002:	3302      	adds	r3, #2
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006016:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800601a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800601e:	2b00      	cmp	r3, #0
 8006020:	d02e      	beq.n	8006080 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006028:	6959      	ldr	r1, [r3, #20]
 800602a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800602c:	891a      	ldrh	r2, [r3, #8]
 800602e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006032:	f006 f81f 	bl	800c074 <USB_ReadPMA>
 8006036:	e023      	b.n	8006080 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006040:	b29b      	uxth	r3, r3
 8006042:	461a      	mov	r2, r3
 8006044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	4413      	add	r3, r2
 800604c:	3306      	adds	r3, #6
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6812      	ldr	r2, [r2, #0]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006060:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8006064:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006068:	2b00      	cmp	r3, #0
 800606a:	d009      	beq.n	8006080 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006072:	6959      	ldr	r1, [r3, #20]
 8006074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006076:	895a      	ldrh	r2, [r3, #10]
 8006078:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800607c:	f005 fffa 	bl	800c074 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006082:	69da      	ldr	r2, [r3, #28]
 8006084:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006088:	441a      	add	r2, r3
 800608a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800608c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800608e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006090:	695a      	ldr	r2, [r3, #20]
 8006092:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006096:	441a      	add	r2, r3
 8006098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800609a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800609c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d005      	beq.n	80060b0 <PCD_EP_ISR_Handler+0x514>
 80060a4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80060a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d206      	bcs.n	80060be <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80060b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f007 fe10 	bl	800dcdc <HAL_PCD_DataOutStageCallback>
 80060bc:	e005      	b.n	80060ca <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060c4:	4618      	mov	r0, r3
 80060c6:	f004 fa8b 	bl	800a5e0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80060ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80060ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 8123 	beq.w	800631e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80060d8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80060dc:	4613      	mov	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	3310      	adds	r3, #16
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	4413      	add	r3, r2
 80060ea:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	461a      	mov	r2, r3
 80060f2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006106:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	441a      	add	r2, r3
 8006118:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800611c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006124:	b29b      	uxth	r3, r3
 8006126:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800612a:	78db      	ldrb	r3, [r3, #3]
 800612c:	2b01      	cmp	r3, #1
 800612e:	f040 80a2 	bne.w	8006276 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8006132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006134:	2200      	movs	r2, #0
 8006136:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800613a:	7b1b      	ldrb	r3, [r3, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8093 	beq.w	8006268 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006142:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800614a:	2b00      	cmp	r3, #0
 800614c:	d046      	beq.n	80061dc <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800614e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d126      	bne.n	80061a4 <PCD_EP_ISR_Handler+0x608>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	627b      	str	r3, [r7, #36]	@ 0x24
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006164:	b29b      	uxth	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616a:	4413      	add	r3, r2
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
 800616e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	011a      	lsls	r2, r3, #4
 8006174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006176:	4413      	add	r3, r2
 8006178:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800617c:	623b      	str	r3, [r7, #32]
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006188:	b29a      	uxth	r2, r3
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800619c:	b29a      	uxth	r2, r3
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	801a      	strh	r2, [r3, #0]
 80061a2:	e061      	b.n	8006268 <PCD_EP_ISR_Handler+0x6cc>
 80061a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a6:	785b      	ldrb	r3, [r3, #1]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d15d      	bne.n	8006268 <PCD_EP_ISR_Handler+0x6cc>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c0:	4413      	add	r3, r2
 80061c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	011a      	lsls	r2, r3, #4
 80061ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061cc:	4413      	add	r3, r2
 80061ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d6:	2200      	movs	r2, #0
 80061d8:	801a      	strh	r2, [r3, #0]
 80061da:	e045      	b.n	8006268 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d126      	bne.n	8006238 <PCD_EP_ISR_Handler+0x69c>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061fe:	4413      	add	r3, r2
 8006200:	637b      	str	r3, [r7, #52]	@ 0x34
 8006202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	011a      	lsls	r2, r3, #4
 8006208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620a:	4413      	add	r3, r2
 800620c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006210:	633b      	str	r3, [r7, #48]	@ 0x30
 8006212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800621c:	b29a      	uxth	r2, r3
 800621e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006220:	801a      	strh	r2, [r3, #0]
 8006222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800622c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006230:	b29a      	uxth	r2, r3
 8006232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	e017      	b.n	8006268 <PCD_EP_ISR_Handler+0x6cc>
 8006238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800623a:	785b      	ldrb	r3, [r3, #1]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d113      	bne.n	8006268 <PCD_EP_ISR_Handler+0x6cc>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006248:	b29b      	uxth	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800624e:	4413      	add	r3, r2
 8006250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	011a      	lsls	r2, r3, #4
 8006258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800625a:	4413      	add	r3, r2
 800625c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006260:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006264:	2200      	movs	r2, #0
 8006266:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f007 fd4f 	bl	800dd12 <HAL_PCD_DataInStageCallback>
 8006274:	e053      	b.n	800631e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006276:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800627a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800627e:	2b00      	cmp	r3, #0
 8006280:	d146      	bne.n	8006310 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800628a:	b29b      	uxth	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	4413      	add	r3, r2
 8006296:	3302      	adds	r3, #2
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6812      	ldr	r2, [r2, #0]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062aa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80062ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d907      	bls.n	80062ca <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80062ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80062c2:	1ad2      	subs	r2, r2, r3
 80062c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062c6:	619a      	str	r2, [r3, #24]
 80062c8:	e002      	b.n	80062d0 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80062ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062cc:	2200      	movs	r2, #0
 80062ce:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80062d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d106      	bne.n	80062e6 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80062d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f007 fd17 	bl	800dd12 <HAL_PCD_DataInStageCallback>
 80062e4:	e01b      	b.n	800631e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80062e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062e8:	695a      	ldr	r2, [r3, #20]
 80062ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80062ee:	441a      	add	r2, r3
 80062f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062f2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80062f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062f6:	69da      	ldr	r2, [r3, #28]
 80062f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80062fc:	441a      	add	r2, r3
 80062fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006300:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006308:	4618      	mov	r0, r3
 800630a:	f004 f969 	bl	800a5e0 <USB_EPStartXfer>
 800630e:	e006      	b.n	800631e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006310:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006314:	461a      	mov	r2, r3
 8006316:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f91b 	bl	8006554 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006326:	b29b      	uxth	r3, r3
 8006328:	b21b      	sxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	f6ff ac3b 	blt.w	8005ba6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3758      	adds	r7, #88	@ 0x58
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b088      	sub	sp, #32
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	4613      	mov	r3, r2
 8006346:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006348:	88fb      	ldrh	r3, [r7, #6]
 800634a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d07e      	beq.n	8006450 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800635a:	b29b      	uxth	r3, r3
 800635c:	461a      	mov	r2, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	4413      	add	r3, r2
 8006366:	3302      	adds	r3, #2
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800637a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	699a      	ldr	r2, [r3, #24]
 8006380:	8b7b      	ldrh	r3, [r7, #26]
 8006382:	429a      	cmp	r2, r3
 8006384:	d306      	bcc.n	8006394 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	8b7b      	ldrh	r3, [r7, #26]
 800638c:	1ad2      	subs	r2, r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	619a      	str	r2, [r3, #24]
 8006392:	e002      	b.n	800639a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2200      	movs	r2, #0
 8006398:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d123      	bne.n	80063ea <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063bc:	833b      	strh	r3, [r7, #24]
 80063be:	8b3b      	ldrh	r3, [r7, #24]
 80063c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80063c4:	833b      	strh	r3, [r7, #24]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	441a      	add	r2, r3
 80063d4:	8b3b      	ldrh	r3, [r7, #24]
 80063d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80063ea:	88fb      	ldrh	r3, [r7, #6]
 80063ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01f      	beq.n	8006434 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	461a      	mov	r2, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b29b      	uxth	r3, r3
 8006406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800640a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640e:	82fb      	strh	r3, [r7, #22]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	441a      	add	r2, r3
 800641e:	8afb      	ldrh	r3, [r7, #22]
 8006420:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006424:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800642c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006430:	b29b      	uxth	r3, r3
 8006432:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006434:	8b7b      	ldrh	r3, [r7, #26]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 8087 	beq.w	800654a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6818      	ldr	r0, [r3, #0]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6959      	ldr	r1, [r3, #20]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	891a      	ldrh	r2, [r3, #8]
 8006448:	8b7b      	ldrh	r3, [r7, #26]
 800644a:	f005 fe13 	bl	800c074 <USB_ReadPMA>
 800644e:	e07c      	b.n	800654a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006458:	b29b      	uxth	r3, r3
 800645a:	461a      	mov	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	4413      	add	r3, r2
 8006464:	3306      	adds	r3, #6
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	6812      	ldr	r2, [r2, #0]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006478:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	699a      	ldr	r2, [r3, #24]
 800647e:	8b7b      	ldrh	r3, [r7, #26]
 8006480:	429a      	cmp	r2, r3
 8006482:	d306      	bcc.n	8006492 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	699a      	ldr	r2, [r3, #24]
 8006488:	8b7b      	ldrh	r3, [r7, #26]
 800648a:	1ad2      	subs	r2, r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	619a      	str	r2, [r3, #24]
 8006490:	e002      	b.n	8006498 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2200      	movs	r2, #0
 8006496:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d123      	bne.n	80064e8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	461a      	mov	r2, r3
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ba:	83fb      	strh	r3, [r7, #30]
 80064bc:	8bfb      	ldrh	r3, [r7, #30]
 80064be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80064c2:	83fb      	strh	r3, [r7, #30]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	461a      	mov	r2, r3
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	441a      	add	r2, r3
 80064d2:	8bfb      	ldrh	r3, [r7, #30]
 80064d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80064e8:	88fb      	ldrh	r3, [r7, #6]
 80064ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d11f      	bne.n	8006532 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	b29b      	uxth	r3, r3
 8006504:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006508:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800650c:	83bb      	strh	r3, [r7, #28]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	441a      	add	r2, r3
 800651c:	8bbb      	ldrh	r3, [r7, #28]
 800651e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800652a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800652e:	b29b      	uxth	r3, r3
 8006530:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006532:	8b7b      	ldrh	r3, [r7, #26]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d008      	beq.n	800654a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	6959      	ldr	r1, [r3, #20]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	895a      	ldrh	r2, [r3, #10]
 8006544:	8b7b      	ldrh	r3, [r7, #26]
 8006546:	f005 fd95 	bl	800c074 <USB_ReadPMA>
    }
  }

  return count;
 800654a:	8b7b      	ldrh	r3, [r7, #26]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3720      	adds	r7, #32
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b0a4      	sub	sp, #144	@ 0x90
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006562:	88fb      	ldrh	r3, [r7, #6]
 8006564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 81dd 	beq.w	8006928 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006576:	b29b      	uxth	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	4413      	add	r3, r2
 8006582:	3302      	adds	r3, #2
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006596:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d907      	bls.n	80065b6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	699a      	ldr	r2, [r3, #24]
 80065aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80065ae:	1ad2      	subs	r2, r2, r3
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	619a      	str	r2, [r3, #24]
 80065b4:	e002      	b.n	80065bc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2200      	movs	r2, #0
 80065ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f040 80b9 	bne.w	8006738 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	785b      	ldrb	r3, [r3, #1]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d126      	bne.n	800661c <HAL_PCD_EP_DB_Transmit+0xc8>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065dc:	b29b      	uxth	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e2:	4413      	add	r3, r2
 80065e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	011a      	lsls	r2, r3, #4
 80065ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ee:	4413      	add	r3, r2
 80065f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006600:	b29a      	uxth	r2, r3
 8006602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006604:	801a      	strh	r2, [r3, #0]
 8006606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006614:	b29a      	uxth	r2, r3
 8006616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006618:	801a      	strh	r2, [r3, #0]
 800661a:	e01a      	b.n	8006652 <HAL_PCD_EP_DB_Transmit+0xfe>
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d116      	bne.n	8006652 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	637b      	str	r3, [r7, #52]	@ 0x34
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006632:	b29b      	uxth	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006638:	4413      	add	r3, r2
 800663a:	637b      	str	r3, [r7, #52]	@ 0x34
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	011a      	lsls	r2, r3, #4
 8006642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006644:	4413      	add	r3, r2
 8006646:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800664a:	633b      	str	r3, [r7, #48]	@ 0x30
 800664c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664e:	2200      	movs	r2, #0
 8006650:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	627b      	str	r3, [r7, #36]	@ 0x24
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d126      	bne.n	80066ae <HAL_PCD_EP_DB_Transmit+0x15a>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800666e:	b29b      	uxth	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	4413      	add	r3, r2
 8006676:	61fb      	str	r3, [r7, #28]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	011a      	lsls	r2, r3, #4
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006686:	61bb      	str	r3, [r7, #24]
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	b29b      	uxth	r3, r3
 800668e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006692:	b29a      	uxth	r2, r3
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	801a      	strh	r2, [r3, #0]
 80066ac:	e017      	b.n	80066de <HAL_PCD_EP_DB_Transmit+0x18a>
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	785b      	ldrb	r3, [r3, #1]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d113      	bne.n	80066de <HAL_PCD_EP_DB_Transmit+0x18a>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066be:	b29b      	uxth	r3, r3
 80066c0:	461a      	mov	r2, r3
 80066c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c4:	4413      	add	r3, r2
 80066c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	011a      	lsls	r2, r3, #4
 80066ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d0:	4413      	add	r3, r2
 80066d2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066d6:	623b      	str	r3, [r7, #32]
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	2200      	movs	r2, #0
 80066dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	4619      	mov	r1, r3
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f007 fb14 	bl	800dd12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80066ea:	88fb      	ldrh	r3, [r7, #6]
 80066ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 82fc 	beq.w	8006cee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800670c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006710:	82fb      	strh	r3, [r7, #22]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	8afb      	ldrh	r3, [r7, #22]
 8006722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800672a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800672e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006732:	b29b      	uxth	r3, r3
 8006734:	8013      	strh	r3, [r2, #0]
 8006736:	e2da      	b.n	8006cee <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006738:	88fb      	ldrh	r3, [r7, #6]
 800673a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d021      	beq.n	8006786 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	b29b      	uxth	r3, r3
 8006754:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800675c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	441a      	add	r2, r3
 800676e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800677a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800677e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006782:	b29b      	uxth	r3, r3
 8006784:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800678c:	2b01      	cmp	r3, #1
 800678e:	f040 82ae 	bne.w	8006cee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	695a      	ldr	r2, [r3, #20]
 8006796:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800679a:	441a      	add	r2, r3
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	69da      	ldr	r2, [r3, #28]
 80067a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80067a8:	441a      	add	r2, r3
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6a1a      	ldr	r2, [r3, #32]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d30b      	bcc.n	80067d2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	6a1a      	ldr	r2, [r3, #32]
 80067c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067ca:	1ad2      	subs	r2, r2, r3
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	621a      	str	r2, [r3, #32]
 80067d0:	e017      	b.n	8006802 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d108      	bne.n	80067ec <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80067da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80067de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80067ea:	e00a      	b.n	8006802 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2200      	movs	r2, #0
 8006800:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	785b      	ldrb	r3, [r3, #1]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d165      	bne.n	80068d6 <HAL_PCD_EP_DB_Transmit+0x382>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006818:	b29b      	uxth	r3, r3
 800681a:	461a      	mov	r2, r3
 800681c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800681e:	4413      	add	r3, r2
 8006820:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	011a      	lsls	r2, r3, #4
 8006828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800682a:	4413      	add	r3, r2
 800682c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006830:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800683c:	b29a      	uxth	r2, r3
 800683e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006840:	801a      	strh	r2, [r3, #0]
 8006842:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006846:	2b3e      	cmp	r3, #62	@ 0x3e
 8006848:	d91d      	bls.n	8006886 <HAL_PCD_EP_DB_Transmit+0x332>
 800684a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006852:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006856:	f003 031f 	and.w	r3, r3, #31
 800685a:	2b00      	cmp	r3, #0
 800685c:	d102      	bne.n	8006864 <HAL_PCD_EP_DB_Transmit+0x310>
 800685e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006860:	3b01      	subs	r3, #1
 8006862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b29a      	uxth	r2, r3
 800686a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800686c:	b29b      	uxth	r3, r3
 800686e:	029b      	lsls	r3, r3, #10
 8006870:	b29b      	uxth	r3, r3
 8006872:	4313      	orrs	r3, r2
 8006874:	b29b      	uxth	r3, r3
 8006876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800687a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800687e:	b29a      	uxth	r2, r3
 8006880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006882:	801a      	strh	r2, [r3, #0]
 8006884:	e044      	b.n	8006910 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006886:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <HAL_PCD_EP_DB_Transmit+0x350>
 800688e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689c:	b29a      	uxth	r2, r3
 800689e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	e035      	b.n	8006910 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80068a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068a8:	085b      	lsrs	r3, r3, #1
 80068aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <HAL_PCD_EP_DB_Transmit+0x36a>
 80068b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068ba:	3301      	adds	r3, #1
 80068bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	029b      	lsls	r3, r3, #10
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	4313      	orrs	r3, r2
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	e01c      	b.n	8006910 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d118      	bne.n	8006910 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068f2:	4413      	add	r3, r2
 80068f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	011a      	lsls	r2, r3, #4
 80068fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068fe:	4413      	add	r3, r2
 8006900:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006904:	643b      	str	r3, [r7, #64]	@ 0x40
 8006906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800690a:	b29a      	uxth	r2, r3
 800690c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800690e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	6959      	ldr	r1, [r3, #20]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	891a      	ldrh	r2, [r3, #8]
 800691c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006920:	b29b      	uxth	r3, r3
 8006922:	f005 fb62 	bl	800bfea <USB_WritePMA>
 8006926:	e1e2      	b.n	8006cee <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006930:	b29b      	uxth	r3, r3
 8006932:	461a      	mov	r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	00db      	lsls	r3, r3, #3
 800693a:	4413      	add	r3, r2
 800693c:	3306      	adds	r3, #6
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	6812      	ldr	r2, [r2, #0]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006950:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	699a      	ldr	r2, [r3, #24]
 8006958:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800695c:	429a      	cmp	r2, r3
 800695e:	d307      	bcc.n	8006970 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	699a      	ldr	r2, [r3, #24]
 8006964:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006968:	1ad2      	subs	r2, r2, r3
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	619a      	str	r2, [r3, #24]
 800696e:	e002      	b.n	8006976 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2200      	movs	r2, #0
 8006974:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	2b00      	cmp	r3, #0
 800697c:	f040 80c0 	bne.w	8006b00 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	785b      	ldrb	r3, [r3, #1]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d126      	bne.n	80069d6 <HAL_PCD_EP_DB_Transmit+0x482>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006996:	b29b      	uxth	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800699c:	4413      	add	r3, r2
 800699e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	011a      	lsls	r2, r3, #4
 80069a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069a8:	4413      	add	r3, r2
 80069aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069be:	801a      	strh	r2, [r3, #0]
 80069c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069d2:	801a      	strh	r2, [r3, #0]
 80069d4:	e01a      	b.n	8006a0c <HAL_PCD_EP_DB_Transmit+0x4b8>
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	785b      	ldrb	r3, [r3, #1]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d116      	bne.n	8006a0c <HAL_PCD_EP_DB_Transmit+0x4b8>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069f2:	4413      	add	r3, r2
 80069f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	011a      	lsls	r2, r3, #4
 80069fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069fe:	4413      	add	r3, r2
 8006a00:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a04:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a08:	2200      	movs	r2, #0
 8006a0a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	785b      	ldrb	r3, [r3, #1]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d12b      	bne.n	8006a72 <HAL_PCD_EP_DB_Transmit+0x51e>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a2e:	4413      	add	r3, r2
 8006a30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	011a      	lsls	r2, r3, #4
 8006a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a56:	801a      	strh	r2, [r3, #0]
 8006a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a6e:	801a      	strh	r2, [r3, #0]
 8006a70:	e017      	b.n	8006aa2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	785b      	ldrb	r3, [r3, #1]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d113      	bne.n	8006aa2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	461a      	mov	r2, r3
 8006a86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a88:	4413      	add	r3, r2
 8006a8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	011a      	lsls	r2, r3, #4
 8006a92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a94:	4413      	add	r3, r2
 8006a96:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f007 f932 	bl	800dd12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006aae:	88fb      	ldrh	r3, [r7, #6]
 8006ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f040 811a 	bne.w	8006cee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	461a      	mov	r2, r3
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	441a      	add	r2, r3
 8006ae6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006aea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006af2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	8013      	strh	r3, [r2, #0]
 8006afe:	e0f6      	b.n	8006cee <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006b00:	88fb      	ldrh	r3, [r7, #6]
 8006b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d121      	bne.n	8006b4e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b24:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	441a      	add	r2, r3
 8006b36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006b3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	f040 80ca 	bne.w	8006cee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	695a      	ldr	r2, [r3, #20]
 8006b5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006b62:	441a      	add	r2, r3
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	69da      	ldr	r2, [r3, #28]
 8006b6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006b70:	441a      	add	r2, r3
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	6a1a      	ldr	r2, [r3, #32]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d30b      	bcc.n	8006b9a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	6a1a      	ldr	r2, [r3, #32]
 8006b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b92:	1ad2      	subs	r2, r2, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	621a      	str	r2, [r3, #32]
 8006b98:	e017      	b.n	8006bca <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d108      	bne.n	8006bb4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8006ba2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006ba6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006bb2:	e00a      	b.n	8006bca <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	785b      	ldrb	r3, [r3, #1]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d165      	bne.n	8006ca4 <HAL_PCD_EP_DB_Transmit+0x750>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	461a      	mov	r2, r3
 8006bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bec:	4413      	add	r3, r2
 8006bee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	011a      	lsls	r2, r3, #4
 8006bf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006bfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c0e:	801a      	strh	r2, [r3, #0]
 8006c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c14:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c16:	d91d      	bls.n	8006c54 <HAL_PCD_EP_DB_Transmit+0x700>
 8006c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c1c:	095b      	lsrs	r3, r3, #5
 8006c1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d102      	bne.n	8006c32 <HAL_PCD_EP_DB_Transmit+0x6de>
 8006c2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	029b      	lsls	r3, r3, #10
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	4313      	orrs	r3, r2
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c50:	801a      	strh	r2, [r3, #0]
 8006c52:	e041      	b.n	8006cd8 <HAL_PCD_EP_DB_Transmit+0x784>
 8006c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <HAL_PCD_EP_DB_Transmit+0x71e>
 8006c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	e032      	b.n	8006cd8 <HAL_PCD_EP_DB_Transmit+0x784>
 8006c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c76:	085b      	lsrs	r3, r3, #1
 8006c78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d002      	beq.n	8006c8c <HAL_PCD_EP_DB_Transmit+0x738>
 8006c86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c88:	3301      	adds	r3, #1
 8006c8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	029b      	lsls	r3, r3, #10
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ca0:	801a      	strh	r2, [r3, #0]
 8006ca2:	e019      	b.n	8006cd8 <HAL_PCD_EP_DB_Transmit+0x784>
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	785b      	ldrb	r3, [r3, #1]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d115      	bne.n	8006cd8 <HAL_PCD_EP_DB_Transmit+0x784>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cba:	4413      	add	r3, r2
 8006cbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	011a      	lsls	r2, r3, #4
 8006cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ccc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cd6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	6959      	ldr	r1, [r3, #20]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	895a      	ldrh	r2, [r3, #10]
 8006ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f005 f97e 	bl	800bfea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d08:	82bb      	strh	r3, [r7, #20]
 8006d0a:	8abb      	ldrh	r3, [r7, #20]
 8006d0c:	f083 0310 	eor.w	r3, r3, #16
 8006d10:	82bb      	strh	r3, [r7, #20]
 8006d12:	8abb      	ldrh	r3, [r7, #20]
 8006d14:	f083 0320 	eor.w	r3, r3, #32
 8006d18:	82bb      	strh	r3, [r7, #20]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	441a      	add	r2, r3
 8006d28:	8abb      	ldrh	r3, [r7, #20]
 8006d2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3790      	adds	r7, #144	@ 0x90
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	607b      	str	r3, [r7, #4]
 8006d52:	460b      	mov	r3, r1
 8006d54:	817b      	strh	r3, [r7, #10]
 8006d56:	4613      	mov	r3, r2
 8006d58:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006d5a:	897b      	ldrh	r3, [r7, #10]
 8006d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d66:	897b      	ldrh	r3, [r7, #10]
 8006d68:	f003 0207 	and.w	r2, r3, #7
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	3310      	adds	r3, #16
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4413      	add	r3, r2
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	e009      	b.n	8006d92 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006d7e:	897a      	ldrh	r2, [r7, #10]
 8006d80:	4613      	mov	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	4413      	add	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006d92:	893b      	ldrh	r3, [r7, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d107      	bne.n	8006da8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	80da      	strh	r2, [r3, #6]
 8006da6:	e00b      	b.n	8006dc0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2201      	movs	r2, #1
 8006dac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	0c1b      	lsrs	r3, r3, #16
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	371c      	adds	r7, #28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bc80      	pop	{r7}
 8006dca:	4770      	bx	lr

08006dcc <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8006dd0:	bf20      	wfe
  __asm volatile( "nop" );
 8006dd2:	bf00      	nop
}
 8006dd4:	bf00      	nop
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006de0:	4b03      	ldr	r3, [pc, #12]	@ (8006df0 <HAL_PWR_EnableBkUpAccess+0x14>)
 8006de2:	2201      	movs	r2, #1
 8006de4:	601a      	str	r2, [r3, #0]
}
 8006de6:	bf00      	nop
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	420e0020 	.word	0x420e0020

08006df4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8006e00:	4b13      	ldr	r3, [pc, #76]	@ (8006e50 <HAL_PWR_EnterSTOPMode+0x5c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a12      	ldr	r2, [pc, #72]	@ (8006e50 <HAL_PWR_EnterSTOPMode+0x5c>)
 8006e06:	f023 0302 	bic.w	r3, r3, #2
 8006e0a:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 8006e0c:	4b10      	ldr	r3, [pc, #64]	@ (8006e50 <HAL_PWR_EnterSTOPMode+0x5c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f023 0201 	bic.w	r2, r3, #1
 8006e14:	490e      	ldr	r1, [pc, #56]	@ (8006e50 <HAL_PWR_EnterSTOPMode+0x5c>)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006e54 <HAL_PWR_EnterSTOPMode+0x60>)
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	4a0c      	ldr	r2, [pc, #48]	@ (8006e54 <HAL_PWR_EnterSTOPMode+0x60>)
 8006e22:	f043 0304 	orr.w	r3, r3, #4
 8006e26:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006e2e:	bf30      	wfi
 8006e30:	e004      	b.n	8006e3c <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006e32:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 8006e34:	f7ff ffca 	bl	8006dcc <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8006e38:	f7ff ffc8 	bl	8006dcc <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006e3c:	4b05      	ldr	r3, [pc, #20]	@ (8006e54 <HAL_PWR_EnterSTOPMode+0x60>)
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	4a04      	ldr	r2, [pc, #16]	@ (8006e54 <HAL_PWR_EnterSTOPMode+0x60>)
 8006e42:	f023 0304 	bic.w	r3, r3, #4
 8006e46:	6113      	str	r3, [r2, #16]
}
 8006e48:	bf00      	nop
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	40007000 	.word	0x40007000
 8006e54:	e000ed00 	.word	0xe000ed00

08006e58 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8006e5c:	4b06      	ldr	r3, [pc, #24]	@ (8006e78 <HAL_PWR_PVD_IRQHandler+0x20>)
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8006e68:	f000 f808 	bl	8006e7c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8006e6c:	4b02      	ldr	r3, [pc, #8]	@ (8006e78 <HAL_PWR_PVD_IRQHandler+0x20>)
 8006e6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006e72:	615a      	str	r2, [r3, #20]
  }
}
 8006e74:	bf00      	nop
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40010400 	.word	0x40010400

08006e7c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8006e80:	bf00      	nop
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bc80      	pop	{r7}
 8006e86:	4770      	bx	lr

08006e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e272      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 8087 	beq.w	8006fb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ea8:	4b92      	ldr	r3, [pc, #584]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f003 030c 	and.w	r3, r3, #12
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d00c      	beq.n	8006ece <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006eb4:	4b8f      	ldr	r3, [pc, #572]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f003 030c 	and.w	r3, r3, #12
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d112      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x5e>
 8006ec0:	4b8c      	ldr	r3, [pc, #560]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ecc:	d10b      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ece:	4b89      	ldr	r3, [pc, #548]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d06c      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x12c>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d168      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e24c      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eee:	d106      	bne.n	8006efe <HAL_RCC_OscConfig+0x76>
 8006ef0:	4b80      	ldr	r3, [pc, #512]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a7f      	ldr	r2, [pc, #508]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	e02e      	b.n	8006f5c <HAL_RCC_OscConfig+0xd4>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10c      	bne.n	8006f20 <HAL_RCC_OscConfig+0x98>
 8006f06:	4b7b      	ldr	r3, [pc, #492]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a7a      	ldr	r2, [pc, #488]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	4b78      	ldr	r3, [pc, #480]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a77      	ldr	r2, [pc, #476]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006f18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	e01d      	b.n	8006f5c <HAL_RCC_OscConfig+0xd4>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f28:	d10c      	bne.n	8006f44 <HAL_RCC_OscConfig+0xbc>
 8006f2a:	4b72      	ldr	r3, [pc, #456]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a71      	ldr	r2, [pc, #452]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	4b6f      	ldr	r3, [pc, #444]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a6e      	ldr	r2, [pc, #440]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	e00b      	b.n	8006f5c <HAL_RCC_OscConfig+0xd4>
 8006f44:	4b6b      	ldr	r3, [pc, #428]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a6a      	ldr	r2, [pc, #424]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	4b68      	ldr	r3, [pc, #416]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a67      	ldr	r2, [pc, #412]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d013      	beq.n	8006f8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f64:	f7fc fe1c 	bl	8003ba0 <HAL_GetTick>
 8006f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f6c:	f7fc fe18 	bl	8003ba0 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b64      	cmp	r3, #100	@ 0x64
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e200      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f7e:	4b5d      	ldr	r3, [pc, #372]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0f0      	beq.n	8006f6c <HAL_RCC_OscConfig+0xe4>
 8006f8a:	e014      	b.n	8006fb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f8c:	f7fc fe08 	bl	8003ba0 <HAL_GetTick>
 8006f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f92:	e008      	b.n	8006fa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f94:	f7fc fe04 	bl	8003ba0 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b64      	cmp	r3, #100	@ 0x64
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e1ec      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fa6:	4b53      	ldr	r3, [pc, #332]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1f0      	bne.n	8006f94 <HAL_RCC_OscConfig+0x10c>
 8006fb2:	e000      	b.n	8006fb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d063      	beq.n	800708a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006fc2:	4b4c      	ldr	r3, [pc, #304]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f003 030c 	and.w	r3, r3, #12
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00b      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006fce:	4b49      	ldr	r3, [pc, #292]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f003 030c 	and.w	r3, r3, #12
 8006fd6:	2b08      	cmp	r3, #8
 8006fd8:	d11c      	bne.n	8007014 <HAL_RCC_OscConfig+0x18c>
 8006fda:	4b46      	ldr	r3, [pc, #280]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d116      	bne.n	8007014 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fe6:	4b43      	ldr	r3, [pc, #268]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d005      	beq.n	8006ffe <HAL_RCC_OscConfig+0x176>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d001      	beq.n	8006ffe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e1c0      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	4939      	ldr	r1, [pc, #228]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 800700e:	4313      	orrs	r3, r2
 8007010:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007012:	e03a      	b.n	800708a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d020      	beq.n	800705e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800701c:	4b36      	ldr	r3, [pc, #216]	@ (80070f8 <HAL_RCC_OscConfig+0x270>)
 800701e:	2201      	movs	r2, #1
 8007020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007022:	f7fc fdbd 	bl	8003ba0 <HAL_GetTick>
 8007026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007028:	e008      	b.n	800703c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800702a:	f7fc fdb9 	bl	8003ba0 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	2b02      	cmp	r3, #2
 8007036:	d901      	bls.n	800703c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e1a1      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800703c:	4b2d      	ldr	r3, [pc, #180]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d0f0      	beq.n	800702a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007048:	4b2a      	ldr	r3, [pc, #168]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	4927      	ldr	r1, [pc, #156]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8007058:	4313      	orrs	r3, r2
 800705a:	600b      	str	r3, [r1, #0]
 800705c:	e015      	b.n	800708a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800705e:	4b26      	ldr	r3, [pc, #152]	@ (80070f8 <HAL_RCC_OscConfig+0x270>)
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007064:	f7fc fd9c 	bl	8003ba0 <HAL_GetTick>
 8007068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800706a:	e008      	b.n	800707e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800706c:	f7fc fd98 	bl	8003ba0 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2b02      	cmp	r3, #2
 8007078:	d901      	bls.n	800707e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e180      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800707e:	4b1d      	ldr	r3, [pc, #116]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1f0      	bne.n	800706c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0308 	and.w	r3, r3, #8
 8007092:	2b00      	cmp	r3, #0
 8007094:	d03a      	beq.n	800710c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d019      	beq.n	80070d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800709e:	4b17      	ldr	r3, [pc, #92]	@ (80070fc <HAL_RCC_OscConfig+0x274>)
 80070a0:	2201      	movs	r2, #1
 80070a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070a4:	f7fc fd7c 	bl	8003ba0 <HAL_GetTick>
 80070a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070aa:	e008      	b.n	80070be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070ac:	f7fc fd78 	bl	8003ba0 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d901      	bls.n	80070be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e160      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070be:	4b0d      	ldr	r3, [pc, #52]	@ (80070f4 <HAL_RCC_OscConfig+0x26c>)
 80070c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d0f0      	beq.n	80070ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80070ca:	2001      	movs	r0, #1
 80070cc:	f000 fad0 	bl	8007670 <RCC_Delay>
 80070d0:	e01c      	b.n	800710c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070d2:	4b0a      	ldr	r3, [pc, #40]	@ (80070fc <HAL_RCC_OscConfig+0x274>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070d8:	f7fc fd62 	bl	8003ba0 <HAL_GetTick>
 80070dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070de:	e00f      	b.n	8007100 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070e0:	f7fc fd5e 	bl	8003ba0 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d908      	bls.n	8007100 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e146      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
 80070f2:	bf00      	nop
 80070f4:	40021000 	.word	0x40021000
 80070f8:	42420000 	.word	0x42420000
 80070fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007100:	4b92      	ldr	r3, [pc, #584]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 8007102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e9      	bne.n	80070e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 80a6 	beq.w	8007266 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800711a:	2300      	movs	r3, #0
 800711c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800711e:	4b8b      	ldr	r3, [pc, #556]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10d      	bne.n	8007146 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800712a:	4b88      	ldr	r3, [pc, #544]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	4a87      	ldr	r2, [pc, #540]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 8007130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007134:	61d3      	str	r3, [r2, #28]
 8007136:	4b85      	ldr	r3, [pc, #532]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800713e:	60bb      	str	r3, [r7, #8]
 8007140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007142:	2301      	movs	r3, #1
 8007144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007146:	4b82      	ldr	r3, [pc, #520]	@ (8007350 <HAL_RCC_OscConfig+0x4c8>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800714e:	2b00      	cmp	r3, #0
 8007150:	d118      	bne.n	8007184 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007152:	4b7f      	ldr	r3, [pc, #508]	@ (8007350 <HAL_RCC_OscConfig+0x4c8>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a7e      	ldr	r2, [pc, #504]	@ (8007350 <HAL_RCC_OscConfig+0x4c8>)
 8007158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800715c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800715e:	f7fc fd1f 	bl	8003ba0 <HAL_GetTick>
 8007162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007164:	e008      	b.n	8007178 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007166:	f7fc fd1b 	bl	8003ba0 <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	2b64      	cmp	r3, #100	@ 0x64
 8007172:	d901      	bls.n	8007178 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e103      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007178:	4b75      	ldr	r3, [pc, #468]	@ (8007350 <HAL_RCC_OscConfig+0x4c8>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007180:	2b00      	cmp	r3, #0
 8007182:	d0f0      	beq.n	8007166 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d106      	bne.n	800719a <HAL_RCC_OscConfig+0x312>
 800718c:	4b6f      	ldr	r3, [pc, #444]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	4a6e      	ldr	r2, [pc, #440]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 8007192:	f043 0301 	orr.w	r3, r3, #1
 8007196:	6213      	str	r3, [r2, #32]
 8007198:	e02d      	b.n	80071f6 <HAL_RCC_OscConfig+0x36e>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10c      	bne.n	80071bc <HAL_RCC_OscConfig+0x334>
 80071a2:	4b6a      	ldr	r3, [pc, #424]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	4a69      	ldr	r2, [pc, #420]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80071a8:	f023 0301 	bic.w	r3, r3, #1
 80071ac:	6213      	str	r3, [r2, #32]
 80071ae:	4b67      	ldr	r3, [pc, #412]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	4a66      	ldr	r2, [pc, #408]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80071b4:	f023 0304 	bic.w	r3, r3, #4
 80071b8:	6213      	str	r3, [r2, #32]
 80071ba:	e01c      	b.n	80071f6 <HAL_RCC_OscConfig+0x36e>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	2b05      	cmp	r3, #5
 80071c2:	d10c      	bne.n	80071de <HAL_RCC_OscConfig+0x356>
 80071c4:	4b61      	ldr	r3, [pc, #388]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	4a60      	ldr	r2, [pc, #384]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80071ca:	f043 0304 	orr.w	r3, r3, #4
 80071ce:	6213      	str	r3, [r2, #32]
 80071d0:	4b5e      	ldr	r3, [pc, #376]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	4a5d      	ldr	r2, [pc, #372]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80071d6:	f043 0301 	orr.w	r3, r3, #1
 80071da:	6213      	str	r3, [r2, #32]
 80071dc:	e00b      	b.n	80071f6 <HAL_RCC_OscConfig+0x36e>
 80071de:	4b5b      	ldr	r3, [pc, #364]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	4a5a      	ldr	r2, [pc, #360]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80071e4:	f023 0301 	bic.w	r3, r3, #1
 80071e8:	6213      	str	r3, [r2, #32]
 80071ea:	4b58      	ldr	r3, [pc, #352]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	4a57      	ldr	r2, [pc, #348]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80071f0:	f023 0304 	bic.w	r3, r3, #4
 80071f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d015      	beq.n	800722a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071fe:	f7fc fccf 	bl	8003ba0 <HAL_GetTick>
 8007202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007204:	e00a      	b.n	800721c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007206:	f7fc fccb 	bl	8003ba0 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007214:	4293      	cmp	r3, r2
 8007216:	d901      	bls.n	800721c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e0b1      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800721c:	4b4b      	ldr	r3, [pc, #300]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0ee      	beq.n	8007206 <HAL_RCC_OscConfig+0x37e>
 8007228:	e014      	b.n	8007254 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800722a:	f7fc fcb9 	bl	8003ba0 <HAL_GetTick>
 800722e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007230:	e00a      	b.n	8007248 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007232:	f7fc fcb5 	bl	8003ba0 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007240:	4293      	cmp	r3, r2
 8007242:	d901      	bls.n	8007248 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e09b      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007248:	4b40      	ldr	r3, [pc, #256]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1ee      	bne.n	8007232 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007254:	7dfb      	ldrb	r3, [r7, #23]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d105      	bne.n	8007266 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800725a:	4b3c      	ldr	r3, [pc, #240]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	4a3b      	ldr	r2, [pc, #236]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 8007260:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007264:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 8087 	beq.w	800737e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007270:	4b36      	ldr	r3, [pc, #216]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f003 030c 	and.w	r3, r3, #12
 8007278:	2b08      	cmp	r3, #8
 800727a:	d061      	beq.n	8007340 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	2b02      	cmp	r3, #2
 8007282:	d146      	bne.n	8007312 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007284:	4b33      	ldr	r3, [pc, #204]	@ (8007354 <HAL_RCC_OscConfig+0x4cc>)
 8007286:	2200      	movs	r2, #0
 8007288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800728a:	f7fc fc89 	bl	8003ba0 <HAL_GetTick>
 800728e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007290:	e008      	b.n	80072a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007292:	f7fc fc85 	bl	8003ba0 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	2b02      	cmp	r3, #2
 800729e:	d901      	bls.n	80072a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e06d      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072a4:	4b29      	ldr	r3, [pc, #164]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1f0      	bne.n	8007292 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a1b      	ldr	r3, [r3, #32]
 80072b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072b8:	d108      	bne.n	80072cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80072ba:	4b24      	ldr	r3, [pc, #144]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	4921      	ldr	r1, [pc, #132]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072cc:	4b1f      	ldr	r3, [pc, #124]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a19      	ldr	r1, [r3, #32]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072dc:	430b      	orrs	r3, r1
 80072de:	491b      	ldr	r1, [pc, #108]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007354 <HAL_RCC_OscConfig+0x4cc>)
 80072e6:	2201      	movs	r2, #1
 80072e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072ea:	f7fc fc59 	bl	8003ba0 <HAL_GetTick>
 80072ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072f0:	e008      	b.n	8007304 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072f2:	f7fc fc55 	bl	8003ba0 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d901      	bls.n	8007304 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e03d      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007304:	4b11      	ldr	r3, [pc, #68]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0f0      	beq.n	80072f2 <HAL_RCC_OscConfig+0x46a>
 8007310:	e035      	b.n	800737e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007312:	4b10      	ldr	r3, [pc, #64]	@ (8007354 <HAL_RCC_OscConfig+0x4cc>)
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007318:	f7fc fc42 	bl	8003ba0 <HAL_GetTick>
 800731c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007320:	f7fc fc3e 	bl	8003ba0 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e026      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007332:	4b06      	ldr	r3, [pc, #24]	@ (800734c <HAL_RCC_OscConfig+0x4c4>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1f0      	bne.n	8007320 <HAL_RCC_OscConfig+0x498>
 800733e:	e01e      	b.n	800737e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	69db      	ldr	r3, [r3, #28]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d107      	bne.n	8007358 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e019      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
 800734c:	40021000 	.word	0x40021000
 8007350:	40007000 	.word	0x40007000
 8007354:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007358:	4b0b      	ldr	r3, [pc, #44]	@ (8007388 <HAL_RCC_OscConfig+0x500>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	429a      	cmp	r2, r3
 800736a:	d106      	bne.n	800737a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007376:	429a      	cmp	r2, r3
 8007378:	d001      	beq.n	800737e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e000      	b.n	8007380 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	40021000 	.word	0x40021000

0800738c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e0d0      	b.n	8007542 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073a0:	4b6a      	ldr	r3, [pc, #424]	@ (800754c <HAL_RCC_ClockConfig+0x1c0>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0307 	and.w	r3, r3, #7
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d910      	bls.n	80073d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ae:	4b67      	ldr	r3, [pc, #412]	@ (800754c <HAL_RCC_ClockConfig+0x1c0>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f023 0207 	bic.w	r2, r3, #7
 80073b6:	4965      	ldr	r1, [pc, #404]	@ (800754c <HAL_RCC_ClockConfig+0x1c0>)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073be:	4b63      	ldr	r3, [pc, #396]	@ (800754c <HAL_RCC_ClockConfig+0x1c0>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d001      	beq.n	80073d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e0b8      	b.n	8007542 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d020      	beq.n	800741e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d005      	beq.n	80073f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073e8:	4b59      	ldr	r3, [pc, #356]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	4a58      	ldr	r2, [pc, #352]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 80073ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80073f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d005      	beq.n	800740c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007400:	4b53      	ldr	r3, [pc, #332]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	4a52      	ldr	r2, [pc, #328]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 8007406:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800740a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800740c:	4b50      	ldr	r3, [pc, #320]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	494d      	ldr	r1, [pc, #308]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 800741a:	4313      	orrs	r3, r2
 800741c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d040      	beq.n	80074ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d107      	bne.n	8007442 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007432:	4b47      	ldr	r3, [pc, #284]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d115      	bne.n	800746a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e07f      	b.n	8007542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	2b02      	cmp	r3, #2
 8007448:	d107      	bne.n	800745a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800744a:	4b41      	ldr	r3, [pc, #260]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e073      	b.n	8007542 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800745a:	4b3d      	ldr	r3, [pc, #244]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e06b      	b.n	8007542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800746a:	4b39      	ldr	r3, [pc, #228]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f023 0203 	bic.w	r2, r3, #3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	4936      	ldr	r1, [pc, #216]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 8007478:	4313      	orrs	r3, r2
 800747a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800747c:	f7fc fb90 	bl	8003ba0 <HAL_GetTick>
 8007480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007482:	e00a      	b.n	800749a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007484:	f7fc fb8c 	bl	8003ba0 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007492:	4293      	cmp	r3, r2
 8007494:	d901      	bls.n	800749a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e053      	b.n	8007542 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800749a:	4b2d      	ldr	r3, [pc, #180]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f003 020c 	and.w	r2, r3, #12
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d1eb      	bne.n	8007484 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074ac:	4b27      	ldr	r3, [pc, #156]	@ (800754c <HAL_RCC_ClockConfig+0x1c0>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0307 	and.w	r3, r3, #7
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d210      	bcs.n	80074dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ba:	4b24      	ldr	r3, [pc, #144]	@ (800754c <HAL_RCC_ClockConfig+0x1c0>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f023 0207 	bic.w	r2, r3, #7
 80074c2:	4922      	ldr	r1, [pc, #136]	@ (800754c <HAL_RCC_ClockConfig+0x1c0>)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ca:	4b20      	ldr	r3, [pc, #128]	@ (800754c <HAL_RCC_ClockConfig+0x1c0>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d001      	beq.n	80074dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e032      	b.n	8007542 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d008      	beq.n	80074fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074e8:	4b19      	ldr	r3, [pc, #100]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	4916      	ldr	r1, [pc, #88]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0308 	and.w	r3, r3, #8
 8007502:	2b00      	cmp	r3, #0
 8007504:	d009      	beq.n	800751a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007506:	4b12      	ldr	r3, [pc, #72]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	00db      	lsls	r3, r3, #3
 8007514:	490e      	ldr	r1, [pc, #56]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 8007516:	4313      	orrs	r3, r2
 8007518:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800751a:	f000 f821 	bl	8007560 <HAL_RCC_GetSysClockFreq>
 800751e:	4602      	mov	r2, r0
 8007520:	4b0b      	ldr	r3, [pc, #44]	@ (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	091b      	lsrs	r3, r3, #4
 8007526:	f003 030f 	and.w	r3, r3, #15
 800752a:	490a      	ldr	r1, [pc, #40]	@ (8007554 <HAL_RCC_ClockConfig+0x1c8>)
 800752c:	5ccb      	ldrb	r3, [r1, r3]
 800752e:	fa22 f303 	lsr.w	r3, r2, r3
 8007532:	4a09      	ldr	r2, [pc, #36]	@ (8007558 <HAL_RCC_ClockConfig+0x1cc>)
 8007534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007536:	4b09      	ldr	r3, [pc, #36]	@ (800755c <HAL_RCC_ClockConfig+0x1d0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4618      	mov	r0, r3
 800753c:	f7fc faee 	bl	8003b1c <HAL_InitTick>

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	40022000 	.word	0x40022000
 8007550:	40021000 	.word	0x40021000
 8007554:	08011f04 	.word	0x08011f04
 8007558:	20000000 	.word	0x20000000
 800755c:	20000004 	.word	0x20000004

08007560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	2300      	movs	r3, #0
 800756c:	60bb      	str	r3, [r7, #8]
 800756e:	2300      	movs	r3, #0
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	2300      	movs	r3, #0
 8007574:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800757a:	4b1e      	ldr	r3, [pc, #120]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f003 030c 	and.w	r3, r3, #12
 8007586:	2b04      	cmp	r3, #4
 8007588:	d002      	beq.n	8007590 <HAL_RCC_GetSysClockFreq+0x30>
 800758a:	2b08      	cmp	r3, #8
 800758c:	d003      	beq.n	8007596 <HAL_RCC_GetSysClockFreq+0x36>
 800758e:	e027      	b.n	80075e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007590:	4b19      	ldr	r3, [pc, #100]	@ (80075f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007592:	613b      	str	r3, [r7, #16]
      break;
 8007594:	e027      	b.n	80075e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	0c9b      	lsrs	r3, r3, #18
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	4a17      	ldr	r2, [pc, #92]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80075a0:	5cd3      	ldrb	r3, [r2, r3]
 80075a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d010      	beq.n	80075d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80075ae:	4b11      	ldr	r3, [pc, #68]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	0c5b      	lsrs	r3, r3, #17
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	4a11      	ldr	r2, [pc, #68]	@ (8007600 <HAL_RCC_GetSysClockFreq+0xa0>)
 80075ba:	5cd3      	ldrb	r3, [r2, r3]
 80075bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a0d      	ldr	r2, [pc, #52]	@ (80075f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80075c2:	fb03 f202 	mul.w	r2, r3, r2
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075cc:	617b      	str	r3, [r7, #20]
 80075ce:	e004      	b.n	80075da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007604 <HAL_RCC_GetSysClockFreq+0xa4>)
 80075d4:	fb02 f303 	mul.w	r3, r2, r3
 80075d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	613b      	str	r3, [r7, #16]
      break;
 80075de:	e002      	b.n	80075e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80075e0:	4b09      	ldr	r3, [pc, #36]	@ (8007608 <HAL_RCC_GetSysClockFreq+0xa8>)
 80075e2:	613b      	str	r3, [r7, #16]
      break;
 80075e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075e6:	693b      	ldr	r3, [r7, #16]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	371c      	adds	r7, #28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40021000 	.word	0x40021000
 80075f8:	00f42400 	.word	0x00f42400
 80075fc:	08011f1c 	.word	0x08011f1c
 8007600:	08011f2c 	.word	0x08011f2c
 8007604:	003d0900 	.word	0x003d0900
 8007608:	007a1200 	.word	0x007a1200

0800760c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800760c:	b480      	push	{r7}
 800760e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007610:	4b02      	ldr	r3, [pc, #8]	@ (800761c <HAL_RCC_GetHCLKFreq+0x10>)
 8007612:	681b      	ldr	r3, [r3, #0]
}
 8007614:	4618      	mov	r0, r3
 8007616:	46bd      	mov	sp, r7
 8007618:	bc80      	pop	{r7}
 800761a:	4770      	bx	lr
 800761c:	20000000 	.word	0x20000000

08007620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007624:	f7ff fff2 	bl	800760c <HAL_RCC_GetHCLKFreq>
 8007628:	4602      	mov	r2, r0
 800762a:	4b05      	ldr	r3, [pc, #20]	@ (8007640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	0a1b      	lsrs	r3, r3, #8
 8007630:	f003 0307 	and.w	r3, r3, #7
 8007634:	4903      	ldr	r1, [pc, #12]	@ (8007644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007636:	5ccb      	ldrb	r3, [r1, r3]
 8007638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800763c:	4618      	mov	r0, r3
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40021000 	.word	0x40021000
 8007644:	08011f14 	.word	0x08011f14

08007648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800764c:	f7ff ffde 	bl	800760c <HAL_RCC_GetHCLKFreq>
 8007650:	4602      	mov	r2, r0
 8007652:	4b05      	ldr	r3, [pc, #20]	@ (8007668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	0adb      	lsrs	r3, r3, #11
 8007658:	f003 0307 	and.w	r3, r3, #7
 800765c:	4903      	ldr	r1, [pc, #12]	@ (800766c <HAL_RCC_GetPCLK2Freq+0x24>)
 800765e:	5ccb      	ldrb	r3, [r1, r3]
 8007660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007664:	4618      	mov	r0, r3
 8007666:	bd80      	pop	{r7, pc}
 8007668:	40021000 	.word	0x40021000
 800766c:	08011f14 	.word	0x08011f14

08007670 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007678:	4b0a      	ldr	r3, [pc, #40]	@ (80076a4 <RCC_Delay+0x34>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a0a      	ldr	r2, [pc, #40]	@ (80076a8 <RCC_Delay+0x38>)
 800767e:	fba2 2303 	umull	r2, r3, r2, r3
 8007682:	0a5b      	lsrs	r3, r3, #9
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	fb02 f303 	mul.w	r3, r2, r3
 800768a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800768c:	bf00      	nop
  }
  while (Delay --);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1e5a      	subs	r2, r3, #1
 8007692:	60fa      	str	r2, [r7, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1f9      	bne.n	800768c <RCC_Delay+0x1c>
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	bc80      	pop	{r7}
 80076a2:	4770      	bx	lr
 80076a4:	20000000 	.word	0x20000000
 80076a8:	10624dd3 	.word	0x10624dd3

080076ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	613b      	str	r3, [r7, #16]
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d07d      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80076c8:	2300      	movs	r3, #0
 80076ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076cc:	4b4f      	ldr	r3, [pc, #316]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10d      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076d8:	4b4c      	ldr	r3, [pc, #304]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	4a4b      	ldr	r2, [pc, #300]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076e2:	61d3      	str	r3, [r2, #28]
 80076e4:	4b49      	ldr	r3, [pc, #292]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076ec:	60bb      	str	r3, [r7, #8]
 80076ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076f0:	2301      	movs	r3, #1
 80076f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076f4:	4b46      	ldr	r3, [pc, #280]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d118      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007700:	4b43      	ldr	r3, [pc, #268]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a42      	ldr	r2, [pc, #264]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800770a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800770c:	f7fc fa48 	bl	8003ba0 <HAL_GetTick>
 8007710:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007712:	e008      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007714:	f7fc fa44 	bl	8003ba0 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b64      	cmp	r3, #100	@ 0x64
 8007720:	d901      	bls.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e06d      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007726:	4b3a      	ldr	r3, [pc, #232]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800772e:	2b00      	cmp	r3, #0
 8007730:	d0f0      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007732:	4b36      	ldr	r3, [pc, #216]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800773a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d02e      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	429a      	cmp	r2, r3
 800774e:	d027      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007750:	4b2e      	ldr	r3, [pc, #184]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007758:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800775a:	4b2e      	ldr	r3, [pc, #184]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800775c:	2201      	movs	r2, #1
 800775e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007760:	4b2c      	ldr	r3, [pc, #176]	@ (8007814 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007766:	4a29      	ldr	r2, [pc, #164]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d014      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007776:	f7fc fa13 	bl	8003ba0 <HAL_GetTick>
 800777a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800777c:	e00a      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800777e:	f7fc fa0f 	bl	8003ba0 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800778c:	4293      	cmp	r3, r2
 800778e:	d901      	bls.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e036      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007794:	4b1d      	ldr	r3, [pc, #116]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007796:	6a1b      	ldr	r3, [r3, #32]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0ee      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077a0:	4b1a      	ldr	r3, [pc, #104]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	4917      	ldr	r1, [pc, #92]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80077b2:	7dfb      	ldrb	r3, [r7, #23]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d105      	bne.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077b8:	4b14      	ldr	r3, [pc, #80]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	4a13      	ldr	r2, [pc, #76]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d008      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077d0:	4b0e      	ldr	r3, [pc, #56]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	490b      	ldr	r1, [pc, #44]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0310 	and.w	r3, r3, #16
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d008      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077ee:	4b07      	ldr	r3, [pc, #28]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	4904      	ldr	r1, [pc, #16]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	40021000 	.word	0x40021000
 8007810:	40007000 	.word	0x40007000
 8007814:	42420440 	.word	0x42420440

08007818 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b088      	sub	sp, #32
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007820:	2300      	movs	r3, #0
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	2300      	movs	r3, #0
 8007826:	61fb      	str	r3, [r7, #28]
 8007828:	2300      	movs	r3, #0
 800782a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	2300      	movs	r3, #0
 8007832:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b10      	cmp	r3, #16
 8007838:	d00a      	beq.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b10      	cmp	r3, #16
 800783e:	f200 8089 	bhi.w	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d045      	beq.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b02      	cmp	r3, #2
 800784c:	d074      	beq.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800784e:	e081      	b.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 8007850:	4b45      	ldr	r3, [pc, #276]	@ (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007856:	4b44      	ldr	r3, [pc, #272]	@ (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d07a      	beq.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	0c9b      	lsrs	r3, r3, #18
 8007866:	f003 030f 	and.w	r3, r3, #15
 800786a:	4a40      	ldr	r2, [pc, #256]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800786c:	5cd3      	ldrb	r3, [r2, r3]
 800786e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d015      	beq.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800787a:	4b3b      	ldr	r3, [pc, #236]	@ (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	0c5b      	lsrs	r3, r3, #17
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	4a3a      	ldr	r2, [pc, #232]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8007886:	5cd3      	ldrb	r3, [r2, r3]
 8007888:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00d      	beq.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007894:	4a37      	ldr	r2, [pc, #220]	@ (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	fbb2 f2f3 	udiv	r2, r2, r3
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	fb02 f303 	mul.w	r3, r2, r3
 80078a2:	61fb      	str	r3, [r7, #28]
 80078a4:	e004      	b.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	4a33      	ldr	r2, [pc, #204]	@ (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80078aa:	fb02 f303 	mul.w	r3, r2, r3
 80078ae:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80078b0:	4b2d      	ldr	r3, [pc, #180]	@ (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078bc:	d102      	bne.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	61bb      	str	r3, [r7, #24]
      break;
 80078c2:	e049      	b.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	005b      	lsls	r3, r3, #1
 80078c8:	4a2c      	ldr	r2, [pc, #176]	@ (800797c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80078ca:	fba2 2303 	umull	r2, r3, r2, r3
 80078ce:	085b      	lsrs	r3, r3, #1
 80078d0:	61bb      	str	r3, [r7, #24]
      break;
 80078d2:	e041      	b.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 80078d4:	4b24      	ldr	r3, [pc, #144]	@ (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078e4:	d108      	bne.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d003      	beq.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80078f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078f4:	61bb      	str	r3, [r7, #24]
 80078f6:	e01e      	b.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007902:	d109      	bne.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007904:	4b18      	ldr	r3, [pc, #96]	@ (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007908:	f003 0302 	and.w	r3, r3, #2
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8007910:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8007914:	61bb      	str	r3, [r7, #24]
 8007916:	e00e      	b.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800791e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007922:	d11b      	bne.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8007924:	4b10      	ldr	r3, [pc, #64]	@ (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d015      	beq.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 8007930:	4b13      	ldr	r3, [pc, #76]	@ (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007932:	61bb      	str	r3, [r7, #24]
      break;
 8007934:	e012      	b.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8007936:	e011      	b.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007938:	f7ff fe86 	bl	8007648 <HAL_RCC_GetPCLK2Freq>
 800793c:	4602      	mov	r2, r0
 800793e:	4b0a      	ldr	r3, [pc, #40]	@ (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	0b9b      	lsrs	r3, r3, #14
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	3301      	adds	r3, #1
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007950:	61bb      	str	r3, [r7, #24]
      break;
 8007952:	e004      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8007954:	bf00      	nop
 8007956:	e002      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8007958:	bf00      	nop
 800795a:	e000      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 800795c:	bf00      	nop
    }
  }
  return (frequency);
 800795e:	69bb      	ldr	r3, [r7, #24]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3720      	adds	r7, #32
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	40021000 	.word	0x40021000
 800796c:	08011f30 	.word	0x08011f30
 8007970:	08011f40 	.word	0x08011f40
 8007974:	00f42400 	.word	0x00f42400
 8007978:	003d0900 	.word	0x003d0900
 800797c:	aaaaaaab 	.word	0xaaaaaaab
 8007980:	0001e848 	.word	0x0001e848

08007984 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e07a      	b.n	8007a90 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	7c5b      	ldrb	r3, [r3, #17]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d105      	bne.n	80079b0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7fb fe56 	bl	800365c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2202      	movs	r2, #2
 80079b4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fbd5 	bl	8008166 <HAL_RTC_WaitForSynchro>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2204      	movs	r2, #4
 80079c6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e061      	b.n	8007a90 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fc8e 	bl	80082ee <RTC_EnterInitMode>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d004      	beq.n	80079e2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2204      	movs	r2, #4
 80079dc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e056      	b.n	8007a90 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0207 	bic.w	r2, r2, #7
 80079f0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d005      	beq.n	8007a06 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80079fa:	4b27      	ldr	r3, [pc, #156]	@ (8007a98 <HAL_RTC_Init+0x114>)
 80079fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fe:	4a26      	ldr	r2, [pc, #152]	@ (8007a98 <HAL_RTC_Init+0x114>)
 8007a00:	f023 0301 	bic.w	r3, r3, #1
 8007a04:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007a06:	4b24      	ldr	r3, [pc, #144]	@ (8007a98 <HAL_RTC_Init+0x114>)
 8007a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a0a:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	4921      	ldr	r1, [pc, #132]	@ (8007a98 <HAL_RTC_Init+0x114>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a20:	d003      	beq.n	8007a2a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	e00e      	b.n	8007a48 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007a2a:	2001      	movs	r0, #1
 8007a2c:	f7ff fef4 	bl	8007818 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a30:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d104      	bne.n	8007a42 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2204      	movs	r2, #4
 8007a3c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e026      	b.n	8007a90 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	3b01      	subs	r3, #1
 8007a46:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	0c1a      	lsrs	r2, r3, #16
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f002 020f 	and.w	r2, r2, #15
 8007a54:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	b292      	uxth	r2, r2
 8007a5e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fc6c 	bl	800833e <RTC_ExitInitMode>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d004      	beq.n	8007a76 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2204      	movs	r2, #4
 8007a70:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e00c      	b.n	8007a90 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
  }
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	40006c00 	.word	0x40006c00

08007a9c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007a9c:	b590      	push	{r4, r7, lr}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	617b      	str	r3, [r7, #20]
 8007aac:	2300      	movs	r3, #0
 8007aae:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d002      	beq.n	8007abc <HAL_RTC_SetTime+0x20>
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e080      	b.n	8007bc2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	7c1b      	ldrb	r3, [r3, #16]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d101      	bne.n	8007acc <HAL_RTC_SetTime+0x30>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	e07a      	b.n	8007bc2 <HAL_RTC_SetTime+0x126>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d113      	bne.n	8007b06 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007ae8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	785b      	ldrb	r3, [r3, #1]
 8007af0:	4619      	mov	r1, r3
 8007af2:	460b      	mov	r3, r1
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	1a5b      	subs	r3, r3, r1
 8007af8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007afa:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007b00:	4413      	add	r3, r2
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	e01e      	b.n	8007b44 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 fc5c 	bl	80083c8 <RTC_Bcd2ToByte>
 8007b10:	4603      	mov	r3, r0
 8007b12:	461a      	mov	r2, r3
 8007b14:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007b18:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	785b      	ldrb	r3, [r3, #1]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 fc51 	bl	80083c8 <RTC_Bcd2ToByte>
 8007b26:	4603      	mov	r3, r0
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	011b      	lsls	r3, r3, #4
 8007b2e:	1a9b      	subs	r3, r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007b32:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	789b      	ldrb	r3, [r3, #2]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 fc45 	bl	80083c8 <RTC_Bcd2ToByte>
 8007b3e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007b40:	4423      	add	r3, r4
 8007b42:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007b44:	6979      	ldr	r1, [r7, #20]
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f000 fb6a 	bl	8008220 <RTC_WriteTimeCounter>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d007      	beq.n	8007b62 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2204      	movs	r2, #4
 8007b56:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e02f      	b.n	8007bc2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 0205 	bic.w	r2, r2, #5
 8007b70:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 fb7b 	bl	800826e <RTC_ReadAlarmCounter>
 8007b78:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b80:	d018      	beq.n	8007bb4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d214      	bcs.n	8007bb4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8007b90:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8007b94:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007b96:	6939      	ldr	r1, [r7, #16]
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 fb81 	bl	80082a0 <RTC_WriteAlarmCounter>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d007      	beq.n	8007bb4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2204      	movs	r2, #4
 8007ba8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e006      	b.n	8007bc2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
  }
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	371c      	adds	r7, #28
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd90      	pop	{r4, r7, pc}
	...

08007bcc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	61bb      	str	r3, [r7, #24]
 8007bdc:	2300      	movs	r3, #0
 8007bde:	61fb      	str	r3, [r7, #28]
 8007be0:	2300      	movs	r3, #0
 8007be2:	617b      	str	r3, [r7, #20]
 8007be4:	2300      	movs	r3, #0
 8007be6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d002      	beq.n	8007bf4 <HAL_RTC_GetTime+0x28>
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e0b5      	b.n	8007d64 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f003 0304 	and.w	r3, r3, #4
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e0ac      	b.n	8007d64 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 fad8 	bl	80081c0 <RTC_ReadTimeCounter>
 8007c10:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	4a55      	ldr	r2, [pc, #340]	@ (8007d6c <HAL_RTC_GetTime+0x1a0>)
 8007c16:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1a:	0adb      	lsrs	r3, r3, #11
 8007c1c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	4b52      	ldr	r3, [pc, #328]	@ (8007d6c <HAL_RTC_GetTime+0x1a0>)
 8007c22:	fba3 1302 	umull	r1, r3, r3, r2
 8007c26:	0adb      	lsrs	r3, r3, #11
 8007c28:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8007c2c:	fb01 f303 	mul.w	r3, r1, r3
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	4a4f      	ldr	r2, [pc, #316]	@ (8007d70 <HAL_RTC_GetTime+0x1a4>)
 8007c34:	fba2 2303 	umull	r2, r3, r2, r3
 8007c38:	095b      	lsrs	r3, r3, #5
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	4a4a      	ldr	r2, [pc, #296]	@ (8007d6c <HAL_RTC_GetTime+0x1a0>)
 8007c44:	fba2 1203 	umull	r1, r2, r2, r3
 8007c48:	0ad2      	lsrs	r2, r2, #11
 8007c4a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8007c4e:	fb01 f202 	mul.w	r2, r1, r2
 8007c52:	1a9a      	subs	r2, r3, r2
 8007c54:	4b46      	ldr	r3, [pc, #280]	@ (8007d70 <HAL_RTC_GetTime+0x1a4>)
 8007c56:	fba3 1302 	umull	r1, r3, r3, r2
 8007c5a:	0959      	lsrs	r1, r3, #5
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	1a5b      	subs	r3, r3, r1
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	1ad1      	subs	r1, r2, r3
 8007c66:	b2ca      	uxtb	r2, r1
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	2b17      	cmp	r3, #23
 8007c70:	d955      	bls.n	8007d1e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	4a3f      	ldr	r2, [pc, #252]	@ (8007d74 <HAL_RTC_GetTime+0x1a8>)
 8007c76:	fba2 2303 	umull	r2, r3, r2, r3
 8007c7a:	091b      	lsrs	r3, r3, #4
 8007c7c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8007c7e:	6939      	ldr	r1, [r7, #16]
 8007c80:	4b3c      	ldr	r3, [pc, #240]	@ (8007d74 <HAL_RTC_GetTime+0x1a8>)
 8007c82:	fba3 2301 	umull	r2, r3, r3, r1
 8007c86:	091a      	lsrs	r2, r3, #4
 8007c88:	4613      	mov	r3, r2
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	4413      	add	r3, r2
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	1aca      	subs	r2, r1, r3
 8007c92:	b2d2      	uxtb	r2, r2
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 fae8 	bl	800826e <RTC_ReadAlarmCounter>
 8007c9e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca6:	d008      	beq.n	8007cba <HAL_RTC_GetTime+0xee>
 8007ca8:	69fa      	ldr	r2, [r7, #28]
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d904      	bls.n	8007cba <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8007cb0:	69fa      	ldr	r2, [r7, #28]
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	61fb      	str	r3, [r7, #28]
 8007cb8:	e002      	b.n	8007cc0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8007cba:	f04f 33ff 	mov.w	r3, #4294967295
 8007cbe:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	4a2d      	ldr	r2, [pc, #180]	@ (8007d78 <HAL_RTC_GetTime+0x1ac>)
 8007cc4:	fb02 f303 	mul.w	r3, r2, r3
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007cce:	69b9      	ldr	r1, [r7, #24]
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 faa5 	bl	8008220 <RTC_WriteTimeCounter>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d001      	beq.n	8007ce0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e041      	b.n	8007d64 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce6:	d00c      	beq.n	8007d02 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8007ce8:	69fa      	ldr	r2, [r7, #28]
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	4413      	add	r3, r2
 8007cee:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007cf0:	69f9      	ldr	r1, [r7, #28]
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 fad4 	bl	80082a0 <RTC_WriteAlarmCounter>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e030      	b.n	8007d64 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007d02:	69f9      	ldr	r1, [r7, #28]
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 facb 	bl	80082a0 <RTC_WriteAlarmCounter>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e027      	b.n	8007d64 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8007d14:	6979      	ldr	r1, [r7, #20]
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f000 fb73 	bl	8008402 <RTC_DateUpdate>
 8007d1c:	e003      	b.n	8007d26 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d01a      	beq.n	8007d62 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 fb2c 	bl	800838e <RTC_ByteToBcd2>
 8007d36:	4603      	mov	r3, r0
 8007d38:	461a      	mov	r2, r3
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	785b      	ldrb	r3, [r3, #1]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 fb23 	bl	800838e <RTC_ByteToBcd2>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	789b      	ldrb	r3, [r3, #2]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 fb1a 	bl	800838e <RTC_ByteToBcd2>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3720      	adds	r7, #32
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	91a2b3c5 	.word	0x91a2b3c5
 8007d70:	88888889 	.word	0x88888889
 8007d74:	aaaaaaab 	.word	0xaaaaaaab
 8007d78:	00015180 	.word	0x00015180

08007d7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b088      	sub	sp, #32
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	61fb      	str	r3, [r7, #28]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	61bb      	str	r3, [r7, #24]
 8007d90:	2300      	movs	r3, #0
 8007d92:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <HAL_RTC_SetDate+0x24>
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e097      	b.n	8007ed4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	7c1b      	ldrb	r3, [r3, #16]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d101      	bne.n	8007db0 <HAL_RTC_SetDate+0x34>
 8007dac:	2302      	movs	r3, #2
 8007dae:	e091      	b.n	8007ed4 <HAL_RTC_SetDate+0x158>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2201      	movs	r2, #1
 8007db4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2202      	movs	r2, #2
 8007dba:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10c      	bne.n	8007ddc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	78da      	ldrb	r2, [r3, #3]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	785a      	ldrb	r2, [r3, #1]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	789a      	ldrb	r2, [r3, #2]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	739a      	strb	r2, [r3, #14]
 8007dda:	e01a      	b.n	8007e12 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	78db      	ldrb	r3, [r3, #3]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 faf1 	bl	80083c8 <RTC_Bcd2ToByte>
 8007de6:	4603      	mov	r3, r0
 8007de8:	461a      	mov	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	785b      	ldrb	r3, [r3, #1]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 fae8 	bl	80083c8 <RTC_Bcd2ToByte>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	789b      	ldrb	r3, [r3, #2]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 fadf 	bl	80083c8 <RTC_Bcd2ToByte>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	7bdb      	ldrb	r3, [r3, #15]
 8007e16:	4618      	mov	r0, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	7b59      	ldrb	r1, [r3, #13]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	7b9b      	ldrb	r3, [r3, #14]
 8007e20:	461a      	mov	r2, r3
 8007e22:	f000 fbc9 	bl	80085b8 <RTC_WeekDayNum>
 8007e26:	4603      	mov	r3, r0
 8007e28:	461a      	mov	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	7b1a      	ldrb	r2, [r3, #12]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f9c2 	bl	80081c0 <RTC_ReadTimeCounter>
 8007e3c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	4a26      	ldr	r2, [pc, #152]	@ (8007edc <HAL_RTC_SetDate+0x160>)
 8007e42:	fba2 2303 	umull	r2, r3, r2, r3
 8007e46:	0adb      	lsrs	r3, r3, #11
 8007e48:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b18      	cmp	r3, #24
 8007e4e:	d93a      	bls.n	8007ec6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	4a23      	ldr	r2, [pc, #140]	@ (8007ee0 <HAL_RTC_SetDate+0x164>)
 8007e54:	fba2 2303 	umull	r2, r3, r2, r3
 8007e58:	091b      	lsrs	r3, r3, #4
 8007e5a:	4a22      	ldr	r2, [pc, #136]	@ (8007ee4 <HAL_RTC_SetDate+0x168>)
 8007e5c:	fb02 f303 	mul.w	r3, r2, r3
 8007e60:	69fa      	ldr	r2, [r7, #28]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007e66:	69f9      	ldr	r1, [r7, #28]
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 f9d9 	bl	8008220 <RTC_WriteTimeCounter>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d007      	beq.n	8007e84 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2204      	movs	r2, #4
 8007e78:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e027      	b.n	8007ed4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 f9f2 	bl	800826e <RTC_ReadAlarmCounter>
 8007e8a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e92:	d018      	beq.n	8007ec6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d214      	bcs.n	8007ec6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8007ea2:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8007ea6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007ea8:	69b9      	ldr	r1, [r7, #24]
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 f9f8 	bl	80082a0 <RTC_WriteAlarmCounter>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d007      	beq.n	8007ec6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2204      	movs	r2, #4
 8007eba:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e006      	b.n	8007ed4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3720      	adds	r7, #32
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	91a2b3c5 	.word	0x91a2b3c5
 8007ee0:	aaaaaaab 	.word	0xaaaaaaab
 8007ee4:	00015180 	.word	0x00015180

08007ee8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8007ef4:	f107 0314 	add.w	r3, r7, #20
 8007ef8:	2100      	movs	r1, #0
 8007efa:	460a      	mov	r2, r1
 8007efc:	801a      	strh	r2, [r3, #0]
 8007efe:	460a      	mov	r2, r1
 8007f00:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d002      	beq.n	8007f0e <HAL_RTC_GetDate+0x26>
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e03a      	b.n	8007f88 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8007f12:	f107 0314 	add.w	r3, r7, #20
 8007f16:	2200      	movs	r2, #0
 8007f18:	4619      	mov	r1, r3
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f7ff fe56 	bl	8007bcc <HAL_RTC_GetTime>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e02e      	b.n	8007f88 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	7b1a      	ldrb	r2, [r3, #12]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	7bda      	ldrb	r2, [r3, #15]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	7b5a      	ldrb	r2, [r3, #13]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	7b9a      	ldrb	r2, [r3, #14]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d01a      	beq.n	8007f86 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	78db      	ldrb	r3, [r3, #3]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 fa1a 	bl	800838e <RTC_ByteToBcd2>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	785b      	ldrb	r3, [r3, #1]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 fa11 	bl	800838e <RTC_ByteToBcd2>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	461a      	mov	r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	789b      	ldrb	r3, [r3, #2]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 fa08 	bl	800838e <RTC_ByteToBcd2>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	461a      	mov	r2, r3
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007f90:	b590      	push	{r4, r7, lr}
 8007f92:	b089      	sub	sp, #36	@ 0x24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8007fa0:	f107 0314 	add.w	r3, r7, #20
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	460a      	mov	r2, r1
 8007fa8:	801a      	strh	r2, [r3, #0]
 8007faa:	460a      	mov	r2, r1
 8007fac:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <HAL_RTC_SetAlarm_IT+0x2a>
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e099      	b.n	80080f2 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	7c1b      	ldrb	r3, [r3, #16]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d101      	bne.n	8007fca <HAL_RTC_SetAlarm_IT+0x3a>
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e093      	b.n	80080f2 <HAL_RTC_SetAlarm_IT+0x162>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8007fd6:	f107 0314 	add.w	r3, r7, #20
 8007fda:	2200      	movs	r2, #0
 8007fdc:	4619      	mov	r1, r3
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f7ff fdf4 	bl	8007bcc <HAL_RTC_GetTime>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e081      	b.n	80080f2 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8007fee:	7d3b      	ldrb	r3, [r7, #20]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007ff6:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8007ffa:	7d7b      	ldrb	r3, [r7, #21]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	460b      	mov	r3, r1
 8008000:	011b      	lsls	r3, r3, #4
 8008002:	1a5b      	subs	r3, r3, r1
 8008004:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8008006:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8008008:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800800a:	4413      	add	r3, r2
 800800c:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d113      	bne.n	800803c <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	461a      	mov	r2, r3
 800801a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800801e:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	785b      	ldrb	r3, [r3, #1]
 8008026:	4619      	mov	r1, r3
 8008028:	460b      	mov	r3, r1
 800802a:	011b      	lsls	r3, r3, #4
 800802c:	1a5b      	subs	r3, r3, r1
 800802e:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8008030:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8008036:	4413      	add	r3, r2
 8008038:	61fb      	str	r3, [r7, #28]
 800803a:	e01e      	b.n	800807a <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	4618      	mov	r0, r3
 8008042:	f000 f9c1 	bl	80083c8 <RTC_Bcd2ToByte>
 8008046:	4603      	mov	r3, r0
 8008048:	461a      	mov	r2, r3
 800804a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800804e:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	785b      	ldrb	r3, [r3, #1]
 8008056:	4618      	mov	r0, r3
 8008058:	f000 f9b6 	bl	80083c8 <RTC_Bcd2ToByte>
 800805c:	4603      	mov	r3, r0
 800805e:	461a      	mov	r2, r3
 8008060:	4613      	mov	r3, r2
 8008062:	011b      	lsls	r3, r3, #4
 8008064:	1a9b      	subs	r3, r3, r2
 8008066:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8008068:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	789b      	ldrb	r3, [r3, #2]
 800806e:	4618      	mov	r0, r3
 8008070:	f000 f9aa 	bl	80083c8 <RTC_Bcd2ToByte>
 8008074:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8008076:	4423      	add	r3, r4
 8008078:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800807a:	69fa      	ldr	r2, [r7, #28]
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	429a      	cmp	r2, r3
 8008080:	d205      	bcs.n	800808e <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8008088:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800808c:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800808e:	69f9      	ldr	r1, [r7, #28]
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f000 f905 	bl	80082a0 <RTC_WriteAlarmCounter>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d007      	beq.n	80080ac <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2204      	movs	r2, #4
 80080a0:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e022      	b.n	80080f2 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0202 	bic.w	r2, r2, #2
 80080ba:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f042 0202 	orr.w	r2, r2, #2
 80080ca:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80080cc:	4b0b      	ldr	r3, [pc, #44]	@ (80080fc <HAL_RTC_SetAlarm_IT+0x16c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a0a      	ldr	r2, [pc, #40]	@ (80080fc <HAL_RTC_SetAlarm_IT+0x16c>)
 80080d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080d6:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80080d8:	4b08      	ldr	r3, [pc, #32]	@ (80080fc <HAL_RTC_SetAlarm_IT+0x16c>)
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	4a07      	ldr	r2, [pc, #28]	@ (80080fc <HAL_RTC_SetAlarm_IT+0x16c>)
 80080de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080e2:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2201      	movs	r2, #1
 80080e8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80080f0:	2300      	movs	r3, #0
  }
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3724      	adds	r7, #36	@ 0x24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd90      	pop	{r4, r7, pc}
 80080fa:	bf00      	nop
 80080fc:	40010400 	.word	0x40010400

08008100 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d011      	beq.n	800813a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00a      	beq.n	800813a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f815 	bl	8008154 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 0202 	bic.w	r2, r2, #2
 8008138:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800813a:	4b05      	ldr	r3, [pc, #20]	@ (8008150 <HAL_RTC_AlarmIRQHandler+0x50>)
 800813c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008140:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	745a      	strb	r2, [r3, #17]
}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	40010400 	.word	0x40010400

08008154 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	bc80      	pop	{r7}
 8008164:	4770      	bx	lr

08008166 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e01d      	b.n	80081b8 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685a      	ldr	r2, [r3, #4]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0208 	bic.w	r2, r2, #8
 800818a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800818c:	f7fb fd08 	bl	8003ba0 <HAL_GetTick>
 8008190:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008192:	e009      	b.n	80081a8 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008194:	f7fb fd04 	bl	8003ba0 <HAL_GetTick>
 8008198:	4602      	mov	r2, r0
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80081a2:	d901      	bls.n	80081a8 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e007      	b.n	80081b8 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f003 0308 	and.w	r3, r3, #8
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0ee      	beq.n	8008194 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	827b      	strh	r3, [r7, #18]
 80081cc:	2300      	movs	r3, #0
 80081ce:	823b      	strh	r3, [r7, #16]
 80081d0:	2300      	movs	r3, #0
 80081d2:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80081d4:	2300      	movs	r3, #0
 80081d6:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80081f0:	8a7a      	ldrh	r2, [r7, #18]
 80081f2:	8a3b      	ldrh	r3, [r7, #16]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d008      	beq.n	800820a <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80081f8:	8a3b      	ldrh	r3, [r7, #16]
 80081fa:	041a      	lsls	r2, r3, #16
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	b29b      	uxth	r3, r3
 8008204:	4313      	orrs	r3, r2
 8008206:	617b      	str	r3, [r7, #20]
 8008208:	e004      	b.n	8008214 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800820a:	8a7b      	ldrh	r3, [r7, #18]
 800820c:	041a      	lsls	r2, r3, #16
 800820e:	89fb      	ldrh	r3, [r7, #14]
 8008210:	4313      	orrs	r3, r2
 8008212:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8008214:	697b      	ldr	r3, [r7, #20]
}
 8008216:	4618      	mov	r0, r3
 8008218:	371c      	adds	r7, #28
 800821a:	46bd      	mov	sp, r7
 800821c:	bc80      	pop	{r7}
 800821e:	4770      	bx	lr

08008220 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f85d 	bl	80082ee <RTC_EnterInitMode>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d002      	beq.n	8008240 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	73fb      	strb	r3, [r7, #15]
 800823e:	e011      	b.n	8008264 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	0c12      	lsrs	r2, r2, #16
 8008248:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	b292      	uxth	r2, r2
 8008252:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f872 	bl	800833e <RTC_ExitInitMode>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008264:	7bfb      	ldrb	r3, [r7, #15]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800826e:	b480      	push	{r7}
 8008270:	b085      	sub	sp, #20
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	81fb      	strh	r3, [r7, #14]
 800827a:	2300      	movs	r3, #0
 800827c:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6a1b      	ldr	r3, [r3, #32]
 8008284:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828c:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800828e:	89fb      	ldrh	r3, [r7, #14]
 8008290:	041a      	lsls	r2, r3, #16
 8008292:	89bb      	ldrh	r3, [r7, #12]
 8008294:	4313      	orrs	r3, r2
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr

080082a0 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f81d 	bl	80082ee <RTC_EnterInitMode>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	73fb      	strb	r3, [r7, #15]
 80082be:	e011      	b.n	80082e4 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	683a      	ldr	r2, [r7, #0]
 80082c6:	0c12      	lsrs	r2, r2, #16
 80082c8:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	b292      	uxth	r2, r2
 80082d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f832 	bl	800833e <RTC_ExitInitMode>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80082fa:	f7fb fc51 	bl	8003ba0 <HAL_GetTick>
 80082fe:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008300:	e009      	b.n	8008316 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008302:	f7fb fc4d 	bl	8003ba0 <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008310:	d901      	bls.n	8008316 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e00f      	b.n	8008336 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f003 0320 	and.w	r3, r3, #32
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0ee      	beq.n	8008302 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f042 0210 	orr.w	r2, r2, #16
 8008332:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0210 	bic.w	r2, r2, #16
 8008358:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800835a:	f7fb fc21 	bl	8003ba0 <HAL_GetTick>
 800835e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008360:	e009      	b.n	8008376 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008362:	f7fb fc1d 	bl	8003ba0 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008370:	d901      	bls.n	8008376 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e007      	b.n	8008386 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f003 0320 	and.w	r3, r3, #32
 8008380:	2b00      	cmp	r3, #0
 8008382:	d0ee      	beq.n	8008362 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800838e:	b480      	push	{r7}
 8008390:	b085      	sub	sp, #20
 8008392:	af00      	add	r7, sp, #0
 8008394:	4603      	mov	r3, r0
 8008396:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800839c:	e005      	b.n	80083aa <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3301      	adds	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80083a4:	79fb      	ldrb	r3, [r7, #7]
 80083a6:	3b0a      	subs	r3, #10
 80083a8:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80083aa:	79fb      	ldrb	r3, [r7, #7]
 80083ac:	2b09      	cmp	r3, #9
 80083ae:	d8f6      	bhi.n	800839e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	011b      	lsls	r3, r3, #4
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	b2db      	uxtb	r3, r3
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bc80      	pop	{r7}
 80083c6:	4770      	bx	lr

080083c8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	4603      	mov	r3, r0
 80083d0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	091b      	lsrs	r3, r3, #4
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	461a      	mov	r2, r3
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	f003 030f 	and.w	r3, r3, #15
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	4413      	add	r3, r2
 80083f6:	b2db      	uxtb	r3, r3
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bc80      	pop	{r7}
 8008400:	4770      	bx	lr

08008402 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b086      	sub	sp, #24
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800840c:	2300      	movs	r3, #0
 800840e:	617b      	str	r3, [r7, #20]
 8008410:	2300      	movs	r3, #0
 8008412:	613b      	str	r3, [r7, #16]
 8008414:	2300      	movs	r3, #0
 8008416:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	7bdb      	ldrb	r3, [r3, #15]
 8008420:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	7b5b      	ldrb	r3, [r3, #13]
 8008426:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	7b9b      	ldrb	r3, [r3, #14]
 800842c:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800842e:	2300      	movs	r3, #0
 8008430:	60bb      	str	r3, [r7, #8]
 8008432:	e06f      	b.n	8008514 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d011      	beq.n	800845e <RTC_DateUpdate+0x5c>
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	2b03      	cmp	r3, #3
 800843e:	d00e      	beq.n	800845e <RTC_DateUpdate+0x5c>
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	2b05      	cmp	r3, #5
 8008444:	d00b      	beq.n	800845e <RTC_DateUpdate+0x5c>
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	2b07      	cmp	r3, #7
 800844a:	d008      	beq.n	800845e <RTC_DateUpdate+0x5c>
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	2b08      	cmp	r3, #8
 8008450:	d005      	beq.n	800845e <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b0a      	cmp	r3, #10
 8008456:	d002      	beq.n	800845e <RTC_DateUpdate+0x5c>
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	2b0c      	cmp	r3, #12
 800845c:	d117      	bne.n	800848e <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b1e      	cmp	r3, #30
 8008462:	d803      	bhi.n	800846c <RTC_DateUpdate+0x6a>
      {
        day++;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3301      	adds	r3, #1
 8008468:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800846a:	e050      	b.n	800850e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	2b0c      	cmp	r3, #12
 8008470:	d005      	beq.n	800847e <RTC_DateUpdate+0x7c>
        {
          month++;
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	3301      	adds	r3, #1
 8008476:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008478:	2301      	movs	r3, #1
 800847a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800847c:	e047      	b.n	800850e <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800847e:	2301      	movs	r3, #1
 8008480:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008482:	2301      	movs	r3, #1
 8008484:	60fb      	str	r3, [r7, #12]
          year++;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	3301      	adds	r3, #1
 800848a:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800848c:	e03f      	b.n	800850e <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	2b04      	cmp	r3, #4
 8008492:	d008      	beq.n	80084a6 <RTC_DateUpdate+0xa4>
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	2b06      	cmp	r3, #6
 8008498:	d005      	beq.n	80084a6 <RTC_DateUpdate+0xa4>
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	2b09      	cmp	r3, #9
 800849e:	d002      	beq.n	80084a6 <RTC_DateUpdate+0xa4>
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	2b0b      	cmp	r3, #11
 80084a4:	d10c      	bne.n	80084c0 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b1d      	cmp	r3, #29
 80084aa:	d803      	bhi.n	80084b4 <RTC_DateUpdate+0xb2>
      {
        day++;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3301      	adds	r3, #1
 80084b0:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80084b2:	e02c      	b.n	800850e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	3301      	adds	r3, #1
 80084b8:	613b      	str	r3, [r7, #16]
        day = 1U;
 80084ba:	2301      	movs	r3, #1
 80084bc:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80084be:	e026      	b.n	800850e <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d123      	bne.n	800850e <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2b1b      	cmp	r3, #27
 80084ca:	d803      	bhi.n	80084d4 <RTC_DateUpdate+0xd2>
      {
        day++;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	3301      	adds	r3, #1
 80084d0:	60fb      	str	r3, [r7, #12]
 80084d2:	e01c      	b.n	800850e <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b1c      	cmp	r3, #28
 80084d8:	d111      	bne.n	80084fe <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 f838 	bl	8008554 <RTC_IsLeapYear>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <RTC_DateUpdate+0xf0>
        {
          day++;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3301      	adds	r3, #1
 80084ee:	60fb      	str	r3, [r7, #12]
 80084f0:	e00d      	b.n	800850e <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	3301      	adds	r3, #1
 80084f6:	613b      	str	r3, [r7, #16]
          day = 1U;
 80084f8:	2301      	movs	r3, #1
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	e007      	b.n	800850e <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2b1d      	cmp	r3, #29
 8008502:	d104      	bne.n	800850e <RTC_DateUpdate+0x10c>
      {
        month++;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	3301      	adds	r3, #1
 8008508:	613b      	str	r3, [r7, #16]
        day = 1U;
 800850a:	2301      	movs	r3, #1
 800850c:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	3301      	adds	r3, #1
 8008512:	60bb      	str	r3, [r7, #8]
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	429a      	cmp	r2, r3
 800851a:	d38b      	bcc.n	8008434 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	b2da      	uxtb	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	b2da      	uxtb	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	b2da      	uxtb	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	b2d2      	uxtb	r2, r2
 800853c:	4619      	mov	r1, r3
 800853e:	6978      	ldr	r0, [r7, #20]
 8008540:	f000 f83a 	bl	80085b8 <RTC_WeekDayNum>
 8008544:	4603      	mov	r3, r0
 8008546:	461a      	mov	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	731a      	strb	r2, [r3, #12]
}
 800854c:	bf00      	nop
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800855e:	88fb      	ldrh	r3, [r7, #6]
 8008560:	f003 0303 	and.w	r3, r3, #3
 8008564:	b29b      	uxth	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800856a:	2300      	movs	r3, #0
 800856c:	e01d      	b.n	80085aa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800856e:	88fb      	ldrh	r3, [r7, #6]
 8008570:	4a10      	ldr	r2, [pc, #64]	@ (80085b4 <RTC_IsLeapYear+0x60>)
 8008572:	fba2 1203 	umull	r1, r2, r2, r3
 8008576:	0952      	lsrs	r2, r2, #5
 8008578:	2164      	movs	r1, #100	@ 0x64
 800857a:	fb01 f202 	mul.w	r2, r1, r2
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	b29b      	uxth	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8008586:	2301      	movs	r3, #1
 8008588:	e00f      	b.n	80085aa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800858a:	88fb      	ldrh	r3, [r7, #6]
 800858c:	4a09      	ldr	r2, [pc, #36]	@ (80085b4 <RTC_IsLeapYear+0x60>)
 800858e:	fba2 1203 	umull	r1, r2, r2, r3
 8008592:	09d2      	lsrs	r2, r2, #7
 8008594:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8008598:	fb01 f202 	mul.w	r2, r1, r2
 800859c:	1a9b      	subs	r3, r3, r2
 800859e:	b29b      	uxth	r3, r3
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e000      	b.n	80085aa <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80085a8:	2300      	movs	r3, #0
  }
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bc80      	pop	{r7}
 80085b2:	4770      	bx	lr
 80085b4:	51eb851f 	.word	0x51eb851f

080085b8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	70fb      	strb	r3, [r7, #3]
 80085c4:	4613      	mov	r3, r2
 80085c6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	60bb      	str	r3, [r7, #8]
 80085cc:	2300      	movs	r3, #0
 80085ce:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80085d6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80085d8:	78fb      	ldrb	r3, [r7, #3]
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d82d      	bhi.n	800863a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80085de:	78fa      	ldrb	r2, [r7, #3]
 80085e0:	4613      	mov	r3, r2
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	4413      	add	r3, r2
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	1a9b      	subs	r3, r3, r2
 80085ea:	4a2c      	ldr	r2, [pc, #176]	@ (800869c <RTC_WeekDayNum+0xe4>)
 80085ec:	fba2 2303 	umull	r2, r3, r2, r3
 80085f0:	085a      	lsrs	r2, r3, #1
 80085f2:	78bb      	ldrb	r3, [r7, #2]
 80085f4:	441a      	add	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	441a      	add	r2, r3
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	3b01      	subs	r3, #1
 80085fe:	089b      	lsrs	r3, r3, #2
 8008600:	441a      	add	r2, r3
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	3b01      	subs	r3, #1
 8008606:	4926      	ldr	r1, [pc, #152]	@ (80086a0 <RTC_WeekDayNum+0xe8>)
 8008608:	fba1 1303 	umull	r1, r3, r1, r3
 800860c:	095b      	lsrs	r3, r3, #5
 800860e:	1ad2      	subs	r2, r2, r3
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	3b01      	subs	r3, #1
 8008614:	4922      	ldr	r1, [pc, #136]	@ (80086a0 <RTC_WeekDayNum+0xe8>)
 8008616:	fba1 1303 	umull	r1, r3, r1, r3
 800861a:	09db      	lsrs	r3, r3, #7
 800861c:	4413      	add	r3, r2
 800861e:	1d1a      	adds	r2, r3, #4
 8008620:	4b20      	ldr	r3, [pc, #128]	@ (80086a4 <RTC_WeekDayNum+0xec>)
 8008622:	fba3 1302 	umull	r1, r3, r3, r2
 8008626:	1ad1      	subs	r1, r2, r3
 8008628:	0849      	lsrs	r1, r1, #1
 800862a:	440b      	add	r3, r1
 800862c:	0899      	lsrs	r1, r3, #2
 800862e:	460b      	mov	r3, r1
 8008630:	00db      	lsls	r3, r3, #3
 8008632:	1a5b      	subs	r3, r3, r1
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	e029      	b.n	800868e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800863a:	78fa      	ldrb	r2, [r7, #3]
 800863c:	4613      	mov	r3, r2
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	4413      	add	r3, r2
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	1a9b      	subs	r3, r3, r2
 8008646:	4a15      	ldr	r2, [pc, #84]	@ (800869c <RTC_WeekDayNum+0xe4>)
 8008648:	fba2 2303 	umull	r2, r3, r2, r3
 800864c:	085a      	lsrs	r2, r3, #1
 800864e:	78bb      	ldrb	r3, [r7, #2]
 8008650:	441a      	add	r2, r3
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	441a      	add	r2, r3
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	089b      	lsrs	r3, r3, #2
 800865a:	441a      	add	r2, r3
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	4910      	ldr	r1, [pc, #64]	@ (80086a0 <RTC_WeekDayNum+0xe8>)
 8008660:	fba1 1303 	umull	r1, r3, r1, r3
 8008664:	095b      	lsrs	r3, r3, #5
 8008666:	1ad2      	subs	r2, r2, r3
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	490d      	ldr	r1, [pc, #52]	@ (80086a0 <RTC_WeekDayNum+0xe8>)
 800866c:	fba1 1303 	umull	r1, r3, r1, r3
 8008670:	09db      	lsrs	r3, r3, #7
 8008672:	4413      	add	r3, r2
 8008674:	1c9a      	adds	r2, r3, #2
 8008676:	4b0b      	ldr	r3, [pc, #44]	@ (80086a4 <RTC_WeekDayNum+0xec>)
 8008678:	fba3 1302 	umull	r1, r3, r3, r2
 800867c:	1ad1      	subs	r1, r2, r3
 800867e:	0849      	lsrs	r1, r1, #1
 8008680:	440b      	add	r3, r1
 8008682:	0899      	lsrs	r1, r3, #2
 8008684:	460b      	mov	r3, r1
 8008686:	00db      	lsls	r3, r3, #3
 8008688:	1a5b      	subs	r3, r3, r1
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	b2db      	uxtb	r3, r3
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	bc80      	pop	{r7}
 800869a:	4770      	bx	lr
 800869c:	38e38e39 	.word	0x38e38e39
 80086a0:	51eb851f 	.word	0x51eb851f
 80086a4:	24924925 	.word	0x24924925

080086a8 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d027      	beq.n	800870e <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d020      	beq.n	800870e <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f003 0304 	and.w	r3, r3, #4
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00b      	beq.n	80086f2 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f824 	bl	8008728 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f06f 0204 	mvn.w	r2, #4
 80086e8:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2204      	movs	r2, #4
 80086ee:	745a      	strb	r2, [r3, #17]
 80086f0:	e005      	b.n	80086fe <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f80f 	bl	8008716 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f022 0201 	bic.w	r2, r2, #1
 800870c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 800871e:	bf00      	nop
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	bc80      	pop	{r7}
 8008726:	4770      	bx	lr

08008728 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	bc80      	pop	{r7}
 8008738:	4770      	bx	lr

0800873a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b082      	sub	sp, #8
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e041      	b.n	80087d0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d106      	bne.n	8008766 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7fa ffaf 	bl	80036c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2202      	movs	r2, #2
 800876a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	3304      	adds	r3, #4
 8008776:	4619      	mov	r1, r3
 8008778:	4610      	mov	r0, r2
 800877a:	f000 fd21 	bl	80091c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d001      	beq.n	80087f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e032      	b.n	8008856 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a18      	ldr	r2, [pc, #96]	@ (8008860 <HAL_TIM_Base_Start+0x88>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00e      	beq.n	8008820 <HAL_TIM_Base_Start+0x48>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800880a:	d009      	beq.n	8008820 <HAL_TIM_Base_Start+0x48>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a14      	ldr	r2, [pc, #80]	@ (8008864 <HAL_TIM_Base_Start+0x8c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d004      	beq.n	8008820 <HAL_TIM_Base_Start+0x48>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a13      	ldr	r2, [pc, #76]	@ (8008868 <HAL_TIM_Base_Start+0x90>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d111      	bne.n	8008844 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f003 0307 	and.w	r3, r3, #7
 800882a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b06      	cmp	r3, #6
 8008830:	d010      	beq.n	8008854 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f042 0201 	orr.w	r2, r2, #1
 8008840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008842:	e007      	b.n	8008854 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0201 	orr.w	r2, r2, #1
 8008852:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	bc80      	pop	{r7}
 800885e:	4770      	bx	lr
 8008860:	40012c00 	.word	0x40012c00
 8008864:	40000400 	.word	0x40000400
 8008868:	40000800 	.word	0x40000800

0800886c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6a1a      	ldr	r2, [r3, #32]
 800887a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800887e:	4013      	ands	r3, r2
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10f      	bne.n	80088a4 <HAL_TIM_Base_Stop+0x38>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6a1a      	ldr	r2, [r3, #32]
 800888a:	f240 4344 	movw	r3, #1092	@ 0x444
 800888e:	4013      	ands	r3, r2
 8008890:	2b00      	cmp	r3, #0
 8008892:	d107      	bne.n	80088a4 <HAL_TIM_Base_Stop+0x38>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 0201 	bic.w	r2, r2, #1
 80088a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bc80      	pop	{r7}
 80088b6:	4770      	bx	lr

080088b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d001      	beq.n	80088d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e03a      	b.n	8008946 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2202      	movs	r2, #2
 80088d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f042 0201 	orr.w	r2, r2, #1
 80088e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a18      	ldr	r2, [pc, #96]	@ (8008950 <HAL_TIM_Base_Start_IT+0x98>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d00e      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x58>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088fa:	d009      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x58>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a14      	ldr	r2, [pc, #80]	@ (8008954 <HAL_TIM_Base_Start_IT+0x9c>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d004      	beq.n	8008910 <HAL_TIM_Base_Start_IT+0x58>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a13      	ldr	r2, [pc, #76]	@ (8008958 <HAL_TIM_Base_Start_IT+0xa0>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d111      	bne.n	8008934 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f003 0307 	and.w	r3, r3, #7
 800891a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2b06      	cmp	r3, #6
 8008920:	d010      	beq.n	8008944 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f042 0201 	orr.w	r2, r2, #1
 8008930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008932:	e007      	b.n	8008944 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f042 0201 	orr.w	r2, r2, #1
 8008942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	bc80      	pop	{r7}
 800894e:	4770      	bx	lr
 8008950:	40012c00 	.word	0x40012c00
 8008954:	40000400 	.word	0x40000400
 8008958:	40000800 	.word	0x40000800

0800895c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e041      	b.n	80089f2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d106      	bne.n	8008988 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f839 	bl	80089fa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2202      	movs	r2, #2
 800898c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3304      	adds	r3, #4
 8008998:	4619      	mov	r1, r3
 800899a:	4610      	mov	r0, r2
 800899c:	f000 fc10 	bl	80091c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b083      	sub	sp, #12
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008a02:	bf00      	nop
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bc80      	pop	{r7}
 8008a0a:	4770      	bx	lr

08008a0c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d109      	bne.n	8008a34 <HAL_TIM_OC_Start_IT+0x28>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	bf14      	ite	ne
 8008a2c:	2301      	movne	r3, #1
 8008a2e:	2300      	moveq	r3, #0
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	e022      	b.n	8008a7a <HAL_TIM_OC_Start_IT+0x6e>
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	2b04      	cmp	r3, #4
 8008a38:	d109      	bne.n	8008a4e <HAL_TIM_OC_Start_IT+0x42>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	bf14      	ite	ne
 8008a46:	2301      	movne	r3, #1
 8008a48:	2300      	moveq	r3, #0
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	e015      	b.n	8008a7a <HAL_TIM_OC_Start_IT+0x6e>
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	2b08      	cmp	r3, #8
 8008a52:	d109      	bne.n	8008a68 <HAL_TIM_OC_Start_IT+0x5c>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	bf14      	ite	ne
 8008a60:	2301      	movne	r3, #1
 8008a62:	2300      	moveq	r3, #0
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	e008      	b.n	8008a7a <HAL_TIM_OC_Start_IT+0x6e>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	bf14      	ite	ne
 8008a74:	2301      	movne	r3, #1
 8008a76:	2300      	moveq	r3, #0
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e0a9      	b.n	8008bd6 <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d104      	bne.n	8008a92 <HAL_TIM_OC_Start_IT+0x86>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a90:	e013      	b.n	8008aba <HAL_TIM_OC_Start_IT+0xae>
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d104      	bne.n	8008aa2 <HAL_TIM_OC_Start_IT+0x96>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008aa0:	e00b      	b.n	8008aba <HAL_TIM_OC_Start_IT+0xae>
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b08      	cmp	r3, #8
 8008aa6:	d104      	bne.n	8008ab2 <HAL_TIM_OC_Start_IT+0xa6>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2202      	movs	r2, #2
 8008aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ab0:	e003      	b.n	8008aba <HAL_TIM_OC_Start_IT+0xae>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	2b0c      	cmp	r3, #12
 8008abe:	d841      	bhi.n	8008b44 <HAL_TIM_OC_Start_IT+0x138>
 8008ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ac8 <HAL_TIM_OC_Start_IT+0xbc>)
 8008ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac6:	bf00      	nop
 8008ac8:	08008afd 	.word	0x08008afd
 8008acc:	08008b45 	.word	0x08008b45
 8008ad0:	08008b45 	.word	0x08008b45
 8008ad4:	08008b45 	.word	0x08008b45
 8008ad8:	08008b0f 	.word	0x08008b0f
 8008adc:	08008b45 	.word	0x08008b45
 8008ae0:	08008b45 	.word	0x08008b45
 8008ae4:	08008b45 	.word	0x08008b45
 8008ae8:	08008b21 	.word	0x08008b21
 8008aec:	08008b45 	.word	0x08008b45
 8008af0:	08008b45 	.word	0x08008b45
 8008af4:	08008b45 	.word	0x08008b45
 8008af8:	08008b33 	.word	0x08008b33
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68da      	ldr	r2, [r3, #12]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f042 0202 	orr.w	r2, r2, #2
 8008b0a:	60da      	str	r2, [r3, #12]
      break;
 8008b0c:	e01d      	b.n	8008b4a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68da      	ldr	r2, [r3, #12]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f042 0204 	orr.w	r2, r2, #4
 8008b1c:	60da      	str	r2, [r3, #12]
      break;
 8008b1e:	e014      	b.n	8008b4a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68da      	ldr	r2, [r3, #12]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f042 0208 	orr.w	r2, r2, #8
 8008b2e:	60da      	str	r2, [r3, #12]
      break;
 8008b30:	e00b      	b.n	8008b4a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68da      	ldr	r2, [r3, #12]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f042 0210 	orr.w	r2, r2, #16
 8008b40:	60da      	str	r2, [r3, #12]
      break;
 8008b42:	e002      	b.n	8008b4a <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	73fb      	strb	r3, [r7, #15]
      break;
 8008b48:	bf00      	nop
  }

  if (status == HAL_OK)
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d141      	bne.n	8008bd4 <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2201      	movs	r2, #1
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 fdbd 	bl	80096d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a1f      	ldr	r2, [pc, #124]	@ (8008be0 <HAL_TIM_OC_Start_IT+0x1d4>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d107      	bne.n	8008b78 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b76:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a18      	ldr	r2, [pc, #96]	@ (8008be0 <HAL_TIM_OC_Start_IT+0x1d4>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d00e      	beq.n	8008ba0 <HAL_TIM_OC_Start_IT+0x194>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b8a:	d009      	beq.n	8008ba0 <HAL_TIM_OC_Start_IT+0x194>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a14      	ldr	r2, [pc, #80]	@ (8008be4 <HAL_TIM_OC_Start_IT+0x1d8>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d004      	beq.n	8008ba0 <HAL_TIM_OC_Start_IT+0x194>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a13      	ldr	r2, [pc, #76]	@ (8008be8 <HAL_TIM_OC_Start_IT+0x1dc>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d111      	bne.n	8008bc4 <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2b06      	cmp	r3, #6
 8008bb0:	d010      	beq.n	8008bd4 <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f042 0201 	orr.w	r2, r2, #1
 8008bc0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bc2:	e007      	b.n	8008bd4 <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f042 0201 	orr.w	r2, r2, #1
 8008bd2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	40012c00 	.word	0x40012c00
 8008be4:	40000400 	.word	0x40000400
 8008be8:	40000800 	.word	0x40000800

08008bec <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b0c      	cmp	r3, #12
 8008bfe:	d841      	bhi.n	8008c84 <HAL_TIM_OC_Stop_IT+0x98>
 8008c00:	a201      	add	r2, pc, #4	@ (adr r2, 8008c08 <HAL_TIM_OC_Stop_IT+0x1c>)
 8008c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c06:	bf00      	nop
 8008c08:	08008c3d 	.word	0x08008c3d
 8008c0c:	08008c85 	.word	0x08008c85
 8008c10:	08008c85 	.word	0x08008c85
 8008c14:	08008c85 	.word	0x08008c85
 8008c18:	08008c4f 	.word	0x08008c4f
 8008c1c:	08008c85 	.word	0x08008c85
 8008c20:	08008c85 	.word	0x08008c85
 8008c24:	08008c85 	.word	0x08008c85
 8008c28:	08008c61 	.word	0x08008c61
 8008c2c:	08008c85 	.word	0x08008c85
 8008c30:	08008c85 	.word	0x08008c85
 8008c34:	08008c85 	.word	0x08008c85
 8008c38:	08008c73 	.word	0x08008c73
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f022 0202 	bic.w	r2, r2, #2
 8008c4a:	60da      	str	r2, [r3, #12]
      break;
 8008c4c:	e01d      	b.n	8008c8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 0204 	bic.w	r2, r2, #4
 8008c5c:	60da      	str	r2, [r3, #12]
      break;
 8008c5e:	e014      	b.n	8008c8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68da      	ldr	r2, [r3, #12]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f022 0208 	bic.w	r2, r2, #8
 8008c6e:	60da      	str	r2, [r3, #12]
      break;
 8008c70:	e00b      	b.n	8008c8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68da      	ldr	r2, [r3, #12]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f022 0210 	bic.w	r2, r2, #16
 8008c80:	60da      	str	r2, [r3, #12]
      break;
 8008c82:	e002      	b.n	8008c8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	73fb      	strb	r3, [r7, #15]
      break;
 8008c88:	bf00      	nop
  }

  if (status == HAL_OK)
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d157      	bne.n	8008d40 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2200      	movs	r2, #0
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 fd1d 	bl	80096d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8008d4c <HAL_TIM_OC_Stop_IT+0x160>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d117      	bne.n	8008cd8 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6a1a      	ldr	r2, [r3, #32]
 8008cae:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10f      	bne.n	8008cd8 <HAL_TIM_OC_Stop_IT+0xec>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6a1a      	ldr	r2, [r3, #32]
 8008cbe:	f240 4344 	movw	r3, #1092	@ 0x444
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d107      	bne.n	8008cd8 <HAL_TIM_OC_Stop_IT+0xec>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008cd6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6a1a      	ldr	r2, [r3, #32]
 8008cde:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10f      	bne.n	8008d08 <HAL_TIM_OC_Stop_IT+0x11c>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6a1a      	ldr	r2, [r3, #32]
 8008cee:	f240 4344 	movw	r3, #1092	@ 0x444
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d107      	bne.n	8008d08 <HAL_TIM_OC_Stop_IT+0x11c>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f022 0201 	bic.w	r2, r2, #1
 8008d06:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d104      	bne.n	8008d18 <HAL_TIM_OC_Stop_IT+0x12c>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d16:	e013      	b.n	8008d40 <HAL_TIM_OC_Stop_IT+0x154>
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	2b04      	cmp	r3, #4
 8008d1c:	d104      	bne.n	8008d28 <HAL_TIM_OC_Stop_IT+0x13c>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d26:	e00b      	b.n	8008d40 <HAL_TIM_OC_Stop_IT+0x154>
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	2b08      	cmp	r3, #8
 8008d2c:	d104      	bne.n	8008d38 <HAL_TIM_OC_Stop_IT+0x14c>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d36:	e003      	b.n	8008d40 <HAL_TIM_OC_Stop_IT+0x154>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	40012c00 	.word	0x40012c00

08008d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d020      	beq.n	8008db4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f003 0302 	and.w	r3, r3, #2
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d01b      	beq.n	8008db4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f06f 0202 	mvn.w	r2, #2
 8008d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d003      	beq.n	8008da2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f9f4 	bl	8009188 <HAL_TIM_IC_CaptureCallback>
 8008da0:	e005      	b.n	8008dae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7f8 fe68 	bl	8001a78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f9f6 	bl	800919a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	f003 0304 	and.w	r3, r3, #4
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d020      	beq.n	8008e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f003 0304 	and.w	r3, r3, #4
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d01b      	beq.n	8008e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f06f 0204 	mvn.w	r2, #4
 8008dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f9ce 	bl	8009188 <HAL_TIM_IC_CaptureCallback>
 8008dec:	e005      	b.n	8008dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7f8 fe42 	bl	8001a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f9d0 	bl	800919a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	f003 0308 	and.w	r3, r3, #8
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d020      	beq.n	8008e4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f003 0308 	and.w	r3, r3, #8
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d01b      	beq.n	8008e4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f06f 0208 	mvn.w	r2, #8
 8008e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2204      	movs	r2, #4
 8008e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	f003 0303 	and.w	r3, r3, #3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f9a8 	bl	8009188 <HAL_TIM_IC_CaptureCallback>
 8008e38:	e005      	b.n	8008e46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7f8 fe1c 	bl	8001a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f9aa 	bl	800919a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f003 0310 	and.w	r3, r3, #16
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d020      	beq.n	8008e98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f003 0310 	and.w	r3, r3, #16
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d01b      	beq.n	8008e98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f06f 0210 	mvn.w	r2, #16
 8008e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2208      	movs	r2, #8
 8008e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f982 	bl	8009188 <HAL_TIM_IC_CaptureCallback>
 8008e84:	e005      	b.n	8008e92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7f8 fdf6 	bl	8001a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f984 	bl	800919a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00c      	beq.n	8008ebc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d007      	beq.n	8008ebc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f06f 0201 	mvn.w	r2, #1
 8008eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f95d 	bl	8009176 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00c      	beq.n	8008ee0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d007      	beq.n	8008ee0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fc87 	bl	80097ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00c      	beq.n	8008f04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d007      	beq.n	8008f04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f954 	bl	80091ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f003 0320 	and.w	r3, r3, #32
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00c      	beq.n	8008f28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f003 0320 	and.w	r3, r3, #32
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d007      	beq.n	8008f28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f06f 0220 	mvn.w	r2, #32
 8008f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fc5a 	bl	80097dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f28:	bf00      	nop
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d101      	bne.n	8008f4e <HAL_TIM_OC_ConfigChannel+0x1e>
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	e048      	b.n	8008fe0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b0c      	cmp	r3, #12
 8008f5a:	d839      	bhi.n	8008fd0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8008f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f64 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f62:	bf00      	nop
 8008f64:	08008f99 	.word	0x08008f99
 8008f68:	08008fd1 	.word	0x08008fd1
 8008f6c:	08008fd1 	.word	0x08008fd1
 8008f70:	08008fd1 	.word	0x08008fd1
 8008f74:	08008fa7 	.word	0x08008fa7
 8008f78:	08008fd1 	.word	0x08008fd1
 8008f7c:	08008fd1 	.word	0x08008fd1
 8008f80:	08008fd1 	.word	0x08008fd1
 8008f84:	08008fb5 	.word	0x08008fb5
 8008f88:	08008fd1 	.word	0x08008fd1
 8008f8c:	08008fd1 	.word	0x08008fd1
 8008f90:	08008fd1 	.word	0x08008fd1
 8008f94:	08008fc3 	.word	0x08008fc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68b9      	ldr	r1, [r7, #8]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 f97c 	bl	800929c <TIM_OC1_SetConfig>
      break;
 8008fa4:	e017      	b.n	8008fd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68b9      	ldr	r1, [r7, #8]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f000 f9db 	bl	8009368 <TIM_OC2_SetConfig>
      break;
 8008fb2:	e010      	b.n	8008fd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68b9      	ldr	r1, [r7, #8]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fa3e 	bl	800943c <TIM_OC3_SetConfig>
      break;
 8008fc0:	e009      	b.n	8008fd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68b9      	ldr	r1, [r7, #8]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 faa1 	bl	8009510 <TIM_OC4_SetConfig>
      break;
 8008fce:	e002      	b.n	8008fd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8008fd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d101      	bne.n	8009004 <HAL_TIM_ConfigClockSource+0x1c>
 8009000:	2302      	movs	r3, #2
 8009002:	e0b4      	b.n	800916e <HAL_TIM_ConfigClockSource+0x186>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2202      	movs	r2, #2
 8009010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800902a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800903c:	d03e      	beq.n	80090bc <HAL_TIM_ConfigClockSource+0xd4>
 800903e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009042:	f200 8087 	bhi.w	8009154 <HAL_TIM_ConfigClockSource+0x16c>
 8009046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800904a:	f000 8086 	beq.w	800915a <HAL_TIM_ConfigClockSource+0x172>
 800904e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009052:	d87f      	bhi.n	8009154 <HAL_TIM_ConfigClockSource+0x16c>
 8009054:	2b70      	cmp	r3, #112	@ 0x70
 8009056:	d01a      	beq.n	800908e <HAL_TIM_ConfigClockSource+0xa6>
 8009058:	2b70      	cmp	r3, #112	@ 0x70
 800905a:	d87b      	bhi.n	8009154 <HAL_TIM_ConfigClockSource+0x16c>
 800905c:	2b60      	cmp	r3, #96	@ 0x60
 800905e:	d050      	beq.n	8009102 <HAL_TIM_ConfigClockSource+0x11a>
 8009060:	2b60      	cmp	r3, #96	@ 0x60
 8009062:	d877      	bhi.n	8009154 <HAL_TIM_ConfigClockSource+0x16c>
 8009064:	2b50      	cmp	r3, #80	@ 0x50
 8009066:	d03c      	beq.n	80090e2 <HAL_TIM_ConfigClockSource+0xfa>
 8009068:	2b50      	cmp	r3, #80	@ 0x50
 800906a:	d873      	bhi.n	8009154 <HAL_TIM_ConfigClockSource+0x16c>
 800906c:	2b40      	cmp	r3, #64	@ 0x40
 800906e:	d058      	beq.n	8009122 <HAL_TIM_ConfigClockSource+0x13a>
 8009070:	2b40      	cmp	r3, #64	@ 0x40
 8009072:	d86f      	bhi.n	8009154 <HAL_TIM_ConfigClockSource+0x16c>
 8009074:	2b30      	cmp	r3, #48	@ 0x30
 8009076:	d064      	beq.n	8009142 <HAL_TIM_ConfigClockSource+0x15a>
 8009078:	2b30      	cmp	r3, #48	@ 0x30
 800907a:	d86b      	bhi.n	8009154 <HAL_TIM_ConfigClockSource+0x16c>
 800907c:	2b20      	cmp	r3, #32
 800907e:	d060      	beq.n	8009142 <HAL_TIM_ConfigClockSource+0x15a>
 8009080:	2b20      	cmp	r3, #32
 8009082:	d867      	bhi.n	8009154 <HAL_TIM_ConfigClockSource+0x16c>
 8009084:	2b00      	cmp	r3, #0
 8009086:	d05c      	beq.n	8009142 <HAL_TIM_ConfigClockSource+0x15a>
 8009088:	2b10      	cmp	r3, #16
 800908a:	d05a      	beq.n	8009142 <HAL_TIM_ConfigClockSource+0x15a>
 800908c:	e062      	b.n	8009154 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800909e:	f000 fafc 	bl	800969a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80090b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	609a      	str	r2, [r3, #8]
      break;
 80090ba:	e04f      	b.n	800915c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090cc:	f000 fae5 	bl	800969a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689a      	ldr	r2, [r3, #8]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090de:	609a      	str	r2, [r3, #8]
      break;
 80090e0:	e03c      	b.n	800915c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ee:	461a      	mov	r2, r3
 80090f0:	f000 fa5c 	bl	80095ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2150      	movs	r1, #80	@ 0x50
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 fab3 	bl	8009666 <TIM_ITRx_SetConfig>
      break;
 8009100:	e02c      	b.n	800915c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800910e:	461a      	mov	r2, r3
 8009110:	f000 fa7a 	bl	8009608 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2160      	movs	r1, #96	@ 0x60
 800911a:	4618      	mov	r0, r3
 800911c:	f000 faa3 	bl	8009666 <TIM_ITRx_SetConfig>
      break;
 8009120:	e01c      	b.n	800915c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800912e:	461a      	mov	r2, r3
 8009130:	f000 fa3c 	bl	80095ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2140      	movs	r1, #64	@ 0x40
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fa93 	bl	8009666 <TIM_ITRx_SetConfig>
      break;
 8009140:	e00c      	b.n	800915c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4619      	mov	r1, r3
 800914c:	4610      	mov	r0, r2
 800914e:	f000 fa8a 	bl	8009666 <TIM_ITRx_SetConfig>
      break;
 8009152:	e003      	b.n	800915c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	73fb      	strb	r3, [r7, #15]
      break;
 8009158:	e000      	b.n	800915c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800915a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800916c:	7bfb      	ldrb	r3, [r7, #15]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009176:	b480      	push	{r7}
 8009178:	b083      	sub	sp, #12
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800917e:	bf00      	nop
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	bc80      	pop	{r7}
 8009186:	4770      	bx	lr

08009188 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	bc80      	pop	{r7}
 8009198:	4770      	bx	lr

0800919a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091a2:	bf00      	nop
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bc80      	pop	{r7}
 80091aa:	4770      	bx	lr

080091ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bc80      	pop	{r7}
 80091bc:	4770      	bx	lr
	...

080091c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a2f      	ldr	r2, [pc, #188]	@ (8009290 <TIM_Base_SetConfig+0xd0>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d00b      	beq.n	80091f0 <TIM_Base_SetConfig+0x30>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091de:	d007      	beq.n	80091f0 <TIM_Base_SetConfig+0x30>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a2c      	ldr	r2, [pc, #176]	@ (8009294 <TIM_Base_SetConfig+0xd4>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d003      	beq.n	80091f0 <TIM_Base_SetConfig+0x30>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a2b      	ldr	r2, [pc, #172]	@ (8009298 <TIM_Base_SetConfig+0xd8>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d108      	bne.n	8009202 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a22      	ldr	r2, [pc, #136]	@ (8009290 <TIM_Base_SetConfig+0xd0>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d00b      	beq.n	8009222 <TIM_Base_SetConfig+0x62>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009210:	d007      	beq.n	8009222 <TIM_Base_SetConfig+0x62>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a1f      	ldr	r2, [pc, #124]	@ (8009294 <TIM_Base_SetConfig+0xd4>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d003      	beq.n	8009222 <TIM_Base_SetConfig+0x62>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a1e      	ldr	r2, [pc, #120]	@ (8009298 <TIM_Base_SetConfig+0xd8>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d108      	bne.n	8009234 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	4313      	orrs	r3, r2
 8009232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	4313      	orrs	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	689a      	ldr	r2, [r3, #8]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a0d      	ldr	r2, [pc, #52]	@ (8009290 <TIM_Base_SetConfig+0xd0>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d103      	bne.n	8009268 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	691a      	ldr	r2, [r3, #16]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d005      	beq.n	8009286 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	f023 0201 	bic.w	r2, r3, #1
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	611a      	str	r2, [r3, #16]
  }
}
 8009286:	bf00      	nop
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	bc80      	pop	{r7}
 800928e:	4770      	bx	lr
 8009290:	40012c00 	.word	0x40012c00
 8009294:	40000400 	.word	0x40000400
 8009298:	40000800 	.word	0x40000800

0800929c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800929c:	b480      	push	{r7}
 800929e:	b087      	sub	sp, #28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a1b      	ldr	r3, [r3, #32]
 80092b0:	f023 0201 	bic.w	r2, r3, #1
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f023 0303 	bic.w	r3, r3, #3
 80092d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	4313      	orrs	r3, r2
 80092dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	f023 0302 	bic.w	r3, r3, #2
 80092e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a1c      	ldr	r2, [pc, #112]	@ (8009364 <TIM_OC1_SetConfig+0xc8>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d10c      	bne.n	8009312 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	f023 0308 	bic.w	r3, r3, #8
 80092fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	4313      	orrs	r3, r2
 8009308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f023 0304 	bic.w	r3, r3, #4
 8009310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a13      	ldr	r2, [pc, #76]	@ (8009364 <TIM_OC1_SetConfig+0xc8>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d111      	bne.n	800933e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	4313      	orrs	r3, r2
 8009332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	4313      	orrs	r3, r2
 800933c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	697a      	ldr	r2, [r7, #20]
 8009356:	621a      	str	r2, [r3, #32]
}
 8009358:	bf00      	nop
 800935a:	371c      	adds	r7, #28
 800935c:	46bd      	mov	sp, r7
 800935e:	bc80      	pop	{r7}
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	40012c00 	.word	0x40012c00

08009368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009368:	b480      	push	{r7}
 800936a:	b087      	sub	sp, #28
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	f023 0210 	bic.w	r2, r3, #16
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800939e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	021b      	lsls	r3, r3, #8
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	f023 0320 	bic.w	r3, r3, #32
 80093b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	011b      	lsls	r3, r3, #4
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	4313      	orrs	r3, r2
 80093be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a1d      	ldr	r2, [pc, #116]	@ (8009438 <TIM_OC2_SetConfig+0xd0>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d10d      	bne.n	80093e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	011b      	lsls	r3, r3, #4
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	4313      	orrs	r3, r2
 80093da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a14      	ldr	r2, [pc, #80]	@ (8009438 <TIM_OC2_SetConfig+0xd0>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d113      	bne.n	8009414 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80093f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80093fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	695b      	ldr	r3, [r3, #20]
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	693a      	ldr	r2, [r7, #16]
 8009404:	4313      	orrs	r3, r2
 8009406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	693a      	ldr	r2, [r7, #16]
 8009410:	4313      	orrs	r3, r2
 8009412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	621a      	str	r2, [r3, #32]
}
 800942e:	bf00      	nop
 8009430:	371c      	adds	r7, #28
 8009432:	46bd      	mov	sp, r7
 8009434:	bc80      	pop	{r7}
 8009436:	4770      	bx	lr
 8009438:	40012c00 	.word	0x40012c00

0800943c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a1b      	ldr	r3, [r3, #32]
 8009450:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800946a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f023 0303 	bic.w	r3, r3, #3
 8009472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	4313      	orrs	r3, r2
 800947c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	021b      	lsls	r3, r3, #8
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	4313      	orrs	r3, r2
 8009490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a1d      	ldr	r2, [pc, #116]	@ (800950c <TIM_OC3_SetConfig+0xd0>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d10d      	bne.n	80094b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80094a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	021b      	lsls	r3, r3, #8
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80094b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a14      	ldr	r2, [pc, #80]	@ (800950c <TIM_OC3_SetConfig+0xd0>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d113      	bne.n	80094e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80094c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	695b      	ldr	r3, [r3, #20]
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	011b      	lsls	r3, r3, #4
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	621a      	str	r2, [r3, #32]
}
 8009500:	bf00      	nop
 8009502:	371c      	adds	r7, #28
 8009504:	46bd      	mov	sp, r7
 8009506:	bc80      	pop	{r7}
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	40012c00 	.word	0x40012c00

08009510 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a1b      	ldr	r3, [r3, #32]
 800951e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a1b      	ldr	r3, [r3, #32]
 8009524:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800953e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	021b      	lsls	r3, r3, #8
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	4313      	orrs	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800955a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	031b      	lsls	r3, r3, #12
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	4313      	orrs	r3, r2
 8009566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a0f      	ldr	r2, [pc, #60]	@ (80095a8 <TIM_OC4_SetConfig+0x98>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d109      	bne.n	8009584 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009576:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	695b      	ldr	r3, [r3, #20]
 800957c:	019b      	lsls	r3, r3, #6
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	4313      	orrs	r3, r2
 8009582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	685a      	ldr	r2, [r3, #4]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	621a      	str	r2, [r3, #32]
}
 800959e:	bf00      	nop
 80095a0:	371c      	adds	r7, #28
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bc80      	pop	{r7}
 80095a6:	4770      	bx	lr
 80095a8:	40012c00 	.word	0x40012c00

080095ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6a1b      	ldr	r3, [r3, #32]
 80095bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	f023 0201 	bic.w	r2, r3, #1
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	011b      	lsls	r3, r3, #4
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	4313      	orrs	r3, r2
 80095e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f023 030a 	bic.w	r3, r3, #10
 80095e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	621a      	str	r2, [r3, #32]
}
 80095fe:	bf00      	nop
 8009600:	371c      	adds	r7, #28
 8009602:	46bd      	mov	sp, r7
 8009604:	bc80      	pop	{r7}
 8009606:	4770      	bx	lr

08009608 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009608:	b480      	push	{r7}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6a1b      	ldr	r3, [r3, #32]
 8009618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	f023 0210 	bic.w	r2, r3, #16
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	031b      	lsls	r3, r3, #12
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	4313      	orrs	r3, r2
 800963c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009644:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	621a      	str	r2, [r3, #32]
}
 800965c:	bf00      	nop
 800965e:	371c      	adds	r7, #28
 8009660:	46bd      	mov	sp, r7
 8009662:	bc80      	pop	{r7}
 8009664:	4770      	bx	lr

08009666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009666:	b480      	push	{r7}
 8009668:	b085      	sub	sp, #20
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800967c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4313      	orrs	r3, r2
 8009684:	f043 0307 	orr.w	r3, r3, #7
 8009688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	609a      	str	r2, [r3, #8]
}
 8009690:	bf00      	nop
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	bc80      	pop	{r7}
 8009698:	4770      	bx	lr

0800969a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800969a:	b480      	push	{r7}
 800969c:	b087      	sub	sp, #28
 800969e:	af00      	add	r7, sp, #0
 80096a0:	60f8      	str	r0, [r7, #12]
 80096a2:	60b9      	str	r1, [r7, #8]
 80096a4:	607a      	str	r2, [r7, #4]
 80096a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	021a      	lsls	r2, r3, #8
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	431a      	orrs	r2, r3
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	609a      	str	r2, [r3, #8]
}
 80096ce:	bf00      	nop
 80096d0:	371c      	adds	r7, #28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bc80      	pop	{r7}
 80096d6:	4770      	bx	lr

080096d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80096d8:	b480      	push	{r7}
 80096da:	b087      	sub	sp, #28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f003 031f 	and.w	r3, r3, #31
 80096ea:	2201      	movs	r2, #1
 80096ec:	fa02 f303 	lsl.w	r3, r2, r3
 80096f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6a1a      	ldr	r2, [r3, #32]
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	43db      	mvns	r3, r3
 80096fa:	401a      	ands	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6a1a      	ldr	r2, [r3, #32]
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	f003 031f 	and.w	r3, r3, #31
 800970a:	6879      	ldr	r1, [r7, #4]
 800970c:	fa01 f303 	lsl.w	r3, r1, r3
 8009710:	431a      	orrs	r2, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	621a      	str	r2, [r3, #32]
}
 8009716:	bf00      	nop
 8009718:	371c      	adds	r7, #28
 800971a:	46bd      	mov	sp, r7
 800971c:	bc80      	pop	{r7}
 800971e:	4770      	bx	lr

08009720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009730:	2b01      	cmp	r3, #1
 8009732:	d101      	bne.n	8009738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009734:	2302      	movs	r3, #2
 8009736:	e046      	b.n	80097c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2202      	movs	r2, #2
 8009744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800975e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	4313      	orrs	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a16      	ldr	r2, [pc, #88]	@ (80097d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d00e      	beq.n	800979a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009784:	d009      	beq.n	800979a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a12      	ldr	r2, [pc, #72]	@ (80097d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d004      	beq.n	800979a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a10      	ldr	r2, [pc, #64]	@ (80097d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d10c      	bne.n	80097b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bc80      	pop	{r7}
 80097ce:	4770      	bx	lr
 80097d0:	40012c00 	.word	0x40012c00
 80097d4:	40000400 	.word	0x40000400
 80097d8:	40000800 	.word	0x40000800

080097dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bc80      	pop	{r7}
 80097ec:	4770      	bx	lr

080097ee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bc80      	pop	{r7}
 80097fe:	4770      	bx	lr

08009800 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d101      	bne.n	8009812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e042      	b.n	8009898 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	d106      	bne.n	800982c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7f9 ffa8 	bl	800377c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2224      	movs	r2, #36	@ 0x24
 8009830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68da      	ldr	r2, [r3, #12]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009842:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f82b 	bl	80098a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	691a      	ldr	r2, [r3, #16]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009858:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	695a      	ldr	r2, [r3, #20]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009868:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68da      	ldr	r2, [r3, #12]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009878:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2220      	movs	r2, #32
 8009884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2220      	movs	r2, #32
 800988c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	68da      	ldr	r2, [r3, #12]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	689a      	ldr	r2, [r3, #8]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	431a      	orrs	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	695b      	ldr	r3, [r3, #20]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80098da:	f023 030c 	bic.w	r3, r3, #12
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	6812      	ldr	r2, [r2, #0]
 80098e2:	68b9      	ldr	r1, [r7, #8]
 80098e4:	430b      	orrs	r3, r1
 80098e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	699a      	ldr	r2, [r3, #24]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	430a      	orrs	r2, r1
 80098fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a2c      	ldr	r2, [pc, #176]	@ (80099b4 <UART_SetConfig+0x114>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d103      	bne.n	8009910 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009908:	f7fd fe9e 	bl	8007648 <HAL_RCC_GetPCLK2Freq>
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	e002      	b.n	8009916 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009910:	f7fd fe86 	bl	8007620 <HAL_RCC_GetPCLK1Freq>
 8009914:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	4613      	mov	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	009a      	lsls	r2, r3, #2
 8009920:	441a      	add	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	fbb2 f3f3 	udiv	r3, r2, r3
 800992c:	4a22      	ldr	r2, [pc, #136]	@ (80099b8 <UART_SetConfig+0x118>)
 800992e:	fba2 2303 	umull	r2, r3, r2, r3
 8009932:	095b      	lsrs	r3, r3, #5
 8009934:	0119      	lsls	r1, r3, #4
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	4613      	mov	r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	009a      	lsls	r2, r3, #2
 8009940:	441a      	add	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	fbb2 f2f3 	udiv	r2, r2, r3
 800994c:	4b1a      	ldr	r3, [pc, #104]	@ (80099b8 <UART_SetConfig+0x118>)
 800994e:	fba3 0302 	umull	r0, r3, r3, r2
 8009952:	095b      	lsrs	r3, r3, #5
 8009954:	2064      	movs	r0, #100	@ 0x64
 8009956:	fb00 f303 	mul.w	r3, r0, r3
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	011b      	lsls	r3, r3, #4
 800995e:	3332      	adds	r3, #50	@ 0x32
 8009960:	4a15      	ldr	r2, [pc, #84]	@ (80099b8 <UART_SetConfig+0x118>)
 8009962:	fba2 2303 	umull	r2, r3, r2, r3
 8009966:	095b      	lsrs	r3, r3, #5
 8009968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800996c:	4419      	add	r1, r3
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	4613      	mov	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	009a      	lsls	r2, r3, #2
 8009978:	441a      	add	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	fbb2 f2f3 	udiv	r2, r2, r3
 8009984:	4b0c      	ldr	r3, [pc, #48]	@ (80099b8 <UART_SetConfig+0x118>)
 8009986:	fba3 0302 	umull	r0, r3, r3, r2
 800998a:	095b      	lsrs	r3, r3, #5
 800998c:	2064      	movs	r0, #100	@ 0x64
 800998e:	fb00 f303 	mul.w	r3, r0, r3
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	011b      	lsls	r3, r3, #4
 8009996:	3332      	adds	r3, #50	@ 0x32
 8009998:	4a07      	ldr	r2, [pc, #28]	@ (80099b8 <UART_SetConfig+0x118>)
 800999a:	fba2 2303 	umull	r2, r3, r2, r3
 800999e:	095b      	lsrs	r3, r3, #5
 80099a0:	f003 020f 	and.w	r2, r3, #15
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	440a      	add	r2, r1
 80099aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80099ac:	bf00      	nop
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	40013800 	.word	0x40013800
 80099b8:	51eb851f 	.word	0x51eb851f

080099bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	4638      	mov	r0, r7
 80099c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3714      	adds	r7, #20
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bc80      	pop	{r7}
 80099d4:	4770      	bx	lr

080099d6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80099d6:	b480      	push	{r7}
 80099d8:	b085      	sub	sp, #20
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80099e6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80099ea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bc80      	pop	{r7}
 8009a00:	4770      	bx	lr

08009a02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b085      	sub	sp, #20
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009a0a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8009a0e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	43db      	mvns	r3, r3
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	4013      	ands	r3, r2
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bc80      	pop	{r7}
 8009a34:	4770      	bx	lr

08009a36 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b083      	sub	sp, #12
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	460b      	mov	r3, r1
 8009a40:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bc80      	pop	{r7}
 8009a4c:	4770      	bx	lr

08009a4e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b085      	sub	sp, #20
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	60f8      	str	r0, [r7, #12]
 8009a56:	4638      	mov	r0, r7
 8009a58:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bc80      	pop	{r7}
 8009a86:	4770      	bx	lr

08009a88 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b09d      	sub	sp, #116	@ 0x74
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8009aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	78db      	ldrb	r3, [r3, #3]
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d81f      	bhi.n	8009afa <USB_ActivateEndpoint+0x72>
 8009aba:	a201      	add	r2, pc, #4	@ (adr r2, 8009ac0 <USB_ActivateEndpoint+0x38>)
 8009abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac0:	08009ad1 	.word	0x08009ad1
 8009ac4:	08009aed 	.word	0x08009aed
 8009ac8:	08009b03 	.word	0x08009b03
 8009acc:	08009adf 	.word	0x08009adf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009ad0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009ad4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009ad8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009adc:	e012      	b.n	8009b04 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009ade:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009ae2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009ae6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009aea:	e00b      	b.n	8009b04 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009aec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009af0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009af4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009af8:	e004      	b.n	8009b04 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8009b00:	e000      	b.n	8009b04 <USB_ActivateEndpoint+0x7c>
      break;
 8009b02:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	441a      	add	r2, r3
 8009b0e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009b12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	881b      	ldrh	r3, [r3, #0]
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	7812      	ldrb	r2, [r2, #0]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	441a      	add	r2, r3
 8009b52:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009b56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	7b1b      	ldrb	r3, [r3, #12]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f040 8178 	bne.w	8009e64 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	785b      	ldrb	r3, [r3, #1]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 8084 	beq.w	8009c86 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	61bb      	str	r3, [r7, #24]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	4413      	add	r3, r2
 8009b90:	61bb      	str	r3, [r7, #24]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	011a      	lsls	r2, r3, #4
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009ba0:	617b      	str	r3, [r7, #20]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	88db      	ldrh	r3, [r3, #6]
 8009ba6:	085b      	lsrs	r3, r3, #1
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	005b      	lsls	r3, r3, #1
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4413      	add	r3, r2
 8009bbc:	881b      	ldrh	r3, [r3, #0]
 8009bbe:	827b      	strh	r3, [r7, #18]
 8009bc0:	8a7b      	ldrh	r3, [r7, #18]
 8009bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d01b      	beq.n	8009c02 <USB_ActivateEndpoint+0x17a>
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009be0:	823b      	strh	r3, [r7, #16]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	441a      	add	r2, r3
 8009bec:	8a3b      	ldrh	r3, [r7, #16]
 8009bee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	78db      	ldrb	r3, [r3, #3]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d020      	beq.n	8009c4c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c20:	81bb      	strh	r3, [r7, #12]
 8009c22:	89bb      	ldrh	r3, [r7, #12]
 8009c24:	f083 0320 	eor.w	r3, r3, #32
 8009c28:	81bb      	strh	r3, [r7, #12]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	441a      	add	r2, r3
 8009c34:	89bb      	ldrh	r3, [r7, #12]
 8009c36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	8013      	strh	r3, [r2, #0]
 8009c4a:	e2d5      	b.n	800a1f8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c62:	81fb      	strh	r3, [r7, #14]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	441a      	add	r2, r3
 8009c6e:	89fb      	ldrh	r3, [r7, #14]
 8009c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	8013      	strh	r3, [r2, #0]
 8009c84:	e2b8      	b.n	800a1f8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	461a      	mov	r2, r3
 8009c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c96:	4413      	add	r3, r2
 8009c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	011a      	lsls	r2, r3, #4
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8009ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	88db      	ldrh	r3, [r3, #6]
 8009cae:	085b      	lsrs	r3, r3, #1
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	005b      	lsls	r3, r3, #1
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cca:	4413      	add	r3, r2
 8009ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	011a      	lsls	r2, r3, #4
 8009cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce0:	881b      	ldrh	r3, [r3, #0]
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cec:	801a      	strh	r2, [r3, #0]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009cf4:	d91d      	bls.n	8009d32 <USB_ActivateEndpoint+0x2aa>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	095b      	lsrs	r3, r3, #5
 8009cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	f003 031f 	and.w	r3, r3, #31
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d102      	bne.n	8009d10 <USB_ActivateEndpoint+0x288>
 8009d0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d12:	881b      	ldrh	r3, [r3, #0]
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	029b      	lsls	r3, r3, #10
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2e:	801a      	strh	r2, [r3, #0]
 8009d30:	e026      	b.n	8009d80 <USB_ActivateEndpoint+0x2f8>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10a      	bne.n	8009d50 <USB_ActivateEndpoint+0x2c8>
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4c:	801a      	strh	r2, [r3, #0]
 8009d4e:	e017      	b.n	8009d80 <USB_ActivateEndpoint+0x2f8>
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	085b      	lsrs	r3, r3, #1
 8009d56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	f003 0301 	and.w	r3, r3, #1
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <USB_ActivateEndpoint+0x2e2>
 8009d64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d66:	3301      	adds	r3, #1
 8009d68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	029b      	lsls	r3, r3, #10
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	4413      	add	r3, r2
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009d8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d01b      	beq.n	8009dd0 <USB_ActivateEndpoint+0x348>
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	881b      	ldrh	r3, [r3, #0]
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dae:	843b      	strh	r3, [r7, #32]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	441a      	add	r2, r3
 8009dba:	8c3b      	ldrh	r3, [r7, #32]
 8009dbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d124      	bne.n	8009e22 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	881b      	ldrh	r3, [r3, #0]
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dee:	83bb      	strh	r3, [r7, #28]
 8009df0:	8bbb      	ldrh	r3, [r7, #28]
 8009df2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009df6:	83bb      	strh	r3, [r7, #28]
 8009df8:	8bbb      	ldrh	r3, [r7, #28]
 8009dfa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009dfe:	83bb      	strh	r3, [r7, #28]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	441a      	add	r2, r3
 8009e0a:	8bbb      	ldrh	r3, [r7, #28]
 8009e0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	8013      	strh	r3, [r2, #0]
 8009e20:	e1ea      	b.n	800a1f8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4413      	add	r3, r2
 8009e2c:	881b      	ldrh	r3, [r3, #0]
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e38:	83fb      	strh	r3, [r7, #30]
 8009e3a:	8bfb      	ldrh	r3, [r7, #30]
 8009e3c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009e40:	83fb      	strh	r3, [r7, #30]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	441a      	add	r2, r3
 8009e4c:	8bfb      	ldrh	r3, [r7, #30]
 8009e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	8013      	strh	r3, [r2, #0]
 8009e62:	e1c9      	b.n	800a1f8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	78db      	ldrb	r3, [r3, #3]
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d11e      	bne.n	8009eaa <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	881b      	ldrh	r3, [r3, #0]
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e82:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	441a      	add	r2, r3
 8009e90:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009e94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e9c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	8013      	strh	r3, [r2, #0]
 8009ea8:	e01d      	b.n	8009ee6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	881b      	ldrh	r3, [r3, #0]
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ec0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	441a      	add	r2, r3
 8009ece:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009ed2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ed6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ef6:	4413      	add	r3, r2
 8009ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	011a      	lsls	r2, r3, #4
 8009f00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f02:	4413      	add	r3, r2
 8009f04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	891b      	ldrh	r3, [r3, #8]
 8009f0e:	085b      	lsrs	r3, r3, #1
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	005b      	lsls	r3, r3, #1
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f18:	801a      	strh	r2, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	461a      	mov	r2, r3
 8009f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f2a:	4413      	add	r3, r2
 8009f2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	011a      	lsls	r2, r3, #4
 8009f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8009f3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	895b      	ldrh	r3, [r3, #10]
 8009f42:	085b      	lsrs	r3, r3, #1
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f4c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	785b      	ldrb	r3, [r3, #1]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f040 8093 	bne.w	800a07e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009f68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d01b      	beq.n	8009fac <USB_ActivateEndpoint+0x524>
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f8a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	441a      	add	r2, r3
 8009f96:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009f98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fa0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009fa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009fba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d01b      	beq.n	8009ffc <USB_ActivateEndpoint+0x574>
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4413      	add	r3, r2
 8009fce:	881b      	ldrh	r3, [r3, #0]
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fda:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	441a      	add	r2, r3
 8009fe6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009fe8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ff4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	881b      	ldrh	r3, [r3, #0]
 800a008:	b29b      	uxth	r3, r3
 800a00a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a00e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a012:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a014:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a016:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a01a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a01c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a01e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a022:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	441a      	add	r2, r3
 800a02e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a030:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a034:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a038:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a03c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a040:	b29b      	uxth	r3, r3
 800a042:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	881b      	ldrh	r3, [r3, #0]
 800a050:	b29b      	uxth	r3, r3
 800a052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a05a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	441a      	add	r2, r3
 800a066:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a06c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a078:	b29b      	uxth	r3, r3
 800a07a:	8013      	strh	r3, [r2, #0]
 800a07c:	e0bc      	b.n	800a1f8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a08e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d01d      	beq.n	800a0d6 <USB_ActivateEndpoint+0x64e>
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	881b      	ldrh	r3, [r3, #0]
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0b0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	441a      	add	r2, r3
 800a0be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a0c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a0ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	881b      	ldrh	r3, [r3, #0]
 800a0e2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800a0e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800a0ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d01d      	beq.n	800a12e <USB_ActivateEndpoint+0x6a6>
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	4413      	add	r3, r2
 800a0fc:	881b      	ldrh	r3, [r3, #0]
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a104:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a108:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	441a      	add	r2, r3
 800a116:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800a11a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a11e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a126:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	78db      	ldrb	r3, [r3, #3]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d024      	beq.n	800a180 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4413      	add	r3, r2
 800a140:	881b      	ldrh	r3, [r3, #0]
 800a142:	b29b      	uxth	r3, r3
 800a144:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a14c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a150:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a154:	f083 0320 	eor.w	r3, r3, #32
 800a158:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	441a      	add	r2, r3
 800a166:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a16a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a16e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	8013      	strh	r3, [r2, #0]
 800a17e:	e01d      	b.n	800a1bc <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4413      	add	r3, r2
 800a18a:	881b      	ldrh	r3, [r3, #0]
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a192:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a196:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	441a      	add	r2, r3
 800a1a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a1a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4413      	add	r3, r2
 800a1c6:	881b      	ldrh	r3, [r3, #0]
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	441a      	add	r2, r3
 800a1e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a1e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a1f8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3774      	adds	r7, #116	@ 0x74
 800a200:	46bd      	mov	sp, r7
 800a202:	bc80      	pop	{r7}
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop

0800a208 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a208:	b480      	push	{r7}
 800a20a:	b08d      	sub	sp, #52	@ 0x34
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	7b1b      	ldrb	r3, [r3, #12]
 800a216:	2b00      	cmp	r3, #0
 800a218:	f040 808e 	bne.w	800a338 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	785b      	ldrb	r3, [r3, #1]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d044      	beq.n	800a2ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	881b      	ldrh	r3, [r3, #0]
 800a230:	81bb      	strh	r3, [r7, #12]
 800a232:	89bb      	ldrh	r3, [r7, #12]
 800a234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d01b      	beq.n	800a274 <USB_DeactivateEndpoint+0x6c>
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	881b      	ldrh	r3, [r3, #0]
 800a248:	b29b      	uxth	r3, r3
 800a24a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a24e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a252:	817b      	strh	r3, [r7, #10]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	441a      	add	r2, r3
 800a25e:	897b      	ldrh	r3, [r7, #10]
 800a260:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a264:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a26c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a270:	b29b      	uxth	r3, r3
 800a272:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	4413      	add	r3, r2
 800a27e:	881b      	ldrh	r3, [r3, #0]
 800a280:	b29b      	uxth	r3, r3
 800a282:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a286:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a28a:	813b      	strh	r3, [r7, #8]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	441a      	add	r2, r3
 800a296:	893b      	ldrh	r3, [r7, #8]
 800a298:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a29c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	8013      	strh	r3, [r2, #0]
 800a2ac:	e192      	b.n	800a5d4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4413      	add	r3, r2
 800a2b8:	881b      	ldrh	r3, [r3, #0]
 800a2ba:	827b      	strh	r3, [r7, #18]
 800a2bc:	8a7b      	ldrh	r3, [r7, #18]
 800a2be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d01b      	beq.n	800a2fe <USB_DeactivateEndpoint+0xf6>
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4413      	add	r3, r2
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2dc:	823b      	strh	r3, [r7, #16]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	441a      	add	r2, r3
 800a2e8:	8a3b      	ldrh	r3, [r7, #16]
 800a2ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a2f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	881b      	ldrh	r3, [r3, #0]
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a314:	81fb      	strh	r3, [r7, #14]
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	441a      	add	r2, r3
 800a320:	89fb      	ldrh	r3, [r7, #14]
 800a322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a32a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a32e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a332:	b29b      	uxth	r3, r3
 800a334:	8013      	strh	r3, [r2, #0]
 800a336:	e14d      	b.n	800a5d4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	785b      	ldrb	r3, [r3, #1]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f040 80a5 	bne.w	800a48c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4413      	add	r3, r2
 800a34c:	881b      	ldrh	r3, [r3, #0]
 800a34e:	843b      	strh	r3, [r7, #32]
 800a350:	8c3b      	ldrh	r3, [r7, #32]
 800a352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a356:	2b00      	cmp	r3, #0
 800a358:	d01b      	beq.n	800a392 <USB_DeactivateEndpoint+0x18a>
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	881b      	ldrh	r3, [r3, #0]
 800a366:	b29b      	uxth	r3, r3
 800a368:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a36c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a370:	83fb      	strh	r3, [r7, #30]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	441a      	add	r2, r3
 800a37c:	8bfb      	ldrh	r3, [r7, #30]
 800a37e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a386:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a38a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a38e:	b29b      	uxth	r3, r3
 800a390:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	4413      	add	r3, r2
 800a39c:	881b      	ldrh	r3, [r3, #0]
 800a39e:	83bb      	strh	r3, [r7, #28]
 800a3a0:	8bbb      	ldrh	r3, [r7, #28]
 800a3a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d01b      	beq.n	800a3e2 <USB_DeactivateEndpoint+0x1da>
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	4413      	add	r3, r2
 800a3b4:	881b      	ldrh	r3, [r3, #0]
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3c0:	837b      	strh	r3, [r7, #26]
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	441a      	add	r2, r3
 800a3cc:	8b7b      	ldrh	r3, [r7, #26]
 800a3ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	4413      	add	r3, r2
 800a3ec:	881b      	ldrh	r3, [r3, #0]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3f8:	833b      	strh	r3, [r7, #24]
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	441a      	add	r2, r3
 800a404:	8b3b      	ldrh	r3, [r7, #24]
 800a406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a40a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a40e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a412:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a416:	b29b      	uxth	r3, r3
 800a418:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4413      	add	r3, r2
 800a424:	881b      	ldrh	r3, [r3, #0]
 800a426:	b29b      	uxth	r3, r3
 800a428:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a42c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a430:	82fb      	strh	r3, [r7, #22]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	441a      	add	r2, r3
 800a43c:	8afb      	ldrh	r3, [r7, #22]
 800a43e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a44a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a44e:	b29b      	uxth	r3, r3
 800a450:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	4413      	add	r3, r2
 800a45c:	881b      	ldrh	r3, [r3, #0]
 800a45e:	b29b      	uxth	r3, r3
 800a460:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a468:	82bb      	strh	r3, [r7, #20]
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	441a      	add	r2, r3
 800a474:	8abb      	ldrh	r3, [r7, #20]
 800a476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a47a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a47e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a486:	b29b      	uxth	r3, r3
 800a488:	8013      	strh	r3, [r2, #0]
 800a48a:	e0a3      	b.n	800a5d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4413      	add	r3, r2
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a49a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a49c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d01b      	beq.n	800a4dc <USB_DeactivateEndpoint+0x2d4>
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	4413      	add	r3, r2
 800a4ae:	881b      	ldrh	r3, [r3, #0]
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4ba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	441a      	add	r2, r3
 800a4c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a4c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a4d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4413      	add	r3, r2
 800a4e6:	881b      	ldrh	r3, [r3, #0]
 800a4e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a4ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a4ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d01b      	beq.n	800a52c <USB_DeactivateEndpoint+0x324>
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	4413      	add	r3, r2
 800a4fe:	881b      	ldrh	r3, [r3, #0]
 800a500:	b29b      	uxth	r3, r3
 800a502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a50a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	441a      	add	r2, r3
 800a516:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a51c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a524:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a528:	b29b      	uxth	r3, r3
 800a52a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4413      	add	r3, r2
 800a536:	881b      	ldrh	r3, [r3, #0]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a53e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a542:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	441a      	add	r2, r3
 800a54e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a550:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a554:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a558:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a55c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a560:	b29b      	uxth	r3, r3
 800a562:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4413      	add	r3, r2
 800a56e:	881b      	ldrh	r3, [r3, #0]
 800a570:	b29b      	uxth	r3, r3
 800a572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a576:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a57a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	441a      	add	r2, r3
 800a586:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a58c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a598:	b29b      	uxth	r3, r3
 800a59a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	4413      	add	r3, r2
 800a5a6:	881b      	ldrh	r3, [r3, #0]
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a5ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	441a      	add	r2, r3
 800a5be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a5c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3734      	adds	r7, #52	@ 0x34
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bc80      	pop	{r7}
 800a5de:	4770      	bx	lr

0800a5e0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b0c2      	sub	sp, #264	@ 0x108
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5ee:	6018      	str	r0, [r3, #0]
 800a5f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5f8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	785b      	ldrb	r3, [r3, #1]
 800a606:	2b01      	cmp	r3, #1
 800a608:	f040 86b7 	bne.w	800b37a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a60c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	699a      	ldr	r2, [r3, #24]
 800a618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a61c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	429a      	cmp	r2, r3
 800a626:	d908      	bls.n	800a63a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a62c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a638:	e007      	b.n	800a64a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a63a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a63e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a64a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a64e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	7b1b      	ldrb	r3, [r3, #12]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d13a      	bne.n	800a6d0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a65a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a65e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	6959      	ldr	r1, [r3, #20]
 800a666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a66a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	88da      	ldrh	r2, [r3, #6]
 800a672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a676:	b29b      	uxth	r3, r3
 800a678:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a67c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a680:	6800      	ldr	r0, [r0, #0]
 800a682:	f001 fcb2 	bl	800bfea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a68a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	613b      	str	r3, [r7, #16]
 800a692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a696:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	613b      	str	r3, [r7, #16]
 800a6aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	011a      	lsls	r2, r3, #4
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a6c0:	60fb      	str	r3, [r7, #12]
 800a6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	801a      	strh	r2, [r3, #0]
 800a6cc:	f000 be1f 	b.w	800b30e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a6d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	78db      	ldrb	r3, [r3, #3]
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	f040 8462 	bne.w	800afa6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a6e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6a1a      	ldr	r2, [r3, #32]
 800a6ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	f240 83df 	bls.w	800aebe <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a704:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a70e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	881b      	ldrh	r3, [r3, #0]
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a726:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a72a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a72e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	441a      	add	r2, r3
 800a744:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a74c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a750:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a758:	b29b      	uxth	r3, r3
 800a75a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a75c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	6a1a      	ldr	r2, [r3, #32]
 800a768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a76c:	1ad2      	subs	r2, r2, r3
 800a76e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a77a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a77e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	4413      	add	r3, r2
 800a794:	881b      	ldrh	r3, [r3, #0]
 800a796:	b29b      	uxth	r3, r3
 800a798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 81c7 	beq.w	800ab30 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a7a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	785b      	ldrb	r3, [r3, #1]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d177      	bne.n	800a8ae <USB_EPStartXfer+0x2ce>
 800a7be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a7ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	461a      	mov	r2, r3
 800a7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7de:	4413      	add	r3, r2
 800a7e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a7e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	011a      	lsls	r2, r3, #4
 800a7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a7f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fc:	881b      	ldrh	r3, [r3, #0]
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a804:	b29a      	uxth	r2, r3
 800a806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a808:	801a      	strh	r2, [r3, #0]
 800a80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a80e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a810:	d921      	bls.n	800a856 <USB_EPStartXfer+0x276>
 800a812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a816:	095b      	lsrs	r3, r3, #5
 800a818:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a820:	f003 031f 	and.w	r3, r3, #31
 800a824:	2b00      	cmp	r3, #0
 800a826:	d104      	bne.n	800a832 <USB_EPStartXfer+0x252>
 800a828:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a82c:	3b01      	subs	r3, #1
 800a82e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	b29a      	uxth	r2, r3
 800a838:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	029b      	lsls	r3, r3, #10
 800a840:	b29b      	uxth	r3, r3
 800a842:	4313      	orrs	r3, r2
 800a844:	b29b      	uxth	r3, r3
 800a846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a84a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a84e:	b29a      	uxth	r2, r3
 800a850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a852:	801a      	strh	r2, [r3, #0]
 800a854:	e050      	b.n	800a8f8 <USB_EPStartXfer+0x318>
 800a856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10a      	bne.n	800a874 <USB_EPStartXfer+0x294>
 800a85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a860:	881b      	ldrh	r3, [r3, #0]
 800a862:	b29b      	uxth	r3, r3
 800a864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a870:	801a      	strh	r2, [r3, #0]
 800a872:	e041      	b.n	800a8f8 <USB_EPStartXfer+0x318>
 800a874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a878:	085b      	lsrs	r3, r3, #1
 800a87a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	2b00      	cmp	r3, #0
 800a888:	d004      	beq.n	800a894 <USB_EPStartXfer+0x2b4>
 800a88a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a88e:	3301      	adds	r3, #1
 800a890:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a896:	881b      	ldrh	r3, [r3, #0]
 800a898:	b29a      	uxth	r2, r3
 800a89a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	029b      	lsls	r3, r3, #10
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8aa:	801a      	strh	r2, [r3, #0]
 800a8ac:	e024      	b.n	800a8f8 <USB_EPStartXfer+0x318>
 800a8ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	785b      	ldrb	r3, [r3, #1]
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d11c      	bne.n	800a8f8 <USB_EPStartXfer+0x318>
 800a8be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d2:	4413      	add	r3, r2
 800a8d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	011a      	lsls	r2, r3, #4
 800a8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e6:	4413      	add	r3, r2
 800a8e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a8ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a8f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	895b      	ldrh	r3, [r3, #10]
 800a904:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a90c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	6959      	ldr	r1, [r3, #20]
 800a914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a918:	b29b      	uxth	r3, r3
 800a91a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a91e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a922:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a926:	6800      	ldr	r0, [r0, #0]
 800a928:	f001 fb5f 	bl	800bfea <USB_WritePMA>
            ep->xfer_buff += len;
 800a92c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	695a      	ldr	r2, [r3, #20]
 800a938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a93c:	441a      	add	r2, r3
 800a93e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a94a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a94e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	6a1a      	ldr	r2, [r3, #32]
 800a956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a95a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	429a      	cmp	r2, r3
 800a964:	d90f      	bls.n	800a986 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a96a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	6a1a      	ldr	r2, [r3, #32]
 800a972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a976:	1ad2      	subs	r2, r2, r3
 800a978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a97c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	621a      	str	r2, [r3, #32]
 800a984:	e00e      	b.n	800a9a4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a98a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a99a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a9a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	785b      	ldrb	r3, [r3, #1]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d177      	bne.n	800aaa4 <USB_EPStartXfer+0x4c4>
 800a9b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	61bb      	str	r3, [r7, #24]
 800a9c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	61bb      	str	r3, [r7, #24]
 800a9d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	011a      	lsls	r2, r3, #4
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a9ee:	617b      	str	r3, [r7, #20]
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	881b      	ldrh	r3, [r3, #0]
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	801a      	strh	r2, [r3, #0]
 800aa00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa04:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa06:	d921      	bls.n	800aa4c <USB_EPStartXfer+0x46c>
 800aa08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa0c:	095b      	lsrs	r3, r3, #5
 800aa0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800aa12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa16:	f003 031f 	and.w	r3, r3, #31
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d104      	bne.n	800aa28 <USB_EPStartXfer+0x448>
 800aa1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa22:	3b01      	subs	r3, #1
 800aa24:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	881b      	ldrh	r3, [r3, #0]
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	029b      	lsls	r3, r3, #10
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	801a      	strh	r2, [r3, #0]
 800aa4a:	e056      	b.n	800aafa <USB_EPStartXfer+0x51a>
 800aa4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d10a      	bne.n	800aa6a <USB_EPStartXfer+0x48a>
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	881b      	ldrh	r3, [r3, #0]
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa62:	b29a      	uxth	r2, r3
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	801a      	strh	r2, [r3, #0]
 800aa68:	e047      	b.n	800aafa <USB_EPStartXfer+0x51a>
 800aa6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa6e:	085b      	lsrs	r3, r3, #1
 800aa70:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800aa74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa78:	f003 0301 	and.w	r3, r3, #1
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d004      	beq.n	800aa8a <USB_EPStartXfer+0x4aa>
 800aa80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa84:	3301      	adds	r3, #1
 800aa86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	881b      	ldrh	r3, [r3, #0]
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	029b      	lsls	r3, r3, #10
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	b29a      	uxth	r2, r3
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	801a      	strh	r2, [r3, #0]
 800aaa2:	e02a      	b.n	800aafa <USB_EPStartXfer+0x51a>
 800aaa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	785b      	ldrb	r3, [r3, #1]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d122      	bne.n	800aafa <USB_EPStartXfer+0x51a>
 800aab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aab8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	623b      	str	r3, [r7, #32]
 800aac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aac4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aace:	b29b      	uxth	r3, r3
 800aad0:	461a      	mov	r2, r3
 800aad2:	6a3b      	ldr	r3, [r7, #32]
 800aad4:	4413      	add	r3, r2
 800aad6:	623b      	str	r3, [r7, #32]
 800aad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aadc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	011a      	lsls	r2, r3, #4
 800aae6:	6a3b      	ldr	r3, [r7, #32]
 800aae8:	4413      	add	r3, r2
 800aaea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800aaee:	61fb      	str	r3, [r7, #28]
 800aaf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800aafa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aafe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	891b      	ldrh	r3, [r3, #8]
 800ab06:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	6959      	ldr	r1, [r3, #20]
 800ab16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ab20:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ab24:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ab28:	6800      	ldr	r0, [r0, #0]
 800ab2a:	f001 fa5e 	bl	800bfea <USB_WritePMA>
 800ab2e:	e3ee      	b.n	800b30e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ab30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	785b      	ldrb	r3, [r3, #1]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d177      	bne.n	800ac30 <USB_EPStartXfer+0x650>
 800ab40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab60:	4413      	add	r3, r2
 800ab62:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	011a      	lsls	r2, r3, #4
 800ab72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab74:	4413      	add	r3, r2
 800ab76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ab7a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab7e:	881b      	ldrh	r3, [r3, #0]
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab8a:	801a      	strh	r2, [r3, #0]
 800ab8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab90:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab92:	d921      	bls.n	800abd8 <USB_EPStartXfer+0x5f8>
 800ab94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab98:	095b      	lsrs	r3, r3, #5
 800ab9a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ab9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aba2:	f003 031f 	and.w	r3, r3, #31
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d104      	bne.n	800abb4 <USB_EPStartXfer+0x5d4>
 800abaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800abae:	3b01      	subs	r3, #1
 800abb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800abb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abb6:	881b      	ldrh	r3, [r3, #0]
 800abb8:	b29a      	uxth	r2, r3
 800abba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	029b      	lsls	r3, r3, #10
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	4313      	orrs	r3, r2
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abd4:	801a      	strh	r2, [r3, #0]
 800abd6:	e056      	b.n	800ac86 <USB_EPStartXfer+0x6a6>
 800abd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10a      	bne.n	800abf6 <USB_EPStartXfer+0x616>
 800abe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abe2:	881b      	ldrh	r3, [r3, #0]
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abee:	b29a      	uxth	r2, r3
 800abf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abf2:	801a      	strh	r2, [r3, #0]
 800abf4:	e047      	b.n	800ac86 <USB_EPStartXfer+0x6a6>
 800abf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abfa:	085b      	lsrs	r3, r3, #1
 800abfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ac00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d004      	beq.n	800ac16 <USB_EPStartXfer+0x636>
 800ac0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ac10:	3301      	adds	r3, #1
 800ac12:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ac16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac18:	881b      	ldrh	r3, [r3, #0]
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	029b      	lsls	r3, r3, #10
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	4313      	orrs	r3, r2
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac2c:	801a      	strh	r2, [r3, #0]
 800ac2e:	e02a      	b.n	800ac86 <USB_EPStartXfer+0x6a6>
 800ac30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	785b      	ldrb	r3, [r3, #1]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d122      	bne.n	800ac86 <USB_EPStartXfer+0x6a6>
 800ac40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac60:	4413      	add	r3, r2
 800ac62:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	011a      	lsls	r2, r3, #4
 800ac72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac74:	4413      	add	r3, r2
 800ac76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ac7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ac86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	891b      	ldrh	r3, [r3, #8]
 800ac92:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6959      	ldr	r1, [r3, #20]
 800aca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800acac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800acb0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800acb4:	6800      	ldr	r0, [r0, #0]
 800acb6:	f001 f998 	bl	800bfea <USB_WritePMA>
            ep->xfer_buff += len;
 800acba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	695a      	ldr	r2, [r3, #20]
 800acc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acca:	441a      	add	r2, r3
 800accc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800acd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6a1a      	ldr	r2, [r3, #32]
 800ace4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ace8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d90f      	bls.n	800ad14 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800acf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	6a1a      	ldr	r2, [r3, #32]
 800ad00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad04:	1ad2      	subs	r2, r2, r3
 800ad06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	621a      	str	r2, [r3, #32]
 800ad12:	e00e      	b.n	800ad32 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800ad14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	6a1b      	ldr	r3, [r3, #32]
 800ad20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800ad24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ad32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	785b      	ldrb	r3, [r3, #1]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d177      	bne.n	800ae3e <USB_EPStartXfer+0x85e>
 800ad4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6e:	4413      	add	r3, r2
 800ad70:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	011a      	lsls	r2, r3, #4
 800ad80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad82:	4413      	add	r3, r2
 800ad84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ad88:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad8c:	881b      	ldrh	r3, [r3, #0]
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad94:	b29a      	uxth	r2, r3
 800ad96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad98:	801a      	strh	r2, [r3, #0]
 800ad9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad9e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ada0:	d921      	bls.n	800ade6 <USB_EPStartXfer+0x806>
 800ada2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ada6:	095b      	lsrs	r3, r3, #5
 800ada8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800adac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adb0:	f003 031f 	and.w	r3, r3, #31
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d104      	bne.n	800adc2 <USB_EPStartXfer+0x7e2>
 800adb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adbc:	3b01      	subs	r3, #1
 800adbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800adc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adcc:	b29b      	uxth	r3, r3
 800adce:	029b      	lsls	r3, r3, #10
 800add0:	b29b      	uxth	r3, r3
 800add2:	4313      	orrs	r3, r2
 800add4:	b29b      	uxth	r3, r3
 800add6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adde:	b29a      	uxth	r2, r3
 800ade0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ade2:	801a      	strh	r2, [r3, #0]
 800ade4:	e050      	b.n	800ae88 <USB_EPStartXfer+0x8a8>
 800ade6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adea:	2b00      	cmp	r3, #0
 800adec:	d10a      	bne.n	800ae04 <USB_EPStartXfer+0x824>
 800adee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adf0:	881b      	ldrh	r3, [r3, #0]
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae00:	801a      	strh	r2, [r3, #0]
 800ae02:	e041      	b.n	800ae88 <USB_EPStartXfer+0x8a8>
 800ae04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae08:	085b      	lsrs	r3, r3, #1
 800ae0a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ae0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae12:	f003 0301 	and.w	r3, r3, #1
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d004      	beq.n	800ae24 <USB_EPStartXfer+0x844>
 800ae1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae1e:	3301      	adds	r3, #1
 800ae20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ae24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae26:	881b      	ldrh	r3, [r3, #0]
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	029b      	lsls	r3, r3, #10
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	4313      	orrs	r3, r2
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae3a:	801a      	strh	r2, [r3, #0]
 800ae3c:	e024      	b.n	800ae88 <USB_EPStartXfer+0x8a8>
 800ae3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	785b      	ldrb	r3, [r3, #1]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d11c      	bne.n	800ae88 <USB_EPStartXfer+0x8a8>
 800ae4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	461a      	mov	r2, r3
 800ae60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae62:	4413      	add	r3, r2
 800ae64:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	011a      	lsls	r2, r3, #4
 800ae74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae76:	4413      	add	r3, r2
 800ae78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ae7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ae88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	895b      	ldrh	r3, [r3, #10]
 800ae94:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	6959      	ldr	r1, [r3, #20]
 800aea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aeae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aeb2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aeb6:	6800      	ldr	r0, [r0, #0]
 800aeb8:	f001 f897 	bl	800bfea <USB_WritePMA>
 800aebc:	e227      	b.n	800b30e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800aebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aedc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	4413      	add	r3, r2
 800aee8:	881b      	ldrh	r3, [r3, #0]
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800aef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aef4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800aef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aefc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	441a      	add	r2, r3
 800af12:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800af16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af26:	b29b      	uxth	r3, r3
 800af28:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800af2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af44:	b29b      	uxth	r3, r3
 800af46:	461a      	mov	r2, r3
 800af48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af4a:	4413      	add	r3, r2
 800af4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	011a      	lsls	r2, r3, #4
 800af5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af5e:	4413      	add	r3, r2
 800af60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800af64:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800af6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800af70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	891b      	ldrh	r3, [r3, #8]
 800af7c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	6959      	ldr	r1, [r3, #20]
 800af8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af90:	b29b      	uxth	r3, r3
 800af92:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800af96:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800af9a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800af9e:	6800      	ldr	r0, [r0, #0]
 800afa0:	f001 f823 	bl	800bfea <USB_WritePMA>
 800afa4:	e1b3      	b.n	800b30e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800afa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	6a1a      	ldr	r2, [r3, #32]
 800afb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afb6:	1ad2      	subs	r2, r2, r3
 800afb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800afc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4413      	add	r3, r2
 800afde:	881b      	ldrh	r3, [r3, #0]
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f000 80c6 	beq.w	800b178 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800afec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	673b      	str	r3, [r7, #112]	@ 0x70
 800aff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800affc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	785b      	ldrb	r3, [r3, #1]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d177      	bne.n	800b0f8 <USB_EPStartXfer+0xb18>
 800b008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b00c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b018:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b022:	b29b      	uxth	r3, r3
 800b024:	461a      	mov	r2, r3
 800b026:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b028:	4413      	add	r3, r2
 800b02a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b02c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	011a      	lsls	r2, r3, #4
 800b03a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b03c:	4413      	add	r3, r2
 800b03e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b042:	667b      	str	r3, [r7, #100]	@ 0x64
 800b044:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b046:	881b      	ldrh	r3, [r3, #0]
 800b048:	b29b      	uxth	r3, r3
 800b04a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b04e:	b29a      	uxth	r2, r3
 800b050:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b052:	801a      	strh	r2, [r3, #0]
 800b054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b058:	2b3e      	cmp	r3, #62	@ 0x3e
 800b05a:	d921      	bls.n	800b0a0 <USB_EPStartXfer+0xac0>
 800b05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b060:	095b      	lsrs	r3, r3, #5
 800b062:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b06a:	f003 031f 	and.w	r3, r3, #31
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d104      	bne.n	800b07c <USB_EPStartXfer+0xa9c>
 800b072:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b076:	3b01      	subs	r3, #1
 800b078:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b07c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b07e:	881b      	ldrh	r3, [r3, #0]
 800b080:	b29a      	uxth	r2, r3
 800b082:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b086:	b29b      	uxth	r3, r3
 800b088:	029b      	lsls	r3, r3, #10
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	4313      	orrs	r3, r2
 800b08e:	b29b      	uxth	r3, r3
 800b090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b098:	b29a      	uxth	r2, r3
 800b09a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b09c:	801a      	strh	r2, [r3, #0]
 800b09e:	e050      	b.n	800b142 <USB_EPStartXfer+0xb62>
 800b0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10a      	bne.n	800b0be <USB_EPStartXfer+0xade>
 800b0a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0aa:	881b      	ldrh	r3, [r3, #0]
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0ba:	801a      	strh	r2, [r3, #0]
 800b0bc:	e041      	b.n	800b142 <USB_EPStartXfer+0xb62>
 800b0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0c2:	085b      	lsrs	r3, r3, #1
 800b0c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0cc:	f003 0301 	and.w	r3, r3, #1
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d004      	beq.n	800b0de <USB_EPStartXfer+0xafe>
 800b0d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b0d8:	3301      	adds	r3, #1
 800b0da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b0de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0e0:	881b      	ldrh	r3, [r3, #0]
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	029b      	lsls	r3, r3, #10
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0f4:	801a      	strh	r2, [r3, #0]
 800b0f6:	e024      	b.n	800b142 <USB_EPStartXfer+0xb62>
 800b0f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	785b      	ldrb	r3, [r3, #1]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d11c      	bne.n	800b142 <USB_EPStartXfer+0xb62>
 800b108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b10c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b116:	b29b      	uxth	r3, r3
 800b118:	461a      	mov	r2, r3
 800b11a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b11c:	4413      	add	r3, r2
 800b11e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	011a      	lsls	r2, r3, #4
 800b12e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b130:	4413      	add	r3, r2
 800b132:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b136:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b140:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	895b      	ldrh	r3, [r3, #10]
 800b14e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	6959      	ldr	r1, [r3, #20]
 800b15e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b162:	b29b      	uxth	r3, r3
 800b164:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b168:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b16c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b170:	6800      	ldr	r0, [r0, #0]
 800b172:	f000 ff3a 	bl	800bfea <USB_WritePMA>
 800b176:	e0ca      	b.n	800b30e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b17c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	785b      	ldrb	r3, [r3, #1]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d177      	bne.n	800b278 <USB_EPStartXfer+0xc98>
 800b188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b18c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b198:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b1a8:	4413      	add	r3, r2
 800b1aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b1ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	011a      	lsls	r2, r3, #4
 800b1ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b1bc:	4413      	add	r3, r2
 800b1be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b1c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b1c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1c6:	881b      	ldrh	r3, [r3, #0]
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1ce:	b29a      	uxth	r2, r3
 800b1d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1d2:	801a      	strh	r2, [r3, #0]
 800b1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800b1da:	d921      	bls.n	800b220 <USB_EPStartXfer+0xc40>
 800b1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1e0:	095b      	lsrs	r3, r3, #5
 800b1e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b1e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1ea:	f003 031f 	and.w	r3, r3, #31
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d104      	bne.n	800b1fc <USB_EPStartXfer+0xc1c>
 800b1f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b1fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1fe:	881b      	ldrh	r3, [r3, #0]
 800b200:	b29a      	uxth	r2, r3
 800b202:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b206:	b29b      	uxth	r3, r3
 800b208:	029b      	lsls	r3, r3, #10
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	4313      	orrs	r3, r2
 800b20e:	b29b      	uxth	r3, r3
 800b210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b218:	b29a      	uxth	r2, r3
 800b21a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b21c:	801a      	strh	r2, [r3, #0]
 800b21e:	e05c      	b.n	800b2da <USB_EPStartXfer+0xcfa>
 800b220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10a      	bne.n	800b23e <USB_EPStartXfer+0xc5e>
 800b228:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b22a:	881b      	ldrh	r3, [r3, #0]
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b236:	b29a      	uxth	r2, r3
 800b238:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b23a:	801a      	strh	r2, [r3, #0]
 800b23c:	e04d      	b.n	800b2da <USB_EPStartXfer+0xcfa>
 800b23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b242:	085b      	lsrs	r3, r3, #1
 800b244:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b24c:	f003 0301 	and.w	r3, r3, #1
 800b250:	2b00      	cmp	r3, #0
 800b252:	d004      	beq.n	800b25e <USB_EPStartXfer+0xc7e>
 800b254:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b258:	3301      	adds	r3, #1
 800b25a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b25e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b260:	881b      	ldrh	r3, [r3, #0]
 800b262:	b29a      	uxth	r2, r3
 800b264:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b268:	b29b      	uxth	r3, r3
 800b26a:	029b      	lsls	r3, r3, #10
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	4313      	orrs	r3, r2
 800b270:	b29a      	uxth	r2, r3
 800b272:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b274:	801a      	strh	r2, [r3, #0]
 800b276:	e030      	b.n	800b2da <USB_EPStartXfer+0xcfa>
 800b278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b27c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	785b      	ldrb	r3, [r3, #1]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d128      	bne.n	800b2da <USB_EPStartXfer+0xcfa>
 800b288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b28c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b29a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2ac:	4413      	add	r3, r2
 800b2ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b2b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	011a      	lsls	r2, r3, #4
 800b2c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2c4:	4413      	add	r3, r2
 800b2c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b2ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b2d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b2da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	891b      	ldrh	r3, [r3, #8]
 800b2e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b2ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	6959      	ldr	r1, [r3, #20]
 800b2f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b300:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b304:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b308:	6800      	ldr	r0, [r0, #0]
 800b30a:	f000 fe6e 	bl	800bfea <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b30e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b312:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b31c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	4413      	add	r3, r2
 800b328:	881b      	ldrh	r3, [r3, #0]
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b334:	817b      	strh	r3, [r7, #10]
 800b336:	897b      	ldrh	r3, [r7, #10]
 800b338:	f083 0310 	eor.w	r3, r3, #16
 800b33c:	817b      	strh	r3, [r7, #10]
 800b33e:	897b      	ldrh	r3, [r7, #10]
 800b340:	f083 0320 	eor.w	r3, r3, #32
 800b344:	817b      	strh	r3, [r7, #10]
 800b346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b34a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	441a      	add	r2, r3
 800b360:	897b      	ldrh	r3, [r7, #10]
 800b362:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b366:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b36a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b36e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b372:	b29b      	uxth	r3, r3
 800b374:	8013      	strh	r3, [r2, #0]
 800b376:	f000 bcde 	b.w	800bd36 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b37e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	7b1b      	ldrb	r3, [r3, #12]
 800b386:	2b00      	cmp	r3, #0
 800b388:	f040 80bb 	bne.w	800b502 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b38c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	699a      	ldr	r2, [r3, #24]
 800b398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b39c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d917      	bls.n	800b3d8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b3a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800b3b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	699a      	ldr	r2, [r3, #24]
 800b3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3c8:	1ad2      	subs	r2, r2, r3
 800b3ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	619a      	str	r2, [r3, #24]
 800b3d6:	e00e      	b.n	800b3f6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b3d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800b3e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b3f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b408:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b412:	b29b      	uxth	r3, r3
 800b414:	461a      	mov	r2, r3
 800b416:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b41a:	4413      	add	r3, r2
 800b41c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	011a      	lsls	r2, r3, #4
 800b42e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b432:	4413      	add	r3, r2
 800b434:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b438:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b43c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b440:	881b      	ldrh	r3, [r3, #0]
 800b442:	b29b      	uxth	r3, r3
 800b444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b448:	b29a      	uxth	r2, r3
 800b44a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b44e:	801a      	strh	r2, [r3, #0]
 800b450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b454:	2b3e      	cmp	r3, #62	@ 0x3e
 800b456:	d924      	bls.n	800b4a2 <USB_EPStartXfer+0xec2>
 800b458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b45c:	095b      	lsrs	r3, r3, #5
 800b45e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b466:	f003 031f 	and.w	r3, r3, #31
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d104      	bne.n	800b478 <USB_EPStartXfer+0xe98>
 800b46e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b472:	3b01      	subs	r3, #1
 800b474:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b47c:	881b      	ldrh	r3, [r3, #0]
 800b47e:	b29a      	uxth	r2, r3
 800b480:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b484:	b29b      	uxth	r3, r3
 800b486:	029b      	lsls	r3, r3, #10
 800b488:	b29b      	uxth	r3, r3
 800b48a:	4313      	orrs	r3, r2
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b496:	b29a      	uxth	r2, r3
 800b498:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b49c:	801a      	strh	r2, [r3, #0]
 800b49e:	f000 bc10 	b.w	800bcc2 <USB_EPStartXfer+0x16e2>
 800b4a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10c      	bne.n	800b4c4 <USB_EPStartXfer+0xee4>
 800b4aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b4ae:	881b      	ldrh	r3, [r3, #0]
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b4c0:	801a      	strh	r2, [r3, #0]
 800b4c2:	e3fe      	b.n	800bcc2 <USB_EPStartXfer+0x16e2>
 800b4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4c8:	085b      	lsrs	r3, r3, #1
 800b4ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b4ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4d2:	f003 0301 	and.w	r3, r3, #1
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d004      	beq.n	800b4e4 <USB_EPStartXfer+0xf04>
 800b4da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b4de:	3301      	adds	r3, #1
 800b4e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b4e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	029b      	lsls	r3, r3, #10
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b4fe:	801a      	strh	r2, [r3, #0]
 800b500:	e3df      	b.n	800bcc2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	78db      	ldrb	r3, [r3, #3]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	f040 8218 	bne.w	800b944 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	785b      	ldrb	r3, [r3, #1]
 800b520:	2b00      	cmp	r3, #0
 800b522:	f040 809d 	bne.w	800b660 <USB_EPStartXfer+0x1080>
 800b526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b52a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b538:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b542:	b29b      	uxth	r3, r3
 800b544:	461a      	mov	r2, r3
 800b546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b54a:	4413      	add	r3, r2
 800b54c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	011a      	lsls	r2, r3, #4
 800b55e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b562:	4413      	add	r3, r2
 800b564:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b568:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b56c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b570:	881b      	ldrh	r3, [r3, #0]
 800b572:	b29b      	uxth	r3, r3
 800b574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b578:	b29a      	uxth	r2, r3
 800b57a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b57e:	801a      	strh	r2, [r3, #0]
 800b580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b58e:	d92b      	bls.n	800b5e8 <USB_EPStartXfer+0x1008>
 800b590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	095b      	lsrs	r3, r3, #5
 800b59e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b5a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	691b      	ldr	r3, [r3, #16]
 800b5ae:	f003 031f 	and.w	r3, r3, #31
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d104      	bne.n	800b5c0 <USB_EPStartXfer+0xfe0>
 800b5b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b5c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5c4:	881b      	ldrh	r3, [r3, #0]
 800b5c6:	b29a      	uxth	r2, r3
 800b5c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	029b      	lsls	r3, r3, #10
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5e4:	801a      	strh	r2, [r3, #0]
 800b5e6:	e070      	b.n	800b6ca <USB_EPStartXfer+0x10ea>
 800b5e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d10c      	bne.n	800b612 <USB_EPStartXfer+0x1032>
 800b5f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5fc:	881b      	ldrh	r3, [r3, #0]
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b608:	b29a      	uxth	r2, r3
 800b60a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b60e:	801a      	strh	r2, [r3, #0]
 800b610:	e05b      	b.n	800b6ca <USB_EPStartXfer+0x10ea>
 800b612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	085b      	lsrs	r3, r3, #1
 800b620:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	2b00      	cmp	r3, #0
 800b636:	d004      	beq.n	800b642 <USB_EPStartXfer+0x1062>
 800b638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b63c:	3301      	adds	r3, #1
 800b63e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b646:	881b      	ldrh	r3, [r3, #0]
 800b648:	b29a      	uxth	r2, r3
 800b64a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b64e:	b29b      	uxth	r3, r3
 800b650:	029b      	lsls	r3, r3, #10
 800b652:	b29b      	uxth	r3, r3
 800b654:	4313      	orrs	r3, r2
 800b656:	b29a      	uxth	r2, r3
 800b658:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b65c:	801a      	strh	r2, [r3, #0]
 800b65e:	e034      	b.n	800b6ca <USB_EPStartXfer+0x10ea>
 800b660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	785b      	ldrb	r3, [r3, #1]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d12c      	bne.n	800b6ca <USB_EPStartXfer+0x10ea>
 800b670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b67e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b682:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	461a      	mov	r2, r3
 800b690:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b694:	4413      	add	r3, r2
 800b696:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b69a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b69e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	011a      	lsls	r2, r3, #4
 800b6a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b6ac:	4413      	add	r3, r2
 800b6ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b6b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b6b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b6c8:	801a      	strh	r2, [r3, #0]
 800b6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b6d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	785b      	ldrb	r3, [r3, #1]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	f040 809d 	bne.w	800b824 <USB_EPStartXfer+0x1244>
 800b6ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b6f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b706:	b29b      	uxth	r3, r3
 800b708:	461a      	mov	r2, r3
 800b70a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b70e:	4413      	add	r3, r2
 800b710:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	011a      	lsls	r2, r3, #4
 800b722:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b726:	4413      	add	r3, r2
 800b728:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b72c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b730:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b734:	881b      	ldrh	r3, [r3, #0]
 800b736:	b29b      	uxth	r3, r3
 800b738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b742:	801a      	strh	r2, [r3, #0]
 800b744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	2b3e      	cmp	r3, #62	@ 0x3e
 800b752:	d92b      	bls.n	800b7ac <USB_EPStartXfer+0x11cc>
 800b754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	095b      	lsrs	r3, r3, #5
 800b762:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b76a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	691b      	ldr	r3, [r3, #16]
 800b772:	f003 031f 	and.w	r3, r3, #31
 800b776:	2b00      	cmp	r3, #0
 800b778:	d104      	bne.n	800b784 <USB_EPStartXfer+0x11a4>
 800b77a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b77e:	3b01      	subs	r3, #1
 800b780:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b788:	881b      	ldrh	r3, [r3, #0]
 800b78a:	b29a      	uxth	r2, r3
 800b78c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b790:	b29b      	uxth	r3, r3
 800b792:	029b      	lsls	r3, r3, #10
 800b794:	b29b      	uxth	r3, r3
 800b796:	4313      	orrs	r3, r2
 800b798:	b29b      	uxth	r3, r3
 800b79a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b79e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b7a8:	801a      	strh	r2, [r3, #0]
 800b7aa:	e069      	b.n	800b880 <USB_EPStartXfer+0x12a0>
 800b7ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	691b      	ldr	r3, [r3, #16]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10c      	bne.n	800b7d6 <USB_EPStartXfer+0x11f6>
 800b7bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b7d2:	801a      	strh	r2, [r3, #0]
 800b7d4:	e054      	b.n	800b880 <USB_EPStartXfer+0x12a0>
 800b7d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	691b      	ldr	r3, [r3, #16]
 800b7e2:	085b      	lsrs	r3, r3, #1
 800b7e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b7e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	f003 0301 	and.w	r3, r3, #1
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d004      	beq.n	800b806 <USB_EPStartXfer+0x1226>
 800b7fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b800:	3301      	adds	r3, #1
 800b802:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b806:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b80a:	881b      	ldrh	r3, [r3, #0]
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b812:	b29b      	uxth	r3, r3
 800b814:	029b      	lsls	r3, r3, #10
 800b816:	b29b      	uxth	r3, r3
 800b818:	4313      	orrs	r3, r2
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b820:	801a      	strh	r2, [r3, #0]
 800b822:	e02d      	b.n	800b880 <USB_EPStartXfer+0x12a0>
 800b824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	785b      	ldrb	r3, [r3, #1]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d125      	bne.n	800b880 <USB_EPStartXfer+0x12a0>
 800b834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b838:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b842:	b29b      	uxth	r3, r3
 800b844:	461a      	mov	r2, r3
 800b846:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b84a:	4413      	add	r3, r2
 800b84c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	011a      	lsls	r2, r3, #4
 800b85e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b862:	4413      	add	r3, r2
 800b864:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b868:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b86c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	b29a      	uxth	r2, r3
 800b87a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b87e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	69db      	ldr	r3, [r3, #28]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f000 8218 	beq.w	800bcc2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b896:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4413      	add	r3, r2
 800b8ac:	881b      	ldrh	r3, [r3, #0]
 800b8ae:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b8b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b8b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d005      	beq.n	800b8ca <USB_EPStartXfer+0x12ea>
 800b8be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b8c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d10d      	bne.n	800b8e6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b8ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b8ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f040 81f5 	bne.w	800bcc2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b8d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b8dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f040 81ee 	bne.w	800bcc2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b8e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	4413      	add	r3, r2
 800b900:	881b      	ldrh	r3, [r3, #0]
 800b902:	b29b      	uxth	r3, r3
 800b904:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b90c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b914:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b91e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	441a      	add	r2, r3
 800b92a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b92e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b93a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b93e:	b29b      	uxth	r3, r3
 800b940:	8013      	strh	r3, [r2, #0]
 800b942:	e1be      	b.n	800bcc2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	78db      	ldrb	r3, [r3, #3]
 800b950:	2b01      	cmp	r3, #1
 800b952:	f040 81b4 	bne.w	800bcbe <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b95a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	699a      	ldr	r2, [r3, #24]
 800b962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d917      	bls.n	800b9a2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800b982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	699a      	ldr	r2, [r3, #24]
 800b98e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b992:	1ad2      	subs	r2, r2, r3
 800b994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	619a      	str	r2, [r3, #24]
 800b9a0:	e00e      	b.n	800b9c0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b9a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	699b      	ldr	r3, [r3, #24]
 800b9ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800b9b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b9c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	785b      	ldrb	r3, [r3, #1]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f040 8085 	bne.w	800badc <USB_EPStartXfer+0x14fc>
 800b9d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b9e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b9f6:	4413      	add	r3, r2
 800b9f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b9fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	011a      	lsls	r2, r3, #4
 800ba0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ba0e:	4413      	add	r3, r2
 800ba10:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ba14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ba18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba1c:	881b      	ldrh	r3, [r3, #0]
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba2a:	801a      	strh	r2, [r3, #0]
 800ba2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba30:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba32:	d923      	bls.n	800ba7c <USB_EPStartXfer+0x149c>
 800ba34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba38:	095b      	lsrs	r3, r3, #5
 800ba3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ba3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba42:	f003 031f 	and.w	r3, r3, #31
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d104      	bne.n	800ba54 <USB_EPStartXfer+0x1474>
 800ba4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ba54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba58:	881b      	ldrh	r3, [r3, #0]
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	029b      	lsls	r3, r3, #10
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	4313      	orrs	r3, r2
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba72:	b29a      	uxth	r2, r3
 800ba74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba78:	801a      	strh	r2, [r3, #0]
 800ba7a:	e060      	b.n	800bb3e <USB_EPStartXfer+0x155e>
 800ba7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10c      	bne.n	800ba9e <USB_EPStartXfer+0x14be>
 800ba84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba88:	881b      	ldrh	r3, [r3, #0]
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba9a:	801a      	strh	r2, [r3, #0]
 800ba9c:	e04f      	b.n	800bb3e <USB_EPStartXfer+0x155e>
 800ba9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baa2:	085b      	lsrs	r3, r3, #1
 800baa4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800baa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baac:	f003 0301 	and.w	r3, r3, #1
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d004      	beq.n	800babe <USB_EPStartXfer+0x14de>
 800bab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bab8:	3301      	adds	r3, #1
 800baba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800babe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bac2:	881b      	ldrh	r3, [r3, #0]
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800baca:	b29b      	uxth	r3, r3
 800bacc:	029b      	lsls	r3, r3, #10
 800bace:	b29b      	uxth	r3, r3
 800bad0:	4313      	orrs	r3, r2
 800bad2:	b29a      	uxth	r2, r3
 800bad4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bad8:	801a      	strh	r2, [r3, #0]
 800bada:	e030      	b.n	800bb3e <USB_EPStartXfer+0x155e>
 800badc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	785b      	ldrb	r3, [r3, #1]
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d128      	bne.n	800bb3e <USB_EPStartXfer+0x155e>
 800baec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bafa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bafe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bb10:	4413      	add	r3, r2
 800bb12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bb16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	011a      	lsls	r2, r3, #4
 800bb24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bb28:	4413      	add	r3, r2
 800bb2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bb2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bb32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bb3c:	801a      	strh	r2, [r3, #0]
 800bb3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bb4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	785b      	ldrb	r3, [r3, #1]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	f040 8085 	bne.w	800bc68 <USB_EPStartXfer+0x1688>
 800bb5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bb6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bb82:	4413      	add	r3, r2
 800bb84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bb88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	011a      	lsls	r2, r3, #4
 800bb96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bb9a:	4413      	add	r3, r2
 800bb9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bba4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bba8:	881b      	ldrh	r3, [r3, #0]
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbb0:	b29a      	uxth	r2, r3
 800bbb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bbb6:	801a      	strh	r2, [r3, #0]
 800bbb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbbc:	2b3e      	cmp	r3, #62	@ 0x3e
 800bbbe:	d923      	bls.n	800bc08 <USB_EPStartXfer+0x1628>
 800bbc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbc4:	095b      	lsrs	r3, r3, #5
 800bbc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bbca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbce:	f003 031f 	and.w	r3, r3, #31
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d104      	bne.n	800bbe0 <USB_EPStartXfer+0x1600>
 800bbd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bbe0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bbe4:	881b      	ldrh	r3, [r3, #0]
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	029b      	lsls	r3, r3, #10
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbfe:	b29a      	uxth	r2, r3
 800bc00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bc04:	801a      	strh	r2, [r3, #0]
 800bc06:	e05c      	b.n	800bcc2 <USB_EPStartXfer+0x16e2>
 800bc08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10c      	bne.n	800bc2a <USB_EPStartXfer+0x164a>
 800bc10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bc14:	881b      	ldrh	r3, [r3, #0]
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bc26:	801a      	strh	r2, [r3, #0]
 800bc28:	e04b      	b.n	800bcc2 <USB_EPStartXfer+0x16e2>
 800bc2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc2e:	085b      	lsrs	r3, r3, #1
 800bc30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bc34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d004      	beq.n	800bc4a <USB_EPStartXfer+0x166a>
 800bc40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bc44:	3301      	adds	r3, #1
 800bc46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bc4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	b29a      	uxth	r2, r3
 800bc52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	029b      	lsls	r3, r3, #10
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bc64:	801a      	strh	r2, [r3, #0]
 800bc66:	e02c      	b.n	800bcc2 <USB_EPStartXfer+0x16e2>
 800bc68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	785b      	ldrb	r3, [r3, #1]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d124      	bne.n	800bcc2 <USB_EPStartXfer+0x16e2>
 800bc78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	461a      	mov	r2, r3
 800bc8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bc8e:	4413      	add	r3, r2
 800bc90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bc94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	011a      	lsls	r2, r3, #4
 800bca2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bca6:	4413      	add	r3, r2
 800bca8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bcac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bcb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcb4:	b29a      	uxth	r2, r3
 800bcb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bcba:	801a      	strh	r2, [r3, #0]
 800bcbc:	e001      	b.n	800bcc2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e03a      	b.n	800bd38 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bcc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	4413      	add	r3, r2
 800bcdc:	881b      	ldrh	r3, [r3, #0]
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bce8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800bcec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800bcf0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bcf4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800bcf8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800bcfc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bd00:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800bd04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	441a      	add	r2, r3
 800bd1e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800bd22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bd42:	b480      	push	{r7}
 800bd44:	b085      	sub	sp, #20
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
 800bd4a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	785b      	ldrb	r3, [r3, #1]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d020      	beq.n	800bd96 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4413      	add	r3, r2
 800bd5e:	881b      	ldrh	r3, [r3, #0]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd6a:	81bb      	strh	r3, [r7, #12]
 800bd6c:	89bb      	ldrh	r3, [r7, #12]
 800bd6e:	f083 0310 	eor.w	r3, r3, #16
 800bd72:	81bb      	strh	r3, [r7, #12]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	441a      	add	r2, r3
 800bd7e:	89bb      	ldrh	r3, [r7, #12]
 800bd80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	8013      	strh	r3, [r2, #0]
 800bd94:	e01f      	b.n	800bdd6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	4413      	add	r3, r2
 800bda0:	881b      	ldrh	r3, [r3, #0]
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bda8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bdac:	81fb      	strh	r3, [r7, #14]
 800bdae:	89fb      	ldrh	r3, [r7, #14]
 800bdb0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bdb4:	81fb      	strh	r3, [r7, #14]
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	441a      	add	r2, r3
 800bdc0:	89fb      	ldrh	r3, [r7, #14]
 800bdc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bdd6:	2300      	movs	r3, #0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3714      	adds	r7, #20
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bc80      	pop	{r7}
 800bde0:	4770      	bx	lr

0800bde2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bde2:	b480      	push	{r7}
 800bde4:	b087      	sub	sp, #28
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
 800bdea:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	7b1b      	ldrb	r3, [r3, #12]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f040 809d 	bne.w	800bf30 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	785b      	ldrb	r3, [r3, #1]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d04c      	beq.n	800be98 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	4413      	add	r3, r2
 800be08:	881b      	ldrh	r3, [r3, #0]
 800be0a:	823b      	strh	r3, [r7, #16]
 800be0c:	8a3b      	ldrh	r3, [r7, #16]
 800be0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be12:	2b00      	cmp	r3, #0
 800be14:	d01b      	beq.n	800be4e <USB_EPClearStall+0x6c>
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	4413      	add	r3, r2
 800be20:	881b      	ldrh	r3, [r3, #0]
 800be22:	b29b      	uxth	r3, r3
 800be24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be2c:	81fb      	strh	r3, [r7, #14]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	441a      	add	r2, r3
 800be38:	89fb      	ldrh	r3, [r7, #14]
 800be3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	78db      	ldrb	r3, [r3, #3]
 800be52:	2b01      	cmp	r3, #1
 800be54:	d06c      	beq.n	800bf30 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	4413      	add	r3, r2
 800be60:	881b      	ldrh	r3, [r3, #0]
 800be62:	b29b      	uxth	r3, r3
 800be64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be6c:	81bb      	strh	r3, [r7, #12]
 800be6e:	89bb      	ldrh	r3, [r7, #12]
 800be70:	f083 0320 	eor.w	r3, r3, #32
 800be74:	81bb      	strh	r3, [r7, #12]
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	441a      	add	r2, r3
 800be80:	89bb      	ldrh	r3, [r7, #12]
 800be82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be92:	b29b      	uxth	r3, r3
 800be94:	8013      	strh	r3, [r2, #0]
 800be96:	e04b      	b.n	800bf30 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	4413      	add	r3, r2
 800bea2:	881b      	ldrh	r3, [r3, #0]
 800bea4:	82fb      	strh	r3, [r7, #22]
 800bea6:	8afb      	ldrh	r3, [r7, #22]
 800bea8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800beac:	2b00      	cmp	r3, #0
 800beae:	d01b      	beq.n	800bee8 <USB_EPClearStall+0x106>
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	4413      	add	r3, r2
 800beba:	881b      	ldrh	r3, [r3, #0]
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bec6:	82bb      	strh	r3, [r7, #20]
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	441a      	add	r2, r3
 800bed2:	8abb      	ldrh	r3, [r7, #20]
 800bed4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bed8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bedc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	4413      	add	r3, r2
 800bef2:	881b      	ldrh	r3, [r3, #0]
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800befa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800befe:	827b      	strh	r3, [r7, #18]
 800bf00:	8a7b      	ldrh	r3, [r7, #18]
 800bf02:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bf06:	827b      	strh	r3, [r7, #18]
 800bf08:	8a7b      	ldrh	r3, [r7, #18]
 800bf0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bf0e:	827b      	strh	r3, [r7, #18]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	441a      	add	r2, r3
 800bf1a:	8a7b      	ldrh	r3, [r7, #18]
 800bf1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	371c      	adds	r7, #28
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bc80      	pop	{r7}
 800bf3a:	4770      	bx	lr

0800bf3c <USB_StopDevice>:
  * @brief  USB_StopDevice Stop the usb device mode
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  /* disable all interrupts and force USB reset */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2201      	movs	r2, #1
 800bf48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0U;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* switch-off device */
  USBx->CNTR = (uint16_t)(USB_CNTR_FRES | USB_CNTR_PDWN);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2203      	movs	r2, #3
 800bf58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bf5c:	2300      	movs	r3, #0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	370c      	adds	r7, #12
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bc80      	pop	{r7}
 800bf66:	4770      	bx	lr

0800bf68 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	460b      	mov	r3, r1
 800bf72:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bf74:	78fb      	ldrb	r3, [r7, #3]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d103      	bne.n	800bf82 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2280      	movs	r2, #128	@ 0x80
 800bf7e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bc80      	pop	{r7}
 800bf8c:	4770      	bx	lr

0800bf8e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bf8e:	b480      	push	{r7}
 800bf90:	b083      	sub	sp, #12
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	370c      	adds	r7, #12
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bc80      	pop	{r7}
 800bfa0:	4770      	bx	lr

0800bfa2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800bfa2:	b480      	push	{r7}
 800bfa4:	b083      	sub	sp, #12
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bc80      	pop	{r7}
 800bfb4:	4770      	bx	lr

0800bfb6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bfb6:	b480      	push	{r7}
 800bfb8:	b085      	sub	sp, #20
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3714      	adds	r7, #20
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bc80      	pop	{r7}
 800bfd2:	4770      	bx	lr

0800bfd4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800bfde:	2300      	movs	r3, #0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bc80      	pop	{r7}
 800bfe8:	4770      	bx	lr

0800bfea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bfea:	b480      	push	{r7}
 800bfec:	b08b      	sub	sp, #44	@ 0x2c
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	60f8      	str	r0, [r7, #12]
 800bff2:	60b9      	str	r1, [r7, #8]
 800bff4:	4611      	mov	r1, r2
 800bff6:	461a      	mov	r2, r3
 800bff8:	460b      	mov	r3, r1
 800bffa:	80fb      	strh	r3, [r7, #6]
 800bffc:	4613      	mov	r3, r2
 800bffe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c000:	88bb      	ldrh	r3, [r7, #4]
 800c002:	3301      	adds	r3, #1
 800c004:	085b      	lsrs	r3, r3, #1
 800c006:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c010:	88fb      	ldrh	r3, [r7, #6]
 800c012:	005a      	lsls	r2, r3, #1
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	4413      	add	r3, r2
 800c018:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c01c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	627b      	str	r3, [r7, #36]	@ 0x24
 800c022:	e01e      	b.n	800c062 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	3301      	adds	r3, #1
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	021b      	lsls	r3, r3, #8
 800c032:	b21a      	sxth	r2, r3
 800c034:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c038:	4313      	orrs	r3, r2
 800c03a:	b21b      	sxth	r3, r3
 800c03c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c03e:	6a3b      	ldr	r3, [r7, #32]
 800c040:	8a7a      	ldrh	r2, [r7, #18]
 800c042:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c044:	6a3b      	ldr	r3, [r7, #32]
 800c046:	3302      	adds	r3, #2
 800c048:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c04a:	6a3b      	ldr	r3, [r7, #32]
 800c04c:	3302      	adds	r3, #2
 800c04e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	3301      	adds	r3, #1
 800c054:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	3301      	adds	r3, #1
 800c05a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c05e:	3b01      	subs	r3, #1
 800c060:	627b      	str	r3, [r7, #36]	@ 0x24
 800c062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1dd      	bne.n	800c024 <USB_WritePMA+0x3a>
  }
}
 800c068:	bf00      	nop
 800c06a:	bf00      	nop
 800c06c:	372c      	adds	r7, #44	@ 0x2c
 800c06e:	46bd      	mov	sp, r7
 800c070:	bc80      	pop	{r7}
 800c072:	4770      	bx	lr

0800c074 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c074:	b480      	push	{r7}
 800c076:	b08b      	sub	sp, #44	@ 0x2c
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	4611      	mov	r1, r2
 800c080:	461a      	mov	r2, r3
 800c082:	460b      	mov	r3, r1
 800c084:	80fb      	strh	r3, [r7, #6]
 800c086:	4613      	mov	r3, r2
 800c088:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c08a:	88bb      	ldrh	r3, [r7, #4]
 800c08c:	085b      	lsrs	r3, r3, #1
 800c08e:	b29b      	uxth	r3, r3
 800c090:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c09a:	88fb      	ldrh	r3, [r7, #6]
 800c09c:	005a      	lsls	r2, r3, #1
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c0a6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0ac:	e01b      	b.n	800c0e6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c0ae:	6a3b      	ldr	r3, [r7, #32]
 800c0b0:	881b      	ldrh	r3, [r3, #0]
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c0b6:	6a3b      	ldr	r3, [r7, #32]
 800c0b8:	3302      	adds	r3, #2
 800c0ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	b2da      	uxtb	r2, r3
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c0c4:	69fb      	ldr	r3, [r7, #28]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	0a1b      	lsrs	r3, r3, #8
 800c0ce:	b2da      	uxtb	r2, r3
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	3302      	adds	r3, #2
 800c0de:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1e0      	bne.n	800c0ae <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c0ec:	88bb      	ldrh	r3, [r7, #4]
 800c0ee:	f003 0301 	and.w	r3, r3, #1
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d007      	beq.n	800c108 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800c0f8:	6a3b      	ldr	r3, [r7, #32]
 800c0fa:	881b      	ldrh	r3, [r3, #0]
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	b2da      	uxtb	r2, r3
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	701a      	strb	r2, [r3, #0]
  }
}
 800c108:	bf00      	nop
 800c10a:	372c      	adds	r7, #44	@ 0x2c
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bc80      	pop	{r7}
 800c110:	4770      	bx	lr

0800c112 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b084      	sub	sp, #16
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
 800c11a:	460b      	mov	r3, r1
 800c11c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c11e:	2300      	movs	r3, #0
 800c120:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	7c1b      	ldrb	r3, [r3, #16]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d115      	bne.n	800c156 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c12a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c12e:	2202      	movs	r2, #2
 800c130:	2181      	movs	r1, #129	@ 0x81
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f001 ff07 	bl	800df46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2201      	movs	r2, #1
 800c13c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c13e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c142:	2202      	movs	r2, #2
 800c144:	2101      	movs	r1, #1
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f001 fefd 	bl	800df46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2201      	movs	r2, #1
 800c150:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800c154:	e012      	b.n	800c17c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c156:	2340      	movs	r3, #64	@ 0x40
 800c158:	2202      	movs	r2, #2
 800c15a:	2181      	movs	r1, #129	@ 0x81
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f001 fef2 	bl	800df46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2201      	movs	r2, #1
 800c166:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c168:	2340      	movs	r3, #64	@ 0x40
 800c16a:	2202      	movs	r2, #2
 800c16c:	2101      	movs	r1, #1
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f001 fee9 	bl	800df46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2201      	movs	r2, #1
 800c178:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c17c:	2308      	movs	r3, #8
 800c17e:	2203      	movs	r2, #3
 800c180:	2182      	movs	r1, #130	@ 0x82
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f001 fedf 	bl	800df46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2201      	movs	r2, #1
 800c18c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c18e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c192:	f001 ffff 	bl	800e194 <USBD_static_malloc>
 800c196:	4602      	mov	r2, r0
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d102      	bne.n	800c1ae <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	73fb      	strb	r3, [r7, #15]
 800c1ac:	e026      	b.n	800c1fc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1b4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	7c1b      	ldrb	r3, [r3, #16]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d109      	bne.n	800c1ec <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c1de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c1e2:	2101      	movs	r1, #1
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f001 ff9e 	bl	800e126 <USBD_LL_PrepareReceive>
 800c1ea:	e007      	b.n	800c1fc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c1f2:	2340      	movs	r3, #64	@ 0x40
 800c1f4:	2101      	movs	r1, #1
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f001 ff95 	bl	800e126 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3710      	adds	r7, #16
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c206:	b580      	push	{r7, lr}
 800c208:	b084      	sub	sp, #16
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
 800c20e:	460b      	mov	r3, r1
 800c210:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c212:	2300      	movs	r3, #0
 800c214:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c216:	2181      	movs	r1, #129	@ 0x81
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f001 feba 	bl	800df92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c224:	2101      	movs	r1, #1
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f001 feb3 	bl	800df92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c234:	2182      	movs	r1, #130	@ 0x82
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f001 feab 	bl	800df92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00e      	beq.n	800c26a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c25c:	4618      	mov	r0, r3
 800c25e:	f001 ffa5 	bl	800e1ac <USBD_static_free>
    pdev->pClassData = NULL;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3710      	adds	r7, #16
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b086      	sub	sp, #24
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c284:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c286:	2300      	movs	r3, #0
 800c288:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c28a:	2300      	movs	r3, #0
 800c28c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d039      	beq.n	800c312 <USBD_CDC_Setup+0x9e>
 800c29e:	2b20      	cmp	r3, #32
 800c2a0:	d17f      	bne.n	800c3a2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	88db      	ldrh	r3, [r3, #6]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d029      	beq.n	800c2fe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	b25b      	sxtb	r3, r3
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	da11      	bge.n	800c2d8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	683a      	ldr	r2, [r7, #0]
 800c2be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800c2c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c2c2:	683a      	ldr	r2, [r7, #0]
 800c2c4:	88d2      	ldrh	r2, [r2, #6]
 800c2c6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c2c8:	6939      	ldr	r1, [r7, #16]
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	88db      	ldrh	r3, [r3, #6]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f001 fa21 	bl	800d718 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800c2d6:	e06b      	b.n	800c3b0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	785a      	ldrb	r2, [r3, #1]
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	88db      	ldrh	r3, [r3, #6]
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c2ee:	6939      	ldr	r1, [r7, #16]
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	88db      	ldrh	r3, [r3, #6]
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f001 fa3c 	bl	800d774 <USBD_CtlPrepareRx>
      break;
 800c2fc:	e058      	b.n	800c3b0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	683a      	ldr	r2, [r7, #0]
 800c308:	7850      	ldrb	r0, [r2, #1]
 800c30a:	2200      	movs	r2, #0
 800c30c:	6839      	ldr	r1, [r7, #0]
 800c30e:	4798      	blx	r3
      break;
 800c310:	e04e      	b.n	800c3b0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	785b      	ldrb	r3, [r3, #1]
 800c316:	2b0b      	cmp	r3, #11
 800c318:	d02e      	beq.n	800c378 <USBD_CDC_Setup+0x104>
 800c31a:	2b0b      	cmp	r3, #11
 800c31c:	dc38      	bgt.n	800c390 <USBD_CDC_Setup+0x11c>
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d002      	beq.n	800c328 <USBD_CDC_Setup+0xb4>
 800c322:	2b0a      	cmp	r3, #10
 800c324:	d014      	beq.n	800c350 <USBD_CDC_Setup+0xdc>
 800c326:	e033      	b.n	800c390 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c32e:	2b03      	cmp	r3, #3
 800c330:	d107      	bne.n	800c342 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800c332:	f107 030c 	add.w	r3, r7, #12
 800c336:	2202      	movs	r2, #2
 800c338:	4619      	mov	r1, r3
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f001 f9ec 	bl	800d718 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c340:	e02e      	b.n	800c3a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c342:	6839      	ldr	r1, [r7, #0]
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f001 f97d 	bl	800d644 <USBD_CtlError>
            ret = USBD_FAIL;
 800c34a:	2302      	movs	r3, #2
 800c34c:	75fb      	strb	r3, [r7, #23]
          break;
 800c34e:	e027      	b.n	800c3a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c356:	2b03      	cmp	r3, #3
 800c358:	d107      	bne.n	800c36a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800c35a:	f107 030f 	add.w	r3, r7, #15
 800c35e:	2201      	movs	r2, #1
 800c360:	4619      	mov	r1, r3
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f001 f9d8 	bl	800d718 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c368:	e01a      	b.n	800c3a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c36a:	6839      	ldr	r1, [r7, #0]
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f001 f969 	bl	800d644 <USBD_CtlError>
            ret = USBD_FAIL;
 800c372:	2302      	movs	r3, #2
 800c374:	75fb      	strb	r3, [r7, #23]
          break;
 800c376:	e013      	b.n	800c3a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c37e:	2b03      	cmp	r3, #3
 800c380:	d00d      	beq.n	800c39e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800c382:	6839      	ldr	r1, [r7, #0]
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f001 f95d 	bl	800d644 <USBD_CtlError>
            ret = USBD_FAIL;
 800c38a:	2302      	movs	r3, #2
 800c38c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c38e:	e006      	b.n	800c39e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f001 f956 	bl	800d644 <USBD_CtlError>
          ret = USBD_FAIL;
 800c398:	2302      	movs	r3, #2
 800c39a:	75fb      	strb	r3, [r7, #23]
          break;
 800c39c:	e000      	b.n	800c3a0 <USBD_CDC_Setup+0x12c>
          break;
 800c39e:	bf00      	nop
      }
      break;
 800c3a0:	e006      	b.n	800c3b0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c3a2:	6839      	ldr	r1, [r7, #0]
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f001 f94d 	bl	800d644 <USBD_CtlError>
      ret = USBD_FAIL;
 800c3aa:	2302      	movs	r3, #2
 800c3ac:	75fb      	strb	r3, [r7, #23]
      break;
 800c3ae:	bf00      	nop
  }

  return ret;
 800c3b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3718      	adds	r7, #24
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b084      	sub	sp, #16
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3cc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c3d4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d03a      	beq.n	800c456 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c3e0:	78fa      	ldrb	r2, [r7, #3]
 800c3e2:	6879      	ldr	r1, [r7, #4]
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	4413      	add	r3, r2
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	440b      	add	r3, r1
 800c3ee:	331c      	adds	r3, #28
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d029      	beq.n	800c44a <USBD_CDC_DataIn+0x90>
 800c3f6:	78fa      	ldrb	r2, [r7, #3]
 800c3f8:	6879      	ldr	r1, [r7, #4]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	009b      	lsls	r3, r3, #2
 800c3fe:	4413      	add	r3, r2
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	440b      	add	r3, r1
 800c404:	331c      	adds	r3, #28
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	78f9      	ldrb	r1, [r7, #3]
 800c40a:	68b8      	ldr	r0, [r7, #8]
 800c40c:	460b      	mov	r3, r1
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	440b      	add	r3, r1
 800c412:	00db      	lsls	r3, r3, #3
 800c414:	4403      	add	r3, r0
 800c416:	3320      	adds	r3, #32
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	fbb2 f1f3 	udiv	r1, r2, r3
 800c41e:	fb01 f303 	mul.w	r3, r1, r3
 800c422:	1ad3      	subs	r3, r2, r3
 800c424:	2b00      	cmp	r3, #0
 800c426:	d110      	bne.n	800c44a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c428:	78fa      	ldrb	r2, [r7, #3]
 800c42a:	6879      	ldr	r1, [r7, #4]
 800c42c:	4613      	mov	r3, r2
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	4413      	add	r3, r2
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	440b      	add	r3, r1
 800c436:	331c      	adds	r3, #28
 800c438:	2200      	movs	r2, #0
 800c43a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c43c:	78f9      	ldrb	r1, [r7, #3]
 800c43e:	2300      	movs	r3, #0
 800c440:	2200      	movs	r2, #0
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f001 fe4c 	bl	800e0e0 <USBD_LL_Transmit>
 800c448:	e003      	b.n	800c452 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800c452:	2300      	movs	r3, #0
 800c454:	e000      	b.n	800c458 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c456:	2302      	movs	r3, #2
  }
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	460b      	mov	r3, r1
 800c46a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c472:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c474:	78fb      	ldrb	r3, [r7, #3]
 800c476:	4619      	mov	r1, r3
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f001 fe77 	bl	800e16c <USBD_LL_GetRxDataSize>
 800c47e:	4602      	mov	r2, r0
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00d      	beq.n	800c4ac <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c49e:	68fa      	ldr	r2, [r7, #12]
 800c4a0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	4798      	blx	r3

    return USBD_OK;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	e000      	b.n	800c4ae <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c4ac:	2302      	movs	r3, #2
  }
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b084      	sub	sp, #16
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4c4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d014      	beq.n	800c4fa <USBD_CDC_EP0_RxReady+0x44>
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c4d6:	2bff      	cmp	r3, #255	@ 0xff
 800c4d8:	d00f      	beq.n	800c4fa <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c4e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c4ea:	68fa      	ldr	r2, [r7, #12]
 800c4ec:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c4f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	22ff      	movs	r2, #255	@ 0xff
 800c4f6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c504:	b480      	push	{r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2243      	movs	r2, #67	@ 0x43
 800c510:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c512:	4b03      	ldr	r3, [pc, #12]	@ (800c520 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c514:	4618      	mov	r0, r3
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	bc80      	pop	{r7}
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop
 800c520:	20000094 	.word	0x20000094

0800c524 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2243      	movs	r2, #67	@ 0x43
 800c530:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c532:	4b03      	ldr	r3, [pc, #12]	@ (800c540 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c534:	4618      	mov	r0, r3
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	bc80      	pop	{r7}
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	20000050 	.word	0x20000050

0800c544 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2243      	movs	r2, #67	@ 0x43
 800c550:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c552:	4b03      	ldr	r3, [pc, #12]	@ (800c560 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c554:	4618      	mov	r0, r3
 800c556:	370c      	adds	r7, #12
 800c558:	46bd      	mov	sp, r7
 800c55a:	bc80      	pop	{r7}
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	200000d8 	.word	0x200000d8

0800c564 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	220a      	movs	r2, #10
 800c570:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c572:	4b03      	ldr	r3, [pc, #12]	@ (800c580 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c574:	4618      	mov	r0, r3
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	bc80      	pop	{r7}
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	2000000c 	.word	0x2000000c

0800c584 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c58e:	2302      	movs	r3, #2
 800c590:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d005      	beq.n	800c5a4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3714      	adds	r7, #20
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bc80      	pop	{r7}
 800c5ae:	4770      	bx	lr

0800c5b0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b087      	sub	sp, #28
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5c4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c5ce:	88fa      	ldrh	r2, [r7, #6]
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	371c      	adds	r7, #28
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bc80      	pop	{r7}
 800c5e0:	4770      	bx	lr

0800c5e2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b085      	sub	sp, #20
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
 800c5ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5f2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	bc80      	pop	{r7}
 800c606:	4770      	bx	lr

0800c608 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c616:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d01c      	beq.n	800c65c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d115      	bne.n	800c658 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2201      	movs	r2, #1
 800c630:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	2181      	movs	r1, #129	@ 0x81
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f001 fd46 	bl	800e0e0 <USBD_LL_Transmit>

      return USBD_OK;
 800c654:	2300      	movs	r3, #0
 800c656:	e002      	b.n	800c65e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c658:	2301      	movs	r3, #1
 800c65a:	e000      	b.n	800c65e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c65c:	2302      	movs	r3, #2
  }
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b084      	sub	sp, #16
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c674:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d017      	beq.n	800c6b0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	7c1b      	ldrb	r3, [r3, #16]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d109      	bne.n	800c69c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c68e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c692:	2101      	movs	r1, #1
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f001 fd46 	bl	800e126 <USBD_LL_PrepareReceive>
 800c69a:	e007      	b.n	800c6ac <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c6a2:	2340      	movs	r3, #64	@ 0x40
 800c6a4:	2101      	movs	r1, #1
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f001 fd3d 	bl	800e126 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	e000      	b.n	800c6b2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c6b0:	2302      	movs	r3, #2
  }
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b084      	sub	sp, #16
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	60f8      	str	r0, [r7, #12]
 800c6c2:	60b9      	str	r1, [r7, #8]
 800c6c4:	4613      	mov	r3, r2
 800c6c6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d101      	bne.n	800c6d2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c6ce:	2302      	movs	r3, #2
 800c6d0:	e01a      	b.n	800c708 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d003      	beq.n	800c6e4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d003      	beq.n	800c6f2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	79fa      	ldrb	r2, [r7, #7]
 800c6fe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c700:	68f8      	ldr	r0, [r7, #12]
 800c702:	f001 fb75 	bl	800ddf0 <USBD_LL_Init>

  return USBD_OK;
 800c706:	2300      	movs	r3, #0
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2201      	movs	r2, #1
 800c71c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	6852      	ldr	r2, [r2, #4]
 800c72c:	b2d2      	uxtb	r2, r2
 800c72e:	4611      	mov	r1, r2
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev);
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f001 fbeb 	bl	800df10 <USBD_LL_Stop>

  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f001 fbb2 	bl	800dea4 <USBD_LL_DeInit>

  return USBD_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	3708      	adds	r7, #8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c74a:	b480      	push	{r7}
 800c74c:	b085      	sub	sp, #20
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
 800c752:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c754:	2300      	movs	r3, #0
 800c756:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d006      	beq.n	800c76c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	683a      	ldr	r2, [r7, #0]
 800c762:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800c766:	2300      	movs	r3, #0
 800c768:	73fb      	strb	r3, [r7, #15]
 800c76a:	e001      	b.n	800c770 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c76c:	2302      	movs	r3, #2
 800c76e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c770:	7bfb      	ldrb	r3, [r7, #15]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3714      	adds	r7, #20
 800c776:	46bd      	mov	sp, r7
 800c778:	bc80      	pop	{r7}
 800c77a:	4770      	bx	lr

0800c77c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f001 fba8 	bl	800deda <USBD_LL_Start>

  return USBD_OK;
 800c78a:	2300      	movs	r3, #0
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3708      	adds	r7, #8
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c79c:	2300      	movs	r3, #0
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bc80      	pop	{r7}
 800c7a6:	4770      	bx	lr

0800c7a8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00c      	beq.n	800c7dc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	78fa      	ldrb	r2, [r7, #3]
 800c7cc:	4611      	mov	r1, r2
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	4798      	blx	r3
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d101      	bne.n	800c7dc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b082      	sub	sp, #8
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	78fa      	ldrb	r2, [r7, #3]
 800c7fc:	4611      	mov	r1, r2
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	4798      	blx	r3

  return USBD_OK;
 800c802:	2300      	movs	r3, #0
}
 800c804:	4618      	mov	r0, r3
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	4618      	mov	r0, r3
 800c820:	f000 fed7 	bl	800d5d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c832:	461a      	mov	r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800c840:	f003 031f 	and.w	r3, r3, #31
 800c844:	2b02      	cmp	r3, #2
 800c846:	d016      	beq.n	800c876 <USBD_LL_SetupStage+0x6a>
 800c848:	2b02      	cmp	r3, #2
 800c84a:	d81c      	bhi.n	800c886 <USBD_LL_SetupStage+0x7a>
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d002      	beq.n	800c856 <USBD_LL_SetupStage+0x4a>
 800c850:	2b01      	cmp	r3, #1
 800c852:	d008      	beq.n	800c866 <USBD_LL_SetupStage+0x5a>
 800c854:	e017      	b.n	800c886 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800c85c:	4619      	mov	r1, r3
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 f9ca 	bl	800cbf8 <USBD_StdDevReq>
      break;
 800c864:	e01a      	b.n	800c89c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800c86c:	4619      	mov	r1, r3
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 fa2c 	bl	800cccc <USBD_StdItfReq>
      break;
 800c874:	e012      	b.n	800c89c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800c87c:	4619      	mov	r1, r3
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 fa6c 	bl	800cd5c <USBD_StdEPReq>
      break;
 800c884:	e00a      	b.n	800c89c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800c88c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c890:	b2db      	uxtb	r3, r3
 800c892:	4619      	mov	r1, r3
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f001 fb9b 	bl	800dfd0 <USBD_LL_StallEP>
      break;
 800c89a:	bf00      	nop
  }

  return USBD_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b086      	sub	sp, #24
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	60f8      	str	r0, [r7, #12]
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	607a      	str	r2, [r7, #4]
 800c8b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c8b4:	7afb      	ldrb	r3, [r7, #11]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d14b      	bne.n	800c952 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c8c0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c8c8:	2b03      	cmp	r3, #3
 800c8ca:	d134      	bne.n	800c936 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	68da      	ldr	r2, [r3, #12]
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	691b      	ldr	r3, [r3, #16]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d919      	bls.n	800c90c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	68da      	ldr	r2, [r3, #12]
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	691b      	ldr	r3, [r3, #16]
 800c8e0:	1ad2      	subs	r2, r2, r3
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	68da      	ldr	r2, [r3, #12]
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d203      	bcs.n	800c8fa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	e002      	b.n	800c900 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	461a      	mov	r2, r3
 800c902:	6879      	ldr	r1, [r7, #4]
 800c904:	68f8      	ldr	r0, [r7, #12]
 800c906:	f000 ff53 	bl	800d7b0 <USBD_CtlContinueRx>
 800c90a:	e038      	b.n	800c97e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c912:	691b      	ldr	r3, [r3, #16]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00a      	beq.n	800c92e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c91e:	2b03      	cmp	r3, #3
 800c920:	d105      	bne.n	800c92e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c928:	691b      	ldr	r3, [r3, #16]
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	f000 ff50 	bl	800d7d4 <USBD_CtlSendStatus>
 800c934:	e023      	b.n	800c97e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c93c:	2b05      	cmp	r3, #5
 800c93e:	d11e      	bne.n	800c97e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2200      	movs	r2, #0
 800c944:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800c948:	2100      	movs	r1, #0
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	f001 fb40 	bl	800dfd0 <USBD_LL_StallEP>
 800c950:	e015      	b.n	800c97e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c958:	699b      	ldr	r3, [r3, #24]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00d      	beq.n	800c97a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c964:	2b03      	cmp	r3, #3
 800c966:	d108      	bne.n	800c97a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c96e:	699b      	ldr	r3, [r3, #24]
 800c970:	7afa      	ldrb	r2, [r7, #11]
 800c972:	4611      	mov	r1, r2
 800c974:	68f8      	ldr	r0, [r7, #12]
 800c976:	4798      	blx	r3
 800c978:	e001      	b.n	800c97e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c97a:	2302      	movs	r3, #2
 800c97c:	e000      	b.n	800c980 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c97e:	2300      	movs	r3, #0
}
 800c980:	4618      	mov	r0, r3
 800c982:	3718      	adds	r7, #24
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	460b      	mov	r3, r1
 800c992:	607a      	str	r2, [r7, #4]
 800c994:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c996:	7afb      	ldrb	r3, [r7, #11]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d17f      	bne.n	800ca9c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	3314      	adds	r3, #20
 800c9a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c9a8:	2b02      	cmp	r3, #2
 800c9aa:	d15c      	bne.n	800ca66 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	68da      	ldr	r2, [r3, #12]
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d915      	bls.n	800c9e4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	68da      	ldr	r2, [r3, #12]
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	691b      	ldr	r3, [r3, #16]
 800c9c0:	1ad2      	subs	r2, r2, r3
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	6879      	ldr	r1, [r7, #4]
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	f000 febd 	bl	800d750 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	2200      	movs	r2, #0
 800c9da:	2100      	movs	r1, #0
 800c9dc:	68f8      	ldr	r0, [r7, #12]
 800c9de:	f001 fba2 	bl	800e126 <USBD_LL_PrepareReceive>
 800c9e2:	e04e      	b.n	800ca82 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	697a      	ldr	r2, [r7, #20]
 800c9ea:	6912      	ldr	r2, [r2, #16]
 800c9ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9f0:	fb01 f202 	mul.w	r2, r1, r2
 800c9f4:	1a9b      	subs	r3, r3, r2
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d11c      	bne.n	800ca34 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	689a      	ldr	r2, [r3, #8]
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d316      	bcc.n	800ca34 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	689a      	ldr	r2, [r3, #8]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d20f      	bcs.n	800ca34 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ca14:	2200      	movs	r2, #0
 800ca16:	2100      	movs	r1, #0
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f000 fe99 	bl	800d750 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca26:	2300      	movs	r3, #0
 800ca28:	2200      	movs	r2, #0
 800ca2a:	2100      	movs	r1, #0
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f001 fb7a 	bl	800e126 <USBD_LL_PrepareReceive>
 800ca32:	e026      	b.n	800ca82 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00a      	beq.n	800ca56 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ca46:	2b03      	cmp	r3, #3
 800ca48:	d105      	bne.n	800ca56 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	68f8      	ldr	r0, [r7, #12]
 800ca54:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ca56:	2180      	movs	r1, #128	@ 0x80
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f001 fab9 	bl	800dfd0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ca5e:	68f8      	ldr	r0, [r7, #12]
 800ca60:	f000 fecb 	bl	800d7fa <USBD_CtlReceiveStatus>
 800ca64:	e00d      	b.n	800ca82 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ca6c:	2b04      	cmp	r3, #4
 800ca6e:	d004      	beq.n	800ca7a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d103      	bne.n	800ca82 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ca7a:	2180      	movs	r1, #128	@ 0x80
 800ca7c:	68f8      	ldr	r0, [r7, #12]
 800ca7e:	f001 faa7 	bl	800dfd0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d11d      	bne.n	800cac8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f7ff fe81 	bl	800c794 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2200      	movs	r2, #0
 800ca96:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ca9a:	e015      	b.n	800cac8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800caa2:	695b      	ldr	r3, [r3, #20]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00d      	beq.n	800cac4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800caae:	2b03      	cmp	r3, #3
 800cab0:	d108      	bne.n	800cac4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cab8:	695b      	ldr	r3, [r3, #20]
 800caba:	7afa      	ldrb	r2, [r7, #11]
 800cabc:	4611      	mov	r1, r2
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	4798      	blx	r3
 800cac2:	e001      	b.n	800cac8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cac4:	2302      	movs	r3, #2
 800cac6:	e000      	b.n	800caca <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3718      	adds	r7, #24
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b082      	sub	sp, #8
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cada:	2340      	movs	r3, #64	@ 0x40
 800cadc:	2200      	movs	r2, #0
 800cade:	2100      	movs	r1, #0
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f001 fa30 	bl	800df46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2201      	movs	r2, #1
 800caea:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2240      	movs	r2, #64	@ 0x40
 800caf2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800caf6:	2340      	movs	r3, #64	@ 0x40
 800caf8:	2200      	movs	r2, #0
 800cafa:	2180      	movs	r1, #128	@ 0x80
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f001 fa22 	bl	800df46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2201      	movs	r2, #1
 800cb06:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2240      	movs	r2, #64	@ 0x40
 800cb0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2201      	movs	r2, #1
 800cb12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d009      	beq.n	800cb4a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	6852      	ldr	r2, [r2, #4]
 800cb42:	b2d2      	uxtb	r2, r2
 800cb44:	4611      	mov	r1, r2
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	4798      	blx	r3
  }

  return USBD_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	460b      	mov	r3, r1
 800cb5e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	78fa      	ldrb	r2, [r7, #3]
 800cb64:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bc80      	pop	{r7}
 800cb70:	4770      	bx	lr

0800cb72 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cb72:	b480      	push	{r7}
 800cb74:	b083      	sub	sp, #12
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2204      	movs	r2, #4
 800cb8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	370c      	adds	r7, #12
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bc80      	pop	{r7}
 800cb98:	4770      	bx	lr

0800cb9a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cb9a:	b480      	push	{r7}
 800cb9c:	b083      	sub	sp, #12
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cba8:	2b04      	cmp	r3, #4
 800cbaa:	d105      	bne.n	800cbb8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cbb8:	2300      	movs	r3, #0
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	370c      	adds	r7, #12
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bc80      	pop	{r7}
 800cbc2:	4770      	bx	lr

0800cbc4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbd2:	2b03      	cmp	r3, #3
 800cbd4:	d10b      	bne.n	800cbee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbdc:	69db      	ldr	r3, [r3, #28]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d005      	beq.n	800cbee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbe8:	69db      	ldr	r3, [r3, #28]
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cbee:	2300      	movs	r3, #0
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc02:	2300      	movs	r3, #0
 800cc04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cc0e:	2b40      	cmp	r3, #64	@ 0x40
 800cc10:	d005      	beq.n	800cc1e <USBD_StdDevReq+0x26>
 800cc12:	2b40      	cmp	r3, #64	@ 0x40
 800cc14:	d84f      	bhi.n	800ccb6 <USBD_StdDevReq+0xbe>
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d009      	beq.n	800cc2e <USBD_StdDevReq+0x36>
 800cc1a:	2b20      	cmp	r3, #32
 800cc1c:	d14b      	bne.n	800ccb6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	6839      	ldr	r1, [r7, #0]
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	4798      	blx	r3
      break;
 800cc2c:	e048      	b.n	800ccc0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	785b      	ldrb	r3, [r3, #1]
 800cc32:	2b09      	cmp	r3, #9
 800cc34:	d839      	bhi.n	800ccaa <USBD_StdDevReq+0xb2>
 800cc36:	a201      	add	r2, pc, #4	@ (adr r2, 800cc3c <USBD_StdDevReq+0x44>)
 800cc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3c:	0800cc8d 	.word	0x0800cc8d
 800cc40:	0800cca1 	.word	0x0800cca1
 800cc44:	0800ccab 	.word	0x0800ccab
 800cc48:	0800cc97 	.word	0x0800cc97
 800cc4c:	0800ccab 	.word	0x0800ccab
 800cc50:	0800cc6f 	.word	0x0800cc6f
 800cc54:	0800cc65 	.word	0x0800cc65
 800cc58:	0800ccab 	.word	0x0800ccab
 800cc5c:	0800cc83 	.word	0x0800cc83
 800cc60:	0800cc79 	.word	0x0800cc79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cc64:	6839      	ldr	r1, [r7, #0]
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 f9dc 	bl	800d024 <USBD_GetDescriptor>
          break;
 800cc6c:	e022      	b.n	800ccb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cc6e:	6839      	ldr	r1, [r7, #0]
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 fb3f 	bl	800d2f4 <USBD_SetAddress>
          break;
 800cc76:	e01d      	b.n	800ccb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800cc78:	6839      	ldr	r1, [r7, #0]
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 fb7e 	bl	800d37c <USBD_SetConfig>
          break;
 800cc80:	e018      	b.n	800ccb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cc82:	6839      	ldr	r1, [r7, #0]
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 fc07 	bl	800d498 <USBD_GetConfig>
          break;
 800cc8a:	e013      	b.n	800ccb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cc8c:	6839      	ldr	r1, [r7, #0]
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 fc37 	bl	800d502 <USBD_GetStatus>
          break;
 800cc94:	e00e      	b.n	800ccb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cc96:	6839      	ldr	r1, [r7, #0]
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 fc65 	bl	800d568 <USBD_SetFeature>
          break;
 800cc9e:	e009      	b.n	800ccb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cca0:	6839      	ldr	r1, [r7, #0]
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 fc74 	bl	800d590 <USBD_ClrFeature>
          break;
 800cca8:	e004      	b.n	800ccb4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ccaa:	6839      	ldr	r1, [r7, #0]
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f000 fcc9 	bl	800d644 <USBD_CtlError>
          break;
 800ccb2:	bf00      	nop
      }
      break;
 800ccb4:	e004      	b.n	800ccc0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 fcc3 	bl	800d644 <USBD_CtlError>
      break;
 800ccbe:	bf00      	nop
  }

  return ret;
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop

0800cccc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cce2:	2b40      	cmp	r3, #64	@ 0x40
 800cce4:	d005      	beq.n	800ccf2 <USBD_StdItfReq+0x26>
 800cce6:	2b40      	cmp	r3, #64	@ 0x40
 800cce8:	d82e      	bhi.n	800cd48 <USBD_StdItfReq+0x7c>
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d001      	beq.n	800ccf2 <USBD_StdItfReq+0x26>
 800ccee:	2b20      	cmp	r3, #32
 800ccf0:	d12a      	bne.n	800cd48 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	2b02      	cmp	r3, #2
 800ccfc:	d81d      	bhi.n	800cd3a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	889b      	ldrh	r3, [r3, #4]
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d813      	bhi.n	800cd30 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	6839      	ldr	r1, [r7, #0]
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	4798      	blx	r3
 800cd16:	4603      	mov	r3, r0
 800cd18:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	88db      	ldrh	r3, [r3, #6]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d110      	bne.n	800cd44 <USBD_StdItfReq+0x78>
 800cd22:	7bfb      	ldrb	r3, [r7, #15]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d10d      	bne.n	800cd44 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f000 fd53 	bl	800d7d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cd2e:	e009      	b.n	800cd44 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800cd30:	6839      	ldr	r1, [r7, #0]
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 fc86 	bl	800d644 <USBD_CtlError>
          break;
 800cd38:	e004      	b.n	800cd44 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800cd3a:	6839      	ldr	r1, [r7, #0]
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 fc81 	bl	800d644 <USBD_CtlError>
          break;
 800cd42:	e000      	b.n	800cd46 <USBD_StdItfReq+0x7a>
          break;
 800cd44:	bf00      	nop
      }
      break;
 800cd46:	e004      	b.n	800cd52 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800cd48:	6839      	ldr	r1, [r7, #0]
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 fc7a 	bl	800d644 <USBD_CtlError>
      break;
 800cd50:	bf00      	nop
  }

  return USBD_OK;
 800cd52:	2300      	movs	r3, #0
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3710      	adds	r7, #16
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cd66:	2300      	movs	r3, #0
 800cd68:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	889b      	ldrh	r3, [r3, #4]
 800cd6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cd78:	2b40      	cmp	r3, #64	@ 0x40
 800cd7a:	d007      	beq.n	800cd8c <USBD_StdEPReq+0x30>
 800cd7c:	2b40      	cmp	r3, #64	@ 0x40
 800cd7e:	f200 8146 	bhi.w	800d00e <USBD_StdEPReq+0x2b2>
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d00a      	beq.n	800cd9c <USBD_StdEPReq+0x40>
 800cd86:	2b20      	cmp	r3, #32
 800cd88:	f040 8141 	bne.w	800d00e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	6839      	ldr	r1, [r7, #0]
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	4798      	blx	r3
      break;
 800cd9a:	e13d      	b.n	800d018 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cda4:	2b20      	cmp	r3, #32
 800cda6:	d10a      	bne.n	800cdbe <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdae:	689b      	ldr	r3, [r3, #8]
 800cdb0:	6839      	ldr	r1, [r7, #0]
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	4798      	blx	r3
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800cdba:	7bfb      	ldrb	r3, [r7, #15]
 800cdbc:	e12d      	b.n	800d01a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	785b      	ldrb	r3, [r3, #1]
 800cdc2:	2b03      	cmp	r3, #3
 800cdc4:	d007      	beq.n	800cdd6 <USBD_StdEPReq+0x7a>
 800cdc6:	2b03      	cmp	r3, #3
 800cdc8:	f300 811b 	bgt.w	800d002 <USBD_StdEPReq+0x2a6>
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d072      	beq.n	800ceb6 <USBD_StdEPReq+0x15a>
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d03a      	beq.n	800ce4a <USBD_StdEPReq+0xee>
 800cdd4:	e115      	b.n	800d002 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d002      	beq.n	800cde6 <USBD_StdEPReq+0x8a>
 800cde0:	2b03      	cmp	r3, #3
 800cde2:	d015      	beq.n	800ce10 <USBD_StdEPReq+0xb4>
 800cde4:	e02b      	b.n	800ce3e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cde6:	7bbb      	ldrb	r3, [r7, #14]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00c      	beq.n	800ce06 <USBD_StdEPReq+0xaa>
 800cdec:	7bbb      	ldrb	r3, [r7, #14]
 800cdee:	2b80      	cmp	r3, #128	@ 0x80
 800cdf0:	d009      	beq.n	800ce06 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800cdf2:	7bbb      	ldrb	r3, [r7, #14]
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f001 f8ea 	bl	800dfd0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800cdfc:	2180      	movs	r1, #128	@ 0x80
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f001 f8e6 	bl	800dfd0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce04:	e020      	b.n	800ce48 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ce06:	6839      	ldr	r1, [r7, #0]
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 fc1b 	bl	800d644 <USBD_CtlError>
              break;
 800ce0e:	e01b      	b.n	800ce48 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	885b      	ldrh	r3, [r3, #2]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d10e      	bne.n	800ce36 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ce18:	7bbb      	ldrb	r3, [r7, #14]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00b      	beq.n	800ce36 <USBD_StdEPReq+0xda>
 800ce1e:	7bbb      	ldrb	r3, [r7, #14]
 800ce20:	2b80      	cmp	r3, #128	@ 0x80
 800ce22:	d008      	beq.n	800ce36 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	88db      	ldrh	r3, [r3, #6]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d104      	bne.n	800ce36 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ce2c:	7bbb      	ldrb	r3, [r7, #14]
 800ce2e:	4619      	mov	r1, r3
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f001 f8cd 	bl	800dfd0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 fccc 	bl	800d7d4 <USBD_CtlSendStatus>

              break;
 800ce3c:	e004      	b.n	800ce48 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ce3e:	6839      	ldr	r1, [r7, #0]
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 fbff 	bl	800d644 <USBD_CtlError>
              break;
 800ce46:	bf00      	nop
          }
          break;
 800ce48:	e0e0      	b.n	800d00c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce50:	2b02      	cmp	r3, #2
 800ce52:	d002      	beq.n	800ce5a <USBD_StdEPReq+0xfe>
 800ce54:	2b03      	cmp	r3, #3
 800ce56:	d015      	beq.n	800ce84 <USBD_StdEPReq+0x128>
 800ce58:	e026      	b.n	800cea8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce5a:	7bbb      	ldrb	r3, [r7, #14]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00c      	beq.n	800ce7a <USBD_StdEPReq+0x11e>
 800ce60:	7bbb      	ldrb	r3, [r7, #14]
 800ce62:	2b80      	cmp	r3, #128	@ 0x80
 800ce64:	d009      	beq.n	800ce7a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ce66:	7bbb      	ldrb	r3, [r7, #14]
 800ce68:	4619      	mov	r1, r3
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f001 f8b0 	bl	800dfd0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ce70:	2180      	movs	r1, #128	@ 0x80
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f001 f8ac 	bl	800dfd0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce78:	e01c      	b.n	800ceb4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800ce7a:	6839      	ldr	r1, [r7, #0]
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 fbe1 	bl	800d644 <USBD_CtlError>
              break;
 800ce82:	e017      	b.n	800ceb4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	885b      	ldrh	r3, [r3, #2]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d112      	bne.n	800ceb2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ce8c:	7bbb      	ldrb	r3, [r7, #14]
 800ce8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d004      	beq.n	800cea0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ce96:	7bbb      	ldrb	r3, [r7, #14]
 800ce98:	4619      	mov	r1, r3
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f001 f8b7 	bl	800e00e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 fc97 	bl	800d7d4 <USBD_CtlSendStatus>
              }
              break;
 800cea6:	e004      	b.n	800ceb2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800cea8:	6839      	ldr	r1, [r7, #0]
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 fbca 	bl	800d644 <USBD_CtlError>
              break;
 800ceb0:	e000      	b.n	800ceb4 <USBD_StdEPReq+0x158>
              break;
 800ceb2:	bf00      	nop
          }
          break;
 800ceb4:	e0aa      	b.n	800d00c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	d002      	beq.n	800cec6 <USBD_StdEPReq+0x16a>
 800cec0:	2b03      	cmp	r3, #3
 800cec2:	d032      	beq.n	800cf2a <USBD_StdEPReq+0x1ce>
 800cec4:	e097      	b.n	800cff6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cec6:	7bbb      	ldrb	r3, [r7, #14]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d007      	beq.n	800cedc <USBD_StdEPReq+0x180>
 800cecc:	7bbb      	ldrb	r3, [r7, #14]
 800cece:	2b80      	cmp	r3, #128	@ 0x80
 800ced0:	d004      	beq.n	800cedc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ced2:	6839      	ldr	r1, [r7, #0]
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 fbb5 	bl	800d644 <USBD_CtlError>
                break;
 800ceda:	e091      	b.n	800d000 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cedc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	da0b      	bge.n	800cefc <USBD_StdEPReq+0x1a0>
 800cee4:	7bbb      	ldrb	r3, [r7, #14]
 800cee6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ceea:	4613      	mov	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4413      	add	r3, r2
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	3310      	adds	r3, #16
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	4413      	add	r3, r2
 800cef8:	3304      	adds	r3, #4
 800cefa:	e00b      	b.n	800cf14 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cefc:	7bbb      	ldrb	r3, [r7, #14]
 800cefe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf02:	4613      	mov	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4413      	add	r3, r2
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	4413      	add	r3, r2
 800cf12:	3304      	adds	r3, #4
 800cf14:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	2202      	movs	r2, #2
 800cf20:	4619      	mov	r1, r3
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fbf8 	bl	800d718 <USBD_CtlSendData>
              break;
 800cf28:	e06a      	b.n	800d000 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cf2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	da11      	bge.n	800cf56 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cf32:	7bbb      	ldrb	r3, [r7, #14]
 800cf34:	f003 020f 	and.w	r2, r3, #15
 800cf38:	6879      	ldr	r1, [r7, #4]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	4413      	add	r3, r2
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	440b      	add	r3, r1
 800cf44:	3318      	adds	r3, #24
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d117      	bne.n	800cf7c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800cf4c:	6839      	ldr	r1, [r7, #0]
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 fb78 	bl	800d644 <USBD_CtlError>
                  break;
 800cf54:	e054      	b.n	800d000 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cf56:	7bbb      	ldrb	r3, [r7, #14]
 800cf58:	f003 020f 	and.w	r2, r3, #15
 800cf5c:	6879      	ldr	r1, [r7, #4]
 800cf5e:	4613      	mov	r3, r2
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	4413      	add	r3, r2
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	440b      	add	r3, r1
 800cf68:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d104      	bne.n	800cf7c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800cf72:	6839      	ldr	r1, [r7, #0]
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 fb65 	bl	800d644 <USBD_CtlError>
                  break;
 800cf7a:	e041      	b.n	800d000 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	da0b      	bge.n	800cf9c <USBD_StdEPReq+0x240>
 800cf84:	7bbb      	ldrb	r3, [r7, #14]
 800cf86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	4413      	add	r3, r2
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	3310      	adds	r3, #16
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	4413      	add	r3, r2
 800cf98:	3304      	adds	r3, #4
 800cf9a:	e00b      	b.n	800cfb4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cf9c:	7bbb      	ldrb	r3, [r7, #14]
 800cf9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	4413      	add	r3, r2
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	3304      	adds	r3, #4
 800cfb4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cfb6:	7bbb      	ldrb	r3, [r7, #14]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <USBD_StdEPReq+0x266>
 800cfbc:	7bbb      	ldrb	r3, [r7, #14]
 800cfbe:	2b80      	cmp	r3, #128	@ 0x80
 800cfc0:	d103      	bne.n	800cfca <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	601a      	str	r2, [r3, #0]
 800cfc8:	e00e      	b.n	800cfe8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800cfca:	7bbb      	ldrb	r3, [r7, #14]
 800cfcc:	4619      	mov	r1, r3
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f001 f83c 	bl	800e04c <USBD_LL_IsStallEP>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d003      	beq.n	800cfe2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	601a      	str	r2, [r3, #0]
 800cfe0:	e002      	b.n	800cfe8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	2202      	movs	r2, #2
 800cfec:	4619      	mov	r1, r3
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 fb92 	bl	800d718 <USBD_CtlSendData>
              break;
 800cff4:	e004      	b.n	800d000 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800cff6:	6839      	ldr	r1, [r7, #0]
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 fb23 	bl	800d644 <USBD_CtlError>
              break;
 800cffe:	bf00      	nop
          }
          break;
 800d000:	e004      	b.n	800d00c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800d002:	6839      	ldr	r1, [r7, #0]
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 fb1d 	bl	800d644 <USBD_CtlError>
          break;
 800d00a:	bf00      	nop
      }
      break;
 800d00c:	e004      	b.n	800d018 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800d00e:	6839      	ldr	r1, [r7, #0]
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 fb17 	bl	800d644 <USBD_CtlError>
      break;
 800d016:	bf00      	nop
  }

  return ret;
 800d018:	7bfb      	ldrb	r3, [r7, #15]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
	...

0800d024 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d02e:	2300      	movs	r3, #0
 800d030:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d032:	2300      	movs	r3, #0
 800d034:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d036:	2300      	movs	r3, #0
 800d038:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	885b      	ldrh	r3, [r3, #2]
 800d03e:	0a1b      	lsrs	r3, r3, #8
 800d040:	b29b      	uxth	r3, r3
 800d042:	3b01      	subs	r3, #1
 800d044:	2b06      	cmp	r3, #6
 800d046:	f200 8128 	bhi.w	800d29a <USBD_GetDescriptor+0x276>
 800d04a:	a201      	add	r2, pc, #4	@ (adr r2, 800d050 <USBD_GetDescriptor+0x2c>)
 800d04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d050:	0800d06d 	.word	0x0800d06d
 800d054:	0800d085 	.word	0x0800d085
 800d058:	0800d0c5 	.word	0x0800d0c5
 800d05c:	0800d29b 	.word	0x0800d29b
 800d060:	0800d29b 	.word	0x0800d29b
 800d064:	0800d23b 	.word	0x0800d23b
 800d068:	0800d267 	.word	0x0800d267
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	7c12      	ldrb	r2, [r2, #16]
 800d078:	f107 0108 	add.w	r1, r7, #8
 800d07c:	4610      	mov	r0, r2
 800d07e:	4798      	blx	r3
 800d080:	60f8      	str	r0, [r7, #12]
      break;
 800d082:	e112      	b.n	800d2aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	7c1b      	ldrb	r3, [r3, #16]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d10d      	bne.n	800d0a8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d094:	f107 0208 	add.w	r2, r7, #8
 800d098:	4610      	mov	r0, r2
 800d09a:	4798      	blx	r3
 800d09c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	2202      	movs	r2, #2
 800d0a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d0a6:	e100      	b.n	800d2aa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0b0:	f107 0208 	add.w	r2, r7, #8
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	4798      	blx	r3
 800d0b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	2202      	movs	r2, #2
 800d0c0:	701a      	strb	r2, [r3, #0]
      break;
 800d0c2:	e0f2      	b.n	800d2aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	885b      	ldrh	r3, [r3, #2]
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	2b05      	cmp	r3, #5
 800d0cc:	f200 80ac 	bhi.w	800d228 <USBD_GetDescriptor+0x204>
 800d0d0:	a201      	add	r2, pc, #4	@ (adr r2, 800d0d8 <USBD_GetDescriptor+0xb4>)
 800d0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d6:	bf00      	nop
 800d0d8:	0800d0f1 	.word	0x0800d0f1
 800d0dc:	0800d125 	.word	0x0800d125
 800d0e0:	0800d159 	.word	0x0800d159
 800d0e4:	0800d18d 	.word	0x0800d18d
 800d0e8:	0800d1c1 	.word	0x0800d1c1
 800d0ec:	0800d1f5 	.word	0x0800d1f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00b      	beq.n	800d114 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	7c12      	ldrb	r2, [r2, #16]
 800d108:	f107 0108 	add.w	r1, r7, #8
 800d10c:	4610      	mov	r0, r2
 800d10e:	4798      	blx	r3
 800d110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d112:	e091      	b.n	800d238 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d114:	6839      	ldr	r1, [r7, #0]
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 fa94 	bl	800d644 <USBD_CtlError>
            err++;
 800d11c:	7afb      	ldrb	r3, [r7, #11]
 800d11e:	3301      	adds	r3, #1
 800d120:	72fb      	strb	r3, [r7, #11]
          break;
 800d122:	e089      	b.n	800d238 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00b      	beq.n	800d148 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d136:	689b      	ldr	r3, [r3, #8]
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	7c12      	ldrb	r2, [r2, #16]
 800d13c:	f107 0108 	add.w	r1, r7, #8
 800d140:	4610      	mov	r0, r2
 800d142:	4798      	blx	r3
 800d144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d146:	e077      	b.n	800d238 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d148:	6839      	ldr	r1, [r7, #0]
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 fa7a 	bl	800d644 <USBD_CtlError>
            err++;
 800d150:	7afb      	ldrb	r3, [r7, #11]
 800d152:	3301      	adds	r3, #1
 800d154:	72fb      	strb	r3, [r7, #11]
          break;
 800d156:	e06f      	b.n	800d238 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d15e:	68db      	ldr	r3, [r3, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00b      	beq.n	800d17c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	7c12      	ldrb	r2, [r2, #16]
 800d170:	f107 0108 	add.w	r1, r7, #8
 800d174:	4610      	mov	r0, r2
 800d176:	4798      	blx	r3
 800d178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d17a:	e05d      	b.n	800d238 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d17c:	6839      	ldr	r1, [r7, #0]
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 fa60 	bl	800d644 <USBD_CtlError>
            err++;
 800d184:	7afb      	ldrb	r3, [r7, #11]
 800d186:	3301      	adds	r3, #1
 800d188:	72fb      	strb	r3, [r7, #11]
          break;
 800d18a:	e055      	b.n	800d238 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d00b      	beq.n	800d1b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d19e:	691b      	ldr	r3, [r3, #16]
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	7c12      	ldrb	r2, [r2, #16]
 800d1a4:	f107 0108 	add.w	r1, r7, #8
 800d1a8:	4610      	mov	r0, r2
 800d1aa:	4798      	blx	r3
 800d1ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1ae:	e043      	b.n	800d238 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 fa46 	bl	800d644 <USBD_CtlError>
            err++;
 800d1b8:	7afb      	ldrb	r3, [r7, #11]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	72fb      	strb	r3, [r7, #11]
          break;
 800d1be:	e03b      	b.n	800d238 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d1c6:	695b      	ldr	r3, [r3, #20]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00b      	beq.n	800d1e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d1d2:	695b      	ldr	r3, [r3, #20]
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	7c12      	ldrb	r2, [r2, #16]
 800d1d8:	f107 0108 	add.w	r1, r7, #8
 800d1dc:	4610      	mov	r0, r2
 800d1de:	4798      	blx	r3
 800d1e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1e2:	e029      	b.n	800d238 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1e4:	6839      	ldr	r1, [r7, #0]
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 fa2c 	bl	800d644 <USBD_CtlError>
            err++;
 800d1ec:	7afb      	ldrb	r3, [r7, #11]
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	72fb      	strb	r3, [r7, #11]
          break;
 800d1f2:	e021      	b.n	800d238 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d1fa:	699b      	ldr	r3, [r3, #24]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d00b      	beq.n	800d218 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d206:	699b      	ldr	r3, [r3, #24]
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	7c12      	ldrb	r2, [r2, #16]
 800d20c:	f107 0108 	add.w	r1, r7, #8
 800d210:	4610      	mov	r0, r2
 800d212:	4798      	blx	r3
 800d214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d216:	e00f      	b.n	800d238 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 fa12 	bl	800d644 <USBD_CtlError>
            err++;
 800d220:	7afb      	ldrb	r3, [r7, #11]
 800d222:	3301      	adds	r3, #1
 800d224:	72fb      	strb	r3, [r7, #11]
          break;
 800d226:	e007      	b.n	800d238 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800d228:	6839      	ldr	r1, [r7, #0]
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 fa0a 	bl	800d644 <USBD_CtlError>
          err++;
 800d230:	7afb      	ldrb	r3, [r7, #11]
 800d232:	3301      	adds	r3, #1
 800d234:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800d236:	e038      	b.n	800d2aa <USBD_GetDescriptor+0x286>
 800d238:	e037      	b.n	800d2aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	7c1b      	ldrb	r3, [r3, #16]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d109      	bne.n	800d256 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d24a:	f107 0208 	add.w	r2, r7, #8
 800d24e:	4610      	mov	r0, r2
 800d250:	4798      	blx	r3
 800d252:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d254:	e029      	b.n	800d2aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d256:	6839      	ldr	r1, [r7, #0]
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f9f3 	bl	800d644 <USBD_CtlError>
        err++;
 800d25e:	7afb      	ldrb	r3, [r7, #11]
 800d260:	3301      	adds	r3, #1
 800d262:	72fb      	strb	r3, [r7, #11]
      break;
 800d264:	e021      	b.n	800d2aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	7c1b      	ldrb	r3, [r3, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d10d      	bne.n	800d28a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d276:	f107 0208 	add.w	r2, r7, #8
 800d27a:	4610      	mov	r0, r2
 800d27c:	4798      	blx	r3
 800d27e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	3301      	adds	r3, #1
 800d284:	2207      	movs	r2, #7
 800d286:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d288:	e00f      	b.n	800d2aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d28a:	6839      	ldr	r1, [r7, #0]
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 f9d9 	bl	800d644 <USBD_CtlError>
        err++;
 800d292:	7afb      	ldrb	r3, [r7, #11]
 800d294:	3301      	adds	r3, #1
 800d296:	72fb      	strb	r3, [r7, #11]
      break;
 800d298:	e007      	b.n	800d2aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d29a:	6839      	ldr	r1, [r7, #0]
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f9d1 	bl	800d644 <USBD_CtlError>
      err++;
 800d2a2:	7afb      	ldrb	r3, [r7, #11]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	72fb      	strb	r3, [r7, #11]
      break;
 800d2a8:	bf00      	nop
  }

  if (err != 0U)
 800d2aa:	7afb      	ldrb	r3, [r7, #11]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d11c      	bne.n	800d2ea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800d2b0:	893b      	ldrh	r3, [r7, #8]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d011      	beq.n	800d2da <USBD_GetDescriptor+0x2b6>
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	88db      	ldrh	r3, [r3, #6]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00d      	beq.n	800d2da <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	88da      	ldrh	r2, [r3, #6]
 800d2c2:	893b      	ldrh	r3, [r7, #8]
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	bf28      	it	cs
 800d2c8:	4613      	movcs	r3, r2
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d2ce:	893b      	ldrh	r3, [r7, #8]
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	68f9      	ldr	r1, [r7, #12]
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 fa1f 	bl	800d718 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	88db      	ldrh	r3, [r3, #6]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d104      	bne.n	800d2ec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 fa76 	bl	800d7d4 <USBD_CtlSendStatus>
 800d2e8:	e000      	b.n	800d2ec <USBD_GetDescriptor+0x2c8>
    return;
 800d2ea:	bf00      	nop
    }
  }
}
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop

0800d2f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	889b      	ldrh	r3, [r3, #4]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d130      	bne.n	800d368 <USBD_SetAddress+0x74>
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	88db      	ldrh	r3, [r3, #6]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d12c      	bne.n	800d368 <USBD_SetAddress+0x74>
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	885b      	ldrh	r3, [r3, #2]
 800d312:	2b7f      	cmp	r3, #127	@ 0x7f
 800d314:	d828      	bhi.n	800d368 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	885b      	ldrh	r3, [r3, #2]
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d320:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d328:	2b03      	cmp	r3, #3
 800d32a:	d104      	bne.n	800d336 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800d32c:	6839      	ldr	r1, [r7, #0]
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 f988 	bl	800d644 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d334:	e01d      	b.n	800d372 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	7bfa      	ldrb	r2, [r7, #15]
 800d33a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d33e:	7bfb      	ldrb	r3, [r7, #15]
 800d340:	4619      	mov	r1, r3
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 fead 	bl	800e0a2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 fa43 	bl	800d7d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d34e:	7bfb      	ldrb	r3, [r7, #15]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d004      	beq.n	800d35e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2202      	movs	r2, #2
 800d358:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d35c:	e009      	b.n	800d372 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2201      	movs	r2, #1
 800d362:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d366:	e004      	b.n	800d372 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d368:	6839      	ldr	r1, [r7, #0]
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 f96a 	bl	800d644 <USBD_CtlError>
  }
}
 800d370:	bf00      	nop
 800d372:	bf00      	nop
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
	...

0800d37c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	885b      	ldrh	r3, [r3, #2]
 800d38a:	b2da      	uxtb	r2, r3
 800d38c:	4b41      	ldr	r3, [pc, #260]	@ (800d494 <USBD_SetConfig+0x118>)
 800d38e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d390:	4b40      	ldr	r3, [pc, #256]	@ (800d494 <USBD_SetConfig+0x118>)
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	2b01      	cmp	r3, #1
 800d396:	d904      	bls.n	800d3a2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d398:	6839      	ldr	r1, [r7, #0]
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f000 f952 	bl	800d644 <USBD_CtlError>
 800d3a0:	e075      	b.n	800d48e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	d002      	beq.n	800d3b2 <USBD_SetConfig+0x36>
 800d3ac:	2b03      	cmp	r3, #3
 800d3ae:	d023      	beq.n	800d3f8 <USBD_SetConfig+0x7c>
 800d3b0:	e062      	b.n	800d478 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d3b2:	4b38      	ldr	r3, [pc, #224]	@ (800d494 <USBD_SetConfig+0x118>)
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d01a      	beq.n	800d3f0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800d3ba:	4b36      	ldr	r3, [pc, #216]	@ (800d494 <USBD_SetConfig+0x118>)
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2203      	movs	r2, #3
 800d3c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d3cc:	4b31      	ldr	r3, [pc, #196]	@ (800d494 <USBD_SetConfig+0x118>)
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f7ff f9e8 	bl	800c7a8 <USBD_SetClassConfig>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b02      	cmp	r3, #2
 800d3dc:	d104      	bne.n	800d3e8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800d3de:	6839      	ldr	r1, [r7, #0]
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 f92f 	bl	800d644 <USBD_CtlError>
            return;
 800d3e6:	e052      	b.n	800d48e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f000 f9f3 	bl	800d7d4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d3ee:	e04e      	b.n	800d48e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 f9ef 	bl	800d7d4 <USBD_CtlSendStatus>
        break;
 800d3f6:	e04a      	b.n	800d48e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d3f8:	4b26      	ldr	r3, [pc, #152]	@ (800d494 <USBD_SetConfig+0x118>)
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d112      	bne.n	800d426 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2202      	movs	r2, #2
 800d404:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800d408:	4b22      	ldr	r3, [pc, #136]	@ (800d494 <USBD_SetConfig+0x118>)
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	461a      	mov	r2, r3
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d412:	4b20      	ldr	r3, [pc, #128]	@ (800d494 <USBD_SetConfig+0x118>)
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	4619      	mov	r1, r3
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f7ff f9e4 	bl	800c7e6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 f9d8 	bl	800d7d4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d424:	e033      	b.n	800d48e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800d426:	4b1b      	ldr	r3, [pc, #108]	@ (800d494 <USBD_SetConfig+0x118>)
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	461a      	mov	r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	429a      	cmp	r2, r3
 800d432:	d01d      	beq.n	800d470 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	4619      	mov	r1, r3
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f7ff f9d2 	bl	800c7e6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d442:	4b14      	ldr	r3, [pc, #80]	@ (800d494 <USBD_SetConfig+0x118>)
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	461a      	mov	r2, r3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d44c:	4b11      	ldr	r3, [pc, #68]	@ (800d494 <USBD_SetConfig+0x118>)
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	4619      	mov	r1, r3
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f7ff f9a8 	bl	800c7a8 <USBD_SetClassConfig>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b02      	cmp	r3, #2
 800d45c:	d104      	bne.n	800d468 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800d45e:	6839      	ldr	r1, [r7, #0]
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f000 f8ef 	bl	800d644 <USBD_CtlError>
            return;
 800d466:	e012      	b.n	800d48e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 f9b3 	bl	800d7d4 <USBD_CtlSendStatus>
        break;
 800d46e:	e00e      	b.n	800d48e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 f9af 	bl	800d7d4 <USBD_CtlSendStatus>
        break;
 800d476:	e00a      	b.n	800d48e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800d478:	6839      	ldr	r1, [r7, #0]
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 f8e2 	bl	800d644 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800d480:	4b04      	ldr	r3, [pc, #16]	@ (800d494 <USBD_SetConfig+0x118>)
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	4619      	mov	r1, r3
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f7ff f9ad 	bl	800c7e6 <USBD_ClrClassConfig>
        break;
 800d48c:	bf00      	nop
    }
  }
}
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	20001818 	.word	0x20001818

0800d498 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	88db      	ldrh	r3, [r3, #6]
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d004      	beq.n	800d4b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d4aa:	6839      	ldr	r1, [r7, #0]
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 f8c9 	bl	800d644 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d4b2:	e022      	b.n	800d4fa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4ba:	2b02      	cmp	r3, #2
 800d4bc:	dc02      	bgt.n	800d4c4 <USBD_GetConfig+0x2c>
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	dc03      	bgt.n	800d4ca <USBD_GetConfig+0x32>
 800d4c2:	e015      	b.n	800d4f0 <USBD_GetConfig+0x58>
 800d4c4:	2b03      	cmp	r3, #3
 800d4c6:	d00b      	beq.n	800d4e0 <USBD_GetConfig+0x48>
 800d4c8:	e012      	b.n	800d4f0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	3308      	adds	r3, #8
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 f91d 	bl	800d718 <USBD_CtlSendData>
        break;
 800d4de:	e00c      	b.n	800d4fa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	3304      	adds	r3, #4
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 f915 	bl	800d718 <USBD_CtlSendData>
        break;
 800d4ee:	e004      	b.n	800d4fa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800d4f0:	6839      	ldr	r1, [r7, #0]
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 f8a6 	bl	800d644 <USBD_CtlError>
        break;
 800d4f8:	bf00      	nop
}
 800d4fa:	bf00      	nop
 800d4fc:	3708      	adds	r7, #8
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d502:	b580      	push	{r7, lr}
 800d504:	b082      	sub	sp, #8
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
 800d50a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d512:	3b01      	subs	r3, #1
 800d514:	2b02      	cmp	r3, #2
 800d516:	d81e      	bhi.n	800d556 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	88db      	ldrh	r3, [r3, #6]
 800d51c:	2b02      	cmp	r3, #2
 800d51e:	d004      	beq.n	800d52a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800d520:	6839      	ldr	r1, [r7, #0]
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 f88e 	bl	800d644 <USBD_CtlError>
        break;
 800d528:	e01a      	b.n	800d560 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2201      	movs	r2, #1
 800d52e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d536:	2b00      	cmp	r3, #0
 800d538:	d005      	beq.n	800d546 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	68db      	ldr	r3, [r3, #12]
 800d53e:	f043 0202 	orr.w	r2, r3, #2
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	330c      	adds	r3, #12
 800d54a:	2202      	movs	r2, #2
 800d54c:	4619      	mov	r1, r3
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 f8e2 	bl	800d718 <USBD_CtlSendData>
      break;
 800d554:	e004      	b.n	800d560 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800d556:	6839      	ldr	r1, [r7, #0]
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 f873 	bl	800d644 <USBD_CtlError>
      break;
 800d55e:	bf00      	nop
  }
}
 800d560:	bf00      	nop
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	885b      	ldrh	r3, [r3, #2]
 800d576:	2b01      	cmp	r3, #1
 800d578:	d106      	bne.n	800d588 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2201      	movs	r2, #1
 800d57e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 f926 	bl	800d7d4 <USBD_CtlSendStatus>
  }
}
 800d588:	bf00      	nop
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	2b02      	cmp	r3, #2
 800d5a4:	d80b      	bhi.n	800d5be <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	885b      	ldrh	r3, [r3, #2]
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d10c      	bne.n	800d5c8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 f90c 	bl	800d7d4 <USBD_CtlSendStatus>
      }
      break;
 800d5bc:	e004      	b.n	800d5c8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d5be:	6839      	ldr	r1, [r7, #0]
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f000 f83f 	bl	800d644 <USBD_CtlError>
      break;
 800d5c6:	e000      	b.n	800d5ca <USBD_ClrFeature+0x3a>
      break;
 800d5c8:	bf00      	nop
  }
}
 800d5ca:	bf00      	nop
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d5d2:	b480      	push	{r7}
 800d5d4:	b083      	sub	sp, #12
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
 800d5da:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	781a      	ldrb	r2, [r3, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	785a      	ldrb	r2, [r3, #1]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	3302      	adds	r3, #2
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	3303      	adds	r3, #3
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	021b      	lsls	r3, r3, #8
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	4413      	add	r3, r2
 800d600:	b29a      	uxth	r2, r3
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	3304      	adds	r3, #4
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	461a      	mov	r2, r3
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	3305      	adds	r3, #5
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	021b      	lsls	r3, r3, #8
 800d616:	b29b      	uxth	r3, r3
 800d618:	4413      	add	r3, r2
 800d61a:	b29a      	uxth	r2, r3
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	3306      	adds	r3, #6
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	461a      	mov	r2, r3
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	3307      	adds	r3, #7
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	021b      	lsls	r3, r3, #8
 800d630:	b29b      	uxth	r3, r3
 800d632:	4413      	add	r3, r2
 800d634:	b29a      	uxth	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	80da      	strh	r2, [r3, #6]

}
 800d63a:	bf00      	nop
 800d63c:	370c      	adds	r7, #12
 800d63e:	46bd      	mov	sp, r7
 800d640:	bc80      	pop	{r7}
 800d642:	4770      	bx	lr

0800d644 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d64e:	2180      	movs	r1, #128	@ 0x80
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 fcbd 	bl	800dfd0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d656:	2100      	movs	r1, #0
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 fcb9 	bl	800dfd0 <USBD_LL_StallEP>
}
 800d65e:	bf00      	nop
 800d660:	3708      	adds	r7, #8
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b086      	sub	sp, #24
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	60f8      	str	r0, [r7, #12]
 800d66e:	60b9      	str	r1, [r7, #8]
 800d670:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d672:	2300      	movs	r3, #0
 800d674:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d032      	beq.n	800d6e2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d67c:	68f8      	ldr	r0, [r7, #12]
 800d67e:	f000 f834 	bl	800d6ea <USBD_GetLen>
 800d682:	4603      	mov	r3, r0
 800d684:	3301      	adds	r3, #1
 800d686:	b29b      	uxth	r3, r3
 800d688:	005b      	lsls	r3, r3, #1
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d690:	7dfb      	ldrb	r3, [r7, #23]
 800d692:	1c5a      	adds	r2, r3, #1
 800d694:	75fa      	strb	r2, [r7, #23]
 800d696:	461a      	mov	r2, r3
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	4413      	add	r3, r2
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	7812      	ldrb	r2, [r2, #0]
 800d6a0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d6a2:	7dfb      	ldrb	r3, [r7, #23]
 800d6a4:	1c5a      	adds	r2, r3, #1
 800d6a6:	75fa      	strb	r2, [r7, #23]
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	2203      	movs	r2, #3
 800d6b0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d6b2:	e012      	b.n	800d6da <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	1c5a      	adds	r2, r3, #1
 800d6b8:	60fa      	str	r2, [r7, #12]
 800d6ba:	7dfa      	ldrb	r2, [r7, #23]
 800d6bc:	1c51      	adds	r1, r2, #1
 800d6be:	75f9      	strb	r1, [r7, #23]
 800d6c0:	4611      	mov	r1, r2
 800d6c2:	68ba      	ldr	r2, [r7, #8]
 800d6c4:	440a      	add	r2, r1
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d6ca:	7dfb      	ldrb	r3, [r7, #23]
 800d6cc:	1c5a      	adds	r2, r3, #1
 800d6ce:	75fa      	strb	r2, [r7, #23]
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1e8      	bne.n	800d6b4 <USBD_GetString+0x4e>
    }
  }
}
 800d6e2:	bf00      	nop
 800d6e4:	3718      	adds	r7, #24
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}

0800d6ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d6ea:	b480      	push	{r7}
 800d6ec:	b085      	sub	sp, #20
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800d6f6:	e005      	b.n	800d704 <USBD_GetLen+0x1a>
  {
    len++;
 800d6f8:	7bfb      	ldrb	r3, [r7, #15]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	73fb      	strb	r3, [r7, #15]
    buf++;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	3301      	adds	r3, #1
 800d702:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d1f5      	bne.n	800d6f8 <USBD_GetLen+0xe>
  }

  return len;
 800d70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3714      	adds	r7, #20
 800d712:	46bd      	mov	sp, r7
 800d714:	bc80      	pop	{r7}
 800d716:	4770      	bx	lr

0800d718 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	60b9      	str	r1, [r7, #8]
 800d722:	4613      	mov	r3, r2
 800d724:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2202      	movs	r2, #2
 800d72a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d72e:	88fa      	ldrh	r2, [r7, #6]
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d734:	88fa      	ldrh	r2, [r7, #6]
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d73a:	88fb      	ldrh	r3, [r7, #6]
 800d73c:	68ba      	ldr	r2, [r7, #8]
 800d73e:	2100      	movs	r1, #0
 800d740:	68f8      	ldr	r0, [r7, #12]
 800d742:	f000 fccd 	bl	800e0e0 <USBD_LL_Transmit>

  return USBD_OK;
 800d746:	2300      	movs	r3, #0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3710      	adds	r7, #16
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	4613      	mov	r3, r2
 800d75c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d75e:	88fb      	ldrh	r3, [r7, #6]
 800d760:	68ba      	ldr	r2, [r7, #8]
 800d762:	2100      	movs	r1, #0
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f000 fcbb 	bl	800e0e0 <USBD_LL_Transmit>

  return USBD_OK;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3710      	adds	r7, #16
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	4613      	mov	r3, r2
 800d780:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2203      	movs	r2, #3
 800d786:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d78a:	88fa      	ldrh	r2, [r7, #6]
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800d792:	88fa      	ldrh	r2, [r7, #6]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d79a:	88fb      	ldrh	r3, [r7, #6]
 800d79c:	68ba      	ldr	r2, [r7, #8]
 800d79e:	2100      	movs	r1, #0
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f000 fcc0 	bl	800e126 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7a6:	2300      	movs	r3, #0
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3710      	adds	r7, #16
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7be:	88fb      	ldrh	r3, [r7, #6]
 800d7c0:	68ba      	ldr	r2, [r7, #8]
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	68f8      	ldr	r0, [r7, #12]
 800d7c6:	f000 fcae 	bl	800e126 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7ca:	2300      	movs	r3, #0
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3710      	adds	r7, #16
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2204      	movs	r2, #4
 800d7e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	2100      	movs	r1, #0
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 fc78 	bl	800e0e0 <USBD_LL_Transmit>

  return USBD_OK;
 800d7f0:	2300      	movs	r3, #0
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3708      	adds	r7, #8
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}

0800d7fa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d7fa:	b580      	push	{r7, lr}
 800d7fc:	b082      	sub	sp, #8
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2205      	movs	r2, #5
 800d806:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d80a:	2300      	movs	r3, #0
 800d80c:	2200      	movs	r2, #0
 800d80e:	2100      	movs	r1, #0
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 fc88 	bl	800e126 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d816:	2300      	movs	r3, #0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3708      	adds	r7, #8
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <MX_USB_DEVICE_Deinit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Deinit(void)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	af00      	add	r7, sp, #0
	if (USBD_DeInit(&hUsbDeviceFS) != USBD_OK)
 800d824:	4804      	ldr	r0, [pc, #16]	@ (800d838 <MX_USB_DEVICE_Deinit+0x18>)
 800d826:	f7fe ff73 	bl	800c710 <USBD_DeInit>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d001      	beq.n	800d834 <MX_USB_DEVICE_Deinit+0x14>
	{
		Error_Handler();
 800d830:	f7f5 fe96 	bl	8003560 <Error_Handler>
	}
}
 800d834:	bf00      	nop
 800d836:	bd80      	pop	{r7, pc}
 800d838:	2000181c 	.word	0x2000181c

0800d83c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d840:	2200      	movs	r2, #0
 800d842:	4912      	ldr	r1, [pc, #72]	@ (800d88c <MX_USB_DEVICE_Init+0x50>)
 800d844:	4812      	ldr	r0, [pc, #72]	@ (800d890 <MX_USB_DEVICE_Init+0x54>)
 800d846:	f7fe ff38 	bl	800c6ba <USBD_Init>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d001      	beq.n	800d854 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d850:	f7f5 fe86 	bl	8003560 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d854:	490f      	ldr	r1, [pc, #60]	@ (800d894 <MX_USB_DEVICE_Init+0x58>)
 800d856:	480e      	ldr	r0, [pc, #56]	@ (800d890 <MX_USB_DEVICE_Init+0x54>)
 800d858:	f7fe ff77 	bl	800c74a <USBD_RegisterClass>
 800d85c:	4603      	mov	r3, r0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d001      	beq.n	800d866 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d862:	f7f5 fe7d 	bl	8003560 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d866:	490c      	ldr	r1, [pc, #48]	@ (800d898 <MX_USB_DEVICE_Init+0x5c>)
 800d868:	4809      	ldr	r0, [pc, #36]	@ (800d890 <MX_USB_DEVICE_Init+0x54>)
 800d86a:	f7fe fe8b 	bl	800c584 <USBD_CDC_RegisterInterface>
 800d86e:	4603      	mov	r3, r0
 800d870:	2b00      	cmp	r3, #0
 800d872:	d001      	beq.n	800d878 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d874:	f7f5 fe74 	bl	8003560 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d878:	4805      	ldr	r0, [pc, #20]	@ (800d890 <MX_USB_DEVICE_Init+0x54>)
 800d87a:	f7fe ff7f 	bl	800c77c <USBD_Start>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d001      	beq.n	800d888 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d884:	f7f5 fe6c 	bl	8003560 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d888:	bf00      	nop
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	2000012c 	.word	0x2000012c
 800d890:	2000181c 	.word	0x2000181c
 800d894:	20000018 	.word	0x20000018
 800d898:	2000011c 	.word	0x2000011c

0800d89c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	4905      	ldr	r1, [pc, #20]	@ (800d8b8 <CDC_Init_FS+0x1c>)
 800d8a4:	4805      	ldr	r0, [pc, #20]	@ (800d8bc <CDC_Init_FS+0x20>)
 800d8a6:	f7fe fe83 	bl	800c5b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d8aa:	4905      	ldr	r1, [pc, #20]	@ (800d8c0 <CDC_Init_FS+0x24>)
 800d8ac:	4803      	ldr	r0, [pc, #12]	@ (800d8bc <CDC_Init_FS+0x20>)
 800d8ae:	f7fe fe98 	bl	800c5e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d8b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	20001ee0 	.word	0x20001ee0
 800d8bc:	2000181c 	.word	0x2000181c
 800d8c0:	20001ae0 	.word	0x20001ae0

0800d8c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d8c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bc80      	pop	{r7}
 800d8d0:	4770      	bx	lr
	...

0800d8d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	4603      	mov	r3, r0
 800d8dc:	6039      	str	r1, [r7, #0]
 800d8de:	71fb      	strb	r3, [r7, #7]
 800d8e0:	4613      	mov	r3, r2
 800d8e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d8e4:	79fb      	ldrb	r3, [r7, #7]
 800d8e6:	2b23      	cmp	r3, #35	@ 0x23
 800d8e8:	d84a      	bhi.n	800d980 <CDC_Control_FS+0xac>
 800d8ea:	a201      	add	r2, pc, #4	@ (adr r2, 800d8f0 <CDC_Control_FS+0x1c>)
 800d8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f0:	0800d981 	.word	0x0800d981
 800d8f4:	0800d981 	.word	0x0800d981
 800d8f8:	0800d981 	.word	0x0800d981
 800d8fc:	0800d981 	.word	0x0800d981
 800d900:	0800d981 	.word	0x0800d981
 800d904:	0800d981 	.word	0x0800d981
 800d908:	0800d981 	.word	0x0800d981
 800d90c:	0800d981 	.word	0x0800d981
 800d910:	0800d981 	.word	0x0800d981
 800d914:	0800d981 	.word	0x0800d981
 800d918:	0800d981 	.word	0x0800d981
 800d91c:	0800d981 	.word	0x0800d981
 800d920:	0800d981 	.word	0x0800d981
 800d924:	0800d981 	.word	0x0800d981
 800d928:	0800d981 	.word	0x0800d981
 800d92c:	0800d981 	.word	0x0800d981
 800d930:	0800d981 	.word	0x0800d981
 800d934:	0800d981 	.word	0x0800d981
 800d938:	0800d981 	.word	0x0800d981
 800d93c:	0800d981 	.word	0x0800d981
 800d940:	0800d981 	.word	0x0800d981
 800d944:	0800d981 	.word	0x0800d981
 800d948:	0800d981 	.word	0x0800d981
 800d94c:	0800d981 	.word	0x0800d981
 800d950:	0800d981 	.word	0x0800d981
 800d954:	0800d981 	.word	0x0800d981
 800d958:	0800d981 	.word	0x0800d981
 800d95c:	0800d981 	.word	0x0800d981
 800d960:	0800d981 	.word	0x0800d981
 800d964:	0800d981 	.word	0x0800d981
 800d968:	0800d981 	.word	0x0800d981
 800d96c:	0800d981 	.word	0x0800d981
 800d970:	0800d981 	.word	0x0800d981
 800d974:	0800d981 	.word	0x0800d981
 800d978:	0800d981 	.word	0x0800d981
 800d97c:	0800d981 	.word	0x0800d981
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d980:	bf00      	nop
  }

  return (USBD_OK);
 800d982:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d984:	4618      	mov	r0, r3
 800d986:	370c      	adds	r7, #12
 800d988:	46bd      	mov	sp, r7
 800d98a:	bc80      	pop	{r7}
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop

0800d990 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d99a:	6879      	ldr	r1, [r7, #4]
 800d99c:	4805      	ldr	r0, [pc, #20]	@ (800d9b4 <CDC_Receive_FS+0x24>)
 800d99e:	f7fe fe20 	bl	800c5e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d9a2:	4804      	ldr	r0, [pc, #16]	@ (800d9b4 <CDC_Receive_FS+0x24>)
 800d9a4:	f7fe fe5f 	bl	800c666 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d9a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3708      	adds	r7, #8
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	2000181c 	.word	0x2000181c

0800d9b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b084      	sub	sp, #16
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d9c8:	4b0d      	ldr	r3, [pc, #52]	@ (800da00 <CDC_Transmit_FS+0x48>)
 800d9ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d001      	beq.n	800d9de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e00b      	b.n	800d9f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d9de:	887b      	ldrh	r3, [r7, #2]
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	6879      	ldr	r1, [r7, #4]
 800d9e4:	4806      	ldr	r0, [pc, #24]	@ (800da00 <CDC_Transmit_FS+0x48>)
 800d9e6:	f7fe fde3 	bl	800c5b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d9ea:	4805      	ldr	r0, [pc, #20]	@ (800da00 <CDC_Transmit_FS+0x48>)
 800d9ec:	f7fe fe0c 	bl	800c608 <USBD_CDC_TransmitPacket>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3710      	adds	r7, #16
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	2000181c 	.word	0x2000181c

0800da04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	4603      	mov	r3, r0
 800da0c:	6039      	str	r1, [r7, #0]
 800da0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	2212      	movs	r2, #18
 800da14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800da16:	4b03      	ldr	r3, [pc, #12]	@ (800da24 <USBD_FS_DeviceDescriptor+0x20>)
}
 800da18:	4618      	mov	r0, r3
 800da1a:	370c      	adds	r7, #12
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bc80      	pop	{r7}
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	20000148 	.word	0x20000148

0800da28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	4603      	mov	r3, r0
 800da30:	6039      	str	r1, [r7, #0]
 800da32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	2204      	movs	r2, #4
 800da38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800da3a:	4b03      	ldr	r3, [pc, #12]	@ (800da48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	370c      	adds	r7, #12
 800da40:	46bd      	mov	sp, r7
 800da42:	bc80      	pop	{r7}
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop
 800da48:	2000015c 	.word	0x2000015c

0800da4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b082      	sub	sp, #8
 800da50:	af00      	add	r7, sp, #0
 800da52:	4603      	mov	r3, r0
 800da54:	6039      	str	r1, [r7, #0]
 800da56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da58:	79fb      	ldrb	r3, [r7, #7]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d105      	bne.n	800da6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800da5e:	683a      	ldr	r2, [r7, #0]
 800da60:	4907      	ldr	r1, [pc, #28]	@ (800da80 <USBD_FS_ProductStrDescriptor+0x34>)
 800da62:	4808      	ldr	r0, [pc, #32]	@ (800da84 <USBD_FS_ProductStrDescriptor+0x38>)
 800da64:	f7ff fdff 	bl	800d666 <USBD_GetString>
 800da68:	e004      	b.n	800da74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800da6a:	683a      	ldr	r2, [r7, #0]
 800da6c:	4904      	ldr	r1, [pc, #16]	@ (800da80 <USBD_FS_ProductStrDescriptor+0x34>)
 800da6e:	4805      	ldr	r0, [pc, #20]	@ (800da84 <USBD_FS_ProductStrDescriptor+0x38>)
 800da70:	f7ff fdf9 	bl	800d666 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da74:	4b02      	ldr	r3, [pc, #8]	@ (800da80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800da76:	4618      	mov	r0, r3
 800da78:	3708      	adds	r7, #8
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	bf00      	nop
 800da80:	200022e0 	.word	0x200022e0
 800da84:	08011ebc 	.word	0x08011ebc

0800da88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	4603      	mov	r3, r0
 800da90:	6039      	str	r1, [r7, #0]
 800da92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800da94:	683a      	ldr	r2, [r7, #0]
 800da96:	4904      	ldr	r1, [pc, #16]	@ (800daa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800da98:	4804      	ldr	r0, [pc, #16]	@ (800daac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800da9a:	f7ff fde4 	bl	800d666 <USBD_GetString>
  return USBD_StrDesc;
 800da9e:	4b02      	ldr	r3, [pc, #8]	@ (800daa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3708      	adds	r7, #8
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	200022e0 	.word	0x200022e0
 800daac:	08011ed4 	.word	0x08011ed4

0800dab0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	4603      	mov	r3, r0
 800dab8:	6039      	str	r1, [r7, #0]
 800daba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	221a      	movs	r2, #26
 800dac0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dac2:	f000 f843 	bl	800db4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dac6:	4b02      	ldr	r3, [pc, #8]	@ (800dad0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}
 800dad0:	20000160 	.word	0x20000160

0800dad4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
 800dada:	4603      	mov	r3, r0
 800dadc:	6039      	str	r1, [r7, #0]
 800dade:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dae0:	79fb      	ldrb	r3, [r7, #7]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d105      	bne.n	800daf2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dae6:	683a      	ldr	r2, [r7, #0]
 800dae8:	4907      	ldr	r1, [pc, #28]	@ (800db08 <USBD_FS_ConfigStrDescriptor+0x34>)
 800daea:	4808      	ldr	r0, [pc, #32]	@ (800db0c <USBD_FS_ConfigStrDescriptor+0x38>)
 800daec:	f7ff fdbb 	bl	800d666 <USBD_GetString>
 800daf0:	e004      	b.n	800dafc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800daf2:	683a      	ldr	r2, [r7, #0]
 800daf4:	4904      	ldr	r1, [pc, #16]	@ (800db08 <USBD_FS_ConfigStrDescriptor+0x34>)
 800daf6:	4805      	ldr	r0, [pc, #20]	@ (800db0c <USBD_FS_ConfigStrDescriptor+0x38>)
 800daf8:	f7ff fdb5 	bl	800d666 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dafc:	4b02      	ldr	r3, [pc, #8]	@ (800db08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3708      	adds	r7, #8
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	200022e0 	.word	0x200022e0
 800db0c:	08011ee8 	.word	0x08011ee8

0800db10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
 800db16:	4603      	mov	r3, r0
 800db18:	6039      	str	r1, [r7, #0]
 800db1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db1c:	79fb      	ldrb	r3, [r7, #7]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d105      	bne.n	800db2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800db22:	683a      	ldr	r2, [r7, #0]
 800db24:	4907      	ldr	r1, [pc, #28]	@ (800db44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db26:	4808      	ldr	r0, [pc, #32]	@ (800db48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db28:	f7ff fd9d 	bl	800d666 <USBD_GetString>
 800db2c:	e004      	b.n	800db38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800db2e:	683a      	ldr	r2, [r7, #0]
 800db30:	4904      	ldr	r1, [pc, #16]	@ (800db44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db32:	4805      	ldr	r0, [pc, #20]	@ (800db48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db34:	f7ff fd97 	bl	800d666 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db38:	4b02      	ldr	r3, [pc, #8]	@ (800db44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3708      	adds	r7, #8
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop
 800db44:	200022e0 	.word	0x200022e0
 800db48:	08011ef4 	.word	0x08011ef4

0800db4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800db52:	4b0f      	ldr	r3, [pc, #60]	@ (800db90 <Get_SerialNum+0x44>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800db58:	4b0e      	ldr	r3, [pc, #56]	@ (800db94 <Get_SerialNum+0x48>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800db5e:	4b0e      	ldr	r3, [pc, #56]	@ (800db98 <Get_SerialNum+0x4c>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800db64:	68fa      	ldr	r2, [r7, #12]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	4413      	add	r3, r2
 800db6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d009      	beq.n	800db86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800db72:	2208      	movs	r2, #8
 800db74:	4909      	ldr	r1, [pc, #36]	@ (800db9c <Get_SerialNum+0x50>)
 800db76:	68f8      	ldr	r0, [r7, #12]
 800db78:	f000 f814 	bl	800dba4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800db7c:	2204      	movs	r2, #4
 800db7e:	4908      	ldr	r1, [pc, #32]	@ (800dba0 <Get_SerialNum+0x54>)
 800db80:	68b8      	ldr	r0, [r7, #8]
 800db82:	f000 f80f 	bl	800dba4 <IntToUnicode>
  }
}
 800db86:	bf00      	nop
 800db88:	3710      	adds	r7, #16
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	1ffff7e8 	.word	0x1ffff7e8
 800db94:	1ffff7ec 	.word	0x1ffff7ec
 800db98:	1ffff7f0 	.word	0x1ffff7f0
 800db9c:	20000162 	.word	0x20000162
 800dba0:	20000172 	.word	0x20000172

0800dba4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b087      	sub	sp, #28
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	4613      	mov	r3, r2
 800dbb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	75fb      	strb	r3, [r7, #23]
 800dbba:	e027      	b.n	800dc0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	0f1b      	lsrs	r3, r3, #28
 800dbc0:	2b09      	cmp	r3, #9
 800dbc2:	d80b      	bhi.n	800dbdc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	0f1b      	lsrs	r3, r3, #28
 800dbc8:	b2da      	uxtb	r2, r3
 800dbca:	7dfb      	ldrb	r3, [r7, #23]
 800dbcc:	005b      	lsls	r3, r3, #1
 800dbce:	4619      	mov	r1, r3
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	440b      	add	r3, r1
 800dbd4:	3230      	adds	r2, #48	@ 0x30
 800dbd6:	b2d2      	uxtb	r2, r2
 800dbd8:	701a      	strb	r2, [r3, #0]
 800dbda:	e00a      	b.n	800dbf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	0f1b      	lsrs	r3, r3, #28
 800dbe0:	b2da      	uxtb	r2, r3
 800dbe2:	7dfb      	ldrb	r3, [r7, #23]
 800dbe4:	005b      	lsls	r3, r3, #1
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	440b      	add	r3, r1
 800dbec:	3237      	adds	r2, #55	@ 0x37
 800dbee:	b2d2      	uxtb	r2, r2
 800dbf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	011b      	lsls	r3, r3, #4
 800dbf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dbf8:	7dfb      	ldrb	r3, [r7, #23]
 800dbfa:	005b      	lsls	r3, r3, #1
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	68ba      	ldr	r2, [r7, #8]
 800dc00:	4413      	add	r3, r2
 800dc02:	2200      	movs	r2, #0
 800dc04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dc06:	7dfb      	ldrb	r3, [r7, #23]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	75fb      	strb	r3, [r7, #23]
 800dc0c:	7dfa      	ldrb	r2, [r7, #23]
 800dc0e:	79fb      	ldrb	r3, [r7, #7]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d3d3      	bcc.n	800dbbc <IntToUnicode+0x18>
  }
}
 800dc14:	bf00      	nop
 800dc16:	bf00      	nop
 800dc18:	371c      	adds	r7, #28
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bc80      	pop	{r7}
 800dc1e:	4770      	bx	lr

0800dc20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4a11      	ldr	r2, [pc, #68]	@ (800dc74 <HAL_PCD_MspInit+0x54>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d11b      	bne.n	800dc6a <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800dc32:	4b11      	ldr	r3, [pc, #68]	@ (800dc78 <HAL_PCD_MspInit+0x58>)
 800dc34:	69db      	ldr	r3, [r3, #28]
 800dc36:	4a10      	ldr	r2, [pc, #64]	@ (800dc78 <HAL_PCD_MspInit+0x58>)
 800dc38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dc3c:	61d3      	str	r3, [r2, #28]
 800dc3e:	4b0e      	ldr	r3, [pc, #56]	@ (800dc78 <HAL_PCD_MspInit+0x58>)
 800dc40:	69db      	ldr	r3, [r3, #28]
 800dc42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dc46:	60fb      	str	r3, [r7, #12]
 800dc48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	2013      	movs	r0, #19
 800dc50:	f7f6 f8cf 	bl	8003df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800dc54:	2013      	movs	r0, #19
 800dc56:	f7f6 f8e8 	bl	8003e2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	2014      	movs	r0, #20
 800dc60:	f7f6 f8c7 	bl	8003df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800dc64:	2014      	movs	r0, #20
 800dc66:	f7f6 f8e0 	bl	8003e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800dc6a:	bf00      	nop
 800dc6c:	3710      	adds	r7, #16
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	40005c00 	.word	0x40005c00
 800dc78:	40021000 	.word	0x40021000

0800dc7c <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4a09      	ldr	r2, [pc, #36]	@ (800dcb0 <HAL_PCD_MspDeInit+0x34>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d10b      	bne.n	800dca6 <HAL_PCD_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspDeInit 0 */

  /* USER CODE END USB_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_CLK_DISABLE();
 800dc8e:	4b09      	ldr	r3, [pc, #36]	@ (800dcb4 <HAL_PCD_MspDeInit+0x38>)
 800dc90:	69db      	ldr	r3, [r3, #28]
 800dc92:	4a08      	ldr	r2, [pc, #32]	@ (800dcb4 <HAL_PCD_MspDeInit+0x38>)
 800dc94:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800dc98:	61d3      	str	r3, [r2, #28]

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(USB_HP_CAN1_TX_IRQn);
 800dc9a:	2013      	movs	r0, #19
 800dc9c:	f7f6 f8d3 	bl	8003e46 <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 800dca0:	2014      	movs	r0, #20
 800dca2:	f7f6 f8d0 	bl	8003e46 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_MspDeInit 1 */

  /* USER CODE END USB_MspDeInit 1 */
  }
}
 800dca6:	bf00      	nop
 800dca8:	3708      	adds	r7, #8
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	40005c00 	.word	0x40005c00
 800dcb4:	40021000 	.word	0x40021000

0800dcb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800dccc:	4619      	mov	r1, r3
 800dcce:	4610      	mov	r0, r2
 800dcd0:	f7fe fd9c 	bl	800c80c <USBD_LL_SetupStage>
}
 800dcd4:	bf00      	nop
 800dcd6:	3708      	adds	r7, #8
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	460b      	mov	r3, r1
 800dce6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800dcee:	78fa      	ldrb	r2, [r7, #3]
 800dcf0:	6879      	ldr	r1, [r7, #4]
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	4413      	add	r3, r2
 800dcf8:	00db      	lsls	r3, r3, #3
 800dcfa:	440b      	add	r3, r1
 800dcfc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	78fb      	ldrb	r3, [r7, #3]
 800dd04:	4619      	mov	r1, r3
 800dd06:	f7fe fdce 	bl	800c8a6 <USBD_LL_DataOutStage>
}
 800dd0a:	bf00      	nop
 800dd0c:	3708      	adds	r7, #8
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b082      	sub	sp, #8
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800dd24:	78fa      	ldrb	r2, [r7, #3]
 800dd26:	6879      	ldr	r1, [r7, #4]
 800dd28:	4613      	mov	r3, r2
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	4413      	add	r3, r2
 800dd2e:	00db      	lsls	r3, r3, #3
 800dd30:	440b      	add	r3, r1
 800dd32:	3324      	adds	r3, #36	@ 0x24
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	78fb      	ldrb	r3, [r7, #3]
 800dd38:	4619      	mov	r1, r3
 800dd3a:	f7fe fe25 	bl	800c988 <USBD_LL_DataInStage>
}
 800dd3e:	bf00      	nop
 800dd40:	3708      	adds	r7, #8
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}

0800dd46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd46:	b580      	push	{r7, lr}
 800dd48:	b082      	sub	sp, #8
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd54:	4618      	mov	r0, r3
 800dd56:	f7fe ff35 	bl	800cbc4 <USBD_LL_SOF>
}
 800dd5a:	bf00      	nop
 800dd5c:	3708      	adds	r7, #8
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b084      	sub	sp, #16
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	799b      	ldrb	r3, [r3, #6]
 800dd72:	2b02      	cmp	r3, #2
 800dd74:	d001      	beq.n	800dd7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dd76:	f7f5 fbf3 	bl	8003560 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd80:	7bfa      	ldrb	r2, [r7, #15]
 800dd82:	4611      	mov	r1, r2
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7fe fee5 	bl	800cb54 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7fe fe9e 	bl	800cad2 <USBD_LL_Reset>
}
 800dd96:	bf00      	nop
 800dd98:	3710      	adds	r7, #16
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
	...

0800dda0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fe fedf 	bl	800cb72 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	7a9b      	ldrb	r3, [r3, #10]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d005      	beq.n	800ddc8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ddbc:	4b04      	ldr	r3, [pc, #16]	@ (800ddd0 <HAL_PCD_SuspendCallback+0x30>)
 800ddbe:	691b      	ldr	r3, [r3, #16]
 800ddc0:	4a03      	ldr	r2, [pc, #12]	@ (800ddd0 <HAL_PCD_SuspendCallback+0x30>)
 800ddc2:	f043 0306 	orr.w	r3, r3, #6
 800ddc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ddc8:	bf00      	nop
 800ddca:	3708      	adds	r7, #8
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	e000ed00 	.word	0xe000ed00

0800ddd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7fe fed9 	bl	800cb9a <USBD_LL_Resume>
}
 800dde8:	bf00      	nop
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ddf8:	4a28      	ldr	r2, [pc, #160]	@ (800de9c <USBD_LL_Init+0xac>)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	4a26      	ldr	r2, [pc, #152]	@ (800de9c <USBD_LL_Init+0xac>)
 800de04:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800de08:	4b24      	ldr	r3, [pc, #144]	@ (800de9c <USBD_LL_Init+0xac>)
 800de0a:	4a25      	ldr	r2, [pc, #148]	@ (800dea0 <USBD_LL_Init+0xb0>)
 800de0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800de0e:	4b23      	ldr	r3, [pc, #140]	@ (800de9c <USBD_LL_Init+0xac>)
 800de10:	2208      	movs	r2, #8
 800de12:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800de14:	4b21      	ldr	r3, [pc, #132]	@ (800de9c <USBD_LL_Init+0xac>)
 800de16:	2202      	movs	r2, #2
 800de18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800de1a:	4b20      	ldr	r3, [pc, #128]	@ (800de9c <USBD_LL_Init+0xac>)
 800de1c:	2200      	movs	r2, #0
 800de1e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800de20:	4b1e      	ldr	r3, [pc, #120]	@ (800de9c <USBD_LL_Init+0xac>)
 800de22:	2200      	movs	r2, #0
 800de24:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800de26:	4b1d      	ldr	r3, [pc, #116]	@ (800de9c <USBD_LL_Init+0xac>)
 800de28:	2200      	movs	r2, #0
 800de2a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800de2c:	481b      	ldr	r0, [pc, #108]	@ (800de9c <USBD_LL_Init+0xac>)
 800de2e:	f7f7 fa24 	bl	800527a <HAL_PCD_Init>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d001      	beq.n	800de3c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800de38:	f7f5 fb92 	bl	8003560 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800de42:	2318      	movs	r3, #24
 800de44:	2200      	movs	r2, #0
 800de46:	2100      	movs	r1, #0
 800de48:	f7f8 ff7e 	bl	8006d48 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800de52:	2358      	movs	r3, #88	@ 0x58
 800de54:	2200      	movs	r2, #0
 800de56:	2180      	movs	r1, #128	@ 0x80
 800de58:	f7f8 ff76 	bl	8006d48 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800de62:	23c0      	movs	r3, #192	@ 0xc0
 800de64:	2200      	movs	r2, #0
 800de66:	2181      	movs	r1, #129	@ 0x81
 800de68:	f7f8 ff6e 	bl	8006d48 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800de72:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800de76:	2200      	movs	r2, #0
 800de78:	2101      	movs	r1, #1
 800de7a:	f7f8 ff65 	bl	8006d48 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800de84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de88:	2200      	movs	r2, #0
 800de8a:	2182      	movs	r1, #130	@ 0x82
 800de8c:	f7f8 ff5c 	bl	8006d48 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3708      	adds	r7, #8
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	200024e0 	.word	0x200024e0
 800dea0:	40005c00 	.word	0x40005c00

0800dea4 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deac:	2300      	movs	r3, #0
 800deae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800deb0:	2300      	movs	r3, #0
 800deb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800deba:	4618      	mov	r0, r3
 800debc:	f7f7 fad3 	bl	8005466 <HAL_PCD_DeInit>
 800dec0:	4603      	mov	r3, r0
 800dec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dec4:	7bfb      	ldrb	r3, [r7, #15]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f000 f984 	bl	800e1d4 <USBD_Get_USB_Status>
 800decc:	4603      	mov	r3, r0
 800dece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ded0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3710      	adds	r7, #16
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b084      	sub	sp, #16
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dee2:	2300      	movs	r3, #0
 800dee4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dee6:	2300      	movs	r3, #0
 800dee8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800def0:	4618      	mov	r0, r3
 800def2:	f7f7 fadb 	bl	80054ac <HAL_PCD_Start>
 800def6:	4603      	mov	r3, r0
 800def8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800defa:	7bfb      	ldrb	r3, [r7, #15]
 800defc:	4618      	mov	r0, r3
 800defe:	f000 f969 	bl	800e1d4 <USBD_Get_USB_Status>
 800df02:	4603      	mov	r3, r0
 800df04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df06:	7bbb      	ldrb	r3, [r7, #14]
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3710      	adds	r7, #16
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df18:	2300      	movs	r3, #0
 800df1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df1c:	2300      	movs	r3, #0
 800df1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800df26:	4618      	mov	r0, r3
 800df28:	f7f7 fae6 	bl	80054f8 <HAL_PCD_Stop>
 800df2c:	4603      	mov	r3, r0
 800df2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df30:	7bfb      	ldrb	r3, [r7, #15]
 800df32:	4618      	mov	r0, r3
 800df34:	f000 f94e 	bl	800e1d4 <USBD_Get_USB_Status>
 800df38:	4603      	mov	r3, r0
 800df3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800df46:	b580      	push	{r7, lr}
 800df48:	b084      	sub	sp, #16
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
 800df4e:	4608      	mov	r0, r1
 800df50:	4611      	mov	r1, r2
 800df52:	461a      	mov	r2, r3
 800df54:	4603      	mov	r3, r0
 800df56:	70fb      	strb	r3, [r7, #3]
 800df58:	460b      	mov	r3, r1
 800df5a:	70bb      	strb	r3, [r7, #2]
 800df5c:	4613      	mov	r3, r2
 800df5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df60:	2300      	movs	r3, #0
 800df62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df64:	2300      	movs	r3, #0
 800df66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800df6e:	78bb      	ldrb	r3, [r7, #2]
 800df70:	883a      	ldrh	r2, [r7, #0]
 800df72:	78f9      	ldrb	r1, [r7, #3]
 800df74:	f7f7 fc3a 	bl	80057ec <HAL_PCD_EP_Open>
 800df78:	4603      	mov	r3, r0
 800df7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df7c:	7bfb      	ldrb	r3, [r7, #15]
 800df7e:	4618      	mov	r0, r3
 800df80:	f000 f928 	bl	800e1d4 <USBD_Get_USB_Status>
 800df84:	4603      	mov	r3, r0
 800df86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df88:	7bbb      	ldrb	r3, [r7, #14]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3710      	adds	r7, #16
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}

0800df92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df92:	b580      	push	{r7, lr}
 800df94:	b084      	sub	sp, #16
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
 800df9a:	460b      	mov	r3, r1
 800df9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dfac:	78fa      	ldrb	r2, [r7, #3]
 800dfae:	4611      	mov	r1, r2
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7f7 fc78 	bl	80058a6 <HAL_PCD_EP_Close>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfba:	7bfb      	ldrb	r3, [r7, #15]
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f000 f909 	bl	800e1d4 <USBD_Get_USB_Status>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3710      	adds	r7, #16
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	460b      	mov	r3, r1
 800dfda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dfea:	78fa      	ldrb	r2, [r7, #3]
 800dfec:	4611      	mov	r1, r2
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7f7 fd20 	bl	8005a34 <HAL_PCD_EP_SetStall>
 800dff4:	4603      	mov	r3, r0
 800dff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dff8:	7bfb      	ldrb	r3, [r7, #15]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f000 f8ea 	bl	800e1d4 <USBD_Get_USB_Status>
 800e000:	4603      	mov	r3, r0
 800e002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e004:	7bbb      	ldrb	r3, [r7, #14]
}
 800e006:	4618      	mov	r0, r3
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}

0800e00e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e00e:	b580      	push	{r7, lr}
 800e010:	b084      	sub	sp, #16
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
 800e016:	460b      	mov	r3, r1
 800e018:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e01a:	2300      	movs	r3, #0
 800e01c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e01e:	2300      	movs	r3, #0
 800e020:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e028:	78fa      	ldrb	r2, [r7, #3]
 800e02a:	4611      	mov	r1, r2
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7f7 fd61 	bl	8005af4 <HAL_PCD_EP_ClrStall>
 800e032:	4603      	mov	r3, r0
 800e034:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e036:	7bfb      	ldrb	r3, [r7, #15]
 800e038:	4618      	mov	r0, r3
 800e03a:	f000 f8cb 	bl	800e1d4 <USBD_Get_USB_Status>
 800e03e:	4603      	mov	r3, r0
 800e040:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e042:	7bbb      	ldrb	r3, [r7, #14]
}
 800e044:	4618      	mov	r0, r3
 800e046:	3710      	adds	r7, #16
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b085      	sub	sp, #20
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	460b      	mov	r3, r1
 800e056:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e05e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e064:	2b00      	cmp	r3, #0
 800e066:	da0b      	bge.n	800e080 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e068:	78fb      	ldrb	r3, [r7, #3]
 800e06a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e06e:	68f9      	ldr	r1, [r7, #12]
 800e070:	4613      	mov	r3, r2
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	4413      	add	r3, r2
 800e076:	00db      	lsls	r3, r3, #3
 800e078:	440b      	add	r3, r1
 800e07a:	3312      	adds	r3, #18
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	e00b      	b.n	800e098 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e080:	78fb      	ldrb	r3, [r7, #3]
 800e082:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e086:	68f9      	ldr	r1, [r7, #12]
 800e088:	4613      	mov	r3, r2
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	4413      	add	r3, r2
 800e08e:	00db      	lsls	r3, r3, #3
 800e090:	440b      	add	r3, r1
 800e092:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800e096:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3714      	adds	r7, #20
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bc80      	pop	{r7}
 800e0a0:	4770      	bx	lr

0800e0a2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b084      	sub	sp, #16
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e0bc:	78fa      	ldrb	r2, [r7, #3]
 800e0be:	4611      	mov	r1, r2
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7f7 fb6f 	bl	80057a4 <HAL_PCD_SetAddress>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0ca:	7bfb      	ldrb	r3, [r7, #15]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f000 f881 	bl	800e1d4 <USBD_Get_USB_Status>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	607a      	str	r2, [r7, #4]
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	72fb      	strb	r3, [r7, #11]
 800e0f0:	4613      	mov	r3, r2
 800e0f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e102:	893b      	ldrh	r3, [r7, #8]
 800e104:	7af9      	ldrb	r1, [r7, #11]
 800e106:	687a      	ldr	r2, [r7, #4]
 800e108:	f7f7 fc5d 	bl	80059c6 <HAL_PCD_EP_Transmit>
 800e10c:	4603      	mov	r3, r0
 800e10e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e110:	7dfb      	ldrb	r3, [r7, #23]
 800e112:	4618      	mov	r0, r3
 800e114:	f000 f85e 	bl	800e1d4 <USBD_Get_USB_Status>
 800e118:	4603      	mov	r3, r0
 800e11a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e11c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3718      	adds	r7, #24
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}

0800e126 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e126:	b580      	push	{r7, lr}
 800e128:	b086      	sub	sp, #24
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	60f8      	str	r0, [r7, #12]
 800e12e:	607a      	str	r2, [r7, #4]
 800e130:	461a      	mov	r2, r3
 800e132:	460b      	mov	r3, r1
 800e134:	72fb      	strb	r3, [r7, #11]
 800e136:	4613      	mov	r3, r2
 800e138:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e13a:	2300      	movs	r3, #0
 800e13c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e13e:	2300      	movs	r3, #0
 800e140:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e148:	893b      	ldrh	r3, [r7, #8]
 800e14a:	7af9      	ldrb	r1, [r7, #11]
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	f7f7 fbf2 	bl	8005936 <HAL_PCD_EP_Receive>
 800e152:	4603      	mov	r3, r0
 800e154:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e156:	7dfb      	ldrb	r3, [r7, #23]
 800e158:	4618      	mov	r0, r3
 800e15a:	f000 f83b 	bl	800e1d4 <USBD_Get_USB_Status>
 800e15e:	4603      	mov	r3, r0
 800e160:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e162:	7dbb      	ldrb	r3, [r7, #22]
}
 800e164:	4618      	mov	r0, r3
 800e166:	3718      	adds	r7, #24
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	460b      	mov	r3, r1
 800e176:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e17e:	78fa      	ldrb	r2, [r7, #3]
 800e180:	4611      	mov	r1, r2
 800e182:	4618      	mov	r0, r3
 800e184:	f7f7 fc08 	bl	8005998 <HAL_PCD_EP_GetRxCount>
 800e188:	4603      	mov	r3, r0
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3708      	adds	r7, #8
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
	...

0800e194 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e19c:	4b02      	ldr	r3, [pc, #8]	@ (800e1a8 <USBD_static_malloc+0x14>)
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	370c      	adds	r7, #12
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bc80      	pop	{r7}
 800e1a6:	4770      	bx	lr
 800e1a8:	200027b8 	.word	0x200027b8

0800e1ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]

}
 800e1b4:	bf00      	nop
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bc80      	pop	{r7}
 800e1bc:	4770      	bx	lr

0800e1be <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1be:	b480      	push	{r7}
 800e1c0:	b083      	sub	sp, #12
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800e1ca:	bf00      	nop
 800e1cc:	370c      	adds	r7, #12
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bc80      	pop	{r7}
 800e1d2:	4770      	bx	lr

0800e1d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	4603      	mov	r3, r0
 800e1dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e1e2:	79fb      	ldrb	r3, [r7, #7]
 800e1e4:	2b03      	cmp	r3, #3
 800e1e6:	d817      	bhi.n	800e218 <USBD_Get_USB_Status+0x44>
 800e1e8:	a201      	add	r2, pc, #4	@ (adr r2, 800e1f0 <USBD_Get_USB_Status+0x1c>)
 800e1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ee:	bf00      	nop
 800e1f0:	0800e201 	.word	0x0800e201
 800e1f4:	0800e207 	.word	0x0800e207
 800e1f8:	0800e20d 	.word	0x0800e20d
 800e1fc:	0800e213 	.word	0x0800e213
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e200:	2300      	movs	r3, #0
 800e202:	73fb      	strb	r3, [r7, #15]
    break;
 800e204:	e00b      	b.n	800e21e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e206:	2302      	movs	r3, #2
 800e208:	73fb      	strb	r3, [r7, #15]
    break;
 800e20a:	e008      	b.n	800e21e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e20c:	2301      	movs	r3, #1
 800e20e:	73fb      	strb	r3, [r7, #15]
    break;
 800e210:	e005      	b.n	800e21e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e212:	2302      	movs	r3, #2
 800e214:	73fb      	strb	r3, [r7, #15]
    break;
 800e216:	e002      	b.n	800e21e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e218:	2302      	movs	r3, #2
 800e21a:	73fb      	strb	r3, [r7, #15]
    break;
 800e21c:	bf00      	nop
  }
  return usb_status;
 800e21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e220:	4618      	mov	r0, r3
 800e222:	3714      	adds	r7, #20
 800e224:	46bd      	mov	sp, r7
 800e226:	bc80      	pop	{r7}
 800e228:	4770      	bx	lr
 800e22a:	bf00      	nop

0800e22c <malloc>:
 800e22c:	4b02      	ldr	r3, [pc, #8]	@ (800e238 <malloc+0xc>)
 800e22e:	4601      	mov	r1, r0
 800e230:	6818      	ldr	r0, [r3, #0]
 800e232:	f000 b825 	b.w	800e280 <_malloc_r>
 800e236:	bf00      	nop
 800e238:	20000188 	.word	0x20000188

0800e23c <sbrk_aligned>:
 800e23c:	b570      	push	{r4, r5, r6, lr}
 800e23e:	4e0f      	ldr	r6, [pc, #60]	@ (800e27c <sbrk_aligned+0x40>)
 800e240:	460c      	mov	r4, r1
 800e242:	6831      	ldr	r1, [r6, #0]
 800e244:	4605      	mov	r5, r0
 800e246:	b911      	cbnz	r1, 800e24e <sbrk_aligned+0x12>
 800e248:	f000 fe7c 	bl	800ef44 <_sbrk_r>
 800e24c:	6030      	str	r0, [r6, #0]
 800e24e:	4621      	mov	r1, r4
 800e250:	4628      	mov	r0, r5
 800e252:	f000 fe77 	bl	800ef44 <_sbrk_r>
 800e256:	1c43      	adds	r3, r0, #1
 800e258:	d103      	bne.n	800e262 <sbrk_aligned+0x26>
 800e25a:	f04f 34ff 	mov.w	r4, #4294967295
 800e25e:	4620      	mov	r0, r4
 800e260:	bd70      	pop	{r4, r5, r6, pc}
 800e262:	1cc4      	adds	r4, r0, #3
 800e264:	f024 0403 	bic.w	r4, r4, #3
 800e268:	42a0      	cmp	r0, r4
 800e26a:	d0f8      	beq.n	800e25e <sbrk_aligned+0x22>
 800e26c:	1a21      	subs	r1, r4, r0
 800e26e:	4628      	mov	r0, r5
 800e270:	f000 fe68 	bl	800ef44 <_sbrk_r>
 800e274:	3001      	adds	r0, #1
 800e276:	d1f2      	bne.n	800e25e <sbrk_aligned+0x22>
 800e278:	e7ef      	b.n	800e25a <sbrk_aligned+0x1e>
 800e27a:	bf00      	nop
 800e27c:	200029d8 	.word	0x200029d8

0800e280 <_malloc_r>:
 800e280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e284:	1ccd      	adds	r5, r1, #3
 800e286:	f025 0503 	bic.w	r5, r5, #3
 800e28a:	3508      	adds	r5, #8
 800e28c:	2d0c      	cmp	r5, #12
 800e28e:	bf38      	it	cc
 800e290:	250c      	movcc	r5, #12
 800e292:	2d00      	cmp	r5, #0
 800e294:	4606      	mov	r6, r0
 800e296:	db01      	blt.n	800e29c <_malloc_r+0x1c>
 800e298:	42a9      	cmp	r1, r5
 800e29a:	d904      	bls.n	800e2a6 <_malloc_r+0x26>
 800e29c:	230c      	movs	r3, #12
 800e29e:	6033      	str	r3, [r6, #0]
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e37c <_malloc_r+0xfc>
 800e2aa:	f000 f869 	bl	800e380 <__malloc_lock>
 800e2ae:	f8d8 3000 	ldr.w	r3, [r8]
 800e2b2:	461c      	mov	r4, r3
 800e2b4:	bb44      	cbnz	r4, 800e308 <_malloc_r+0x88>
 800e2b6:	4629      	mov	r1, r5
 800e2b8:	4630      	mov	r0, r6
 800e2ba:	f7ff ffbf 	bl	800e23c <sbrk_aligned>
 800e2be:	1c43      	adds	r3, r0, #1
 800e2c0:	4604      	mov	r4, r0
 800e2c2:	d158      	bne.n	800e376 <_malloc_r+0xf6>
 800e2c4:	f8d8 4000 	ldr.w	r4, [r8]
 800e2c8:	4627      	mov	r7, r4
 800e2ca:	2f00      	cmp	r7, #0
 800e2cc:	d143      	bne.n	800e356 <_malloc_r+0xd6>
 800e2ce:	2c00      	cmp	r4, #0
 800e2d0:	d04b      	beq.n	800e36a <_malloc_r+0xea>
 800e2d2:	6823      	ldr	r3, [r4, #0]
 800e2d4:	4639      	mov	r1, r7
 800e2d6:	4630      	mov	r0, r6
 800e2d8:	eb04 0903 	add.w	r9, r4, r3
 800e2dc:	f000 fe32 	bl	800ef44 <_sbrk_r>
 800e2e0:	4581      	cmp	r9, r0
 800e2e2:	d142      	bne.n	800e36a <_malloc_r+0xea>
 800e2e4:	6821      	ldr	r1, [r4, #0]
 800e2e6:	4630      	mov	r0, r6
 800e2e8:	1a6d      	subs	r5, r5, r1
 800e2ea:	4629      	mov	r1, r5
 800e2ec:	f7ff ffa6 	bl	800e23c <sbrk_aligned>
 800e2f0:	3001      	adds	r0, #1
 800e2f2:	d03a      	beq.n	800e36a <_malloc_r+0xea>
 800e2f4:	6823      	ldr	r3, [r4, #0]
 800e2f6:	442b      	add	r3, r5
 800e2f8:	6023      	str	r3, [r4, #0]
 800e2fa:	f8d8 3000 	ldr.w	r3, [r8]
 800e2fe:	685a      	ldr	r2, [r3, #4]
 800e300:	bb62      	cbnz	r2, 800e35c <_malloc_r+0xdc>
 800e302:	f8c8 7000 	str.w	r7, [r8]
 800e306:	e00f      	b.n	800e328 <_malloc_r+0xa8>
 800e308:	6822      	ldr	r2, [r4, #0]
 800e30a:	1b52      	subs	r2, r2, r5
 800e30c:	d420      	bmi.n	800e350 <_malloc_r+0xd0>
 800e30e:	2a0b      	cmp	r2, #11
 800e310:	d917      	bls.n	800e342 <_malloc_r+0xc2>
 800e312:	1961      	adds	r1, r4, r5
 800e314:	42a3      	cmp	r3, r4
 800e316:	6025      	str	r5, [r4, #0]
 800e318:	bf18      	it	ne
 800e31a:	6059      	strne	r1, [r3, #4]
 800e31c:	6863      	ldr	r3, [r4, #4]
 800e31e:	bf08      	it	eq
 800e320:	f8c8 1000 	streq.w	r1, [r8]
 800e324:	5162      	str	r2, [r4, r5]
 800e326:	604b      	str	r3, [r1, #4]
 800e328:	4630      	mov	r0, r6
 800e32a:	f000 f82f 	bl	800e38c <__malloc_unlock>
 800e32e:	f104 000b 	add.w	r0, r4, #11
 800e332:	1d23      	adds	r3, r4, #4
 800e334:	f020 0007 	bic.w	r0, r0, #7
 800e338:	1ac2      	subs	r2, r0, r3
 800e33a:	bf1c      	itt	ne
 800e33c:	1a1b      	subne	r3, r3, r0
 800e33e:	50a3      	strne	r3, [r4, r2]
 800e340:	e7af      	b.n	800e2a2 <_malloc_r+0x22>
 800e342:	6862      	ldr	r2, [r4, #4]
 800e344:	42a3      	cmp	r3, r4
 800e346:	bf0c      	ite	eq
 800e348:	f8c8 2000 	streq.w	r2, [r8]
 800e34c:	605a      	strne	r2, [r3, #4]
 800e34e:	e7eb      	b.n	800e328 <_malloc_r+0xa8>
 800e350:	4623      	mov	r3, r4
 800e352:	6864      	ldr	r4, [r4, #4]
 800e354:	e7ae      	b.n	800e2b4 <_malloc_r+0x34>
 800e356:	463c      	mov	r4, r7
 800e358:	687f      	ldr	r7, [r7, #4]
 800e35a:	e7b6      	b.n	800e2ca <_malloc_r+0x4a>
 800e35c:	461a      	mov	r2, r3
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	42a3      	cmp	r3, r4
 800e362:	d1fb      	bne.n	800e35c <_malloc_r+0xdc>
 800e364:	2300      	movs	r3, #0
 800e366:	6053      	str	r3, [r2, #4]
 800e368:	e7de      	b.n	800e328 <_malloc_r+0xa8>
 800e36a:	230c      	movs	r3, #12
 800e36c:	4630      	mov	r0, r6
 800e36e:	6033      	str	r3, [r6, #0]
 800e370:	f000 f80c 	bl	800e38c <__malloc_unlock>
 800e374:	e794      	b.n	800e2a0 <_malloc_r+0x20>
 800e376:	6005      	str	r5, [r0, #0]
 800e378:	e7d6      	b.n	800e328 <_malloc_r+0xa8>
 800e37a:	bf00      	nop
 800e37c:	200029dc 	.word	0x200029dc

0800e380 <__malloc_lock>:
 800e380:	4801      	ldr	r0, [pc, #4]	@ (800e388 <__malloc_lock+0x8>)
 800e382:	f000 be2c 	b.w	800efde <__retarget_lock_acquire_recursive>
 800e386:	bf00      	nop
 800e388:	20002b20 	.word	0x20002b20

0800e38c <__malloc_unlock>:
 800e38c:	4801      	ldr	r0, [pc, #4]	@ (800e394 <__malloc_unlock+0x8>)
 800e38e:	f000 be27 	b.w	800efe0 <__retarget_lock_release_recursive>
 800e392:	bf00      	nop
 800e394:	20002b20 	.word	0x20002b20

0800e398 <__cvt>:
 800e398:	2b00      	cmp	r3, #0
 800e39a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e39e:	461d      	mov	r5, r3
 800e3a0:	bfbb      	ittet	lt
 800e3a2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800e3a6:	461d      	movlt	r5, r3
 800e3a8:	2300      	movge	r3, #0
 800e3aa:	232d      	movlt	r3, #45	@ 0x2d
 800e3ac:	b088      	sub	sp, #32
 800e3ae:	4614      	mov	r4, r2
 800e3b0:	bfb8      	it	lt
 800e3b2:	4614      	movlt	r4, r2
 800e3b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e3b6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800e3b8:	7013      	strb	r3, [r2, #0]
 800e3ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e3bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800e3c0:	f023 0820 	bic.w	r8, r3, #32
 800e3c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e3c8:	d005      	beq.n	800e3d6 <__cvt+0x3e>
 800e3ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e3ce:	d100      	bne.n	800e3d2 <__cvt+0x3a>
 800e3d0:	3601      	adds	r6, #1
 800e3d2:	2302      	movs	r3, #2
 800e3d4:	e000      	b.n	800e3d8 <__cvt+0x40>
 800e3d6:	2303      	movs	r3, #3
 800e3d8:	aa07      	add	r2, sp, #28
 800e3da:	9204      	str	r2, [sp, #16]
 800e3dc:	aa06      	add	r2, sp, #24
 800e3de:	e9cd a202 	strd	sl, r2, [sp, #8]
 800e3e2:	e9cd 3600 	strd	r3, r6, [sp]
 800e3e6:	4622      	mov	r2, r4
 800e3e8:	462b      	mov	r3, r5
 800e3ea:	f000 fe91 	bl	800f110 <_dtoa_r>
 800e3ee:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e3f2:	4607      	mov	r7, r0
 800e3f4:	d119      	bne.n	800e42a <__cvt+0x92>
 800e3f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e3f8:	07db      	lsls	r3, r3, #31
 800e3fa:	d50e      	bpl.n	800e41a <__cvt+0x82>
 800e3fc:	eb00 0906 	add.w	r9, r0, r6
 800e400:	2200      	movs	r2, #0
 800e402:	2300      	movs	r3, #0
 800e404:	4620      	mov	r0, r4
 800e406:	4629      	mov	r1, r5
 800e408:	f7f2 face 	bl	80009a8 <__aeabi_dcmpeq>
 800e40c:	b108      	cbz	r0, 800e412 <__cvt+0x7a>
 800e40e:	f8cd 901c 	str.w	r9, [sp, #28]
 800e412:	2230      	movs	r2, #48	@ 0x30
 800e414:	9b07      	ldr	r3, [sp, #28]
 800e416:	454b      	cmp	r3, r9
 800e418:	d31e      	bcc.n	800e458 <__cvt+0xc0>
 800e41a:	4638      	mov	r0, r7
 800e41c:	9b07      	ldr	r3, [sp, #28]
 800e41e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e420:	1bdb      	subs	r3, r3, r7
 800e422:	6013      	str	r3, [r2, #0]
 800e424:	b008      	add	sp, #32
 800e426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e42a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e42e:	eb00 0906 	add.w	r9, r0, r6
 800e432:	d1e5      	bne.n	800e400 <__cvt+0x68>
 800e434:	7803      	ldrb	r3, [r0, #0]
 800e436:	2b30      	cmp	r3, #48	@ 0x30
 800e438:	d10a      	bne.n	800e450 <__cvt+0xb8>
 800e43a:	2200      	movs	r2, #0
 800e43c:	2300      	movs	r3, #0
 800e43e:	4620      	mov	r0, r4
 800e440:	4629      	mov	r1, r5
 800e442:	f7f2 fab1 	bl	80009a8 <__aeabi_dcmpeq>
 800e446:	b918      	cbnz	r0, 800e450 <__cvt+0xb8>
 800e448:	f1c6 0601 	rsb	r6, r6, #1
 800e44c:	f8ca 6000 	str.w	r6, [sl]
 800e450:	f8da 3000 	ldr.w	r3, [sl]
 800e454:	4499      	add	r9, r3
 800e456:	e7d3      	b.n	800e400 <__cvt+0x68>
 800e458:	1c59      	adds	r1, r3, #1
 800e45a:	9107      	str	r1, [sp, #28]
 800e45c:	701a      	strb	r2, [r3, #0]
 800e45e:	e7d9      	b.n	800e414 <__cvt+0x7c>

0800e460 <__exponent>:
 800e460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e462:	2900      	cmp	r1, #0
 800e464:	bfb6      	itet	lt
 800e466:	232d      	movlt	r3, #45	@ 0x2d
 800e468:	232b      	movge	r3, #43	@ 0x2b
 800e46a:	4249      	neglt	r1, r1
 800e46c:	2909      	cmp	r1, #9
 800e46e:	7002      	strb	r2, [r0, #0]
 800e470:	7043      	strb	r3, [r0, #1]
 800e472:	dd29      	ble.n	800e4c8 <__exponent+0x68>
 800e474:	f10d 0307 	add.w	r3, sp, #7
 800e478:	461d      	mov	r5, r3
 800e47a:	270a      	movs	r7, #10
 800e47c:	fbb1 f6f7 	udiv	r6, r1, r7
 800e480:	461a      	mov	r2, r3
 800e482:	fb07 1416 	mls	r4, r7, r6, r1
 800e486:	3430      	adds	r4, #48	@ 0x30
 800e488:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e48c:	460c      	mov	r4, r1
 800e48e:	2c63      	cmp	r4, #99	@ 0x63
 800e490:	4631      	mov	r1, r6
 800e492:	f103 33ff 	add.w	r3, r3, #4294967295
 800e496:	dcf1      	bgt.n	800e47c <__exponent+0x1c>
 800e498:	3130      	adds	r1, #48	@ 0x30
 800e49a:	1e94      	subs	r4, r2, #2
 800e49c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e4a0:	4623      	mov	r3, r4
 800e4a2:	1c41      	adds	r1, r0, #1
 800e4a4:	42ab      	cmp	r3, r5
 800e4a6:	d30a      	bcc.n	800e4be <__exponent+0x5e>
 800e4a8:	f10d 0309 	add.w	r3, sp, #9
 800e4ac:	1a9b      	subs	r3, r3, r2
 800e4ae:	42ac      	cmp	r4, r5
 800e4b0:	bf88      	it	hi
 800e4b2:	2300      	movhi	r3, #0
 800e4b4:	3302      	adds	r3, #2
 800e4b6:	4403      	add	r3, r0
 800e4b8:	1a18      	subs	r0, r3, r0
 800e4ba:	b003      	add	sp, #12
 800e4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4be:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e4c2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e4c6:	e7ed      	b.n	800e4a4 <__exponent+0x44>
 800e4c8:	2330      	movs	r3, #48	@ 0x30
 800e4ca:	3130      	adds	r1, #48	@ 0x30
 800e4cc:	7083      	strb	r3, [r0, #2]
 800e4ce:	70c1      	strb	r1, [r0, #3]
 800e4d0:	1d03      	adds	r3, r0, #4
 800e4d2:	e7f1      	b.n	800e4b8 <__exponent+0x58>

0800e4d4 <_printf_float>:
 800e4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d8:	b091      	sub	sp, #68	@ 0x44
 800e4da:	460c      	mov	r4, r1
 800e4dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800e4e0:	4616      	mov	r6, r2
 800e4e2:	461f      	mov	r7, r3
 800e4e4:	4605      	mov	r5, r0
 800e4e6:	f000 fcf5 	bl	800eed4 <_localeconv_r>
 800e4ea:	6803      	ldr	r3, [r0, #0]
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	9308      	str	r3, [sp, #32]
 800e4f0:	f7f1 fe2e 	bl	8000150 <strlen>
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	930e      	str	r3, [sp, #56]	@ 0x38
 800e4f8:	f8d8 3000 	ldr.w	r3, [r8]
 800e4fc:	9009      	str	r0, [sp, #36]	@ 0x24
 800e4fe:	3307      	adds	r3, #7
 800e500:	f023 0307 	bic.w	r3, r3, #7
 800e504:	f103 0208 	add.w	r2, r3, #8
 800e508:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e50c:	f8d4 b000 	ldr.w	fp, [r4]
 800e510:	f8c8 2000 	str.w	r2, [r8]
 800e514:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e518:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e51c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e51e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800e522:	f04f 32ff 	mov.w	r2, #4294967295
 800e526:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e52a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e52e:	4b9c      	ldr	r3, [pc, #624]	@ (800e7a0 <_printf_float+0x2cc>)
 800e530:	f7f2 fa6c 	bl	8000a0c <__aeabi_dcmpun>
 800e534:	bb70      	cbnz	r0, 800e594 <_printf_float+0xc0>
 800e536:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e53a:	f04f 32ff 	mov.w	r2, #4294967295
 800e53e:	4b98      	ldr	r3, [pc, #608]	@ (800e7a0 <_printf_float+0x2cc>)
 800e540:	f7f2 fa46 	bl	80009d0 <__aeabi_dcmple>
 800e544:	bb30      	cbnz	r0, 800e594 <_printf_float+0xc0>
 800e546:	2200      	movs	r2, #0
 800e548:	2300      	movs	r3, #0
 800e54a:	4640      	mov	r0, r8
 800e54c:	4649      	mov	r1, r9
 800e54e:	f7f2 fa35 	bl	80009bc <__aeabi_dcmplt>
 800e552:	b110      	cbz	r0, 800e55a <_printf_float+0x86>
 800e554:	232d      	movs	r3, #45	@ 0x2d
 800e556:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e55a:	4a92      	ldr	r2, [pc, #584]	@ (800e7a4 <_printf_float+0x2d0>)
 800e55c:	4b92      	ldr	r3, [pc, #584]	@ (800e7a8 <_printf_float+0x2d4>)
 800e55e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e562:	bf94      	ite	ls
 800e564:	4690      	movls	r8, r2
 800e566:	4698      	movhi	r8, r3
 800e568:	2303      	movs	r3, #3
 800e56a:	f04f 0900 	mov.w	r9, #0
 800e56e:	6123      	str	r3, [r4, #16]
 800e570:	f02b 0304 	bic.w	r3, fp, #4
 800e574:	6023      	str	r3, [r4, #0]
 800e576:	4633      	mov	r3, r6
 800e578:	4621      	mov	r1, r4
 800e57a:	4628      	mov	r0, r5
 800e57c:	9700      	str	r7, [sp, #0]
 800e57e:	aa0f      	add	r2, sp, #60	@ 0x3c
 800e580:	f000 f9d4 	bl	800e92c <_printf_common>
 800e584:	3001      	adds	r0, #1
 800e586:	f040 8090 	bne.w	800e6aa <_printf_float+0x1d6>
 800e58a:	f04f 30ff 	mov.w	r0, #4294967295
 800e58e:	b011      	add	sp, #68	@ 0x44
 800e590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e594:	4642      	mov	r2, r8
 800e596:	464b      	mov	r3, r9
 800e598:	4640      	mov	r0, r8
 800e59a:	4649      	mov	r1, r9
 800e59c:	f7f2 fa36 	bl	8000a0c <__aeabi_dcmpun>
 800e5a0:	b148      	cbz	r0, 800e5b6 <_printf_float+0xe2>
 800e5a2:	464b      	mov	r3, r9
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	bfb8      	it	lt
 800e5a8:	232d      	movlt	r3, #45	@ 0x2d
 800e5aa:	4a80      	ldr	r2, [pc, #512]	@ (800e7ac <_printf_float+0x2d8>)
 800e5ac:	bfb8      	it	lt
 800e5ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e5b2:	4b7f      	ldr	r3, [pc, #508]	@ (800e7b0 <_printf_float+0x2dc>)
 800e5b4:	e7d3      	b.n	800e55e <_printf_float+0x8a>
 800e5b6:	6863      	ldr	r3, [r4, #4]
 800e5b8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800e5bc:	1c5a      	adds	r2, r3, #1
 800e5be:	d13f      	bne.n	800e640 <_printf_float+0x16c>
 800e5c0:	2306      	movs	r3, #6
 800e5c2:	6063      	str	r3, [r4, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800e5ca:	6023      	str	r3, [r4, #0]
 800e5cc:	9206      	str	r2, [sp, #24]
 800e5ce:	aa0e      	add	r2, sp, #56	@ 0x38
 800e5d0:	e9cd a204 	strd	sl, r2, [sp, #16]
 800e5d4:	aa0d      	add	r2, sp, #52	@ 0x34
 800e5d6:	9203      	str	r2, [sp, #12]
 800e5d8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800e5dc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e5e0:	6863      	ldr	r3, [r4, #4]
 800e5e2:	4642      	mov	r2, r8
 800e5e4:	9300      	str	r3, [sp, #0]
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	464b      	mov	r3, r9
 800e5ea:	910a      	str	r1, [sp, #40]	@ 0x28
 800e5ec:	f7ff fed4 	bl	800e398 <__cvt>
 800e5f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e5f2:	4680      	mov	r8, r0
 800e5f4:	2947      	cmp	r1, #71	@ 0x47
 800e5f6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e5f8:	d128      	bne.n	800e64c <_printf_float+0x178>
 800e5fa:	1cc8      	adds	r0, r1, #3
 800e5fc:	db02      	blt.n	800e604 <_printf_float+0x130>
 800e5fe:	6863      	ldr	r3, [r4, #4]
 800e600:	4299      	cmp	r1, r3
 800e602:	dd40      	ble.n	800e686 <_printf_float+0x1b2>
 800e604:	f1aa 0a02 	sub.w	sl, sl, #2
 800e608:	fa5f fa8a 	uxtb.w	sl, sl
 800e60c:	4652      	mov	r2, sl
 800e60e:	3901      	subs	r1, #1
 800e610:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e614:	910d      	str	r1, [sp, #52]	@ 0x34
 800e616:	f7ff ff23 	bl	800e460 <__exponent>
 800e61a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e61c:	4681      	mov	r9, r0
 800e61e:	1813      	adds	r3, r2, r0
 800e620:	2a01      	cmp	r2, #1
 800e622:	6123      	str	r3, [r4, #16]
 800e624:	dc02      	bgt.n	800e62c <_printf_float+0x158>
 800e626:	6822      	ldr	r2, [r4, #0]
 800e628:	07d2      	lsls	r2, r2, #31
 800e62a:	d501      	bpl.n	800e630 <_printf_float+0x15c>
 800e62c:	3301      	adds	r3, #1
 800e62e:	6123      	str	r3, [r4, #16]
 800e630:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800e634:	2b00      	cmp	r3, #0
 800e636:	d09e      	beq.n	800e576 <_printf_float+0xa2>
 800e638:	232d      	movs	r3, #45	@ 0x2d
 800e63a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e63e:	e79a      	b.n	800e576 <_printf_float+0xa2>
 800e640:	2947      	cmp	r1, #71	@ 0x47
 800e642:	d1bf      	bne.n	800e5c4 <_printf_float+0xf0>
 800e644:	2b00      	cmp	r3, #0
 800e646:	d1bd      	bne.n	800e5c4 <_printf_float+0xf0>
 800e648:	2301      	movs	r3, #1
 800e64a:	e7ba      	b.n	800e5c2 <_printf_float+0xee>
 800e64c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e650:	d9dc      	bls.n	800e60c <_printf_float+0x138>
 800e652:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e656:	d118      	bne.n	800e68a <_printf_float+0x1b6>
 800e658:	2900      	cmp	r1, #0
 800e65a:	6863      	ldr	r3, [r4, #4]
 800e65c:	dd0b      	ble.n	800e676 <_printf_float+0x1a2>
 800e65e:	6121      	str	r1, [r4, #16]
 800e660:	b913      	cbnz	r3, 800e668 <_printf_float+0x194>
 800e662:	6822      	ldr	r2, [r4, #0]
 800e664:	07d0      	lsls	r0, r2, #31
 800e666:	d502      	bpl.n	800e66e <_printf_float+0x19a>
 800e668:	3301      	adds	r3, #1
 800e66a:	440b      	add	r3, r1
 800e66c:	6123      	str	r3, [r4, #16]
 800e66e:	f04f 0900 	mov.w	r9, #0
 800e672:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e674:	e7dc      	b.n	800e630 <_printf_float+0x15c>
 800e676:	b913      	cbnz	r3, 800e67e <_printf_float+0x1aa>
 800e678:	6822      	ldr	r2, [r4, #0]
 800e67a:	07d2      	lsls	r2, r2, #31
 800e67c:	d501      	bpl.n	800e682 <_printf_float+0x1ae>
 800e67e:	3302      	adds	r3, #2
 800e680:	e7f4      	b.n	800e66c <_printf_float+0x198>
 800e682:	2301      	movs	r3, #1
 800e684:	e7f2      	b.n	800e66c <_printf_float+0x198>
 800e686:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e68a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e68c:	4299      	cmp	r1, r3
 800e68e:	db05      	blt.n	800e69c <_printf_float+0x1c8>
 800e690:	6823      	ldr	r3, [r4, #0]
 800e692:	6121      	str	r1, [r4, #16]
 800e694:	07d8      	lsls	r0, r3, #31
 800e696:	d5ea      	bpl.n	800e66e <_printf_float+0x19a>
 800e698:	1c4b      	adds	r3, r1, #1
 800e69a:	e7e7      	b.n	800e66c <_printf_float+0x198>
 800e69c:	2900      	cmp	r1, #0
 800e69e:	bfcc      	ite	gt
 800e6a0:	2201      	movgt	r2, #1
 800e6a2:	f1c1 0202 	rsble	r2, r1, #2
 800e6a6:	4413      	add	r3, r2
 800e6a8:	e7e0      	b.n	800e66c <_printf_float+0x198>
 800e6aa:	6823      	ldr	r3, [r4, #0]
 800e6ac:	055a      	lsls	r2, r3, #21
 800e6ae:	d407      	bmi.n	800e6c0 <_printf_float+0x1ec>
 800e6b0:	6923      	ldr	r3, [r4, #16]
 800e6b2:	4642      	mov	r2, r8
 800e6b4:	4631      	mov	r1, r6
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	47b8      	blx	r7
 800e6ba:	3001      	adds	r0, #1
 800e6bc:	d12b      	bne.n	800e716 <_printf_float+0x242>
 800e6be:	e764      	b.n	800e58a <_printf_float+0xb6>
 800e6c0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e6c4:	f240 80dc 	bls.w	800e880 <_printf_float+0x3ac>
 800e6c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	f7f2 f96a 	bl	80009a8 <__aeabi_dcmpeq>
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	d033      	beq.n	800e740 <_printf_float+0x26c>
 800e6d8:	2301      	movs	r3, #1
 800e6da:	4631      	mov	r1, r6
 800e6dc:	4628      	mov	r0, r5
 800e6de:	4a35      	ldr	r2, [pc, #212]	@ (800e7b4 <_printf_float+0x2e0>)
 800e6e0:	47b8      	blx	r7
 800e6e2:	3001      	adds	r0, #1
 800e6e4:	f43f af51 	beq.w	800e58a <_printf_float+0xb6>
 800e6e8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800e6ec:	4543      	cmp	r3, r8
 800e6ee:	db02      	blt.n	800e6f6 <_printf_float+0x222>
 800e6f0:	6823      	ldr	r3, [r4, #0]
 800e6f2:	07d8      	lsls	r0, r3, #31
 800e6f4:	d50f      	bpl.n	800e716 <_printf_float+0x242>
 800e6f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e6fa:	4631      	mov	r1, r6
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	47b8      	blx	r7
 800e700:	3001      	adds	r0, #1
 800e702:	f43f af42 	beq.w	800e58a <_printf_float+0xb6>
 800e706:	f04f 0900 	mov.w	r9, #0
 800e70a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e70e:	f104 0a1a 	add.w	sl, r4, #26
 800e712:	45c8      	cmp	r8, r9
 800e714:	dc09      	bgt.n	800e72a <_printf_float+0x256>
 800e716:	6823      	ldr	r3, [r4, #0]
 800e718:	079b      	lsls	r3, r3, #30
 800e71a:	f100 8102 	bmi.w	800e922 <_printf_float+0x44e>
 800e71e:	68e0      	ldr	r0, [r4, #12]
 800e720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e722:	4298      	cmp	r0, r3
 800e724:	bfb8      	it	lt
 800e726:	4618      	movlt	r0, r3
 800e728:	e731      	b.n	800e58e <_printf_float+0xba>
 800e72a:	2301      	movs	r3, #1
 800e72c:	4652      	mov	r2, sl
 800e72e:	4631      	mov	r1, r6
 800e730:	4628      	mov	r0, r5
 800e732:	47b8      	blx	r7
 800e734:	3001      	adds	r0, #1
 800e736:	f43f af28 	beq.w	800e58a <_printf_float+0xb6>
 800e73a:	f109 0901 	add.w	r9, r9, #1
 800e73e:	e7e8      	b.n	800e712 <_printf_float+0x23e>
 800e740:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e742:	2b00      	cmp	r3, #0
 800e744:	dc38      	bgt.n	800e7b8 <_printf_float+0x2e4>
 800e746:	2301      	movs	r3, #1
 800e748:	4631      	mov	r1, r6
 800e74a:	4628      	mov	r0, r5
 800e74c:	4a19      	ldr	r2, [pc, #100]	@ (800e7b4 <_printf_float+0x2e0>)
 800e74e:	47b8      	blx	r7
 800e750:	3001      	adds	r0, #1
 800e752:	f43f af1a 	beq.w	800e58a <_printf_float+0xb6>
 800e756:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800e75a:	ea59 0303 	orrs.w	r3, r9, r3
 800e75e:	d102      	bne.n	800e766 <_printf_float+0x292>
 800e760:	6823      	ldr	r3, [r4, #0]
 800e762:	07d9      	lsls	r1, r3, #31
 800e764:	d5d7      	bpl.n	800e716 <_printf_float+0x242>
 800e766:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e76a:	4631      	mov	r1, r6
 800e76c:	4628      	mov	r0, r5
 800e76e:	47b8      	blx	r7
 800e770:	3001      	adds	r0, #1
 800e772:	f43f af0a 	beq.w	800e58a <_printf_float+0xb6>
 800e776:	f04f 0a00 	mov.w	sl, #0
 800e77a:	f104 0b1a 	add.w	fp, r4, #26
 800e77e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e780:	425b      	negs	r3, r3
 800e782:	4553      	cmp	r3, sl
 800e784:	dc01      	bgt.n	800e78a <_printf_float+0x2b6>
 800e786:	464b      	mov	r3, r9
 800e788:	e793      	b.n	800e6b2 <_printf_float+0x1de>
 800e78a:	2301      	movs	r3, #1
 800e78c:	465a      	mov	r2, fp
 800e78e:	4631      	mov	r1, r6
 800e790:	4628      	mov	r0, r5
 800e792:	47b8      	blx	r7
 800e794:	3001      	adds	r0, #1
 800e796:	f43f aef8 	beq.w	800e58a <_printf_float+0xb6>
 800e79a:	f10a 0a01 	add.w	sl, sl, #1
 800e79e:	e7ee      	b.n	800e77e <_printf_float+0x2aa>
 800e7a0:	7fefffff 	.word	0x7fefffff
 800e7a4:	08011f42 	.word	0x08011f42
 800e7a8:	08011f46 	.word	0x08011f46
 800e7ac:	08011f4a 	.word	0x08011f4a
 800e7b0:	08011f4e 	.word	0x08011f4e
 800e7b4:	08011f52 	.word	0x08011f52
 800e7b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e7ba:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800e7be:	4553      	cmp	r3, sl
 800e7c0:	bfa8      	it	ge
 800e7c2:	4653      	movge	r3, sl
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	4699      	mov	r9, r3
 800e7c8:	dc36      	bgt.n	800e838 <_printf_float+0x364>
 800e7ca:	f04f 0b00 	mov.w	fp, #0
 800e7ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e7d2:	f104 021a 	add.w	r2, r4, #26
 800e7d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e7d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7da:	eba3 0309 	sub.w	r3, r3, r9
 800e7de:	455b      	cmp	r3, fp
 800e7e0:	dc31      	bgt.n	800e846 <_printf_float+0x372>
 800e7e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7e4:	459a      	cmp	sl, r3
 800e7e6:	dc3a      	bgt.n	800e85e <_printf_float+0x38a>
 800e7e8:	6823      	ldr	r3, [r4, #0]
 800e7ea:	07da      	lsls	r2, r3, #31
 800e7ec:	d437      	bmi.n	800e85e <_printf_float+0x38a>
 800e7ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7f0:	ebaa 0903 	sub.w	r9, sl, r3
 800e7f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7f6:	ebaa 0303 	sub.w	r3, sl, r3
 800e7fa:	4599      	cmp	r9, r3
 800e7fc:	bfa8      	it	ge
 800e7fe:	4699      	movge	r9, r3
 800e800:	f1b9 0f00 	cmp.w	r9, #0
 800e804:	dc33      	bgt.n	800e86e <_printf_float+0x39a>
 800e806:	f04f 0800 	mov.w	r8, #0
 800e80a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e80e:	f104 0b1a 	add.w	fp, r4, #26
 800e812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e814:	ebaa 0303 	sub.w	r3, sl, r3
 800e818:	eba3 0309 	sub.w	r3, r3, r9
 800e81c:	4543      	cmp	r3, r8
 800e81e:	f77f af7a 	ble.w	800e716 <_printf_float+0x242>
 800e822:	2301      	movs	r3, #1
 800e824:	465a      	mov	r2, fp
 800e826:	4631      	mov	r1, r6
 800e828:	4628      	mov	r0, r5
 800e82a:	47b8      	blx	r7
 800e82c:	3001      	adds	r0, #1
 800e82e:	f43f aeac 	beq.w	800e58a <_printf_float+0xb6>
 800e832:	f108 0801 	add.w	r8, r8, #1
 800e836:	e7ec      	b.n	800e812 <_printf_float+0x33e>
 800e838:	4642      	mov	r2, r8
 800e83a:	4631      	mov	r1, r6
 800e83c:	4628      	mov	r0, r5
 800e83e:	47b8      	blx	r7
 800e840:	3001      	adds	r0, #1
 800e842:	d1c2      	bne.n	800e7ca <_printf_float+0x2f6>
 800e844:	e6a1      	b.n	800e58a <_printf_float+0xb6>
 800e846:	2301      	movs	r3, #1
 800e848:	4631      	mov	r1, r6
 800e84a:	4628      	mov	r0, r5
 800e84c:	920a      	str	r2, [sp, #40]	@ 0x28
 800e84e:	47b8      	blx	r7
 800e850:	3001      	adds	r0, #1
 800e852:	f43f ae9a 	beq.w	800e58a <_printf_float+0xb6>
 800e856:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e858:	f10b 0b01 	add.w	fp, fp, #1
 800e85c:	e7bb      	b.n	800e7d6 <_printf_float+0x302>
 800e85e:	4631      	mov	r1, r6
 800e860:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e864:	4628      	mov	r0, r5
 800e866:	47b8      	blx	r7
 800e868:	3001      	adds	r0, #1
 800e86a:	d1c0      	bne.n	800e7ee <_printf_float+0x31a>
 800e86c:	e68d      	b.n	800e58a <_printf_float+0xb6>
 800e86e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e870:	464b      	mov	r3, r9
 800e872:	4631      	mov	r1, r6
 800e874:	4628      	mov	r0, r5
 800e876:	4442      	add	r2, r8
 800e878:	47b8      	blx	r7
 800e87a:	3001      	adds	r0, #1
 800e87c:	d1c3      	bne.n	800e806 <_printf_float+0x332>
 800e87e:	e684      	b.n	800e58a <_printf_float+0xb6>
 800e880:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800e884:	f1ba 0f01 	cmp.w	sl, #1
 800e888:	dc01      	bgt.n	800e88e <_printf_float+0x3ba>
 800e88a:	07db      	lsls	r3, r3, #31
 800e88c:	d536      	bpl.n	800e8fc <_printf_float+0x428>
 800e88e:	2301      	movs	r3, #1
 800e890:	4642      	mov	r2, r8
 800e892:	4631      	mov	r1, r6
 800e894:	4628      	mov	r0, r5
 800e896:	47b8      	blx	r7
 800e898:	3001      	adds	r0, #1
 800e89a:	f43f ae76 	beq.w	800e58a <_printf_float+0xb6>
 800e89e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e8a2:	4631      	mov	r1, r6
 800e8a4:	4628      	mov	r0, r5
 800e8a6:	47b8      	blx	r7
 800e8a8:	3001      	adds	r0, #1
 800e8aa:	f43f ae6e 	beq.w	800e58a <_printf_float+0xb6>
 800e8ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e8ba:	f7f2 f875 	bl	80009a8 <__aeabi_dcmpeq>
 800e8be:	b9c0      	cbnz	r0, 800e8f2 <_printf_float+0x41e>
 800e8c0:	4653      	mov	r3, sl
 800e8c2:	f108 0201 	add.w	r2, r8, #1
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	47b8      	blx	r7
 800e8cc:	3001      	adds	r0, #1
 800e8ce:	d10c      	bne.n	800e8ea <_printf_float+0x416>
 800e8d0:	e65b      	b.n	800e58a <_printf_float+0xb6>
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	465a      	mov	r2, fp
 800e8d6:	4631      	mov	r1, r6
 800e8d8:	4628      	mov	r0, r5
 800e8da:	47b8      	blx	r7
 800e8dc:	3001      	adds	r0, #1
 800e8de:	f43f ae54 	beq.w	800e58a <_printf_float+0xb6>
 800e8e2:	f108 0801 	add.w	r8, r8, #1
 800e8e6:	45d0      	cmp	r8, sl
 800e8e8:	dbf3      	blt.n	800e8d2 <_printf_float+0x3fe>
 800e8ea:	464b      	mov	r3, r9
 800e8ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e8f0:	e6e0      	b.n	800e6b4 <_printf_float+0x1e0>
 800e8f2:	f04f 0800 	mov.w	r8, #0
 800e8f6:	f104 0b1a 	add.w	fp, r4, #26
 800e8fa:	e7f4      	b.n	800e8e6 <_printf_float+0x412>
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	4642      	mov	r2, r8
 800e900:	e7e1      	b.n	800e8c6 <_printf_float+0x3f2>
 800e902:	2301      	movs	r3, #1
 800e904:	464a      	mov	r2, r9
 800e906:	4631      	mov	r1, r6
 800e908:	4628      	mov	r0, r5
 800e90a:	47b8      	blx	r7
 800e90c:	3001      	adds	r0, #1
 800e90e:	f43f ae3c 	beq.w	800e58a <_printf_float+0xb6>
 800e912:	f108 0801 	add.w	r8, r8, #1
 800e916:	68e3      	ldr	r3, [r4, #12]
 800e918:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e91a:	1a5b      	subs	r3, r3, r1
 800e91c:	4543      	cmp	r3, r8
 800e91e:	dcf0      	bgt.n	800e902 <_printf_float+0x42e>
 800e920:	e6fd      	b.n	800e71e <_printf_float+0x24a>
 800e922:	f04f 0800 	mov.w	r8, #0
 800e926:	f104 0919 	add.w	r9, r4, #25
 800e92a:	e7f4      	b.n	800e916 <_printf_float+0x442>

0800e92c <_printf_common>:
 800e92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e930:	4616      	mov	r6, r2
 800e932:	4698      	mov	r8, r3
 800e934:	688a      	ldr	r2, [r1, #8]
 800e936:	690b      	ldr	r3, [r1, #16]
 800e938:	4607      	mov	r7, r0
 800e93a:	4293      	cmp	r3, r2
 800e93c:	bfb8      	it	lt
 800e93e:	4613      	movlt	r3, r2
 800e940:	6033      	str	r3, [r6, #0]
 800e942:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e946:	460c      	mov	r4, r1
 800e948:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e94c:	b10a      	cbz	r2, 800e952 <_printf_common+0x26>
 800e94e:	3301      	adds	r3, #1
 800e950:	6033      	str	r3, [r6, #0]
 800e952:	6823      	ldr	r3, [r4, #0]
 800e954:	0699      	lsls	r1, r3, #26
 800e956:	bf42      	ittt	mi
 800e958:	6833      	ldrmi	r3, [r6, #0]
 800e95a:	3302      	addmi	r3, #2
 800e95c:	6033      	strmi	r3, [r6, #0]
 800e95e:	6825      	ldr	r5, [r4, #0]
 800e960:	f015 0506 	ands.w	r5, r5, #6
 800e964:	d106      	bne.n	800e974 <_printf_common+0x48>
 800e966:	f104 0a19 	add.w	sl, r4, #25
 800e96a:	68e3      	ldr	r3, [r4, #12]
 800e96c:	6832      	ldr	r2, [r6, #0]
 800e96e:	1a9b      	subs	r3, r3, r2
 800e970:	42ab      	cmp	r3, r5
 800e972:	dc2b      	bgt.n	800e9cc <_printf_common+0xa0>
 800e974:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e978:	6822      	ldr	r2, [r4, #0]
 800e97a:	3b00      	subs	r3, #0
 800e97c:	bf18      	it	ne
 800e97e:	2301      	movne	r3, #1
 800e980:	0692      	lsls	r2, r2, #26
 800e982:	d430      	bmi.n	800e9e6 <_printf_common+0xba>
 800e984:	4641      	mov	r1, r8
 800e986:	4638      	mov	r0, r7
 800e988:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e98c:	47c8      	blx	r9
 800e98e:	3001      	adds	r0, #1
 800e990:	d023      	beq.n	800e9da <_printf_common+0xae>
 800e992:	6823      	ldr	r3, [r4, #0]
 800e994:	6922      	ldr	r2, [r4, #16]
 800e996:	f003 0306 	and.w	r3, r3, #6
 800e99a:	2b04      	cmp	r3, #4
 800e99c:	bf14      	ite	ne
 800e99e:	2500      	movne	r5, #0
 800e9a0:	6833      	ldreq	r3, [r6, #0]
 800e9a2:	f04f 0600 	mov.w	r6, #0
 800e9a6:	bf08      	it	eq
 800e9a8:	68e5      	ldreq	r5, [r4, #12]
 800e9aa:	f104 041a 	add.w	r4, r4, #26
 800e9ae:	bf08      	it	eq
 800e9b0:	1aed      	subeq	r5, r5, r3
 800e9b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e9b6:	bf08      	it	eq
 800e9b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	bfc4      	itt	gt
 800e9c0:	1a9b      	subgt	r3, r3, r2
 800e9c2:	18ed      	addgt	r5, r5, r3
 800e9c4:	42b5      	cmp	r5, r6
 800e9c6:	d11a      	bne.n	800e9fe <_printf_common+0xd2>
 800e9c8:	2000      	movs	r0, #0
 800e9ca:	e008      	b.n	800e9de <_printf_common+0xb2>
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	4652      	mov	r2, sl
 800e9d0:	4641      	mov	r1, r8
 800e9d2:	4638      	mov	r0, r7
 800e9d4:	47c8      	blx	r9
 800e9d6:	3001      	adds	r0, #1
 800e9d8:	d103      	bne.n	800e9e2 <_printf_common+0xb6>
 800e9da:	f04f 30ff 	mov.w	r0, #4294967295
 800e9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9e2:	3501      	adds	r5, #1
 800e9e4:	e7c1      	b.n	800e96a <_printf_common+0x3e>
 800e9e6:	2030      	movs	r0, #48	@ 0x30
 800e9e8:	18e1      	adds	r1, r4, r3
 800e9ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e9ee:	1c5a      	adds	r2, r3, #1
 800e9f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e9f4:	4422      	add	r2, r4
 800e9f6:	3302      	adds	r3, #2
 800e9f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e9fc:	e7c2      	b.n	800e984 <_printf_common+0x58>
 800e9fe:	2301      	movs	r3, #1
 800ea00:	4622      	mov	r2, r4
 800ea02:	4641      	mov	r1, r8
 800ea04:	4638      	mov	r0, r7
 800ea06:	47c8      	blx	r9
 800ea08:	3001      	adds	r0, #1
 800ea0a:	d0e6      	beq.n	800e9da <_printf_common+0xae>
 800ea0c:	3601      	adds	r6, #1
 800ea0e:	e7d9      	b.n	800e9c4 <_printf_common+0x98>

0800ea10 <_printf_i>:
 800ea10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea14:	7e0f      	ldrb	r7, [r1, #24]
 800ea16:	4691      	mov	r9, r2
 800ea18:	2f78      	cmp	r7, #120	@ 0x78
 800ea1a:	4680      	mov	r8, r0
 800ea1c:	460c      	mov	r4, r1
 800ea1e:	469a      	mov	sl, r3
 800ea20:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ea22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ea26:	d807      	bhi.n	800ea38 <_printf_i+0x28>
 800ea28:	2f62      	cmp	r7, #98	@ 0x62
 800ea2a:	d80a      	bhi.n	800ea42 <_printf_i+0x32>
 800ea2c:	2f00      	cmp	r7, #0
 800ea2e:	f000 80d3 	beq.w	800ebd8 <_printf_i+0x1c8>
 800ea32:	2f58      	cmp	r7, #88	@ 0x58
 800ea34:	f000 80ba 	beq.w	800ebac <_printf_i+0x19c>
 800ea38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ea40:	e03a      	b.n	800eab8 <_printf_i+0xa8>
 800ea42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ea46:	2b15      	cmp	r3, #21
 800ea48:	d8f6      	bhi.n	800ea38 <_printf_i+0x28>
 800ea4a:	a101      	add	r1, pc, #4	@ (adr r1, 800ea50 <_printf_i+0x40>)
 800ea4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea50:	0800eaa9 	.word	0x0800eaa9
 800ea54:	0800eabd 	.word	0x0800eabd
 800ea58:	0800ea39 	.word	0x0800ea39
 800ea5c:	0800ea39 	.word	0x0800ea39
 800ea60:	0800ea39 	.word	0x0800ea39
 800ea64:	0800ea39 	.word	0x0800ea39
 800ea68:	0800eabd 	.word	0x0800eabd
 800ea6c:	0800ea39 	.word	0x0800ea39
 800ea70:	0800ea39 	.word	0x0800ea39
 800ea74:	0800ea39 	.word	0x0800ea39
 800ea78:	0800ea39 	.word	0x0800ea39
 800ea7c:	0800ebbf 	.word	0x0800ebbf
 800ea80:	0800eae7 	.word	0x0800eae7
 800ea84:	0800eb79 	.word	0x0800eb79
 800ea88:	0800ea39 	.word	0x0800ea39
 800ea8c:	0800ea39 	.word	0x0800ea39
 800ea90:	0800ebe1 	.word	0x0800ebe1
 800ea94:	0800ea39 	.word	0x0800ea39
 800ea98:	0800eae7 	.word	0x0800eae7
 800ea9c:	0800ea39 	.word	0x0800ea39
 800eaa0:	0800ea39 	.word	0x0800ea39
 800eaa4:	0800eb81 	.word	0x0800eb81
 800eaa8:	6833      	ldr	r3, [r6, #0]
 800eaaa:	1d1a      	adds	r2, r3, #4
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	6032      	str	r2, [r6, #0]
 800eab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eab4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eab8:	2301      	movs	r3, #1
 800eaba:	e09e      	b.n	800ebfa <_printf_i+0x1ea>
 800eabc:	6833      	ldr	r3, [r6, #0]
 800eabe:	6820      	ldr	r0, [r4, #0]
 800eac0:	1d19      	adds	r1, r3, #4
 800eac2:	6031      	str	r1, [r6, #0]
 800eac4:	0606      	lsls	r6, r0, #24
 800eac6:	d501      	bpl.n	800eacc <_printf_i+0xbc>
 800eac8:	681d      	ldr	r5, [r3, #0]
 800eaca:	e003      	b.n	800ead4 <_printf_i+0xc4>
 800eacc:	0645      	lsls	r5, r0, #25
 800eace:	d5fb      	bpl.n	800eac8 <_printf_i+0xb8>
 800ead0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ead4:	2d00      	cmp	r5, #0
 800ead6:	da03      	bge.n	800eae0 <_printf_i+0xd0>
 800ead8:	232d      	movs	r3, #45	@ 0x2d
 800eada:	426d      	negs	r5, r5
 800eadc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eae0:	230a      	movs	r3, #10
 800eae2:	4859      	ldr	r0, [pc, #356]	@ (800ec48 <_printf_i+0x238>)
 800eae4:	e011      	b.n	800eb0a <_printf_i+0xfa>
 800eae6:	6821      	ldr	r1, [r4, #0]
 800eae8:	6833      	ldr	r3, [r6, #0]
 800eaea:	0608      	lsls	r0, r1, #24
 800eaec:	f853 5b04 	ldr.w	r5, [r3], #4
 800eaf0:	d402      	bmi.n	800eaf8 <_printf_i+0xe8>
 800eaf2:	0649      	lsls	r1, r1, #25
 800eaf4:	bf48      	it	mi
 800eaf6:	b2ad      	uxthmi	r5, r5
 800eaf8:	2f6f      	cmp	r7, #111	@ 0x6f
 800eafa:	6033      	str	r3, [r6, #0]
 800eafc:	bf14      	ite	ne
 800eafe:	230a      	movne	r3, #10
 800eb00:	2308      	moveq	r3, #8
 800eb02:	4851      	ldr	r0, [pc, #324]	@ (800ec48 <_printf_i+0x238>)
 800eb04:	2100      	movs	r1, #0
 800eb06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eb0a:	6866      	ldr	r6, [r4, #4]
 800eb0c:	2e00      	cmp	r6, #0
 800eb0e:	bfa8      	it	ge
 800eb10:	6821      	ldrge	r1, [r4, #0]
 800eb12:	60a6      	str	r6, [r4, #8]
 800eb14:	bfa4      	itt	ge
 800eb16:	f021 0104 	bicge.w	r1, r1, #4
 800eb1a:	6021      	strge	r1, [r4, #0]
 800eb1c:	b90d      	cbnz	r5, 800eb22 <_printf_i+0x112>
 800eb1e:	2e00      	cmp	r6, #0
 800eb20:	d04b      	beq.n	800ebba <_printf_i+0x1aa>
 800eb22:	4616      	mov	r6, r2
 800eb24:	fbb5 f1f3 	udiv	r1, r5, r3
 800eb28:	fb03 5711 	mls	r7, r3, r1, r5
 800eb2c:	5dc7      	ldrb	r7, [r0, r7]
 800eb2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eb32:	462f      	mov	r7, r5
 800eb34:	42bb      	cmp	r3, r7
 800eb36:	460d      	mov	r5, r1
 800eb38:	d9f4      	bls.n	800eb24 <_printf_i+0x114>
 800eb3a:	2b08      	cmp	r3, #8
 800eb3c:	d10b      	bne.n	800eb56 <_printf_i+0x146>
 800eb3e:	6823      	ldr	r3, [r4, #0]
 800eb40:	07df      	lsls	r7, r3, #31
 800eb42:	d508      	bpl.n	800eb56 <_printf_i+0x146>
 800eb44:	6923      	ldr	r3, [r4, #16]
 800eb46:	6861      	ldr	r1, [r4, #4]
 800eb48:	4299      	cmp	r1, r3
 800eb4a:	bfde      	ittt	le
 800eb4c:	2330      	movle	r3, #48	@ 0x30
 800eb4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eb52:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eb56:	1b92      	subs	r2, r2, r6
 800eb58:	6122      	str	r2, [r4, #16]
 800eb5a:	464b      	mov	r3, r9
 800eb5c:	4621      	mov	r1, r4
 800eb5e:	4640      	mov	r0, r8
 800eb60:	f8cd a000 	str.w	sl, [sp]
 800eb64:	aa03      	add	r2, sp, #12
 800eb66:	f7ff fee1 	bl	800e92c <_printf_common>
 800eb6a:	3001      	adds	r0, #1
 800eb6c:	d14a      	bne.n	800ec04 <_printf_i+0x1f4>
 800eb6e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb72:	b004      	add	sp, #16
 800eb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb78:	6823      	ldr	r3, [r4, #0]
 800eb7a:	f043 0320 	orr.w	r3, r3, #32
 800eb7e:	6023      	str	r3, [r4, #0]
 800eb80:	2778      	movs	r7, #120	@ 0x78
 800eb82:	4832      	ldr	r0, [pc, #200]	@ (800ec4c <_printf_i+0x23c>)
 800eb84:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eb88:	6823      	ldr	r3, [r4, #0]
 800eb8a:	6831      	ldr	r1, [r6, #0]
 800eb8c:	061f      	lsls	r7, r3, #24
 800eb8e:	f851 5b04 	ldr.w	r5, [r1], #4
 800eb92:	d402      	bmi.n	800eb9a <_printf_i+0x18a>
 800eb94:	065f      	lsls	r7, r3, #25
 800eb96:	bf48      	it	mi
 800eb98:	b2ad      	uxthmi	r5, r5
 800eb9a:	6031      	str	r1, [r6, #0]
 800eb9c:	07d9      	lsls	r1, r3, #31
 800eb9e:	bf44      	itt	mi
 800eba0:	f043 0320 	orrmi.w	r3, r3, #32
 800eba4:	6023      	strmi	r3, [r4, #0]
 800eba6:	b11d      	cbz	r5, 800ebb0 <_printf_i+0x1a0>
 800eba8:	2310      	movs	r3, #16
 800ebaa:	e7ab      	b.n	800eb04 <_printf_i+0xf4>
 800ebac:	4826      	ldr	r0, [pc, #152]	@ (800ec48 <_printf_i+0x238>)
 800ebae:	e7e9      	b.n	800eb84 <_printf_i+0x174>
 800ebb0:	6823      	ldr	r3, [r4, #0]
 800ebb2:	f023 0320 	bic.w	r3, r3, #32
 800ebb6:	6023      	str	r3, [r4, #0]
 800ebb8:	e7f6      	b.n	800eba8 <_printf_i+0x198>
 800ebba:	4616      	mov	r6, r2
 800ebbc:	e7bd      	b.n	800eb3a <_printf_i+0x12a>
 800ebbe:	6833      	ldr	r3, [r6, #0]
 800ebc0:	6825      	ldr	r5, [r4, #0]
 800ebc2:	1d18      	adds	r0, r3, #4
 800ebc4:	6961      	ldr	r1, [r4, #20]
 800ebc6:	6030      	str	r0, [r6, #0]
 800ebc8:	062e      	lsls	r6, r5, #24
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	d501      	bpl.n	800ebd2 <_printf_i+0x1c2>
 800ebce:	6019      	str	r1, [r3, #0]
 800ebd0:	e002      	b.n	800ebd8 <_printf_i+0x1c8>
 800ebd2:	0668      	lsls	r0, r5, #25
 800ebd4:	d5fb      	bpl.n	800ebce <_printf_i+0x1be>
 800ebd6:	8019      	strh	r1, [r3, #0]
 800ebd8:	2300      	movs	r3, #0
 800ebda:	4616      	mov	r6, r2
 800ebdc:	6123      	str	r3, [r4, #16]
 800ebde:	e7bc      	b.n	800eb5a <_printf_i+0x14a>
 800ebe0:	6833      	ldr	r3, [r6, #0]
 800ebe2:	2100      	movs	r1, #0
 800ebe4:	1d1a      	adds	r2, r3, #4
 800ebe6:	6032      	str	r2, [r6, #0]
 800ebe8:	681e      	ldr	r6, [r3, #0]
 800ebea:	6862      	ldr	r2, [r4, #4]
 800ebec:	4630      	mov	r0, r6
 800ebee:	f000 f9f8 	bl	800efe2 <memchr>
 800ebf2:	b108      	cbz	r0, 800ebf8 <_printf_i+0x1e8>
 800ebf4:	1b80      	subs	r0, r0, r6
 800ebf6:	6060      	str	r0, [r4, #4]
 800ebf8:	6863      	ldr	r3, [r4, #4]
 800ebfa:	6123      	str	r3, [r4, #16]
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec02:	e7aa      	b.n	800eb5a <_printf_i+0x14a>
 800ec04:	4632      	mov	r2, r6
 800ec06:	4649      	mov	r1, r9
 800ec08:	4640      	mov	r0, r8
 800ec0a:	6923      	ldr	r3, [r4, #16]
 800ec0c:	47d0      	blx	sl
 800ec0e:	3001      	adds	r0, #1
 800ec10:	d0ad      	beq.n	800eb6e <_printf_i+0x15e>
 800ec12:	6823      	ldr	r3, [r4, #0]
 800ec14:	079b      	lsls	r3, r3, #30
 800ec16:	d413      	bmi.n	800ec40 <_printf_i+0x230>
 800ec18:	68e0      	ldr	r0, [r4, #12]
 800ec1a:	9b03      	ldr	r3, [sp, #12]
 800ec1c:	4298      	cmp	r0, r3
 800ec1e:	bfb8      	it	lt
 800ec20:	4618      	movlt	r0, r3
 800ec22:	e7a6      	b.n	800eb72 <_printf_i+0x162>
 800ec24:	2301      	movs	r3, #1
 800ec26:	4632      	mov	r2, r6
 800ec28:	4649      	mov	r1, r9
 800ec2a:	4640      	mov	r0, r8
 800ec2c:	47d0      	blx	sl
 800ec2e:	3001      	adds	r0, #1
 800ec30:	d09d      	beq.n	800eb6e <_printf_i+0x15e>
 800ec32:	3501      	adds	r5, #1
 800ec34:	68e3      	ldr	r3, [r4, #12]
 800ec36:	9903      	ldr	r1, [sp, #12]
 800ec38:	1a5b      	subs	r3, r3, r1
 800ec3a:	42ab      	cmp	r3, r5
 800ec3c:	dcf2      	bgt.n	800ec24 <_printf_i+0x214>
 800ec3e:	e7eb      	b.n	800ec18 <_printf_i+0x208>
 800ec40:	2500      	movs	r5, #0
 800ec42:	f104 0619 	add.w	r6, r4, #25
 800ec46:	e7f5      	b.n	800ec34 <_printf_i+0x224>
 800ec48:	08011f54 	.word	0x08011f54
 800ec4c:	08011f65 	.word	0x08011f65

0800ec50 <std>:
 800ec50:	2300      	movs	r3, #0
 800ec52:	b510      	push	{r4, lr}
 800ec54:	4604      	mov	r4, r0
 800ec56:	e9c0 3300 	strd	r3, r3, [r0]
 800ec5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec5e:	6083      	str	r3, [r0, #8]
 800ec60:	8181      	strh	r1, [r0, #12]
 800ec62:	6643      	str	r3, [r0, #100]	@ 0x64
 800ec64:	81c2      	strh	r2, [r0, #14]
 800ec66:	6183      	str	r3, [r0, #24]
 800ec68:	4619      	mov	r1, r3
 800ec6a:	2208      	movs	r2, #8
 800ec6c:	305c      	adds	r0, #92	@ 0x5c
 800ec6e:	f000 f928 	bl	800eec2 <memset>
 800ec72:	4b0d      	ldr	r3, [pc, #52]	@ (800eca8 <std+0x58>)
 800ec74:	6224      	str	r4, [r4, #32]
 800ec76:	6263      	str	r3, [r4, #36]	@ 0x24
 800ec78:	4b0c      	ldr	r3, [pc, #48]	@ (800ecac <std+0x5c>)
 800ec7a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ec7c:	4b0c      	ldr	r3, [pc, #48]	@ (800ecb0 <std+0x60>)
 800ec7e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ec80:	4b0c      	ldr	r3, [pc, #48]	@ (800ecb4 <std+0x64>)
 800ec82:	6323      	str	r3, [r4, #48]	@ 0x30
 800ec84:	4b0c      	ldr	r3, [pc, #48]	@ (800ecb8 <std+0x68>)
 800ec86:	429c      	cmp	r4, r3
 800ec88:	d006      	beq.n	800ec98 <std+0x48>
 800ec8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ec8e:	4294      	cmp	r4, r2
 800ec90:	d002      	beq.n	800ec98 <std+0x48>
 800ec92:	33d0      	adds	r3, #208	@ 0xd0
 800ec94:	429c      	cmp	r4, r3
 800ec96:	d105      	bne.n	800eca4 <std+0x54>
 800ec98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ec9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eca0:	f000 b99c 	b.w	800efdc <__retarget_lock_init_recursive>
 800eca4:	bd10      	pop	{r4, pc}
 800eca6:	bf00      	nop
 800eca8:	0800ee3d 	.word	0x0800ee3d
 800ecac:	0800ee5f 	.word	0x0800ee5f
 800ecb0:	0800ee97 	.word	0x0800ee97
 800ecb4:	0800eebb 	.word	0x0800eebb
 800ecb8:	200029e0 	.word	0x200029e0

0800ecbc <stdio_exit_handler>:
 800ecbc:	4a02      	ldr	r2, [pc, #8]	@ (800ecc8 <stdio_exit_handler+0xc>)
 800ecbe:	4903      	ldr	r1, [pc, #12]	@ (800eccc <stdio_exit_handler+0x10>)
 800ecc0:	4803      	ldr	r0, [pc, #12]	@ (800ecd0 <stdio_exit_handler+0x14>)
 800ecc2:	f000 b869 	b.w	800ed98 <_fwalk_sglue>
 800ecc6:	bf00      	nop
 800ecc8:	2000017c 	.word	0x2000017c
 800eccc:	080107e1 	.word	0x080107e1
 800ecd0:	2000018c 	.word	0x2000018c

0800ecd4 <cleanup_stdio>:
 800ecd4:	6841      	ldr	r1, [r0, #4]
 800ecd6:	4b0c      	ldr	r3, [pc, #48]	@ (800ed08 <cleanup_stdio+0x34>)
 800ecd8:	b510      	push	{r4, lr}
 800ecda:	4299      	cmp	r1, r3
 800ecdc:	4604      	mov	r4, r0
 800ecde:	d001      	beq.n	800ece4 <cleanup_stdio+0x10>
 800ece0:	f001 fd7e 	bl	80107e0 <_fflush_r>
 800ece4:	68a1      	ldr	r1, [r4, #8]
 800ece6:	4b09      	ldr	r3, [pc, #36]	@ (800ed0c <cleanup_stdio+0x38>)
 800ece8:	4299      	cmp	r1, r3
 800ecea:	d002      	beq.n	800ecf2 <cleanup_stdio+0x1e>
 800ecec:	4620      	mov	r0, r4
 800ecee:	f001 fd77 	bl	80107e0 <_fflush_r>
 800ecf2:	68e1      	ldr	r1, [r4, #12]
 800ecf4:	4b06      	ldr	r3, [pc, #24]	@ (800ed10 <cleanup_stdio+0x3c>)
 800ecf6:	4299      	cmp	r1, r3
 800ecf8:	d004      	beq.n	800ed04 <cleanup_stdio+0x30>
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed00:	f001 bd6e 	b.w	80107e0 <_fflush_r>
 800ed04:	bd10      	pop	{r4, pc}
 800ed06:	bf00      	nop
 800ed08:	200029e0 	.word	0x200029e0
 800ed0c:	20002a48 	.word	0x20002a48
 800ed10:	20002ab0 	.word	0x20002ab0

0800ed14 <global_stdio_init.part.0>:
 800ed14:	b510      	push	{r4, lr}
 800ed16:	4b0b      	ldr	r3, [pc, #44]	@ (800ed44 <global_stdio_init.part.0+0x30>)
 800ed18:	4c0b      	ldr	r4, [pc, #44]	@ (800ed48 <global_stdio_init.part.0+0x34>)
 800ed1a:	4a0c      	ldr	r2, [pc, #48]	@ (800ed4c <global_stdio_init.part.0+0x38>)
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	601a      	str	r2, [r3, #0]
 800ed20:	2104      	movs	r1, #4
 800ed22:	2200      	movs	r2, #0
 800ed24:	f7ff ff94 	bl	800ec50 <std>
 800ed28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ed2c:	2201      	movs	r2, #1
 800ed2e:	2109      	movs	r1, #9
 800ed30:	f7ff ff8e 	bl	800ec50 <std>
 800ed34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ed38:	2202      	movs	r2, #2
 800ed3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed3e:	2112      	movs	r1, #18
 800ed40:	f7ff bf86 	b.w	800ec50 <std>
 800ed44:	20002b18 	.word	0x20002b18
 800ed48:	200029e0 	.word	0x200029e0
 800ed4c:	0800ecbd 	.word	0x0800ecbd

0800ed50 <__sfp_lock_acquire>:
 800ed50:	4801      	ldr	r0, [pc, #4]	@ (800ed58 <__sfp_lock_acquire+0x8>)
 800ed52:	f000 b944 	b.w	800efde <__retarget_lock_acquire_recursive>
 800ed56:	bf00      	nop
 800ed58:	20002b21 	.word	0x20002b21

0800ed5c <__sfp_lock_release>:
 800ed5c:	4801      	ldr	r0, [pc, #4]	@ (800ed64 <__sfp_lock_release+0x8>)
 800ed5e:	f000 b93f 	b.w	800efe0 <__retarget_lock_release_recursive>
 800ed62:	bf00      	nop
 800ed64:	20002b21 	.word	0x20002b21

0800ed68 <__sinit>:
 800ed68:	b510      	push	{r4, lr}
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	f7ff fff0 	bl	800ed50 <__sfp_lock_acquire>
 800ed70:	6a23      	ldr	r3, [r4, #32]
 800ed72:	b11b      	cbz	r3, 800ed7c <__sinit+0x14>
 800ed74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed78:	f7ff bff0 	b.w	800ed5c <__sfp_lock_release>
 800ed7c:	4b04      	ldr	r3, [pc, #16]	@ (800ed90 <__sinit+0x28>)
 800ed7e:	6223      	str	r3, [r4, #32]
 800ed80:	4b04      	ldr	r3, [pc, #16]	@ (800ed94 <__sinit+0x2c>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d1f5      	bne.n	800ed74 <__sinit+0xc>
 800ed88:	f7ff ffc4 	bl	800ed14 <global_stdio_init.part.0>
 800ed8c:	e7f2      	b.n	800ed74 <__sinit+0xc>
 800ed8e:	bf00      	nop
 800ed90:	0800ecd5 	.word	0x0800ecd5
 800ed94:	20002b18 	.word	0x20002b18

0800ed98 <_fwalk_sglue>:
 800ed98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed9c:	4607      	mov	r7, r0
 800ed9e:	4688      	mov	r8, r1
 800eda0:	4614      	mov	r4, r2
 800eda2:	2600      	movs	r6, #0
 800eda4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eda8:	f1b9 0901 	subs.w	r9, r9, #1
 800edac:	d505      	bpl.n	800edba <_fwalk_sglue+0x22>
 800edae:	6824      	ldr	r4, [r4, #0]
 800edb0:	2c00      	cmp	r4, #0
 800edb2:	d1f7      	bne.n	800eda4 <_fwalk_sglue+0xc>
 800edb4:	4630      	mov	r0, r6
 800edb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edba:	89ab      	ldrh	r3, [r5, #12]
 800edbc:	2b01      	cmp	r3, #1
 800edbe:	d907      	bls.n	800edd0 <_fwalk_sglue+0x38>
 800edc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800edc4:	3301      	adds	r3, #1
 800edc6:	d003      	beq.n	800edd0 <_fwalk_sglue+0x38>
 800edc8:	4629      	mov	r1, r5
 800edca:	4638      	mov	r0, r7
 800edcc:	47c0      	blx	r8
 800edce:	4306      	orrs	r6, r0
 800edd0:	3568      	adds	r5, #104	@ 0x68
 800edd2:	e7e9      	b.n	800eda8 <_fwalk_sglue+0x10>

0800edd4 <sniprintf>:
 800edd4:	b40c      	push	{r2, r3}
 800edd6:	b530      	push	{r4, r5, lr}
 800edd8:	4b17      	ldr	r3, [pc, #92]	@ (800ee38 <sniprintf+0x64>)
 800edda:	1e0c      	subs	r4, r1, #0
 800eddc:	681d      	ldr	r5, [r3, #0]
 800edde:	b09d      	sub	sp, #116	@ 0x74
 800ede0:	da08      	bge.n	800edf4 <sniprintf+0x20>
 800ede2:	238b      	movs	r3, #139	@ 0x8b
 800ede4:	f04f 30ff 	mov.w	r0, #4294967295
 800ede8:	602b      	str	r3, [r5, #0]
 800edea:	b01d      	add	sp, #116	@ 0x74
 800edec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800edf0:	b002      	add	sp, #8
 800edf2:	4770      	bx	lr
 800edf4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800edf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800edfc:	bf0c      	ite	eq
 800edfe:	4623      	moveq	r3, r4
 800ee00:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ee04:	9304      	str	r3, [sp, #16]
 800ee06:	9307      	str	r3, [sp, #28]
 800ee08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ee0c:	9002      	str	r0, [sp, #8]
 800ee0e:	9006      	str	r0, [sp, #24]
 800ee10:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ee14:	4628      	mov	r0, r5
 800ee16:	ab21      	add	r3, sp, #132	@ 0x84
 800ee18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ee1a:	a902      	add	r1, sp, #8
 800ee1c:	9301      	str	r3, [sp, #4]
 800ee1e:	f001 fb63 	bl	80104e8 <_svfiprintf_r>
 800ee22:	1c43      	adds	r3, r0, #1
 800ee24:	bfbc      	itt	lt
 800ee26:	238b      	movlt	r3, #139	@ 0x8b
 800ee28:	602b      	strlt	r3, [r5, #0]
 800ee2a:	2c00      	cmp	r4, #0
 800ee2c:	d0dd      	beq.n	800edea <sniprintf+0x16>
 800ee2e:	2200      	movs	r2, #0
 800ee30:	9b02      	ldr	r3, [sp, #8]
 800ee32:	701a      	strb	r2, [r3, #0]
 800ee34:	e7d9      	b.n	800edea <sniprintf+0x16>
 800ee36:	bf00      	nop
 800ee38:	20000188 	.word	0x20000188

0800ee3c <__sread>:
 800ee3c:	b510      	push	{r4, lr}
 800ee3e:	460c      	mov	r4, r1
 800ee40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee44:	f000 f86c 	bl	800ef20 <_read_r>
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	bfab      	itete	ge
 800ee4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ee4e:	89a3      	ldrhlt	r3, [r4, #12]
 800ee50:	181b      	addge	r3, r3, r0
 800ee52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ee56:	bfac      	ite	ge
 800ee58:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ee5a:	81a3      	strhlt	r3, [r4, #12]
 800ee5c:	bd10      	pop	{r4, pc}

0800ee5e <__swrite>:
 800ee5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee62:	461f      	mov	r7, r3
 800ee64:	898b      	ldrh	r3, [r1, #12]
 800ee66:	4605      	mov	r5, r0
 800ee68:	05db      	lsls	r3, r3, #23
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	4616      	mov	r6, r2
 800ee6e:	d505      	bpl.n	800ee7c <__swrite+0x1e>
 800ee70:	2302      	movs	r3, #2
 800ee72:	2200      	movs	r2, #0
 800ee74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee78:	f000 f840 	bl	800eefc <_lseek_r>
 800ee7c:	89a3      	ldrh	r3, [r4, #12]
 800ee7e:	4632      	mov	r2, r6
 800ee80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ee84:	81a3      	strh	r3, [r4, #12]
 800ee86:	4628      	mov	r0, r5
 800ee88:	463b      	mov	r3, r7
 800ee8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee92:	f000 b867 	b.w	800ef64 <_write_r>

0800ee96 <__sseek>:
 800ee96:	b510      	push	{r4, lr}
 800ee98:	460c      	mov	r4, r1
 800ee9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee9e:	f000 f82d 	bl	800eefc <_lseek_r>
 800eea2:	1c43      	adds	r3, r0, #1
 800eea4:	89a3      	ldrh	r3, [r4, #12]
 800eea6:	bf15      	itete	ne
 800eea8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eeaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eeae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eeb2:	81a3      	strheq	r3, [r4, #12]
 800eeb4:	bf18      	it	ne
 800eeb6:	81a3      	strhne	r3, [r4, #12]
 800eeb8:	bd10      	pop	{r4, pc}

0800eeba <__sclose>:
 800eeba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eebe:	f000 b80d 	b.w	800eedc <_close_r>

0800eec2 <memset>:
 800eec2:	4603      	mov	r3, r0
 800eec4:	4402      	add	r2, r0
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d100      	bne.n	800eecc <memset+0xa>
 800eeca:	4770      	bx	lr
 800eecc:	f803 1b01 	strb.w	r1, [r3], #1
 800eed0:	e7f9      	b.n	800eec6 <memset+0x4>
	...

0800eed4 <_localeconv_r>:
 800eed4:	4800      	ldr	r0, [pc, #0]	@ (800eed8 <_localeconv_r+0x4>)
 800eed6:	4770      	bx	lr
 800eed8:	200002c8 	.word	0x200002c8

0800eedc <_close_r>:
 800eedc:	b538      	push	{r3, r4, r5, lr}
 800eede:	2300      	movs	r3, #0
 800eee0:	4d05      	ldr	r5, [pc, #20]	@ (800eef8 <_close_r+0x1c>)
 800eee2:	4604      	mov	r4, r0
 800eee4:	4608      	mov	r0, r1
 800eee6:	602b      	str	r3, [r5, #0]
 800eee8:	f7f4 fd6f 	bl	80039ca <_close>
 800eeec:	1c43      	adds	r3, r0, #1
 800eeee:	d102      	bne.n	800eef6 <_close_r+0x1a>
 800eef0:	682b      	ldr	r3, [r5, #0]
 800eef2:	b103      	cbz	r3, 800eef6 <_close_r+0x1a>
 800eef4:	6023      	str	r3, [r4, #0]
 800eef6:	bd38      	pop	{r3, r4, r5, pc}
 800eef8:	20002b1c 	.word	0x20002b1c

0800eefc <_lseek_r>:
 800eefc:	b538      	push	{r3, r4, r5, lr}
 800eefe:	4604      	mov	r4, r0
 800ef00:	4608      	mov	r0, r1
 800ef02:	4611      	mov	r1, r2
 800ef04:	2200      	movs	r2, #0
 800ef06:	4d05      	ldr	r5, [pc, #20]	@ (800ef1c <_lseek_r+0x20>)
 800ef08:	602a      	str	r2, [r5, #0]
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	f7f4 fd81 	bl	8003a12 <_lseek>
 800ef10:	1c43      	adds	r3, r0, #1
 800ef12:	d102      	bne.n	800ef1a <_lseek_r+0x1e>
 800ef14:	682b      	ldr	r3, [r5, #0]
 800ef16:	b103      	cbz	r3, 800ef1a <_lseek_r+0x1e>
 800ef18:	6023      	str	r3, [r4, #0]
 800ef1a:	bd38      	pop	{r3, r4, r5, pc}
 800ef1c:	20002b1c 	.word	0x20002b1c

0800ef20 <_read_r>:
 800ef20:	b538      	push	{r3, r4, r5, lr}
 800ef22:	4604      	mov	r4, r0
 800ef24:	4608      	mov	r0, r1
 800ef26:	4611      	mov	r1, r2
 800ef28:	2200      	movs	r2, #0
 800ef2a:	4d05      	ldr	r5, [pc, #20]	@ (800ef40 <_read_r+0x20>)
 800ef2c:	602a      	str	r2, [r5, #0]
 800ef2e:	461a      	mov	r2, r3
 800ef30:	f7f4 fd12 	bl	8003958 <_read>
 800ef34:	1c43      	adds	r3, r0, #1
 800ef36:	d102      	bne.n	800ef3e <_read_r+0x1e>
 800ef38:	682b      	ldr	r3, [r5, #0]
 800ef3a:	b103      	cbz	r3, 800ef3e <_read_r+0x1e>
 800ef3c:	6023      	str	r3, [r4, #0]
 800ef3e:	bd38      	pop	{r3, r4, r5, pc}
 800ef40:	20002b1c 	.word	0x20002b1c

0800ef44 <_sbrk_r>:
 800ef44:	b538      	push	{r3, r4, r5, lr}
 800ef46:	2300      	movs	r3, #0
 800ef48:	4d05      	ldr	r5, [pc, #20]	@ (800ef60 <_sbrk_r+0x1c>)
 800ef4a:	4604      	mov	r4, r0
 800ef4c:	4608      	mov	r0, r1
 800ef4e:	602b      	str	r3, [r5, #0]
 800ef50:	f7f4 fd6c 	bl	8003a2c <_sbrk>
 800ef54:	1c43      	adds	r3, r0, #1
 800ef56:	d102      	bne.n	800ef5e <_sbrk_r+0x1a>
 800ef58:	682b      	ldr	r3, [r5, #0]
 800ef5a:	b103      	cbz	r3, 800ef5e <_sbrk_r+0x1a>
 800ef5c:	6023      	str	r3, [r4, #0]
 800ef5e:	bd38      	pop	{r3, r4, r5, pc}
 800ef60:	20002b1c 	.word	0x20002b1c

0800ef64 <_write_r>:
 800ef64:	b538      	push	{r3, r4, r5, lr}
 800ef66:	4604      	mov	r4, r0
 800ef68:	4608      	mov	r0, r1
 800ef6a:	4611      	mov	r1, r2
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	4d05      	ldr	r5, [pc, #20]	@ (800ef84 <_write_r+0x20>)
 800ef70:	602a      	str	r2, [r5, #0]
 800ef72:	461a      	mov	r2, r3
 800ef74:	f7f4 fd0d 	bl	8003992 <_write>
 800ef78:	1c43      	adds	r3, r0, #1
 800ef7a:	d102      	bne.n	800ef82 <_write_r+0x1e>
 800ef7c:	682b      	ldr	r3, [r5, #0]
 800ef7e:	b103      	cbz	r3, 800ef82 <_write_r+0x1e>
 800ef80:	6023      	str	r3, [r4, #0]
 800ef82:	bd38      	pop	{r3, r4, r5, pc}
 800ef84:	20002b1c 	.word	0x20002b1c

0800ef88 <__errno>:
 800ef88:	4b01      	ldr	r3, [pc, #4]	@ (800ef90 <__errno+0x8>)
 800ef8a:	6818      	ldr	r0, [r3, #0]
 800ef8c:	4770      	bx	lr
 800ef8e:	bf00      	nop
 800ef90:	20000188 	.word	0x20000188

0800ef94 <__libc_init_array>:
 800ef94:	b570      	push	{r4, r5, r6, lr}
 800ef96:	2600      	movs	r6, #0
 800ef98:	4d0c      	ldr	r5, [pc, #48]	@ (800efcc <__libc_init_array+0x38>)
 800ef9a:	4c0d      	ldr	r4, [pc, #52]	@ (800efd0 <__libc_init_array+0x3c>)
 800ef9c:	1b64      	subs	r4, r4, r5
 800ef9e:	10a4      	asrs	r4, r4, #2
 800efa0:	42a6      	cmp	r6, r4
 800efa2:	d109      	bne.n	800efb8 <__libc_init_array+0x24>
 800efa4:	f002 feb8 	bl	8011d18 <_init>
 800efa8:	2600      	movs	r6, #0
 800efaa:	4d0a      	ldr	r5, [pc, #40]	@ (800efd4 <__libc_init_array+0x40>)
 800efac:	4c0a      	ldr	r4, [pc, #40]	@ (800efd8 <__libc_init_array+0x44>)
 800efae:	1b64      	subs	r4, r4, r5
 800efb0:	10a4      	asrs	r4, r4, #2
 800efb2:	42a6      	cmp	r6, r4
 800efb4:	d105      	bne.n	800efc2 <__libc_init_array+0x2e>
 800efb6:	bd70      	pop	{r4, r5, r6, pc}
 800efb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800efbc:	4798      	blx	r3
 800efbe:	3601      	adds	r6, #1
 800efc0:	e7ee      	b.n	800efa0 <__libc_init_array+0xc>
 800efc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800efc6:	4798      	blx	r3
 800efc8:	3601      	adds	r6, #1
 800efca:	e7f2      	b.n	800efb2 <__libc_init_array+0x1e>
 800efcc:	080122e8 	.word	0x080122e8
 800efd0:	080122e8 	.word	0x080122e8
 800efd4:	080122e8 	.word	0x080122e8
 800efd8:	080122ec 	.word	0x080122ec

0800efdc <__retarget_lock_init_recursive>:
 800efdc:	4770      	bx	lr

0800efde <__retarget_lock_acquire_recursive>:
 800efde:	4770      	bx	lr

0800efe0 <__retarget_lock_release_recursive>:
 800efe0:	4770      	bx	lr

0800efe2 <memchr>:
 800efe2:	4603      	mov	r3, r0
 800efe4:	b510      	push	{r4, lr}
 800efe6:	b2c9      	uxtb	r1, r1
 800efe8:	4402      	add	r2, r0
 800efea:	4293      	cmp	r3, r2
 800efec:	4618      	mov	r0, r3
 800efee:	d101      	bne.n	800eff4 <memchr+0x12>
 800eff0:	2000      	movs	r0, #0
 800eff2:	e003      	b.n	800effc <memchr+0x1a>
 800eff4:	7804      	ldrb	r4, [r0, #0]
 800eff6:	3301      	adds	r3, #1
 800eff8:	428c      	cmp	r4, r1
 800effa:	d1f6      	bne.n	800efea <memchr+0x8>
 800effc:	bd10      	pop	{r4, pc}

0800effe <quorem>:
 800effe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f002:	6903      	ldr	r3, [r0, #16]
 800f004:	690c      	ldr	r4, [r1, #16]
 800f006:	4607      	mov	r7, r0
 800f008:	42a3      	cmp	r3, r4
 800f00a:	db7e      	blt.n	800f10a <quorem+0x10c>
 800f00c:	3c01      	subs	r4, #1
 800f00e:	00a3      	lsls	r3, r4, #2
 800f010:	f100 0514 	add.w	r5, r0, #20
 800f014:	f101 0814 	add.w	r8, r1, #20
 800f018:	9300      	str	r3, [sp, #0]
 800f01a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f01e:	9301      	str	r3, [sp, #4]
 800f020:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f024:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f028:	3301      	adds	r3, #1
 800f02a:	429a      	cmp	r2, r3
 800f02c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f030:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f034:	d32e      	bcc.n	800f094 <quorem+0x96>
 800f036:	f04f 0a00 	mov.w	sl, #0
 800f03a:	46c4      	mov	ip, r8
 800f03c:	46ae      	mov	lr, r5
 800f03e:	46d3      	mov	fp, sl
 800f040:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f044:	b298      	uxth	r0, r3
 800f046:	fb06 a000 	mla	r0, r6, r0, sl
 800f04a:	0c1b      	lsrs	r3, r3, #16
 800f04c:	0c02      	lsrs	r2, r0, #16
 800f04e:	fb06 2303 	mla	r3, r6, r3, r2
 800f052:	f8de 2000 	ldr.w	r2, [lr]
 800f056:	b280      	uxth	r0, r0
 800f058:	b292      	uxth	r2, r2
 800f05a:	1a12      	subs	r2, r2, r0
 800f05c:	445a      	add	r2, fp
 800f05e:	f8de 0000 	ldr.w	r0, [lr]
 800f062:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f066:	b29b      	uxth	r3, r3
 800f068:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f06c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f070:	b292      	uxth	r2, r2
 800f072:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f076:	45e1      	cmp	r9, ip
 800f078:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f07c:	f84e 2b04 	str.w	r2, [lr], #4
 800f080:	d2de      	bcs.n	800f040 <quorem+0x42>
 800f082:	9b00      	ldr	r3, [sp, #0]
 800f084:	58eb      	ldr	r3, [r5, r3]
 800f086:	b92b      	cbnz	r3, 800f094 <quorem+0x96>
 800f088:	9b01      	ldr	r3, [sp, #4]
 800f08a:	3b04      	subs	r3, #4
 800f08c:	429d      	cmp	r5, r3
 800f08e:	461a      	mov	r2, r3
 800f090:	d32f      	bcc.n	800f0f2 <quorem+0xf4>
 800f092:	613c      	str	r4, [r7, #16]
 800f094:	4638      	mov	r0, r7
 800f096:	f001 f8c3 	bl	8010220 <__mcmp>
 800f09a:	2800      	cmp	r0, #0
 800f09c:	db25      	blt.n	800f0ea <quorem+0xec>
 800f09e:	4629      	mov	r1, r5
 800f0a0:	2000      	movs	r0, #0
 800f0a2:	f858 2b04 	ldr.w	r2, [r8], #4
 800f0a6:	f8d1 c000 	ldr.w	ip, [r1]
 800f0aa:	fa1f fe82 	uxth.w	lr, r2
 800f0ae:	fa1f f38c 	uxth.w	r3, ip
 800f0b2:	eba3 030e 	sub.w	r3, r3, lr
 800f0b6:	4403      	add	r3, r0
 800f0b8:	0c12      	lsrs	r2, r2, #16
 800f0ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f0be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f0c2:	b29b      	uxth	r3, r3
 800f0c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0c8:	45c1      	cmp	r9, r8
 800f0ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f0ce:	f841 3b04 	str.w	r3, [r1], #4
 800f0d2:	d2e6      	bcs.n	800f0a2 <quorem+0xa4>
 800f0d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0dc:	b922      	cbnz	r2, 800f0e8 <quorem+0xea>
 800f0de:	3b04      	subs	r3, #4
 800f0e0:	429d      	cmp	r5, r3
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	d30b      	bcc.n	800f0fe <quorem+0x100>
 800f0e6:	613c      	str	r4, [r7, #16]
 800f0e8:	3601      	adds	r6, #1
 800f0ea:	4630      	mov	r0, r6
 800f0ec:	b003      	add	sp, #12
 800f0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f2:	6812      	ldr	r2, [r2, #0]
 800f0f4:	3b04      	subs	r3, #4
 800f0f6:	2a00      	cmp	r2, #0
 800f0f8:	d1cb      	bne.n	800f092 <quorem+0x94>
 800f0fa:	3c01      	subs	r4, #1
 800f0fc:	e7c6      	b.n	800f08c <quorem+0x8e>
 800f0fe:	6812      	ldr	r2, [r2, #0]
 800f100:	3b04      	subs	r3, #4
 800f102:	2a00      	cmp	r2, #0
 800f104:	d1ef      	bne.n	800f0e6 <quorem+0xe8>
 800f106:	3c01      	subs	r4, #1
 800f108:	e7ea      	b.n	800f0e0 <quorem+0xe2>
 800f10a:	2000      	movs	r0, #0
 800f10c:	e7ee      	b.n	800f0ec <quorem+0xee>
	...

0800f110 <_dtoa_r>:
 800f110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f114:	4614      	mov	r4, r2
 800f116:	461d      	mov	r5, r3
 800f118:	69c7      	ldr	r7, [r0, #28]
 800f11a:	b097      	sub	sp, #92	@ 0x5c
 800f11c:	4683      	mov	fp, r0
 800f11e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f122:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800f124:	b97f      	cbnz	r7, 800f146 <_dtoa_r+0x36>
 800f126:	2010      	movs	r0, #16
 800f128:	f7ff f880 	bl	800e22c <malloc>
 800f12c:	4602      	mov	r2, r0
 800f12e:	f8cb 001c 	str.w	r0, [fp, #28]
 800f132:	b920      	cbnz	r0, 800f13e <_dtoa_r+0x2e>
 800f134:	21ef      	movs	r1, #239	@ 0xef
 800f136:	4ba8      	ldr	r3, [pc, #672]	@ (800f3d8 <_dtoa_r+0x2c8>)
 800f138:	48a8      	ldr	r0, [pc, #672]	@ (800f3dc <_dtoa_r+0x2cc>)
 800f13a:	f001 fba1 	bl	8010880 <__assert_func>
 800f13e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f142:	6007      	str	r7, [r0, #0]
 800f144:	60c7      	str	r7, [r0, #12]
 800f146:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f14a:	6819      	ldr	r1, [r3, #0]
 800f14c:	b159      	cbz	r1, 800f166 <_dtoa_r+0x56>
 800f14e:	685a      	ldr	r2, [r3, #4]
 800f150:	2301      	movs	r3, #1
 800f152:	4093      	lsls	r3, r2
 800f154:	604a      	str	r2, [r1, #4]
 800f156:	608b      	str	r3, [r1, #8]
 800f158:	4658      	mov	r0, fp
 800f15a:	f000 fe29 	bl	800fdb0 <_Bfree>
 800f15e:	2200      	movs	r2, #0
 800f160:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f164:	601a      	str	r2, [r3, #0]
 800f166:	1e2b      	subs	r3, r5, #0
 800f168:	bfaf      	iteee	ge
 800f16a:	2300      	movge	r3, #0
 800f16c:	2201      	movlt	r2, #1
 800f16e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f172:	9303      	strlt	r3, [sp, #12]
 800f174:	bfa8      	it	ge
 800f176:	6033      	strge	r3, [r6, #0]
 800f178:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f17c:	4b98      	ldr	r3, [pc, #608]	@ (800f3e0 <_dtoa_r+0x2d0>)
 800f17e:	bfb8      	it	lt
 800f180:	6032      	strlt	r2, [r6, #0]
 800f182:	ea33 0308 	bics.w	r3, r3, r8
 800f186:	d112      	bne.n	800f1ae <_dtoa_r+0x9e>
 800f188:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f18c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f18e:	6013      	str	r3, [r2, #0]
 800f190:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f194:	4323      	orrs	r3, r4
 800f196:	f000 8550 	beq.w	800fc3a <_dtoa_r+0xb2a>
 800f19a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f19c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800f3e4 <_dtoa_r+0x2d4>
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	f000 8552 	beq.w	800fc4a <_dtoa_r+0xb3a>
 800f1a6:	f10a 0303 	add.w	r3, sl, #3
 800f1aa:	f000 bd4c 	b.w	800fc46 <_dtoa_r+0xb36>
 800f1ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f1b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f1b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	2300      	movs	r3, #0
 800f1be:	f7f1 fbf3 	bl	80009a8 <__aeabi_dcmpeq>
 800f1c2:	4607      	mov	r7, r0
 800f1c4:	b158      	cbz	r0, 800f1de <_dtoa_r+0xce>
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f1ca:	6013      	str	r3, [r2, #0]
 800f1cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f1ce:	b113      	cbz	r3, 800f1d6 <_dtoa_r+0xc6>
 800f1d0:	4b85      	ldr	r3, [pc, #532]	@ (800f3e8 <_dtoa_r+0x2d8>)
 800f1d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f1d4:	6013      	str	r3, [r2, #0]
 800f1d6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800f3ec <_dtoa_r+0x2dc>
 800f1da:	f000 bd36 	b.w	800fc4a <_dtoa_r+0xb3a>
 800f1de:	ab14      	add	r3, sp, #80	@ 0x50
 800f1e0:	9301      	str	r3, [sp, #4]
 800f1e2:	ab15      	add	r3, sp, #84	@ 0x54
 800f1e4:	9300      	str	r3, [sp, #0]
 800f1e6:	4658      	mov	r0, fp
 800f1e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f1ec:	f001 f8c8 	bl	8010380 <__d2b>
 800f1f0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800f1f4:	4681      	mov	r9, r0
 800f1f6:	2e00      	cmp	r6, #0
 800f1f8:	d077      	beq.n	800f2ea <_dtoa_r+0x1da>
 800f1fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f200:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f208:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f20c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f210:	9712      	str	r7, [sp, #72]	@ 0x48
 800f212:	4619      	mov	r1, r3
 800f214:	2200      	movs	r2, #0
 800f216:	4b76      	ldr	r3, [pc, #472]	@ (800f3f0 <_dtoa_r+0x2e0>)
 800f218:	f7f0 ffa6 	bl	8000168 <__aeabi_dsub>
 800f21c:	a368      	add	r3, pc, #416	@ (adr r3, 800f3c0 <_dtoa_r+0x2b0>)
 800f21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f222:	f7f1 f959 	bl	80004d8 <__aeabi_dmul>
 800f226:	a368      	add	r3, pc, #416	@ (adr r3, 800f3c8 <_dtoa_r+0x2b8>)
 800f228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22c:	f7f0 ff9e 	bl	800016c <__adddf3>
 800f230:	4604      	mov	r4, r0
 800f232:	4630      	mov	r0, r6
 800f234:	460d      	mov	r5, r1
 800f236:	f7f1 f8e5 	bl	8000404 <__aeabi_i2d>
 800f23a:	a365      	add	r3, pc, #404	@ (adr r3, 800f3d0 <_dtoa_r+0x2c0>)
 800f23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f240:	f7f1 f94a 	bl	80004d8 <__aeabi_dmul>
 800f244:	4602      	mov	r2, r0
 800f246:	460b      	mov	r3, r1
 800f248:	4620      	mov	r0, r4
 800f24a:	4629      	mov	r1, r5
 800f24c:	f7f0 ff8e 	bl	800016c <__adddf3>
 800f250:	4604      	mov	r4, r0
 800f252:	460d      	mov	r5, r1
 800f254:	f7f1 fbf0 	bl	8000a38 <__aeabi_d2iz>
 800f258:	2200      	movs	r2, #0
 800f25a:	4607      	mov	r7, r0
 800f25c:	2300      	movs	r3, #0
 800f25e:	4620      	mov	r0, r4
 800f260:	4629      	mov	r1, r5
 800f262:	f7f1 fbab 	bl	80009bc <__aeabi_dcmplt>
 800f266:	b140      	cbz	r0, 800f27a <_dtoa_r+0x16a>
 800f268:	4638      	mov	r0, r7
 800f26a:	f7f1 f8cb 	bl	8000404 <__aeabi_i2d>
 800f26e:	4622      	mov	r2, r4
 800f270:	462b      	mov	r3, r5
 800f272:	f7f1 fb99 	bl	80009a8 <__aeabi_dcmpeq>
 800f276:	b900      	cbnz	r0, 800f27a <_dtoa_r+0x16a>
 800f278:	3f01      	subs	r7, #1
 800f27a:	2f16      	cmp	r7, #22
 800f27c:	d853      	bhi.n	800f326 <_dtoa_r+0x216>
 800f27e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f282:	4b5c      	ldr	r3, [pc, #368]	@ (800f3f4 <_dtoa_r+0x2e4>)
 800f284:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28c:	f7f1 fb96 	bl	80009bc <__aeabi_dcmplt>
 800f290:	2800      	cmp	r0, #0
 800f292:	d04a      	beq.n	800f32a <_dtoa_r+0x21a>
 800f294:	2300      	movs	r3, #0
 800f296:	3f01      	subs	r7, #1
 800f298:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f29a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f29c:	1b9b      	subs	r3, r3, r6
 800f29e:	1e5a      	subs	r2, r3, #1
 800f2a0:	bf46      	itte	mi
 800f2a2:	f1c3 0801 	rsbmi	r8, r3, #1
 800f2a6:	2300      	movmi	r3, #0
 800f2a8:	f04f 0800 	movpl.w	r8, #0
 800f2ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2ae:	bf48      	it	mi
 800f2b0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800f2b2:	2f00      	cmp	r7, #0
 800f2b4:	db3b      	blt.n	800f32e <_dtoa_r+0x21e>
 800f2b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2b8:	970e      	str	r7, [sp, #56]	@ 0x38
 800f2ba:	443b      	add	r3, r7
 800f2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2be:	2300      	movs	r3, #0
 800f2c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f2c4:	2b09      	cmp	r3, #9
 800f2c6:	d866      	bhi.n	800f396 <_dtoa_r+0x286>
 800f2c8:	2b05      	cmp	r3, #5
 800f2ca:	bfc4      	itt	gt
 800f2cc:	3b04      	subgt	r3, #4
 800f2ce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800f2d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f2d2:	bfc8      	it	gt
 800f2d4:	2400      	movgt	r4, #0
 800f2d6:	f1a3 0302 	sub.w	r3, r3, #2
 800f2da:	bfd8      	it	le
 800f2dc:	2401      	movle	r4, #1
 800f2de:	2b03      	cmp	r3, #3
 800f2e0:	d864      	bhi.n	800f3ac <_dtoa_r+0x29c>
 800f2e2:	e8df f003 	tbb	[pc, r3]
 800f2e6:	382b      	.short	0x382b
 800f2e8:	5636      	.short	0x5636
 800f2ea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f2ee:	441e      	add	r6, r3
 800f2f0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f2f4:	2b20      	cmp	r3, #32
 800f2f6:	bfc1      	itttt	gt
 800f2f8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f2fc:	fa08 f803 	lslgt.w	r8, r8, r3
 800f300:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f304:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f308:	bfd6      	itet	le
 800f30a:	f1c3 0320 	rsble	r3, r3, #32
 800f30e:	ea48 0003 	orrgt.w	r0, r8, r3
 800f312:	fa04 f003 	lslle.w	r0, r4, r3
 800f316:	f7f1 f865 	bl	80003e4 <__aeabi_ui2d>
 800f31a:	2201      	movs	r2, #1
 800f31c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f320:	3e01      	subs	r6, #1
 800f322:	9212      	str	r2, [sp, #72]	@ 0x48
 800f324:	e775      	b.n	800f212 <_dtoa_r+0x102>
 800f326:	2301      	movs	r3, #1
 800f328:	e7b6      	b.n	800f298 <_dtoa_r+0x188>
 800f32a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f32c:	e7b5      	b.n	800f29a <_dtoa_r+0x18a>
 800f32e:	427b      	negs	r3, r7
 800f330:	930a      	str	r3, [sp, #40]	@ 0x28
 800f332:	2300      	movs	r3, #0
 800f334:	eba8 0807 	sub.w	r8, r8, r7
 800f338:	930e      	str	r3, [sp, #56]	@ 0x38
 800f33a:	e7c2      	b.n	800f2c2 <_dtoa_r+0x1b2>
 800f33c:	2300      	movs	r3, #0
 800f33e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f340:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f342:	2b00      	cmp	r3, #0
 800f344:	dc35      	bgt.n	800f3b2 <_dtoa_r+0x2a2>
 800f346:	2301      	movs	r3, #1
 800f348:	461a      	mov	r2, r3
 800f34a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f34e:	9221      	str	r2, [sp, #132]	@ 0x84
 800f350:	e00b      	b.n	800f36a <_dtoa_r+0x25a>
 800f352:	2301      	movs	r3, #1
 800f354:	e7f3      	b.n	800f33e <_dtoa_r+0x22e>
 800f356:	2300      	movs	r3, #0
 800f358:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f35a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f35c:	18fb      	adds	r3, r7, r3
 800f35e:	9308      	str	r3, [sp, #32]
 800f360:	3301      	adds	r3, #1
 800f362:	2b01      	cmp	r3, #1
 800f364:	9307      	str	r3, [sp, #28]
 800f366:	bfb8      	it	lt
 800f368:	2301      	movlt	r3, #1
 800f36a:	2100      	movs	r1, #0
 800f36c:	2204      	movs	r2, #4
 800f36e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f372:	f102 0514 	add.w	r5, r2, #20
 800f376:	429d      	cmp	r5, r3
 800f378:	d91f      	bls.n	800f3ba <_dtoa_r+0x2aa>
 800f37a:	6041      	str	r1, [r0, #4]
 800f37c:	4658      	mov	r0, fp
 800f37e:	f000 fcd7 	bl	800fd30 <_Balloc>
 800f382:	4682      	mov	sl, r0
 800f384:	2800      	cmp	r0, #0
 800f386:	d139      	bne.n	800f3fc <_dtoa_r+0x2ec>
 800f388:	4602      	mov	r2, r0
 800f38a:	f240 11af 	movw	r1, #431	@ 0x1af
 800f38e:	4b1a      	ldr	r3, [pc, #104]	@ (800f3f8 <_dtoa_r+0x2e8>)
 800f390:	e6d2      	b.n	800f138 <_dtoa_r+0x28>
 800f392:	2301      	movs	r3, #1
 800f394:	e7e0      	b.n	800f358 <_dtoa_r+0x248>
 800f396:	2401      	movs	r4, #1
 800f398:	2300      	movs	r3, #0
 800f39a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f39c:	9320      	str	r3, [sp, #128]	@ 0x80
 800f39e:	f04f 33ff 	mov.w	r3, #4294967295
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f3a8:	2312      	movs	r3, #18
 800f3aa:	e7d0      	b.n	800f34e <_dtoa_r+0x23e>
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3b0:	e7f5      	b.n	800f39e <_dtoa_r+0x28e>
 800f3b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f3b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f3b8:	e7d7      	b.n	800f36a <_dtoa_r+0x25a>
 800f3ba:	3101      	adds	r1, #1
 800f3bc:	0052      	lsls	r2, r2, #1
 800f3be:	e7d8      	b.n	800f372 <_dtoa_r+0x262>
 800f3c0:	636f4361 	.word	0x636f4361
 800f3c4:	3fd287a7 	.word	0x3fd287a7
 800f3c8:	8b60c8b3 	.word	0x8b60c8b3
 800f3cc:	3fc68a28 	.word	0x3fc68a28
 800f3d0:	509f79fb 	.word	0x509f79fb
 800f3d4:	3fd34413 	.word	0x3fd34413
 800f3d8:	08011f83 	.word	0x08011f83
 800f3dc:	08011f9a 	.word	0x08011f9a
 800f3e0:	7ff00000 	.word	0x7ff00000
 800f3e4:	08011f7f 	.word	0x08011f7f
 800f3e8:	08011f53 	.word	0x08011f53
 800f3ec:	08011f52 	.word	0x08011f52
 800f3f0:	3ff80000 	.word	0x3ff80000
 800f3f4:	08012090 	.word	0x08012090
 800f3f8:	08011ff2 	.word	0x08011ff2
 800f3fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f400:	6018      	str	r0, [r3, #0]
 800f402:	9b07      	ldr	r3, [sp, #28]
 800f404:	2b0e      	cmp	r3, #14
 800f406:	f200 80a4 	bhi.w	800f552 <_dtoa_r+0x442>
 800f40a:	2c00      	cmp	r4, #0
 800f40c:	f000 80a1 	beq.w	800f552 <_dtoa_r+0x442>
 800f410:	2f00      	cmp	r7, #0
 800f412:	dd33      	ble.n	800f47c <_dtoa_r+0x36c>
 800f414:	4b86      	ldr	r3, [pc, #536]	@ (800f630 <_dtoa_r+0x520>)
 800f416:	f007 020f 	and.w	r2, r7, #15
 800f41a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f41e:	05f8      	lsls	r0, r7, #23
 800f420:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f424:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f428:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f42c:	d516      	bpl.n	800f45c <_dtoa_r+0x34c>
 800f42e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f432:	4b80      	ldr	r3, [pc, #512]	@ (800f634 <_dtoa_r+0x524>)
 800f434:	2603      	movs	r6, #3
 800f436:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f43a:	f7f1 f977 	bl	800072c <__aeabi_ddiv>
 800f43e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f442:	f004 040f 	and.w	r4, r4, #15
 800f446:	4d7b      	ldr	r5, [pc, #492]	@ (800f634 <_dtoa_r+0x524>)
 800f448:	b954      	cbnz	r4, 800f460 <_dtoa_r+0x350>
 800f44a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f44e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f452:	f7f1 f96b 	bl	800072c <__aeabi_ddiv>
 800f456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f45a:	e028      	b.n	800f4ae <_dtoa_r+0x39e>
 800f45c:	2602      	movs	r6, #2
 800f45e:	e7f2      	b.n	800f446 <_dtoa_r+0x336>
 800f460:	07e1      	lsls	r1, r4, #31
 800f462:	d508      	bpl.n	800f476 <_dtoa_r+0x366>
 800f464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f468:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f46c:	f7f1 f834 	bl	80004d8 <__aeabi_dmul>
 800f470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f474:	3601      	adds	r6, #1
 800f476:	1064      	asrs	r4, r4, #1
 800f478:	3508      	adds	r5, #8
 800f47a:	e7e5      	b.n	800f448 <_dtoa_r+0x338>
 800f47c:	f000 80d2 	beq.w	800f624 <_dtoa_r+0x514>
 800f480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f484:	427c      	negs	r4, r7
 800f486:	4b6a      	ldr	r3, [pc, #424]	@ (800f630 <_dtoa_r+0x520>)
 800f488:	f004 020f 	and.w	r2, r4, #15
 800f48c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f494:	f7f1 f820 	bl	80004d8 <__aeabi_dmul>
 800f498:	2602      	movs	r6, #2
 800f49a:	2300      	movs	r3, #0
 800f49c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4a0:	4d64      	ldr	r5, [pc, #400]	@ (800f634 <_dtoa_r+0x524>)
 800f4a2:	1124      	asrs	r4, r4, #4
 800f4a4:	2c00      	cmp	r4, #0
 800f4a6:	f040 80b2 	bne.w	800f60e <_dtoa_r+0x4fe>
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d1d3      	bne.n	800f456 <_dtoa_r+0x346>
 800f4ae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f4b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	f000 80b7 	beq.w	800f628 <_dtoa_r+0x518>
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	4620      	mov	r0, r4
 800f4be:	4629      	mov	r1, r5
 800f4c0:	4b5d      	ldr	r3, [pc, #372]	@ (800f638 <_dtoa_r+0x528>)
 800f4c2:	f7f1 fa7b 	bl	80009bc <__aeabi_dcmplt>
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	f000 80ae 	beq.w	800f628 <_dtoa_r+0x518>
 800f4cc:	9b07      	ldr	r3, [sp, #28]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	f000 80aa 	beq.w	800f628 <_dtoa_r+0x518>
 800f4d4:	9b08      	ldr	r3, [sp, #32]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	dd37      	ble.n	800f54a <_dtoa_r+0x43a>
 800f4da:	1e7b      	subs	r3, r7, #1
 800f4dc:	4620      	mov	r0, r4
 800f4de:	9304      	str	r3, [sp, #16]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	4629      	mov	r1, r5
 800f4e4:	4b55      	ldr	r3, [pc, #340]	@ (800f63c <_dtoa_r+0x52c>)
 800f4e6:	f7f0 fff7 	bl	80004d8 <__aeabi_dmul>
 800f4ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4ee:	9c08      	ldr	r4, [sp, #32]
 800f4f0:	3601      	adds	r6, #1
 800f4f2:	4630      	mov	r0, r6
 800f4f4:	f7f0 ff86 	bl	8000404 <__aeabi_i2d>
 800f4f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4fc:	f7f0 ffec 	bl	80004d8 <__aeabi_dmul>
 800f500:	2200      	movs	r2, #0
 800f502:	4b4f      	ldr	r3, [pc, #316]	@ (800f640 <_dtoa_r+0x530>)
 800f504:	f7f0 fe32 	bl	800016c <__adddf3>
 800f508:	4605      	mov	r5, r0
 800f50a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f50e:	2c00      	cmp	r4, #0
 800f510:	f040 809a 	bne.w	800f648 <_dtoa_r+0x538>
 800f514:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f518:	2200      	movs	r2, #0
 800f51a:	4b4a      	ldr	r3, [pc, #296]	@ (800f644 <_dtoa_r+0x534>)
 800f51c:	f7f0 fe24 	bl	8000168 <__aeabi_dsub>
 800f520:	4602      	mov	r2, r0
 800f522:	460b      	mov	r3, r1
 800f524:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f528:	462a      	mov	r2, r5
 800f52a:	4633      	mov	r3, r6
 800f52c:	f7f1 fa64 	bl	80009f8 <__aeabi_dcmpgt>
 800f530:	2800      	cmp	r0, #0
 800f532:	f040 828e 	bne.w	800fa52 <_dtoa_r+0x942>
 800f536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f53a:	462a      	mov	r2, r5
 800f53c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f540:	f7f1 fa3c 	bl	80009bc <__aeabi_dcmplt>
 800f544:	2800      	cmp	r0, #0
 800f546:	f040 8127 	bne.w	800f798 <_dtoa_r+0x688>
 800f54a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f54e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f552:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f554:	2b00      	cmp	r3, #0
 800f556:	f2c0 8163 	blt.w	800f820 <_dtoa_r+0x710>
 800f55a:	2f0e      	cmp	r7, #14
 800f55c:	f300 8160 	bgt.w	800f820 <_dtoa_r+0x710>
 800f560:	4b33      	ldr	r3, [pc, #204]	@ (800f630 <_dtoa_r+0x520>)
 800f562:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f566:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f56a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f56e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f570:	2b00      	cmp	r3, #0
 800f572:	da03      	bge.n	800f57c <_dtoa_r+0x46c>
 800f574:	9b07      	ldr	r3, [sp, #28]
 800f576:	2b00      	cmp	r3, #0
 800f578:	f340 8100 	ble.w	800f77c <_dtoa_r+0x66c>
 800f57c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f580:	4656      	mov	r6, sl
 800f582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f586:	4620      	mov	r0, r4
 800f588:	4629      	mov	r1, r5
 800f58a:	f7f1 f8cf 	bl	800072c <__aeabi_ddiv>
 800f58e:	f7f1 fa53 	bl	8000a38 <__aeabi_d2iz>
 800f592:	4680      	mov	r8, r0
 800f594:	f7f0 ff36 	bl	8000404 <__aeabi_i2d>
 800f598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f59c:	f7f0 ff9c 	bl	80004d8 <__aeabi_dmul>
 800f5a0:	4602      	mov	r2, r0
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	4629      	mov	r1, r5
 800f5a8:	f7f0 fdde 	bl	8000168 <__aeabi_dsub>
 800f5ac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f5b0:	9d07      	ldr	r5, [sp, #28]
 800f5b2:	f806 4b01 	strb.w	r4, [r6], #1
 800f5b6:	eba6 040a 	sub.w	r4, r6, sl
 800f5ba:	42a5      	cmp	r5, r4
 800f5bc:	4602      	mov	r2, r0
 800f5be:	460b      	mov	r3, r1
 800f5c0:	f040 8116 	bne.w	800f7f0 <_dtoa_r+0x6e0>
 800f5c4:	f7f0 fdd2 	bl	800016c <__adddf3>
 800f5c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5cc:	4604      	mov	r4, r0
 800f5ce:	460d      	mov	r5, r1
 800f5d0:	f7f1 fa12 	bl	80009f8 <__aeabi_dcmpgt>
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	f040 80f8 	bne.w	800f7ca <_dtoa_r+0x6ba>
 800f5da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5de:	4620      	mov	r0, r4
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	f7f1 f9e1 	bl	80009a8 <__aeabi_dcmpeq>
 800f5e6:	b118      	cbz	r0, 800f5f0 <_dtoa_r+0x4e0>
 800f5e8:	f018 0f01 	tst.w	r8, #1
 800f5ec:	f040 80ed 	bne.w	800f7ca <_dtoa_r+0x6ba>
 800f5f0:	4649      	mov	r1, r9
 800f5f2:	4658      	mov	r0, fp
 800f5f4:	f000 fbdc 	bl	800fdb0 <_Bfree>
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	7033      	strb	r3, [r6, #0]
 800f5fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f5fe:	3701      	adds	r7, #1
 800f600:	601f      	str	r7, [r3, #0]
 800f602:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f604:	2b00      	cmp	r3, #0
 800f606:	f000 8320 	beq.w	800fc4a <_dtoa_r+0xb3a>
 800f60a:	601e      	str	r6, [r3, #0]
 800f60c:	e31d      	b.n	800fc4a <_dtoa_r+0xb3a>
 800f60e:	07e2      	lsls	r2, r4, #31
 800f610:	d505      	bpl.n	800f61e <_dtoa_r+0x50e>
 800f612:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f616:	f7f0 ff5f 	bl	80004d8 <__aeabi_dmul>
 800f61a:	2301      	movs	r3, #1
 800f61c:	3601      	adds	r6, #1
 800f61e:	1064      	asrs	r4, r4, #1
 800f620:	3508      	adds	r5, #8
 800f622:	e73f      	b.n	800f4a4 <_dtoa_r+0x394>
 800f624:	2602      	movs	r6, #2
 800f626:	e742      	b.n	800f4ae <_dtoa_r+0x39e>
 800f628:	9c07      	ldr	r4, [sp, #28]
 800f62a:	9704      	str	r7, [sp, #16]
 800f62c:	e761      	b.n	800f4f2 <_dtoa_r+0x3e2>
 800f62e:	bf00      	nop
 800f630:	08012090 	.word	0x08012090
 800f634:	08012068 	.word	0x08012068
 800f638:	3ff00000 	.word	0x3ff00000
 800f63c:	40240000 	.word	0x40240000
 800f640:	401c0000 	.word	0x401c0000
 800f644:	40140000 	.word	0x40140000
 800f648:	4b70      	ldr	r3, [pc, #448]	@ (800f80c <_dtoa_r+0x6fc>)
 800f64a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f64c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f650:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f654:	4454      	add	r4, sl
 800f656:	2900      	cmp	r1, #0
 800f658:	d045      	beq.n	800f6e6 <_dtoa_r+0x5d6>
 800f65a:	2000      	movs	r0, #0
 800f65c:	496c      	ldr	r1, [pc, #432]	@ (800f810 <_dtoa_r+0x700>)
 800f65e:	f7f1 f865 	bl	800072c <__aeabi_ddiv>
 800f662:	4633      	mov	r3, r6
 800f664:	462a      	mov	r2, r5
 800f666:	f7f0 fd7f 	bl	8000168 <__aeabi_dsub>
 800f66a:	4656      	mov	r6, sl
 800f66c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f674:	f7f1 f9e0 	bl	8000a38 <__aeabi_d2iz>
 800f678:	4605      	mov	r5, r0
 800f67a:	f7f0 fec3 	bl	8000404 <__aeabi_i2d>
 800f67e:	4602      	mov	r2, r0
 800f680:	460b      	mov	r3, r1
 800f682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f686:	f7f0 fd6f 	bl	8000168 <__aeabi_dsub>
 800f68a:	4602      	mov	r2, r0
 800f68c:	460b      	mov	r3, r1
 800f68e:	3530      	adds	r5, #48	@ 0x30
 800f690:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f694:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f698:	f806 5b01 	strb.w	r5, [r6], #1
 800f69c:	f7f1 f98e 	bl	80009bc <__aeabi_dcmplt>
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d163      	bne.n	800f76c <_dtoa_r+0x65c>
 800f6a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f6a8:	2000      	movs	r0, #0
 800f6aa:	495a      	ldr	r1, [pc, #360]	@ (800f814 <_dtoa_r+0x704>)
 800f6ac:	f7f0 fd5c 	bl	8000168 <__aeabi_dsub>
 800f6b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f6b4:	f7f1 f982 	bl	80009bc <__aeabi_dcmplt>
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	f040 8087 	bne.w	800f7cc <_dtoa_r+0x6bc>
 800f6be:	42a6      	cmp	r6, r4
 800f6c0:	f43f af43 	beq.w	800f54a <_dtoa_r+0x43a>
 800f6c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	4b53      	ldr	r3, [pc, #332]	@ (800f818 <_dtoa_r+0x708>)
 800f6cc:	f7f0 ff04 	bl	80004d8 <__aeabi_dmul>
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f6d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6da:	4b4f      	ldr	r3, [pc, #316]	@ (800f818 <_dtoa_r+0x708>)
 800f6dc:	f7f0 fefc 	bl	80004d8 <__aeabi_dmul>
 800f6e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6e4:	e7c4      	b.n	800f670 <_dtoa_r+0x560>
 800f6e6:	4631      	mov	r1, r6
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	f7f0 fef5 	bl	80004d8 <__aeabi_dmul>
 800f6ee:	4656      	mov	r6, sl
 800f6f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f6f4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f6f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6fa:	f7f1 f99d 	bl	8000a38 <__aeabi_d2iz>
 800f6fe:	4605      	mov	r5, r0
 800f700:	f7f0 fe80 	bl	8000404 <__aeabi_i2d>
 800f704:	4602      	mov	r2, r0
 800f706:	460b      	mov	r3, r1
 800f708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f70c:	f7f0 fd2c 	bl	8000168 <__aeabi_dsub>
 800f710:	4602      	mov	r2, r0
 800f712:	460b      	mov	r3, r1
 800f714:	3530      	adds	r5, #48	@ 0x30
 800f716:	f806 5b01 	strb.w	r5, [r6], #1
 800f71a:	42a6      	cmp	r6, r4
 800f71c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f720:	f04f 0200 	mov.w	r2, #0
 800f724:	d124      	bne.n	800f770 <_dtoa_r+0x660>
 800f726:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f72a:	4b39      	ldr	r3, [pc, #228]	@ (800f810 <_dtoa_r+0x700>)
 800f72c:	f7f0 fd1e 	bl	800016c <__adddf3>
 800f730:	4602      	mov	r2, r0
 800f732:	460b      	mov	r3, r1
 800f734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f738:	f7f1 f95e 	bl	80009f8 <__aeabi_dcmpgt>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	d145      	bne.n	800f7cc <_dtoa_r+0x6bc>
 800f740:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f744:	2000      	movs	r0, #0
 800f746:	4932      	ldr	r1, [pc, #200]	@ (800f810 <_dtoa_r+0x700>)
 800f748:	f7f0 fd0e 	bl	8000168 <__aeabi_dsub>
 800f74c:	4602      	mov	r2, r0
 800f74e:	460b      	mov	r3, r1
 800f750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f754:	f7f1 f932 	bl	80009bc <__aeabi_dcmplt>
 800f758:	2800      	cmp	r0, #0
 800f75a:	f43f aef6 	beq.w	800f54a <_dtoa_r+0x43a>
 800f75e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f760:	1e73      	subs	r3, r6, #1
 800f762:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f764:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f768:	2b30      	cmp	r3, #48	@ 0x30
 800f76a:	d0f8      	beq.n	800f75e <_dtoa_r+0x64e>
 800f76c:	9f04      	ldr	r7, [sp, #16]
 800f76e:	e73f      	b.n	800f5f0 <_dtoa_r+0x4e0>
 800f770:	4b29      	ldr	r3, [pc, #164]	@ (800f818 <_dtoa_r+0x708>)
 800f772:	f7f0 feb1 	bl	80004d8 <__aeabi_dmul>
 800f776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f77a:	e7bc      	b.n	800f6f6 <_dtoa_r+0x5e6>
 800f77c:	d10c      	bne.n	800f798 <_dtoa_r+0x688>
 800f77e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f782:	2200      	movs	r2, #0
 800f784:	4b25      	ldr	r3, [pc, #148]	@ (800f81c <_dtoa_r+0x70c>)
 800f786:	f7f0 fea7 	bl	80004d8 <__aeabi_dmul>
 800f78a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f78e:	f7f1 f929 	bl	80009e4 <__aeabi_dcmpge>
 800f792:	2800      	cmp	r0, #0
 800f794:	f000 815b 	beq.w	800fa4e <_dtoa_r+0x93e>
 800f798:	2400      	movs	r4, #0
 800f79a:	4625      	mov	r5, r4
 800f79c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f79e:	4656      	mov	r6, sl
 800f7a0:	43db      	mvns	r3, r3
 800f7a2:	9304      	str	r3, [sp, #16]
 800f7a4:	2700      	movs	r7, #0
 800f7a6:	4621      	mov	r1, r4
 800f7a8:	4658      	mov	r0, fp
 800f7aa:	f000 fb01 	bl	800fdb0 <_Bfree>
 800f7ae:	2d00      	cmp	r5, #0
 800f7b0:	d0dc      	beq.n	800f76c <_dtoa_r+0x65c>
 800f7b2:	b12f      	cbz	r7, 800f7c0 <_dtoa_r+0x6b0>
 800f7b4:	42af      	cmp	r7, r5
 800f7b6:	d003      	beq.n	800f7c0 <_dtoa_r+0x6b0>
 800f7b8:	4639      	mov	r1, r7
 800f7ba:	4658      	mov	r0, fp
 800f7bc:	f000 faf8 	bl	800fdb0 <_Bfree>
 800f7c0:	4629      	mov	r1, r5
 800f7c2:	4658      	mov	r0, fp
 800f7c4:	f000 faf4 	bl	800fdb0 <_Bfree>
 800f7c8:	e7d0      	b.n	800f76c <_dtoa_r+0x65c>
 800f7ca:	9704      	str	r7, [sp, #16]
 800f7cc:	4633      	mov	r3, r6
 800f7ce:	461e      	mov	r6, r3
 800f7d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7d4:	2a39      	cmp	r2, #57	@ 0x39
 800f7d6:	d107      	bne.n	800f7e8 <_dtoa_r+0x6d8>
 800f7d8:	459a      	cmp	sl, r3
 800f7da:	d1f8      	bne.n	800f7ce <_dtoa_r+0x6be>
 800f7dc:	9a04      	ldr	r2, [sp, #16]
 800f7de:	3201      	adds	r2, #1
 800f7e0:	9204      	str	r2, [sp, #16]
 800f7e2:	2230      	movs	r2, #48	@ 0x30
 800f7e4:	f88a 2000 	strb.w	r2, [sl]
 800f7e8:	781a      	ldrb	r2, [r3, #0]
 800f7ea:	3201      	adds	r2, #1
 800f7ec:	701a      	strb	r2, [r3, #0]
 800f7ee:	e7bd      	b.n	800f76c <_dtoa_r+0x65c>
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	4b09      	ldr	r3, [pc, #36]	@ (800f818 <_dtoa_r+0x708>)
 800f7f4:	f7f0 fe70 	bl	80004d8 <__aeabi_dmul>
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	4604      	mov	r4, r0
 800f7fe:	460d      	mov	r5, r1
 800f800:	f7f1 f8d2 	bl	80009a8 <__aeabi_dcmpeq>
 800f804:	2800      	cmp	r0, #0
 800f806:	f43f aebc 	beq.w	800f582 <_dtoa_r+0x472>
 800f80a:	e6f1      	b.n	800f5f0 <_dtoa_r+0x4e0>
 800f80c:	08012090 	.word	0x08012090
 800f810:	3fe00000 	.word	0x3fe00000
 800f814:	3ff00000 	.word	0x3ff00000
 800f818:	40240000 	.word	0x40240000
 800f81c:	40140000 	.word	0x40140000
 800f820:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f822:	2a00      	cmp	r2, #0
 800f824:	f000 80db 	beq.w	800f9de <_dtoa_r+0x8ce>
 800f828:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f82a:	2a01      	cmp	r2, #1
 800f82c:	f300 80bf 	bgt.w	800f9ae <_dtoa_r+0x89e>
 800f830:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f832:	2a00      	cmp	r2, #0
 800f834:	f000 80b7 	beq.w	800f9a6 <_dtoa_r+0x896>
 800f838:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f83c:	4646      	mov	r6, r8
 800f83e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f840:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f842:	2101      	movs	r1, #1
 800f844:	441a      	add	r2, r3
 800f846:	4658      	mov	r0, fp
 800f848:	4498      	add	r8, r3
 800f84a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f84c:	f000 fb64 	bl	800ff18 <__i2b>
 800f850:	4605      	mov	r5, r0
 800f852:	b15e      	cbz	r6, 800f86c <_dtoa_r+0x75c>
 800f854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f856:	2b00      	cmp	r3, #0
 800f858:	dd08      	ble.n	800f86c <_dtoa_r+0x75c>
 800f85a:	42b3      	cmp	r3, r6
 800f85c:	bfa8      	it	ge
 800f85e:	4633      	movge	r3, r6
 800f860:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f862:	eba8 0803 	sub.w	r8, r8, r3
 800f866:	1af6      	subs	r6, r6, r3
 800f868:	1ad3      	subs	r3, r2, r3
 800f86a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f86c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f86e:	b1f3      	cbz	r3, 800f8ae <_dtoa_r+0x79e>
 800f870:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f872:	2b00      	cmp	r3, #0
 800f874:	f000 80b7 	beq.w	800f9e6 <_dtoa_r+0x8d6>
 800f878:	b18c      	cbz	r4, 800f89e <_dtoa_r+0x78e>
 800f87a:	4629      	mov	r1, r5
 800f87c:	4622      	mov	r2, r4
 800f87e:	4658      	mov	r0, fp
 800f880:	f000 fc08 	bl	8010094 <__pow5mult>
 800f884:	464a      	mov	r2, r9
 800f886:	4601      	mov	r1, r0
 800f888:	4605      	mov	r5, r0
 800f88a:	4658      	mov	r0, fp
 800f88c:	f000 fb5a 	bl	800ff44 <__multiply>
 800f890:	4649      	mov	r1, r9
 800f892:	9004      	str	r0, [sp, #16]
 800f894:	4658      	mov	r0, fp
 800f896:	f000 fa8b 	bl	800fdb0 <_Bfree>
 800f89a:	9b04      	ldr	r3, [sp, #16]
 800f89c:	4699      	mov	r9, r3
 800f89e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8a0:	1b1a      	subs	r2, r3, r4
 800f8a2:	d004      	beq.n	800f8ae <_dtoa_r+0x79e>
 800f8a4:	4649      	mov	r1, r9
 800f8a6:	4658      	mov	r0, fp
 800f8a8:	f000 fbf4 	bl	8010094 <__pow5mult>
 800f8ac:	4681      	mov	r9, r0
 800f8ae:	2101      	movs	r1, #1
 800f8b0:	4658      	mov	r0, fp
 800f8b2:	f000 fb31 	bl	800ff18 <__i2b>
 800f8b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8b8:	4604      	mov	r4, r0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	f000 81c9 	beq.w	800fc52 <_dtoa_r+0xb42>
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	4601      	mov	r1, r0
 800f8c4:	4658      	mov	r0, fp
 800f8c6:	f000 fbe5 	bl	8010094 <__pow5mult>
 800f8ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f8cc:	4604      	mov	r4, r0
 800f8ce:	2b01      	cmp	r3, #1
 800f8d0:	f300 808f 	bgt.w	800f9f2 <_dtoa_r+0x8e2>
 800f8d4:	9b02      	ldr	r3, [sp, #8]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	f040 8087 	bne.w	800f9ea <_dtoa_r+0x8da>
 800f8dc:	9b03      	ldr	r3, [sp, #12]
 800f8de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	f040 8083 	bne.w	800f9ee <_dtoa_r+0x8de>
 800f8e8:	9b03      	ldr	r3, [sp, #12]
 800f8ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f8ee:	0d1b      	lsrs	r3, r3, #20
 800f8f0:	051b      	lsls	r3, r3, #20
 800f8f2:	b12b      	cbz	r3, 800f900 <_dtoa_r+0x7f0>
 800f8f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8f6:	f108 0801 	add.w	r8, r8, #1
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8fe:	2301      	movs	r3, #1
 800f900:	930a      	str	r3, [sp, #40]	@ 0x28
 800f902:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f904:	2b00      	cmp	r3, #0
 800f906:	f000 81aa 	beq.w	800fc5e <_dtoa_r+0xb4e>
 800f90a:	6923      	ldr	r3, [r4, #16]
 800f90c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f910:	6918      	ldr	r0, [r3, #16]
 800f912:	f000 fab5 	bl	800fe80 <__hi0bits>
 800f916:	f1c0 0020 	rsb	r0, r0, #32
 800f91a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f91c:	4418      	add	r0, r3
 800f91e:	f010 001f 	ands.w	r0, r0, #31
 800f922:	d071      	beq.n	800fa08 <_dtoa_r+0x8f8>
 800f924:	f1c0 0320 	rsb	r3, r0, #32
 800f928:	2b04      	cmp	r3, #4
 800f92a:	dd65      	ble.n	800f9f8 <_dtoa_r+0x8e8>
 800f92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f92e:	f1c0 001c 	rsb	r0, r0, #28
 800f932:	4403      	add	r3, r0
 800f934:	4480      	add	r8, r0
 800f936:	4406      	add	r6, r0
 800f938:	9309      	str	r3, [sp, #36]	@ 0x24
 800f93a:	f1b8 0f00 	cmp.w	r8, #0
 800f93e:	dd05      	ble.n	800f94c <_dtoa_r+0x83c>
 800f940:	4649      	mov	r1, r9
 800f942:	4642      	mov	r2, r8
 800f944:	4658      	mov	r0, fp
 800f946:	f000 fbff 	bl	8010148 <__lshift>
 800f94a:	4681      	mov	r9, r0
 800f94c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f94e:	2b00      	cmp	r3, #0
 800f950:	dd05      	ble.n	800f95e <_dtoa_r+0x84e>
 800f952:	4621      	mov	r1, r4
 800f954:	461a      	mov	r2, r3
 800f956:	4658      	mov	r0, fp
 800f958:	f000 fbf6 	bl	8010148 <__lshift>
 800f95c:	4604      	mov	r4, r0
 800f95e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f960:	2b00      	cmp	r3, #0
 800f962:	d053      	beq.n	800fa0c <_dtoa_r+0x8fc>
 800f964:	4621      	mov	r1, r4
 800f966:	4648      	mov	r0, r9
 800f968:	f000 fc5a 	bl	8010220 <__mcmp>
 800f96c:	2800      	cmp	r0, #0
 800f96e:	da4d      	bge.n	800fa0c <_dtoa_r+0x8fc>
 800f970:	1e7b      	subs	r3, r7, #1
 800f972:	4649      	mov	r1, r9
 800f974:	9304      	str	r3, [sp, #16]
 800f976:	220a      	movs	r2, #10
 800f978:	2300      	movs	r3, #0
 800f97a:	4658      	mov	r0, fp
 800f97c:	f000 fa3a 	bl	800fdf4 <__multadd>
 800f980:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f982:	4681      	mov	r9, r0
 800f984:	2b00      	cmp	r3, #0
 800f986:	f000 816c 	beq.w	800fc62 <_dtoa_r+0xb52>
 800f98a:	2300      	movs	r3, #0
 800f98c:	4629      	mov	r1, r5
 800f98e:	220a      	movs	r2, #10
 800f990:	4658      	mov	r0, fp
 800f992:	f000 fa2f 	bl	800fdf4 <__multadd>
 800f996:	9b08      	ldr	r3, [sp, #32]
 800f998:	4605      	mov	r5, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	dc61      	bgt.n	800fa62 <_dtoa_r+0x952>
 800f99e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f9a0:	2b02      	cmp	r3, #2
 800f9a2:	dc3b      	bgt.n	800fa1c <_dtoa_r+0x90c>
 800f9a4:	e05d      	b.n	800fa62 <_dtoa_r+0x952>
 800f9a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f9a8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f9ac:	e746      	b.n	800f83c <_dtoa_r+0x72c>
 800f9ae:	9b07      	ldr	r3, [sp, #28]
 800f9b0:	1e5c      	subs	r4, r3, #1
 800f9b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9b4:	42a3      	cmp	r3, r4
 800f9b6:	bfbf      	itttt	lt
 800f9b8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f9ba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800f9bc:	1ae3      	sublt	r3, r4, r3
 800f9be:	18d2      	addlt	r2, r2, r3
 800f9c0:	bfa8      	it	ge
 800f9c2:	1b1c      	subge	r4, r3, r4
 800f9c4:	9b07      	ldr	r3, [sp, #28]
 800f9c6:	bfbe      	ittt	lt
 800f9c8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f9ca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800f9cc:	2400      	movlt	r4, #0
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	bfb5      	itete	lt
 800f9d2:	eba8 0603 	sublt.w	r6, r8, r3
 800f9d6:	4646      	movge	r6, r8
 800f9d8:	2300      	movlt	r3, #0
 800f9da:	9b07      	ldrge	r3, [sp, #28]
 800f9dc:	e730      	b.n	800f840 <_dtoa_r+0x730>
 800f9de:	4646      	mov	r6, r8
 800f9e0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f9e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f9e4:	e735      	b.n	800f852 <_dtoa_r+0x742>
 800f9e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f9e8:	e75c      	b.n	800f8a4 <_dtoa_r+0x794>
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	e788      	b.n	800f900 <_dtoa_r+0x7f0>
 800f9ee:	9b02      	ldr	r3, [sp, #8]
 800f9f0:	e786      	b.n	800f900 <_dtoa_r+0x7f0>
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9f6:	e788      	b.n	800f90a <_dtoa_r+0x7fa>
 800f9f8:	d09f      	beq.n	800f93a <_dtoa_r+0x82a>
 800f9fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f9fc:	331c      	adds	r3, #28
 800f9fe:	441a      	add	r2, r3
 800fa00:	4498      	add	r8, r3
 800fa02:	441e      	add	r6, r3
 800fa04:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa06:	e798      	b.n	800f93a <_dtoa_r+0x82a>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	e7f6      	b.n	800f9fa <_dtoa_r+0x8ea>
 800fa0c:	9b07      	ldr	r3, [sp, #28]
 800fa0e:	9704      	str	r7, [sp, #16]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	dc20      	bgt.n	800fa56 <_dtoa_r+0x946>
 800fa14:	9308      	str	r3, [sp, #32]
 800fa16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800fa18:	2b02      	cmp	r3, #2
 800fa1a:	dd1e      	ble.n	800fa5a <_dtoa_r+0x94a>
 800fa1c:	9b08      	ldr	r3, [sp, #32]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	f47f aebc 	bne.w	800f79c <_dtoa_r+0x68c>
 800fa24:	4621      	mov	r1, r4
 800fa26:	2205      	movs	r2, #5
 800fa28:	4658      	mov	r0, fp
 800fa2a:	f000 f9e3 	bl	800fdf4 <__multadd>
 800fa2e:	4601      	mov	r1, r0
 800fa30:	4604      	mov	r4, r0
 800fa32:	4648      	mov	r0, r9
 800fa34:	f000 fbf4 	bl	8010220 <__mcmp>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	f77f aeaf 	ble.w	800f79c <_dtoa_r+0x68c>
 800fa3e:	2331      	movs	r3, #49	@ 0x31
 800fa40:	4656      	mov	r6, sl
 800fa42:	f806 3b01 	strb.w	r3, [r6], #1
 800fa46:	9b04      	ldr	r3, [sp, #16]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	9304      	str	r3, [sp, #16]
 800fa4c:	e6aa      	b.n	800f7a4 <_dtoa_r+0x694>
 800fa4e:	9c07      	ldr	r4, [sp, #28]
 800fa50:	9704      	str	r7, [sp, #16]
 800fa52:	4625      	mov	r5, r4
 800fa54:	e7f3      	b.n	800fa3e <_dtoa_r+0x92e>
 800fa56:	9b07      	ldr	r3, [sp, #28]
 800fa58:	9308      	str	r3, [sp, #32]
 800fa5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	f000 8104 	beq.w	800fc6a <_dtoa_r+0xb5a>
 800fa62:	2e00      	cmp	r6, #0
 800fa64:	dd05      	ble.n	800fa72 <_dtoa_r+0x962>
 800fa66:	4629      	mov	r1, r5
 800fa68:	4632      	mov	r2, r6
 800fa6a:	4658      	mov	r0, fp
 800fa6c:	f000 fb6c 	bl	8010148 <__lshift>
 800fa70:	4605      	mov	r5, r0
 800fa72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d05a      	beq.n	800fb2e <_dtoa_r+0xa1e>
 800fa78:	4658      	mov	r0, fp
 800fa7a:	6869      	ldr	r1, [r5, #4]
 800fa7c:	f000 f958 	bl	800fd30 <_Balloc>
 800fa80:	4606      	mov	r6, r0
 800fa82:	b928      	cbnz	r0, 800fa90 <_dtoa_r+0x980>
 800fa84:	4602      	mov	r2, r0
 800fa86:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fa8a:	4b83      	ldr	r3, [pc, #524]	@ (800fc98 <_dtoa_r+0xb88>)
 800fa8c:	f7ff bb54 	b.w	800f138 <_dtoa_r+0x28>
 800fa90:	692a      	ldr	r2, [r5, #16]
 800fa92:	f105 010c 	add.w	r1, r5, #12
 800fa96:	3202      	adds	r2, #2
 800fa98:	0092      	lsls	r2, r2, #2
 800fa9a:	300c      	adds	r0, #12
 800fa9c:	f000 fee2 	bl	8010864 <memcpy>
 800faa0:	2201      	movs	r2, #1
 800faa2:	4631      	mov	r1, r6
 800faa4:	4658      	mov	r0, fp
 800faa6:	f000 fb4f 	bl	8010148 <__lshift>
 800faaa:	462f      	mov	r7, r5
 800faac:	4605      	mov	r5, r0
 800faae:	f10a 0301 	add.w	r3, sl, #1
 800fab2:	9307      	str	r3, [sp, #28]
 800fab4:	9b08      	ldr	r3, [sp, #32]
 800fab6:	4453      	add	r3, sl
 800fab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800faba:	9b02      	ldr	r3, [sp, #8]
 800fabc:	f003 0301 	and.w	r3, r3, #1
 800fac0:	930a      	str	r3, [sp, #40]	@ 0x28
 800fac2:	9b07      	ldr	r3, [sp, #28]
 800fac4:	4621      	mov	r1, r4
 800fac6:	3b01      	subs	r3, #1
 800fac8:	4648      	mov	r0, r9
 800faca:	9302      	str	r3, [sp, #8]
 800facc:	f7ff fa97 	bl	800effe <quorem>
 800fad0:	4639      	mov	r1, r7
 800fad2:	9008      	str	r0, [sp, #32]
 800fad4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fad8:	4648      	mov	r0, r9
 800fada:	f000 fba1 	bl	8010220 <__mcmp>
 800fade:	462a      	mov	r2, r5
 800fae0:	9009      	str	r0, [sp, #36]	@ 0x24
 800fae2:	4621      	mov	r1, r4
 800fae4:	4658      	mov	r0, fp
 800fae6:	f000 fbb7 	bl	8010258 <__mdiff>
 800faea:	68c2      	ldr	r2, [r0, #12]
 800faec:	4606      	mov	r6, r0
 800faee:	bb02      	cbnz	r2, 800fb32 <_dtoa_r+0xa22>
 800faf0:	4601      	mov	r1, r0
 800faf2:	4648      	mov	r0, r9
 800faf4:	f000 fb94 	bl	8010220 <__mcmp>
 800faf8:	4602      	mov	r2, r0
 800fafa:	4631      	mov	r1, r6
 800fafc:	4658      	mov	r0, fp
 800fafe:	920c      	str	r2, [sp, #48]	@ 0x30
 800fb00:	f000 f956 	bl	800fdb0 <_Bfree>
 800fb04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800fb06:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fb08:	9e07      	ldr	r6, [sp, #28]
 800fb0a:	ea43 0102 	orr.w	r1, r3, r2
 800fb0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb10:	4319      	orrs	r1, r3
 800fb12:	d110      	bne.n	800fb36 <_dtoa_r+0xa26>
 800fb14:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fb18:	d029      	beq.n	800fb6e <_dtoa_r+0xa5e>
 800fb1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	dd02      	ble.n	800fb26 <_dtoa_r+0xa16>
 800fb20:	9b08      	ldr	r3, [sp, #32]
 800fb22:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fb26:	9b02      	ldr	r3, [sp, #8]
 800fb28:	f883 8000 	strb.w	r8, [r3]
 800fb2c:	e63b      	b.n	800f7a6 <_dtoa_r+0x696>
 800fb2e:	4628      	mov	r0, r5
 800fb30:	e7bb      	b.n	800faaa <_dtoa_r+0x99a>
 800fb32:	2201      	movs	r2, #1
 800fb34:	e7e1      	b.n	800fafa <_dtoa_r+0x9ea>
 800fb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	db04      	blt.n	800fb46 <_dtoa_r+0xa36>
 800fb3c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800fb3e:	430b      	orrs	r3, r1
 800fb40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fb42:	430b      	orrs	r3, r1
 800fb44:	d120      	bne.n	800fb88 <_dtoa_r+0xa78>
 800fb46:	2a00      	cmp	r2, #0
 800fb48:	dded      	ble.n	800fb26 <_dtoa_r+0xa16>
 800fb4a:	4649      	mov	r1, r9
 800fb4c:	2201      	movs	r2, #1
 800fb4e:	4658      	mov	r0, fp
 800fb50:	f000 fafa 	bl	8010148 <__lshift>
 800fb54:	4621      	mov	r1, r4
 800fb56:	4681      	mov	r9, r0
 800fb58:	f000 fb62 	bl	8010220 <__mcmp>
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	dc03      	bgt.n	800fb68 <_dtoa_r+0xa58>
 800fb60:	d1e1      	bne.n	800fb26 <_dtoa_r+0xa16>
 800fb62:	f018 0f01 	tst.w	r8, #1
 800fb66:	d0de      	beq.n	800fb26 <_dtoa_r+0xa16>
 800fb68:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fb6c:	d1d8      	bne.n	800fb20 <_dtoa_r+0xa10>
 800fb6e:	2339      	movs	r3, #57	@ 0x39
 800fb70:	9a02      	ldr	r2, [sp, #8]
 800fb72:	7013      	strb	r3, [r2, #0]
 800fb74:	4633      	mov	r3, r6
 800fb76:	461e      	mov	r6, r3
 800fb78:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fb7c:	3b01      	subs	r3, #1
 800fb7e:	2a39      	cmp	r2, #57	@ 0x39
 800fb80:	d052      	beq.n	800fc28 <_dtoa_r+0xb18>
 800fb82:	3201      	adds	r2, #1
 800fb84:	701a      	strb	r2, [r3, #0]
 800fb86:	e60e      	b.n	800f7a6 <_dtoa_r+0x696>
 800fb88:	2a00      	cmp	r2, #0
 800fb8a:	dd07      	ble.n	800fb9c <_dtoa_r+0xa8c>
 800fb8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fb90:	d0ed      	beq.n	800fb6e <_dtoa_r+0xa5e>
 800fb92:	9a02      	ldr	r2, [sp, #8]
 800fb94:	f108 0301 	add.w	r3, r8, #1
 800fb98:	7013      	strb	r3, [r2, #0]
 800fb9a:	e604      	b.n	800f7a6 <_dtoa_r+0x696>
 800fb9c:	9b07      	ldr	r3, [sp, #28]
 800fb9e:	9a07      	ldr	r2, [sp, #28]
 800fba0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fba4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d028      	beq.n	800fbfc <_dtoa_r+0xaec>
 800fbaa:	4649      	mov	r1, r9
 800fbac:	2300      	movs	r3, #0
 800fbae:	220a      	movs	r2, #10
 800fbb0:	4658      	mov	r0, fp
 800fbb2:	f000 f91f 	bl	800fdf4 <__multadd>
 800fbb6:	42af      	cmp	r7, r5
 800fbb8:	4681      	mov	r9, r0
 800fbba:	f04f 0300 	mov.w	r3, #0
 800fbbe:	f04f 020a 	mov.w	r2, #10
 800fbc2:	4639      	mov	r1, r7
 800fbc4:	4658      	mov	r0, fp
 800fbc6:	d107      	bne.n	800fbd8 <_dtoa_r+0xac8>
 800fbc8:	f000 f914 	bl	800fdf4 <__multadd>
 800fbcc:	4607      	mov	r7, r0
 800fbce:	4605      	mov	r5, r0
 800fbd0:	9b07      	ldr	r3, [sp, #28]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	9307      	str	r3, [sp, #28]
 800fbd6:	e774      	b.n	800fac2 <_dtoa_r+0x9b2>
 800fbd8:	f000 f90c 	bl	800fdf4 <__multadd>
 800fbdc:	4629      	mov	r1, r5
 800fbde:	4607      	mov	r7, r0
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	220a      	movs	r2, #10
 800fbe4:	4658      	mov	r0, fp
 800fbe6:	f000 f905 	bl	800fdf4 <__multadd>
 800fbea:	4605      	mov	r5, r0
 800fbec:	e7f0      	b.n	800fbd0 <_dtoa_r+0xac0>
 800fbee:	9b08      	ldr	r3, [sp, #32]
 800fbf0:	2700      	movs	r7, #0
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	bfcc      	ite	gt
 800fbf6:	461e      	movgt	r6, r3
 800fbf8:	2601      	movle	r6, #1
 800fbfa:	4456      	add	r6, sl
 800fbfc:	4649      	mov	r1, r9
 800fbfe:	2201      	movs	r2, #1
 800fc00:	4658      	mov	r0, fp
 800fc02:	f000 faa1 	bl	8010148 <__lshift>
 800fc06:	4621      	mov	r1, r4
 800fc08:	4681      	mov	r9, r0
 800fc0a:	f000 fb09 	bl	8010220 <__mcmp>
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	dcb0      	bgt.n	800fb74 <_dtoa_r+0xa64>
 800fc12:	d102      	bne.n	800fc1a <_dtoa_r+0xb0a>
 800fc14:	f018 0f01 	tst.w	r8, #1
 800fc18:	d1ac      	bne.n	800fb74 <_dtoa_r+0xa64>
 800fc1a:	4633      	mov	r3, r6
 800fc1c:	461e      	mov	r6, r3
 800fc1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc22:	2a30      	cmp	r2, #48	@ 0x30
 800fc24:	d0fa      	beq.n	800fc1c <_dtoa_r+0xb0c>
 800fc26:	e5be      	b.n	800f7a6 <_dtoa_r+0x696>
 800fc28:	459a      	cmp	sl, r3
 800fc2a:	d1a4      	bne.n	800fb76 <_dtoa_r+0xa66>
 800fc2c:	9b04      	ldr	r3, [sp, #16]
 800fc2e:	3301      	adds	r3, #1
 800fc30:	9304      	str	r3, [sp, #16]
 800fc32:	2331      	movs	r3, #49	@ 0x31
 800fc34:	f88a 3000 	strb.w	r3, [sl]
 800fc38:	e5b5      	b.n	800f7a6 <_dtoa_r+0x696>
 800fc3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800fc3c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fc9c <_dtoa_r+0xb8c>
 800fc40:	b11b      	cbz	r3, 800fc4a <_dtoa_r+0xb3a>
 800fc42:	f10a 0308 	add.w	r3, sl, #8
 800fc46:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800fc48:	6013      	str	r3, [r2, #0]
 800fc4a:	4650      	mov	r0, sl
 800fc4c:	b017      	add	sp, #92	@ 0x5c
 800fc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800fc54:	2b01      	cmp	r3, #1
 800fc56:	f77f ae3d 	ble.w	800f8d4 <_dtoa_r+0x7c4>
 800fc5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc5c:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc5e:	2001      	movs	r0, #1
 800fc60:	e65b      	b.n	800f91a <_dtoa_r+0x80a>
 800fc62:	9b08      	ldr	r3, [sp, #32]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f77f aed6 	ble.w	800fa16 <_dtoa_r+0x906>
 800fc6a:	4656      	mov	r6, sl
 800fc6c:	4621      	mov	r1, r4
 800fc6e:	4648      	mov	r0, r9
 800fc70:	f7ff f9c5 	bl	800effe <quorem>
 800fc74:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fc78:	9b08      	ldr	r3, [sp, #32]
 800fc7a:	f806 8b01 	strb.w	r8, [r6], #1
 800fc7e:	eba6 020a 	sub.w	r2, r6, sl
 800fc82:	4293      	cmp	r3, r2
 800fc84:	ddb3      	ble.n	800fbee <_dtoa_r+0xade>
 800fc86:	4649      	mov	r1, r9
 800fc88:	2300      	movs	r3, #0
 800fc8a:	220a      	movs	r2, #10
 800fc8c:	4658      	mov	r0, fp
 800fc8e:	f000 f8b1 	bl	800fdf4 <__multadd>
 800fc92:	4681      	mov	r9, r0
 800fc94:	e7ea      	b.n	800fc6c <_dtoa_r+0xb5c>
 800fc96:	bf00      	nop
 800fc98:	08011ff2 	.word	0x08011ff2
 800fc9c:	08011f76 	.word	0x08011f76

0800fca0 <_free_r>:
 800fca0:	b538      	push	{r3, r4, r5, lr}
 800fca2:	4605      	mov	r5, r0
 800fca4:	2900      	cmp	r1, #0
 800fca6:	d040      	beq.n	800fd2a <_free_r+0x8a>
 800fca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcac:	1f0c      	subs	r4, r1, #4
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	bfb8      	it	lt
 800fcb2:	18e4      	addlt	r4, r4, r3
 800fcb4:	f7fe fb64 	bl	800e380 <__malloc_lock>
 800fcb8:	4a1c      	ldr	r2, [pc, #112]	@ (800fd2c <_free_r+0x8c>)
 800fcba:	6813      	ldr	r3, [r2, #0]
 800fcbc:	b933      	cbnz	r3, 800fccc <_free_r+0x2c>
 800fcbe:	6063      	str	r3, [r4, #4]
 800fcc0:	6014      	str	r4, [r2, #0]
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcc8:	f7fe bb60 	b.w	800e38c <__malloc_unlock>
 800fccc:	42a3      	cmp	r3, r4
 800fcce:	d908      	bls.n	800fce2 <_free_r+0x42>
 800fcd0:	6820      	ldr	r0, [r4, #0]
 800fcd2:	1821      	adds	r1, r4, r0
 800fcd4:	428b      	cmp	r3, r1
 800fcd6:	bf01      	itttt	eq
 800fcd8:	6819      	ldreq	r1, [r3, #0]
 800fcda:	685b      	ldreq	r3, [r3, #4]
 800fcdc:	1809      	addeq	r1, r1, r0
 800fcde:	6021      	streq	r1, [r4, #0]
 800fce0:	e7ed      	b.n	800fcbe <_free_r+0x1e>
 800fce2:	461a      	mov	r2, r3
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	b10b      	cbz	r3, 800fcec <_free_r+0x4c>
 800fce8:	42a3      	cmp	r3, r4
 800fcea:	d9fa      	bls.n	800fce2 <_free_r+0x42>
 800fcec:	6811      	ldr	r1, [r2, #0]
 800fcee:	1850      	adds	r0, r2, r1
 800fcf0:	42a0      	cmp	r0, r4
 800fcf2:	d10b      	bne.n	800fd0c <_free_r+0x6c>
 800fcf4:	6820      	ldr	r0, [r4, #0]
 800fcf6:	4401      	add	r1, r0
 800fcf8:	1850      	adds	r0, r2, r1
 800fcfa:	4283      	cmp	r3, r0
 800fcfc:	6011      	str	r1, [r2, #0]
 800fcfe:	d1e0      	bne.n	800fcc2 <_free_r+0x22>
 800fd00:	6818      	ldr	r0, [r3, #0]
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	4408      	add	r0, r1
 800fd06:	6010      	str	r0, [r2, #0]
 800fd08:	6053      	str	r3, [r2, #4]
 800fd0a:	e7da      	b.n	800fcc2 <_free_r+0x22>
 800fd0c:	d902      	bls.n	800fd14 <_free_r+0x74>
 800fd0e:	230c      	movs	r3, #12
 800fd10:	602b      	str	r3, [r5, #0]
 800fd12:	e7d6      	b.n	800fcc2 <_free_r+0x22>
 800fd14:	6820      	ldr	r0, [r4, #0]
 800fd16:	1821      	adds	r1, r4, r0
 800fd18:	428b      	cmp	r3, r1
 800fd1a:	bf01      	itttt	eq
 800fd1c:	6819      	ldreq	r1, [r3, #0]
 800fd1e:	685b      	ldreq	r3, [r3, #4]
 800fd20:	1809      	addeq	r1, r1, r0
 800fd22:	6021      	streq	r1, [r4, #0]
 800fd24:	6063      	str	r3, [r4, #4]
 800fd26:	6054      	str	r4, [r2, #4]
 800fd28:	e7cb      	b.n	800fcc2 <_free_r+0x22>
 800fd2a:	bd38      	pop	{r3, r4, r5, pc}
 800fd2c:	200029dc 	.word	0x200029dc

0800fd30 <_Balloc>:
 800fd30:	b570      	push	{r4, r5, r6, lr}
 800fd32:	69c6      	ldr	r6, [r0, #28]
 800fd34:	4604      	mov	r4, r0
 800fd36:	460d      	mov	r5, r1
 800fd38:	b976      	cbnz	r6, 800fd58 <_Balloc+0x28>
 800fd3a:	2010      	movs	r0, #16
 800fd3c:	f7fe fa76 	bl	800e22c <malloc>
 800fd40:	4602      	mov	r2, r0
 800fd42:	61e0      	str	r0, [r4, #28]
 800fd44:	b920      	cbnz	r0, 800fd50 <_Balloc+0x20>
 800fd46:	216b      	movs	r1, #107	@ 0x6b
 800fd48:	4b17      	ldr	r3, [pc, #92]	@ (800fda8 <_Balloc+0x78>)
 800fd4a:	4818      	ldr	r0, [pc, #96]	@ (800fdac <_Balloc+0x7c>)
 800fd4c:	f000 fd98 	bl	8010880 <__assert_func>
 800fd50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd54:	6006      	str	r6, [r0, #0]
 800fd56:	60c6      	str	r6, [r0, #12]
 800fd58:	69e6      	ldr	r6, [r4, #28]
 800fd5a:	68f3      	ldr	r3, [r6, #12]
 800fd5c:	b183      	cbz	r3, 800fd80 <_Balloc+0x50>
 800fd5e:	69e3      	ldr	r3, [r4, #28]
 800fd60:	68db      	ldr	r3, [r3, #12]
 800fd62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd66:	b9b8      	cbnz	r0, 800fd98 <_Balloc+0x68>
 800fd68:	2101      	movs	r1, #1
 800fd6a:	fa01 f605 	lsl.w	r6, r1, r5
 800fd6e:	1d72      	adds	r2, r6, #5
 800fd70:	4620      	mov	r0, r4
 800fd72:	0092      	lsls	r2, r2, #2
 800fd74:	f000 fda2 	bl	80108bc <_calloc_r>
 800fd78:	b160      	cbz	r0, 800fd94 <_Balloc+0x64>
 800fd7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fd7e:	e00e      	b.n	800fd9e <_Balloc+0x6e>
 800fd80:	2221      	movs	r2, #33	@ 0x21
 800fd82:	2104      	movs	r1, #4
 800fd84:	4620      	mov	r0, r4
 800fd86:	f000 fd99 	bl	80108bc <_calloc_r>
 800fd8a:	69e3      	ldr	r3, [r4, #28]
 800fd8c:	60f0      	str	r0, [r6, #12]
 800fd8e:	68db      	ldr	r3, [r3, #12]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d1e4      	bne.n	800fd5e <_Balloc+0x2e>
 800fd94:	2000      	movs	r0, #0
 800fd96:	bd70      	pop	{r4, r5, r6, pc}
 800fd98:	6802      	ldr	r2, [r0, #0]
 800fd9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd9e:	2300      	movs	r3, #0
 800fda0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fda4:	e7f7      	b.n	800fd96 <_Balloc+0x66>
 800fda6:	bf00      	nop
 800fda8:	08011f83 	.word	0x08011f83
 800fdac:	08012003 	.word	0x08012003

0800fdb0 <_Bfree>:
 800fdb0:	b570      	push	{r4, r5, r6, lr}
 800fdb2:	69c6      	ldr	r6, [r0, #28]
 800fdb4:	4605      	mov	r5, r0
 800fdb6:	460c      	mov	r4, r1
 800fdb8:	b976      	cbnz	r6, 800fdd8 <_Bfree+0x28>
 800fdba:	2010      	movs	r0, #16
 800fdbc:	f7fe fa36 	bl	800e22c <malloc>
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	61e8      	str	r0, [r5, #28]
 800fdc4:	b920      	cbnz	r0, 800fdd0 <_Bfree+0x20>
 800fdc6:	218f      	movs	r1, #143	@ 0x8f
 800fdc8:	4b08      	ldr	r3, [pc, #32]	@ (800fdec <_Bfree+0x3c>)
 800fdca:	4809      	ldr	r0, [pc, #36]	@ (800fdf0 <_Bfree+0x40>)
 800fdcc:	f000 fd58 	bl	8010880 <__assert_func>
 800fdd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdd4:	6006      	str	r6, [r0, #0]
 800fdd6:	60c6      	str	r6, [r0, #12]
 800fdd8:	b13c      	cbz	r4, 800fdea <_Bfree+0x3a>
 800fdda:	69eb      	ldr	r3, [r5, #28]
 800fddc:	6862      	ldr	r2, [r4, #4]
 800fdde:	68db      	ldr	r3, [r3, #12]
 800fde0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fde4:	6021      	str	r1, [r4, #0]
 800fde6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fdea:	bd70      	pop	{r4, r5, r6, pc}
 800fdec:	08011f83 	.word	0x08011f83
 800fdf0:	08012003 	.word	0x08012003

0800fdf4 <__multadd>:
 800fdf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf8:	4607      	mov	r7, r0
 800fdfa:	460c      	mov	r4, r1
 800fdfc:	461e      	mov	r6, r3
 800fdfe:	2000      	movs	r0, #0
 800fe00:	690d      	ldr	r5, [r1, #16]
 800fe02:	f101 0c14 	add.w	ip, r1, #20
 800fe06:	f8dc 3000 	ldr.w	r3, [ip]
 800fe0a:	3001      	adds	r0, #1
 800fe0c:	b299      	uxth	r1, r3
 800fe0e:	fb02 6101 	mla	r1, r2, r1, r6
 800fe12:	0c1e      	lsrs	r6, r3, #16
 800fe14:	0c0b      	lsrs	r3, r1, #16
 800fe16:	fb02 3306 	mla	r3, r2, r6, r3
 800fe1a:	b289      	uxth	r1, r1
 800fe1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fe20:	4285      	cmp	r5, r0
 800fe22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe26:	f84c 1b04 	str.w	r1, [ip], #4
 800fe2a:	dcec      	bgt.n	800fe06 <__multadd+0x12>
 800fe2c:	b30e      	cbz	r6, 800fe72 <__multadd+0x7e>
 800fe2e:	68a3      	ldr	r3, [r4, #8]
 800fe30:	42ab      	cmp	r3, r5
 800fe32:	dc19      	bgt.n	800fe68 <__multadd+0x74>
 800fe34:	6861      	ldr	r1, [r4, #4]
 800fe36:	4638      	mov	r0, r7
 800fe38:	3101      	adds	r1, #1
 800fe3a:	f7ff ff79 	bl	800fd30 <_Balloc>
 800fe3e:	4680      	mov	r8, r0
 800fe40:	b928      	cbnz	r0, 800fe4e <__multadd+0x5a>
 800fe42:	4602      	mov	r2, r0
 800fe44:	21ba      	movs	r1, #186	@ 0xba
 800fe46:	4b0c      	ldr	r3, [pc, #48]	@ (800fe78 <__multadd+0x84>)
 800fe48:	480c      	ldr	r0, [pc, #48]	@ (800fe7c <__multadd+0x88>)
 800fe4a:	f000 fd19 	bl	8010880 <__assert_func>
 800fe4e:	6922      	ldr	r2, [r4, #16]
 800fe50:	f104 010c 	add.w	r1, r4, #12
 800fe54:	3202      	adds	r2, #2
 800fe56:	0092      	lsls	r2, r2, #2
 800fe58:	300c      	adds	r0, #12
 800fe5a:	f000 fd03 	bl	8010864 <memcpy>
 800fe5e:	4621      	mov	r1, r4
 800fe60:	4638      	mov	r0, r7
 800fe62:	f7ff ffa5 	bl	800fdb0 <_Bfree>
 800fe66:	4644      	mov	r4, r8
 800fe68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe6c:	3501      	adds	r5, #1
 800fe6e:	615e      	str	r6, [r3, #20]
 800fe70:	6125      	str	r5, [r4, #16]
 800fe72:	4620      	mov	r0, r4
 800fe74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe78:	08011ff2 	.word	0x08011ff2
 800fe7c:	08012003 	.word	0x08012003

0800fe80 <__hi0bits>:
 800fe80:	4603      	mov	r3, r0
 800fe82:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fe86:	bf3a      	itte	cc
 800fe88:	0403      	lslcc	r3, r0, #16
 800fe8a:	2010      	movcc	r0, #16
 800fe8c:	2000      	movcs	r0, #0
 800fe8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fe92:	bf3c      	itt	cc
 800fe94:	021b      	lslcc	r3, r3, #8
 800fe96:	3008      	addcc	r0, #8
 800fe98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe9c:	bf3c      	itt	cc
 800fe9e:	011b      	lslcc	r3, r3, #4
 800fea0:	3004      	addcc	r0, #4
 800fea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fea6:	bf3c      	itt	cc
 800fea8:	009b      	lslcc	r3, r3, #2
 800feaa:	3002      	addcc	r0, #2
 800feac:	2b00      	cmp	r3, #0
 800feae:	db05      	blt.n	800febc <__hi0bits+0x3c>
 800feb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800feb4:	f100 0001 	add.w	r0, r0, #1
 800feb8:	bf08      	it	eq
 800feba:	2020      	moveq	r0, #32
 800febc:	4770      	bx	lr

0800febe <__lo0bits>:
 800febe:	6803      	ldr	r3, [r0, #0]
 800fec0:	4602      	mov	r2, r0
 800fec2:	f013 0007 	ands.w	r0, r3, #7
 800fec6:	d00b      	beq.n	800fee0 <__lo0bits+0x22>
 800fec8:	07d9      	lsls	r1, r3, #31
 800feca:	d421      	bmi.n	800ff10 <__lo0bits+0x52>
 800fecc:	0798      	lsls	r0, r3, #30
 800fece:	bf49      	itett	mi
 800fed0:	085b      	lsrmi	r3, r3, #1
 800fed2:	089b      	lsrpl	r3, r3, #2
 800fed4:	2001      	movmi	r0, #1
 800fed6:	6013      	strmi	r3, [r2, #0]
 800fed8:	bf5c      	itt	pl
 800feda:	2002      	movpl	r0, #2
 800fedc:	6013      	strpl	r3, [r2, #0]
 800fede:	4770      	bx	lr
 800fee0:	b299      	uxth	r1, r3
 800fee2:	b909      	cbnz	r1, 800fee8 <__lo0bits+0x2a>
 800fee4:	2010      	movs	r0, #16
 800fee6:	0c1b      	lsrs	r3, r3, #16
 800fee8:	b2d9      	uxtb	r1, r3
 800feea:	b909      	cbnz	r1, 800fef0 <__lo0bits+0x32>
 800feec:	3008      	adds	r0, #8
 800feee:	0a1b      	lsrs	r3, r3, #8
 800fef0:	0719      	lsls	r1, r3, #28
 800fef2:	bf04      	itt	eq
 800fef4:	091b      	lsreq	r3, r3, #4
 800fef6:	3004      	addeq	r0, #4
 800fef8:	0799      	lsls	r1, r3, #30
 800fefa:	bf04      	itt	eq
 800fefc:	089b      	lsreq	r3, r3, #2
 800fefe:	3002      	addeq	r0, #2
 800ff00:	07d9      	lsls	r1, r3, #31
 800ff02:	d403      	bmi.n	800ff0c <__lo0bits+0x4e>
 800ff04:	085b      	lsrs	r3, r3, #1
 800ff06:	f100 0001 	add.w	r0, r0, #1
 800ff0a:	d003      	beq.n	800ff14 <__lo0bits+0x56>
 800ff0c:	6013      	str	r3, [r2, #0]
 800ff0e:	4770      	bx	lr
 800ff10:	2000      	movs	r0, #0
 800ff12:	4770      	bx	lr
 800ff14:	2020      	movs	r0, #32
 800ff16:	4770      	bx	lr

0800ff18 <__i2b>:
 800ff18:	b510      	push	{r4, lr}
 800ff1a:	460c      	mov	r4, r1
 800ff1c:	2101      	movs	r1, #1
 800ff1e:	f7ff ff07 	bl	800fd30 <_Balloc>
 800ff22:	4602      	mov	r2, r0
 800ff24:	b928      	cbnz	r0, 800ff32 <__i2b+0x1a>
 800ff26:	f240 1145 	movw	r1, #325	@ 0x145
 800ff2a:	4b04      	ldr	r3, [pc, #16]	@ (800ff3c <__i2b+0x24>)
 800ff2c:	4804      	ldr	r0, [pc, #16]	@ (800ff40 <__i2b+0x28>)
 800ff2e:	f000 fca7 	bl	8010880 <__assert_func>
 800ff32:	2301      	movs	r3, #1
 800ff34:	6144      	str	r4, [r0, #20]
 800ff36:	6103      	str	r3, [r0, #16]
 800ff38:	bd10      	pop	{r4, pc}
 800ff3a:	bf00      	nop
 800ff3c:	08011ff2 	.word	0x08011ff2
 800ff40:	08012003 	.word	0x08012003

0800ff44 <__multiply>:
 800ff44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff48:	4614      	mov	r4, r2
 800ff4a:	690a      	ldr	r2, [r1, #16]
 800ff4c:	6923      	ldr	r3, [r4, #16]
 800ff4e:	460f      	mov	r7, r1
 800ff50:	429a      	cmp	r2, r3
 800ff52:	bfa2      	ittt	ge
 800ff54:	4623      	movge	r3, r4
 800ff56:	460c      	movge	r4, r1
 800ff58:	461f      	movge	r7, r3
 800ff5a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ff5e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ff62:	68a3      	ldr	r3, [r4, #8]
 800ff64:	6861      	ldr	r1, [r4, #4]
 800ff66:	eb0a 0609 	add.w	r6, sl, r9
 800ff6a:	42b3      	cmp	r3, r6
 800ff6c:	b085      	sub	sp, #20
 800ff6e:	bfb8      	it	lt
 800ff70:	3101      	addlt	r1, #1
 800ff72:	f7ff fedd 	bl	800fd30 <_Balloc>
 800ff76:	b930      	cbnz	r0, 800ff86 <__multiply+0x42>
 800ff78:	4602      	mov	r2, r0
 800ff7a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ff7e:	4b43      	ldr	r3, [pc, #268]	@ (801008c <__multiply+0x148>)
 800ff80:	4843      	ldr	r0, [pc, #268]	@ (8010090 <__multiply+0x14c>)
 800ff82:	f000 fc7d 	bl	8010880 <__assert_func>
 800ff86:	f100 0514 	add.w	r5, r0, #20
 800ff8a:	462b      	mov	r3, r5
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ff92:	4543      	cmp	r3, r8
 800ff94:	d321      	bcc.n	800ffda <__multiply+0x96>
 800ff96:	f107 0114 	add.w	r1, r7, #20
 800ff9a:	f104 0214 	add.w	r2, r4, #20
 800ff9e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ffa2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ffa6:	9302      	str	r3, [sp, #8]
 800ffa8:	1b13      	subs	r3, r2, r4
 800ffaa:	3b15      	subs	r3, #21
 800ffac:	f023 0303 	bic.w	r3, r3, #3
 800ffb0:	3304      	adds	r3, #4
 800ffb2:	f104 0715 	add.w	r7, r4, #21
 800ffb6:	42ba      	cmp	r2, r7
 800ffb8:	bf38      	it	cc
 800ffba:	2304      	movcc	r3, #4
 800ffbc:	9301      	str	r3, [sp, #4]
 800ffbe:	9b02      	ldr	r3, [sp, #8]
 800ffc0:	9103      	str	r1, [sp, #12]
 800ffc2:	428b      	cmp	r3, r1
 800ffc4:	d80c      	bhi.n	800ffe0 <__multiply+0x9c>
 800ffc6:	2e00      	cmp	r6, #0
 800ffc8:	dd03      	ble.n	800ffd2 <__multiply+0x8e>
 800ffca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d05a      	beq.n	8010088 <__multiply+0x144>
 800ffd2:	6106      	str	r6, [r0, #16]
 800ffd4:	b005      	add	sp, #20
 800ffd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffda:	f843 2b04 	str.w	r2, [r3], #4
 800ffde:	e7d8      	b.n	800ff92 <__multiply+0x4e>
 800ffe0:	f8b1 a000 	ldrh.w	sl, [r1]
 800ffe4:	f1ba 0f00 	cmp.w	sl, #0
 800ffe8:	d023      	beq.n	8010032 <__multiply+0xee>
 800ffea:	46a9      	mov	r9, r5
 800ffec:	f04f 0c00 	mov.w	ip, #0
 800fff0:	f104 0e14 	add.w	lr, r4, #20
 800fff4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fff8:	f8d9 3000 	ldr.w	r3, [r9]
 800fffc:	fa1f fb87 	uxth.w	fp, r7
 8010000:	b29b      	uxth	r3, r3
 8010002:	fb0a 330b 	mla	r3, sl, fp, r3
 8010006:	4463      	add	r3, ip
 8010008:	f8d9 c000 	ldr.w	ip, [r9]
 801000c:	0c3f      	lsrs	r7, r7, #16
 801000e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8010012:	fb0a c707 	mla	r7, sl, r7, ip
 8010016:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801001a:	b29b      	uxth	r3, r3
 801001c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010020:	4572      	cmp	r2, lr
 8010022:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010026:	f849 3b04 	str.w	r3, [r9], #4
 801002a:	d8e3      	bhi.n	800fff4 <__multiply+0xb0>
 801002c:	9b01      	ldr	r3, [sp, #4]
 801002e:	f845 c003 	str.w	ip, [r5, r3]
 8010032:	9b03      	ldr	r3, [sp, #12]
 8010034:	3104      	adds	r1, #4
 8010036:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801003a:	f1b9 0f00 	cmp.w	r9, #0
 801003e:	d021      	beq.n	8010084 <__multiply+0x140>
 8010040:	46ae      	mov	lr, r5
 8010042:	f04f 0a00 	mov.w	sl, #0
 8010046:	682b      	ldr	r3, [r5, #0]
 8010048:	f104 0c14 	add.w	ip, r4, #20
 801004c:	f8bc b000 	ldrh.w	fp, [ip]
 8010050:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010054:	b29b      	uxth	r3, r3
 8010056:	fb09 770b 	mla	r7, r9, fp, r7
 801005a:	4457      	add	r7, sl
 801005c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010060:	f84e 3b04 	str.w	r3, [lr], #4
 8010064:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010068:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801006c:	f8be 3000 	ldrh.w	r3, [lr]
 8010070:	4562      	cmp	r2, ip
 8010072:	fb09 330a 	mla	r3, r9, sl, r3
 8010076:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801007a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801007e:	d8e5      	bhi.n	801004c <__multiply+0x108>
 8010080:	9f01      	ldr	r7, [sp, #4]
 8010082:	51eb      	str	r3, [r5, r7]
 8010084:	3504      	adds	r5, #4
 8010086:	e79a      	b.n	800ffbe <__multiply+0x7a>
 8010088:	3e01      	subs	r6, #1
 801008a:	e79c      	b.n	800ffc6 <__multiply+0x82>
 801008c:	08011ff2 	.word	0x08011ff2
 8010090:	08012003 	.word	0x08012003

08010094 <__pow5mult>:
 8010094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010098:	4615      	mov	r5, r2
 801009a:	f012 0203 	ands.w	r2, r2, #3
 801009e:	4607      	mov	r7, r0
 80100a0:	460e      	mov	r6, r1
 80100a2:	d007      	beq.n	80100b4 <__pow5mult+0x20>
 80100a4:	4c25      	ldr	r4, [pc, #148]	@ (801013c <__pow5mult+0xa8>)
 80100a6:	3a01      	subs	r2, #1
 80100a8:	2300      	movs	r3, #0
 80100aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80100ae:	f7ff fea1 	bl	800fdf4 <__multadd>
 80100b2:	4606      	mov	r6, r0
 80100b4:	10ad      	asrs	r5, r5, #2
 80100b6:	d03d      	beq.n	8010134 <__pow5mult+0xa0>
 80100b8:	69fc      	ldr	r4, [r7, #28]
 80100ba:	b97c      	cbnz	r4, 80100dc <__pow5mult+0x48>
 80100bc:	2010      	movs	r0, #16
 80100be:	f7fe f8b5 	bl	800e22c <malloc>
 80100c2:	4602      	mov	r2, r0
 80100c4:	61f8      	str	r0, [r7, #28]
 80100c6:	b928      	cbnz	r0, 80100d4 <__pow5mult+0x40>
 80100c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80100cc:	4b1c      	ldr	r3, [pc, #112]	@ (8010140 <__pow5mult+0xac>)
 80100ce:	481d      	ldr	r0, [pc, #116]	@ (8010144 <__pow5mult+0xb0>)
 80100d0:	f000 fbd6 	bl	8010880 <__assert_func>
 80100d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80100d8:	6004      	str	r4, [r0, #0]
 80100da:	60c4      	str	r4, [r0, #12]
 80100dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80100e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80100e4:	b94c      	cbnz	r4, 80100fa <__pow5mult+0x66>
 80100e6:	f240 2171 	movw	r1, #625	@ 0x271
 80100ea:	4638      	mov	r0, r7
 80100ec:	f7ff ff14 	bl	800ff18 <__i2b>
 80100f0:	2300      	movs	r3, #0
 80100f2:	4604      	mov	r4, r0
 80100f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80100f8:	6003      	str	r3, [r0, #0]
 80100fa:	f04f 0900 	mov.w	r9, #0
 80100fe:	07eb      	lsls	r3, r5, #31
 8010100:	d50a      	bpl.n	8010118 <__pow5mult+0x84>
 8010102:	4631      	mov	r1, r6
 8010104:	4622      	mov	r2, r4
 8010106:	4638      	mov	r0, r7
 8010108:	f7ff ff1c 	bl	800ff44 <__multiply>
 801010c:	4680      	mov	r8, r0
 801010e:	4631      	mov	r1, r6
 8010110:	4638      	mov	r0, r7
 8010112:	f7ff fe4d 	bl	800fdb0 <_Bfree>
 8010116:	4646      	mov	r6, r8
 8010118:	106d      	asrs	r5, r5, #1
 801011a:	d00b      	beq.n	8010134 <__pow5mult+0xa0>
 801011c:	6820      	ldr	r0, [r4, #0]
 801011e:	b938      	cbnz	r0, 8010130 <__pow5mult+0x9c>
 8010120:	4622      	mov	r2, r4
 8010122:	4621      	mov	r1, r4
 8010124:	4638      	mov	r0, r7
 8010126:	f7ff ff0d 	bl	800ff44 <__multiply>
 801012a:	6020      	str	r0, [r4, #0]
 801012c:	f8c0 9000 	str.w	r9, [r0]
 8010130:	4604      	mov	r4, r0
 8010132:	e7e4      	b.n	80100fe <__pow5mult+0x6a>
 8010134:	4630      	mov	r0, r6
 8010136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801013a:	bf00      	nop
 801013c:	0801205c 	.word	0x0801205c
 8010140:	08011f83 	.word	0x08011f83
 8010144:	08012003 	.word	0x08012003

08010148 <__lshift>:
 8010148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801014c:	460c      	mov	r4, r1
 801014e:	4607      	mov	r7, r0
 8010150:	4691      	mov	r9, r2
 8010152:	6923      	ldr	r3, [r4, #16]
 8010154:	6849      	ldr	r1, [r1, #4]
 8010156:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801015a:	68a3      	ldr	r3, [r4, #8]
 801015c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010160:	f108 0601 	add.w	r6, r8, #1
 8010164:	42b3      	cmp	r3, r6
 8010166:	db0b      	blt.n	8010180 <__lshift+0x38>
 8010168:	4638      	mov	r0, r7
 801016a:	f7ff fde1 	bl	800fd30 <_Balloc>
 801016e:	4605      	mov	r5, r0
 8010170:	b948      	cbnz	r0, 8010186 <__lshift+0x3e>
 8010172:	4602      	mov	r2, r0
 8010174:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010178:	4b27      	ldr	r3, [pc, #156]	@ (8010218 <__lshift+0xd0>)
 801017a:	4828      	ldr	r0, [pc, #160]	@ (801021c <__lshift+0xd4>)
 801017c:	f000 fb80 	bl	8010880 <__assert_func>
 8010180:	3101      	adds	r1, #1
 8010182:	005b      	lsls	r3, r3, #1
 8010184:	e7ee      	b.n	8010164 <__lshift+0x1c>
 8010186:	2300      	movs	r3, #0
 8010188:	f100 0114 	add.w	r1, r0, #20
 801018c:	f100 0210 	add.w	r2, r0, #16
 8010190:	4618      	mov	r0, r3
 8010192:	4553      	cmp	r3, sl
 8010194:	db33      	blt.n	80101fe <__lshift+0xb6>
 8010196:	6920      	ldr	r0, [r4, #16]
 8010198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801019c:	f104 0314 	add.w	r3, r4, #20
 80101a0:	f019 091f 	ands.w	r9, r9, #31
 80101a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80101a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80101ac:	d02b      	beq.n	8010206 <__lshift+0xbe>
 80101ae:	468a      	mov	sl, r1
 80101b0:	2200      	movs	r2, #0
 80101b2:	f1c9 0e20 	rsb	lr, r9, #32
 80101b6:	6818      	ldr	r0, [r3, #0]
 80101b8:	fa00 f009 	lsl.w	r0, r0, r9
 80101bc:	4310      	orrs	r0, r2
 80101be:	f84a 0b04 	str.w	r0, [sl], #4
 80101c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80101c6:	459c      	cmp	ip, r3
 80101c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80101cc:	d8f3      	bhi.n	80101b6 <__lshift+0x6e>
 80101ce:	ebac 0304 	sub.w	r3, ip, r4
 80101d2:	3b15      	subs	r3, #21
 80101d4:	f023 0303 	bic.w	r3, r3, #3
 80101d8:	3304      	adds	r3, #4
 80101da:	f104 0015 	add.w	r0, r4, #21
 80101de:	4584      	cmp	ip, r0
 80101e0:	bf38      	it	cc
 80101e2:	2304      	movcc	r3, #4
 80101e4:	50ca      	str	r2, [r1, r3]
 80101e6:	b10a      	cbz	r2, 80101ec <__lshift+0xa4>
 80101e8:	f108 0602 	add.w	r6, r8, #2
 80101ec:	3e01      	subs	r6, #1
 80101ee:	4638      	mov	r0, r7
 80101f0:	4621      	mov	r1, r4
 80101f2:	612e      	str	r6, [r5, #16]
 80101f4:	f7ff fddc 	bl	800fdb0 <_Bfree>
 80101f8:	4628      	mov	r0, r5
 80101fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8010202:	3301      	adds	r3, #1
 8010204:	e7c5      	b.n	8010192 <__lshift+0x4a>
 8010206:	3904      	subs	r1, #4
 8010208:	f853 2b04 	ldr.w	r2, [r3], #4
 801020c:	459c      	cmp	ip, r3
 801020e:	f841 2f04 	str.w	r2, [r1, #4]!
 8010212:	d8f9      	bhi.n	8010208 <__lshift+0xc0>
 8010214:	e7ea      	b.n	80101ec <__lshift+0xa4>
 8010216:	bf00      	nop
 8010218:	08011ff2 	.word	0x08011ff2
 801021c:	08012003 	.word	0x08012003

08010220 <__mcmp>:
 8010220:	4603      	mov	r3, r0
 8010222:	690a      	ldr	r2, [r1, #16]
 8010224:	6900      	ldr	r0, [r0, #16]
 8010226:	b530      	push	{r4, r5, lr}
 8010228:	1a80      	subs	r0, r0, r2
 801022a:	d10e      	bne.n	801024a <__mcmp+0x2a>
 801022c:	3314      	adds	r3, #20
 801022e:	3114      	adds	r1, #20
 8010230:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010234:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010238:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801023c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010240:	4295      	cmp	r5, r2
 8010242:	d003      	beq.n	801024c <__mcmp+0x2c>
 8010244:	d205      	bcs.n	8010252 <__mcmp+0x32>
 8010246:	f04f 30ff 	mov.w	r0, #4294967295
 801024a:	bd30      	pop	{r4, r5, pc}
 801024c:	42a3      	cmp	r3, r4
 801024e:	d3f3      	bcc.n	8010238 <__mcmp+0x18>
 8010250:	e7fb      	b.n	801024a <__mcmp+0x2a>
 8010252:	2001      	movs	r0, #1
 8010254:	e7f9      	b.n	801024a <__mcmp+0x2a>
	...

08010258 <__mdiff>:
 8010258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801025c:	4689      	mov	r9, r1
 801025e:	4606      	mov	r6, r0
 8010260:	4611      	mov	r1, r2
 8010262:	4648      	mov	r0, r9
 8010264:	4614      	mov	r4, r2
 8010266:	f7ff ffdb 	bl	8010220 <__mcmp>
 801026a:	1e05      	subs	r5, r0, #0
 801026c:	d112      	bne.n	8010294 <__mdiff+0x3c>
 801026e:	4629      	mov	r1, r5
 8010270:	4630      	mov	r0, r6
 8010272:	f7ff fd5d 	bl	800fd30 <_Balloc>
 8010276:	4602      	mov	r2, r0
 8010278:	b928      	cbnz	r0, 8010286 <__mdiff+0x2e>
 801027a:	f240 2137 	movw	r1, #567	@ 0x237
 801027e:	4b3e      	ldr	r3, [pc, #248]	@ (8010378 <__mdiff+0x120>)
 8010280:	483e      	ldr	r0, [pc, #248]	@ (801037c <__mdiff+0x124>)
 8010282:	f000 fafd 	bl	8010880 <__assert_func>
 8010286:	2301      	movs	r3, #1
 8010288:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801028c:	4610      	mov	r0, r2
 801028e:	b003      	add	sp, #12
 8010290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010294:	bfbc      	itt	lt
 8010296:	464b      	movlt	r3, r9
 8010298:	46a1      	movlt	r9, r4
 801029a:	4630      	mov	r0, r6
 801029c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80102a0:	bfba      	itte	lt
 80102a2:	461c      	movlt	r4, r3
 80102a4:	2501      	movlt	r5, #1
 80102a6:	2500      	movge	r5, #0
 80102a8:	f7ff fd42 	bl	800fd30 <_Balloc>
 80102ac:	4602      	mov	r2, r0
 80102ae:	b918      	cbnz	r0, 80102b8 <__mdiff+0x60>
 80102b0:	f240 2145 	movw	r1, #581	@ 0x245
 80102b4:	4b30      	ldr	r3, [pc, #192]	@ (8010378 <__mdiff+0x120>)
 80102b6:	e7e3      	b.n	8010280 <__mdiff+0x28>
 80102b8:	f100 0b14 	add.w	fp, r0, #20
 80102bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80102c0:	f109 0310 	add.w	r3, r9, #16
 80102c4:	60c5      	str	r5, [r0, #12]
 80102c6:	f04f 0c00 	mov.w	ip, #0
 80102ca:	f109 0514 	add.w	r5, r9, #20
 80102ce:	46d9      	mov	r9, fp
 80102d0:	6926      	ldr	r6, [r4, #16]
 80102d2:	f104 0e14 	add.w	lr, r4, #20
 80102d6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80102da:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80102de:	9301      	str	r3, [sp, #4]
 80102e0:	9b01      	ldr	r3, [sp, #4]
 80102e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80102e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80102ea:	b281      	uxth	r1, r0
 80102ec:	9301      	str	r3, [sp, #4]
 80102ee:	fa1f f38a 	uxth.w	r3, sl
 80102f2:	1a5b      	subs	r3, r3, r1
 80102f4:	0c00      	lsrs	r0, r0, #16
 80102f6:	4463      	add	r3, ip
 80102f8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80102fc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010300:	b29b      	uxth	r3, r3
 8010302:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010306:	4576      	cmp	r6, lr
 8010308:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801030c:	f849 3b04 	str.w	r3, [r9], #4
 8010310:	d8e6      	bhi.n	80102e0 <__mdiff+0x88>
 8010312:	1b33      	subs	r3, r6, r4
 8010314:	3b15      	subs	r3, #21
 8010316:	f023 0303 	bic.w	r3, r3, #3
 801031a:	3415      	adds	r4, #21
 801031c:	3304      	adds	r3, #4
 801031e:	42a6      	cmp	r6, r4
 8010320:	bf38      	it	cc
 8010322:	2304      	movcc	r3, #4
 8010324:	441d      	add	r5, r3
 8010326:	445b      	add	r3, fp
 8010328:	461e      	mov	r6, r3
 801032a:	462c      	mov	r4, r5
 801032c:	4544      	cmp	r4, r8
 801032e:	d30e      	bcc.n	801034e <__mdiff+0xf6>
 8010330:	f108 0103 	add.w	r1, r8, #3
 8010334:	1b49      	subs	r1, r1, r5
 8010336:	f021 0103 	bic.w	r1, r1, #3
 801033a:	3d03      	subs	r5, #3
 801033c:	45a8      	cmp	r8, r5
 801033e:	bf38      	it	cc
 8010340:	2100      	movcc	r1, #0
 8010342:	440b      	add	r3, r1
 8010344:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010348:	b199      	cbz	r1, 8010372 <__mdiff+0x11a>
 801034a:	6117      	str	r7, [r2, #16]
 801034c:	e79e      	b.n	801028c <__mdiff+0x34>
 801034e:	46e6      	mov	lr, ip
 8010350:	f854 1b04 	ldr.w	r1, [r4], #4
 8010354:	fa1f fc81 	uxth.w	ip, r1
 8010358:	44f4      	add	ip, lr
 801035a:	0c08      	lsrs	r0, r1, #16
 801035c:	4471      	add	r1, lr
 801035e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010362:	b289      	uxth	r1, r1
 8010364:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010368:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801036c:	f846 1b04 	str.w	r1, [r6], #4
 8010370:	e7dc      	b.n	801032c <__mdiff+0xd4>
 8010372:	3f01      	subs	r7, #1
 8010374:	e7e6      	b.n	8010344 <__mdiff+0xec>
 8010376:	bf00      	nop
 8010378:	08011ff2 	.word	0x08011ff2
 801037c:	08012003 	.word	0x08012003

08010380 <__d2b>:
 8010380:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8010384:	2101      	movs	r1, #1
 8010386:	4690      	mov	r8, r2
 8010388:	4699      	mov	r9, r3
 801038a:	9e08      	ldr	r6, [sp, #32]
 801038c:	f7ff fcd0 	bl	800fd30 <_Balloc>
 8010390:	4604      	mov	r4, r0
 8010392:	b930      	cbnz	r0, 80103a2 <__d2b+0x22>
 8010394:	4602      	mov	r2, r0
 8010396:	f240 310f 	movw	r1, #783	@ 0x30f
 801039a:	4b23      	ldr	r3, [pc, #140]	@ (8010428 <__d2b+0xa8>)
 801039c:	4823      	ldr	r0, [pc, #140]	@ (801042c <__d2b+0xac>)
 801039e:	f000 fa6f 	bl	8010880 <__assert_func>
 80103a2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80103a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80103aa:	b10d      	cbz	r5, 80103b0 <__d2b+0x30>
 80103ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80103b0:	9301      	str	r3, [sp, #4]
 80103b2:	f1b8 0300 	subs.w	r3, r8, #0
 80103b6:	d024      	beq.n	8010402 <__d2b+0x82>
 80103b8:	4668      	mov	r0, sp
 80103ba:	9300      	str	r3, [sp, #0]
 80103bc:	f7ff fd7f 	bl	800febe <__lo0bits>
 80103c0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80103c4:	b1d8      	cbz	r0, 80103fe <__d2b+0x7e>
 80103c6:	f1c0 0320 	rsb	r3, r0, #32
 80103ca:	fa02 f303 	lsl.w	r3, r2, r3
 80103ce:	430b      	orrs	r3, r1
 80103d0:	40c2      	lsrs	r2, r0
 80103d2:	6163      	str	r3, [r4, #20]
 80103d4:	9201      	str	r2, [sp, #4]
 80103d6:	9b01      	ldr	r3, [sp, #4]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	bf0c      	ite	eq
 80103dc:	2201      	moveq	r2, #1
 80103de:	2202      	movne	r2, #2
 80103e0:	61a3      	str	r3, [r4, #24]
 80103e2:	6122      	str	r2, [r4, #16]
 80103e4:	b1ad      	cbz	r5, 8010412 <__d2b+0x92>
 80103e6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80103ea:	4405      	add	r5, r0
 80103ec:	6035      	str	r5, [r6, #0]
 80103ee:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80103f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103f4:	6018      	str	r0, [r3, #0]
 80103f6:	4620      	mov	r0, r4
 80103f8:	b002      	add	sp, #8
 80103fa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80103fe:	6161      	str	r1, [r4, #20]
 8010400:	e7e9      	b.n	80103d6 <__d2b+0x56>
 8010402:	a801      	add	r0, sp, #4
 8010404:	f7ff fd5b 	bl	800febe <__lo0bits>
 8010408:	9b01      	ldr	r3, [sp, #4]
 801040a:	2201      	movs	r2, #1
 801040c:	6163      	str	r3, [r4, #20]
 801040e:	3020      	adds	r0, #32
 8010410:	e7e7      	b.n	80103e2 <__d2b+0x62>
 8010412:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010416:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801041a:	6030      	str	r0, [r6, #0]
 801041c:	6918      	ldr	r0, [r3, #16]
 801041e:	f7ff fd2f 	bl	800fe80 <__hi0bits>
 8010422:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010426:	e7e4      	b.n	80103f2 <__d2b+0x72>
 8010428:	08011ff2 	.word	0x08011ff2
 801042c:	08012003 	.word	0x08012003

08010430 <__ssputs_r>:
 8010430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010434:	461f      	mov	r7, r3
 8010436:	688e      	ldr	r6, [r1, #8]
 8010438:	4682      	mov	sl, r0
 801043a:	42be      	cmp	r6, r7
 801043c:	460c      	mov	r4, r1
 801043e:	4690      	mov	r8, r2
 8010440:	680b      	ldr	r3, [r1, #0]
 8010442:	d82d      	bhi.n	80104a0 <__ssputs_r+0x70>
 8010444:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010448:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801044c:	d026      	beq.n	801049c <__ssputs_r+0x6c>
 801044e:	6965      	ldr	r5, [r4, #20]
 8010450:	6909      	ldr	r1, [r1, #16]
 8010452:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010456:	eba3 0901 	sub.w	r9, r3, r1
 801045a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801045e:	1c7b      	adds	r3, r7, #1
 8010460:	444b      	add	r3, r9
 8010462:	106d      	asrs	r5, r5, #1
 8010464:	429d      	cmp	r5, r3
 8010466:	bf38      	it	cc
 8010468:	461d      	movcc	r5, r3
 801046a:	0553      	lsls	r3, r2, #21
 801046c:	d527      	bpl.n	80104be <__ssputs_r+0x8e>
 801046e:	4629      	mov	r1, r5
 8010470:	f7fd ff06 	bl	800e280 <_malloc_r>
 8010474:	4606      	mov	r6, r0
 8010476:	b360      	cbz	r0, 80104d2 <__ssputs_r+0xa2>
 8010478:	464a      	mov	r2, r9
 801047a:	6921      	ldr	r1, [r4, #16]
 801047c:	f000 f9f2 	bl	8010864 <memcpy>
 8010480:	89a3      	ldrh	r3, [r4, #12]
 8010482:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801048a:	81a3      	strh	r3, [r4, #12]
 801048c:	6126      	str	r6, [r4, #16]
 801048e:	444e      	add	r6, r9
 8010490:	6026      	str	r6, [r4, #0]
 8010492:	463e      	mov	r6, r7
 8010494:	6165      	str	r5, [r4, #20]
 8010496:	eba5 0509 	sub.w	r5, r5, r9
 801049a:	60a5      	str	r5, [r4, #8]
 801049c:	42be      	cmp	r6, r7
 801049e:	d900      	bls.n	80104a2 <__ssputs_r+0x72>
 80104a0:	463e      	mov	r6, r7
 80104a2:	4632      	mov	r2, r6
 80104a4:	4641      	mov	r1, r8
 80104a6:	6820      	ldr	r0, [r4, #0]
 80104a8:	f000 f9c2 	bl	8010830 <memmove>
 80104ac:	2000      	movs	r0, #0
 80104ae:	68a3      	ldr	r3, [r4, #8]
 80104b0:	1b9b      	subs	r3, r3, r6
 80104b2:	60a3      	str	r3, [r4, #8]
 80104b4:	6823      	ldr	r3, [r4, #0]
 80104b6:	4433      	add	r3, r6
 80104b8:	6023      	str	r3, [r4, #0]
 80104ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104be:	462a      	mov	r2, r5
 80104c0:	f000 fa22 	bl	8010908 <_realloc_r>
 80104c4:	4606      	mov	r6, r0
 80104c6:	2800      	cmp	r0, #0
 80104c8:	d1e0      	bne.n	801048c <__ssputs_r+0x5c>
 80104ca:	4650      	mov	r0, sl
 80104cc:	6921      	ldr	r1, [r4, #16]
 80104ce:	f7ff fbe7 	bl	800fca0 <_free_r>
 80104d2:	230c      	movs	r3, #12
 80104d4:	f8ca 3000 	str.w	r3, [sl]
 80104d8:	89a3      	ldrh	r3, [r4, #12]
 80104da:	f04f 30ff 	mov.w	r0, #4294967295
 80104de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104e2:	81a3      	strh	r3, [r4, #12]
 80104e4:	e7e9      	b.n	80104ba <__ssputs_r+0x8a>
	...

080104e8 <_svfiprintf_r>:
 80104e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ec:	4698      	mov	r8, r3
 80104ee:	898b      	ldrh	r3, [r1, #12]
 80104f0:	4607      	mov	r7, r0
 80104f2:	061b      	lsls	r3, r3, #24
 80104f4:	460d      	mov	r5, r1
 80104f6:	4614      	mov	r4, r2
 80104f8:	b09d      	sub	sp, #116	@ 0x74
 80104fa:	d510      	bpl.n	801051e <_svfiprintf_r+0x36>
 80104fc:	690b      	ldr	r3, [r1, #16]
 80104fe:	b973      	cbnz	r3, 801051e <_svfiprintf_r+0x36>
 8010500:	2140      	movs	r1, #64	@ 0x40
 8010502:	f7fd febd 	bl	800e280 <_malloc_r>
 8010506:	6028      	str	r0, [r5, #0]
 8010508:	6128      	str	r0, [r5, #16]
 801050a:	b930      	cbnz	r0, 801051a <_svfiprintf_r+0x32>
 801050c:	230c      	movs	r3, #12
 801050e:	603b      	str	r3, [r7, #0]
 8010510:	f04f 30ff 	mov.w	r0, #4294967295
 8010514:	b01d      	add	sp, #116	@ 0x74
 8010516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801051a:	2340      	movs	r3, #64	@ 0x40
 801051c:	616b      	str	r3, [r5, #20]
 801051e:	2300      	movs	r3, #0
 8010520:	9309      	str	r3, [sp, #36]	@ 0x24
 8010522:	2320      	movs	r3, #32
 8010524:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010528:	2330      	movs	r3, #48	@ 0x30
 801052a:	f04f 0901 	mov.w	r9, #1
 801052e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010532:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80106cc <_svfiprintf_r+0x1e4>
 8010536:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801053a:	4623      	mov	r3, r4
 801053c:	469a      	mov	sl, r3
 801053e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010542:	b10a      	cbz	r2, 8010548 <_svfiprintf_r+0x60>
 8010544:	2a25      	cmp	r2, #37	@ 0x25
 8010546:	d1f9      	bne.n	801053c <_svfiprintf_r+0x54>
 8010548:	ebba 0b04 	subs.w	fp, sl, r4
 801054c:	d00b      	beq.n	8010566 <_svfiprintf_r+0x7e>
 801054e:	465b      	mov	r3, fp
 8010550:	4622      	mov	r2, r4
 8010552:	4629      	mov	r1, r5
 8010554:	4638      	mov	r0, r7
 8010556:	f7ff ff6b 	bl	8010430 <__ssputs_r>
 801055a:	3001      	adds	r0, #1
 801055c:	f000 80a7 	beq.w	80106ae <_svfiprintf_r+0x1c6>
 8010560:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010562:	445a      	add	r2, fp
 8010564:	9209      	str	r2, [sp, #36]	@ 0x24
 8010566:	f89a 3000 	ldrb.w	r3, [sl]
 801056a:	2b00      	cmp	r3, #0
 801056c:	f000 809f 	beq.w	80106ae <_svfiprintf_r+0x1c6>
 8010570:	2300      	movs	r3, #0
 8010572:	f04f 32ff 	mov.w	r2, #4294967295
 8010576:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801057a:	f10a 0a01 	add.w	sl, sl, #1
 801057e:	9304      	str	r3, [sp, #16]
 8010580:	9307      	str	r3, [sp, #28]
 8010582:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010586:	931a      	str	r3, [sp, #104]	@ 0x68
 8010588:	4654      	mov	r4, sl
 801058a:	2205      	movs	r2, #5
 801058c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010590:	484e      	ldr	r0, [pc, #312]	@ (80106cc <_svfiprintf_r+0x1e4>)
 8010592:	f7fe fd26 	bl	800efe2 <memchr>
 8010596:	9a04      	ldr	r2, [sp, #16]
 8010598:	b9d8      	cbnz	r0, 80105d2 <_svfiprintf_r+0xea>
 801059a:	06d0      	lsls	r0, r2, #27
 801059c:	bf44      	itt	mi
 801059e:	2320      	movmi	r3, #32
 80105a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105a4:	0711      	lsls	r1, r2, #28
 80105a6:	bf44      	itt	mi
 80105a8:	232b      	movmi	r3, #43	@ 0x2b
 80105aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105ae:	f89a 3000 	ldrb.w	r3, [sl]
 80105b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80105b4:	d015      	beq.n	80105e2 <_svfiprintf_r+0xfa>
 80105b6:	4654      	mov	r4, sl
 80105b8:	2000      	movs	r0, #0
 80105ba:	f04f 0c0a 	mov.w	ip, #10
 80105be:	9a07      	ldr	r2, [sp, #28]
 80105c0:	4621      	mov	r1, r4
 80105c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105c6:	3b30      	subs	r3, #48	@ 0x30
 80105c8:	2b09      	cmp	r3, #9
 80105ca:	d94b      	bls.n	8010664 <_svfiprintf_r+0x17c>
 80105cc:	b1b0      	cbz	r0, 80105fc <_svfiprintf_r+0x114>
 80105ce:	9207      	str	r2, [sp, #28]
 80105d0:	e014      	b.n	80105fc <_svfiprintf_r+0x114>
 80105d2:	eba0 0308 	sub.w	r3, r0, r8
 80105d6:	fa09 f303 	lsl.w	r3, r9, r3
 80105da:	4313      	orrs	r3, r2
 80105dc:	46a2      	mov	sl, r4
 80105de:	9304      	str	r3, [sp, #16]
 80105e0:	e7d2      	b.n	8010588 <_svfiprintf_r+0xa0>
 80105e2:	9b03      	ldr	r3, [sp, #12]
 80105e4:	1d19      	adds	r1, r3, #4
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	9103      	str	r1, [sp, #12]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	bfbb      	ittet	lt
 80105ee:	425b      	neglt	r3, r3
 80105f0:	f042 0202 	orrlt.w	r2, r2, #2
 80105f4:	9307      	strge	r3, [sp, #28]
 80105f6:	9307      	strlt	r3, [sp, #28]
 80105f8:	bfb8      	it	lt
 80105fa:	9204      	strlt	r2, [sp, #16]
 80105fc:	7823      	ldrb	r3, [r4, #0]
 80105fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8010600:	d10a      	bne.n	8010618 <_svfiprintf_r+0x130>
 8010602:	7863      	ldrb	r3, [r4, #1]
 8010604:	2b2a      	cmp	r3, #42	@ 0x2a
 8010606:	d132      	bne.n	801066e <_svfiprintf_r+0x186>
 8010608:	9b03      	ldr	r3, [sp, #12]
 801060a:	3402      	adds	r4, #2
 801060c:	1d1a      	adds	r2, r3, #4
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	9203      	str	r2, [sp, #12]
 8010612:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010616:	9305      	str	r3, [sp, #20]
 8010618:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80106d0 <_svfiprintf_r+0x1e8>
 801061c:	2203      	movs	r2, #3
 801061e:	4650      	mov	r0, sl
 8010620:	7821      	ldrb	r1, [r4, #0]
 8010622:	f7fe fcde 	bl	800efe2 <memchr>
 8010626:	b138      	cbz	r0, 8010638 <_svfiprintf_r+0x150>
 8010628:	2240      	movs	r2, #64	@ 0x40
 801062a:	9b04      	ldr	r3, [sp, #16]
 801062c:	eba0 000a 	sub.w	r0, r0, sl
 8010630:	4082      	lsls	r2, r0
 8010632:	4313      	orrs	r3, r2
 8010634:	3401      	adds	r4, #1
 8010636:	9304      	str	r3, [sp, #16]
 8010638:	f814 1b01 	ldrb.w	r1, [r4], #1
 801063c:	2206      	movs	r2, #6
 801063e:	4825      	ldr	r0, [pc, #148]	@ (80106d4 <_svfiprintf_r+0x1ec>)
 8010640:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010644:	f7fe fccd 	bl	800efe2 <memchr>
 8010648:	2800      	cmp	r0, #0
 801064a:	d036      	beq.n	80106ba <_svfiprintf_r+0x1d2>
 801064c:	4b22      	ldr	r3, [pc, #136]	@ (80106d8 <_svfiprintf_r+0x1f0>)
 801064e:	bb1b      	cbnz	r3, 8010698 <_svfiprintf_r+0x1b0>
 8010650:	9b03      	ldr	r3, [sp, #12]
 8010652:	3307      	adds	r3, #7
 8010654:	f023 0307 	bic.w	r3, r3, #7
 8010658:	3308      	adds	r3, #8
 801065a:	9303      	str	r3, [sp, #12]
 801065c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801065e:	4433      	add	r3, r6
 8010660:	9309      	str	r3, [sp, #36]	@ 0x24
 8010662:	e76a      	b.n	801053a <_svfiprintf_r+0x52>
 8010664:	460c      	mov	r4, r1
 8010666:	2001      	movs	r0, #1
 8010668:	fb0c 3202 	mla	r2, ip, r2, r3
 801066c:	e7a8      	b.n	80105c0 <_svfiprintf_r+0xd8>
 801066e:	2300      	movs	r3, #0
 8010670:	f04f 0c0a 	mov.w	ip, #10
 8010674:	4619      	mov	r1, r3
 8010676:	3401      	adds	r4, #1
 8010678:	9305      	str	r3, [sp, #20]
 801067a:	4620      	mov	r0, r4
 801067c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010680:	3a30      	subs	r2, #48	@ 0x30
 8010682:	2a09      	cmp	r2, #9
 8010684:	d903      	bls.n	801068e <_svfiprintf_r+0x1a6>
 8010686:	2b00      	cmp	r3, #0
 8010688:	d0c6      	beq.n	8010618 <_svfiprintf_r+0x130>
 801068a:	9105      	str	r1, [sp, #20]
 801068c:	e7c4      	b.n	8010618 <_svfiprintf_r+0x130>
 801068e:	4604      	mov	r4, r0
 8010690:	2301      	movs	r3, #1
 8010692:	fb0c 2101 	mla	r1, ip, r1, r2
 8010696:	e7f0      	b.n	801067a <_svfiprintf_r+0x192>
 8010698:	ab03      	add	r3, sp, #12
 801069a:	9300      	str	r3, [sp, #0]
 801069c:	462a      	mov	r2, r5
 801069e:	4638      	mov	r0, r7
 80106a0:	4b0e      	ldr	r3, [pc, #56]	@ (80106dc <_svfiprintf_r+0x1f4>)
 80106a2:	a904      	add	r1, sp, #16
 80106a4:	f7fd ff16 	bl	800e4d4 <_printf_float>
 80106a8:	1c42      	adds	r2, r0, #1
 80106aa:	4606      	mov	r6, r0
 80106ac:	d1d6      	bne.n	801065c <_svfiprintf_r+0x174>
 80106ae:	89ab      	ldrh	r3, [r5, #12]
 80106b0:	065b      	lsls	r3, r3, #25
 80106b2:	f53f af2d 	bmi.w	8010510 <_svfiprintf_r+0x28>
 80106b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80106b8:	e72c      	b.n	8010514 <_svfiprintf_r+0x2c>
 80106ba:	ab03      	add	r3, sp, #12
 80106bc:	9300      	str	r3, [sp, #0]
 80106be:	462a      	mov	r2, r5
 80106c0:	4638      	mov	r0, r7
 80106c2:	4b06      	ldr	r3, [pc, #24]	@ (80106dc <_svfiprintf_r+0x1f4>)
 80106c4:	a904      	add	r1, sp, #16
 80106c6:	f7fe f9a3 	bl	800ea10 <_printf_i>
 80106ca:	e7ed      	b.n	80106a8 <_svfiprintf_r+0x1c0>
 80106cc:	08012158 	.word	0x08012158
 80106d0:	0801215e 	.word	0x0801215e
 80106d4:	08012162 	.word	0x08012162
 80106d8:	0800e4d5 	.word	0x0800e4d5
 80106dc:	08010431 	.word	0x08010431

080106e0 <__sflush_r>:
 80106e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80106e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e6:	0716      	lsls	r6, r2, #28
 80106e8:	4605      	mov	r5, r0
 80106ea:	460c      	mov	r4, r1
 80106ec:	d454      	bmi.n	8010798 <__sflush_r+0xb8>
 80106ee:	684b      	ldr	r3, [r1, #4]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	dc02      	bgt.n	80106fa <__sflush_r+0x1a>
 80106f4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	dd48      	ble.n	801078c <__sflush_r+0xac>
 80106fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80106fc:	2e00      	cmp	r6, #0
 80106fe:	d045      	beq.n	801078c <__sflush_r+0xac>
 8010700:	2300      	movs	r3, #0
 8010702:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010706:	682f      	ldr	r7, [r5, #0]
 8010708:	6a21      	ldr	r1, [r4, #32]
 801070a:	602b      	str	r3, [r5, #0]
 801070c:	d030      	beq.n	8010770 <__sflush_r+0x90>
 801070e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010710:	89a3      	ldrh	r3, [r4, #12]
 8010712:	0759      	lsls	r1, r3, #29
 8010714:	d505      	bpl.n	8010722 <__sflush_r+0x42>
 8010716:	6863      	ldr	r3, [r4, #4]
 8010718:	1ad2      	subs	r2, r2, r3
 801071a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801071c:	b10b      	cbz	r3, 8010722 <__sflush_r+0x42>
 801071e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010720:	1ad2      	subs	r2, r2, r3
 8010722:	2300      	movs	r3, #0
 8010724:	4628      	mov	r0, r5
 8010726:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010728:	6a21      	ldr	r1, [r4, #32]
 801072a:	47b0      	blx	r6
 801072c:	1c43      	adds	r3, r0, #1
 801072e:	89a3      	ldrh	r3, [r4, #12]
 8010730:	d106      	bne.n	8010740 <__sflush_r+0x60>
 8010732:	6829      	ldr	r1, [r5, #0]
 8010734:	291d      	cmp	r1, #29
 8010736:	d82b      	bhi.n	8010790 <__sflush_r+0xb0>
 8010738:	4a28      	ldr	r2, [pc, #160]	@ (80107dc <__sflush_r+0xfc>)
 801073a:	410a      	asrs	r2, r1
 801073c:	07d6      	lsls	r6, r2, #31
 801073e:	d427      	bmi.n	8010790 <__sflush_r+0xb0>
 8010740:	2200      	movs	r2, #0
 8010742:	6062      	str	r2, [r4, #4]
 8010744:	6922      	ldr	r2, [r4, #16]
 8010746:	04d9      	lsls	r1, r3, #19
 8010748:	6022      	str	r2, [r4, #0]
 801074a:	d504      	bpl.n	8010756 <__sflush_r+0x76>
 801074c:	1c42      	adds	r2, r0, #1
 801074e:	d101      	bne.n	8010754 <__sflush_r+0x74>
 8010750:	682b      	ldr	r3, [r5, #0]
 8010752:	b903      	cbnz	r3, 8010756 <__sflush_r+0x76>
 8010754:	6560      	str	r0, [r4, #84]	@ 0x54
 8010756:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010758:	602f      	str	r7, [r5, #0]
 801075a:	b1b9      	cbz	r1, 801078c <__sflush_r+0xac>
 801075c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010760:	4299      	cmp	r1, r3
 8010762:	d002      	beq.n	801076a <__sflush_r+0x8a>
 8010764:	4628      	mov	r0, r5
 8010766:	f7ff fa9b 	bl	800fca0 <_free_r>
 801076a:	2300      	movs	r3, #0
 801076c:	6363      	str	r3, [r4, #52]	@ 0x34
 801076e:	e00d      	b.n	801078c <__sflush_r+0xac>
 8010770:	2301      	movs	r3, #1
 8010772:	4628      	mov	r0, r5
 8010774:	47b0      	blx	r6
 8010776:	4602      	mov	r2, r0
 8010778:	1c50      	adds	r0, r2, #1
 801077a:	d1c9      	bne.n	8010710 <__sflush_r+0x30>
 801077c:	682b      	ldr	r3, [r5, #0]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d0c6      	beq.n	8010710 <__sflush_r+0x30>
 8010782:	2b1d      	cmp	r3, #29
 8010784:	d001      	beq.n	801078a <__sflush_r+0xaa>
 8010786:	2b16      	cmp	r3, #22
 8010788:	d11d      	bne.n	80107c6 <__sflush_r+0xe6>
 801078a:	602f      	str	r7, [r5, #0]
 801078c:	2000      	movs	r0, #0
 801078e:	e021      	b.n	80107d4 <__sflush_r+0xf4>
 8010790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010794:	b21b      	sxth	r3, r3
 8010796:	e01a      	b.n	80107ce <__sflush_r+0xee>
 8010798:	690f      	ldr	r7, [r1, #16]
 801079a:	2f00      	cmp	r7, #0
 801079c:	d0f6      	beq.n	801078c <__sflush_r+0xac>
 801079e:	0793      	lsls	r3, r2, #30
 80107a0:	bf18      	it	ne
 80107a2:	2300      	movne	r3, #0
 80107a4:	680e      	ldr	r6, [r1, #0]
 80107a6:	bf08      	it	eq
 80107a8:	694b      	ldreq	r3, [r1, #20]
 80107aa:	1bf6      	subs	r6, r6, r7
 80107ac:	600f      	str	r7, [r1, #0]
 80107ae:	608b      	str	r3, [r1, #8]
 80107b0:	2e00      	cmp	r6, #0
 80107b2:	ddeb      	ble.n	801078c <__sflush_r+0xac>
 80107b4:	4633      	mov	r3, r6
 80107b6:	463a      	mov	r2, r7
 80107b8:	4628      	mov	r0, r5
 80107ba:	6a21      	ldr	r1, [r4, #32]
 80107bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80107c0:	47e0      	blx	ip
 80107c2:	2800      	cmp	r0, #0
 80107c4:	dc07      	bgt.n	80107d6 <__sflush_r+0xf6>
 80107c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107ce:	f04f 30ff 	mov.w	r0, #4294967295
 80107d2:	81a3      	strh	r3, [r4, #12]
 80107d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107d6:	4407      	add	r7, r0
 80107d8:	1a36      	subs	r6, r6, r0
 80107da:	e7e9      	b.n	80107b0 <__sflush_r+0xd0>
 80107dc:	dfbffffe 	.word	0xdfbffffe

080107e0 <_fflush_r>:
 80107e0:	b538      	push	{r3, r4, r5, lr}
 80107e2:	690b      	ldr	r3, [r1, #16]
 80107e4:	4605      	mov	r5, r0
 80107e6:	460c      	mov	r4, r1
 80107e8:	b913      	cbnz	r3, 80107f0 <_fflush_r+0x10>
 80107ea:	2500      	movs	r5, #0
 80107ec:	4628      	mov	r0, r5
 80107ee:	bd38      	pop	{r3, r4, r5, pc}
 80107f0:	b118      	cbz	r0, 80107fa <_fflush_r+0x1a>
 80107f2:	6a03      	ldr	r3, [r0, #32]
 80107f4:	b90b      	cbnz	r3, 80107fa <_fflush_r+0x1a>
 80107f6:	f7fe fab7 	bl	800ed68 <__sinit>
 80107fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d0f3      	beq.n	80107ea <_fflush_r+0xa>
 8010802:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010804:	07d0      	lsls	r0, r2, #31
 8010806:	d404      	bmi.n	8010812 <_fflush_r+0x32>
 8010808:	0599      	lsls	r1, r3, #22
 801080a:	d402      	bmi.n	8010812 <_fflush_r+0x32>
 801080c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801080e:	f7fe fbe6 	bl	800efde <__retarget_lock_acquire_recursive>
 8010812:	4628      	mov	r0, r5
 8010814:	4621      	mov	r1, r4
 8010816:	f7ff ff63 	bl	80106e0 <__sflush_r>
 801081a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801081c:	4605      	mov	r5, r0
 801081e:	07da      	lsls	r2, r3, #31
 8010820:	d4e4      	bmi.n	80107ec <_fflush_r+0xc>
 8010822:	89a3      	ldrh	r3, [r4, #12]
 8010824:	059b      	lsls	r3, r3, #22
 8010826:	d4e1      	bmi.n	80107ec <_fflush_r+0xc>
 8010828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801082a:	f7fe fbd9 	bl	800efe0 <__retarget_lock_release_recursive>
 801082e:	e7dd      	b.n	80107ec <_fflush_r+0xc>

08010830 <memmove>:
 8010830:	4288      	cmp	r0, r1
 8010832:	b510      	push	{r4, lr}
 8010834:	eb01 0402 	add.w	r4, r1, r2
 8010838:	d902      	bls.n	8010840 <memmove+0x10>
 801083a:	4284      	cmp	r4, r0
 801083c:	4623      	mov	r3, r4
 801083e:	d807      	bhi.n	8010850 <memmove+0x20>
 8010840:	1e43      	subs	r3, r0, #1
 8010842:	42a1      	cmp	r1, r4
 8010844:	d008      	beq.n	8010858 <memmove+0x28>
 8010846:	f811 2b01 	ldrb.w	r2, [r1], #1
 801084a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801084e:	e7f8      	b.n	8010842 <memmove+0x12>
 8010850:	4601      	mov	r1, r0
 8010852:	4402      	add	r2, r0
 8010854:	428a      	cmp	r2, r1
 8010856:	d100      	bne.n	801085a <memmove+0x2a>
 8010858:	bd10      	pop	{r4, pc}
 801085a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801085e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010862:	e7f7      	b.n	8010854 <memmove+0x24>

08010864 <memcpy>:
 8010864:	440a      	add	r2, r1
 8010866:	4291      	cmp	r1, r2
 8010868:	f100 33ff 	add.w	r3, r0, #4294967295
 801086c:	d100      	bne.n	8010870 <memcpy+0xc>
 801086e:	4770      	bx	lr
 8010870:	b510      	push	{r4, lr}
 8010872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010876:	4291      	cmp	r1, r2
 8010878:	f803 4f01 	strb.w	r4, [r3, #1]!
 801087c:	d1f9      	bne.n	8010872 <memcpy+0xe>
 801087e:	bd10      	pop	{r4, pc}

08010880 <__assert_func>:
 8010880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010882:	4614      	mov	r4, r2
 8010884:	461a      	mov	r2, r3
 8010886:	4b09      	ldr	r3, [pc, #36]	@ (80108ac <__assert_func+0x2c>)
 8010888:	4605      	mov	r5, r0
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	68d8      	ldr	r0, [r3, #12]
 801088e:	b954      	cbnz	r4, 80108a6 <__assert_func+0x26>
 8010890:	4b07      	ldr	r3, [pc, #28]	@ (80108b0 <__assert_func+0x30>)
 8010892:	461c      	mov	r4, r3
 8010894:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010898:	9100      	str	r1, [sp, #0]
 801089a:	462b      	mov	r3, r5
 801089c:	4905      	ldr	r1, [pc, #20]	@ (80108b4 <__assert_func+0x34>)
 801089e:	f000 f86f 	bl	8010980 <fiprintf>
 80108a2:	f000 f87f 	bl	80109a4 <abort>
 80108a6:	4b04      	ldr	r3, [pc, #16]	@ (80108b8 <__assert_func+0x38>)
 80108a8:	e7f4      	b.n	8010894 <__assert_func+0x14>
 80108aa:	bf00      	nop
 80108ac:	20000188 	.word	0x20000188
 80108b0:	080121ae 	.word	0x080121ae
 80108b4:	08012180 	.word	0x08012180
 80108b8:	08012173 	.word	0x08012173

080108bc <_calloc_r>:
 80108bc:	b570      	push	{r4, r5, r6, lr}
 80108be:	fba1 5402 	umull	r5, r4, r1, r2
 80108c2:	b93c      	cbnz	r4, 80108d4 <_calloc_r+0x18>
 80108c4:	4629      	mov	r1, r5
 80108c6:	f7fd fcdb 	bl	800e280 <_malloc_r>
 80108ca:	4606      	mov	r6, r0
 80108cc:	b928      	cbnz	r0, 80108da <_calloc_r+0x1e>
 80108ce:	2600      	movs	r6, #0
 80108d0:	4630      	mov	r0, r6
 80108d2:	bd70      	pop	{r4, r5, r6, pc}
 80108d4:	220c      	movs	r2, #12
 80108d6:	6002      	str	r2, [r0, #0]
 80108d8:	e7f9      	b.n	80108ce <_calloc_r+0x12>
 80108da:	462a      	mov	r2, r5
 80108dc:	4621      	mov	r1, r4
 80108de:	f7fe faf0 	bl	800eec2 <memset>
 80108e2:	e7f5      	b.n	80108d0 <_calloc_r+0x14>

080108e4 <__ascii_mbtowc>:
 80108e4:	b082      	sub	sp, #8
 80108e6:	b901      	cbnz	r1, 80108ea <__ascii_mbtowc+0x6>
 80108e8:	a901      	add	r1, sp, #4
 80108ea:	b142      	cbz	r2, 80108fe <__ascii_mbtowc+0x1a>
 80108ec:	b14b      	cbz	r3, 8010902 <__ascii_mbtowc+0x1e>
 80108ee:	7813      	ldrb	r3, [r2, #0]
 80108f0:	600b      	str	r3, [r1, #0]
 80108f2:	7812      	ldrb	r2, [r2, #0]
 80108f4:	1e10      	subs	r0, r2, #0
 80108f6:	bf18      	it	ne
 80108f8:	2001      	movne	r0, #1
 80108fa:	b002      	add	sp, #8
 80108fc:	4770      	bx	lr
 80108fe:	4610      	mov	r0, r2
 8010900:	e7fb      	b.n	80108fa <__ascii_mbtowc+0x16>
 8010902:	f06f 0001 	mvn.w	r0, #1
 8010906:	e7f8      	b.n	80108fa <__ascii_mbtowc+0x16>

08010908 <_realloc_r>:
 8010908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801090c:	4680      	mov	r8, r0
 801090e:	4615      	mov	r5, r2
 8010910:	460c      	mov	r4, r1
 8010912:	b921      	cbnz	r1, 801091e <_realloc_r+0x16>
 8010914:	4611      	mov	r1, r2
 8010916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801091a:	f7fd bcb1 	b.w	800e280 <_malloc_r>
 801091e:	b92a      	cbnz	r2, 801092c <_realloc_r+0x24>
 8010920:	f7ff f9be 	bl	800fca0 <_free_r>
 8010924:	2400      	movs	r4, #0
 8010926:	4620      	mov	r0, r4
 8010928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801092c:	f000 f841 	bl	80109b2 <_malloc_usable_size_r>
 8010930:	4285      	cmp	r5, r0
 8010932:	4606      	mov	r6, r0
 8010934:	d802      	bhi.n	801093c <_realloc_r+0x34>
 8010936:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801093a:	d8f4      	bhi.n	8010926 <_realloc_r+0x1e>
 801093c:	4629      	mov	r1, r5
 801093e:	4640      	mov	r0, r8
 8010940:	f7fd fc9e 	bl	800e280 <_malloc_r>
 8010944:	4607      	mov	r7, r0
 8010946:	2800      	cmp	r0, #0
 8010948:	d0ec      	beq.n	8010924 <_realloc_r+0x1c>
 801094a:	42b5      	cmp	r5, r6
 801094c:	462a      	mov	r2, r5
 801094e:	4621      	mov	r1, r4
 8010950:	bf28      	it	cs
 8010952:	4632      	movcs	r2, r6
 8010954:	f7ff ff86 	bl	8010864 <memcpy>
 8010958:	4621      	mov	r1, r4
 801095a:	4640      	mov	r0, r8
 801095c:	f7ff f9a0 	bl	800fca0 <_free_r>
 8010960:	463c      	mov	r4, r7
 8010962:	e7e0      	b.n	8010926 <_realloc_r+0x1e>

08010964 <__ascii_wctomb>:
 8010964:	4603      	mov	r3, r0
 8010966:	4608      	mov	r0, r1
 8010968:	b141      	cbz	r1, 801097c <__ascii_wctomb+0x18>
 801096a:	2aff      	cmp	r2, #255	@ 0xff
 801096c:	d904      	bls.n	8010978 <__ascii_wctomb+0x14>
 801096e:	228a      	movs	r2, #138	@ 0x8a
 8010970:	f04f 30ff 	mov.w	r0, #4294967295
 8010974:	601a      	str	r2, [r3, #0]
 8010976:	4770      	bx	lr
 8010978:	2001      	movs	r0, #1
 801097a:	700a      	strb	r2, [r1, #0]
 801097c:	4770      	bx	lr
	...

08010980 <fiprintf>:
 8010980:	b40e      	push	{r1, r2, r3}
 8010982:	b503      	push	{r0, r1, lr}
 8010984:	4601      	mov	r1, r0
 8010986:	ab03      	add	r3, sp, #12
 8010988:	4805      	ldr	r0, [pc, #20]	@ (80109a0 <fiprintf+0x20>)
 801098a:	f853 2b04 	ldr.w	r2, [r3], #4
 801098e:	6800      	ldr	r0, [r0, #0]
 8010990:	9301      	str	r3, [sp, #4]
 8010992:	f000 f83d 	bl	8010a10 <_vfiprintf_r>
 8010996:	b002      	add	sp, #8
 8010998:	f85d eb04 	ldr.w	lr, [sp], #4
 801099c:	b003      	add	sp, #12
 801099e:	4770      	bx	lr
 80109a0:	20000188 	.word	0x20000188

080109a4 <abort>:
 80109a4:	2006      	movs	r0, #6
 80109a6:	b508      	push	{r3, lr}
 80109a8:	f000 fa06 	bl	8010db8 <raise>
 80109ac:	2001      	movs	r0, #1
 80109ae:	f7f2 ffc8 	bl	8003942 <_exit>

080109b2 <_malloc_usable_size_r>:
 80109b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109b6:	1f18      	subs	r0, r3, #4
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	bfbc      	itt	lt
 80109bc:	580b      	ldrlt	r3, [r1, r0]
 80109be:	18c0      	addlt	r0, r0, r3
 80109c0:	4770      	bx	lr

080109c2 <__sfputc_r>:
 80109c2:	6893      	ldr	r3, [r2, #8]
 80109c4:	b410      	push	{r4}
 80109c6:	3b01      	subs	r3, #1
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	6093      	str	r3, [r2, #8]
 80109cc:	da07      	bge.n	80109de <__sfputc_r+0x1c>
 80109ce:	6994      	ldr	r4, [r2, #24]
 80109d0:	42a3      	cmp	r3, r4
 80109d2:	db01      	blt.n	80109d8 <__sfputc_r+0x16>
 80109d4:	290a      	cmp	r1, #10
 80109d6:	d102      	bne.n	80109de <__sfputc_r+0x1c>
 80109d8:	bc10      	pop	{r4}
 80109da:	f000 b931 	b.w	8010c40 <__swbuf_r>
 80109de:	6813      	ldr	r3, [r2, #0]
 80109e0:	1c58      	adds	r0, r3, #1
 80109e2:	6010      	str	r0, [r2, #0]
 80109e4:	7019      	strb	r1, [r3, #0]
 80109e6:	4608      	mov	r0, r1
 80109e8:	bc10      	pop	{r4}
 80109ea:	4770      	bx	lr

080109ec <__sfputs_r>:
 80109ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ee:	4606      	mov	r6, r0
 80109f0:	460f      	mov	r7, r1
 80109f2:	4614      	mov	r4, r2
 80109f4:	18d5      	adds	r5, r2, r3
 80109f6:	42ac      	cmp	r4, r5
 80109f8:	d101      	bne.n	80109fe <__sfputs_r+0x12>
 80109fa:	2000      	movs	r0, #0
 80109fc:	e007      	b.n	8010a0e <__sfputs_r+0x22>
 80109fe:	463a      	mov	r2, r7
 8010a00:	4630      	mov	r0, r6
 8010a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a06:	f7ff ffdc 	bl	80109c2 <__sfputc_r>
 8010a0a:	1c43      	adds	r3, r0, #1
 8010a0c:	d1f3      	bne.n	80109f6 <__sfputs_r+0xa>
 8010a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010a10 <_vfiprintf_r>:
 8010a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a14:	460d      	mov	r5, r1
 8010a16:	4614      	mov	r4, r2
 8010a18:	4698      	mov	r8, r3
 8010a1a:	4606      	mov	r6, r0
 8010a1c:	b09d      	sub	sp, #116	@ 0x74
 8010a1e:	b118      	cbz	r0, 8010a28 <_vfiprintf_r+0x18>
 8010a20:	6a03      	ldr	r3, [r0, #32]
 8010a22:	b90b      	cbnz	r3, 8010a28 <_vfiprintf_r+0x18>
 8010a24:	f7fe f9a0 	bl	800ed68 <__sinit>
 8010a28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a2a:	07d9      	lsls	r1, r3, #31
 8010a2c:	d405      	bmi.n	8010a3a <_vfiprintf_r+0x2a>
 8010a2e:	89ab      	ldrh	r3, [r5, #12]
 8010a30:	059a      	lsls	r2, r3, #22
 8010a32:	d402      	bmi.n	8010a3a <_vfiprintf_r+0x2a>
 8010a34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a36:	f7fe fad2 	bl	800efde <__retarget_lock_acquire_recursive>
 8010a3a:	89ab      	ldrh	r3, [r5, #12]
 8010a3c:	071b      	lsls	r3, r3, #28
 8010a3e:	d501      	bpl.n	8010a44 <_vfiprintf_r+0x34>
 8010a40:	692b      	ldr	r3, [r5, #16]
 8010a42:	b99b      	cbnz	r3, 8010a6c <_vfiprintf_r+0x5c>
 8010a44:	4629      	mov	r1, r5
 8010a46:	4630      	mov	r0, r6
 8010a48:	f000 f938 	bl	8010cbc <__swsetup_r>
 8010a4c:	b170      	cbz	r0, 8010a6c <_vfiprintf_r+0x5c>
 8010a4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a50:	07dc      	lsls	r4, r3, #31
 8010a52:	d504      	bpl.n	8010a5e <_vfiprintf_r+0x4e>
 8010a54:	f04f 30ff 	mov.w	r0, #4294967295
 8010a58:	b01d      	add	sp, #116	@ 0x74
 8010a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a5e:	89ab      	ldrh	r3, [r5, #12]
 8010a60:	0598      	lsls	r0, r3, #22
 8010a62:	d4f7      	bmi.n	8010a54 <_vfiprintf_r+0x44>
 8010a64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a66:	f7fe fabb 	bl	800efe0 <__retarget_lock_release_recursive>
 8010a6a:	e7f3      	b.n	8010a54 <_vfiprintf_r+0x44>
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a70:	2320      	movs	r3, #32
 8010a72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010a76:	2330      	movs	r3, #48	@ 0x30
 8010a78:	f04f 0901 	mov.w	r9, #1
 8010a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a80:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8010c2c <_vfiprintf_r+0x21c>
 8010a84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a88:	4623      	mov	r3, r4
 8010a8a:	469a      	mov	sl, r3
 8010a8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a90:	b10a      	cbz	r2, 8010a96 <_vfiprintf_r+0x86>
 8010a92:	2a25      	cmp	r2, #37	@ 0x25
 8010a94:	d1f9      	bne.n	8010a8a <_vfiprintf_r+0x7a>
 8010a96:	ebba 0b04 	subs.w	fp, sl, r4
 8010a9a:	d00b      	beq.n	8010ab4 <_vfiprintf_r+0xa4>
 8010a9c:	465b      	mov	r3, fp
 8010a9e:	4622      	mov	r2, r4
 8010aa0:	4629      	mov	r1, r5
 8010aa2:	4630      	mov	r0, r6
 8010aa4:	f7ff ffa2 	bl	80109ec <__sfputs_r>
 8010aa8:	3001      	adds	r0, #1
 8010aaa:	f000 80a7 	beq.w	8010bfc <_vfiprintf_r+0x1ec>
 8010aae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ab0:	445a      	add	r2, fp
 8010ab2:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f000 809f 	beq.w	8010bfc <_vfiprintf_r+0x1ec>
 8010abe:	2300      	movs	r3, #0
 8010ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ac8:	f10a 0a01 	add.w	sl, sl, #1
 8010acc:	9304      	str	r3, [sp, #16]
 8010ace:	9307      	str	r3, [sp, #28]
 8010ad0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010ad4:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ad6:	4654      	mov	r4, sl
 8010ad8:	2205      	movs	r2, #5
 8010ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ade:	4853      	ldr	r0, [pc, #332]	@ (8010c2c <_vfiprintf_r+0x21c>)
 8010ae0:	f7fe fa7f 	bl	800efe2 <memchr>
 8010ae4:	9a04      	ldr	r2, [sp, #16]
 8010ae6:	b9d8      	cbnz	r0, 8010b20 <_vfiprintf_r+0x110>
 8010ae8:	06d1      	lsls	r1, r2, #27
 8010aea:	bf44      	itt	mi
 8010aec:	2320      	movmi	r3, #32
 8010aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010af2:	0713      	lsls	r3, r2, #28
 8010af4:	bf44      	itt	mi
 8010af6:	232b      	movmi	r3, #43	@ 0x2b
 8010af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010afc:	f89a 3000 	ldrb.w	r3, [sl]
 8010b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b02:	d015      	beq.n	8010b30 <_vfiprintf_r+0x120>
 8010b04:	4654      	mov	r4, sl
 8010b06:	2000      	movs	r0, #0
 8010b08:	f04f 0c0a 	mov.w	ip, #10
 8010b0c:	9a07      	ldr	r2, [sp, #28]
 8010b0e:	4621      	mov	r1, r4
 8010b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b14:	3b30      	subs	r3, #48	@ 0x30
 8010b16:	2b09      	cmp	r3, #9
 8010b18:	d94b      	bls.n	8010bb2 <_vfiprintf_r+0x1a2>
 8010b1a:	b1b0      	cbz	r0, 8010b4a <_vfiprintf_r+0x13a>
 8010b1c:	9207      	str	r2, [sp, #28]
 8010b1e:	e014      	b.n	8010b4a <_vfiprintf_r+0x13a>
 8010b20:	eba0 0308 	sub.w	r3, r0, r8
 8010b24:	fa09 f303 	lsl.w	r3, r9, r3
 8010b28:	4313      	orrs	r3, r2
 8010b2a:	46a2      	mov	sl, r4
 8010b2c:	9304      	str	r3, [sp, #16]
 8010b2e:	e7d2      	b.n	8010ad6 <_vfiprintf_r+0xc6>
 8010b30:	9b03      	ldr	r3, [sp, #12]
 8010b32:	1d19      	adds	r1, r3, #4
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	9103      	str	r1, [sp, #12]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	bfbb      	ittet	lt
 8010b3c:	425b      	neglt	r3, r3
 8010b3e:	f042 0202 	orrlt.w	r2, r2, #2
 8010b42:	9307      	strge	r3, [sp, #28]
 8010b44:	9307      	strlt	r3, [sp, #28]
 8010b46:	bfb8      	it	lt
 8010b48:	9204      	strlt	r2, [sp, #16]
 8010b4a:	7823      	ldrb	r3, [r4, #0]
 8010b4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b4e:	d10a      	bne.n	8010b66 <_vfiprintf_r+0x156>
 8010b50:	7863      	ldrb	r3, [r4, #1]
 8010b52:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b54:	d132      	bne.n	8010bbc <_vfiprintf_r+0x1ac>
 8010b56:	9b03      	ldr	r3, [sp, #12]
 8010b58:	3402      	adds	r4, #2
 8010b5a:	1d1a      	adds	r2, r3, #4
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	9203      	str	r2, [sp, #12]
 8010b60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b64:	9305      	str	r3, [sp, #20]
 8010b66:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8010c30 <_vfiprintf_r+0x220>
 8010b6a:	2203      	movs	r2, #3
 8010b6c:	4650      	mov	r0, sl
 8010b6e:	7821      	ldrb	r1, [r4, #0]
 8010b70:	f7fe fa37 	bl	800efe2 <memchr>
 8010b74:	b138      	cbz	r0, 8010b86 <_vfiprintf_r+0x176>
 8010b76:	2240      	movs	r2, #64	@ 0x40
 8010b78:	9b04      	ldr	r3, [sp, #16]
 8010b7a:	eba0 000a 	sub.w	r0, r0, sl
 8010b7e:	4082      	lsls	r2, r0
 8010b80:	4313      	orrs	r3, r2
 8010b82:	3401      	adds	r4, #1
 8010b84:	9304      	str	r3, [sp, #16]
 8010b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b8a:	2206      	movs	r2, #6
 8010b8c:	4829      	ldr	r0, [pc, #164]	@ (8010c34 <_vfiprintf_r+0x224>)
 8010b8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b92:	f7fe fa26 	bl	800efe2 <memchr>
 8010b96:	2800      	cmp	r0, #0
 8010b98:	d03f      	beq.n	8010c1a <_vfiprintf_r+0x20a>
 8010b9a:	4b27      	ldr	r3, [pc, #156]	@ (8010c38 <_vfiprintf_r+0x228>)
 8010b9c:	bb1b      	cbnz	r3, 8010be6 <_vfiprintf_r+0x1d6>
 8010b9e:	9b03      	ldr	r3, [sp, #12]
 8010ba0:	3307      	adds	r3, #7
 8010ba2:	f023 0307 	bic.w	r3, r3, #7
 8010ba6:	3308      	adds	r3, #8
 8010ba8:	9303      	str	r3, [sp, #12]
 8010baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bac:	443b      	add	r3, r7
 8010bae:	9309      	str	r3, [sp, #36]	@ 0x24
 8010bb0:	e76a      	b.n	8010a88 <_vfiprintf_r+0x78>
 8010bb2:	460c      	mov	r4, r1
 8010bb4:	2001      	movs	r0, #1
 8010bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010bba:	e7a8      	b.n	8010b0e <_vfiprintf_r+0xfe>
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	f04f 0c0a 	mov.w	ip, #10
 8010bc2:	4619      	mov	r1, r3
 8010bc4:	3401      	adds	r4, #1
 8010bc6:	9305      	str	r3, [sp, #20]
 8010bc8:	4620      	mov	r0, r4
 8010bca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bce:	3a30      	subs	r2, #48	@ 0x30
 8010bd0:	2a09      	cmp	r2, #9
 8010bd2:	d903      	bls.n	8010bdc <_vfiprintf_r+0x1cc>
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d0c6      	beq.n	8010b66 <_vfiprintf_r+0x156>
 8010bd8:	9105      	str	r1, [sp, #20]
 8010bda:	e7c4      	b.n	8010b66 <_vfiprintf_r+0x156>
 8010bdc:	4604      	mov	r4, r0
 8010bde:	2301      	movs	r3, #1
 8010be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010be4:	e7f0      	b.n	8010bc8 <_vfiprintf_r+0x1b8>
 8010be6:	ab03      	add	r3, sp, #12
 8010be8:	9300      	str	r3, [sp, #0]
 8010bea:	462a      	mov	r2, r5
 8010bec:	4630      	mov	r0, r6
 8010bee:	4b13      	ldr	r3, [pc, #76]	@ (8010c3c <_vfiprintf_r+0x22c>)
 8010bf0:	a904      	add	r1, sp, #16
 8010bf2:	f7fd fc6f 	bl	800e4d4 <_printf_float>
 8010bf6:	4607      	mov	r7, r0
 8010bf8:	1c78      	adds	r0, r7, #1
 8010bfa:	d1d6      	bne.n	8010baa <_vfiprintf_r+0x19a>
 8010bfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010bfe:	07d9      	lsls	r1, r3, #31
 8010c00:	d405      	bmi.n	8010c0e <_vfiprintf_r+0x1fe>
 8010c02:	89ab      	ldrh	r3, [r5, #12]
 8010c04:	059a      	lsls	r2, r3, #22
 8010c06:	d402      	bmi.n	8010c0e <_vfiprintf_r+0x1fe>
 8010c08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c0a:	f7fe f9e9 	bl	800efe0 <__retarget_lock_release_recursive>
 8010c0e:	89ab      	ldrh	r3, [r5, #12]
 8010c10:	065b      	lsls	r3, r3, #25
 8010c12:	f53f af1f 	bmi.w	8010a54 <_vfiprintf_r+0x44>
 8010c16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c18:	e71e      	b.n	8010a58 <_vfiprintf_r+0x48>
 8010c1a:	ab03      	add	r3, sp, #12
 8010c1c:	9300      	str	r3, [sp, #0]
 8010c1e:	462a      	mov	r2, r5
 8010c20:	4630      	mov	r0, r6
 8010c22:	4b06      	ldr	r3, [pc, #24]	@ (8010c3c <_vfiprintf_r+0x22c>)
 8010c24:	a904      	add	r1, sp, #16
 8010c26:	f7fd fef3 	bl	800ea10 <_printf_i>
 8010c2a:	e7e4      	b.n	8010bf6 <_vfiprintf_r+0x1e6>
 8010c2c:	08012158 	.word	0x08012158
 8010c30:	0801215e 	.word	0x0801215e
 8010c34:	08012162 	.word	0x08012162
 8010c38:	0800e4d5 	.word	0x0800e4d5
 8010c3c:	080109ed 	.word	0x080109ed

08010c40 <__swbuf_r>:
 8010c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c42:	460e      	mov	r6, r1
 8010c44:	4614      	mov	r4, r2
 8010c46:	4605      	mov	r5, r0
 8010c48:	b118      	cbz	r0, 8010c52 <__swbuf_r+0x12>
 8010c4a:	6a03      	ldr	r3, [r0, #32]
 8010c4c:	b90b      	cbnz	r3, 8010c52 <__swbuf_r+0x12>
 8010c4e:	f7fe f88b 	bl	800ed68 <__sinit>
 8010c52:	69a3      	ldr	r3, [r4, #24]
 8010c54:	60a3      	str	r3, [r4, #8]
 8010c56:	89a3      	ldrh	r3, [r4, #12]
 8010c58:	071a      	lsls	r2, r3, #28
 8010c5a:	d501      	bpl.n	8010c60 <__swbuf_r+0x20>
 8010c5c:	6923      	ldr	r3, [r4, #16]
 8010c5e:	b943      	cbnz	r3, 8010c72 <__swbuf_r+0x32>
 8010c60:	4621      	mov	r1, r4
 8010c62:	4628      	mov	r0, r5
 8010c64:	f000 f82a 	bl	8010cbc <__swsetup_r>
 8010c68:	b118      	cbz	r0, 8010c72 <__swbuf_r+0x32>
 8010c6a:	f04f 37ff 	mov.w	r7, #4294967295
 8010c6e:	4638      	mov	r0, r7
 8010c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c72:	6823      	ldr	r3, [r4, #0]
 8010c74:	6922      	ldr	r2, [r4, #16]
 8010c76:	b2f6      	uxtb	r6, r6
 8010c78:	1a98      	subs	r0, r3, r2
 8010c7a:	6963      	ldr	r3, [r4, #20]
 8010c7c:	4637      	mov	r7, r6
 8010c7e:	4283      	cmp	r3, r0
 8010c80:	dc05      	bgt.n	8010c8e <__swbuf_r+0x4e>
 8010c82:	4621      	mov	r1, r4
 8010c84:	4628      	mov	r0, r5
 8010c86:	f7ff fdab 	bl	80107e0 <_fflush_r>
 8010c8a:	2800      	cmp	r0, #0
 8010c8c:	d1ed      	bne.n	8010c6a <__swbuf_r+0x2a>
 8010c8e:	68a3      	ldr	r3, [r4, #8]
 8010c90:	3b01      	subs	r3, #1
 8010c92:	60a3      	str	r3, [r4, #8]
 8010c94:	6823      	ldr	r3, [r4, #0]
 8010c96:	1c5a      	adds	r2, r3, #1
 8010c98:	6022      	str	r2, [r4, #0]
 8010c9a:	701e      	strb	r6, [r3, #0]
 8010c9c:	6962      	ldr	r2, [r4, #20]
 8010c9e:	1c43      	adds	r3, r0, #1
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	d004      	beq.n	8010cae <__swbuf_r+0x6e>
 8010ca4:	89a3      	ldrh	r3, [r4, #12]
 8010ca6:	07db      	lsls	r3, r3, #31
 8010ca8:	d5e1      	bpl.n	8010c6e <__swbuf_r+0x2e>
 8010caa:	2e0a      	cmp	r6, #10
 8010cac:	d1df      	bne.n	8010c6e <__swbuf_r+0x2e>
 8010cae:	4621      	mov	r1, r4
 8010cb0:	4628      	mov	r0, r5
 8010cb2:	f7ff fd95 	bl	80107e0 <_fflush_r>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	d0d9      	beq.n	8010c6e <__swbuf_r+0x2e>
 8010cba:	e7d6      	b.n	8010c6a <__swbuf_r+0x2a>

08010cbc <__swsetup_r>:
 8010cbc:	b538      	push	{r3, r4, r5, lr}
 8010cbe:	4b29      	ldr	r3, [pc, #164]	@ (8010d64 <__swsetup_r+0xa8>)
 8010cc0:	4605      	mov	r5, r0
 8010cc2:	6818      	ldr	r0, [r3, #0]
 8010cc4:	460c      	mov	r4, r1
 8010cc6:	b118      	cbz	r0, 8010cd0 <__swsetup_r+0x14>
 8010cc8:	6a03      	ldr	r3, [r0, #32]
 8010cca:	b90b      	cbnz	r3, 8010cd0 <__swsetup_r+0x14>
 8010ccc:	f7fe f84c 	bl	800ed68 <__sinit>
 8010cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cd4:	0719      	lsls	r1, r3, #28
 8010cd6:	d422      	bmi.n	8010d1e <__swsetup_r+0x62>
 8010cd8:	06da      	lsls	r2, r3, #27
 8010cda:	d407      	bmi.n	8010cec <__swsetup_r+0x30>
 8010cdc:	2209      	movs	r2, #9
 8010cde:	602a      	str	r2, [r5, #0]
 8010ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ce8:	81a3      	strh	r3, [r4, #12]
 8010cea:	e033      	b.n	8010d54 <__swsetup_r+0x98>
 8010cec:	0758      	lsls	r0, r3, #29
 8010cee:	d512      	bpl.n	8010d16 <__swsetup_r+0x5a>
 8010cf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010cf2:	b141      	cbz	r1, 8010d06 <__swsetup_r+0x4a>
 8010cf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010cf8:	4299      	cmp	r1, r3
 8010cfa:	d002      	beq.n	8010d02 <__swsetup_r+0x46>
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	f7fe ffcf 	bl	800fca0 <_free_r>
 8010d02:	2300      	movs	r3, #0
 8010d04:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d06:	89a3      	ldrh	r3, [r4, #12]
 8010d08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010d0c:	81a3      	strh	r3, [r4, #12]
 8010d0e:	2300      	movs	r3, #0
 8010d10:	6063      	str	r3, [r4, #4]
 8010d12:	6923      	ldr	r3, [r4, #16]
 8010d14:	6023      	str	r3, [r4, #0]
 8010d16:	89a3      	ldrh	r3, [r4, #12]
 8010d18:	f043 0308 	orr.w	r3, r3, #8
 8010d1c:	81a3      	strh	r3, [r4, #12]
 8010d1e:	6923      	ldr	r3, [r4, #16]
 8010d20:	b94b      	cbnz	r3, 8010d36 <__swsetup_r+0x7a>
 8010d22:	89a3      	ldrh	r3, [r4, #12]
 8010d24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010d28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d2c:	d003      	beq.n	8010d36 <__swsetup_r+0x7a>
 8010d2e:	4621      	mov	r1, r4
 8010d30:	4628      	mov	r0, r5
 8010d32:	f000 f882 	bl	8010e3a <__smakebuf_r>
 8010d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d3a:	f013 0201 	ands.w	r2, r3, #1
 8010d3e:	d00a      	beq.n	8010d56 <__swsetup_r+0x9a>
 8010d40:	2200      	movs	r2, #0
 8010d42:	60a2      	str	r2, [r4, #8]
 8010d44:	6962      	ldr	r2, [r4, #20]
 8010d46:	4252      	negs	r2, r2
 8010d48:	61a2      	str	r2, [r4, #24]
 8010d4a:	6922      	ldr	r2, [r4, #16]
 8010d4c:	b942      	cbnz	r2, 8010d60 <__swsetup_r+0xa4>
 8010d4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010d52:	d1c5      	bne.n	8010ce0 <__swsetup_r+0x24>
 8010d54:	bd38      	pop	{r3, r4, r5, pc}
 8010d56:	0799      	lsls	r1, r3, #30
 8010d58:	bf58      	it	pl
 8010d5a:	6962      	ldrpl	r2, [r4, #20]
 8010d5c:	60a2      	str	r2, [r4, #8]
 8010d5e:	e7f4      	b.n	8010d4a <__swsetup_r+0x8e>
 8010d60:	2000      	movs	r0, #0
 8010d62:	e7f7      	b.n	8010d54 <__swsetup_r+0x98>
 8010d64:	20000188 	.word	0x20000188

08010d68 <_raise_r>:
 8010d68:	291f      	cmp	r1, #31
 8010d6a:	b538      	push	{r3, r4, r5, lr}
 8010d6c:	4605      	mov	r5, r0
 8010d6e:	460c      	mov	r4, r1
 8010d70:	d904      	bls.n	8010d7c <_raise_r+0x14>
 8010d72:	2316      	movs	r3, #22
 8010d74:	6003      	str	r3, [r0, #0]
 8010d76:	f04f 30ff 	mov.w	r0, #4294967295
 8010d7a:	bd38      	pop	{r3, r4, r5, pc}
 8010d7c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010d7e:	b112      	cbz	r2, 8010d86 <_raise_r+0x1e>
 8010d80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d84:	b94b      	cbnz	r3, 8010d9a <_raise_r+0x32>
 8010d86:	4628      	mov	r0, r5
 8010d88:	f000 f830 	bl	8010dec <_getpid_r>
 8010d8c:	4622      	mov	r2, r4
 8010d8e:	4601      	mov	r1, r0
 8010d90:	4628      	mov	r0, r5
 8010d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d96:	f000 b817 	b.w	8010dc8 <_kill_r>
 8010d9a:	2b01      	cmp	r3, #1
 8010d9c:	d00a      	beq.n	8010db4 <_raise_r+0x4c>
 8010d9e:	1c59      	adds	r1, r3, #1
 8010da0:	d103      	bne.n	8010daa <_raise_r+0x42>
 8010da2:	2316      	movs	r3, #22
 8010da4:	6003      	str	r3, [r0, #0]
 8010da6:	2001      	movs	r0, #1
 8010da8:	e7e7      	b.n	8010d7a <_raise_r+0x12>
 8010daa:	2100      	movs	r1, #0
 8010dac:	4620      	mov	r0, r4
 8010dae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010db2:	4798      	blx	r3
 8010db4:	2000      	movs	r0, #0
 8010db6:	e7e0      	b.n	8010d7a <_raise_r+0x12>

08010db8 <raise>:
 8010db8:	4b02      	ldr	r3, [pc, #8]	@ (8010dc4 <raise+0xc>)
 8010dba:	4601      	mov	r1, r0
 8010dbc:	6818      	ldr	r0, [r3, #0]
 8010dbe:	f7ff bfd3 	b.w	8010d68 <_raise_r>
 8010dc2:	bf00      	nop
 8010dc4:	20000188 	.word	0x20000188

08010dc8 <_kill_r>:
 8010dc8:	b538      	push	{r3, r4, r5, lr}
 8010dca:	2300      	movs	r3, #0
 8010dcc:	4d06      	ldr	r5, [pc, #24]	@ (8010de8 <_kill_r+0x20>)
 8010dce:	4604      	mov	r4, r0
 8010dd0:	4608      	mov	r0, r1
 8010dd2:	4611      	mov	r1, r2
 8010dd4:	602b      	str	r3, [r5, #0]
 8010dd6:	f7f2 fda4 	bl	8003922 <_kill>
 8010dda:	1c43      	adds	r3, r0, #1
 8010ddc:	d102      	bne.n	8010de4 <_kill_r+0x1c>
 8010dde:	682b      	ldr	r3, [r5, #0]
 8010de0:	b103      	cbz	r3, 8010de4 <_kill_r+0x1c>
 8010de2:	6023      	str	r3, [r4, #0]
 8010de4:	bd38      	pop	{r3, r4, r5, pc}
 8010de6:	bf00      	nop
 8010de8:	20002b1c 	.word	0x20002b1c

08010dec <_getpid_r>:
 8010dec:	f7f2 bd92 	b.w	8003914 <_getpid>

08010df0 <__swhatbuf_r>:
 8010df0:	b570      	push	{r4, r5, r6, lr}
 8010df2:	460c      	mov	r4, r1
 8010df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010df8:	4615      	mov	r5, r2
 8010dfa:	2900      	cmp	r1, #0
 8010dfc:	461e      	mov	r6, r3
 8010dfe:	b096      	sub	sp, #88	@ 0x58
 8010e00:	da0c      	bge.n	8010e1c <__swhatbuf_r+0x2c>
 8010e02:	89a3      	ldrh	r3, [r4, #12]
 8010e04:	2100      	movs	r1, #0
 8010e06:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010e0a:	bf14      	ite	ne
 8010e0c:	2340      	movne	r3, #64	@ 0x40
 8010e0e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010e12:	2000      	movs	r0, #0
 8010e14:	6031      	str	r1, [r6, #0]
 8010e16:	602b      	str	r3, [r5, #0]
 8010e18:	b016      	add	sp, #88	@ 0x58
 8010e1a:	bd70      	pop	{r4, r5, r6, pc}
 8010e1c:	466a      	mov	r2, sp
 8010e1e:	f000 f849 	bl	8010eb4 <_fstat_r>
 8010e22:	2800      	cmp	r0, #0
 8010e24:	dbed      	blt.n	8010e02 <__swhatbuf_r+0x12>
 8010e26:	9901      	ldr	r1, [sp, #4]
 8010e28:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010e2c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010e30:	4259      	negs	r1, r3
 8010e32:	4159      	adcs	r1, r3
 8010e34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e38:	e7eb      	b.n	8010e12 <__swhatbuf_r+0x22>

08010e3a <__smakebuf_r>:
 8010e3a:	898b      	ldrh	r3, [r1, #12]
 8010e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e3e:	079d      	lsls	r5, r3, #30
 8010e40:	4606      	mov	r6, r0
 8010e42:	460c      	mov	r4, r1
 8010e44:	d507      	bpl.n	8010e56 <__smakebuf_r+0x1c>
 8010e46:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010e4a:	6023      	str	r3, [r4, #0]
 8010e4c:	6123      	str	r3, [r4, #16]
 8010e4e:	2301      	movs	r3, #1
 8010e50:	6163      	str	r3, [r4, #20]
 8010e52:	b003      	add	sp, #12
 8010e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e56:	466a      	mov	r2, sp
 8010e58:	ab01      	add	r3, sp, #4
 8010e5a:	f7ff ffc9 	bl	8010df0 <__swhatbuf_r>
 8010e5e:	9f00      	ldr	r7, [sp, #0]
 8010e60:	4605      	mov	r5, r0
 8010e62:	4639      	mov	r1, r7
 8010e64:	4630      	mov	r0, r6
 8010e66:	f7fd fa0b 	bl	800e280 <_malloc_r>
 8010e6a:	b948      	cbnz	r0, 8010e80 <__smakebuf_r+0x46>
 8010e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e70:	059a      	lsls	r2, r3, #22
 8010e72:	d4ee      	bmi.n	8010e52 <__smakebuf_r+0x18>
 8010e74:	f023 0303 	bic.w	r3, r3, #3
 8010e78:	f043 0302 	orr.w	r3, r3, #2
 8010e7c:	81a3      	strh	r3, [r4, #12]
 8010e7e:	e7e2      	b.n	8010e46 <__smakebuf_r+0xc>
 8010e80:	89a3      	ldrh	r3, [r4, #12]
 8010e82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e8a:	81a3      	strh	r3, [r4, #12]
 8010e8c:	9b01      	ldr	r3, [sp, #4]
 8010e8e:	6020      	str	r0, [r4, #0]
 8010e90:	b15b      	cbz	r3, 8010eaa <__smakebuf_r+0x70>
 8010e92:	4630      	mov	r0, r6
 8010e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e98:	f000 f81e 	bl	8010ed8 <_isatty_r>
 8010e9c:	b128      	cbz	r0, 8010eaa <__smakebuf_r+0x70>
 8010e9e:	89a3      	ldrh	r3, [r4, #12]
 8010ea0:	f023 0303 	bic.w	r3, r3, #3
 8010ea4:	f043 0301 	orr.w	r3, r3, #1
 8010ea8:	81a3      	strh	r3, [r4, #12]
 8010eaa:	89a3      	ldrh	r3, [r4, #12]
 8010eac:	431d      	orrs	r5, r3
 8010eae:	81a5      	strh	r5, [r4, #12]
 8010eb0:	e7cf      	b.n	8010e52 <__smakebuf_r+0x18>
	...

08010eb4 <_fstat_r>:
 8010eb4:	b538      	push	{r3, r4, r5, lr}
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	4d06      	ldr	r5, [pc, #24]	@ (8010ed4 <_fstat_r+0x20>)
 8010eba:	4604      	mov	r4, r0
 8010ebc:	4608      	mov	r0, r1
 8010ebe:	4611      	mov	r1, r2
 8010ec0:	602b      	str	r3, [r5, #0]
 8010ec2:	f7f2 fd8d 	bl	80039e0 <_fstat>
 8010ec6:	1c43      	adds	r3, r0, #1
 8010ec8:	d102      	bne.n	8010ed0 <_fstat_r+0x1c>
 8010eca:	682b      	ldr	r3, [r5, #0]
 8010ecc:	b103      	cbz	r3, 8010ed0 <_fstat_r+0x1c>
 8010ece:	6023      	str	r3, [r4, #0]
 8010ed0:	bd38      	pop	{r3, r4, r5, pc}
 8010ed2:	bf00      	nop
 8010ed4:	20002b1c 	.word	0x20002b1c

08010ed8 <_isatty_r>:
 8010ed8:	b538      	push	{r3, r4, r5, lr}
 8010eda:	2300      	movs	r3, #0
 8010edc:	4d05      	ldr	r5, [pc, #20]	@ (8010ef4 <_isatty_r+0x1c>)
 8010ede:	4604      	mov	r4, r0
 8010ee0:	4608      	mov	r0, r1
 8010ee2:	602b      	str	r3, [r5, #0]
 8010ee4:	f7f2 fd8b 	bl	80039fe <_isatty>
 8010ee8:	1c43      	adds	r3, r0, #1
 8010eea:	d102      	bne.n	8010ef2 <_isatty_r+0x1a>
 8010eec:	682b      	ldr	r3, [r5, #0]
 8010eee:	b103      	cbz	r3, 8010ef2 <_isatty_r+0x1a>
 8010ef0:	6023      	str	r3, [r4, #0]
 8010ef2:	bd38      	pop	{r3, r4, r5, pc}
 8010ef4:	20002b1c 	.word	0x20002b1c

08010ef8 <pow>:
 8010ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010efc:	4614      	mov	r4, r2
 8010efe:	461d      	mov	r5, r3
 8010f00:	4680      	mov	r8, r0
 8010f02:	4689      	mov	r9, r1
 8010f04:	f000 f868 	bl	8010fd8 <__ieee754_pow>
 8010f08:	4622      	mov	r2, r4
 8010f0a:	4606      	mov	r6, r0
 8010f0c:	460f      	mov	r7, r1
 8010f0e:	462b      	mov	r3, r5
 8010f10:	4620      	mov	r0, r4
 8010f12:	4629      	mov	r1, r5
 8010f14:	f7ef fd7a 	bl	8000a0c <__aeabi_dcmpun>
 8010f18:	bbc8      	cbnz	r0, 8010f8e <pow+0x96>
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	4640      	mov	r0, r8
 8010f20:	4649      	mov	r1, r9
 8010f22:	f7ef fd41 	bl	80009a8 <__aeabi_dcmpeq>
 8010f26:	b1b8      	cbz	r0, 8010f58 <pow+0x60>
 8010f28:	2200      	movs	r2, #0
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	4629      	mov	r1, r5
 8010f30:	f7ef fd3a 	bl	80009a8 <__aeabi_dcmpeq>
 8010f34:	2800      	cmp	r0, #0
 8010f36:	d141      	bne.n	8010fbc <pow+0xc4>
 8010f38:	4620      	mov	r0, r4
 8010f3a:	4629      	mov	r1, r5
 8010f3c:	f000 f844 	bl	8010fc8 <finite>
 8010f40:	b328      	cbz	r0, 8010f8e <pow+0x96>
 8010f42:	2200      	movs	r2, #0
 8010f44:	2300      	movs	r3, #0
 8010f46:	4620      	mov	r0, r4
 8010f48:	4629      	mov	r1, r5
 8010f4a:	f7ef fd37 	bl	80009bc <__aeabi_dcmplt>
 8010f4e:	b1f0      	cbz	r0, 8010f8e <pow+0x96>
 8010f50:	f7fe f81a 	bl	800ef88 <__errno>
 8010f54:	2322      	movs	r3, #34	@ 0x22
 8010f56:	e019      	b.n	8010f8c <pow+0x94>
 8010f58:	4630      	mov	r0, r6
 8010f5a:	4639      	mov	r1, r7
 8010f5c:	f000 f834 	bl	8010fc8 <finite>
 8010f60:	b9c8      	cbnz	r0, 8010f96 <pow+0x9e>
 8010f62:	4640      	mov	r0, r8
 8010f64:	4649      	mov	r1, r9
 8010f66:	f000 f82f 	bl	8010fc8 <finite>
 8010f6a:	b1a0      	cbz	r0, 8010f96 <pow+0x9e>
 8010f6c:	4620      	mov	r0, r4
 8010f6e:	4629      	mov	r1, r5
 8010f70:	f000 f82a 	bl	8010fc8 <finite>
 8010f74:	b178      	cbz	r0, 8010f96 <pow+0x9e>
 8010f76:	4632      	mov	r2, r6
 8010f78:	463b      	mov	r3, r7
 8010f7a:	4630      	mov	r0, r6
 8010f7c:	4639      	mov	r1, r7
 8010f7e:	f7ef fd45 	bl	8000a0c <__aeabi_dcmpun>
 8010f82:	2800      	cmp	r0, #0
 8010f84:	d0e4      	beq.n	8010f50 <pow+0x58>
 8010f86:	f7fd ffff 	bl	800ef88 <__errno>
 8010f8a:	2321      	movs	r3, #33	@ 0x21
 8010f8c:	6003      	str	r3, [r0, #0]
 8010f8e:	4630      	mov	r0, r6
 8010f90:	4639      	mov	r1, r7
 8010f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f96:	2200      	movs	r2, #0
 8010f98:	2300      	movs	r3, #0
 8010f9a:	4630      	mov	r0, r6
 8010f9c:	4639      	mov	r1, r7
 8010f9e:	f7ef fd03 	bl	80009a8 <__aeabi_dcmpeq>
 8010fa2:	2800      	cmp	r0, #0
 8010fa4:	d0f3      	beq.n	8010f8e <pow+0x96>
 8010fa6:	4640      	mov	r0, r8
 8010fa8:	4649      	mov	r1, r9
 8010faa:	f000 f80d 	bl	8010fc8 <finite>
 8010fae:	2800      	cmp	r0, #0
 8010fb0:	d0ed      	beq.n	8010f8e <pow+0x96>
 8010fb2:	4620      	mov	r0, r4
 8010fb4:	4629      	mov	r1, r5
 8010fb6:	f000 f807 	bl	8010fc8 <finite>
 8010fba:	e7c8      	b.n	8010f4e <pow+0x56>
 8010fbc:	2600      	movs	r6, #0
 8010fbe:	4f01      	ldr	r7, [pc, #4]	@ (8010fc4 <pow+0xcc>)
 8010fc0:	e7e5      	b.n	8010f8e <pow+0x96>
 8010fc2:	bf00      	nop
 8010fc4:	3ff00000 	.word	0x3ff00000

08010fc8 <finite>:
 8010fc8:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8010fcc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8010fd0:	0fc0      	lsrs	r0, r0, #31
 8010fd2:	4770      	bx	lr
 8010fd4:	0000      	movs	r0, r0
	...

08010fd8 <__ieee754_pow>:
 8010fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fdc:	b091      	sub	sp, #68	@ 0x44
 8010fde:	e9cd 2300 	strd	r2, r3, [sp]
 8010fe2:	468b      	mov	fp, r1
 8010fe4:	e9dd 1800 	ldrd	r1, r8, [sp]
 8010fe8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8010fec:	4682      	mov	sl, r0
 8010fee:	ea57 0001 	orrs.w	r0, r7, r1
 8010ff2:	d112      	bne.n	801101a <__ieee754_pow+0x42>
 8010ff4:	4653      	mov	r3, sl
 8010ff6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8010ffa:	18db      	adds	r3, r3, r3
 8010ffc:	4152      	adcs	r2, r2
 8010ffe:	4298      	cmp	r0, r3
 8011000:	4b91      	ldr	r3, [pc, #580]	@ (8011248 <__ieee754_pow+0x270>)
 8011002:	4193      	sbcs	r3, r2
 8011004:	f080 84ce 	bcs.w	80119a4 <__ieee754_pow+0x9cc>
 8011008:	e9dd 2300 	ldrd	r2, r3, [sp]
 801100c:	4650      	mov	r0, sl
 801100e:	4659      	mov	r1, fp
 8011010:	f7ef f8ac 	bl	800016c <__adddf3>
 8011014:	b011      	add	sp, #68	@ 0x44
 8011016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801101a:	4b8c      	ldr	r3, [pc, #560]	@ (801124c <__ieee754_pow+0x274>)
 801101c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8011020:	429e      	cmp	r6, r3
 8011022:	465d      	mov	r5, fp
 8011024:	46d1      	mov	r9, sl
 8011026:	d807      	bhi.n	8011038 <__ieee754_pow+0x60>
 8011028:	d102      	bne.n	8011030 <__ieee754_pow+0x58>
 801102a:	f1ba 0f00 	cmp.w	sl, #0
 801102e:	d1eb      	bne.n	8011008 <__ieee754_pow+0x30>
 8011030:	429f      	cmp	r7, r3
 8011032:	d801      	bhi.n	8011038 <__ieee754_pow+0x60>
 8011034:	d10f      	bne.n	8011056 <__ieee754_pow+0x7e>
 8011036:	b171      	cbz	r1, 8011056 <__ieee754_pow+0x7e>
 8011038:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801103c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8011040:	ea55 0509 	orrs.w	r5, r5, r9
 8011044:	d1e0      	bne.n	8011008 <__ieee754_pow+0x30>
 8011046:	e9dd 3200 	ldrd	r3, r2, [sp]
 801104a:	18db      	adds	r3, r3, r3
 801104c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8011050:	4152      	adcs	r2, r2
 8011052:	429d      	cmp	r5, r3
 8011054:	e7d4      	b.n	8011000 <__ieee754_pow+0x28>
 8011056:	2d00      	cmp	r5, #0
 8011058:	4633      	mov	r3, r6
 801105a:	da39      	bge.n	80110d0 <__ieee754_pow+0xf8>
 801105c:	4a7c      	ldr	r2, [pc, #496]	@ (8011250 <__ieee754_pow+0x278>)
 801105e:	4297      	cmp	r7, r2
 8011060:	d84e      	bhi.n	8011100 <__ieee754_pow+0x128>
 8011062:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8011066:	4297      	cmp	r7, r2
 8011068:	f240 84ab 	bls.w	80119c2 <__ieee754_pow+0x9ea>
 801106c:	153a      	asrs	r2, r7, #20
 801106e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8011072:	2a14      	cmp	r2, #20
 8011074:	dd0f      	ble.n	8011096 <__ieee754_pow+0xbe>
 8011076:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801107a:	fa21 f402 	lsr.w	r4, r1, r2
 801107e:	fa04 f202 	lsl.w	r2, r4, r2
 8011082:	428a      	cmp	r2, r1
 8011084:	f040 849d 	bne.w	80119c2 <__ieee754_pow+0x9ea>
 8011088:	f004 0401 	and.w	r4, r4, #1
 801108c:	f1c4 0402 	rsb	r4, r4, #2
 8011090:	2900      	cmp	r1, #0
 8011092:	d15a      	bne.n	801114a <__ieee754_pow+0x172>
 8011094:	e00e      	b.n	80110b4 <__ieee754_pow+0xdc>
 8011096:	2900      	cmp	r1, #0
 8011098:	d156      	bne.n	8011148 <__ieee754_pow+0x170>
 801109a:	f1c2 0214 	rsb	r2, r2, #20
 801109e:	fa47 f402 	asr.w	r4, r7, r2
 80110a2:	fa04 f202 	lsl.w	r2, r4, r2
 80110a6:	42ba      	cmp	r2, r7
 80110a8:	f040 8488 	bne.w	80119bc <__ieee754_pow+0x9e4>
 80110ac:	f004 0401 	and.w	r4, r4, #1
 80110b0:	f1c4 0402 	rsb	r4, r4, #2
 80110b4:	4a67      	ldr	r2, [pc, #412]	@ (8011254 <__ieee754_pow+0x27c>)
 80110b6:	4297      	cmp	r7, r2
 80110b8:	d130      	bne.n	801111c <__ieee754_pow+0x144>
 80110ba:	f1b8 0f00 	cmp.w	r8, #0
 80110be:	f280 8479 	bge.w	80119b4 <__ieee754_pow+0x9dc>
 80110c2:	4652      	mov	r2, sl
 80110c4:	465b      	mov	r3, fp
 80110c6:	2000      	movs	r0, #0
 80110c8:	4962      	ldr	r1, [pc, #392]	@ (8011254 <__ieee754_pow+0x27c>)
 80110ca:	f7ef fb2f 	bl	800072c <__aeabi_ddiv>
 80110ce:	e7a1      	b.n	8011014 <__ieee754_pow+0x3c>
 80110d0:	2400      	movs	r4, #0
 80110d2:	2900      	cmp	r1, #0
 80110d4:	d139      	bne.n	801114a <__ieee754_pow+0x172>
 80110d6:	4a5d      	ldr	r2, [pc, #372]	@ (801124c <__ieee754_pow+0x274>)
 80110d8:	4297      	cmp	r7, r2
 80110da:	d1eb      	bne.n	80110b4 <__ieee754_pow+0xdc>
 80110dc:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 80110e0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80110e4:	ea53 0309 	orrs.w	r3, r3, r9
 80110e8:	f000 845c 	beq.w	80119a4 <__ieee754_pow+0x9cc>
 80110ec:	4b5a      	ldr	r3, [pc, #360]	@ (8011258 <__ieee754_pow+0x280>)
 80110ee:	429e      	cmp	r6, r3
 80110f0:	d908      	bls.n	8011104 <__ieee754_pow+0x12c>
 80110f2:	f1b8 0f00 	cmp.w	r8, #0
 80110f6:	f2c0 8459 	blt.w	80119ac <__ieee754_pow+0x9d4>
 80110fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80110fe:	e789      	b.n	8011014 <__ieee754_pow+0x3c>
 8011100:	2402      	movs	r4, #2
 8011102:	e7e6      	b.n	80110d2 <__ieee754_pow+0xfa>
 8011104:	f1b8 0f00 	cmp.w	r8, #0
 8011108:	f04f 0000 	mov.w	r0, #0
 801110c:	f04f 0100 	mov.w	r1, #0
 8011110:	da80      	bge.n	8011014 <__ieee754_pow+0x3c>
 8011112:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011116:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801111a:	e77b      	b.n	8011014 <__ieee754_pow+0x3c>
 801111c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8011120:	d106      	bne.n	8011130 <__ieee754_pow+0x158>
 8011122:	4652      	mov	r2, sl
 8011124:	465b      	mov	r3, fp
 8011126:	4650      	mov	r0, sl
 8011128:	4659      	mov	r1, fp
 801112a:	f7ef f9d5 	bl	80004d8 <__aeabi_dmul>
 801112e:	e771      	b.n	8011014 <__ieee754_pow+0x3c>
 8011130:	4a4a      	ldr	r2, [pc, #296]	@ (801125c <__ieee754_pow+0x284>)
 8011132:	4590      	cmp	r8, r2
 8011134:	d109      	bne.n	801114a <__ieee754_pow+0x172>
 8011136:	2d00      	cmp	r5, #0
 8011138:	db07      	blt.n	801114a <__ieee754_pow+0x172>
 801113a:	4650      	mov	r0, sl
 801113c:	4659      	mov	r1, fp
 801113e:	b011      	add	sp, #68	@ 0x44
 8011140:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011144:	f000 bd12 	b.w	8011b6c <__ieee754_sqrt>
 8011148:	2400      	movs	r4, #0
 801114a:	4650      	mov	r0, sl
 801114c:	4659      	mov	r1, fp
 801114e:	9302      	str	r3, [sp, #8]
 8011150:	f000 fc6a 	bl	8011a28 <fabs>
 8011154:	9b02      	ldr	r3, [sp, #8]
 8011156:	f1b9 0f00 	cmp.w	r9, #0
 801115a:	d127      	bne.n	80111ac <__ieee754_pow+0x1d4>
 801115c:	4a3d      	ldr	r2, [pc, #244]	@ (8011254 <__ieee754_pow+0x27c>)
 801115e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8011162:	4594      	cmp	ip, r2
 8011164:	d000      	beq.n	8011168 <__ieee754_pow+0x190>
 8011166:	bb0e      	cbnz	r6, 80111ac <__ieee754_pow+0x1d4>
 8011168:	f1b8 0f00 	cmp.w	r8, #0
 801116c:	da05      	bge.n	801117a <__ieee754_pow+0x1a2>
 801116e:	4602      	mov	r2, r0
 8011170:	460b      	mov	r3, r1
 8011172:	2000      	movs	r0, #0
 8011174:	4937      	ldr	r1, [pc, #220]	@ (8011254 <__ieee754_pow+0x27c>)
 8011176:	f7ef fad9 	bl	800072c <__aeabi_ddiv>
 801117a:	2d00      	cmp	r5, #0
 801117c:	f6bf af4a 	bge.w	8011014 <__ieee754_pow+0x3c>
 8011180:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8011184:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8011188:	4326      	orrs	r6, r4
 801118a:	d108      	bne.n	801119e <__ieee754_pow+0x1c6>
 801118c:	4602      	mov	r2, r0
 801118e:	460b      	mov	r3, r1
 8011190:	4610      	mov	r0, r2
 8011192:	4619      	mov	r1, r3
 8011194:	f7ee ffe8 	bl	8000168 <__aeabi_dsub>
 8011198:	4602      	mov	r2, r0
 801119a:	460b      	mov	r3, r1
 801119c:	e795      	b.n	80110ca <__ieee754_pow+0xf2>
 801119e:	2c01      	cmp	r4, #1
 80111a0:	f47f af38 	bne.w	8011014 <__ieee754_pow+0x3c>
 80111a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80111a8:	4619      	mov	r1, r3
 80111aa:	e733      	b.n	8011014 <__ieee754_pow+0x3c>
 80111ac:	0fea      	lsrs	r2, r5, #31
 80111ae:	3a01      	subs	r2, #1
 80111b0:	ea52 0c04 	orrs.w	ip, r2, r4
 80111b4:	d102      	bne.n	80111bc <__ieee754_pow+0x1e4>
 80111b6:	4652      	mov	r2, sl
 80111b8:	465b      	mov	r3, fp
 80111ba:	e7e9      	b.n	8011190 <__ieee754_pow+0x1b8>
 80111bc:	f04f 0900 	mov.w	r9, #0
 80111c0:	3c01      	subs	r4, #1
 80111c2:	4314      	orrs	r4, r2
 80111c4:	bf14      	ite	ne
 80111c6:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8011254 <__ieee754_pow+0x27c>
 80111ca:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8011260 <__ieee754_pow+0x288>
 80111ce:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80111d2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80111d6:	f240 8107 	bls.w	80113e8 <__ieee754_pow+0x410>
 80111da:	4b22      	ldr	r3, [pc, #136]	@ (8011264 <__ieee754_pow+0x28c>)
 80111dc:	429f      	cmp	r7, r3
 80111de:	4b1e      	ldr	r3, [pc, #120]	@ (8011258 <__ieee754_pow+0x280>)
 80111e0:	d913      	bls.n	801120a <__ieee754_pow+0x232>
 80111e2:	429e      	cmp	r6, r3
 80111e4:	d808      	bhi.n	80111f8 <__ieee754_pow+0x220>
 80111e6:	f1b8 0f00 	cmp.w	r8, #0
 80111ea:	da08      	bge.n	80111fe <__ieee754_pow+0x226>
 80111ec:	2000      	movs	r0, #0
 80111ee:	b011      	add	sp, #68	@ 0x44
 80111f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f4:	f000 bcb4 	b.w	8011b60 <__math_oflow>
 80111f8:	f1b8 0f00 	cmp.w	r8, #0
 80111fc:	dcf6      	bgt.n	80111ec <__ieee754_pow+0x214>
 80111fe:	2000      	movs	r0, #0
 8011200:	b011      	add	sp, #68	@ 0x44
 8011202:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011206:	f000 bca6 	b.w	8011b56 <__math_uflow>
 801120a:	429e      	cmp	r6, r3
 801120c:	d20c      	bcs.n	8011228 <__ieee754_pow+0x250>
 801120e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011212:	2200      	movs	r2, #0
 8011214:	2300      	movs	r3, #0
 8011216:	f7ef fbd1 	bl	80009bc <__aeabi_dcmplt>
 801121a:	3800      	subs	r0, #0
 801121c:	bf18      	it	ne
 801121e:	2001      	movne	r0, #1
 8011220:	f1b8 0f00 	cmp.w	r8, #0
 8011224:	daec      	bge.n	8011200 <__ieee754_pow+0x228>
 8011226:	e7e2      	b.n	80111ee <__ieee754_pow+0x216>
 8011228:	4b0a      	ldr	r3, [pc, #40]	@ (8011254 <__ieee754_pow+0x27c>)
 801122a:	2200      	movs	r2, #0
 801122c:	429e      	cmp	r6, r3
 801122e:	d91b      	bls.n	8011268 <__ieee754_pow+0x290>
 8011230:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011234:	2300      	movs	r3, #0
 8011236:	f7ef fbc1 	bl	80009bc <__aeabi_dcmplt>
 801123a:	3800      	subs	r0, #0
 801123c:	bf18      	it	ne
 801123e:	2001      	movne	r0, #1
 8011240:	f1b8 0f00 	cmp.w	r8, #0
 8011244:	dcd3      	bgt.n	80111ee <__ieee754_pow+0x216>
 8011246:	e7db      	b.n	8011200 <__ieee754_pow+0x228>
 8011248:	fff00000 	.word	0xfff00000
 801124c:	7ff00000 	.word	0x7ff00000
 8011250:	433fffff 	.word	0x433fffff
 8011254:	3ff00000 	.word	0x3ff00000
 8011258:	3fefffff 	.word	0x3fefffff
 801125c:	3fe00000 	.word	0x3fe00000
 8011260:	bff00000 	.word	0xbff00000
 8011264:	43f00000 	.word	0x43f00000
 8011268:	4b5b      	ldr	r3, [pc, #364]	@ (80113d8 <__ieee754_pow+0x400>)
 801126a:	f7ee ff7d 	bl	8000168 <__aeabi_dsub>
 801126e:	a352      	add	r3, pc, #328	@ (adr r3, 80113b8 <__ieee754_pow+0x3e0>)
 8011270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011274:	4604      	mov	r4, r0
 8011276:	460d      	mov	r5, r1
 8011278:	f7ef f92e 	bl	80004d8 <__aeabi_dmul>
 801127c:	a350      	add	r3, pc, #320	@ (adr r3, 80113c0 <__ieee754_pow+0x3e8>)
 801127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011282:	4606      	mov	r6, r0
 8011284:	460f      	mov	r7, r1
 8011286:	4620      	mov	r0, r4
 8011288:	4629      	mov	r1, r5
 801128a:	f7ef f925 	bl	80004d8 <__aeabi_dmul>
 801128e:	2200      	movs	r2, #0
 8011290:	4682      	mov	sl, r0
 8011292:	468b      	mov	fp, r1
 8011294:	4620      	mov	r0, r4
 8011296:	4629      	mov	r1, r5
 8011298:	4b50      	ldr	r3, [pc, #320]	@ (80113dc <__ieee754_pow+0x404>)
 801129a:	f7ef f91d 	bl	80004d8 <__aeabi_dmul>
 801129e:	4602      	mov	r2, r0
 80112a0:	460b      	mov	r3, r1
 80112a2:	a149      	add	r1, pc, #292	@ (adr r1, 80113c8 <__ieee754_pow+0x3f0>)
 80112a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112a8:	f7ee ff5e 	bl	8000168 <__aeabi_dsub>
 80112ac:	4622      	mov	r2, r4
 80112ae:	462b      	mov	r3, r5
 80112b0:	f7ef f912 	bl	80004d8 <__aeabi_dmul>
 80112b4:	4602      	mov	r2, r0
 80112b6:	460b      	mov	r3, r1
 80112b8:	2000      	movs	r0, #0
 80112ba:	4949      	ldr	r1, [pc, #292]	@ (80113e0 <__ieee754_pow+0x408>)
 80112bc:	f7ee ff54 	bl	8000168 <__aeabi_dsub>
 80112c0:	4622      	mov	r2, r4
 80112c2:	4680      	mov	r8, r0
 80112c4:	4689      	mov	r9, r1
 80112c6:	462b      	mov	r3, r5
 80112c8:	4620      	mov	r0, r4
 80112ca:	4629      	mov	r1, r5
 80112cc:	f7ef f904 	bl	80004d8 <__aeabi_dmul>
 80112d0:	4602      	mov	r2, r0
 80112d2:	460b      	mov	r3, r1
 80112d4:	4640      	mov	r0, r8
 80112d6:	4649      	mov	r1, r9
 80112d8:	f7ef f8fe 	bl	80004d8 <__aeabi_dmul>
 80112dc:	a33c      	add	r3, pc, #240	@ (adr r3, 80113d0 <__ieee754_pow+0x3f8>)
 80112de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e2:	f7ef f8f9 	bl	80004d8 <__aeabi_dmul>
 80112e6:	4602      	mov	r2, r0
 80112e8:	460b      	mov	r3, r1
 80112ea:	4650      	mov	r0, sl
 80112ec:	4659      	mov	r1, fp
 80112ee:	f7ee ff3b 	bl	8000168 <__aeabi_dsub>
 80112f2:	2400      	movs	r4, #0
 80112f4:	4602      	mov	r2, r0
 80112f6:	460b      	mov	r3, r1
 80112f8:	4680      	mov	r8, r0
 80112fa:	4689      	mov	r9, r1
 80112fc:	4630      	mov	r0, r6
 80112fe:	4639      	mov	r1, r7
 8011300:	f7ee ff34 	bl	800016c <__adddf3>
 8011304:	4632      	mov	r2, r6
 8011306:	463b      	mov	r3, r7
 8011308:	4620      	mov	r0, r4
 801130a:	460d      	mov	r5, r1
 801130c:	f7ee ff2c 	bl	8000168 <__aeabi_dsub>
 8011310:	4602      	mov	r2, r0
 8011312:	460b      	mov	r3, r1
 8011314:	4640      	mov	r0, r8
 8011316:	4649      	mov	r1, r9
 8011318:	f7ee ff26 	bl	8000168 <__aeabi_dsub>
 801131c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011320:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011324:	2300      	movs	r3, #0
 8011326:	9304      	str	r3, [sp, #16]
 8011328:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801132c:	4606      	mov	r6, r0
 801132e:	460f      	mov	r7, r1
 8011330:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011334:	4652      	mov	r2, sl
 8011336:	465b      	mov	r3, fp
 8011338:	f7ee ff16 	bl	8000168 <__aeabi_dsub>
 801133c:	4622      	mov	r2, r4
 801133e:	462b      	mov	r3, r5
 8011340:	f7ef f8ca 	bl	80004d8 <__aeabi_dmul>
 8011344:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011348:	4680      	mov	r8, r0
 801134a:	4689      	mov	r9, r1
 801134c:	4630      	mov	r0, r6
 801134e:	4639      	mov	r1, r7
 8011350:	f7ef f8c2 	bl	80004d8 <__aeabi_dmul>
 8011354:	4602      	mov	r2, r0
 8011356:	460b      	mov	r3, r1
 8011358:	4640      	mov	r0, r8
 801135a:	4649      	mov	r1, r9
 801135c:	f7ee ff06 	bl	800016c <__adddf3>
 8011360:	4652      	mov	r2, sl
 8011362:	465b      	mov	r3, fp
 8011364:	4606      	mov	r6, r0
 8011366:	460f      	mov	r7, r1
 8011368:	4620      	mov	r0, r4
 801136a:	4629      	mov	r1, r5
 801136c:	f7ef f8b4 	bl	80004d8 <__aeabi_dmul>
 8011370:	460b      	mov	r3, r1
 8011372:	4602      	mov	r2, r0
 8011374:	4680      	mov	r8, r0
 8011376:	4689      	mov	r9, r1
 8011378:	4630      	mov	r0, r6
 801137a:	4639      	mov	r1, r7
 801137c:	f7ee fef6 	bl	800016c <__adddf3>
 8011380:	4b18      	ldr	r3, [pc, #96]	@ (80113e4 <__ieee754_pow+0x40c>)
 8011382:	4604      	mov	r4, r0
 8011384:	4299      	cmp	r1, r3
 8011386:	460d      	mov	r5, r1
 8011388:	468a      	mov	sl, r1
 801138a:	468b      	mov	fp, r1
 801138c:	f340 82e0 	ble.w	8011950 <__ieee754_pow+0x978>
 8011390:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8011394:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8011398:	4303      	orrs	r3, r0
 801139a:	f000 81df 	beq.w	801175c <__ieee754_pow+0x784>
 801139e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113a2:	2200      	movs	r2, #0
 80113a4:	2300      	movs	r3, #0
 80113a6:	f7ef fb09 	bl	80009bc <__aeabi_dcmplt>
 80113aa:	3800      	subs	r0, #0
 80113ac:	bf18      	it	ne
 80113ae:	2001      	movne	r0, #1
 80113b0:	e71d      	b.n	80111ee <__ieee754_pow+0x216>
 80113b2:	bf00      	nop
 80113b4:	f3af 8000 	nop.w
 80113b8:	60000000 	.word	0x60000000
 80113bc:	3ff71547 	.word	0x3ff71547
 80113c0:	f85ddf44 	.word	0xf85ddf44
 80113c4:	3e54ae0b 	.word	0x3e54ae0b
 80113c8:	55555555 	.word	0x55555555
 80113cc:	3fd55555 	.word	0x3fd55555
 80113d0:	652b82fe 	.word	0x652b82fe
 80113d4:	3ff71547 	.word	0x3ff71547
 80113d8:	3ff00000 	.word	0x3ff00000
 80113dc:	3fd00000 	.word	0x3fd00000
 80113e0:	3fe00000 	.word	0x3fe00000
 80113e4:	408fffff 	.word	0x408fffff
 80113e8:	4ad3      	ldr	r2, [pc, #844]	@ (8011738 <__ieee754_pow+0x760>)
 80113ea:	402a      	ands	r2, r5
 80113ec:	2a00      	cmp	r2, #0
 80113ee:	f040 817a 	bne.w	80116e6 <__ieee754_pow+0x70e>
 80113f2:	4bd2      	ldr	r3, [pc, #840]	@ (801173c <__ieee754_pow+0x764>)
 80113f4:	2200      	movs	r2, #0
 80113f6:	f7ef f86f 	bl	80004d8 <__aeabi_dmul>
 80113fa:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80113fe:	460b      	mov	r3, r1
 8011400:	151a      	asrs	r2, r3, #20
 8011402:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8011406:	4422      	add	r2, r4
 8011408:	920a      	str	r2, [sp, #40]	@ 0x28
 801140a:	4acd      	ldr	r2, [pc, #820]	@ (8011740 <__ieee754_pow+0x768>)
 801140c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011410:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8011414:	4293      	cmp	r3, r2
 8011416:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801141a:	dd08      	ble.n	801142e <__ieee754_pow+0x456>
 801141c:	4ac9      	ldr	r2, [pc, #804]	@ (8011744 <__ieee754_pow+0x76c>)
 801141e:	4293      	cmp	r3, r2
 8011420:	f340 8163 	ble.w	80116ea <__ieee754_pow+0x712>
 8011424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011426:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801142a:	3301      	adds	r3, #1
 801142c:	930a      	str	r3, [sp, #40]	@ 0x28
 801142e:	2600      	movs	r6, #0
 8011430:	00f3      	lsls	r3, r6, #3
 8011432:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011434:	4bc4      	ldr	r3, [pc, #784]	@ (8011748 <__ieee754_pow+0x770>)
 8011436:	4629      	mov	r1, r5
 8011438:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801143c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011440:	461a      	mov	r2, r3
 8011442:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8011446:	4623      	mov	r3, r4
 8011448:	4682      	mov	sl, r0
 801144a:	f7ee fe8d 	bl	8000168 <__aeabi_dsub>
 801144e:	4652      	mov	r2, sl
 8011450:	462b      	mov	r3, r5
 8011452:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8011456:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801145a:	f7ee fe87 	bl	800016c <__adddf3>
 801145e:	4602      	mov	r2, r0
 8011460:	460b      	mov	r3, r1
 8011462:	2000      	movs	r0, #0
 8011464:	49b9      	ldr	r1, [pc, #740]	@ (801174c <__ieee754_pow+0x774>)
 8011466:	f7ef f961 	bl	800072c <__aeabi_ddiv>
 801146a:	4602      	mov	r2, r0
 801146c:	460b      	mov	r3, r1
 801146e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011472:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011476:	f7ef f82f 	bl	80004d8 <__aeabi_dmul>
 801147a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801147e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8011482:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011486:	2300      	movs	r3, #0
 8011488:	2200      	movs	r2, #0
 801148a:	46ab      	mov	fp, r5
 801148c:	106d      	asrs	r5, r5, #1
 801148e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8011492:	9304      	str	r3, [sp, #16]
 8011494:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8011498:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801149c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80114a0:	4640      	mov	r0, r8
 80114a2:	4649      	mov	r1, r9
 80114a4:	4614      	mov	r4, r2
 80114a6:	461d      	mov	r5, r3
 80114a8:	f7ef f816 	bl	80004d8 <__aeabi_dmul>
 80114ac:	4602      	mov	r2, r0
 80114ae:	460b      	mov	r3, r1
 80114b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80114b4:	f7ee fe58 	bl	8000168 <__aeabi_dsub>
 80114b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80114bc:	4606      	mov	r6, r0
 80114be:	460f      	mov	r7, r1
 80114c0:	4620      	mov	r0, r4
 80114c2:	4629      	mov	r1, r5
 80114c4:	f7ee fe50 	bl	8000168 <__aeabi_dsub>
 80114c8:	4602      	mov	r2, r0
 80114ca:	460b      	mov	r3, r1
 80114cc:	4650      	mov	r0, sl
 80114ce:	4659      	mov	r1, fp
 80114d0:	f7ee fe4a 	bl	8000168 <__aeabi_dsub>
 80114d4:	4642      	mov	r2, r8
 80114d6:	464b      	mov	r3, r9
 80114d8:	f7ee fffe 	bl	80004d8 <__aeabi_dmul>
 80114dc:	4602      	mov	r2, r0
 80114de:	460b      	mov	r3, r1
 80114e0:	4630      	mov	r0, r6
 80114e2:	4639      	mov	r1, r7
 80114e4:	f7ee fe40 	bl	8000168 <__aeabi_dsub>
 80114e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80114ec:	f7ee fff4 	bl	80004d8 <__aeabi_dmul>
 80114f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80114f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80114f8:	4610      	mov	r0, r2
 80114fa:	4619      	mov	r1, r3
 80114fc:	f7ee ffec 	bl	80004d8 <__aeabi_dmul>
 8011500:	a37b      	add	r3, pc, #492	@ (adr r3, 80116f0 <__ieee754_pow+0x718>)
 8011502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011506:	4604      	mov	r4, r0
 8011508:	460d      	mov	r5, r1
 801150a:	f7ee ffe5 	bl	80004d8 <__aeabi_dmul>
 801150e:	a37a      	add	r3, pc, #488	@ (adr r3, 80116f8 <__ieee754_pow+0x720>)
 8011510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011514:	f7ee fe2a 	bl	800016c <__adddf3>
 8011518:	4622      	mov	r2, r4
 801151a:	462b      	mov	r3, r5
 801151c:	f7ee ffdc 	bl	80004d8 <__aeabi_dmul>
 8011520:	a377      	add	r3, pc, #476	@ (adr r3, 8011700 <__ieee754_pow+0x728>)
 8011522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011526:	f7ee fe21 	bl	800016c <__adddf3>
 801152a:	4622      	mov	r2, r4
 801152c:	462b      	mov	r3, r5
 801152e:	f7ee ffd3 	bl	80004d8 <__aeabi_dmul>
 8011532:	a375      	add	r3, pc, #468	@ (adr r3, 8011708 <__ieee754_pow+0x730>)
 8011534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011538:	f7ee fe18 	bl	800016c <__adddf3>
 801153c:	4622      	mov	r2, r4
 801153e:	462b      	mov	r3, r5
 8011540:	f7ee ffca 	bl	80004d8 <__aeabi_dmul>
 8011544:	a372      	add	r3, pc, #456	@ (adr r3, 8011710 <__ieee754_pow+0x738>)
 8011546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154a:	f7ee fe0f 	bl	800016c <__adddf3>
 801154e:	4622      	mov	r2, r4
 8011550:	462b      	mov	r3, r5
 8011552:	f7ee ffc1 	bl	80004d8 <__aeabi_dmul>
 8011556:	a370      	add	r3, pc, #448	@ (adr r3, 8011718 <__ieee754_pow+0x740>)
 8011558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801155c:	f7ee fe06 	bl	800016c <__adddf3>
 8011560:	4622      	mov	r2, r4
 8011562:	4606      	mov	r6, r0
 8011564:	460f      	mov	r7, r1
 8011566:	462b      	mov	r3, r5
 8011568:	4620      	mov	r0, r4
 801156a:	4629      	mov	r1, r5
 801156c:	f7ee ffb4 	bl	80004d8 <__aeabi_dmul>
 8011570:	4602      	mov	r2, r0
 8011572:	460b      	mov	r3, r1
 8011574:	4630      	mov	r0, r6
 8011576:	4639      	mov	r1, r7
 8011578:	f7ee ffae 	bl	80004d8 <__aeabi_dmul>
 801157c:	4604      	mov	r4, r0
 801157e:	460d      	mov	r5, r1
 8011580:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011584:	4642      	mov	r2, r8
 8011586:	464b      	mov	r3, r9
 8011588:	f7ee fdf0 	bl	800016c <__adddf3>
 801158c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011590:	f7ee ffa2 	bl	80004d8 <__aeabi_dmul>
 8011594:	4622      	mov	r2, r4
 8011596:	462b      	mov	r3, r5
 8011598:	f7ee fde8 	bl	800016c <__adddf3>
 801159c:	4642      	mov	r2, r8
 801159e:	4682      	mov	sl, r0
 80115a0:	468b      	mov	fp, r1
 80115a2:	464b      	mov	r3, r9
 80115a4:	4640      	mov	r0, r8
 80115a6:	4649      	mov	r1, r9
 80115a8:	f7ee ff96 	bl	80004d8 <__aeabi_dmul>
 80115ac:	2200      	movs	r2, #0
 80115ae:	4b68      	ldr	r3, [pc, #416]	@ (8011750 <__ieee754_pow+0x778>)
 80115b0:	4606      	mov	r6, r0
 80115b2:	460f      	mov	r7, r1
 80115b4:	f7ee fdda 	bl	800016c <__adddf3>
 80115b8:	4652      	mov	r2, sl
 80115ba:	465b      	mov	r3, fp
 80115bc:	f7ee fdd6 	bl	800016c <__adddf3>
 80115c0:	2400      	movs	r4, #0
 80115c2:	460d      	mov	r5, r1
 80115c4:	4622      	mov	r2, r4
 80115c6:	460b      	mov	r3, r1
 80115c8:	4640      	mov	r0, r8
 80115ca:	4649      	mov	r1, r9
 80115cc:	f7ee ff84 	bl	80004d8 <__aeabi_dmul>
 80115d0:	2200      	movs	r2, #0
 80115d2:	4680      	mov	r8, r0
 80115d4:	4689      	mov	r9, r1
 80115d6:	4620      	mov	r0, r4
 80115d8:	4629      	mov	r1, r5
 80115da:	4b5d      	ldr	r3, [pc, #372]	@ (8011750 <__ieee754_pow+0x778>)
 80115dc:	f7ee fdc4 	bl	8000168 <__aeabi_dsub>
 80115e0:	4632      	mov	r2, r6
 80115e2:	463b      	mov	r3, r7
 80115e4:	f7ee fdc0 	bl	8000168 <__aeabi_dsub>
 80115e8:	4602      	mov	r2, r0
 80115ea:	460b      	mov	r3, r1
 80115ec:	4650      	mov	r0, sl
 80115ee:	4659      	mov	r1, fp
 80115f0:	f7ee fdba 	bl	8000168 <__aeabi_dsub>
 80115f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80115f8:	f7ee ff6e 	bl	80004d8 <__aeabi_dmul>
 80115fc:	4622      	mov	r2, r4
 80115fe:	4606      	mov	r6, r0
 8011600:	460f      	mov	r7, r1
 8011602:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011606:	462b      	mov	r3, r5
 8011608:	f7ee ff66 	bl	80004d8 <__aeabi_dmul>
 801160c:	4602      	mov	r2, r0
 801160e:	460b      	mov	r3, r1
 8011610:	4630      	mov	r0, r6
 8011612:	4639      	mov	r1, r7
 8011614:	f7ee fdaa 	bl	800016c <__adddf3>
 8011618:	2400      	movs	r4, #0
 801161a:	4606      	mov	r6, r0
 801161c:	460f      	mov	r7, r1
 801161e:	4602      	mov	r2, r0
 8011620:	460b      	mov	r3, r1
 8011622:	4640      	mov	r0, r8
 8011624:	4649      	mov	r1, r9
 8011626:	f7ee fda1 	bl	800016c <__adddf3>
 801162a:	a33d      	add	r3, pc, #244	@ (adr r3, 8011720 <__ieee754_pow+0x748>)
 801162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011630:	4620      	mov	r0, r4
 8011632:	460d      	mov	r5, r1
 8011634:	f7ee ff50 	bl	80004d8 <__aeabi_dmul>
 8011638:	4642      	mov	r2, r8
 801163a:	464b      	mov	r3, r9
 801163c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011640:	4620      	mov	r0, r4
 8011642:	4629      	mov	r1, r5
 8011644:	f7ee fd90 	bl	8000168 <__aeabi_dsub>
 8011648:	4602      	mov	r2, r0
 801164a:	460b      	mov	r3, r1
 801164c:	4630      	mov	r0, r6
 801164e:	4639      	mov	r1, r7
 8011650:	f7ee fd8a 	bl	8000168 <__aeabi_dsub>
 8011654:	a334      	add	r3, pc, #208	@ (adr r3, 8011728 <__ieee754_pow+0x750>)
 8011656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165a:	f7ee ff3d 	bl	80004d8 <__aeabi_dmul>
 801165e:	a334      	add	r3, pc, #208	@ (adr r3, 8011730 <__ieee754_pow+0x758>)
 8011660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011664:	4606      	mov	r6, r0
 8011666:	460f      	mov	r7, r1
 8011668:	4620      	mov	r0, r4
 801166a:	4629      	mov	r1, r5
 801166c:	f7ee ff34 	bl	80004d8 <__aeabi_dmul>
 8011670:	4602      	mov	r2, r0
 8011672:	460b      	mov	r3, r1
 8011674:	4630      	mov	r0, r6
 8011676:	4639      	mov	r1, r7
 8011678:	f7ee fd78 	bl	800016c <__adddf3>
 801167c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801167e:	4b35      	ldr	r3, [pc, #212]	@ (8011754 <__ieee754_pow+0x77c>)
 8011680:	2400      	movs	r4, #0
 8011682:	4413      	add	r3, r2
 8011684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011688:	f7ee fd70 	bl	800016c <__adddf3>
 801168c:	4682      	mov	sl, r0
 801168e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011690:	468b      	mov	fp, r1
 8011692:	f7ee feb7 	bl	8000404 <__aeabi_i2d>
 8011696:	4606      	mov	r6, r0
 8011698:	460f      	mov	r7, r1
 801169a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801169c:	4b2e      	ldr	r3, [pc, #184]	@ (8011758 <__ieee754_pow+0x780>)
 801169e:	4413      	add	r3, r2
 80116a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80116a4:	4652      	mov	r2, sl
 80116a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80116aa:	465b      	mov	r3, fp
 80116ac:	f7ee fd5e 	bl	800016c <__adddf3>
 80116b0:	4642      	mov	r2, r8
 80116b2:	464b      	mov	r3, r9
 80116b4:	f7ee fd5a 	bl	800016c <__adddf3>
 80116b8:	4632      	mov	r2, r6
 80116ba:	463b      	mov	r3, r7
 80116bc:	f7ee fd56 	bl	800016c <__adddf3>
 80116c0:	4632      	mov	r2, r6
 80116c2:	463b      	mov	r3, r7
 80116c4:	4620      	mov	r0, r4
 80116c6:	460d      	mov	r5, r1
 80116c8:	f7ee fd4e 	bl	8000168 <__aeabi_dsub>
 80116cc:	4642      	mov	r2, r8
 80116ce:	464b      	mov	r3, r9
 80116d0:	f7ee fd4a 	bl	8000168 <__aeabi_dsub>
 80116d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80116d8:	f7ee fd46 	bl	8000168 <__aeabi_dsub>
 80116dc:	4602      	mov	r2, r0
 80116de:	460b      	mov	r3, r1
 80116e0:	4650      	mov	r0, sl
 80116e2:	4659      	mov	r1, fp
 80116e4:	e618      	b.n	8011318 <__ieee754_pow+0x340>
 80116e6:	2400      	movs	r4, #0
 80116e8:	e68a      	b.n	8011400 <__ieee754_pow+0x428>
 80116ea:	2601      	movs	r6, #1
 80116ec:	e6a0      	b.n	8011430 <__ieee754_pow+0x458>
 80116ee:	bf00      	nop
 80116f0:	4a454eef 	.word	0x4a454eef
 80116f4:	3fca7e28 	.word	0x3fca7e28
 80116f8:	93c9db65 	.word	0x93c9db65
 80116fc:	3fcd864a 	.word	0x3fcd864a
 8011700:	a91d4101 	.word	0xa91d4101
 8011704:	3fd17460 	.word	0x3fd17460
 8011708:	518f264d 	.word	0x518f264d
 801170c:	3fd55555 	.word	0x3fd55555
 8011710:	db6fabff 	.word	0xdb6fabff
 8011714:	3fdb6db6 	.word	0x3fdb6db6
 8011718:	33333303 	.word	0x33333303
 801171c:	3fe33333 	.word	0x3fe33333
 8011720:	e0000000 	.word	0xe0000000
 8011724:	3feec709 	.word	0x3feec709
 8011728:	dc3a03fd 	.word	0xdc3a03fd
 801172c:	3feec709 	.word	0x3feec709
 8011730:	145b01f5 	.word	0x145b01f5
 8011734:	be3e2fe0 	.word	0xbe3e2fe0
 8011738:	7ff00000 	.word	0x7ff00000
 801173c:	43400000 	.word	0x43400000
 8011740:	0003988e 	.word	0x0003988e
 8011744:	000bb679 	.word	0x000bb679
 8011748:	080122d0 	.word	0x080122d0
 801174c:	3ff00000 	.word	0x3ff00000
 8011750:	40080000 	.word	0x40080000
 8011754:	080122b0 	.word	0x080122b0
 8011758:	080122c0 	.word	0x080122c0
 801175c:	a39a      	add	r3, pc, #616	@ (adr r3, 80119c8 <__ieee754_pow+0x9f0>)
 801175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011762:	4630      	mov	r0, r6
 8011764:	4639      	mov	r1, r7
 8011766:	f7ee fd01 	bl	800016c <__adddf3>
 801176a:	4642      	mov	r2, r8
 801176c:	e9cd 0100 	strd	r0, r1, [sp]
 8011770:	464b      	mov	r3, r9
 8011772:	4620      	mov	r0, r4
 8011774:	4629      	mov	r1, r5
 8011776:	f7ee fcf7 	bl	8000168 <__aeabi_dsub>
 801177a:	4602      	mov	r2, r0
 801177c:	460b      	mov	r3, r1
 801177e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011782:	f7ef f939 	bl	80009f8 <__aeabi_dcmpgt>
 8011786:	2800      	cmp	r0, #0
 8011788:	f47f ae09 	bne.w	801139e <__ieee754_pow+0x3c6>
 801178c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011790:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8011794:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8011798:	fa43 fa0a 	asr.w	sl, r3, sl
 801179c:	44da      	add	sl, fp
 801179e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80117a2:	489b      	ldr	r0, [pc, #620]	@ (8011a10 <__ieee754_pow+0xa38>)
 80117a4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80117a8:	4108      	asrs	r0, r1
 80117aa:	ea00 030a 	and.w	r3, r0, sl
 80117ae:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80117b2:	f1c1 0114 	rsb	r1, r1, #20
 80117b6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80117ba:	4640      	mov	r0, r8
 80117bc:	fa4a fa01 	asr.w	sl, sl, r1
 80117c0:	f1bb 0f00 	cmp.w	fp, #0
 80117c4:	4649      	mov	r1, r9
 80117c6:	f04f 0200 	mov.w	r2, #0
 80117ca:	bfb8      	it	lt
 80117cc:	f1ca 0a00 	rsblt	sl, sl, #0
 80117d0:	f7ee fcca 	bl	8000168 <__aeabi_dsub>
 80117d4:	4680      	mov	r8, r0
 80117d6:	4689      	mov	r9, r1
 80117d8:	2400      	movs	r4, #0
 80117da:	4632      	mov	r2, r6
 80117dc:	463b      	mov	r3, r7
 80117de:	4640      	mov	r0, r8
 80117e0:	4649      	mov	r1, r9
 80117e2:	f7ee fcc3 	bl	800016c <__adddf3>
 80117e6:	a37a      	add	r3, pc, #488	@ (adr r3, 80119d0 <__ieee754_pow+0x9f8>)
 80117e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ec:	4620      	mov	r0, r4
 80117ee:	460d      	mov	r5, r1
 80117f0:	f7ee fe72 	bl	80004d8 <__aeabi_dmul>
 80117f4:	4642      	mov	r2, r8
 80117f6:	464b      	mov	r3, r9
 80117f8:	e9cd 0100 	strd	r0, r1, [sp]
 80117fc:	4620      	mov	r0, r4
 80117fe:	4629      	mov	r1, r5
 8011800:	f7ee fcb2 	bl	8000168 <__aeabi_dsub>
 8011804:	4602      	mov	r2, r0
 8011806:	460b      	mov	r3, r1
 8011808:	4630      	mov	r0, r6
 801180a:	4639      	mov	r1, r7
 801180c:	f7ee fcac 	bl	8000168 <__aeabi_dsub>
 8011810:	a371      	add	r3, pc, #452	@ (adr r3, 80119d8 <__ieee754_pow+0xa00>)
 8011812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011816:	f7ee fe5f 	bl	80004d8 <__aeabi_dmul>
 801181a:	a371      	add	r3, pc, #452	@ (adr r3, 80119e0 <__ieee754_pow+0xa08>)
 801181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011820:	4680      	mov	r8, r0
 8011822:	4689      	mov	r9, r1
 8011824:	4620      	mov	r0, r4
 8011826:	4629      	mov	r1, r5
 8011828:	f7ee fe56 	bl	80004d8 <__aeabi_dmul>
 801182c:	4602      	mov	r2, r0
 801182e:	460b      	mov	r3, r1
 8011830:	4640      	mov	r0, r8
 8011832:	4649      	mov	r1, r9
 8011834:	f7ee fc9a 	bl	800016c <__adddf3>
 8011838:	4604      	mov	r4, r0
 801183a:	460d      	mov	r5, r1
 801183c:	4602      	mov	r2, r0
 801183e:	460b      	mov	r3, r1
 8011840:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011844:	f7ee fc92 	bl	800016c <__adddf3>
 8011848:	e9dd 2300 	ldrd	r2, r3, [sp]
 801184c:	4680      	mov	r8, r0
 801184e:	4689      	mov	r9, r1
 8011850:	f7ee fc8a 	bl	8000168 <__aeabi_dsub>
 8011854:	4602      	mov	r2, r0
 8011856:	460b      	mov	r3, r1
 8011858:	4620      	mov	r0, r4
 801185a:	4629      	mov	r1, r5
 801185c:	f7ee fc84 	bl	8000168 <__aeabi_dsub>
 8011860:	4642      	mov	r2, r8
 8011862:	4606      	mov	r6, r0
 8011864:	460f      	mov	r7, r1
 8011866:	464b      	mov	r3, r9
 8011868:	4640      	mov	r0, r8
 801186a:	4649      	mov	r1, r9
 801186c:	f7ee fe34 	bl	80004d8 <__aeabi_dmul>
 8011870:	a35d      	add	r3, pc, #372	@ (adr r3, 80119e8 <__ieee754_pow+0xa10>)
 8011872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011876:	4604      	mov	r4, r0
 8011878:	460d      	mov	r5, r1
 801187a:	f7ee fe2d 	bl	80004d8 <__aeabi_dmul>
 801187e:	a35c      	add	r3, pc, #368	@ (adr r3, 80119f0 <__ieee754_pow+0xa18>)
 8011880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011884:	f7ee fc70 	bl	8000168 <__aeabi_dsub>
 8011888:	4622      	mov	r2, r4
 801188a:	462b      	mov	r3, r5
 801188c:	f7ee fe24 	bl	80004d8 <__aeabi_dmul>
 8011890:	a359      	add	r3, pc, #356	@ (adr r3, 80119f8 <__ieee754_pow+0xa20>)
 8011892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011896:	f7ee fc69 	bl	800016c <__adddf3>
 801189a:	4622      	mov	r2, r4
 801189c:	462b      	mov	r3, r5
 801189e:	f7ee fe1b 	bl	80004d8 <__aeabi_dmul>
 80118a2:	a357      	add	r3, pc, #348	@ (adr r3, 8011a00 <__ieee754_pow+0xa28>)
 80118a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a8:	f7ee fc5e 	bl	8000168 <__aeabi_dsub>
 80118ac:	4622      	mov	r2, r4
 80118ae:	462b      	mov	r3, r5
 80118b0:	f7ee fe12 	bl	80004d8 <__aeabi_dmul>
 80118b4:	a354      	add	r3, pc, #336	@ (adr r3, 8011a08 <__ieee754_pow+0xa30>)
 80118b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ba:	f7ee fc57 	bl	800016c <__adddf3>
 80118be:	4622      	mov	r2, r4
 80118c0:	462b      	mov	r3, r5
 80118c2:	f7ee fe09 	bl	80004d8 <__aeabi_dmul>
 80118c6:	4602      	mov	r2, r0
 80118c8:	460b      	mov	r3, r1
 80118ca:	4640      	mov	r0, r8
 80118cc:	4649      	mov	r1, r9
 80118ce:	f7ee fc4b 	bl	8000168 <__aeabi_dsub>
 80118d2:	4604      	mov	r4, r0
 80118d4:	460d      	mov	r5, r1
 80118d6:	4602      	mov	r2, r0
 80118d8:	460b      	mov	r3, r1
 80118da:	4640      	mov	r0, r8
 80118dc:	4649      	mov	r1, r9
 80118de:	f7ee fdfb 	bl	80004d8 <__aeabi_dmul>
 80118e2:	2200      	movs	r2, #0
 80118e4:	e9cd 0100 	strd	r0, r1, [sp]
 80118e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80118ec:	4620      	mov	r0, r4
 80118ee:	4629      	mov	r1, r5
 80118f0:	f7ee fc3a 	bl	8000168 <__aeabi_dsub>
 80118f4:	4602      	mov	r2, r0
 80118f6:	460b      	mov	r3, r1
 80118f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80118fc:	f7ee ff16 	bl	800072c <__aeabi_ddiv>
 8011900:	4632      	mov	r2, r6
 8011902:	4604      	mov	r4, r0
 8011904:	460d      	mov	r5, r1
 8011906:	463b      	mov	r3, r7
 8011908:	4640      	mov	r0, r8
 801190a:	4649      	mov	r1, r9
 801190c:	f7ee fde4 	bl	80004d8 <__aeabi_dmul>
 8011910:	4632      	mov	r2, r6
 8011912:	463b      	mov	r3, r7
 8011914:	f7ee fc2a 	bl	800016c <__adddf3>
 8011918:	4602      	mov	r2, r0
 801191a:	460b      	mov	r3, r1
 801191c:	4620      	mov	r0, r4
 801191e:	4629      	mov	r1, r5
 8011920:	f7ee fc22 	bl	8000168 <__aeabi_dsub>
 8011924:	4642      	mov	r2, r8
 8011926:	464b      	mov	r3, r9
 8011928:	f7ee fc1e 	bl	8000168 <__aeabi_dsub>
 801192c:	4602      	mov	r2, r0
 801192e:	460b      	mov	r3, r1
 8011930:	2000      	movs	r0, #0
 8011932:	4938      	ldr	r1, [pc, #224]	@ (8011a14 <__ieee754_pow+0xa3c>)
 8011934:	f7ee fc18 	bl	8000168 <__aeabi_dsub>
 8011938:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801193c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8011940:	da2e      	bge.n	80119a0 <__ieee754_pow+0x9c8>
 8011942:	4652      	mov	r2, sl
 8011944:	f000 f874 	bl	8011a30 <scalbn>
 8011948:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801194c:	f7ff bbed 	b.w	801112a <__ieee754_pow+0x152>
 8011950:	4c31      	ldr	r4, [pc, #196]	@ (8011a18 <__ieee754_pow+0xa40>)
 8011952:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011956:	42a3      	cmp	r3, r4
 8011958:	d91a      	bls.n	8011990 <__ieee754_pow+0x9b8>
 801195a:	4b30      	ldr	r3, [pc, #192]	@ (8011a1c <__ieee754_pow+0xa44>)
 801195c:	440b      	add	r3, r1
 801195e:	4303      	orrs	r3, r0
 8011960:	d009      	beq.n	8011976 <__ieee754_pow+0x99e>
 8011962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011966:	2200      	movs	r2, #0
 8011968:	2300      	movs	r3, #0
 801196a:	f7ef f827 	bl	80009bc <__aeabi_dcmplt>
 801196e:	3800      	subs	r0, #0
 8011970:	bf18      	it	ne
 8011972:	2001      	movne	r0, #1
 8011974:	e444      	b.n	8011200 <__ieee754_pow+0x228>
 8011976:	4642      	mov	r2, r8
 8011978:	464b      	mov	r3, r9
 801197a:	f7ee fbf5 	bl	8000168 <__aeabi_dsub>
 801197e:	4632      	mov	r2, r6
 8011980:	463b      	mov	r3, r7
 8011982:	f7ef f82f 	bl	80009e4 <__aeabi_dcmpge>
 8011986:	2800      	cmp	r0, #0
 8011988:	d1eb      	bne.n	8011962 <__ieee754_pow+0x98a>
 801198a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8011a20 <__ieee754_pow+0xa48>
 801198e:	e6fd      	b.n	801178c <__ieee754_pow+0x7b4>
 8011990:	469a      	mov	sl, r3
 8011992:	4b24      	ldr	r3, [pc, #144]	@ (8011a24 <__ieee754_pow+0xa4c>)
 8011994:	459a      	cmp	sl, r3
 8011996:	f63f aef9 	bhi.w	801178c <__ieee754_pow+0x7b4>
 801199a:	f8dd a010 	ldr.w	sl, [sp, #16]
 801199e:	e71b      	b.n	80117d8 <__ieee754_pow+0x800>
 80119a0:	4621      	mov	r1, r4
 80119a2:	e7d1      	b.n	8011948 <__ieee754_pow+0x970>
 80119a4:	2000      	movs	r0, #0
 80119a6:	491b      	ldr	r1, [pc, #108]	@ (8011a14 <__ieee754_pow+0xa3c>)
 80119a8:	f7ff bb34 	b.w	8011014 <__ieee754_pow+0x3c>
 80119ac:	2000      	movs	r0, #0
 80119ae:	2100      	movs	r1, #0
 80119b0:	f7ff bb30 	b.w	8011014 <__ieee754_pow+0x3c>
 80119b4:	4650      	mov	r0, sl
 80119b6:	4659      	mov	r1, fp
 80119b8:	f7ff bb2c 	b.w	8011014 <__ieee754_pow+0x3c>
 80119bc:	460c      	mov	r4, r1
 80119be:	f7ff bb79 	b.w	80110b4 <__ieee754_pow+0xdc>
 80119c2:	2400      	movs	r4, #0
 80119c4:	f7ff bb64 	b.w	8011090 <__ieee754_pow+0xb8>
 80119c8:	652b82fe 	.word	0x652b82fe
 80119cc:	3c971547 	.word	0x3c971547
 80119d0:	00000000 	.word	0x00000000
 80119d4:	3fe62e43 	.word	0x3fe62e43
 80119d8:	fefa39ef 	.word	0xfefa39ef
 80119dc:	3fe62e42 	.word	0x3fe62e42
 80119e0:	0ca86c39 	.word	0x0ca86c39
 80119e4:	be205c61 	.word	0xbe205c61
 80119e8:	72bea4d0 	.word	0x72bea4d0
 80119ec:	3e663769 	.word	0x3e663769
 80119f0:	c5d26bf1 	.word	0xc5d26bf1
 80119f4:	3ebbbd41 	.word	0x3ebbbd41
 80119f8:	af25de2c 	.word	0xaf25de2c
 80119fc:	3f11566a 	.word	0x3f11566a
 8011a00:	16bebd93 	.word	0x16bebd93
 8011a04:	3f66c16c 	.word	0x3f66c16c
 8011a08:	5555553e 	.word	0x5555553e
 8011a0c:	3fc55555 	.word	0x3fc55555
 8011a10:	fff00000 	.word	0xfff00000
 8011a14:	3ff00000 	.word	0x3ff00000
 8011a18:	4090cbff 	.word	0x4090cbff
 8011a1c:	3f6f3400 	.word	0x3f6f3400
 8011a20:	4090cc00 	.word	0x4090cc00
 8011a24:	3fe00000 	.word	0x3fe00000

08011a28 <fabs>:
 8011a28:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011a2c:	4619      	mov	r1, r3
 8011a2e:	4770      	bx	lr

08011a30 <scalbn>:
 8011a30:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8011a34:	4616      	mov	r6, r2
 8011a36:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011a3a:	4683      	mov	fp, r0
 8011a3c:	468c      	mov	ip, r1
 8011a3e:	460b      	mov	r3, r1
 8011a40:	b982      	cbnz	r2, 8011a64 <scalbn+0x34>
 8011a42:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011a46:	4303      	orrs	r3, r0
 8011a48:	d039      	beq.n	8011abe <scalbn+0x8e>
 8011a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8011b08 <scalbn+0xd8>)
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	f7ee fd43 	bl	80004d8 <__aeabi_dmul>
 8011a52:	4b2e      	ldr	r3, [pc, #184]	@ (8011b0c <scalbn+0xdc>)
 8011a54:	4683      	mov	fp, r0
 8011a56:	429e      	cmp	r6, r3
 8011a58:	468c      	mov	ip, r1
 8011a5a:	da0d      	bge.n	8011a78 <scalbn+0x48>
 8011a5c:	a326      	add	r3, pc, #152	@ (adr r3, 8011af8 <scalbn+0xc8>)
 8011a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a62:	e01b      	b.n	8011a9c <scalbn+0x6c>
 8011a64:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8011a68:	42ba      	cmp	r2, r7
 8011a6a:	d109      	bne.n	8011a80 <scalbn+0x50>
 8011a6c:	4602      	mov	r2, r0
 8011a6e:	f7ee fb7d 	bl	800016c <__adddf3>
 8011a72:	4683      	mov	fp, r0
 8011a74:	468c      	mov	ip, r1
 8011a76:	e022      	b.n	8011abe <scalbn+0x8e>
 8011a78:	460b      	mov	r3, r1
 8011a7a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011a7e:	3a36      	subs	r2, #54	@ 0x36
 8011a80:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011a84:	428e      	cmp	r6, r1
 8011a86:	dd0c      	ble.n	8011aa2 <scalbn+0x72>
 8011a88:	a31d      	add	r3, pc, #116	@ (adr r3, 8011b00 <scalbn+0xd0>)
 8011a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a8e:	461c      	mov	r4, r3
 8011a90:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8011a94:	f361 74df 	bfi	r4, r1, #31, #1
 8011a98:	4621      	mov	r1, r4
 8011a9a:	481d      	ldr	r0, [pc, #116]	@ (8011b10 <scalbn+0xe0>)
 8011a9c:	f7ee fd1c 	bl	80004d8 <__aeabi_dmul>
 8011aa0:	e7e7      	b.n	8011a72 <scalbn+0x42>
 8011aa2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011aa6:	4432      	add	r2, r6
 8011aa8:	428a      	cmp	r2, r1
 8011aaa:	dced      	bgt.n	8011a88 <scalbn+0x58>
 8011aac:	2a00      	cmp	r2, #0
 8011aae:	dd0a      	ble.n	8011ac6 <scalbn+0x96>
 8011ab0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011ab4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011ab8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011abc:	46ac      	mov	ip, r5
 8011abe:	4658      	mov	r0, fp
 8011ac0:	4661      	mov	r1, ip
 8011ac2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8011ac6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8011aca:	da09      	bge.n	8011ae0 <scalbn+0xb0>
 8011acc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8011ad0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8011ad4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8011ad8:	480e      	ldr	r0, [pc, #56]	@ (8011b14 <scalbn+0xe4>)
 8011ada:	f041 011f 	orr.w	r1, r1, #31
 8011ade:	e7bd      	b.n	8011a5c <scalbn+0x2c>
 8011ae0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011ae4:	3236      	adds	r2, #54	@ 0x36
 8011ae6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011aea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011aee:	4658      	mov	r0, fp
 8011af0:	4629      	mov	r1, r5
 8011af2:	2200      	movs	r2, #0
 8011af4:	4b08      	ldr	r3, [pc, #32]	@ (8011b18 <scalbn+0xe8>)
 8011af6:	e7d1      	b.n	8011a9c <scalbn+0x6c>
 8011af8:	c2f8f359 	.word	0xc2f8f359
 8011afc:	01a56e1f 	.word	0x01a56e1f
 8011b00:	8800759c 	.word	0x8800759c
 8011b04:	7e37e43c 	.word	0x7e37e43c
 8011b08:	43500000 	.word	0x43500000
 8011b0c:	ffff3cb0 	.word	0xffff3cb0
 8011b10:	8800759c 	.word	0x8800759c
 8011b14:	c2f8f359 	.word	0xc2f8f359
 8011b18:	3c900000 	.word	0x3c900000

08011b1c <with_errno>:
 8011b1c:	b570      	push	{r4, r5, r6, lr}
 8011b1e:	4604      	mov	r4, r0
 8011b20:	460d      	mov	r5, r1
 8011b22:	4616      	mov	r6, r2
 8011b24:	f7fd fa30 	bl	800ef88 <__errno>
 8011b28:	4629      	mov	r1, r5
 8011b2a:	6006      	str	r6, [r0, #0]
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	bd70      	pop	{r4, r5, r6, pc}

08011b30 <xflow>:
 8011b30:	b513      	push	{r0, r1, r4, lr}
 8011b32:	4604      	mov	r4, r0
 8011b34:	4619      	mov	r1, r3
 8011b36:	4610      	mov	r0, r2
 8011b38:	b10c      	cbz	r4, 8011b3e <xflow+0xe>
 8011b3a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011b3e:	e9cd 2300 	strd	r2, r3, [sp]
 8011b42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b46:	f7ee fcc7 	bl	80004d8 <__aeabi_dmul>
 8011b4a:	2222      	movs	r2, #34	@ 0x22
 8011b4c:	b002      	add	sp, #8
 8011b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b52:	f7ff bfe3 	b.w	8011b1c <with_errno>

08011b56 <__math_uflow>:
 8011b56:	2200      	movs	r2, #0
 8011b58:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8011b5c:	f7ff bfe8 	b.w	8011b30 <xflow>

08011b60 <__math_oflow>:
 8011b60:	2200      	movs	r2, #0
 8011b62:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8011b66:	f7ff bfe3 	b.w	8011b30 <xflow>
	...

08011b6c <__ieee754_sqrt>:
 8011b6c:	4a67      	ldr	r2, [pc, #412]	@ (8011d0c <__ieee754_sqrt+0x1a0>)
 8011b6e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b72:	438a      	bics	r2, r1
 8011b74:	4606      	mov	r6, r0
 8011b76:	460f      	mov	r7, r1
 8011b78:	460b      	mov	r3, r1
 8011b7a:	4604      	mov	r4, r0
 8011b7c:	d10e      	bne.n	8011b9c <__ieee754_sqrt+0x30>
 8011b7e:	4602      	mov	r2, r0
 8011b80:	f7ee fcaa 	bl	80004d8 <__aeabi_dmul>
 8011b84:	4602      	mov	r2, r0
 8011b86:	460b      	mov	r3, r1
 8011b88:	4630      	mov	r0, r6
 8011b8a:	4639      	mov	r1, r7
 8011b8c:	f7ee faee 	bl	800016c <__adddf3>
 8011b90:	4606      	mov	r6, r0
 8011b92:	460f      	mov	r7, r1
 8011b94:	4630      	mov	r0, r6
 8011b96:	4639      	mov	r1, r7
 8011b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b9c:	2900      	cmp	r1, #0
 8011b9e:	dc0c      	bgt.n	8011bba <__ieee754_sqrt+0x4e>
 8011ba0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8011ba4:	4302      	orrs	r2, r0
 8011ba6:	d0f5      	beq.n	8011b94 <__ieee754_sqrt+0x28>
 8011ba8:	b189      	cbz	r1, 8011bce <__ieee754_sqrt+0x62>
 8011baa:	4602      	mov	r2, r0
 8011bac:	f7ee fadc 	bl	8000168 <__aeabi_dsub>
 8011bb0:	4602      	mov	r2, r0
 8011bb2:	460b      	mov	r3, r1
 8011bb4:	f7ee fdba 	bl	800072c <__aeabi_ddiv>
 8011bb8:	e7ea      	b.n	8011b90 <__ieee754_sqrt+0x24>
 8011bba:	150a      	asrs	r2, r1, #20
 8011bbc:	d115      	bne.n	8011bea <__ieee754_sqrt+0x7e>
 8011bbe:	2100      	movs	r1, #0
 8011bc0:	e009      	b.n	8011bd6 <__ieee754_sqrt+0x6a>
 8011bc2:	0ae3      	lsrs	r3, r4, #11
 8011bc4:	3a15      	subs	r2, #21
 8011bc6:	0564      	lsls	r4, r4, #21
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d0fa      	beq.n	8011bc2 <__ieee754_sqrt+0x56>
 8011bcc:	e7f7      	b.n	8011bbe <__ieee754_sqrt+0x52>
 8011bce:	460a      	mov	r2, r1
 8011bd0:	e7fa      	b.n	8011bc8 <__ieee754_sqrt+0x5c>
 8011bd2:	005b      	lsls	r3, r3, #1
 8011bd4:	3101      	adds	r1, #1
 8011bd6:	02d8      	lsls	r0, r3, #11
 8011bd8:	d5fb      	bpl.n	8011bd2 <__ieee754_sqrt+0x66>
 8011bda:	1e48      	subs	r0, r1, #1
 8011bdc:	1a12      	subs	r2, r2, r0
 8011bde:	f1c1 0020 	rsb	r0, r1, #32
 8011be2:	fa24 f000 	lsr.w	r0, r4, r0
 8011be6:	4303      	orrs	r3, r0
 8011be8:	408c      	lsls	r4, r1
 8011bea:	2600      	movs	r6, #0
 8011bec:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8011bf0:	2116      	movs	r1, #22
 8011bf2:	07d2      	lsls	r2, r2, #31
 8011bf4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8011bf8:	4632      	mov	r2, r6
 8011bfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011bfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c02:	bf5c      	itt	pl
 8011c04:	005b      	lslpl	r3, r3, #1
 8011c06:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8011c0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011c0e:	bf58      	it	pl
 8011c10:	0064      	lslpl	r4, r4, #1
 8011c12:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8011c16:	107f      	asrs	r7, r7, #1
 8011c18:	0064      	lsls	r4, r4, #1
 8011c1a:	1815      	adds	r5, r2, r0
 8011c1c:	429d      	cmp	r5, r3
 8011c1e:	bfde      	ittt	le
 8011c20:	182a      	addle	r2, r5, r0
 8011c22:	1b5b      	suble	r3, r3, r5
 8011c24:	1836      	addle	r6, r6, r0
 8011c26:	0fe5      	lsrs	r5, r4, #31
 8011c28:	3901      	subs	r1, #1
 8011c2a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8011c2e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8011c32:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8011c36:	d1f0      	bne.n	8011c1a <__ieee754_sqrt+0xae>
 8011c38:	460d      	mov	r5, r1
 8011c3a:	f04f 0a20 	mov.w	sl, #32
 8011c3e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8011c42:	429a      	cmp	r2, r3
 8011c44:	eb01 0c00 	add.w	ip, r1, r0
 8011c48:	db02      	blt.n	8011c50 <__ieee754_sqrt+0xe4>
 8011c4a:	d113      	bne.n	8011c74 <__ieee754_sqrt+0x108>
 8011c4c:	45a4      	cmp	ip, r4
 8011c4e:	d811      	bhi.n	8011c74 <__ieee754_sqrt+0x108>
 8011c50:	f1bc 0f00 	cmp.w	ip, #0
 8011c54:	eb0c 0100 	add.w	r1, ip, r0
 8011c58:	da42      	bge.n	8011ce0 <__ieee754_sqrt+0x174>
 8011c5a:	2900      	cmp	r1, #0
 8011c5c:	db40      	blt.n	8011ce0 <__ieee754_sqrt+0x174>
 8011c5e:	f102 0e01 	add.w	lr, r2, #1
 8011c62:	1a9b      	subs	r3, r3, r2
 8011c64:	4672      	mov	r2, lr
 8011c66:	45a4      	cmp	ip, r4
 8011c68:	bf88      	it	hi
 8011c6a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011c6e:	eba4 040c 	sub.w	r4, r4, ip
 8011c72:	4405      	add	r5, r0
 8011c74:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8011c78:	f1ba 0a01 	subs.w	sl, sl, #1
 8011c7c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8011c80:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8011c84:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8011c88:	d1db      	bne.n	8011c42 <__ieee754_sqrt+0xd6>
 8011c8a:	431c      	orrs	r4, r3
 8011c8c:	d01a      	beq.n	8011cc4 <__ieee754_sqrt+0x158>
 8011c8e:	4c20      	ldr	r4, [pc, #128]	@ (8011d10 <__ieee754_sqrt+0x1a4>)
 8011c90:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8011d14 <__ieee754_sqrt+0x1a8>
 8011c94:	e9d4 0100 	ldrd	r0, r1, [r4]
 8011c98:	e9db 2300 	ldrd	r2, r3, [fp]
 8011c9c:	f7ee fa64 	bl	8000168 <__aeabi_dsub>
 8011ca0:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	460b      	mov	r3, r1
 8011ca8:	4640      	mov	r0, r8
 8011caa:	4649      	mov	r1, r9
 8011cac:	f7ee fe90 	bl	80009d0 <__aeabi_dcmple>
 8011cb0:	b140      	cbz	r0, 8011cc4 <__ieee754_sqrt+0x158>
 8011cb2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8011cb6:	e9db 2300 	ldrd	r2, r3, [fp]
 8011cba:	f1b5 3fff 	cmp.w	r5, #4294967295
 8011cbe:	d111      	bne.n	8011ce4 <__ieee754_sqrt+0x178>
 8011cc0:	4655      	mov	r5, sl
 8011cc2:	3601      	adds	r6, #1
 8011cc4:	1072      	asrs	r2, r6, #1
 8011cc6:	086b      	lsrs	r3, r5, #1
 8011cc8:	07f1      	lsls	r1, r6, #31
 8011cca:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8011cce:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8011cd2:	bf48      	it	mi
 8011cd4:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8011cd8:	4618      	mov	r0, r3
 8011cda:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8011cde:	e757      	b.n	8011b90 <__ieee754_sqrt+0x24>
 8011ce0:	4696      	mov	lr, r2
 8011ce2:	e7be      	b.n	8011c62 <__ieee754_sqrt+0xf6>
 8011ce4:	f7ee fa42 	bl	800016c <__adddf3>
 8011ce8:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011cec:	4602      	mov	r2, r0
 8011cee:	460b      	mov	r3, r1
 8011cf0:	4640      	mov	r0, r8
 8011cf2:	4649      	mov	r1, r9
 8011cf4:	f7ee fe62 	bl	80009bc <__aeabi_dcmplt>
 8011cf8:	b120      	cbz	r0, 8011d04 <__ieee754_sqrt+0x198>
 8011cfa:	1ca8      	adds	r0, r5, #2
 8011cfc:	bf08      	it	eq
 8011cfe:	3601      	addeq	r6, #1
 8011d00:	3502      	adds	r5, #2
 8011d02:	e7df      	b.n	8011cc4 <__ieee754_sqrt+0x158>
 8011d04:	1c6b      	adds	r3, r5, #1
 8011d06:	f023 0501 	bic.w	r5, r3, #1
 8011d0a:	e7db      	b.n	8011cc4 <__ieee754_sqrt+0x158>
 8011d0c:	7ff00000 	.word	0x7ff00000
 8011d10:	20000350 	.word	0x20000350
 8011d14:	20000348 	.word	0x20000348

08011d18 <_init>:
 8011d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d1a:	bf00      	nop
 8011d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d1e:	bc08      	pop	{r3}
 8011d20:	469e      	mov	lr, r3
 8011d22:	4770      	bx	lr

08011d24 <_fini>:
 8011d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d26:	bf00      	nop
 8011d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d2a:	bc08      	pop	{r3}
 8011d2c:	469e      	mov	lr, r3
 8011d2e:	4770      	bx	lr
